/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AbortEnvironmentUpdateMessage;
import org.openapitools.client.model.ApplicationDescriptionMessage;
import org.openapitools.client.model.ApplicationDescriptionsMessage;
import org.openapitools.client.model.ApplicationResourceLifecycleDescriptionMessage;
import org.openapitools.client.model.ApplicationVersionDescriptionMessage;
import org.openapitools.client.model.ApplicationVersionDescriptionsMessage;
import org.openapitools.client.model.ApplyEnvironmentManagedActionRequest;
import org.openapitools.client.model.ApplyEnvironmentManagedActionResult;
import org.openapitools.client.model.AssociateEnvironmentOperationsRoleMessage;
import org.openapitools.client.model.CheckDNSAvailabilityMessage;
import org.openapitools.client.model.CheckDNSAvailabilityResultMessage;
import org.openapitools.client.model.ComposeEnvironmentsMessage;
import org.openapitools.client.model.ConfigurationOptionSetting;
import org.openapitools.client.model.ConfigurationOptionsDescription;
import org.openapitools.client.model.ConfigurationSettingsDescription;
import org.openapitools.client.model.ConfigurationSettingsDescriptions;
import org.openapitools.client.model.ConfigurationSettingsValidationMessages;
import org.openapitools.client.model.CreateApplicationMessage;
import org.openapitools.client.model.CreateApplicationVersionMessage;
import org.openapitools.client.model.CreateConfigurationTemplateMessage;
import org.openapitools.client.model.CreateEnvironmentMessage;
import org.openapitools.client.model.CreatePlatformVersionRequest;
import org.openapitools.client.model.CreatePlatformVersionResult;
import org.openapitools.client.model.CreateStorageLocationResultMessage;
import org.openapitools.client.model.DeleteApplicationMessage;
import org.openapitools.client.model.DeleteApplicationVersionMessage;
import org.openapitools.client.model.DeleteConfigurationTemplateMessage;
import org.openapitools.client.model.DeleteEnvironmentConfigurationMessage;
import org.openapitools.client.model.DeletePlatformVersionRequest;
import org.openapitools.client.model.DeletePlatformVersionResult;
import org.openapitools.client.model.DescribeAccountAttributesResult;
import org.openapitools.client.model.DescribeApplicationVersionsMessage;
import org.openapitools.client.model.DescribeApplicationsMessage;
import org.openapitools.client.model.DescribeConfigurationOptionsMessage;
import org.openapitools.client.model.DescribeConfigurationSettingsMessage;
import org.openapitools.client.model.DescribeEnvironmentHealthRequest;
import org.openapitools.client.model.DescribeEnvironmentHealthResult;
import org.openapitools.client.model.DescribeEnvironmentManagedActionHistoryRequest;
import org.openapitools.client.model.DescribeEnvironmentManagedActionHistoryResult;
import org.openapitools.client.model.DescribeEnvironmentManagedActionsRequest;
import org.openapitools.client.model.DescribeEnvironmentManagedActionsResult;
import org.openapitools.client.model.DescribeEnvironmentResourcesMessage;
import org.openapitools.client.model.DescribeEnvironmentsMessage;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeInstancesHealthRequest;
import org.openapitools.client.model.DescribeInstancesHealthResult;
import org.openapitools.client.model.DescribePlatformVersionRequest;
import org.openapitools.client.model.DescribePlatformVersionResult;
import org.openapitools.client.model.DisassociateEnvironmentOperationsRoleMessage;
import org.openapitools.client.model.EnvironmentDescription;
import org.openapitools.client.model.EnvironmentDescriptionsMessage;
import org.openapitools.client.model.EnvironmentHealthAttribute;
import org.openapitools.client.model.EnvironmentResourceDescriptionsMessage;
import org.openapitools.client.model.EventDescriptionsMessage;
import org.openapitools.client.model.GETCreateApplicationResourceLifecycleConfigParameter;
import org.openapitools.client.model.GETCreateApplicationVersionBuildConfigurationParameter;
import org.openapitools.client.model.GETCreateApplicationVersionSourceBuildInformationParameter;
import org.openapitools.client.model.GETCreateApplicationVersionSourceBundleParameter;
import org.openapitools.client.model.GETCreateConfigurationTemplateSourceConfigurationParameter;
import org.openapitools.client.model.GETCreateEnvironmentTierParameter;
import org.openapitools.client.model.InstancesHealthAttribute;
import org.openapitools.client.model.ListAvailableSolutionStacksResultMessage;
import org.openapitools.client.model.ListPlatformBranchesRequest;
import org.openapitools.client.model.ListPlatformBranchesResult;
import org.openapitools.client.model.ListPlatformVersionsRequest;
import org.openapitools.client.model.ListPlatformVersionsResult;
import org.openapitools.client.model.ListTagsForResourceMessage;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OptionSpecification;
import org.openapitools.client.model.PlatformFilter;
import org.openapitools.client.model.RebuildEnvironmentMessage;
import org.openapitools.client.model.RequestEnvironmentInfoMessage;
import org.openapitools.client.model.ResourceTagsDescriptionMessage;
import org.openapitools.client.model.RestartAppServerMessage;
import org.openapitools.client.model.RetrieveEnvironmentInfoMessage;
import org.openapitools.client.model.RetrieveEnvironmentInfoResultMessage;
import org.openapitools.client.model.SearchFilter;
import org.openapitools.client.model.SwapEnvironmentCNAMEsMessage;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TerminateEnvironmentMessage;
import org.openapitools.client.model.UpdateApplicationMessage;
import org.openapitools.client.model.UpdateApplicationResourceLifecycleMessage;
import org.openapitools.client.model.UpdateApplicationVersionMessage;
import org.openapitools.client.model.UpdateConfigurationTemplateMessage;
import org.openapitools.client.model.UpdateEnvironmentMessage;
import org.openapitools.client.model.UpdateTagsForResourceMessage;
import org.openapitools.client.model.ValidateConfigurationSettingsMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETAbortEnvironmentUpdate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId This specifies the ID of the environment with the in-progress update that you want to cancel. (optional)
     * @param environmentName This specifies the name of the environment with the in-progress update that you want to cancel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAbortEnvironmentUpdateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AbortEnvironmentUpdate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAbortEnvironmentUpdateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAbortEnvironmentUpdate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAbortEnvironmentUpdate(Async)");
        }

        return gETAbortEnvironmentUpdateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);

    }

    /**
     * 
     * Cancels in-progress environment configuration update or application version deployment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId This specifies the ID of the environment with the in-progress update that you want to cancel. (optional)
     * @param environmentName This specifies the name of the environment with the in-progress update that you want to cancel. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public void gETAbortEnvironmentUpdate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        gETAbortEnvironmentUpdateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName);
    }

    /**
     * 
     * Cancels in-progress environment configuration update or application version deployment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId This specifies the ID of the environment with the in-progress update that you want to cancel. (optional)
     * @param environmentName This specifies the name of the environment with the in-progress update that you want to cancel. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETAbortEnvironmentUpdateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = gETAbortEnvironmentUpdateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancels in-progress environment configuration update or application version deployment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId This specifies the ID of the environment with the in-progress update that you want to cancel. (optional)
     * @param environmentName This specifies the name of the environment with the in-progress update that you want to cancel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAbortEnvironmentUpdateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAbortEnvironmentUpdateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETApplyEnvironmentManagedAction
     * @param actionId The action ID of the scheduled managed action to execute. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ManagedActionInvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETApplyEnvironmentManagedActionCall(String actionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ApplyEnvironmentManagedAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (actionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActionId", actionId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETApplyEnvironmentManagedActionValidateBeforeCall(String actionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling gETApplyEnvironmentManagedAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETApplyEnvironmentManagedAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETApplyEnvironmentManagedAction(Async)");
        }

        return gETApplyEnvironmentManagedActionCall(actionId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, _callback);

    }

    /**
     * 
     * Applies a scheduled managed action immediately. A managed action can be applied only if its status is &lt;code&gt;Scheduled&lt;/code&gt;. Get the status and action ID of a managed action with &lt;a&gt;DescribeEnvironmentManagedActions&lt;/a&gt;.
     * @param actionId The action ID of the scheduled managed action to execute. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @return ApplyEnvironmentManagedActionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ManagedActionInvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ApplyEnvironmentManagedActionResult gETApplyEnvironmentManagedAction(String actionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId) throws ApiException {
        ApiResponse<ApplyEnvironmentManagedActionResult> localVarResp = gETApplyEnvironmentManagedActionWithHttpInfo(actionId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Applies a scheduled managed action immediately. A managed action can be applied only if its status is &lt;code&gt;Scheduled&lt;/code&gt;. Get the status and action ID of a managed action with &lt;a&gt;DescribeEnvironmentManagedActions&lt;/a&gt;.
     * @param actionId The action ID of the scheduled managed action to execute. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @return ApiResponse&lt;ApplyEnvironmentManagedActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ManagedActionInvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplyEnvironmentManagedActionResult> gETApplyEnvironmentManagedActionWithHttpInfo(String actionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId) throws ApiException {
        okhttp3.Call localVarCall = gETApplyEnvironmentManagedActionValidateBeforeCall(actionId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, null);
        Type localVarReturnType = new TypeToken<ApplyEnvironmentManagedActionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Applies a scheduled managed action immediately. A managed action can be applied only if its status is &lt;code&gt;Scheduled&lt;/code&gt;. Get the status and action ID of a managed action with &lt;a&gt;DescribeEnvironmentManagedActions&lt;/a&gt;.
     * @param actionId The action ID of the scheduled managed action to execute. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ManagedActionInvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETApplyEnvironmentManagedActionAsync(String actionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, final ApiCallback<ApplyEnvironmentManagedActionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETApplyEnvironmentManagedActionValidateBeforeCall(actionId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, _callback);
        Type localVarReturnType = new TypeToken<ApplyEnvironmentManagedActionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAssociateEnvironmentOperationsRole
     * @param environmentName The name of the environment to which to set the operations role. (required)
     * @param operationsRole The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment&#39;s operations role. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAssociateEnvironmentOperationsRoleCall(String environmentName, String operationsRole, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AssociateEnvironmentOperationsRole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (operationsRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationsRole", operationsRole));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAssociateEnvironmentOperationsRoleValidateBeforeCall(String environmentName, String operationsRole, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling gETAssociateEnvironmentOperationsRole(Async)");
        }

        // verify the required parameter 'operationsRole' is set
        if (operationsRole == null) {
            throw new ApiException("Missing the required parameter 'operationsRole' when calling gETAssociateEnvironmentOperationsRole(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAssociateEnvironmentOperationsRole(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAssociateEnvironmentOperationsRole(Async)");
        }

        return gETAssociateEnvironmentOperationsRoleCall(environmentName, operationsRole, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk uses the associated operations role for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param environmentName The name of the environment to which to set the operations role. (required)
     * @param operationsRole The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment&#39;s operations role. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public void gETAssociateEnvironmentOperationsRole(String environmentName, String operationsRole, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETAssociateEnvironmentOperationsRoleWithHttpInfo(environmentName, operationsRole, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk uses the associated operations role for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param environmentName The name of the environment to which to set the operations role. (required)
     * @param operationsRole The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment&#39;s operations role. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETAssociateEnvironmentOperationsRoleWithHttpInfo(String environmentName, String operationsRole, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAssociateEnvironmentOperationsRoleValidateBeforeCall(environmentName, operationsRole, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk uses the associated operations role for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param environmentName The name of the environment to which to set the operations role. (required)
     * @param operationsRole The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment&#39;s operations role. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAssociateEnvironmentOperationsRoleAsync(String environmentName, String operationsRole, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAssociateEnvironmentOperationsRoleValidateBeforeCall(environmentName, operationsRole, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCheckDNSAvailability
     * @param cnAMEPrefix The prefix used when this CNAME is reserved. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCheckDNSAvailabilityCall(String cnAMEPrefix, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CheckDNSAvailability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cnAMEPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CNAMEPrefix", cnAMEPrefix));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCheckDNSAvailabilityValidateBeforeCall(String cnAMEPrefix, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cnAMEPrefix' is set
        if (cnAMEPrefix == null) {
            throw new ApiException("Missing the required parameter 'cnAMEPrefix' when calling gETCheckDNSAvailability(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCheckDNSAvailability(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCheckDNSAvailability(Async)");
        }

        return gETCheckDNSAvailabilityCall(cnAMEPrefix, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Checks if the specified CNAME is available.
     * @param cnAMEPrefix The prefix used when this CNAME is reserved. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CheckDNSAvailabilityResultMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CheckDNSAvailabilityResultMessage gETCheckDNSAvailability(String cnAMEPrefix, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CheckDNSAvailabilityResultMessage> localVarResp = gETCheckDNSAvailabilityWithHttpInfo(cnAMEPrefix, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks if the specified CNAME is available.
     * @param cnAMEPrefix The prefix used when this CNAME is reserved. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CheckDNSAvailabilityResultMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDNSAvailabilityResultMessage> gETCheckDNSAvailabilityWithHttpInfo(String cnAMEPrefix, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETCheckDNSAvailabilityValidateBeforeCall(cnAMEPrefix, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CheckDNSAvailabilityResultMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks if the specified CNAME is available.
     * @param cnAMEPrefix The prefix used when this CNAME is reserved. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCheckDNSAvailabilityAsync(String cnAMEPrefix, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CheckDNSAvailabilityResultMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCheckDNSAvailabilityValidateBeforeCall(cnAMEPrefix, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CheckDNSAvailabilityResultMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETComposeEnvironments
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application to which the specified source bundles belong. (optional)
     * @param groupName The name of the group to which the target environments belong. Specify a group name only if the environment name defined in each target environment&#39;s manifest ends with a + (plus) character. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param versionLabels A list of version labels, specifying one or more application source bundles that belong to the target application. Each source bundle must include an environment manifest that specifies the name of the environment and the name of the solution stack to use, and optionally can specify environment links to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETComposeEnvironmentsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String groupName, List<String> versionLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ComposeEnvironments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupName", groupName));
        }

        if (versionLabels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VersionLabels", versionLabels));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETComposeEnvironmentsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String groupName, List<String> versionLabels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETComposeEnvironments(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETComposeEnvironments(Async)");
        }

        return gETComposeEnvironmentsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, groupName, versionLabels, _callback);

    }

    /**
     * 
     * Create or update a group of environments that each run a separate component of a single application. Takes a list of version labels that specify application source bundles for each of the environments to create or update. The name of each environment and other required information must be included in the source bundles in an environment manifest named &lt;code&gt;env.yaml&lt;/code&gt;. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html\&quot;&gt;Compose Environments&lt;/a&gt; for details.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application to which the specified source bundles belong. (optional)
     * @param groupName The name of the group to which the target environments belong. Specify a group name only if the environment name defined in each target environment&#39;s manifest ends with a + (plus) character. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param versionLabels A list of version labels, specifying one or more application source bundles that belong to the target application. Each source bundle must include an environment manifest that specifies the name of the environment and the name of the solution stack to use, and optionally can specify environment links to create. (optional)
     * @return EnvironmentDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescriptionsMessage gETComposeEnvironments(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String groupName, List<String> versionLabels) throws ApiException {
        ApiResponse<EnvironmentDescriptionsMessage> localVarResp = gETComposeEnvironmentsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, groupName, versionLabels);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a group of environments that each run a separate component of a single application. Takes a list of version labels that specify application source bundles for each of the environments to create or update. The name of each environment and other required information must be included in the source bundles in an environment manifest named &lt;code&gt;env.yaml&lt;/code&gt;. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html\&quot;&gt;Compose Environments&lt;/a&gt; for details.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application to which the specified source bundles belong. (optional)
     * @param groupName The name of the group to which the target environments belong. Specify a group name only if the environment name defined in each target environment&#39;s manifest ends with a + (plus) character. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param versionLabels A list of version labels, specifying one or more application source bundles that belong to the target application. Each source bundle must include an environment manifest that specifies the name of the environment and the name of the solution stack to use, and optionally can specify environment links to create. (optional)
     * @return ApiResponse&lt;EnvironmentDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescriptionsMessage> gETComposeEnvironmentsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String groupName, List<String> versionLabels) throws ApiException {
        okhttp3.Call localVarCall = gETComposeEnvironmentsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, groupName, versionLabels, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a group of environments that each run a separate component of a single application. Takes a list of version labels that specify application source bundles for each of the environments to create or update. The name of each environment and other required information must be included in the source bundles in an environment manifest named &lt;code&gt;env.yaml&lt;/code&gt;. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html\&quot;&gt;Compose Environments&lt;/a&gt; for details.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application to which the specified source bundles belong. (optional)
     * @param groupName The name of the group to which the target environments belong. Specify a group name only if the environment name defined in each target environment&#39;s manifest ends with a + (plus) character. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param versionLabels A list of version labels, specifying one or more application source bundles that belong to the target application. Each source bundle must include an environment manifest that specifies the name of the environment and the name of the solution stack to use, and optionally can specify environment links to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETComposeEnvironmentsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String groupName, List<String> versionLabels, final ApiCallback<EnvironmentDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETComposeEnvironmentsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, groupName, versionLabels, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateApplication
     * @param applicationName The name of the application. Must be unique within your account. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description Your description of the application. (optional)
     * @param resourceLifecycleConfig Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions. (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the application.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the application. Environments that you create in the application don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateApplicationCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (resourceLifecycleConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceLifecycleConfig", resourceLifecycleConfig));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateApplicationValidateBeforeCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETCreateApplication(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateApplication(Async)");
        }

        return gETCreateApplicationCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, resourceLifecycleConfig, tags, _callback);

    }

    /**
     * 
     * Creates an application that has one configuration template named &lt;code&gt;default&lt;/code&gt; and no application versions.
     * @param applicationName The name of the application. Must be unique within your account. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description Your description of the application. (optional)
     * @param resourceLifecycleConfig Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions. (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the application.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the application. Environments that you create in the application don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @return ApplicationDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationDescriptionMessage gETCreateApplication(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, List<Tag> tags) throws ApiException {
        ApiResponse<ApplicationDescriptionMessage> localVarResp = gETCreateApplicationWithHttpInfo(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, resourceLifecycleConfig, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an application that has one configuration template named &lt;code&gt;default&lt;/code&gt; and no application versions.
     * @param applicationName The name of the application. Must be unique within your account. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description Your description of the application. (optional)
     * @param resourceLifecycleConfig Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions. (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the application.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the application. Environments that you create in the application don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ApplicationDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationDescriptionMessage> gETCreateApplicationWithHttpInfo(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, List<Tag> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateApplicationValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, resourceLifecycleConfig, tags, null);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an application that has one configuration template named &lt;code&gt;default&lt;/code&gt; and no application versions.
     * @param applicationName The name of the application. Must be unique within your account. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description Your description of the application. (optional)
     * @param resourceLifecycleConfig Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions. (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the application.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the application. Environments that you create in the application don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateApplicationAsync(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, List<Tag> tags, final ApiCallback<ApplicationDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateApplicationValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, resourceLifecycleConfig, tags, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateApplicationVersion
     * @param applicationName  The name of the application. If no application is found with this name, and &lt;code&gt;AutoCreateApplication&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (required)
     * @param versionLabel &lt;p&gt;A label identifying this version.&lt;/p&gt; &lt;p&gt;Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A description of this application version. (optional)
     * @param sourceBuildInformation Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version. (optional)
     * @param sourceBundle &lt;p&gt;The Amazon S3 bucket and key that identify the location of the source bundle for this version.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon S3 bucket must be in the same region as the environment.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with &lt;code&gt;SourceBuildInformation&lt;/code&gt;), but not both. If neither &lt;code&gt;SourceBundle&lt;/code&gt; nor &lt;code&gt;SourceBuildInformation&lt;/code&gt; are provided, Elastic Beanstalk uses a sample application.&lt;/p&gt; (optional)
     * @param buildConfiguration Settings for an AWS CodeBuild build. (optional)
     * @param autoCreateApplication Set to &lt;code&gt;true&lt;/code&gt; to create an application with the specified name if it doesn&#39;t already exist. (optional)
     * @param process &lt;p&gt;Pre-processes and validates the environment manifest (&lt;code&gt;env.yaml&lt;/code&gt;) and configuration files (&lt;code&gt;*.config&lt;/code&gt; files in the &lt;code&gt;.ebextensions&lt;/code&gt; folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment.&lt;/p&gt; &lt;p&gt;You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;Process&lt;/code&gt; option validates Elastic Beanstalk configuration files. It doesn&#39;t validate your application&#39;s configuration files, like proxy server or Docker configuration.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the application version.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the application version. Environments that use the application version don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyApplicationVersionsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CodeBuildNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateApplicationVersionCall(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationVersionSourceBuildInformationParameter sourceBuildInformation, GETCreateApplicationVersionSourceBundleParameter sourceBundle, GETCreateApplicationVersionBuildConfigurationParameter buildConfiguration, Boolean autoCreateApplication, Boolean process, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateApplicationVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (versionLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionLabel", versionLabel));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (sourceBuildInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceBuildInformation", sourceBuildInformation));
        }

        if (sourceBundle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceBundle", sourceBundle));
        }

        if (buildConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BuildConfiguration", buildConfiguration));
        }

        if (autoCreateApplication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoCreateApplication", autoCreateApplication));
        }

        if (process != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Process", process));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateApplicationVersionValidateBeforeCall(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationVersionSourceBuildInformationParameter sourceBuildInformation, GETCreateApplicationVersionSourceBundleParameter sourceBundle, GETCreateApplicationVersionBuildConfigurationParameter buildConfiguration, Boolean autoCreateApplication, Boolean process, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETCreateApplicationVersion(Async)");
        }

        // verify the required parameter 'versionLabel' is set
        if (versionLabel == null) {
            throw new ApiException("Missing the required parameter 'versionLabel' when calling gETCreateApplicationVersion(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateApplicationVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateApplicationVersion(Async)");
        }

        return gETCreateApplicationVersionCall(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, sourceBuildInformation, sourceBundle, buildConfiguration, autoCreateApplication, process, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an application version for the specified application. You can create an application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the output of an AWS CodeBuild build as follows:&lt;/p&gt; &lt;p&gt;Specify a commit in an AWS CodeCommit repository with &lt;code&gt;SourceBuildInformation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a build in an AWS CodeBuild with &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;BuildConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a source bundle in S3 with &lt;code&gt;SourceBundle&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Omit both &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;SourceBundle&lt;/code&gt; to use the default sample application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create an application version with a specified Amazon S3 bucket and key location, you can&#39;t change that Amazon S3 location. If you change the Amazon S3 location, you receive an exception when you attempt to launch an environment from the application version.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName  The name of the application. If no application is found with this name, and &lt;code&gt;AutoCreateApplication&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (required)
     * @param versionLabel &lt;p&gt;A label identifying this version.&lt;/p&gt; &lt;p&gt;Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A description of this application version. (optional)
     * @param sourceBuildInformation Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version. (optional)
     * @param sourceBundle &lt;p&gt;The Amazon S3 bucket and key that identify the location of the source bundle for this version.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon S3 bucket must be in the same region as the environment.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with &lt;code&gt;SourceBuildInformation&lt;/code&gt;), but not both. If neither &lt;code&gt;SourceBundle&lt;/code&gt; nor &lt;code&gt;SourceBuildInformation&lt;/code&gt; are provided, Elastic Beanstalk uses a sample application.&lt;/p&gt; (optional)
     * @param buildConfiguration Settings for an AWS CodeBuild build. (optional)
     * @param autoCreateApplication Set to &lt;code&gt;true&lt;/code&gt; to create an application with the specified name if it doesn&#39;t already exist. (optional)
     * @param process &lt;p&gt;Pre-processes and validates the environment manifest (&lt;code&gt;env.yaml&lt;/code&gt;) and configuration files (&lt;code&gt;*.config&lt;/code&gt; files in the &lt;code&gt;.ebextensions&lt;/code&gt; folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment.&lt;/p&gt; &lt;p&gt;You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;Process&lt;/code&gt; option validates Elastic Beanstalk configuration files. It doesn&#39;t validate your application&#39;s configuration files, like proxy server or Docker configuration.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the application version.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the application version. Environments that use the application version don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @return ApplicationVersionDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyApplicationVersionsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CodeBuildNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationVersionDescriptionMessage gETCreateApplicationVersion(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationVersionSourceBuildInformationParameter sourceBuildInformation, GETCreateApplicationVersionSourceBundleParameter sourceBundle, GETCreateApplicationVersionBuildConfigurationParameter buildConfiguration, Boolean autoCreateApplication, Boolean process, List<Tag> tags) throws ApiException {
        ApiResponse<ApplicationVersionDescriptionMessage> localVarResp = gETCreateApplicationVersionWithHttpInfo(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, sourceBuildInformation, sourceBundle, buildConfiguration, autoCreateApplication, process, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an application version for the specified application. You can create an application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the output of an AWS CodeBuild build as follows:&lt;/p&gt; &lt;p&gt;Specify a commit in an AWS CodeCommit repository with &lt;code&gt;SourceBuildInformation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a build in an AWS CodeBuild with &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;BuildConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a source bundle in S3 with &lt;code&gt;SourceBundle&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Omit both &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;SourceBundle&lt;/code&gt; to use the default sample application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create an application version with a specified Amazon S3 bucket and key location, you can&#39;t change that Amazon S3 location. If you change the Amazon S3 location, you receive an exception when you attempt to launch an environment from the application version.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName  The name of the application. If no application is found with this name, and &lt;code&gt;AutoCreateApplication&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (required)
     * @param versionLabel &lt;p&gt;A label identifying this version.&lt;/p&gt; &lt;p&gt;Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A description of this application version. (optional)
     * @param sourceBuildInformation Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version. (optional)
     * @param sourceBundle &lt;p&gt;The Amazon S3 bucket and key that identify the location of the source bundle for this version.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon S3 bucket must be in the same region as the environment.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with &lt;code&gt;SourceBuildInformation&lt;/code&gt;), but not both. If neither &lt;code&gt;SourceBundle&lt;/code&gt; nor &lt;code&gt;SourceBuildInformation&lt;/code&gt; are provided, Elastic Beanstalk uses a sample application.&lt;/p&gt; (optional)
     * @param buildConfiguration Settings for an AWS CodeBuild build. (optional)
     * @param autoCreateApplication Set to &lt;code&gt;true&lt;/code&gt; to create an application with the specified name if it doesn&#39;t already exist. (optional)
     * @param process &lt;p&gt;Pre-processes and validates the environment manifest (&lt;code&gt;env.yaml&lt;/code&gt;) and configuration files (&lt;code&gt;*.config&lt;/code&gt; files in the &lt;code&gt;.ebextensions&lt;/code&gt; folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment.&lt;/p&gt; &lt;p&gt;You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;Process&lt;/code&gt; option validates Elastic Beanstalk configuration files. It doesn&#39;t validate your application&#39;s configuration files, like proxy server or Docker configuration.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the application version.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the application version. Environments that use the application version don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ApplicationVersionDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyApplicationVersionsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CodeBuildNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationVersionDescriptionMessage> gETCreateApplicationVersionWithHttpInfo(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationVersionSourceBuildInformationParameter sourceBuildInformation, GETCreateApplicationVersionSourceBundleParameter sourceBundle, GETCreateApplicationVersionBuildConfigurationParameter buildConfiguration, Boolean autoCreateApplication, Boolean process, List<Tag> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateApplicationVersionValidateBeforeCall(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, sourceBuildInformation, sourceBundle, buildConfiguration, autoCreateApplication, process, tags, null);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an application version for the specified application. You can create an application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the output of an AWS CodeBuild build as follows:&lt;/p&gt; &lt;p&gt;Specify a commit in an AWS CodeCommit repository with &lt;code&gt;SourceBuildInformation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a build in an AWS CodeBuild with &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;BuildConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a source bundle in S3 with &lt;code&gt;SourceBundle&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Omit both &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;SourceBundle&lt;/code&gt; to use the default sample application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create an application version with a specified Amazon S3 bucket and key location, you can&#39;t change that Amazon S3 location. If you change the Amazon S3 location, you receive an exception when you attempt to launch an environment from the application version.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName  The name of the application. If no application is found with this name, and &lt;code&gt;AutoCreateApplication&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (required)
     * @param versionLabel &lt;p&gt;A label identifying this version.&lt;/p&gt; &lt;p&gt;Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A description of this application version. (optional)
     * @param sourceBuildInformation Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version. (optional)
     * @param sourceBundle &lt;p&gt;The Amazon S3 bucket and key that identify the location of the source bundle for this version.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon S3 bucket must be in the same region as the environment.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with &lt;code&gt;SourceBuildInformation&lt;/code&gt;), but not both. If neither &lt;code&gt;SourceBundle&lt;/code&gt; nor &lt;code&gt;SourceBuildInformation&lt;/code&gt; are provided, Elastic Beanstalk uses a sample application.&lt;/p&gt; (optional)
     * @param buildConfiguration Settings for an AWS CodeBuild build. (optional)
     * @param autoCreateApplication Set to &lt;code&gt;true&lt;/code&gt; to create an application with the specified name if it doesn&#39;t already exist. (optional)
     * @param process &lt;p&gt;Pre-processes and validates the environment manifest (&lt;code&gt;env.yaml&lt;/code&gt;) and configuration files (&lt;code&gt;*.config&lt;/code&gt; files in the &lt;code&gt;.ebextensions&lt;/code&gt; folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment.&lt;/p&gt; &lt;p&gt;You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;Process&lt;/code&gt; option validates Elastic Beanstalk configuration files. It doesn&#39;t validate your application&#39;s configuration files, like proxy server or Docker configuration.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the application version.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the application version. Environments that use the application version don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyApplicationVersionsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CodeBuildNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateApplicationVersionAsync(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, GETCreateApplicationVersionSourceBuildInformationParameter sourceBuildInformation, GETCreateApplicationVersionSourceBundleParameter sourceBundle, GETCreateApplicationVersionBuildConfigurationParameter buildConfiguration, Boolean autoCreateApplication, Boolean process, List<Tag> tags, final ApiCallback<ApplicationVersionDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateApplicationVersionValidateBeforeCall(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, sourceBuildInformation, sourceBundle, buildConfiguration, autoCreateApplication, process, tags, _callback);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateConfigurationTemplate
     * @param applicationName The name of the Elastic Beanstalk application to associate with this configuration template. (required)
     * @param templateName &lt;p&gt;The name of the configuration template.&lt;/p&gt; &lt;p&gt;Constraint: This name must be unique per application.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param solutionStackName &lt;p&gt;The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, &lt;code&gt;64bit Amazon Linux 2013.09 running Tomcat 7 Java 7&lt;/code&gt;. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html\&quot;&gt;Supported Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You must specify &lt;code&gt;SolutionStackName&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;EnvironmentId&lt;/code&gt;, or &lt;code&gt;SourceConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html\&quot;&gt; &lt;code&gt;ListAvailableSolutionStacks&lt;/code&gt; &lt;/a&gt; API to obtain a list of available solution stacks.&lt;/p&gt; (optional)
     * @param platformArn &lt;p&gt;The Amazon Resource Name (ARN) of the custom platform. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html\&quot;&gt; Custom Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;PlatformArn&lt;/code&gt;, then don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param sourceConfiguration &lt;p&gt;An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.&lt;/p&gt; &lt;p&gt;Values specified in &lt;code&gt;OptionSettings&lt;/code&gt; override any values obtained from the &lt;code&gt;SourceConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You must specify &lt;code&gt;SourceConfiguration&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;EnvironmentId&lt;/code&gt;, or &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name.&lt;/p&gt; (optional)
     * @param environmentId The ID of an environment whose settings you want to use to create the configuration template. You must specify &lt;code&gt;EnvironmentId&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;SolutionStackName&lt;/code&gt;, or &lt;code&gt;SourceConfiguration&lt;/code&gt;. (optional)
     * @param description An optional description for this configuration. (optional)
     * @param optionSettings Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html\&quot;&gt;Option Values&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;. (optional)
     * @param tags Specifies the tags applied to the configuration template. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyConfigurationTemplatesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateConfigurationTemplateCall(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String solutionStackName, String platformArn, GETCreateConfigurationTemplateSourceConfigurationParameter sourceConfiguration, String environmentId, String description, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateConfigurationTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateName", templateName));
        }

        if (solutionStackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SolutionStackName", solutionStackName));
        }

        if (platformArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformArn", platformArn));
        }

        if (sourceConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceConfiguration", sourceConfiguration));
        }

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (optionSettings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OptionSettings", optionSettings));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateConfigurationTemplateValidateBeforeCall(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String solutionStackName, String platformArn, GETCreateConfigurationTemplateSourceConfigurationParameter sourceConfiguration, String environmentId, String description, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETCreateConfigurationTemplate(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling gETCreateConfigurationTemplate(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateConfigurationTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateConfigurationTemplate(Async)");
        }

        return gETCreateConfigurationTemplateCall(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, solutionStackName, platformArn, sourceConfiguration, environmentId, description, optionSettings, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk application. You define application configuration settings in a configuration template. You can then use the configuration template to deploy different versions of the application with the same configuration settings.&lt;/p&gt; &lt;p&gt;Templates aren&#39;t associated with any environment. The &lt;code&gt;EnvironmentName&lt;/code&gt; response element is always &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListAvailableSolutionStacks&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param applicationName The name of the Elastic Beanstalk application to associate with this configuration template. (required)
     * @param templateName &lt;p&gt;The name of the configuration template.&lt;/p&gt; &lt;p&gt;Constraint: This name must be unique per application.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param solutionStackName &lt;p&gt;The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, &lt;code&gt;64bit Amazon Linux 2013.09 running Tomcat 7 Java 7&lt;/code&gt;. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html\&quot;&gt;Supported Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You must specify &lt;code&gt;SolutionStackName&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;EnvironmentId&lt;/code&gt;, or &lt;code&gt;SourceConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html\&quot;&gt; &lt;code&gt;ListAvailableSolutionStacks&lt;/code&gt; &lt;/a&gt; API to obtain a list of available solution stacks.&lt;/p&gt; (optional)
     * @param platformArn &lt;p&gt;The Amazon Resource Name (ARN) of the custom platform. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html\&quot;&gt; Custom Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;PlatformArn&lt;/code&gt;, then don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param sourceConfiguration &lt;p&gt;An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.&lt;/p&gt; &lt;p&gt;Values specified in &lt;code&gt;OptionSettings&lt;/code&gt; override any values obtained from the &lt;code&gt;SourceConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You must specify &lt;code&gt;SourceConfiguration&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;EnvironmentId&lt;/code&gt;, or &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name.&lt;/p&gt; (optional)
     * @param environmentId The ID of an environment whose settings you want to use to create the configuration template. You must specify &lt;code&gt;EnvironmentId&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;SolutionStackName&lt;/code&gt;, or &lt;code&gt;SourceConfiguration&lt;/code&gt;. (optional)
     * @param description An optional description for this configuration. (optional)
     * @param optionSettings Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html\&quot;&gt;Option Values&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;. (optional)
     * @param tags Specifies the tags applied to the configuration template. (optional)
     * @return ConfigurationSettingsDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyConfigurationTemplatesException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSettingsDescription gETCreateConfigurationTemplate(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String solutionStackName, String platformArn, GETCreateConfigurationTemplateSourceConfigurationParameter sourceConfiguration, String environmentId, String description, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags) throws ApiException {
        ApiResponse<ConfigurationSettingsDescription> localVarResp = gETCreateConfigurationTemplateWithHttpInfo(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, solutionStackName, platformArn, sourceConfiguration, environmentId, description, optionSettings, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk application. You define application configuration settings in a configuration template. You can then use the configuration template to deploy different versions of the application with the same configuration settings.&lt;/p&gt; &lt;p&gt;Templates aren&#39;t associated with any environment. The &lt;code&gt;EnvironmentName&lt;/code&gt; response element is always &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListAvailableSolutionStacks&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param applicationName The name of the Elastic Beanstalk application to associate with this configuration template. (required)
     * @param templateName &lt;p&gt;The name of the configuration template.&lt;/p&gt; &lt;p&gt;Constraint: This name must be unique per application.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param solutionStackName &lt;p&gt;The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, &lt;code&gt;64bit Amazon Linux 2013.09 running Tomcat 7 Java 7&lt;/code&gt;. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html\&quot;&gt;Supported Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You must specify &lt;code&gt;SolutionStackName&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;EnvironmentId&lt;/code&gt;, or &lt;code&gt;SourceConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html\&quot;&gt; &lt;code&gt;ListAvailableSolutionStacks&lt;/code&gt; &lt;/a&gt; API to obtain a list of available solution stacks.&lt;/p&gt; (optional)
     * @param platformArn &lt;p&gt;The Amazon Resource Name (ARN) of the custom platform. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html\&quot;&gt; Custom Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;PlatformArn&lt;/code&gt;, then don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param sourceConfiguration &lt;p&gt;An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.&lt;/p&gt; &lt;p&gt;Values specified in &lt;code&gt;OptionSettings&lt;/code&gt; override any values obtained from the &lt;code&gt;SourceConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You must specify &lt;code&gt;SourceConfiguration&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;EnvironmentId&lt;/code&gt;, or &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name.&lt;/p&gt; (optional)
     * @param environmentId The ID of an environment whose settings you want to use to create the configuration template. You must specify &lt;code&gt;EnvironmentId&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;SolutionStackName&lt;/code&gt;, or &lt;code&gt;SourceConfiguration&lt;/code&gt;. (optional)
     * @param description An optional description for this configuration. (optional)
     * @param optionSettings Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html\&quot;&gt;Option Values&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;. (optional)
     * @param tags Specifies the tags applied to the configuration template. (optional)
     * @return ApiResponse&lt;ConfigurationSettingsDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyConfigurationTemplatesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSettingsDescription> gETCreateConfigurationTemplateWithHttpInfo(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String solutionStackName, String platformArn, GETCreateConfigurationTemplateSourceConfigurationParameter sourceConfiguration, String environmentId, String description, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateConfigurationTemplateValidateBeforeCall(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, solutionStackName, platformArn, sourceConfiguration, environmentId, description, optionSettings, tags, null);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk application. You define application configuration settings in a configuration template. You can then use the configuration template to deploy different versions of the application with the same configuration settings.&lt;/p&gt; &lt;p&gt;Templates aren&#39;t associated with any environment. The &lt;code&gt;EnvironmentName&lt;/code&gt; response element is always &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListAvailableSolutionStacks&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param applicationName The name of the Elastic Beanstalk application to associate with this configuration template. (required)
     * @param templateName &lt;p&gt;The name of the configuration template.&lt;/p&gt; &lt;p&gt;Constraint: This name must be unique per application.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param solutionStackName &lt;p&gt;The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, &lt;code&gt;64bit Amazon Linux 2013.09 running Tomcat 7 Java 7&lt;/code&gt;. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html\&quot;&gt;Supported Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You must specify &lt;code&gt;SolutionStackName&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;EnvironmentId&lt;/code&gt;, or &lt;code&gt;SourceConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html\&quot;&gt; &lt;code&gt;ListAvailableSolutionStacks&lt;/code&gt; &lt;/a&gt; API to obtain a list of available solution stacks.&lt;/p&gt; (optional)
     * @param platformArn &lt;p&gt;The Amazon Resource Name (ARN) of the custom platform. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html\&quot;&gt; Custom Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;PlatformArn&lt;/code&gt;, then don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param sourceConfiguration &lt;p&gt;An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.&lt;/p&gt; &lt;p&gt;Values specified in &lt;code&gt;OptionSettings&lt;/code&gt; override any values obtained from the &lt;code&gt;SourceConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You must specify &lt;code&gt;SourceConfiguration&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;EnvironmentId&lt;/code&gt;, or &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name.&lt;/p&gt; (optional)
     * @param environmentId The ID of an environment whose settings you want to use to create the configuration template. You must specify &lt;code&gt;EnvironmentId&lt;/code&gt; if you don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt;, &lt;code&gt;SolutionStackName&lt;/code&gt;, or &lt;code&gt;SourceConfiguration&lt;/code&gt;. (optional)
     * @param description An optional description for this configuration. (optional)
     * @param optionSettings Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html\&quot;&gt;Option Values&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;. (optional)
     * @param tags Specifies the tags applied to the configuration template. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyConfigurationTemplatesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateConfigurationTemplateAsync(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String solutionStackName, String platformArn, GETCreateConfigurationTemplateSourceConfigurationParameter sourceConfiguration, String environmentId, String description, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags, final ApiCallback<ConfigurationSettingsDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateConfigurationTemplateValidateBeforeCall(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, solutionStackName, platformArn, sourceConfiguration, environmentId, description, optionSettings, tags, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateEnvironment
     * @param applicationName The name of the application that is associated with this environment. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName &lt;p&gt;A unique name for the environment.&lt;/p&gt; &lt;p&gt;Constraint: Must be from 4 to 40 characters in length. The name can contain only letters, numbers, and hyphens. It can&#39;t start or end with a hyphen. This name must be unique within a region in your account. If the specified name already exists in the region, Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;CNAMEPrefix&lt;/code&gt; parameter, the environment name becomes part of the CNAME, and therefore part of the visible URL for your application.&lt;/p&gt; (optional)
     * @param groupName The name of the group to which the target environment belongs. Specify a group name only if the environment&#39;s name is specified in an environment manifest and not with the environment name parameter. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param description Your description for this environment. (optional)
     * @param cnAMEPrefix If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name. (optional)
     * @param tier Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks. (optional)
     * @param tags Specifies the tags applied to resources in the environment. (optional)
     * @param versionLabel &lt;p&gt;The name of the application version to deploy.&lt;/p&gt; &lt;p&gt;Default: If not specified, Elastic Beanstalk attempts to deploy the sample application.&lt;/p&gt; (optional)
     * @param templateName &lt;p&gt;The name of the Elastic Beanstalk configuration template to use with the environment.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;TemplateName&lt;/code&gt;, then don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param solutionStackName &lt;p&gt;The name of an Elastic Beanstalk solution stack (platform version) to use with the environment. If specified, Elastic Beanstalk sets the configuration values to the default values associated with the specified solution stack. For a list of current solution stacks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/platforms/platforms-supported.html\&quot;&gt;Elastic Beanstalk Supported Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Platforms&lt;/i&gt; guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;SolutionStackName&lt;/code&gt;, don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt; or &lt;code&gt;TemplateName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param platformArn &lt;p&gt;The Amazon Resource Name (ARN) of the custom platform to use with the environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html\&quot;&gt;Custom Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;PlatformArn&lt;/code&gt;, don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param optionSettings If specified, AWS Elastic Beanstalk sets the specified configuration options to the requested value in the configuration set for the new environment. These override the values obtained from the solution stack or the configuration template. (optional)
     * @param optionsToRemove A list of custom user-defined configuration options to remove from the configuration set for this new environment. (optional)
     * @param operationsRole The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment&#39;s operations role. If specified, Elastic Beanstalk uses the operations role for permissions to downstream services during this call and during subsequent calls acting on this environment. To specify an operations role, you must have the &lt;code&gt;iam:PassRole&lt;/code&gt; permission for the role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateEnvironmentCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String groupName, String description, String cnAMEPrefix, GETCreateEnvironmentTierParameter tier, List<Tag> tags, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, String operationsRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupName", groupName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (cnAMEPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CNAMEPrefix", cnAMEPrefix));
        }

        if (tier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tier", tier));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (versionLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionLabel", versionLabel));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateName", templateName));
        }

        if (solutionStackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SolutionStackName", solutionStackName));
        }

        if (platformArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformArn", platformArn));
        }

        if (optionSettings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OptionSettings", optionSettings));
        }

        if (optionsToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OptionsToRemove", optionsToRemove));
        }

        if (operationsRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationsRole", operationsRole));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateEnvironmentValidateBeforeCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String groupName, String description, String cnAMEPrefix, GETCreateEnvironmentTierParameter tier, List<Tag> tags, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, String operationsRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETCreateEnvironment(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateEnvironment(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateEnvironment(Async)");
        }

        return gETCreateEnvironmentCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, groupName, description, cnAMEPrefix, tier, tags, versionLabel, templateName, solutionStackName, platformArn, optionSettings, optionsToRemove, operationsRole, _callback);

    }

    /**
     * 
     * Launches an AWS Elastic Beanstalk environment for the specified application using the specified configuration.
     * @param applicationName The name of the application that is associated with this environment. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName &lt;p&gt;A unique name for the environment.&lt;/p&gt; &lt;p&gt;Constraint: Must be from 4 to 40 characters in length. The name can contain only letters, numbers, and hyphens. It can&#39;t start or end with a hyphen. This name must be unique within a region in your account. If the specified name already exists in the region, Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;CNAMEPrefix&lt;/code&gt; parameter, the environment name becomes part of the CNAME, and therefore part of the visible URL for your application.&lt;/p&gt; (optional)
     * @param groupName The name of the group to which the target environment belongs. Specify a group name only if the environment&#39;s name is specified in an environment manifest and not with the environment name parameter. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param description Your description for this environment. (optional)
     * @param cnAMEPrefix If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name. (optional)
     * @param tier Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks. (optional)
     * @param tags Specifies the tags applied to resources in the environment. (optional)
     * @param versionLabel &lt;p&gt;The name of the application version to deploy.&lt;/p&gt; &lt;p&gt;Default: If not specified, Elastic Beanstalk attempts to deploy the sample application.&lt;/p&gt; (optional)
     * @param templateName &lt;p&gt;The name of the Elastic Beanstalk configuration template to use with the environment.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;TemplateName&lt;/code&gt;, then don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param solutionStackName &lt;p&gt;The name of an Elastic Beanstalk solution stack (platform version) to use with the environment. If specified, Elastic Beanstalk sets the configuration values to the default values associated with the specified solution stack. For a list of current solution stacks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/platforms/platforms-supported.html\&quot;&gt;Elastic Beanstalk Supported Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Platforms&lt;/i&gt; guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;SolutionStackName&lt;/code&gt;, don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt; or &lt;code&gt;TemplateName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param platformArn &lt;p&gt;The Amazon Resource Name (ARN) of the custom platform to use with the environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html\&quot;&gt;Custom Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;PlatformArn&lt;/code&gt;, don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param optionSettings If specified, AWS Elastic Beanstalk sets the specified configuration options to the requested value in the configuration set for the new environment. These override the values obtained from the solution stack or the configuration template. (optional)
     * @param optionsToRemove A list of custom user-defined configuration options to remove from the configuration set for this new environment. (optional)
     * @param operationsRole The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment&#39;s operations role. If specified, Elastic Beanstalk uses the operations role for permissions to downstream services during this call and during subsequent calls acting on this environment. To specify an operations role, you must have the &lt;code&gt;iam:PassRole&lt;/code&gt; permission for the role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;. (optional)
     * @return EnvironmentDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescription gETCreateEnvironment(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String groupName, String description, String cnAMEPrefix, GETCreateEnvironmentTierParameter tier, List<Tag> tags, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, String operationsRole) throws ApiException {
        ApiResponse<EnvironmentDescription> localVarResp = gETCreateEnvironmentWithHttpInfo(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, groupName, description, cnAMEPrefix, tier, tags, versionLabel, templateName, solutionStackName, platformArn, optionSettings, optionsToRemove, operationsRole);
        return localVarResp.getData();
    }

    /**
     * 
     * Launches an AWS Elastic Beanstalk environment for the specified application using the specified configuration.
     * @param applicationName The name of the application that is associated with this environment. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName &lt;p&gt;A unique name for the environment.&lt;/p&gt; &lt;p&gt;Constraint: Must be from 4 to 40 characters in length. The name can contain only letters, numbers, and hyphens. It can&#39;t start or end with a hyphen. This name must be unique within a region in your account. If the specified name already exists in the region, Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;CNAMEPrefix&lt;/code&gt; parameter, the environment name becomes part of the CNAME, and therefore part of the visible URL for your application.&lt;/p&gt; (optional)
     * @param groupName The name of the group to which the target environment belongs. Specify a group name only if the environment&#39;s name is specified in an environment manifest and not with the environment name parameter. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param description Your description for this environment. (optional)
     * @param cnAMEPrefix If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name. (optional)
     * @param tier Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks. (optional)
     * @param tags Specifies the tags applied to resources in the environment. (optional)
     * @param versionLabel &lt;p&gt;The name of the application version to deploy.&lt;/p&gt; &lt;p&gt;Default: If not specified, Elastic Beanstalk attempts to deploy the sample application.&lt;/p&gt; (optional)
     * @param templateName &lt;p&gt;The name of the Elastic Beanstalk configuration template to use with the environment.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;TemplateName&lt;/code&gt;, then don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param solutionStackName &lt;p&gt;The name of an Elastic Beanstalk solution stack (platform version) to use with the environment. If specified, Elastic Beanstalk sets the configuration values to the default values associated with the specified solution stack. For a list of current solution stacks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/platforms/platforms-supported.html\&quot;&gt;Elastic Beanstalk Supported Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Platforms&lt;/i&gt; guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;SolutionStackName&lt;/code&gt;, don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt; or &lt;code&gt;TemplateName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param platformArn &lt;p&gt;The Amazon Resource Name (ARN) of the custom platform to use with the environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html\&quot;&gt;Custom Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;PlatformArn&lt;/code&gt;, don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param optionSettings If specified, AWS Elastic Beanstalk sets the specified configuration options to the requested value in the configuration set for the new environment. These override the values obtained from the solution stack or the configuration template. (optional)
     * @param optionsToRemove A list of custom user-defined configuration options to remove from the configuration set for this new environment. (optional)
     * @param operationsRole The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment&#39;s operations role. If specified, Elastic Beanstalk uses the operations role for permissions to downstream services during this call and during subsequent calls acting on this environment. To specify an operations role, you must have the &lt;code&gt;iam:PassRole&lt;/code&gt; permission for the role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;. (optional)
     * @return ApiResponse&lt;EnvironmentDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescription> gETCreateEnvironmentWithHttpInfo(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String groupName, String description, String cnAMEPrefix, GETCreateEnvironmentTierParameter tier, List<Tag> tags, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, String operationsRole) throws ApiException {
        okhttp3.Call localVarCall = gETCreateEnvironmentValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, groupName, description, cnAMEPrefix, tier, tags, versionLabel, templateName, solutionStackName, platformArn, optionSettings, optionsToRemove, operationsRole, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Launches an AWS Elastic Beanstalk environment for the specified application using the specified configuration.
     * @param applicationName The name of the application that is associated with this environment. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName &lt;p&gt;A unique name for the environment.&lt;/p&gt; &lt;p&gt;Constraint: Must be from 4 to 40 characters in length. The name can contain only letters, numbers, and hyphens. It can&#39;t start or end with a hyphen. This name must be unique within a region in your account. If the specified name already exists in the region, Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;CNAMEPrefix&lt;/code&gt; parameter, the environment name becomes part of the CNAME, and therefore part of the visible URL for your application.&lt;/p&gt; (optional)
     * @param groupName The name of the group to which the target environment belongs. Specify a group name only if the environment&#39;s name is specified in an environment manifest and not with the environment name parameter. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param description Your description for this environment. (optional)
     * @param cnAMEPrefix If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name. (optional)
     * @param tier Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks. (optional)
     * @param tags Specifies the tags applied to resources in the environment. (optional)
     * @param versionLabel &lt;p&gt;The name of the application version to deploy.&lt;/p&gt; &lt;p&gt;Default: If not specified, Elastic Beanstalk attempts to deploy the sample application.&lt;/p&gt; (optional)
     * @param templateName &lt;p&gt;The name of the Elastic Beanstalk configuration template to use with the environment.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;TemplateName&lt;/code&gt;, then don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param solutionStackName &lt;p&gt;The name of an Elastic Beanstalk solution stack (platform version) to use with the environment. If specified, Elastic Beanstalk sets the configuration values to the default values associated with the specified solution stack. For a list of current solution stacks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/platforms/platforms-supported.html\&quot;&gt;Elastic Beanstalk Supported Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Platforms&lt;/i&gt; guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;SolutionStackName&lt;/code&gt;, don&#39;t specify &lt;code&gt;PlatformArn&lt;/code&gt; or &lt;code&gt;TemplateName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param platformArn &lt;p&gt;The Amazon Resource Name (ARN) of the custom platform to use with the environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html\&quot;&gt;Custom Platforms&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;PlatformArn&lt;/code&gt;, don&#39;t specify &lt;code&gt;SolutionStackName&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param optionSettings If specified, AWS Elastic Beanstalk sets the specified configuration options to the requested value in the configuration set for the new environment. These override the values obtained from the solution stack or the configuration template. (optional)
     * @param optionsToRemove A list of custom user-defined configuration options to remove from the configuration set for this new environment. (optional)
     * @param operationsRole The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment&#39;s operations role. If specified, Elastic Beanstalk uses the operations role for permissions to downstream services during this call and during subsequent calls acting on this environment. To specify an operations role, you must have the &lt;code&gt;iam:PassRole&lt;/code&gt; permission for the role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateEnvironmentAsync(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String groupName, String description, String cnAMEPrefix, GETCreateEnvironmentTierParameter tier, List<Tag> tags, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, String operationsRole, final ApiCallback<EnvironmentDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateEnvironmentValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, groupName, description, cnAMEPrefix, tier, tags, versionLabel, templateName, solutionStackName, platformArn, optionSettings, optionsToRemove, operationsRole, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreatePlatformVersion
     * @param platformName The name of your custom platform. (required)
     * @param platformVersion The number, such as 1.0.2, for the new platform version. (required)
     * @param platformDefinitionBundle The location of the platform definition archive in Amazon S3. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the builder environment. (optional)
     * @param optionSettings The configuration option settings to apply to the builder environment. (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the new platform version.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the platform version. Environments that you create using the platform version don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPlatformsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreatePlatformVersionCall(String platformName, String platformVersion, GETCreateApplicationVersionSourceBundleParameter platformDefinitionBundle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreatePlatformVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platformName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformName", platformName));
        }

        if (platformVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformVersion", platformVersion));
        }

        if (platformDefinitionBundle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformDefinitionBundle", platformDefinitionBundle));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (optionSettings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OptionSettings", optionSettings));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreatePlatformVersionValidateBeforeCall(String platformName, String platformVersion, GETCreateApplicationVersionSourceBundleParameter platformDefinitionBundle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'platformName' is set
        if (platformName == null) {
            throw new ApiException("Missing the required parameter 'platformName' when calling gETCreatePlatformVersion(Async)");
        }

        // verify the required parameter 'platformVersion' is set
        if (platformVersion == null) {
            throw new ApiException("Missing the required parameter 'platformVersion' when calling gETCreatePlatformVersion(Async)");
        }

        // verify the required parameter 'platformDefinitionBundle' is set
        if (platformDefinitionBundle == null) {
            throw new ApiException("Missing the required parameter 'platformDefinitionBundle' when calling gETCreatePlatformVersion(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreatePlatformVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreatePlatformVersion(Async)");
        }

        return gETCreatePlatformVersionCall(platformName, platformVersion, platformDefinitionBundle, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, optionSettings, tags, _callback);

    }

    /**
     * 
     * Create a new version of your custom platform.
     * @param platformName The name of your custom platform. (required)
     * @param platformVersion The number, such as 1.0.2, for the new platform version. (required)
     * @param platformDefinitionBundle The location of the platform definition archive in Amazon S3. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the builder environment. (optional)
     * @param optionSettings The configuration option settings to apply to the builder environment. (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the new platform version.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the platform version. Environments that you create using the platform version don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @return CreatePlatformVersionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPlatformsException </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlatformVersionResult gETCreatePlatformVersion(String platformName, String platformVersion, GETCreateApplicationVersionSourceBundleParameter platformDefinitionBundle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags) throws ApiException {
        ApiResponse<CreatePlatformVersionResult> localVarResp = gETCreatePlatformVersionWithHttpInfo(platformName, platformVersion, platformDefinitionBundle, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, optionSettings, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new version of your custom platform.
     * @param platformName The name of your custom platform. (required)
     * @param platformVersion The number, such as 1.0.2, for the new platform version. (required)
     * @param platformDefinitionBundle The location of the platform definition archive in Amazon S3. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the builder environment. (optional)
     * @param optionSettings The configuration option settings to apply to the builder environment. (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the new platform version.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the platform version. Environments that you create using the platform version don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreatePlatformVersionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPlatformsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePlatformVersionResult> gETCreatePlatformVersionWithHttpInfo(String platformName, String platformVersion, GETCreateApplicationVersionSourceBundleParameter platformDefinitionBundle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreatePlatformVersionValidateBeforeCall(platformName, platformVersion, platformDefinitionBundle, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, optionSettings, tags, null);
        Type localVarReturnType = new TypeToken<CreatePlatformVersionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new version of your custom platform.
     * @param platformName The name of your custom platform. (required)
     * @param platformVersion The number, such as 1.0.2, for the new platform version. (required)
     * @param platformDefinitionBundle The location of the platform definition archive in Amazon S3. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the builder environment. (optional)
     * @param optionSettings The configuration option settings to apply to the builder environment. (optional)
     * @param tags &lt;p&gt;Specifies the tags applied to the new platform version.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk applies these tags only to the platform version. Environments that you create using the platform version don&#39;t inherit the tags.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPlatformsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreatePlatformVersionAsync(String platformName, String platformVersion, GETCreateApplicationVersionSourceBundleParameter platformDefinitionBundle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, List<ConfigurationOptionSetting> optionSettings, List<Tag> tags, final ApiCallback<CreatePlatformVersionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreatePlatformVersionValidateBeforeCall(platformName, platformVersion, platformDefinitionBundle, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, optionSettings, tags, _callback);
        Type localVarReturnType = new TypeToken<CreatePlatformVersionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateStorageLocation
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> S3SubscriptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateStorageLocationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateStorageLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateStorageLocationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateStorageLocation(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateStorageLocation(Async)");
        }

        return gETCreateStorageLocationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a bucket in Amazon S3 to store application versions, logs, and other files used by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the first time you create an environment in a region. If the storage location already exists, &lt;code&gt;CreateStorageLocation&lt;/code&gt; still returns the bucket name but does not create a new bucket.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStorageLocationResultMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> S3SubscriptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStorageLocationResultMessage gETCreateStorageLocation(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStorageLocationResultMessage> localVarResp = gETCreateStorageLocationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a bucket in Amazon S3 to store application versions, logs, and other files used by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the first time you create an environment in a region. If the storage location already exists, &lt;code&gt;CreateStorageLocation&lt;/code&gt; still returns the bucket name but does not create a new bucket.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStorageLocationResultMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> S3SubscriptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStorageLocationResultMessage> gETCreateStorageLocationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETCreateStorageLocationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStorageLocationResultMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a bucket in Amazon S3 to store application versions, logs, and other files used by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the first time you create an environment in a region. If the storage location already exists, &lt;code&gt;CreateStorageLocation&lt;/code&gt; still returns the bucket name but does not create a new bucket.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> S3SubscriptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateStorageLocationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStorageLocationResultMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateStorageLocationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStorageLocationResultMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteApplication
     * @param applicationName The name of the application to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateEnvByForce When set to true, running environments will be terminated before deleting the application. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteApplicationCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean terminateEnvByForce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (terminateEnvByForce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TerminateEnvByForce", terminateEnvByForce));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteApplicationValidateBeforeCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean terminateEnvByForce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETDeleteApplication(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteApplication(Async)");
        }

        return gETDeleteApplicationCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateEnvByForce, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified application along with all associated versions and configurations. The application versions will not be deleted from your Amazon S3 bucket.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application that has a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateEnvByForce When set to true, running environments will be terminated before deleting the application. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteApplication(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean terminateEnvByForce) throws ApiException {
        gETDeleteApplicationWithHttpInfo(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateEnvByForce);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified application along with all associated versions and configurations. The application versions will not be deleted from your Amazon S3 bucket.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application that has a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateEnvByForce When set to true, running environments will be terminated before deleting the application. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteApplicationWithHttpInfo(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean terminateEnvByForce) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteApplicationValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateEnvByForce, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified application along with all associated versions and configurations. The application versions will not be deleted from your Amazon S3 bucket.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application that has a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateEnvByForce When set to true, running environments will be terminated before deleting the application. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteApplicationAsync(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean terminateEnvByForce, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteApplicationValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateEnvByForce, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteApplicationVersion
     * @param applicationName The name of the application to which the version belongs. (required)
     * @param versionLabel The label of the version to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSourceBundle Set to &lt;code&gt;true&lt;/code&gt; to delete the source bundle from your storage bucket. Otherwise, the application version is deleted only from Elastic Beanstalk and the source bundle remains in Amazon S3. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SourceBundleDeletionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteApplicationVersionCall(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean deleteSourceBundle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteApplicationVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (versionLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionLabel", versionLabel));
        }

        if (deleteSourceBundle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeleteSourceBundle", deleteSourceBundle));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteApplicationVersionValidateBeforeCall(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean deleteSourceBundle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETDeleteApplicationVersion(Async)");
        }

        // verify the required parameter 'versionLabel' is set
        if (versionLabel == null) {
            throw new ApiException("Missing the required parameter 'versionLabel' when calling gETDeleteApplicationVersion(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteApplicationVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteApplicationVersion(Async)");
        }

        return gETDeleteApplicationVersionCall(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSourceBundle, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified version from the specified application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application version that is associated with a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to which the version belongs. (required)
     * @param versionLabel The label of the version to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSourceBundle Set to &lt;code&gt;true&lt;/code&gt; to delete the source bundle from your storage bucket. Otherwise, the application version is deleted only from Elastic Beanstalk and the source bundle remains in Amazon S3. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SourceBundleDeletionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteApplicationVersion(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean deleteSourceBundle) throws ApiException {
        gETDeleteApplicationVersionWithHttpInfo(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSourceBundle);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified version from the specified application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application version that is associated with a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to which the version belongs. (required)
     * @param versionLabel The label of the version to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSourceBundle Set to &lt;code&gt;true&lt;/code&gt; to delete the source bundle from your storage bucket. Otherwise, the application version is deleted only from Elastic Beanstalk and the source bundle remains in Amazon S3. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SourceBundleDeletionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteApplicationVersionWithHttpInfo(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean deleteSourceBundle) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteApplicationVersionValidateBeforeCall(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSourceBundle, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified version from the specified application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application version that is associated with a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to which the version belongs. (required)
     * @param versionLabel The label of the version to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSourceBundle Set to &lt;code&gt;true&lt;/code&gt; to delete the source bundle from your storage bucket. Otherwise, the application version is deleted only from Elastic Beanstalk and the source bundle remains in Amazon S3. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SourceBundleDeletionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteApplicationVersionAsync(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean deleteSourceBundle, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteApplicationVersionValidateBeforeCall(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSourceBundle, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteConfigurationTemplate
     * @param applicationName The name of the application to delete the configuration template from. (required)
     * @param templateName The name of the configuration template to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteConfigurationTemplateCall(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteConfigurationTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateName", templateName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteConfigurationTemplateValidateBeforeCall(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETDeleteConfigurationTemplate(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling gETDeleteConfigurationTemplate(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteConfigurationTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteConfigurationTemplate(Async)");
        }

        return gETDeleteConfigurationTemplateCall(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified configuration template.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you launch an environment using a configuration template, the environment gets a copy of the template. You can delete or modify the environment&#39;s copy of the template without affecting the running environment.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to delete the configuration template from. (required)
     * @param templateName The name of the configuration template to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteConfigurationTemplate(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteConfigurationTemplateWithHttpInfo(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified configuration template.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you launch an environment using a configuration template, the environment gets a copy of the template. You can delete or modify the environment&#39;s copy of the template without affecting the running environment.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to delete the configuration template from. (required)
     * @param templateName The name of the configuration template to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteConfigurationTemplateWithHttpInfo(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteConfigurationTemplateValidateBeforeCall(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified configuration template.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you launch an environment using a configuration template, the environment gets a copy of the template. You can delete or modify the environment&#39;s copy of the template without affecting the running environment.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to delete the configuration template from. (required)
     * @param templateName The name of the configuration template to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteConfigurationTemplateAsync(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteConfigurationTemplateValidateBeforeCall(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteEnvironmentConfiguration
     * @param applicationName The name of the application the environment is associated with. (required)
     * @param environmentName The name of the environment to delete the draft configuration from. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteEnvironmentConfigurationCall(String applicationName, String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteEnvironmentConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteEnvironmentConfigurationValidateBeforeCall(String applicationName, String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETDeleteEnvironmentConfiguration(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling gETDeleteEnvironmentConfiguration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteEnvironmentConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteEnvironmentConfiguration(Async)");
        }

        return gETDeleteEnvironmentConfigurationCall(applicationName, environmentName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the draft configuration associated with the running environment.&lt;/p&gt; &lt;p&gt;Updating a running environment with any configuration changes creates a draft configuration set. You can get the draft configuration using &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; while the update is in progress or if the update fails. The &lt;code&gt;DeploymentStatus&lt;/code&gt; for the draft configuration indicates whether the deployment is in process or has failed. The draft configuration remains in existence until it is deleted with this action.&lt;/p&gt;
     * @param applicationName The name of the application the environment is associated with. (required)
     * @param environmentName The name of the environment to delete the draft configuration from. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteEnvironmentConfiguration(String applicationName, String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteEnvironmentConfigurationWithHttpInfo(applicationName, environmentName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the draft configuration associated with the running environment.&lt;/p&gt; &lt;p&gt;Updating a running environment with any configuration changes creates a draft configuration set. You can get the draft configuration using &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; while the update is in progress or if the update fails. The &lt;code&gt;DeploymentStatus&lt;/code&gt; for the draft configuration indicates whether the deployment is in process or has failed. The draft configuration remains in existence until it is deleted with this action.&lt;/p&gt;
     * @param applicationName The name of the application the environment is associated with. (required)
     * @param environmentName The name of the environment to delete the draft configuration from. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteEnvironmentConfigurationWithHttpInfo(String applicationName, String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteEnvironmentConfigurationValidateBeforeCall(applicationName, environmentName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the draft configuration associated with the running environment.&lt;/p&gt; &lt;p&gt;Updating a running environment with any configuration changes creates a draft configuration set. You can get the draft configuration using &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; while the update is in progress or if the update fails. The &lt;code&gt;DeploymentStatus&lt;/code&gt; for the draft configuration indicates whether the deployment is in process or has failed. The draft configuration remains in existence until it is deleted with this action.&lt;/p&gt;
     * @param applicationName The name of the application the environment is associated with. (required)
     * @param environmentName The name of the environment to delete the draft configuration from. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteEnvironmentConfigurationAsync(String applicationName, String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteEnvironmentConfigurationValidateBeforeCall(applicationName, environmentName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeletePlatformVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param platformArn The ARN of the version of the custom platform. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformVersionStillReferencedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeletePlatformVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeletePlatformVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platformArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformArn", platformArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeletePlatformVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeletePlatformVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeletePlatformVersion(Async)");
        }

        return gETDeletePlatformVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, platformArn, _callback);

    }

    /**
     * 
     * Deletes the specified version of a custom platform.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param platformArn The ARN of the version of the custom platform. (optional)
     * @return DeletePlatformVersionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformVersionStillReferencedException </td><td>  -  </td></tr>
     </table>
     */
    public DeletePlatformVersionResult gETDeletePlatformVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn) throws ApiException {
        ApiResponse<DeletePlatformVersionResult> localVarResp = gETDeletePlatformVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, platformArn);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified version of a custom platform.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param platformArn The ARN of the version of the custom platform. (optional)
     * @return ApiResponse&lt;DeletePlatformVersionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformVersionStillReferencedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletePlatformVersionResult> gETDeletePlatformVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn) throws ApiException {
        okhttp3.Call localVarCall = gETDeletePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, platformArn, null);
        Type localVarReturnType = new TypeToken<DeletePlatformVersionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified version of a custom platform.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param platformArn The ARN of the version of the custom platform. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformVersionStillReferencedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeletePlatformVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn, final ApiCallback<DeletePlatformVersionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeletePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, platformArn, _callback);
        Type localVarReturnType = new TypeToken<DeletePlatformVersionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAccountAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAccountAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAccountAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAccountAttributes(Async)");
        }

        return gETDescribeAccountAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS account.&lt;/p&gt; &lt;p&gt;The result currently has one set of attributes—resource quotas.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAccountAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountAttributesResult gETDescribeAccountAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAccountAttributesResult> localVarResp = gETDescribeAccountAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS account.&lt;/p&gt; &lt;p&gt;The result currently has one set of attributes—resource quotas.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAccountAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountAttributesResult> gETDescribeAccountAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAccountAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAccountAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS account.&lt;/p&gt; &lt;p&gt;The result currently has one set of attributes—resource quotas.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAccountAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAccountAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeApplicationVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName Specify an application name to show only application versions for that application. (optional)
     * @param versionLabels Specify a version label to show a specific application version. (optional)
     * @param maxRecords &lt;p&gt;For a paginated request. Specify a maximum number of application versions to include in each response.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;MaxRecords&lt;/code&gt; is specified, all available application versions are retrieved in a single response.&lt;/p&gt; (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeApplicationVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, List<String> versionLabels, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeApplicationVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (versionLabels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VersionLabels", versionLabels));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeApplicationVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, List<String> versionLabels, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeApplicationVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeApplicationVersions(Async)");
        }

        return gETDescribeApplicationVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabels, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Retrieve a list of application versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName Specify an application name to show only application versions for that application. (optional)
     * @param versionLabels Specify a version label to show a specific application version. (optional)
     * @param maxRecords &lt;p&gt;For a paginated request. Specify a maximum number of application versions to include in each response.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;MaxRecords&lt;/code&gt; is specified, all available application versions are retrieved in a single response.&lt;/p&gt; (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @return ApplicationVersionDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationVersionDescriptionsMessage gETDescribeApplicationVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, List<String> versionLabels, Integer maxRecords, String nextToken) throws ApiException {
        ApiResponse<ApplicationVersionDescriptionsMessage> localVarResp = gETDescribeApplicationVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabels, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of application versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName Specify an application name to show only application versions for that application. (optional)
     * @param versionLabels Specify a version label to show a specific application version. (optional)
     * @param maxRecords &lt;p&gt;For a paginated request. Specify a maximum number of application versions to include in each response.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;MaxRecords&lt;/code&gt; is specified, all available application versions are retrieved in a single response.&lt;/p&gt; (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ApplicationVersionDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationVersionDescriptionsMessage> gETDescribeApplicationVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, List<String> versionLabels, Integer maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeApplicationVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabels, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of application versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName Specify an application name to show only application versions for that application. (optional)
     * @param versionLabels Specify a version label to show a specific application version. (optional)
     * @param maxRecords &lt;p&gt;For a paginated request. Specify a maximum number of application versions to include in each response.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;MaxRecords&lt;/code&gt; is specified, all available application versions are retrieved in a single response.&lt;/p&gt; (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeApplicationVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, List<String> versionLabels, Integer maxRecords, String nextToken, final ApiCallback<ApplicationVersionDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeApplicationVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabels, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeApplications
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationNames If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeApplicationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> applicationNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeApplications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ApplicationNames", applicationNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeApplicationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> applicationNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeApplications(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeApplications(Async)");
        }

        return gETDescribeApplicationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationNames, _callback);

    }

    /**
     * 
     * Returns the descriptions of existing applications.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationNames If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names. (optional)
     * @return ApplicationDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationDescriptionsMessage gETDescribeApplications(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> applicationNames) throws ApiException {
        ApiResponse<ApplicationDescriptionsMessage> localVarResp = gETDescribeApplicationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationNames);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the descriptions of existing applications.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationNames If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names. (optional)
     * @return ApiResponse&lt;ApplicationDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationDescriptionsMessage> gETDescribeApplicationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> applicationNames) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeApplicationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationNames, null);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the descriptions of existing applications.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationNames If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeApplicationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> applicationNames, final ApiCallback<ApplicationDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeApplicationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationNames, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeConfigurationOptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application associated with the configuration template or environment. Only needed if you want to describe the configuration options associated with either the configuration template or environment. (optional)
     * @param templateName The name of the configuration template whose configuration options you want to describe. (optional)
     * @param environmentName The name of the environment whose configuration options you want to describe. (optional)
     * @param solutionStackName The name of the solution stack whose configuration options you want to describe. (optional)
     * @param platformArn The ARN of the custom platform. (optional)
     * @param options If specified, restricts the descriptions to only the specified options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeConfigurationOptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String templateName, String environmentName, String solutionStackName, String platformArn, List<OptionSpecification> options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeConfigurationOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateName", templateName));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (solutionStackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SolutionStackName", solutionStackName));
        }

        if (platformArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformArn", platformArn));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Options", options));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeConfigurationOptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String templateName, String environmentName, String solutionStackName, String platformArn, List<OptionSpecification> options, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeConfigurationOptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeConfigurationOptions(Async)");
        }

        return gETDescribeConfigurationOptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, templateName, environmentName, solutionStackName, platformArn, options, _callback);

    }

    /**
     * 
     * Describes the configuration options that are used in a particular configuration template or environment, or that a specified solution stack defines. The description includes the values the options, their default values, and an indication of the required action on a running environment if an option value is changed.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application associated with the configuration template or environment. Only needed if you want to describe the configuration options associated with either the configuration template or environment. (optional)
     * @param templateName The name of the configuration template whose configuration options you want to describe. (optional)
     * @param environmentName The name of the environment whose configuration options you want to describe. (optional)
     * @param solutionStackName The name of the solution stack whose configuration options you want to describe. (optional)
     * @param platformArn The ARN of the custom platform. (optional)
     * @param options If specified, restricts the descriptions to only the specified options. (optional)
     * @return ConfigurationOptionsDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationOptionsDescription gETDescribeConfigurationOptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String templateName, String environmentName, String solutionStackName, String platformArn, List<OptionSpecification> options) throws ApiException {
        ApiResponse<ConfigurationOptionsDescription> localVarResp = gETDescribeConfigurationOptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, templateName, environmentName, solutionStackName, platformArn, options);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the configuration options that are used in a particular configuration template or environment, or that a specified solution stack defines. The description includes the values the options, their default values, and an indication of the required action on a running environment if an option value is changed.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application associated with the configuration template or environment. Only needed if you want to describe the configuration options associated with either the configuration template or environment. (optional)
     * @param templateName The name of the configuration template whose configuration options you want to describe. (optional)
     * @param environmentName The name of the environment whose configuration options you want to describe. (optional)
     * @param solutionStackName The name of the solution stack whose configuration options you want to describe. (optional)
     * @param platformArn The ARN of the custom platform. (optional)
     * @param options If specified, restricts the descriptions to only the specified options. (optional)
     * @return ApiResponse&lt;ConfigurationOptionsDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationOptionsDescription> gETDescribeConfigurationOptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String templateName, String environmentName, String solutionStackName, String platformArn, List<OptionSpecification> options) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeConfigurationOptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, templateName, environmentName, solutionStackName, platformArn, options, null);
        Type localVarReturnType = new TypeToken<ConfigurationOptionsDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the configuration options that are used in a particular configuration template or environment, or that a specified solution stack defines. The description includes the values the options, their default values, and an indication of the required action on a running environment if an option value is changed.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application associated with the configuration template or environment. Only needed if you want to describe the configuration options associated with either the configuration template or environment. (optional)
     * @param templateName The name of the configuration template whose configuration options you want to describe. (optional)
     * @param environmentName The name of the environment whose configuration options you want to describe. (optional)
     * @param solutionStackName The name of the solution stack whose configuration options you want to describe. (optional)
     * @param platformArn The ARN of the custom platform. (optional)
     * @param options If specified, restricts the descriptions to only the specified options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeConfigurationOptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String templateName, String environmentName, String solutionStackName, String platformArn, List<OptionSpecification> options, final ApiCallback<ConfigurationOptionsDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeConfigurationOptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, templateName, environmentName, solutionStackName, platformArn, options, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationOptionsDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeConfigurationSettings
     * @param applicationName The application for the environment or configuration template. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateName &lt;p&gt;The name of the configuration template to describe.&lt;/p&gt; &lt;p&gt; Conditional: You must specify either this parameter or an EnvironmentName, but not both. If you specify both, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. If you do not specify either, AWS Elastic Beanstalk returns a &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to describe.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or a TemplateName, but not both. If you specify both, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeConfigurationSettingsCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeConfigurationSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateName", templateName));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeConfigurationSettingsValidateBeforeCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETDescribeConfigurationSettings(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeConfigurationSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeConfigurationSettings(Async)");
        }

        return gETDescribeConfigurationSettingsCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateName, environmentName, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a description of the settings for the specified configuration set, that is, either a configuration template or the configuration set associated with a running environment.&lt;/p&gt; &lt;p&gt;When describing the settings for the configuration set associated with a running environment, it is possible to receive two sets of setting descriptions. One is the deployed configuration set, and the other is a draft configuration of an environment that is either in the process of deployment or that failed to deploy.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteEnvironmentConfiguration&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param applicationName The application for the environment or configuration template. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateName &lt;p&gt;The name of the configuration template to describe.&lt;/p&gt; &lt;p&gt; Conditional: You must specify either this parameter or an EnvironmentName, but not both. If you specify both, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. If you do not specify either, AWS Elastic Beanstalk returns a &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to describe.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or a TemplateName, but not both. If you specify both, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @return ConfigurationSettingsDescriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSettingsDescriptions gETDescribeConfigurationSettings(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName) throws ApiException {
        ApiResponse<ConfigurationSettingsDescriptions> localVarResp = gETDescribeConfigurationSettingsWithHttpInfo(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateName, environmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a description of the settings for the specified configuration set, that is, either a configuration template or the configuration set associated with a running environment.&lt;/p&gt; &lt;p&gt;When describing the settings for the configuration set associated with a running environment, it is possible to receive two sets of setting descriptions. One is the deployed configuration set, and the other is a draft configuration of an environment that is either in the process of deployment or that failed to deploy.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteEnvironmentConfiguration&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param applicationName The application for the environment or configuration template. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateName &lt;p&gt;The name of the configuration template to describe.&lt;/p&gt; &lt;p&gt; Conditional: You must specify either this parameter or an EnvironmentName, but not both. If you specify both, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. If you do not specify either, AWS Elastic Beanstalk returns a &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to describe.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or a TemplateName, but not both. If you specify both, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;ConfigurationSettingsDescriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSettingsDescriptions> gETDescribeConfigurationSettingsWithHttpInfo(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeConfigurationSettingsValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateName, environmentName, null);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a description of the settings for the specified configuration set, that is, either a configuration template or the configuration set associated with a running environment.&lt;/p&gt; &lt;p&gt;When describing the settings for the configuration set associated with a running environment, it is possible to receive two sets of setting descriptions. One is the deployed configuration set, and the other is a draft configuration of an environment that is either in the process of deployment or that failed to deploy.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteEnvironmentConfiguration&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param applicationName The application for the environment or configuration template. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateName &lt;p&gt;The name of the configuration template to describe.&lt;/p&gt; &lt;p&gt; Conditional: You must specify either this parameter or an EnvironmentName, but not both. If you specify both, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. If you do not specify either, AWS Elastic Beanstalk returns a &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to describe.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or a TemplateName, but not both. If you specify both, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeConfigurationSettingsAsync(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName, final ApiCallback<ConfigurationSettingsDescriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeConfigurationSettingsValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateName, environmentName, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEnvironmentHealth
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName &lt;p&gt;Specify the environment by name.&lt;/p&gt; &lt;p&gt;You must specify either this or an EnvironmentName, or both.&lt;/p&gt; (optional)
     * @param environmentId &lt;p&gt;Specify the environment by ID.&lt;/p&gt; &lt;p&gt;You must specify either this or an EnvironmentName, or both.&lt;/p&gt; (optional)
     * @param attributeNames Specify the response elements to return. To retrieve all attributes, set to &lt;code&gt;All&lt;/code&gt;. If no attribute names are specified, returns the name of the environment. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentHealthCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<EnvironmentHealthAttribute> attributeNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironmentHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (attributeNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AttributeNames", attributeNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEnvironmentHealthValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<EnvironmentHealthAttribute> attributeNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEnvironmentHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEnvironmentHealth(Async)");
        }

        return gETDescribeEnvironmentHealthCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, attributeNames, _callback);

    }

    /**
     * 
     * Returns information about the overall health of the specified environment. The &lt;b&gt;DescribeEnvironmentHealth&lt;/b&gt; operation is only available with AWS Elastic Beanstalk Enhanced Health.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName &lt;p&gt;Specify the environment by name.&lt;/p&gt; &lt;p&gt;You must specify either this or an EnvironmentName, or both.&lt;/p&gt; (optional)
     * @param environmentId &lt;p&gt;Specify the environment by ID.&lt;/p&gt; &lt;p&gt;You must specify either this or an EnvironmentName, or both.&lt;/p&gt; (optional)
     * @param attributeNames Specify the response elements to return. To retrieve all attributes, set to &lt;code&gt;All&lt;/code&gt;. If no attribute names are specified, returns the name of the environment. (optional)
     * @return DescribeEnvironmentHealthResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEnvironmentHealthResult gETDescribeEnvironmentHealth(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<EnvironmentHealthAttribute> attributeNames) throws ApiException {
        ApiResponse<DescribeEnvironmentHealthResult> localVarResp = gETDescribeEnvironmentHealthWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, attributeNames);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the overall health of the specified environment. The &lt;b&gt;DescribeEnvironmentHealth&lt;/b&gt; operation is only available with AWS Elastic Beanstalk Enhanced Health.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName &lt;p&gt;Specify the environment by name.&lt;/p&gt; &lt;p&gt;You must specify either this or an EnvironmentName, or both.&lt;/p&gt; (optional)
     * @param environmentId &lt;p&gt;Specify the environment by ID.&lt;/p&gt; &lt;p&gt;You must specify either this or an EnvironmentName, or both.&lt;/p&gt; (optional)
     * @param attributeNames Specify the response elements to return. To retrieve all attributes, set to &lt;code&gt;All&lt;/code&gt;. If no attribute names are specified, returns the name of the environment. (optional)
     * @return ApiResponse&lt;DescribeEnvironmentHealthResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEnvironmentHealthResult> gETDescribeEnvironmentHealthWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<EnvironmentHealthAttribute> attributeNames) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEnvironmentHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, attributeNames, null);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentHealthResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the overall health of the specified environment. The &lt;b&gt;DescribeEnvironmentHealth&lt;/b&gt; operation is only available with AWS Elastic Beanstalk Enhanced Health.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName &lt;p&gt;Specify the environment by name.&lt;/p&gt; &lt;p&gt;You must specify either this or an EnvironmentName, or both.&lt;/p&gt; (optional)
     * @param environmentId &lt;p&gt;Specify the environment by ID.&lt;/p&gt; &lt;p&gt;You must specify either this or an EnvironmentName, or both.&lt;/p&gt; (optional)
     * @param attributeNames Specify the response elements to return. To retrieve all attributes, set to &lt;code&gt;All&lt;/code&gt;. If no attribute names are specified, returns the name of the environment. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentHealthAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<EnvironmentHealthAttribute> attributeNames, final ApiCallback<DescribeEnvironmentHealthResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEnvironmentHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, attributeNames, _callback);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentHealthResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEnvironmentManagedActionHistory
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param nextToken The pagination token returned by a previous request. (optional)
     * @param maxItems The maximum number of items to return for a single request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentManagedActionHistoryCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, String nextToken, Integer maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironmentManagedActionHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEnvironmentManagedActionHistoryValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, String nextToken, Integer maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEnvironmentManagedActionHistory(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEnvironmentManagedActionHistory(Async)");
        }

        return gETDescribeEnvironmentManagedActionHistoryCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, nextToken, maxItems, _callback);

    }

    /**
     * 
     * Lists an environment&#39;s completed and failed managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param nextToken The pagination token returned by a previous request. (optional)
     * @param maxItems The maximum number of items to return for a single request. (optional)
     * @return DescribeEnvironmentManagedActionHistoryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEnvironmentManagedActionHistoryResult gETDescribeEnvironmentManagedActionHistory(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, String nextToken, Integer maxItems) throws ApiException {
        ApiResponse<DescribeEnvironmentManagedActionHistoryResult> localVarResp = gETDescribeEnvironmentManagedActionHistoryWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, nextToken, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists an environment&#39;s completed and failed managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param nextToken The pagination token returned by a previous request. (optional)
     * @param maxItems The maximum number of items to return for a single request. (optional)
     * @return ApiResponse&lt;DescribeEnvironmentManagedActionHistoryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEnvironmentManagedActionHistoryResult> gETDescribeEnvironmentManagedActionHistoryWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, String nextToken, Integer maxItems) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEnvironmentManagedActionHistoryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, nextToken, maxItems, null);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentManagedActionHistoryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists an environment&#39;s completed and failed managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param nextToken The pagination token returned by a previous request. (optional)
     * @param maxItems The maximum number of items to return for a single request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentManagedActionHistoryAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, String nextToken, Integer maxItems, final ApiCallback<DescribeEnvironmentManagedActionHistoryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEnvironmentManagedActionHistoryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, nextToken, maxItems, _callback);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentManagedActionHistoryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEnvironmentManagedActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param status To show only actions with a particular status, specify a status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentManagedActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironmentManagedActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEnvironmentManagedActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEnvironmentManagedActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEnvironmentManagedActions(Async)");
        }

        return gETDescribeEnvironmentManagedActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, status, _callback);

    }

    /**
     * 
     * Lists an environment&#39;s upcoming and in-progress managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param status To show only actions with a particular status, specify a status. (optional)
     * @return DescribeEnvironmentManagedActionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEnvironmentManagedActionsResult gETDescribeEnvironmentManagedActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, String status) throws ApiException {
        ApiResponse<DescribeEnvironmentManagedActionsResult> localVarResp = gETDescribeEnvironmentManagedActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, status);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists an environment&#39;s upcoming and in-progress managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param status To show only actions with a particular status, specify a status. (optional)
     * @return ApiResponse&lt;DescribeEnvironmentManagedActionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEnvironmentManagedActionsResult> gETDescribeEnvironmentManagedActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, String status) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEnvironmentManagedActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, status, null);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentManagedActionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists an environment&#39;s upcoming and in-progress managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName The name of the target environment. (optional)
     * @param environmentId The environment ID of the target environment. (optional)
     * @param status To show only actions with a particular status, specify a status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentManagedActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, String status, final ApiCallback<DescribeEnvironmentManagedActionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEnvironmentManagedActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, status, _callback);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentManagedActionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEnvironmentResources
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to retrieve AWS resource usage data.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to retrieve AWS resource usage data.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentResourcesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironmentResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEnvironmentResourcesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEnvironmentResources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEnvironmentResources(Async)");
        }

        return gETDescribeEnvironmentResourcesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);

    }

    /**
     * 
     * Returns AWS resources for this environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to retrieve AWS resource usage data.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to retrieve AWS resource usage data.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @return EnvironmentResourceDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentResourceDescriptionsMessage gETDescribeEnvironmentResources(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        ApiResponse<EnvironmentResourceDescriptionsMessage> localVarResp = gETDescribeEnvironmentResourcesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns AWS resources for this environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to retrieve AWS resource usage data.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to retrieve AWS resource usage data.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;EnvironmentResourceDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentResourceDescriptionsMessage> gETDescribeEnvironmentResourcesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEnvironmentResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, null);
        Type localVarReturnType = new TypeToken<EnvironmentResourceDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns AWS resources for this environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to retrieve AWS resource usage data.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to retrieve AWS resource usage data.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentResourcesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback<EnvironmentResourceDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEnvironmentResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentResourceDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEnvironments
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application. (optional)
     * @param versionLabel If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version. (optional)
     * @param environmentIds If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs. (optional)
     * @param environmentNames If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names. (optional)
     * @param includeDeleted &lt;p&gt;Indicates whether to include deleted environments:&lt;/p&gt; &lt;p&gt; &lt;code&gt;true&lt;/code&gt;: Environments that have been deleted after &lt;code&gt;IncludedDeletedBackTo&lt;/code&gt; are displayed.&lt;/p&gt; &lt;p&gt; &lt;code&gt;false&lt;/code&gt;: Do not include deleted environments.&lt;/p&gt; (optional)
     * @param includedDeletedBackTo  If specified when &lt;code&gt;IncludeDeleted&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, then environments deleted after this date are displayed.  (optional)
     * @param maxRecords &lt;p&gt;For a paginated request. Specify a maximum number of environments to include in each response.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;MaxRecords&lt;/code&gt; is specified, all available environments are retrieved in a single response.&lt;/p&gt; (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, List<String> environmentIds, List<String> environmentNames, Boolean includeDeleted, OffsetDateTime includedDeletedBackTo, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (versionLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionLabel", versionLabel));
        }

        if (environmentIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EnvironmentIds", environmentIds));
        }

        if (environmentNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EnvironmentNames", environmentNames));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeDeleted", includeDeleted));
        }

        if (includedDeletedBackTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludedDeletedBackTo", includedDeletedBackTo));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEnvironmentsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, List<String> environmentIds, List<String> environmentNames, Boolean includeDeleted, OffsetDateTime includedDeletedBackTo, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEnvironments(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEnvironments(Async)");
        }

        return gETDescribeEnvironmentsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabel, environmentIds, environmentNames, includeDeleted, includedDeletedBackTo, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Returns descriptions for existing environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application. (optional)
     * @param versionLabel If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version. (optional)
     * @param environmentIds If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs. (optional)
     * @param environmentNames If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names. (optional)
     * @param includeDeleted &lt;p&gt;Indicates whether to include deleted environments:&lt;/p&gt; &lt;p&gt; &lt;code&gt;true&lt;/code&gt;: Environments that have been deleted after &lt;code&gt;IncludedDeletedBackTo&lt;/code&gt; are displayed.&lt;/p&gt; &lt;p&gt; &lt;code&gt;false&lt;/code&gt;: Do not include deleted environments.&lt;/p&gt; (optional)
     * @param includedDeletedBackTo  If specified when &lt;code&gt;IncludeDeleted&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, then environments deleted after this date are displayed.  (optional)
     * @param maxRecords &lt;p&gt;For a paginated request. Specify a maximum number of environments to include in each response.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;MaxRecords&lt;/code&gt; is specified, all available environments are retrieved in a single response.&lt;/p&gt; (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @return EnvironmentDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescriptionsMessage gETDescribeEnvironments(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, List<String> environmentIds, List<String> environmentNames, Boolean includeDeleted, OffsetDateTime includedDeletedBackTo, Integer maxRecords, String nextToken) throws ApiException {
        ApiResponse<EnvironmentDescriptionsMessage> localVarResp = gETDescribeEnvironmentsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabel, environmentIds, environmentNames, includeDeleted, includedDeletedBackTo, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns descriptions for existing environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application. (optional)
     * @param versionLabel If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version. (optional)
     * @param environmentIds If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs. (optional)
     * @param environmentNames If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names. (optional)
     * @param includeDeleted &lt;p&gt;Indicates whether to include deleted environments:&lt;/p&gt; &lt;p&gt; &lt;code&gt;true&lt;/code&gt;: Environments that have been deleted after &lt;code&gt;IncludedDeletedBackTo&lt;/code&gt; are displayed.&lt;/p&gt; &lt;p&gt; &lt;code&gt;false&lt;/code&gt;: Do not include deleted environments.&lt;/p&gt; (optional)
     * @param includedDeletedBackTo  If specified when &lt;code&gt;IncludeDeleted&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, then environments deleted after this date are displayed.  (optional)
     * @param maxRecords &lt;p&gt;For a paginated request. Specify a maximum number of environments to include in each response.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;MaxRecords&lt;/code&gt; is specified, all available environments are retrieved in a single response.&lt;/p&gt; (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;EnvironmentDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescriptionsMessage> gETDescribeEnvironmentsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, List<String> environmentIds, List<String> environmentNames, Boolean includeDeleted, OffsetDateTime includedDeletedBackTo, Integer maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEnvironmentsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabel, environmentIds, environmentNames, includeDeleted, includedDeletedBackTo, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns descriptions for existing environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application. (optional)
     * @param versionLabel If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version. (optional)
     * @param environmentIds If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs. (optional)
     * @param environmentNames If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names. (optional)
     * @param includeDeleted &lt;p&gt;Indicates whether to include deleted environments:&lt;/p&gt; &lt;p&gt; &lt;code&gt;true&lt;/code&gt;: Environments that have been deleted after &lt;code&gt;IncludedDeletedBackTo&lt;/code&gt; are displayed.&lt;/p&gt; &lt;p&gt; &lt;code&gt;false&lt;/code&gt;: Do not include deleted environments.&lt;/p&gt; (optional)
     * @param includedDeletedBackTo  If specified when &lt;code&gt;IncludeDeleted&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, then environments deleted after this date are displayed.  (optional)
     * @param maxRecords &lt;p&gt;For a paginated request. Specify a maximum number of environments to include in each response.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;MaxRecords&lt;/code&gt; is specified, all available environments are retrieved in a single response.&lt;/p&gt; (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEnvironmentsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, List<String> environmentIds, List<String> environmentNames, Boolean includeDeleted, OffsetDateTime includedDeletedBackTo, Integer maxRecords, String nextToken, final ApiCallback<EnvironmentDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEnvironmentsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabel, environmentIds, environmentNames, includeDeleted, includedDeletedBackTo, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application. (optional)
     * @param versionLabel If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version. (optional)
     * @param templateName If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration. (optional)
     * @param environmentId If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment. (optional)
     * @param environmentName If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment. (optional)
     * @param platformArn The ARN of a custom platform version. If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this custom platform version. (optional)
     * @param requestId If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID. (optional)
     * @param severity If specified, limits the events returned from this call to include only those with the specified severity or higher. (optional)
     * @param startTime If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time. (optional)
     * @param endTime  If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the &lt;code&gt;EndTime&lt;/code&gt;.  (optional)
     * @param maxRecords Specifies the maximum number of events that can be returned, beginning with the most recent event. (optional)
     * @param nextToken Pagination token. If specified, the events return the next batch of results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, String templateName, String environmentId, String environmentName, String platformArn, String requestId, String severity, OffsetDateTime startTime, OffsetDateTime endTime, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (versionLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionLabel", versionLabel));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateName", templateName));
        }

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (platformArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformArn", platformArn));
        }

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RequestId", requestId));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Severity", severity));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, String templateName, String environmentId, String environmentName, String platformArn, String requestId, String severity, OffsetDateTime startTime, OffsetDateTime endTime, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEvents(Async)");
        }

        return gETDescribeEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabel, templateName, environmentId, environmentName, platformArn, requestId, severity, startTime, endTime, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns list of event descriptions matching criteria up to the last 6 weeks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action returns the most recent 1,000 events from the specified &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application. (optional)
     * @param versionLabel If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version. (optional)
     * @param templateName If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration. (optional)
     * @param environmentId If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment. (optional)
     * @param environmentName If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment. (optional)
     * @param platformArn The ARN of a custom platform version. If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this custom platform version. (optional)
     * @param requestId If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID. (optional)
     * @param severity If specified, limits the events returned from this call to include only those with the specified severity or higher. (optional)
     * @param startTime If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time. (optional)
     * @param endTime  If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the &lt;code&gt;EndTime&lt;/code&gt;.  (optional)
     * @param maxRecords Specifies the maximum number of events that can be returned, beginning with the most recent event. (optional)
     * @param nextToken Pagination token. If specified, the events return the next batch of results. (optional)
     * @return EventDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventDescriptionsMessage gETDescribeEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, String templateName, String environmentId, String environmentName, String platformArn, String requestId, String severity, OffsetDateTime startTime, OffsetDateTime endTime, Integer maxRecords, String nextToken) throws ApiException {
        ApiResponse<EventDescriptionsMessage> localVarResp = gETDescribeEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabel, templateName, environmentId, environmentName, platformArn, requestId, severity, startTime, endTime, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns list of event descriptions matching criteria up to the last 6 weeks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action returns the most recent 1,000 events from the specified &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application. (optional)
     * @param versionLabel If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version. (optional)
     * @param templateName If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration. (optional)
     * @param environmentId If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment. (optional)
     * @param environmentName If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment. (optional)
     * @param platformArn The ARN of a custom platform version. If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this custom platform version. (optional)
     * @param requestId If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID. (optional)
     * @param severity If specified, limits the events returned from this call to include only those with the specified severity or higher. (optional)
     * @param startTime If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time. (optional)
     * @param endTime  If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the &lt;code&gt;EndTime&lt;/code&gt;.  (optional)
     * @param maxRecords Specifies the maximum number of events that can be returned, beginning with the most recent event. (optional)
     * @param nextToken Pagination token. If specified, the events return the next batch of results. (optional)
     * @return ApiResponse&lt;EventDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventDescriptionsMessage> gETDescribeEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, String templateName, String environmentId, String environmentName, String platformArn, String requestId, String severity, OffsetDateTime startTime, OffsetDateTime endTime, Integer maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabel, templateName, environmentId, environmentName, platformArn, requestId, severity, startTime, endTime, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<EventDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns list of event descriptions matching criteria up to the last 6 weeks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action returns the most recent 1,000 events from the specified &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application. (optional)
     * @param versionLabel If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version. (optional)
     * @param templateName If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration. (optional)
     * @param environmentId If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment. (optional)
     * @param environmentName If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment. (optional)
     * @param platformArn The ARN of a custom platform version. If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this custom platform version. (optional)
     * @param requestId If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID. (optional)
     * @param severity If specified, limits the events returned from this call to include only those with the specified severity or higher. (optional)
     * @param startTime If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time. (optional)
     * @param endTime  If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the &lt;code&gt;EndTime&lt;/code&gt;.  (optional)
     * @param maxRecords Specifies the maximum number of events that can be returned, beginning with the most recent event. (optional)
     * @param nextToken Pagination token. If specified, the events return the next batch of results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String versionLabel, String templateName, String environmentId, String environmentName, String platformArn, String requestId, String severity, OffsetDateTime startTime, OffsetDateTime endTime, Integer maxRecords, String nextToken, final ApiCallback<EventDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, versionLabel, templateName, environmentId, environmentName, platformArn, requestId, severity, startTime, endTime, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<EventDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeInstancesHealth
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName Specify the AWS Elastic Beanstalk environment by name. (optional)
     * @param environmentId Specify the AWS Elastic Beanstalk environment by ID. (optional)
     * @param attributeNames Specifies the response elements you wish to receive. To retrieve all attributes, set to &lt;code&gt;All&lt;/code&gt;. If no attribute names are specified, returns a list of instances. (optional)
     * @param nextToken Specify the pagination token returned by a previous call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeInstancesHealthCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<InstancesHealthAttribute> attributeNames, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeInstancesHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (attributeNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AttributeNames", attributeNames));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeInstancesHealthValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<InstancesHealthAttribute> attributeNames, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeInstancesHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeInstancesHealth(Async)");
        }

        return gETDescribeInstancesHealthCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, attributeNames, nextToken, _callback);

    }

    /**
     * 
     * Retrieves detailed information about the health of instances in your AWS Elastic Beanstalk. This operation requires &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html\&quot;&gt;enhanced health reporting&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName Specify the AWS Elastic Beanstalk environment by name. (optional)
     * @param environmentId Specify the AWS Elastic Beanstalk environment by ID. (optional)
     * @param attributeNames Specifies the response elements you wish to receive. To retrieve all attributes, set to &lt;code&gt;All&lt;/code&gt;. If no attribute names are specified, returns a list of instances. (optional)
     * @param nextToken Specify the pagination token returned by a previous call. (optional)
     * @return DescribeInstancesHealthResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeInstancesHealthResult gETDescribeInstancesHealth(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<InstancesHealthAttribute> attributeNames, String nextToken) throws ApiException {
        ApiResponse<DescribeInstancesHealthResult> localVarResp = gETDescribeInstancesHealthWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, attributeNames, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves detailed information about the health of instances in your AWS Elastic Beanstalk. This operation requires &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html\&quot;&gt;enhanced health reporting&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName Specify the AWS Elastic Beanstalk environment by name. (optional)
     * @param environmentId Specify the AWS Elastic Beanstalk environment by ID. (optional)
     * @param attributeNames Specifies the response elements you wish to receive. To retrieve all attributes, set to &lt;code&gt;All&lt;/code&gt;. If no attribute names are specified, returns a list of instances. (optional)
     * @param nextToken Specify the pagination token returned by a previous call. (optional)
     * @return ApiResponse&lt;DescribeInstancesHealthResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeInstancesHealthResult> gETDescribeInstancesHealthWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<InstancesHealthAttribute> attributeNames, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeInstancesHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, attributeNames, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeInstancesHealthResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves detailed information about the health of instances in your AWS Elastic Beanstalk. This operation requires &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html\&quot;&gt;enhanced health reporting&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentName Specify the AWS Elastic Beanstalk environment by name. (optional)
     * @param environmentId Specify the AWS Elastic Beanstalk environment by ID. (optional)
     * @param attributeNames Specifies the response elements you wish to receive. To retrieve all attributes, set to &lt;code&gt;All&lt;/code&gt;. If no attribute names are specified, returns a list of instances. (optional)
     * @param nextToken Specify the pagination token returned by a previous call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeInstancesHealthAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentName, String environmentId, List<InstancesHealthAttribute> attributeNames, String nextToken, final ApiCallback<DescribeInstancesHealthResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeInstancesHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentName, environmentId, attributeNames, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeInstancesHealthResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribePlatformVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param platformArn The ARN of the platform version. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePlatformVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribePlatformVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platformArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformArn", platformArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribePlatformVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribePlatformVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribePlatformVersion(Async)");
        }

        return gETDescribePlatformVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, platformArn, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes a platform version. Provides full details. Compare to &lt;a&gt;ListPlatformVersions&lt;/a&gt;, which provides summary information about a list of platform versions.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param platformArn The ARN of the platform version. (optional)
     * @return DescribePlatformVersionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribePlatformVersionResult gETDescribePlatformVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn) throws ApiException {
        ApiResponse<DescribePlatformVersionResult> localVarResp = gETDescribePlatformVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, platformArn);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes a platform version. Provides full details. Compare to &lt;a&gt;ListPlatformVersions&lt;/a&gt;, which provides summary information about a list of platform versions.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param platformArn The ARN of the platform version. (optional)
     * @return ApiResponse&lt;DescribePlatformVersionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribePlatformVersionResult> gETDescribePlatformVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn) throws ApiException {
        okhttp3.Call localVarCall = gETDescribePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, platformArn, null);
        Type localVarReturnType = new TypeToken<DescribePlatformVersionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes a platform version. Provides full details. Compare to &lt;a&gt;ListPlatformVersions&lt;/a&gt;, which provides summary information about a list of platform versions.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param platformArn The ARN of the platform version. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePlatformVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String platformArn, final ApiCallback<DescribePlatformVersionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, platformArn, _callback);
        Type localVarReturnType = new TypeToken<DescribePlatformVersionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDisassociateEnvironmentOperationsRole
     * @param environmentName The name of the environment from which to disassociate the operations role. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisassociateEnvironmentOperationsRoleCall(String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DisassociateEnvironmentOperationsRole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDisassociateEnvironmentOperationsRoleValidateBeforeCall(String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling gETDisassociateEnvironmentOperationsRole(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDisassociateEnvironmentOperationsRole(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDisassociateEnvironmentOperationsRole(Async)");
        }

        return gETDisassociateEnvironmentOperationsRoleCall(environmentName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses the caller&#39;s permissions for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param environmentName The name of the environment from which to disassociate the operations role. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDisassociateEnvironmentOperationsRole(String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDisassociateEnvironmentOperationsRoleWithHttpInfo(environmentName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses the caller&#39;s permissions for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param environmentName The name of the environment from which to disassociate the operations role. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDisassociateEnvironmentOperationsRoleWithHttpInfo(String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDisassociateEnvironmentOperationsRoleValidateBeforeCall(environmentName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses the caller&#39;s permissions for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param environmentName The name of the environment from which to disassociate the operations role. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisassociateEnvironmentOperationsRoleAsync(String environmentName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDisassociateEnvironmentOperationsRoleValidateBeforeCall(environmentName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListAvailableSolutionStacks
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListAvailableSolutionStacksCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListAvailableSolutionStacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListAvailableSolutionStacksValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListAvailableSolutionStacks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListAvailableSolutionStacks(Async)");
        }

        return gETListAvailableSolutionStacksCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns a list of the available solution stack names, with the public version first and then in reverse chronological order.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListAvailableSolutionStacksResultMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableSolutionStacksResultMessage gETListAvailableSolutionStacks(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListAvailableSolutionStacksResultMessage> localVarResp = gETListAvailableSolutionStacksWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the available solution stack names, with the public version first and then in reverse chronological order.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListAvailableSolutionStacksResultMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAvailableSolutionStacksResultMessage> gETListAvailableSolutionStacksWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETListAvailableSolutionStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListAvailableSolutionStacksResultMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the available solution stack names, with the public version first and then in reverse chronological order.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListAvailableSolutionStacksAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListAvailableSolutionStacksResultMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListAvailableSolutionStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListAvailableSolutionStacksResultMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListPlatformBranches
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters &lt;p&gt;Criteria for restricting the resulting list of platform branches. The filter is evaluated as a logical conjunction (AND) of the separate &lt;code&gt;SearchFilter&lt;/code&gt; terms.&lt;/p&gt; &lt;p&gt;The following list shows valid attribute values for each of the &lt;code&gt;SearchFilter&lt;/code&gt; terms. Most operators take a single value. The &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not_in&lt;/code&gt; operators can take multiple values.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; BranchName&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;begins_with&lt;/code&gt; | &lt;code&gt;ends_with&lt;/code&gt; | &lt;code&gt;contains&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; LifecycleState&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Values&lt;/code&gt;: &lt;code&gt;beta&lt;/code&gt; | &lt;code&gt;supported&lt;/code&gt; | &lt;code&gt;deprecated&lt;/code&gt; | &lt;code&gt;retired&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; PlatformName&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;begins_with&lt;/code&gt; | &lt;code&gt;ends_with&lt;/code&gt; | &lt;code&gt;contains&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; TierType&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Values&lt;/code&gt;: &lt;code&gt;WebServer/Standard&lt;/code&gt; | &lt;code&gt;Worker/SQS/HTTP&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Array size: limited to 10 &lt;code&gt;SearchFilter&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;Within each &lt;code&gt;SearchFilter&lt;/code&gt; item, the &lt;code&gt;Values&lt;/code&gt; array is limited to 10 items.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of platform branch values returned in one call. (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListPlatformBranchesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<SearchFilter> filters, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListPlatformBranches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListPlatformBranchesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<SearchFilter> filters, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListPlatformBranches(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListPlatformBranches(Async)");
        }

        return gETListPlatformBranchesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the platform branches available for your account in an AWS Region. Provides summary information about each platform branch.&lt;/p&gt; &lt;p&gt;For definitions of platform branch and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters &lt;p&gt;Criteria for restricting the resulting list of platform branches. The filter is evaluated as a logical conjunction (AND) of the separate &lt;code&gt;SearchFilter&lt;/code&gt; terms.&lt;/p&gt; &lt;p&gt;The following list shows valid attribute values for each of the &lt;code&gt;SearchFilter&lt;/code&gt; terms. Most operators take a single value. The &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not_in&lt;/code&gt; operators can take multiple values.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; BranchName&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;begins_with&lt;/code&gt; | &lt;code&gt;ends_with&lt;/code&gt; | &lt;code&gt;contains&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; LifecycleState&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Values&lt;/code&gt;: &lt;code&gt;beta&lt;/code&gt; | &lt;code&gt;supported&lt;/code&gt; | &lt;code&gt;deprecated&lt;/code&gt; | &lt;code&gt;retired&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; PlatformName&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;begins_with&lt;/code&gt; | &lt;code&gt;ends_with&lt;/code&gt; | &lt;code&gt;contains&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; TierType&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Values&lt;/code&gt;: &lt;code&gt;WebServer/Standard&lt;/code&gt; | &lt;code&gt;Worker/SQS/HTTP&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Array size: limited to 10 &lt;code&gt;SearchFilter&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;Within each &lt;code&gt;SearchFilter&lt;/code&gt; item, the &lt;code&gt;Values&lt;/code&gt; array is limited to 10 items.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of platform branch values returned in one call. (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @return ListPlatformBranchesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListPlatformBranchesResult gETListPlatformBranches(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<SearchFilter> filters, Integer maxRecords, String nextToken) throws ApiException {
        ApiResponse<ListPlatformBranchesResult> localVarResp = gETListPlatformBranchesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the platform branches available for your account in an AWS Region. Provides summary information about each platform branch.&lt;/p&gt; &lt;p&gt;For definitions of platform branch and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters &lt;p&gt;Criteria for restricting the resulting list of platform branches. The filter is evaluated as a logical conjunction (AND) of the separate &lt;code&gt;SearchFilter&lt;/code&gt; terms.&lt;/p&gt; &lt;p&gt;The following list shows valid attribute values for each of the &lt;code&gt;SearchFilter&lt;/code&gt; terms. Most operators take a single value. The &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not_in&lt;/code&gt; operators can take multiple values.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; BranchName&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;begins_with&lt;/code&gt; | &lt;code&gt;ends_with&lt;/code&gt; | &lt;code&gt;contains&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; LifecycleState&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Values&lt;/code&gt;: &lt;code&gt;beta&lt;/code&gt; | &lt;code&gt;supported&lt;/code&gt; | &lt;code&gt;deprecated&lt;/code&gt; | &lt;code&gt;retired&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; PlatformName&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;begins_with&lt;/code&gt; | &lt;code&gt;ends_with&lt;/code&gt; | &lt;code&gt;contains&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; TierType&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Values&lt;/code&gt;: &lt;code&gt;WebServer/Standard&lt;/code&gt; | &lt;code&gt;Worker/SQS/HTTP&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Array size: limited to 10 &lt;code&gt;SearchFilter&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;Within each &lt;code&gt;SearchFilter&lt;/code&gt; item, the &lt;code&gt;Values&lt;/code&gt; array is limited to 10 items.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of platform branch values returned in one call. (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ListPlatformBranchesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPlatformBranchesResult> gETListPlatformBranchesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<SearchFilter> filters, Integer maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListPlatformBranchesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPlatformBranchesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the platform branches available for your account in an AWS Region. Provides summary information about each platform branch.&lt;/p&gt; &lt;p&gt;For definitions of platform branch and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters &lt;p&gt;Criteria for restricting the resulting list of platform branches. The filter is evaluated as a logical conjunction (AND) of the separate &lt;code&gt;SearchFilter&lt;/code&gt; terms.&lt;/p&gt; &lt;p&gt;The following list shows valid attribute values for each of the &lt;code&gt;SearchFilter&lt;/code&gt; terms. Most operators take a single value. The &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not_in&lt;/code&gt; operators can take multiple values.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; BranchName&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;begins_with&lt;/code&gt; | &lt;code&gt;ends_with&lt;/code&gt; | &lt;code&gt;contains&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; LifecycleState&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Values&lt;/code&gt;: &lt;code&gt;beta&lt;/code&gt; | &lt;code&gt;supported&lt;/code&gt; | &lt;code&gt;deprecated&lt;/code&gt; | &lt;code&gt;retired&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; PlatformName&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; | &lt;code&gt;begins_with&lt;/code&gt; | &lt;code&gt;ends_with&lt;/code&gt; | &lt;code&gt;contains&lt;/code&gt; | &lt;code&gt;in&lt;/code&gt; | &lt;code&gt;not_in&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Attribute &#x3D; TierType&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Operator&lt;/code&gt;: &lt;code&gt;&#x3D;&lt;/code&gt; | &lt;code&gt;!&#x3D;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Values&lt;/code&gt;: &lt;code&gt;WebServer/Standard&lt;/code&gt; | &lt;code&gt;Worker/SQS/HTTP&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Array size: limited to 10 &lt;code&gt;SearchFilter&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;Within each &lt;code&gt;SearchFilter&lt;/code&gt; item, the &lt;code&gt;Values&lt;/code&gt; array is limited to 10 items.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of platform branch values returned in one call. (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListPlatformBranchesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<SearchFilter> filters, Integer maxRecords, String nextToken, final ApiCallback<ListPlatformBranchesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListPlatformBranchesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPlatformBranchesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListPlatformVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters Criteria for restricting the resulting list of platform versions. The filter is interpreted as a logical conjunction (AND) of the separate &lt;code&gt;PlatformFilter&lt;/code&gt; terms. (optional)
     * @param maxRecords The maximum number of platform version values returned in one call. (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListPlatformVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PlatformFilter> filters, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListPlatformVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListPlatformVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PlatformFilter> filters, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListPlatformVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListPlatformVersions(Async)");
        }

        return gETListPlatformVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the platform versions available for your account in an AWS Region. Provides summary information about each platform version. Compare to &lt;a&gt;DescribePlatformVersion&lt;/a&gt;, which provides full details about a single platform version.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters Criteria for restricting the resulting list of platform versions. The filter is interpreted as a logical conjunction (AND) of the separate &lt;code&gt;PlatformFilter&lt;/code&gt; terms. (optional)
     * @param maxRecords The maximum number of platform version values returned in one call. (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @return ListPlatformVersionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ListPlatformVersionsResult gETListPlatformVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PlatformFilter> filters, Integer maxRecords, String nextToken) throws ApiException {
        ApiResponse<ListPlatformVersionsResult> localVarResp = gETListPlatformVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the platform versions available for your account in an AWS Region. Provides summary information about each platform version. Compare to &lt;a&gt;DescribePlatformVersion&lt;/a&gt;, which provides full details about a single platform version.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters Criteria for restricting the resulting list of platform versions. The filter is interpreted as a logical conjunction (AND) of the separate &lt;code&gt;PlatformFilter&lt;/code&gt; terms. (optional)
     * @param maxRecords The maximum number of platform version values returned in one call. (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ListPlatformVersionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPlatformVersionsResult> gETListPlatformVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PlatformFilter> filters, Integer maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListPlatformVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPlatformVersionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the platform versions available for your account in an AWS Region. Provides summary information about each platform version. Compare to &lt;a&gt;DescribePlatformVersion&lt;/a&gt;, which provides full details about a single platform version.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters Criteria for restricting the resulting list of platform versions. The filter is interpreted as a logical conjunction (AND) of the separate &lt;code&gt;PlatformFilter&lt;/code&gt; terms. (optional)
     * @param maxRecords The maximum number of platform version values returned in one call. (optional)
     * @param nextToken &lt;p&gt;For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.&lt;/p&gt; &lt;p&gt;If no &lt;code&gt;NextToken&lt;/code&gt; is specified, the first page is retrieved.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListPlatformVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<PlatformFilter> filters, Integer maxRecords, String nextToken, final ApiCallback<ListPlatformVersionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListPlatformVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPlatformVersionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTagsForResource
     * @param resourceArn &lt;p&gt;The Amazon Resource Name (ARN) of the resouce for which a tag list is requested.&lt;/p&gt; &lt;p&gt;Must be the ARN of an Elastic Beanstalk resource.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceCall(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceArn", resourceArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTagsForResourceValidateBeforeCall(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTagsForResource(Async)");
        }

        return gETListTagsForResourceCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt;
     * @param resourceArn &lt;p&gt;The Amazon Resource Name (ARN) of the resouce for which a tag list is requested.&lt;/p&gt; &lt;p&gt;Must be the ARN of an Elastic Beanstalk resource.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ResourceTagsDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ResourceTagsDescriptionMessage gETListTagsForResource(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ResourceTagsDescriptionMessage> localVarResp = gETListTagsForResourceWithHttpInfo(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt;
     * @param resourceArn &lt;p&gt;The Amazon Resource Name (ARN) of the resouce for which a tag list is requested.&lt;/p&gt; &lt;p&gt;Must be the ARN of an Elastic Beanstalk resource.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ResourceTagsDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceTagsDescriptionMessage> gETListTagsForResourceWithHttpInfo(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ResourceTagsDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt;
     * @param resourceArn &lt;p&gt;The Amazon Resource Name (ARN) of the resouce for which a tag list is requested.&lt;/p&gt; &lt;p&gt;Must be the ARN of an Elastic Beanstalk resource.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceAsync(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ResourceTagsDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ResourceTagsDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRebuildEnvironment
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to rebuild.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to rebuild.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebuildEnvironmentCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RebuildEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRebuildEnvironmentValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRebuildEnvironment(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRebuildEnvironment(Async)");
        }

        return gETRebuildEnvironmentCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);

    }

    /**
     * 
     * Deletes and recreates all of the AWS resources (for example: the Auto Scaling group, load balancer, etc.) for a specified environment and forces a restart.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to rebuild.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to rebuild.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public void gETRebuildEnvironment(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        gETRebuildEnvironmentWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName);
    }

    /**
     * 
     * Deletes and recreates all of the AWS resources (for example: the Auto Scaling group, load balancer, etc.) for a specified environment and forces a restart.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to rebuild.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to rebuild.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETRebuildEnvironmentWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = gETRebuildEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes and recreates all of the AWS resources (for example: the Auto Scaling group, load balancer, etc.) for a specified environment and forces a restart.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to rebuild.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to rebuild.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebuildEnvironmentAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRebuildEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRequestEnvironmentInfo
     * @param infoType The type of information to request. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment of the requested data.&lt;/p&gt; &lt;p&gt;If no such environment is found, &lt;code&gt;RequestEnvironmentInfo&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment of the requested data.&lt;/p&gt; &lt;p&gt;If no such environment is found, &lt;code&gt;RequestEnvironmentInfo&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRequestEnvironmentInfoCall(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RequestEnvironmentInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (infoType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InfoType", infoType));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRequestEnvironmentInfoValidateBeforeCall(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'infoType' is set
        if (infoType == null) {
            throw new ApiException("Missing the required parameter 'infoType' when calling gETRequestEnvironmentInfo(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRequestEnvironmentInfo(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRequestEnvironmentInfo(Async)");
        }

        return gETRequestEnvironmentInfoCall(infoType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);

    }

    /**
     * 
     * &lt;p&gt;Initiates a request to compile the specified type of information of the deployed environment.&lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;tail&lt;/code&gt; compiles the last lines from the application server log files of every Amazon EC2 instance in your environment. &lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;bundle&lt;/code&gt; compresses the application server log files for every Amazon EC2 instance into a &lt;code&gt;.zip&lt;/code&gt; file. Legacy and .NET containers do not support bundle logs. &lt;/p&gt; &lt;p&gt; Use &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; to obtain the set of logs. &lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param infoType The type of information to request. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment of the requested data.&lt;/p&gt; &lt;p&gt;If no such environment is found, &lt;code&gt;RequestEnvironmentInfo&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment of the requested data.&lt;/p&gt; &lt;p&gt;If no such environment is found, &lt;code&gt;RequestEnvironmentInfo&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETRequestEnvironmentInfo(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        gETRequestEnvironmentInfoWithHttpInfo(infoType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName);
    }

    /**
     * 
     * &lt;p&gt;Initiates a request to compile the specified type of information of the deployed environment.&lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;tail&lt;/code&gt; compiles the last lines from the application server log files of every Amazon EC2 instance in your environment. &lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;bundle&lt;/code&gt; compresses the application server log files for every Amazon EC2 instance into a &lt;code&gt;.zip&lt;/code&gt; file. Legacy and .NET containers do not support bundle logs. &lt;/p&gt; &lt;p&gt; Use &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; to obtain the set of logs. &lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param infoType The type of information to request. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment of the requested data.&lt;/p&gt; &lt;p&gt;If no such environment is found, &lt;code&gt;RequestEnvironmentInfo&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment of the requested data.&lt;/p&gt; &lt;p&gt;If no such environment is found, &lt;code&gt;RequestEnvironmentInfo&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETRequestEnvironmentInfoWithHttpInfo(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = gETRequestEnvironmentInfoValidateBeforeCall(infoType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Initiates a request to compile the specified type of information of the deployed environment.&lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;tail&lt;/code&gt; compiles the last lines from the application server log files of every Amazon EC2 instance in your environment. &lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;bundle&lt;/code&gt; compresses the application server log files for every Amazon EC2 instance into a &lt;code&gt;.zip&lt;/code&gt; file. Legacy and .NET containers do not support bundle logs. &lt;/p&gt; &lt;p&gt; Use &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; to obtain the set of logs. &lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param infoType The type of information to request. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment of the requested data.&lt;/p&gt; &lt;p&gt;If no such environment is found, &lt;code&gt;RequestEnvironmentInfo&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment of the requested data.&lt;/p&gt; &lt;p&gt;If no such environment is found, &lt;code&gt;RequestEnvironmentInfo&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRequestEnvironmentInfoAsync(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRequestEnvironmentInfoValidateBeforeCall(infoType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRestartAppServer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to restart the server for.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to restart the server for.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestartAppServerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RestartAppServer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRestartAppServerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRestartAppServer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRestartAppServer(Async)");
        }

        return gETRestartAppServerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);

    }

    /**
     * 
     * Causes the environment to restart the application container server running on each Amazon EC2 instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to restart the server for.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to restart the server for.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETRestartAppServer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        gETRestartAppServerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName);
    }

    /**
     * 
     * Causes the environment to restart the application container server running on each Amazon EC2 instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to restart the server for.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to restart the server for.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETRestartAppServerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = gETRestartAppServerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Causes the environment to restart the application container server running on each Amazon EC2 instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to restart the server for.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to restart the server for.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestartAppServerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRestartAppServerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRetrieveEnvironmentInfo
     * @param infoType The type of information to retrieve. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the data&#39;s environment.&lt;/p&gt; &lt;p&gt;If no such environment is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error.&lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the data&#39;s environment.&lt;/p&gt; &lt;p&gt; If no such environment is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRetrieveEnvironmentInfoCall(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RetrieveEnvironmentInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (infoType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InfoType", infoType));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRetrieveEnvironmentInfoValidateBeforeCall(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'infoType' is set
        if (infoType == null) {
            throw new ApiException("Missing the required parameter 'infoType' when calling gETRetrieveEnvironmentInfo(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRetrieveEnvironmentInfo(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRetrieveEnvironmentInfo(Async)");
        }

        return gETRetrieveEnvironmentInfoCall(infoType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the compiled information from a &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; request.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param infoType The type of information to retrieve. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the data&#39;s environment.&lt;/p&gt; &lt;p&gt;If no such environment is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error.&lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the data&#39;s environment.&lt;/p&gt; &lt;p&gt; If no such environment is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @return RetrieveEnvironmentInfoResultMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveEnvironmentInfoResultMessage gETRetrieveEnvironmentInfo(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        ApiResponse<RetrieveEnvironmentInfoResultMessage> localVarResp = gETRetrieveEnvironmentInfoWithHttpInfo(infoType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the compiled information from a &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; request.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param infoType The type of information to retrieve. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the data&#39;s environment.&lt;/p&gt; &lt;p&gt;If no such environment is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error.&lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the data&#39;s environment.&lt;/p&gt; &lt;p&gt; If no such environment is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;RetrieveEnvironmentInfoResultMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveEnvironmentInfoResultMessage> gETRetrieveEnvironmentInfoWithHttpInfo(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = gETRetrieveEnvironmentInfoValidateBeforeCall(infoType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, null);
        Type localVarReturnType = new TypeToken<RetrieveEnvironmentInfoResultMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the compiled information from a &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; request.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param infoType The type of information to retrieve. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the data&#39;s environment.&lt;/p&gt; &lt;p&gt;If no such environment is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error.&lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the data&#39;s environment.&lt;/p&gt; &lt;p&gt; If no such environment is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRetrieveEnvironmentInfoAsync(String infoType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, final ApiCallback<RetrieveEnvironmentInfoResultMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRetrieveEnvironmentInfoValidateBeforeCall(infoType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, _callback);
        Type localVarReturnType = new TypeToken<RetrieveEnvironmentInfoResultMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSwapEnvironmentCNAMEs
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceEnvironmentId &lt;p&gt;The ID of the source environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;SourceEnvironmentID&lt;/code&gt; or the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;. You may also specify both. If you specify the &lt;code&gt;SourceEnvironmentId&lt;/code&gt;, you must specify the &lt;code&gt;DestinationEnvironmentId&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param sourceEnvironmentName &lt;p&gt;The name of the source environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;SourceEnvironmentID&lt;/code&gt; or the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;. You may also specify both. If you specify the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;, you must specify the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param destinationEnvironmentId &lt;p&gt;The ID of the destination environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;DestinationEnvironmentID&lt;/code&gt; or the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. You may also specify both. You must specify the &lt;code&gt;SourceEnvironmentId&lt;/code&gt; with the &lt;code&gt;DestinationEnvironmentId&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param destinationEnvironmentName &lt;p&gt;The name of the destination environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;DestinationEnvironmentID&lt;/code&gt; or the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. You may also specify both. You must specify the &lt;code&gt;SourceEnvironmentName&lt;/code&gt; with the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSwapEnvironmentCNAMEsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceEnvironmentId, String sourceEnvironmentName, String destinationEnvironmentId, String destinationEnvironmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SwapEnvironmentCNAMEs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceEnvironmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceEnvironmentId", sourceEnvironmentId));
        }

        if (sourceEnvironmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceEnvironmentName", sourceEnvironmentName));
        }

        if (destinationEnvironmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DestinationEnvironmentId", destinationEnvironmentId));
        }

        if (destinationEnvironmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DestinationEnvironmentName", destinationEnvironmentName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSwapEnvironmentCNAMEsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceEnvironmentId, String sourceEnvironmentName, String destinationEnvironmentId, String destinationEnvironmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSwapEnvironmentCNAMEs(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSwapEnvironmentCNAMEs(Async)");
        }

        return gETSwapEnvironmentCNAMEsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceEnvironmentId, sourceEnvironmentName, destinationEnvironmentId, destinationEnvironmentName, _callback);

    }

    /**
     * 
     * Swaps the CNAMEs of two environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceEnvironmentId &lt;p&gt;The ID of the source environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;SourceEnvironmentID&lt;/code&gt; or the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;. You may also specify both. If you specify the &lt;code&gt;SourceEnvironmentId&lt;/code&gt;, you must specify the &lt;code&gt;DestinationEnvironmentId&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param sourceEnvironmentName &lt;p&gt;The name of the source environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;SourceEnvironmentID&lt;/code&gt; or the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;. You may also specify both. If you specify the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;, you must specify the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param destinationEnvironmentId &lt;p&gt;The ID of the destination environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;DestinationEnvironmentID&lt;/code&gt; or the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. You may also specify both. You must specify the &lt;code&gt;SourceEnvironmentId&lt;/code&gt; with the &lt;code&gt;DestinationEnvironmentId&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param destinationEnvironmentName &lt;p&gt;The name of the destination environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;DestinationEnvironmentID&lt;/code&gt; or the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. You may also specify both. You must specify the &lt;code&gt;SourceEnvironmentName&lt;/code&gt; with the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. &lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETSwapEnvironmentCNAMEs(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceEnvironmentId, String sourceEnvironmentName, String destinationEnvironmentId, String destinationEnvironmentName) throws ApiException {
        gETSwapEnvironmentCNAMEsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceEnvironmentId, sourceEnvironmentName, destinationEnvironmentId, destinationEnvironmentName);
    }

    /**
     * 
     * Swaps the CNAMEs of two environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceEnvironmentId &lt;p&gt;The ID of the source environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;SourceEnvironmentID&lt;/code&gt; or the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;. You may also specify both. If you specify the &lt;code&gt;SourceEnvironmentId&lt;/code&gt;, you must specify the &lt;code&gt;DestinationEnvironmentId&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param sourceEnvironmentName &lt;p&gt;The name of the source environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;SourceEnvironmentID&lt;/code&gt; or the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;. You may also specify both. If you specify the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;, you must specify the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param destinationEnvironmentId &lt;p&gt;The ID of the destination environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;DestinationEnvironmentID&lt;/code&gt; or the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. You may also specify both. You must specify the &lt;code&gt;SourceEnvironmentId&lt;/code&gt; with the &lt;code&gt;DestinationEnvironmentId&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param destinationEnvironmentName &lt;p&gt;The name of the destination environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;DestinationEnvironmentID&lt;/code&gt; or the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. You may also specify both. You must specify the &lt;code&gt;SourceEnvironmentName&lt;/code&gt; with the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSwapEnvironmentCNAMEsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceEnvironmentId, String sourceEnvironmentName, String destinationEnvironmentId, String destinationEnvironmentName) throws ApiException {
        okhttp3.Call localVarCall = gETSwapEnvironmentCNAMEsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceEnvironmentId, sourceEnvironmentName, destinationEnvironmentId, destinationEnvironmentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Swaps the CNAMEs of two environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceEnvironmentId &lt;p&gt;The ID of the source environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;SourceEnvironmentID&lt;/code&gt; or the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;. You may also specify both. If you specify the &lt;code&gt;SourceEnvironmentId&lt;/code&gt;, you must specify the &lt;code&gt;DestinationEnvironmentId&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param sourceEnvironmentName &lt;p&gt;The name of the source environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;SourceEnvironmentID&lt;/code&gt; or the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;. You may also specify both. If you specify the &lt;code&gt;SourceEnvironmentName&lt;/code&gt;, you must specify the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param destinationEnvironmentId &lt;p&gt;The ID of the destination environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;DestinationEnvironmentID&lt;/code&gt; or the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. You may also specify both. You must specify the &lt;code&gt;SourceEnvironmentId&lt;/code&gt; with the &lt;code&gt;DestinationEnvironmentId&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param destinationEnvironmentName &lt;p&gt;The name of the destination environment.&lt;/p&gt; &lt;p&gt; Condition: You must specify at least the &lt;code&gt;DestinationEnvironmentID&lt;/code&gt; or the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. You may also specify both. You must specify the &lt;code&gt;SourceEnvironmentName&lt;/code&gt; with the &lt;code&gt;DestinationEnvironmentName&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSwapEnvironmentCNAMEsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceEnvironmentId, String sourceEnvironmentName, String destinationEnvironmentId, String destinationEnvironmentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSwapEnvironmentCNAMEsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceEnvironmentId, sourceEnvironmentName, destinationEnvironmentId, destinationEnvironmentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETTerminateEnvironment
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to terminate.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to terminate.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param terminateResources &lt;p&gt;Indicates whether the associated AWS resources should shut down when the environment is terminated:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;true&lt;/code&gt;: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;false&lt;/code&gt;: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/\&quot;&gt; AWS Elastic Beanstalk User Guide. &lt;/a&gt; &lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; &lt;p&gt; Valid Values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param forceTerminate Terminates the target environment even if another environment in the same group is dependent on it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTerminateEnvironmentCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, Boolean terminateResources, Boolean forceTerminate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=TerminateEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (terminateResources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TerminateResources", terminateResources));
        }

        if (forceTerminate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ForceTerminate", forceTerminate));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETTerminateEnvironmentValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, Boolean terminateResources, Boolean forceTerminate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETTerminateEnvironment(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETTerminateEnvironment(Async)");
        }

        return gETTerminateEnvironmentCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, terminateResources, forceTerminate, _callback);

    }

    /**
     * 
     * Terminates the specified environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to terminate.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to terminate.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param terminateResources &lt;p&gt;Indicates whether the associated AWS resources should shut down when the environment is terminated:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;true&lt;/code&gt;: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;false&lt;/code&gt;: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/\&quot;&gt; AWS Elastic Beanstalk User Guide. &lt;/a&gt; &lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; &lt;p&gt; Valid Values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param forceTerminate Terminates the target environment even if another environment in the same group is dependent on it. (optional)
     * @return EnvironmentDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescription gETTerminateEnvironment(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, Boolean terminateResources, Boolean forceTerminate) throws ApiException {
        ApiResponse<EnvironmentDescription> localVarResp = gETTerminateEnvironmentWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, terminateResources, forceTerminate);
        return localVarResp.getData();
    }

    /**
     * 
     * Terminates the specified environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to terminate.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to terminate.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param terminateResources &lt;p&gt;Indicates whether the associated AWS resources should shut down when the environment is terminated:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;true&lt;/code&gt;: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;false&lt;/code&gt;: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/\&quot;&gt; AWS Elastic Beanstalk User Guide. &lt;/a&gt; &lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; &lt;p&gt; Valid Values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param forceTerminate Terminates the target environment even if another environment in the same group is dependent on it. (optional)
     * @return ApiResponse&lt;EnvironmentDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescription> gETTerminateEnvironmentWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, Boolean terminateResources, Boolean forceTerminate) throws ApiException {
        okhttp3.Call localVarCall = gETTerminateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, terminateResources, forceTerminate, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Terminates the specified environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to terminate.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to terminate.&lt;/p&gt; &lt;p&gt; Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param terminateResources &lt;p&gt;Indicates whether the associated AWS resources should shut down when the environment is terminated:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;true&lt;/code&gt;: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;false&lt;/code&gt;: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/\&quot;&gt; AWS Elastic Beanstalk User Guide. &lt;/a&gt; &lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; &lt;p&gt; Valid Values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param forceTerminate Terminates the target environment even if another environment in the same group is dependent on it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTerminateEnvironmentAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String environmentId, String environmentName, Boolean terminateResources, Boolean forceTerminate, final ApiCallback<EnvironmentDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETTerminateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, environmentName, terminateResources, forceTerminate, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateApplication
     * @param applicationName The name of the application to update. If no such application is found, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description &lt;p&gt;A new description for the application.&lt;/p&gt; &lt;p&gt;Default: If not specified, AWS Elastic Beanstalk does not update the description.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateApplicationCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateApplicationValidateBeforeCall(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETUpdateApplication(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateApplication(Async)");
        }

        return gETUpdateApplicationCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the specified application to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear these properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to update. If no such application is found, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description &lt;p&gt;A new description for the application.&lt;/p&gt; &lt;p&gt;Default: If not specified, AWS Elastic Beanstalk does not update the description.&lt;/p&gt; (optional)
     * @return ApplicationDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationDescriptionMessage gETUpdateApplication(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description) throws ApiException {
        ApiResponse<ApplicationDescriptionMessage> localVarResp = gETUpdateApplicationWithHttpInfo(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the specified application to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear these properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to update. If no such application is found, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description &lt;p&gt;A new description for the application.&lt;/p&gt; &lt;p&gt;Default: If not specified, AWS Elastic Beanstalk does not update the description.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ApplicationDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationDescriptionMessage> gETUpdateApplicationWithHttpInfo(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateApplicationValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, null);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the specified application to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear these properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName The name of the application to update. If no such application is found, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description &lt;p&gt;A new description for the application.&lt;/p&gt; &lt;p&gt;Default: If not specified, AWS Elastic Beanstalk does not update the description.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateApplicationAsync(String applicationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, final ApiCallback<ApplicationDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateApplicationValidateBeforeCall(applicationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateApplicationResourceLifecycle
     * @param applicationName The name of the application. (required)
     * @param resourceLifecycleConfig The lifecycle configuration. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateApplicationResourceLifecycleCall(String applicationName, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateApplicationResourceLifecycle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (resourceLifecycleConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceLifecycleConfig", resourceLifecycleConfig));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateApplicationResourceLifecycleValidateBeforeCall(String applicationName, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETUpdateApplicationResourceLifecycle(Async)");
        }

        // verify the required parameter 'resourceLifecycleConfig' is set
        if (resourceLifecycleConfig == null) {
            throw new ApiException("Missing the required parameter 'resourceLifecycleConfig' when calling gETUpdateApplicationResourceLifecycle(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateApplicationResourceLifecycle(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateApplicationResourceLifecycle(Async)");
        }

        return gETUpdateApplicationResourceLifecycleCall(applicationName, resourceLifecycleConfig, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies lifecycle settings for an application.
     * @param applicationName The name of the application. (required)
     * @param resourceLifecycleConfig The lifecycle configuration. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApplicationResourceLifecycleDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResourceLifecycleDescriptionMessage gETUpdateApplicationResourceLifecycle(String applicationName, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ApplicationResourceLifecycleDescriptionMessage> localVarResp = gETUpdateApplicationResourceLifecycleWithHttpInfo(applicationName, resourceLifecycleConfig, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies lifecycle settings for an application.
     * @param applicationName The name of the application. (required)
     * @param resourceLifecycleConfig The lifecycle configuration. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ApplicationResourceLifecycleDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResourceLifecycleDescriptionMessage> gETUpdateApplicationResourceLifecycleWithHttpInfo(String applicationName, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateApplicationResourceLifecycleValidateBeforeCall(applicationName, resourceLifecycleConfig, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ApplicationResourceLifecycleDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies lifecycle settings for an application.
     * @param applicationName The name of the application. (required)
     * @param resourceLifecycleConfig The lifecycle configuration. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateApplicationResourceLifecycleAsync(String applicationName, GETCreateApplicationResourceLifecycleConfigParameter resourceLifecycleConfig, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ApplicationResourceLifecycleDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateApplicationResourceLifecycleValidateBeforeCall(applicationName, resourceLifecycleConfig, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResourceLifecycleDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateApplicationVersion
     * @param applicationName &lt;p&gt;The name of the application associated with this version.&lt;/p&gt; &lt;p&gt; If no application is found with this name, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; (required)
     * @param versionLabel &lt;p&gt;The name of the version to update.&lt;/p&gt; &lt;p&gt;If no application version is found with this label, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A new description for this version. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateApplicationVersionCall(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateApplicationVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (versionLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionLabel", versionLabel));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateApplicationVersionValidateBeforeCall(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETUpdateApplicationVersion(Async)");
        }

        // verify the required parameter 'versionLabel' is set
        if (versionLabel == null) {
            throw new ApiException("Missing the required parameter 'versionLabel' when calling gETUpdateApplicationVersion(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateApplicationVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateApplicationVersion(Async)");
        }

        return gETUpdateApplicationVersionCall(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the specified application version to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName &lt;p&gt;The name of the application associated with this version.&lt;/p&gt; &lt;p&gt; If no application is found with this name, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; (required)
     * @param versionLabel &lt;p&gt;The name of the version to update.&lt;/p&gt; &lt;p&gt;If no application version is found with this label, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A new description for this version. (optional)
     * @return ApplicationVersionDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationVersionDescriptionMessage gETUpdateApplicationVersion(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description) throws ApiException {
        ApiResponse<ApplicationVersionDescriptionMessage> localVarResp = gETUpdateApplicationVersionWithHttpInfo(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the specified application version to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName &lt;p&gt;The name of the application associated with this version.&lt;/p&gt; &lt;p&gt; If no application is found with this name, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; (required)
     * @param versionLabel &lt;p&gt;The name of the version to update.&lt;/p&gt; &lt;p&gt;If no application version is found with this label, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A new description for this version. (optional)
     * @return ApiResponse&lt;ApplicationVersionDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationVersionDescriptionMessage> gETUpdateApplicationVersionWithHttpInfo(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateApplicationVersionValidateBeforeCall(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, null);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the specified application version to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param applicationName &lt;p&gt;The name of the application associated with this version.&lt;/p&gt; &lt;p&gt; If no application is found with this name, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; (required)
     * @param versionLabel &lt;p&gt;The name of the version to update.&lt;/p&gt; &lt;p&gt;If no application version is found with this label, &lt;code&gt;UpdateApplication&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A new description for this version. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateApplicationVersionAsync(String applicationName, String versionLabel, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, final ApiCallback<ApplicationVersionDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateApplicationVersionValidateBeforeCall(applicationName, versionLabel, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, _callback);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateConfigurationTemplate
     * @param applicationName &lt;p&gt;The name of the application associated with the configuration template to update.&lt;/p&gt; &lt;p&gt; If no application is found with this name, &lt;code&gt;UpdateConfigurationTemplate&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param templateName &lt;p&gt;The name of the configuration template to update.&lt;/p&gt; &lt;p&gt; If no configuration template is found with this name, &lt;code&gt;UpdateConfigurationTemplate&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A new description for the configuration. (optional)
     * @param optionSettings A list of configuration option settings to update with the new specified option value. (optional)
     * @param optionsToRemove &lt;p&gt;A list of configuration options to remove from the configuration set.&lt;/p&gt; &lt;p&gt; Constraint: You can remove only &lt;code&gt;UserDefined&lt;/code&gt; configuration options. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateConfigurationTemplateCall(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateConfigurationTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateName", templateName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (optionSettings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OptionSettings", optionSettings));
        }

        if (optionsToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OptionsToRemove", optionsToRemove));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateConfigurationTemplateValidateBeforeCall(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETUpdateConfigurationTemplate(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling gETUpdateConfigurationTemplate(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateConfigurationTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateConfigurationTemplate(Async)");
        }

        return gETUpdateConfigurationTemplateCall(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, optionSettings, optionsToRemove, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the specified configuration template to have the specified properties or configuration option values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;ApplicationName&lt;/code&gt;) is not provided, its value remains unchanged. To clear such properties, specify an empty string.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param applicationName &lt;p&gt;The name of the application associated with the configuration template to update.&lt;/p&gt; &lt;p&gt; If no application is found with this name, &lt;code&gt;UpdateConfigurationTemplate&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param templateName &lt;p&gt;The name of the configuration template to update.&lt;/p&gt; &lt;p&gt; If no configuration template is found with this name, &lt;code&gt;UpdateConfigurationTemplate&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A new description for the configuration. (optional)
     * @param optionSettings A list of configuration option settings to update with the new specified option value. (optional)
     * @param optionsToRemove &lt;p&gt;A list of configuration options to remove from the configuration set.&lt;/p&gt; &lt;p&gt; Constraint: You can remove only &lt;code&gt;UserDefined&lt;/code&gt; configuration options. &lt;/p&gt; (optional)
     * @return ConfigurationSettingsDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSettingsDescription gETUpdateConfigurationTemplate(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove) throws ApiException {
        ApiResponse<ConfigurationSettingsDescription> localVarResp = gETUpdateConfigurationTemplateWithHttpInfo(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, optionSettings, optionsToRemove);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the specified configuration template to have the specified properties or configuration option values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;ApplicationName&lt;/code&gt;) is not provided, its value remains unchanged. To clear such properties, specify an empty string.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param applicationName &lt;p&gt;The name of the application associated with the configuration template to update.&lt;/p&gt; &lt;p&gt; If no application is found with this name, &lt;code&gt;UpdateConfigurationTemplate&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param templateName &lt;p&gt;The name of the configuration template to update.&lt;/p&gt; &lt;p&gt; If no configuration template is found with this name, &lt;code&gt;UpdateConfigurationTemplate&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A new description for the configuration. (optional)
     * @param optionSettings A list of configuration option settings to update with the new specified option value. (optional)
     * @param optionsToRemove &lt;p&gt;A list of configuration options to remove from the configuration set.&lt;/p&gt; &lt;p&gt; Constraint: You can remove only &lt;code&gt;UserDefined&lt;/code&gt; configuration options. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;ConfigurationSettingsDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSettingsDescription> gETUpdateConfigurationTemplateWithHttpInfo(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateConfigurationTemplateValidateBeforeCall(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, optionSettings, optionsToRemove, null);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the specified configuration template to have the specified properties or configuration option values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;ApplicationName&lt;/code&gt;) is not provided, its value remains unchanged. To clear such properties, specify an empty string.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param applicationName &lt;p&gt;The name of the application associated with the configuration template to update.&lt;/p&gt; &lt;p&gt; If no application is found with this name, &lt;code&gt;UpdateConfigurationTemplate&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param templateName &lt;p&gt;The name of the configuration template to update.&lt;/p&gt; &lt;p&gt; If no configuration template is found with this name, &lt;code&gt;UpdateConfigurationTemplate&lt;/code&gt; returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A new description for the configuration. (optional)
     * @param optionSettings A list of configuration option settings to update with the new specified option value. (optional)
     * @param optionsToRemove &lt;p&gt;A list of configuration options to remove from the configuration set.&lt;/p&gt; &lt;p&gt; Constraint: You can remove only &lt;code&gt;UserDefined&lt;/code&gt; configuration options. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateConfigurationTemplateAsync(String applicationName, String templateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, final ApiCallback<ConfigurationSettingsDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateConfigurationTemplateValidateBeforeCall(applicationName, templateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, optionSettings, optionsToRemove, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateEnvironment
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application with which the environment is associated. (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to update.&lt;/p&gt; &lt;p&gt;If no environment with this ID exists, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param groupName The name of the group to which the target environment belongs. Specify a group name only if the environment&#39;s name is specified in an environment manifest and not with the environment name or environment ID parameters. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param description If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment. (optional)
     * @param tier &lt;p&gt;This specifies the tier to use to update the environment.&lt;/p&gt; &lt;p&gt;Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param versionLabel If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (optional)
     * @param templateName If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (optional)
     * @param solutionStackName This specifies the platform version that the environment will run after the environment is updated. (optional)
     * @param platformArn The ARN of the platform, if used. (optional)
     * @param optionSettings If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value. (optional)
     * @param optionsToRemove A list of custom user-defined configuration options to remove from the configuration set for this environment. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateEnvironmentCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String environmentId, String environmentName, String groupName, String description, GETCreateEnvironmentTierParameter tier, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (environmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentId", environmentId));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupName", groupName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (tier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tier", tier));
        }

        if (versionLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionLabel", versionLabel));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateName", templateName));
        }

        if (solutionStackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SolutionStackName", solutionStackName));
        }

        if (platformArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlatformArn", platformArn));
        }

        if (optionSettings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OptionSettings", optionSettings));
        }

        if (optionsToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OptionsToRemove", optionsToRemove));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateEnvironmentValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String environmentId, String environmentName, String groupName, String description, GETCreateEnvironmentTierParameter tier, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateEnvironment(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateEnvironment(Async)");
        }

        return gETUpdateEnvironmentCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, environmentId, environmentName, groupName, description, tier, versionLabel, templateName, solutionStackName, platformArn, optionSettings, optionsToRemove, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the environment description, deploys a new application version, updates the configuration settings to an entirely new configuration template, or updates select configuration option values in the running environment.&lt;/p&gt; &lt;p&gt; Attempting to update both the release and configuration is not allowed and AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; When updating the configuration settings to a new template or individual settings, a draft configuration is created and &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; for this environment returns two setting descriptions with different &lt;code&gt;DeploymentStatus&lt;/code&gt; values. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application with which the environment is associated. (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to update.&lt;/p&gt; &lt;p&gt;If no environment with this ID exists, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param groupName The name of the group to which the target environment belongs. Specify a group name only if the environment&#39;s name is specified in an environment manifest and not with the environment name or environment ID parameters. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param description If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment. (optional)
     * @param tier &lt;p&gt;This specifies the tier to use to update the environment.&lt;/p&gt; &lt;p&gt;Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param versionLabel If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (optional)
     * @param templateName If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (optional)
     * @param solutionStackName This specifies the platform version that the environment will run after the environment is updated. (optional)
     * @param platformArn The ARN of the platform, if used. (optional)
     * @param optionSettings If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value. (optional)
     * @param optionsToRemove A list of custom user-defined configuration options to remove from the configuration set for this environment. (optional)
     * @return EnvironmentDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescription gETUpdateEnvironment(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String environmentId, String environmentName, String groupName, String description, GETCreateEnvironmentTierParameter tier, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove) throws ApiException {
        ApiResponse<EnvironmentDescription> localVarResp = gETUpdateEnvironmentWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, environmentId, environmentName, groupName, description, tier, versionLabel, templateName, solutionStackName, platformArn, optionSettings, optionsToRemove);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the environment description, deploys a new application version, updates the configuration settings to an entirely new configuration template, or updates select configuration option values in the running environment.&lt;/p&gt; &lt;p&gt; Attempting to update both the release and configuration is not allowed and AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; When updating the configuration settings to a new template or individual settings, a draft configuration is created and &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; for this environment returns two setting descriptions with different &lt;code&gt;DeploymentStatus&lt;/code&gt; values. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application with which the environment is associated. (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to update.&lt;/p&gt; &lt;p&gt;If no environment with this ID exists, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param groupName The name of the group to which the target environment belongs. Specify a group name only if the environment&#39;s name is specified in an environment manifest and not with the environment name or environment ID parameters. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param description If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment. (optional)
     * @param tier &lt;p&gt;This specifies the tier to use to update the environment.&lt;/p&gt; &lt;p&gt;Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param versionLabel If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (optional)
     * @param templateName If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (optional)
     * @param solutionStackName This specifies the platform version that the environment will run after the environment is updated. (optional)
     * @param platformArn The ARN of the platform, if used. (optional)
     * @param optionSettings If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value. (optional)
     * @param optionsToRemove A list of custom user-defined configuration options to remove from the configuration set for this environment. (optional)
     * @return ApiResponse&lt;EnvironmentDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescription> gETUpdateEnvironmentWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String environmentId, String environmentName, String groupName, String description, GETCreateEnvironmentTierParameter tier, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, environmentId, environmentName, groupName, description, tier, versionLabel, templateName, solutionStackName, platformArn, optionSettings, optionsToRemove, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the environment description, deploys a new application version, updates the configuration settings to an entirely new configuration template, or updates select configuration option values in the running environment.&lt;/p&gt; &lt;p&gt; Attempting to update both the release and configuration is not allowed and AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; When updating the configuration settings to a new template or individual settings, a draft configuration is created and &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; for this environment returns two setting descriptions with different &lt;code&gt;DeploymentStatus&lt;/code&gt; values. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applicationName The name of the application with which the environment is associated. (optional)
     * @param environmentId &lt;p&gt;The ID of the environment to update.&lt;/p&gt; &lt;p&gt;If no environment with this ID exists, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.&lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt;Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns &lt;code&gt;MissingRequiredParameter&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param groupName The name of the group to which the target environment belongs. Specify a group name only if the environment&#39;s name is specified in an environment manifest and not with the environment name or environment ID parameters. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html\&quot;&gt;Environment Manifest (env.yaml)&lt;/a&gt; for details. (optional)
     * @param description If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment. (optional)
     * @param tier &lt;p&gt;This specifies the tier to use to update the environment.&lt;/p&gt; &lt;p&gt;Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns &lt;code&gt;InvalidParameterValue&lt;/code&gt; error. &lt;/p&gt; (optional)
     * @param versionLabel If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (optional)
     * @param templateName If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterValue&lt;/code&gt; error.  (optional)
     * @param solutionStackName This specifies the platform version that the environment will run after the environment is updated. (optional)
     * @param platformArn The ARN of the platform, if used. (optional)
     * @param optionSettings If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value. (optional)
     * @param optionsToRemove A list of custom user-defined configuration options to remove from the configuration set for this environment. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateEnvironmentAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String applicationName, String environmentId, String environmentName, String groupName, String description, GETCreateEnvironmentTierParameter tier, String versionLabel, String templateName, String solutionStackName, String platformArn, List<ConfigurationOptionSetting> optionSettings, List<OptionSpecification> optionsToRemove, final ApiCallback<EnvironmentDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applicationName, environmentId, environmentName, groupName, description, tier, versionLabel, templateName, solutionStackName, platformArn, optionSettings, optionsToRemove, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateTagsForResource
     * @param resourceArn &lt;p&gt;The Amazon Resource Name (ARN) of the resouce to be updated.&lt;/p&gt; &lt;p&gt;Must be the ARN of an Elastic Beanstalk resource.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagsToAdd &lt;p&gt;A list of tags to add or update. If a key of an existing tag is added, the tag&#39;s value is updated.&lt;/p&gt; &lt;p&gt;Specify at least one of these parameters: &lt;code&gt;TagsToAdd&lt;/code&gt;, &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param tagsToRemove &lt;p&gt;A list of tag keys to remove. If a tag key doesn&#39;t exist, it is silently ignored.&lt;/p&gt; &lt;p&gt;Specify at least one of these parameters: &lt;code&gt;TagsToAdd&lt;/code&gt;, &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateTagsForResourceCall(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tagsToAdd, List<String> tagsToRemove, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceArn", resourceArn));
        }

        if (tagsToAdd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TagsToAdd", tagsToAdd));
        }

        if (tagsToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TagsToRemove", tagsToRemove));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateTagsForResourceValidateBeforeCall(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tagsToAdd, List<String> tagsToRemove, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling gETUpdateTagsForResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateTagsForResource(Async)");
        }

        return gETUpdateTagsForResourceCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagsToAdd, tagsToRemove, _callback);

    }

    /**
     * 
     * &lt;p&gt;Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: &lt;code&gt;TagsToAdd&lt;/code&gt; for tags to add or update, and &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a custom IAM user policy to control permission to this operation, specify one of the following two virtual actions (or both) instead of the API operation name:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;elasticbeanstalk:AddTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tags to add in the &lt;code&gt;TagsToAdd&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;elasticbeanstalk:RemoveTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tag keys to remove in the &lt;code&gt;TagsToRemove&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;For details about creating a custom user policy, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies\&quot;&gt;Creating a Custom User Policy&lt;/a&gt;.&lt;/p&gt;
     * @param resourceArn &lt;p&gt;The Amazon Resource Name (ARN) of the resouce to be updated.&lt;/p&gt; &lt;p&gt;Must be the ARN of an Elastic Beanstalk resource.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagsToAdd &lt;p&gt;A list of tags to add or update. If a key of an existing tag is added, the tag&#39;s value is updated.&lt;/p&gt; &lt;p&gt;Specify at least one of these parameters: &lt;code&gt;TagsToAdd&lt;/code&gt;, &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param tagsToRemove &lt;p&gt;A list of tag keys to remove. If a tag key doesn&#39;t exist, it is silently ignored.&lt;/p&gt; &lt;p&gt;Specify at least one of these parameters: &lt;code&gt;TagsToAdd&lt;/code&gt;, &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public void gETUpdateTagsForResource(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tagsToAdd, List<String> tagsToRemove) throws ApiException {
        gETUpdateTagsForResourceWithHttpInfo(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagsToAdd, tagsToRemove);
    }

    /**
     * 
     * &lt;p&gt;Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: &lt;code&gt;TagsToAdd&lt;/code&gt; for tags to add or update, and &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a custom IAM user policy to control permission to this operation, specify one of the following two virtual actions (or both) instead of the API operation name:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;elasticbeanstalk:AddTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tags to add in the &lt;code&gt;TagsToAdd&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;elasticbeanstalk:RemoveTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tag keys to remove in the &lt;code&gt;TagsToRemove&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;For details about creating a custom user policy, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies\&quot;&gt;Creating a Custom User Policy&lt;/a&gt;.&lt;/p&gt;
     * @param resourceArn &lt;p&gt;The Amazon Resource Name (ARN) of the resouce to be updated.&lt;/p&gt; &lt;p&gt;Must be the ARN of an Elastic Beanstalk resource.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagsToAdd &lt;p&gt;A list of tags to add or update. If a key of an existing tag is added, the tag&#39;s value is updated.&lt;/p&gt; &lt;p&gt;Specify at least one of these parameters: &lt;code&gt;TagsToAdd&lt;/code&gt;, &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param tagsToRemove &lt;p&gt;A list of tag keys to remove. If a tag key doesn&#39;t exist, it is silently ignored.&lt;/p&gt; &lt;p&gt;Specify at least one of these parameters: &lt;code&gt;TagsToAdd&lt;/code&gt;, &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETUpdateTagsForResourceWithHttpInfo(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tagsToAdd, List<String> tagsToRemove) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateTagsForResourceValidateBeforeCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagsToAdd, tagsToRemove, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: &lt;code&gt;TagsToAdd&lt;/code&gt; for tags to add or update, and &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a custom IAM user policy to control permission to this operation, specify one of the following two virtual actions (or both) instead of the API operation name:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;elasticbeanstalk:AddTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tags to add in the &lt;code&gt;TagsToAdd&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;elasticbeanstalk:RemoveTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tag keys to remove in the &lt;code&gt;TagsToRemove&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;For details about creating a custom user policy, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies\&quot;&gt;Creating a Custom User Policy&lt;/a&gt;.&lt;/p&gt;
     * @param resourceArn &lt;p&gt;The Amazon Resource Name (ARN) of the resouce to be updated.&lt;/p&gt; &lt;p&gt;Must be the ARN of an Elastic Beanstalk resource.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagsToAdd &lt;p&gt;A list of tags to add or update. If a key of an existing tag is added, the tag&#39;s value is updated.&lt;/p&gt; &lt;p&gt;Specify at least one of these parameters: &lt;code&gt;TagsToAdd&lt;/code&gt;, &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param tagsToRemove &lt;p&gt;A list of tag keys to remove. If a tag key doesn&#39;t exist, it is silently ignored.&lt;/p&gt; &lt;p&gt;Specify at least one of these parameters: &lt;code&gt;TagsToAdd&lt;/code&gt;, &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateTagsForResourceAsync(String resourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Tag> tagsToAdd, List<String> tagsToRemove, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateTagsForResourceValidateBeforeCall(resourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagsToAdd, tagsToRemove, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETValidateConfigurationSettings
     * @param applicationName The name of the application that the configuration template or environment belongs to. (required)
     * @param optionSettings A list of the options and desired values to evaluate. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateName &lt;p&gt;The name of the configuration template to validate the settings against.&lt;/p&gt; &lt;p&gt;Condition: You cannot specify both this and an environment name.&lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to validate the settings against.&lt;/p&gt; &lt;p&gt;Condition: You cannot specify both this and a configuration template name.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETValidateConfigurationSettingsCall(String applicationName, List<ConfigurationOptionSetting> optionSettings, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ValidateConfigurationSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationName", applicationName));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateName", templateName));
        }

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnvironmentName", environmentName));
        }

        if (optionSettings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OptionSettings", optionSettings));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETValidateConfigurationSettingsValidateBeforeCall(String applicationName, List<ConfigurationOptionSetting> optionSettings, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling gETValidateConfigurationSettings(Async)");
        }

        // verify the required parameter 'optionSettings' is set
        if (optionSettings == null) {
            throw new ApiException("Missing the required parameter 'optionSettings' when calling gETValidateConfigurationSettings(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETValidateConfigurationSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETValidateConfigurationSettings(Async)");
        }

        return gETValidateConfigurationSettingsCall(applicationName, optionSettings, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateName, environmentName, _callback);

    }

    /**
     * 
     * &lt;p&gt;Takes a set of configuration settings and either a configuration template or environment, and determines whether those values are valid.&lt;/p&gt; &lt;p&gt;This action returns a list of messages indicating any errors or warnings associated with the selection of option values.&lt;/p&gt;
     * @param applicationName The name of the application that the configuration template or environment belongs to. (required)
     * @param optionSettings A list of the options and desired values to evaluate. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateName &lt;p&gt;The name of the configuration template to validate the settings against.&lt;/p&gt; &lt;p&gt;Condition: You cannot specify both this and an environment name.&lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to validate the settings against.&lt;/p&gt; &lt;p&gt;Condition: You cannot specify both this and a configuration template name.&lt;/p&gt; (optional)
     * @return ConfigurationSettingsValidationMessages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSettingsValidationMessages gETValidateConfigurationSettings(String applicationName, List<ConfigurationOptionSetting> optionSettings, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName) throws ApiException {
        ApiResponse<ConfigurationSettingsValidationMessages> localVarResp = gETValidateConfigurationSettingsWithHttpInfo(applicationName, optionSettings, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateName, environmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Takes a set of configuration settings and either a configuration template or environment, and determines whether those values are valid.&lt;/p&gt; &lt;p&gt;This action returns a list of messages indicating any errors or warnings associated with the selection of option values.&lt;/p&gt;
     * @param applicationName The name of the application that the configuration template or environment belongs to. (required)
     * @param optionSettings A list of the options and desired values to evaluate. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateName &lt;p&gt;The name of the configuration template to validate the settings against.&lt;/p&gt; &lt;p&gt;Condition: You cannot specify both this and an environment name.&lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to validate the settings against.&lt;/p&gt; &lt;p&gt;Condition: You cannot specify both this and a configuration template name.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ConfigurationSettingsValidationMessages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSettingsValidationMessages> gETValidateConfigurationSettingsWithHttpInfo(String applicationName, List<ConfigurationOptionSetting> optionSettings, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName) throws ApiException {
        okhttp3.Call localVarCall = gETValidateConfigurationSettingsValidateBeforeCall(applicationName, optionSettings, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateName, environmentName, null);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsValidationMessages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Takes a set of configuration settings and either a configuration template or environment, and determines whether those values are valid.&lt;/p&gt; &lt;p&gt;This action returns a list of messages indicating any errors or warnings associated with the selection of option values.&lt;/p&gt;
     * @param applicationName The name of the application that the configuration template or environment belongs to. (required)
     * @param optionSettings A list of the options and desired values to evaluate. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateName &lt;p&gt;The name of the configuration template to validate the settings against.&lt;/p&gt; &lt;p&gt;Condition: You cannot specify both this and an environment name.&lt;/p&gt; (optional)
     * @param environmentName &lt;p&gt;The name of the environment to validate the settings against.&lt;/p&gt; &lt;p&gt;Condition: You cannot specify both this and a configuration template name.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETValidateConfigurationSettingsAsync(String applicationName, List<ConfigurationOptionSetting> optionSettings, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateName, String environmentName, final ApiCallback<ConfigurationSettingsValidationMessages> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETValidateConfigurationSettingsValidateBeforeCall(applicationName, optionSettings, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateName, environmentName, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsValidationMessages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAbortEnvironmentUpdate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param abortEnvironmentUpdateMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAbortEnvironmentUpdateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AbortEnvironmentUpdateMessage abortEnvironmentUpdateMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abortEnvironmentUpdateMessage;

        // create path and map variables
        String localVarPath = "/#Action=AbortEnvironmentUpdate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAbortEnvironmentUpdateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AbortEnvironmentUpdateMessage abortEnvironmentUpdateMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAbortEnvironmentUpdate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAbortEnvironmentUpdate(Async)");
        }

        return pOSTAbortEnvironmentUpdateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, abortEnvironmentUpdateMessage, _callback);

    }

    /**
     * 
     * Cancels in-progress environment configuration update or application version deployment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param abortEnvironmentUpdateMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTAbortEnvironmentUpdate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AbortEnvironmentUpdateMessage abortEnvironmentUpdateMessage) throws ApiException {
        pOSTAbortEnvironmentUpdateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, abortEnvironmentUpdateMessage);
    }

    /**
     * 
     * Cancels in-progress environment configuration update or application version deployment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param abortEnvironmentUpdateMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTAbortEnvironmentUpdateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AbortEnvironmentUpdateMessage abortEnvironmentUpdateMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTAbortEnvironmentUpdateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, abortEnvironmentUpdateMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancels in-progress environment configuration update or application version deployment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param abortEnvironmentUpdateMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAbortEnvironmentUpdateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AbortEnvironmentUpdateMessage abortEnvironmentUpdateMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAbortEnvironmentUpdateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, abortEnvironmentUpdateMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTApplyEnvironmentManagedAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyEnvironmentManagedActionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ManagedActionInvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTApplyEnvironmentManagedActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyEnvironmentManagedActionRequest applyEnvironmentManagedActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applyEnvironmentManagedActionRequest;

        // create path and map variables
        String localVarPath = "/#Action=ApplyEnvironmentManagedAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTApplyEnvironmentManagedActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyEnvironmentManagedActionRequest applyEnvironmentManagedActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTApplyEnvironmentManagedAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTApplyEnvironmentManagedAction(Async)");
        }

        return pOSTApplyEnvironmentManagedActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyEnvironmentManagedActionRequest, _callback);

    }

    /**
     * 
     * Applies a scheduled managed action immediately. A managed action can be applied only if its status is &lt;code&gt;Scheduled&lt;/code&gt;. Get the status and action ID of a managed action with &lt;a&gt;DescribeEnvironmentManagedActions&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyEnvironmentManagedActionRequest  (optional)
     * @return ApplyEnvironmentManagedActionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ManagedActionInvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ApplyEnvironmentManagedActionResult pOSTApplyEnvironmentManagedAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyEnvironmentManagedActionRequest applyEnvironmentManagedActionRequest) throws ApiException {
        ApiResponse<ApplyEnvironmentManagedActionResult> localVarResp = pOSTApplyEnvironmentManagedActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyEnvironmentManagedActionRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Applies a scheduled managed action immediately. A managed action can be applied only if its status is &lt;code&gt;Scheduled&lt;/code&gt;. Get the status and action ID of a managed action with &lt;a&gt;DescribeEnvironmentManagedActions&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyEnvironmentManagedActionRequest  (optional)
     * @return ApiResponse&lt;ApplyEnvironmentManagedActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ManagedActionInvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplyEnvironmentManagedActionResult> pOSTApplyEnvironmentManagedActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyEnvironmentManagedActionRequest applyEnvironmentManagedActionRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTApplyEnvironmentManagedActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyEnvironmentManagedActionRequest, null);
        Type localVarReturnType = new TypeToken<ApplyEnvironmentManagedActionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Applies a scheduled managed action immediately. A managed action can be applied only if its status is &lt;code&gt;Scheduled&lt;/code&gt;. Get the status and action ID of a managed action with &lt;a&gt;DescribeEnvironmentManagedActions&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyEnvironmentManagedActionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ManagedActionInvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTApplyEnvironmentManagedActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyEnvironmentManagedActionRequest applyEnvironmentManagedActionRequest, final ApiCallback<ApplyEnvironmentManagedActionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTApplyEnvironmentManagedActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyEnvironmentManagedActionRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplyEnvironmentManagedActionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAssociateEnvironmentOperationsRole
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param associateEnvironmentOperationsRoleMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAssociateEnvironmentOperationsRoleCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AssociateEnvironmentOperationsRoleMessage associateEnvironmentOperationsRoleMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateEnvironmentOperationsRoleMessage;

        // create path and map variables
        String localVarPath = "/#Action=AssociateEnvironmentOperationsRole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAssociateEnvironmentOperationsRoleValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AssociateEnvironmentOperationsRoleMessage associateEnvironmentOperationsRoleMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAssociateEnvironmentOperationsRole(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAssociateEnvironmentOperationsRole(Async)");
        }

        return pOSTAssociateEnvironmentOperationsRoleCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, associateEnvironmentOperationsRoleMessage, _callback);

    }

    /**
     * 
     * Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk uses the associated operations role for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param associateEnvironmentOperationsRoleMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTAssociateEnvironmentOperationsRole(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AssociateEnvironmentOperationsRoleMessage associateEnvironmentOperationsRoleMessage) throws ApiException {
        pOSTAssociateEnvironmentOperationsRoleWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, associateEnvironmentOperationsRoleMessage);
    }

    /**
     * 
     * Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk uses the associated operations role for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param associateEnvironmentOperationsRoleMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTAssociateEnvironmentOperationsRoleWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AssociateEnvironmentOperationsRoleMessage associateEnvironmentOperationsRoleMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTAssociateEnvironmentOperationsRoleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, associateEnvironmentOperationsRoleMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk uses the associated operations role for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param associateEnvironmentOperationsRoleMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAssociateEnvironmentOperationsRoleAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AssociateEnvironmentOperationsRoleMessage associateEnvironmentOperationsRoleMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAssociateEnvironmentOperationsRoleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, associateEnvironmentOperationsRoleMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCheckDNSAvailability
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkDNSAvailabilityMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCheckDNSAvailabilityCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckDNSAvailabilityMessage checkDNSAvailabilityMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkDNSAvailabilityMessage;

        // create path and map variables
        String localVarPath = "/#Action=CheckDNSAvailability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCheckDNSAvailabilityValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckDNSAvailabilityMessage checkDNSAvailabilityMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCheckDNSAvailability(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCheckDNSAvailability(Async)");
        }

        return pOSTCheckDNSAvailabilityCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkDNSAvailabilityMessage, _callback);

    }

    /**
     * 
     * Checks if the specified CNAME is available.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkDNSAvailabilityMessage  (optional)
     * @return CheckDNSAvailabilityResultMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CheckDNSAvailabilityResultMessage pOSTCheckDNSAvailability(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckDNSAvailabilityMessage checkDNSAvailabilityMessage) throws ApiException {
        ApiResponse<CheckDNSAvailabilityResultMessage> localVarResp = pOSTCheckDNSAvailabilityWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkDNSAvailabilityMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks if the specified CNAME is available.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkDNSAvailabilityMessage  (optional)
     * @return ApiResponse&lt;CheckDNSAvailabilityResultMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDNSAvailabilityResultMessage> pOSTCheckDNSAvailabilityWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckDNSAvailabilityMessage checkDNSAvailabilityMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCheckDNSAvailabilityValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkDNSAvailabilityMessage, null);
        Type localVarReturnType = new TypeToken<CheckDNSAvailabilityResultMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks if the specified CNAME is available.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkDNSAvailabilityMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCheckDNSAvailabilityAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CheckDNSAvailabilityMessage checkDNSAvailabilityMessage, final ApiCallback<CheckDNSAvailabilityResultMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCheckDNSAvailabilityValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkDNSAvailabilityMessage, _callback);
        Type localVarReturnType = new TypeToken<CheckDNSAvailabilityResultMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTComposeEnvironments
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param composeEnvironmentsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTComposeEnvironmentsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ComposeEnvironmentsMessage composeEnvironmentsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = composeEnvironmentsMessage;

        // create path and map variables
        String localVarPath = "/#Action=ComposeEnvironments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTComposeEnvironmentsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ComposeEnvironmentsMessage composeEnvironmentsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTComposeEnvironments(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTComposeEnvironments(Async)");
        }

        return pOSTComposeEnvironmentsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, composeEnvironmentsMessage, _callback);

    }

    /**
     * 
     * Create or update a group of environments that each run a separate component of a single application. Takes a list of version labels that specify application source bundles for each of the environments to create or update. The name of each environment and other required information must be included in the source bundles in an environment manifest named &lt;code&gt;env.yaml&lt;/code&gt;. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html\&quot;&gt;Compose Environments&lt;/a&gt; for details.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param composeEnvironmentsMessage  (optional)
     * @return EnvironmentDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescriptionsMessage pOSTComposeEnvironments(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ComposeEnvironmentsMessage composeEnvironmentsMessage) throws ApiException {
        ApiResponse<EnvironmentDescriptionsMessage> localVarResp = pOSTComposeEnvironmentsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, composeEnvironmentsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a group of environments that each run a separate component of a single application. Takes a list of version labels that specify application source bundles for each of the environments to create or update. The name of each environment and other required information must be included in the source bundles in an environment manifest named &lt;code&gt;env.yaml&lt;/code&gt;. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html\&quot;&gt;Compose Environments&lt;/a&gt; for details.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param composeEnvironmentsMessage  (optional)
     * @return ApiResponse&lt;EnvironmentDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescriptionsMessage> pOSTComposeEnvironmentsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ComposeEnvironmentsMessage composeEnvironmentsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTComposeEnvironmentsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, composeEnvironmentsMessage, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a group of environments that each run a separate component of a single application. Takes a list of version labels that specify application source bundles for each of the environments to create or update. The name of each environment and other required information must be included in the source bundles in an environment manifest named &lt;code&gt;env.yaml&lt;/code&gt;. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html\&quot;&gt;Compose Environments&lt;/a&gt; for details.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param composeEnvironmentsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTComposeEnvironmentsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ComposeEnvironmentsMessage composeEnvironmentsMessage, final ApiCallback<EnvironmentDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTComposeEnvironmentsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, composeEnvironmentsMessage, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateApplication
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createApplicationMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateApplicationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationMessage createApplicationMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApplicationMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateApplicationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationMessage createApplicationMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateApplication(Async)");
        }

        return pOSTCreateApplicationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createApplicationMessage, _callback);

    }

    /**
     * 
     * Creates an application that has one configuration template named &lt;code&gt;default&lt;/code&gt; and no application versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createApplicationMessage  (optional)
     * @return ApplicationDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationDescriptionMessage pOSTCreateApplication(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationMessage createApplicationMessage) throws ApiException {
        ApiResponse<ApplicationDescriptionMessage> localVarResp = pOSTCreateApplicationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createApplicationMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an application that has one configuration template named &lt;code&gt;default&lt;/code&gt; and no application versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createApplicationMessage  (optional)
     * @return ApiResponse&lt;ApplicationDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationDescriptionMessage> pOSTCreateApplicationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationMessage createApplicationMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createApplicationMessage, null);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an application that has one configuration template named &lt;code&gt;default&lt;/code&gt; and no application versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createApplicationMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateApplicationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationMessage createApplicationMessage, final ApiCallback<ApplicationDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createApplicationMessage, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateApplicationVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createApplicationVersionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyApplicationVersionsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CodeBuildNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateApplicationVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationVersionMessage createApplicationVersionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApplicationVersionMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateApplicationVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateApplicationVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationVersionMessage createApplicationVersionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateApplicationVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateApplicationVersion(Async)");
        }

        return pOSTCreateApplicationVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createApplicationVersionMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an application version for the specified application. You can create an application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the output of an AWS CodeBuild build as follows:&lt;/p&gt; &lt;p&gt;Specify a commit in an AWS CodeCommit repository with &lt;code&gt;SourceBuildInformation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a build in an AWS CodeBuild with &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;BuildConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a source bundle in S3 with &lt;code&gt;SourceBundle&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Omit both &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;SourceBundle&lt;/code&gt; to use the default sample application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create an application version with a specified Amazon S3 bucket and key location, you can&#39;t change that Amazon S3 location. If you change the Amazon S3 location, you receive an exception when you attempt to launch an environment from the application version.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createApplicationVersionMessage  (optional)
     * @return ApplicationVersionDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyApplicationVersionsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CodeBuildNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationVersionDescriptionMessage pOSTCreateApplicationVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationVersionMessage createApplicationVersionMessage) throws ApiException {
        ApiResponse<ApplicationVersionDescriptionMessage> localVarResp = pOSTCreateApplicationVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createApplicationVersionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an application version for the specified application. You can create an application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the output of an AWS CodeBuild build as follows:&lt;/p&gt; &lt;p&gt;Specify a commit in an AWS CodeCommit repository with &lt;code&gt;SourceBuildInformation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a build in an AWS CodeBuild with &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;BuildConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a source bundle in S3 with &lt;code&gt;SourceBundle&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Omit both &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;SourceBundle&lt;/code&gt; to use the default sample application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create an application version with a specified Amazon S3 bucket and key location, you can&#39;t change that Amazon S3 location. If you change the Amazon S3 location, you receive an exception when you attempt to launch an environment from the application version.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createApplicationVersionMessage  (optional)
     * @return ApiResponse&lt;ApplicationVersionDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyApplicationVersionsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CodeBuildNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationVersionDescriptionMessage> pOSTCreateApplicationVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationVersionMessage createApplicationVersionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateApplicationVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createApplicationVersionMessage, null);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an application version for the specified application. You can create an application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the output of an AWS CodeBuild build as follows:&lt;/p&gt; &lt;p&gt;Specify a commit in an AWS CodeCommit repository with &lt;code&gt;SourceBuildInformation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a build in an AWS CodeBuild with &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;BuildConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Specify a source bundle in S3 with &lt;code&gt;SourceBundle&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Omit both &lt;code&gt;SourceBuildInformation&lt;/code&gt; and &lt;code&gt;SourceBundle&lt;/code&gt; to use the default sample application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create an application version with a specified Amazon S3 bucket and key location, you can&#39;t change that Amazon S3 location. If you change the Amazon S3 location, you receive an exception when you attempt to launch an environment from the application version.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createApplicationVersionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyApplicationsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyApplicationVersionsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CodeBuildNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateApplicationVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateApplicationVersionMessage createApplicationVersionMessage, final ApiCallback<ApplicationVersionDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateApplicationVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createApplicationVersionMessage, _callback);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateConfigurationTemplate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createConfigurationTemplateMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyConfigurationTemplatesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateConfigurationTemplateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateConfigurationTemplateMessage createConfigurationTemplateMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConfigurationTemplateMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateConfigurationTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateConfigurationTemplateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateConfigurationTemplateMessage createConfigurationTemplateMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateConfigurationTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateConfigurationTemplate(Async)");
        }

        return pOSTCreateConfigurationTemplateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createConfigurationTemplateMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk application. You define application configuration settings in a configuration template. You can then use the configuration template to deploy different versions of the application with the same configuration settings.&lt;/p&gt; &lt;p&gt;Templates aren&#39;t associated with any environment. The &lt;code&gt;EnvironmentName&lt;/code&gt; response element is always &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListAvailableSolutionStacks&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createConfigurationTemplateMessage  (optional)
     * @return ConfigurationSettingsDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyConfigurationTemplatesException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSettingsDescription pOSTCreateConfigurationTemplate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateConfigurationTemplateMessage createConfigurationTemplateMessage) throws ApiException {
        ApiResponse<ConfigurationSettingsDescription> localVarResp = pOSTCreateConfigurationTemplateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createConfigurationTemplateMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk application. You define application configuration settings in a configuration template. You can then use the configuration template to deploy different versions of the application with the same configuration settings.&lt;/p&gt; &lt;p&gt;Templates aren&#39;t associated with any environment. The &lt;code&gt;EnvironmentName&lt;/code&gt; response element is always &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListAvailableSolutionStacks&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createConfigurationTemplateMessage  (optional)
     * @return ApiResponse&lt;ConfigurationSettingsDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyConfigurationTemplatesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSettingsDescription> pOSTCreateConfigurationTemplateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateConfigurationTemplateMessage createConfigurationTemplateMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateConfigurationTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createConfigurationTemplateMessage, null);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk application. You define application configuration settings in a configuration template. You can then use the configuration template to deploy different versions of the application with the same configuration settings.&lt;/p&gt; &lt;p&gt;Templates aren&#39;t associated with any environment. The &lt;code&gt;EnvironmentName&lt;/code&gt; response element is always &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListAvailableSolutionStacks&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createConfigurationTemplateMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyConfigurationTemplatesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateConfigurationTemplateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateConfigurationTemplateMessage createConfigurationTemplateMessage, final ApiCallback<ConfigurationSettingsDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateConfigurationTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createConfigurationTemplateMessage, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateEnvironment
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEnvironmentMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateEnvironmentCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEnvironmentMessage createEnvironmentMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEnvironmentMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateEnvironmentValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEnvironmentMessage createEnvironmentMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateEnvironment(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateEnvironment(Async)");
        }

        return pOSTCreateEnvironmentCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEnvironmentMessage, _callback);

    }

    /**
     * 
     * Launches an AWS Elastic Beanstalk environment for the specified application using the specified configuration.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEnvironmentMessage  (optional)
     * @return EnvironmentDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescription pOSTCreateEnvironment(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEnvironmentMessage createEnvironmentMessage) throws ApiException {
        ApiResponse<EnvironmentDescription> localVarResp = pOSTCreateEnvironmentWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEnvironmentMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Launches an AWS Elastic Beanstalk environment for the specified application using the specified configuration.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEnvironmentMessage  (optional)
     * @return ApiResponse&lt;EnvironmentDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescription> pOSTCreateEnvironmentWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEnvironmentMessage createEnvironmentMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEnvironmentMessage, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Launches an AWS Elastic Beanstalk environment for the specified application using the specified configuration.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEnvironmentMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEnvironmentsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateEnvironmentAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEnvironmentMessage createEnvironmentMessage, final ApiCallback<EnvironmentDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEnvironmentMessage, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreatePlatformVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformVersionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPlatformsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreatePlatformVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformVersionRequest createPlatformVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPlatformVersionRequest;

        // create path and map variables
        String localVarPath = "/#Action=CreatePlatformVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreatePlatformVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformVersionRequest createPlatformVersionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreatePlatformVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreatePlatformVersion(Async)");
        }

        return pOSTCreatePlatformVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformVersionRequest, _callback);

    }

    /**
     * 
     * Create a new version of your custom platform.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformVersionRequest  (optional)
     * @return CreatePlatformVersionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPlatformsException </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlatformVersionResult pOSTCreatePlatformVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformVersionRequest createPlatformVersionRequest) throws ApiException {
        ApiResponse<CreatePlatformVersionResult> localVarResp = pOSTCreatePlatformVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformVersionRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new version of your custom platform.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformVersionRequest  (optional)
     * @return ApiResponse&lt;CreatePlatformVersionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPlatformsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePlatformVersionResult> pOSTCreatePlatformVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformVersionRequest createPlatformVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreatePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformVersionRequest, null);
        Type localVarReturnType = new TypeToken<CreatePlatformVersionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new version of your custom platform.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createPlatformVersionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPlatformsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreatePlatformVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreatePlatformVersionRequest createPlatformVersionRequest, final ApiCallback<CreatePlatformVersionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreatePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createPlatformVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePlatformVersionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateStorageLocation
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> S3SubscriptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateStorageLocationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateStorageLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateStorageLocationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateStorageLocation(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateStorageLocation(Async)");
        }

        return pOSTCreateStorageLocationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a bucket in Amazon S3 to store application versions, logs, and other files used by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the first time you create an environment in a region. If the storage location already exists, &lt;code&gt;CreateStorageLocation&lt;/code&gt; still returns the bucket name but does not create a new bucket.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStorageLocationResultMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> S3SubscriptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStorageLocationResultMessage pOSTCreateStorageLocation(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStorageLocationResultMessage> localVarResp = pOSTCreateStorageLocationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a bucket in Amazon S3 to store application versions, logs, and other files used by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the first time you create an environment in a region. If the storage location already exists, &lt;code&gt;CreateStorageLocation&lt;/code&gt; still returns the bucket name but does not create a new bucket.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStorageLocationResultMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> S3SubscriptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStorageLocationResultMessage> pOSTCreateStorageLocationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateStorageLocationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStorageLocationResultMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a bucket in Amazon S3 to store application versions, logs, and other files used by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the first time you create an environment in a region. If the storage location already exists, &lt;code&gt;CreateStorageLocation&lt;/code&gt; still returns the bucket name but does not create a new bucket.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> S3SubscriptionRequiredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateStorageLocationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStorageLocationResultMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateStorageLocationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStorageLocationResultMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteApplication
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteApplicationMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteApplicationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationMessage deleteApplicationMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteApplicationMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteApplicationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationMessage deleteApplicationMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteApplication(Async)");
        }

        return pOSTDeleteApplicationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteApplicationMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified application along with all associated versions and configurations. The application versions will not be deleted from your Amazon S3 bucket.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application that has a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteApplicationMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteApplication(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationMessage deleteApplicationMessage) throws ApiException {
        pOSTDeleteApplicationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteApplicationMessage);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified application along with all associated versions and configurations. The application versions will not be deleted from your Amazon S3 bucket.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application that has a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteApplicationMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteApplicationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationMessage deleteApplicationMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteApplicationMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified application along with all associated versions and configurations. The application versions will not be deleted from your Amazon S3 bucket.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application that has a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteApplicationMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteApplicationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationMessage deleteApplicationMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteApplicationMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteApplicationVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteApplicationVersionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SourceBundleDeletionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteApplicationVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationVersionMessage deleteApplicationVersionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteApplicationVersionMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteApplicationVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteApplicationVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationVersionMessage deleteApplicationVersionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteApplicationVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteApplicationVersion(Async)");
        }

        return pOSTDeleteApplicationVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteApplicationVersionMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified version from the specified application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application version that is associated with a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteApplicationVersionMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SourceBundleDeletionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteApplicationVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationVersionMessage deleteApplicationVersionMessage) throws ApiException {
        pOSTDeleteApplicationVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteApplicationVersionMessage);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified version from the specified application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application version that is associated with a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteApplicationVersionMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SourceBundleDeletionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteApplicationVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationVersionMessage deleteApplicationVersionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteApplicationVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteApplicationVersionMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified version from the specified application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete an application version that is associated with a running environment.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteApplicationVersionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SourceBundleDeletionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3LocationNotInServiceRegionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteApplicationVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteApplicationVersionMessage deleteApplicationVersionMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteApplicationVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteApplicationVersionMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteConfigurationTemplate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteConfigurationTemplateMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteConfigurationTemplateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteConfigurationTemplateMessage deleteConfigurationTemplateMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteConfigurationTemplateMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteConfigurationTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteConfigurationTemplateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteConfigurationTemplateMessage deleteConfigurationTemplateMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteConfigurationTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteConfigurationTemplate(Async)");
        }

        return pOSTDeleteConfigurationTemplateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteConfigurationTemplateMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified configuration template.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you launch an environment using a configuration template, the environment gets a copy of the template. You can delete or modify the environment&#39;s copy of the template without affecting the running environment.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteConfigurationTemplateMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteConfigurationTemplate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteConfigurationTemplateMessage deleteConfigurationTemplateMessage) throws ApiException {
        pOSTDeleteConfigurationTemplateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteConfigurationTemplateMessage);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified configuration template.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you launch an environment using a configuration template, the environment gets a copy of the template. You can delete or modify the environment&#39;s copy of the template without affecting the running environment.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteConfigurationTemplateMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteConfigurationTemplateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteConfigurationTemplateMessage deleteConfigurationTemplateMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteConfigurationTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteConfigurationTemplateMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified configuration template.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you launch an environment using a configuration template, the environment gets a copy of the template. You can delete or modify the environment&#39;s copy of the template without affecting the running environment.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteConfigurationTemplateMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteConfigurationTemplateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteConfigurationTemplateMessage deleteConfigurationTemplateMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteConfigurationTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteConfigurationTemplateMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteEnvironmentConfiguration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEnvironmentConfigurationMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteEnvironmentConfigurationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEnvironmentConfigurationMessage deleteEnvironmentConfigurationMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteEnvironmentConfigurationMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteEnvironmentConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteEnvironmentConfigurationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEnvironmentConfigurationMessage deleteEnvironmentConfigurationMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteEnvironmentConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteEnvironmentConfiguration(Async)");
        }

        return pOSTDeleteEnvironmentConfigurationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEnvironmentConfigurationMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the draft configuration associated with the running environment.&lt;/p&gt; &lt;p&gt;Updating a running environment with any configuration changes creates a draft configuration set. You can get the draft configuration using &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; while the update is in progress or if the update fails. The &lt;code&gt;DeploymentStatus&lt;/code&gt; for the draft configuration indicates whether the deployment is in process or has failed. The draft configuration remains in existence until it is deleted with this action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEnvironmentConfigurationMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteEnvironmentConfiguration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEnvironmentConfigurationMessage deleteEnvironmentConfigurationMessage) throws ApiException {
        pOSTDeleteEnvironmentConfigurationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEnvironmentConfigurationMessage);
    }

    /**
     * 
     * &lt;p&gt;Deletes the draft configuration associated with the running environment.&lt;/p&gt; &lt;p&gt;Updating a running environment with any configuration changes creates a draft configuration set. You can get the draft configuration using &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; while the update is in progress or if the update fails. The &lt;code&gt;DeploymentStatus&lt;/code&gt; for the draft configuration indicates whether the deployment is in process or has failed. The draft configuration remains in existence until it is deleted with this action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEnvironmentConfigurationMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteEnvironmentConfigurationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEnvironmentConfigurationMessage deleteEnvironmentConfigurationMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteEnvironmentConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEnvironmentConfigurationMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the draft configuration associated with the running environment.&lt;/p&gt; &lt;p&gt;Updating a running environment with any configuration changes creates a draft configuration set. You can get the draft configuration using &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; while the update is in progress or if the update fails. The &lt;code&gt;DeploymentStatus&lt;/code&gt; for the draft configuration indicates whether the deployment is in process or has failed. The draft configuration remains in existence until it is deleted with this action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEnvironmentConfigurationMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteEnvironmentConfigurationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEnvironmentConfigurationMessage deleteEnvironmentConfigurationMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteEnvironmentConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEnvironmentConfigurationMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeletePlatformVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePlatformVersionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformVersionStillReferencedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeletePlatformVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformVersionRequest deletePlatformVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePlatformVersionRequest;

        // create path and map variables
        String localVarPath = "/#Action=DeletePlatformVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeletePlatformVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformVersionRequest deletePlatformVersionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeletePlatformVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeletePlatformVersion(Async)");
        }

        return pOSTDeletePlatformVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePlatformVersionRequest, _callback);

    }

    /**
     * 
     * Deletes the specified version of a custom platform.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePlatformVersionRequest  (optional)
     * @return DeletePlatformVersionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformVersionStillReferencedException </td><td>  -  </td></tr>
     </table>
     */
    public DeletePlatformVersionResult pOSTDeletePlatformVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformVersionRequest deletePlatformVersionRequest) throws ApiException {
        ApiResponse<DeletePlatformVersionResult> localVarResp = pOSTDeletePlatformVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePlatformVersionRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified version of a custom platform.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePlatformVersionRequest  (optional)
     * @return ApiResponse&lt;DeletePlatformVersionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformVersionStillReferencedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletePlatformVersionResult> pOSTDeletePlatformVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformVersionRequest deletePlatformVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeletePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePlatformVersionRequest, null);
        Type localVarReturnType = new TypeToken<DeletePlatformVersionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified version of a custom platform.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePlatformVersionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PlatformVersionStillReferencedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeletePlatformVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePlatformVersionRequest deletePlatformVersionRequest, final ApiCallback<DeletePlatformVersionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeletePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePlatformVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<DeletePlatformVersionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAccountAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAccountAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAccountAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAccountAttributes(Async)");
        }

        return pOSTDescribeAccountAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS account.&lt;/p&gt; &lt;p&gt;The result currently has one set of attributes—resource quotas.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAccountAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountAttributesResult pOSTDescribeAccountAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAccountAttributesResult> localVarResp = pOSTDescribeAccountAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS account.&lt;/p&gt; &lt;p&gt;The result currently has one set of attributes—resource quotas.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAccountAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountAttributesResult> pOSTDescribeAccountAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAccountAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAccountAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS account.&lt;/p&gt; &lt;p&gt;The result currently has one set of attributes—resource quotas.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAccountAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAccountAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeApplicationVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeApplicationVersionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeApplicationVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationVersionsMessage describeApplicationVersionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeApplicationVersionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeApplicationVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeApplicationVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationVersionsMessage describeApplicationVersionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeApplicationVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeApplicationVersions(Async)");
        }

        return pOSTDescribeApplicationVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeApplicationVersionsMessage, _callback);

    }

    /**
     * 
     * Retrieve a list of application versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeApplicationVersionsMessage  (optional)
     * @return ApplicationVersionDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationVersionDescriptionsMessage pOSTDescribeApplicationVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationVersionsMessage describeApplicationVersionsMessage) throws ApiException {
        ApiResponse<ApplicationVersionDescriptionsMessage> localVarResp = pOSTDescribeApplicationVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeApplicationVersionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of application versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeApplicationVersionsMessage  (optional)
     * @return ApiResponse&lt;ApplicationVersionDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationVersionDescriptionsMessage> pOSTDescribeApplicationVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationVersionsMessage describeApplicationVersionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeApplicationVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeApplicationVersionsMessage, null);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of application versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeApplicationVersionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeApplicationVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationVersionsMessage describeApplicationVersionsMessage, final ApiCallback<ApplicationVersionDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeApplicationVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeApplicationVersionsMessage, _callback);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeApplications
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeApplicationsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeApplicationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationsMessage describeApplicationsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeApplicationsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeApplications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeApplicationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationsMessage describeApplicationsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeApplications(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeApplications(Async)");
        }

        return pOSTDescribeApplicationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeApplicationsMessage, _callback);

    }

    /**
     * 
     * Returns the descriptions of existing applications.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeApplicationsMessage  (optional)
     * @return ApplicationDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationDescriptionsMessage pOSTDescribeApplications(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationsMessage describeApplicationsMessage) throws ApiException {
        ApiResponse<ApplicationDescriptionsMessage> localVarResp = pOSTDescribeApplicationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeApplicationsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the descriptions of existing applications.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeApplicationsMessage  (optional)
     * @return ApiResponse&lt;ApplicationDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationDescriptionsMessage> pOSTDescribeApplicationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationsMessage describeApplicationsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeApplicationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeApplicationsMessage, null);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the descriptions of existing applications.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeApplicationsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeApplicationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeApplicationsMessage describeApplicationsMessage, final ApiCallback<ApplicationDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeApplicationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeApplicationsMessage, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeConfigurationOptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeConfigurationOptionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeConfigurationOptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationOptionsMessage describeConfigurationOptionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeConfigurationOptionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeConfigurationOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeConfigurationOptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationOptionsMessage describeConfigurationOptionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeConfigurationOptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeConfigurationOptions(Async)");
        }

        return pOSTDescribeConfigurationOptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeConfigurationOptionsMessage, _callback);

    }

    /**
     * 
     * Describes the configuration options that are used in a particular configuration template or environment, or that a specified solution stack defines. The description includes the values the options, their default values, and an indication of the required action on a running environment if an option value is changed.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeConfigurationOptionsMessage  (optional)
     * @return ConfigurationOptionsDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationOptionsDescription pOSTDescribeConfigurationOptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationOptionsMessage describeConfigurationOptionsMessage) throws ApiException {
        ApiResponse<ConfigurationOptionsDescription> localVarResp = pOSTDescribeConfigurationOptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeConfigurationOptionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the configuration options that are used in a particular configuration template or environment, or that a specified solution stack defines. The description includes the values the options, their default values, and an indication of the required action on a running environment if an option value is changed.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeConfigurationOptionsMessage  (optional)
     * @return ApiResponse&lt;ConfigurationOptionsDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationOptionsDescription> pOSTDescribeConfigurationOptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationOptionsMessage describeConfigurationOptionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeConfigurationOptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeConfigurationOptionsMessage, null);
        Type localVarReturnType = new TypeToken<ConfigurationOptionsDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the configuration options that are used in a particular configuration template or environment, or that a specified solution stack defines. The description includes the values the options, their default values, and an indication of the required action on a running environment if an option value is changed.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeConfigurationOptionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeConfigurationOptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationOptionsMessage describeConfigurationOptionsMessage, final ApiCallback<ConfigurationOptionsDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeConfigurationOptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeConfigurationOptionsMessage, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationOptionsDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeConfigurationSettings
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeConfigurationSettingsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeConfigurationSettingsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationSettingsMessage describeConfigurationSettingsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeConfigurationSettingsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeConfigurationSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeConfigurationSettingsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationSettingsMessage describeConfigurationSettingsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeConfigurationSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeConfigurationSettings(Async)");
        }

        return pOSTDescribeConfigurationSettingsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeConfigurationSettingsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a description of the settings for the specified configuration set, that is, either a configuration template or the configuration set associated with a running environment.&lt;/p&gt; &lt;p&gt;When describing the settings for the configuration set associated with a running environment, it is possible to receive two sets of setting descriptions. One is the deployed configuration set, and the other is a draft configuration of an environment that is either in the process of deployment or that failed to deploy.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteEnvironmentConfiguration&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeConfigurationSettingsMessage  (optional)
     * @return ConfigurationSettingsDescriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSettingsDescriptions pOSTDescribeConfigurationSettings(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationSettingsMessage describeConfigurationSettingsMessage) throws ApiException {
        ApiResponse<ConfigurationSettingsDescriptions> localVarResp = pOSTDescribeConfigurationSettingsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeConfigurationSettingsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a description of the settings for the specified configuration set, that is, either a configuration template or the configuration set associated with a running environment.&lt;/p&gt; &lt;p&gt;When describing the settings for the configuration set associated with a running environment, it is possible to receive two sets of setting descriptions. One is the deployed configuration set, and the other is a draft configuration of an environment that is either in the process of deployment or that failed to deploy.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteEnvironmentConfiguration&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeConfigurationSettingsMessage  (optional)
     * @return ApiResponse&lt;ConfigurationSettingsDescriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSettingsDescriptions> pOSTDescribeConfigurationSettingsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationSettingsMessage describeConfigurationSettingsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeConfigurationSettingsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeConfigurationSettingsMessage, null);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a description of the settings for the specified configuration set, that is, either a configuration template or the configuration set associated with a running environment.&lt;/p&gt; &lt;p&gt;When describing the settings for the configuration set associated with a running environment, it is possible to receive two sets of setting descriptions. One is the deployed configuration set, and the other is a draft configuration of an environment that is either in the process of deployment or that failed to deploy.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DeleteEnvironmentConfiguration&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeConfigurationSettingsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeConfigurationSettingsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeConfigurationSettingsMessage describeConfigurationSettingsMessage, final ApiCallback<ConfigurationSettingsDescriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeConfigurationSettingsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeConfigurationSettingsMessage, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEnvironmentHealth
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentHealthRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentHealthCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentHealthRequest describeEnvironmentHealthRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEnvironmentHealthRequest;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironmentHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEnvironmentHealthValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentHealthRequest describeEnvironmentHealthRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEnvironmentHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEnvironmentHealth(Async)");
        }

        return pOSTDescribeEnvironmentHealthCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentHealthRequest, _callback);

    }

    /**
     * 
     * Returns information about the overall health of the specified environment. The &lt;b&gt;DescribeEnvironmentHealth&lt;/b&gt; operation is only available with AWS Elastic Beanstalk Enhanced Health.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentHealthRequest  (optional)
     * @return DescribeEnvironmentHealthResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEnvironmentHealthResult pOSTDescribeEnvironmentHealth(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentHealthRequest describeEnvironmentHealthRequest) throws ApiException {
        ApiResponse<DescribeEnvironmentHealthResult> localVarResp = pOSTDescribeEnvironmentHealthWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentHealthRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the overall health of the specified environment. The &lt;b&gt;DescribeEnvironmentHealth&lt;/b&gt; operation is only available with AWS Elastic Beanstalk Enhanced Health.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentHealthRequest  (optional)
     * @return ApiResponse&lt;DescribeEnvironmentHealthResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEnvironmentHealthResult> pOSTDescribeEnvironmentHealthWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentHealthRequest describeEnvironmentHealthRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEnvironmentHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentHealthRequest, null);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentHealthResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the overall health of the specified environment. The &lt;b&gt;DescribeEnvironmentHealth&lt;/b&gt; operation is only available with AWS Elastic Beanstalk Enhanced Health.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentHealthRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentHealthAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentHealthRequest describeEnvironmentHealthRequest, final ApiCallback<DescribeEnvironmentHealthResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEnvironmentHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentHealthRequest, _callback);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentHealthResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEnvironmentManagedActionHistory
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeEnvironmentManagedActionHistoryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentManagedActionHistoryCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String nextToken, DescribeEnvironmentManagedActionHistoryRequest describeEnvironmentManagedActionHistoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEnvironmentManagedActionHistoryRequest;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironmentManagedActionHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEnvironmentManagedActionHistoryValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String nextToken, DescribeEnvironmentManagedActionHistoryRequest describeEnvironmentManagedActionHistoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEnvironmentManagedActionHistory(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEnvironmentManagedActionHistory(Async)");
        }

        return pOSTDescribeEnvironmentManagedActionHistoryCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, nextToken, describeEnvironmentManagedActionHistoryRequest, _callback);

    }

    /**
     * 
     * Lists an environment&#39;s completed and failed managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeEnvironmentManagedActionHistoryRequest  (optional)
     * @return DescribeEnvironmentManagedActionHistoryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEnvironmentManagedActionHistoryResult pOSTDescribeEnvironmentManagedActionHistory(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String nextToken, DescribeEnvironmentManagedActionHistoryRequest describeEnvironmentManagedActionHistoryRequest) throws ApiException {
        ApiResponse<DescribeEnvironmentManagedActionHistoryResult> localVarResp = pOSTDescribeEnvironmentManagedActionHistoryWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, nextToken, describeEnvironmentManagedActionHistoryRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists an environment&#39;s completed and failed managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeEnvironmentManagedActionHistoryRequest  (optional)
     * @return ApiResponse&lt;DescribeEnvironmentManagedActionHistoryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEnvironmentManagedActionHistoryResult> pOSTDescribeEnvironmentManagedActionHistoryWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String nextToken, DescribeEnvironmentManagedActionHistoryRequest describeEnvironmentManagedActionHistoryRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEnvironmentManagedActionHistoryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, nextToken, describeEnvironmentManagedActionHistoryRequest, null);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentManagedActionHistoryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists an environment&#39;s completed and failed managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeEnvironmentManagedActionHistoryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentManagedActionHistoryAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String nextToken, DescribeEnvironmentManagedActionHistoryRequest describeEnvironmentManagedActionHistoryRequest, final ApiCallback<DescribeEnvironmentManagedActionHistoryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEnvironmentManagedActionHistoryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, nextToken, describeEnvironmentManagedActionHistoryRequest, _callback);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentManagedActionHistoryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEnvironmentManagedActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentManagedActionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentManagedActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentManagedActionsRequest describeEnvironmentManagedActionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEnvironmentManagedActionsRequest;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironmentManagedActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEnvironmentManagedActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentManagedActionsRequest describeEnvironmentManagedActionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEnvironmentManagedActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEnvironmentManagedActions(Async)");
        }

        return pOSTDescribeEnvironmentManagedActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentManagedActionsRequest, _callback);

    }

    /**
     * 
     * Lists an environment&#39;s upcoming and in-progress managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentManagedActionsRequest  (optional)
     * @return DescribeEnvironmentManagedActionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEnvironmentManagedActionsResult pOSTDescribeEnvironmentManagedActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentManagedActionsRequest describeEnvironmentManagedActionsRequest) throws ApiException {
        ApiResponse<DescribeEnvironmentManagedActionsResult> localVarResp = pOSTDescribeEnvironmentManagedActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentManagedActionsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists an environment&#39;s upcoming and in-progress managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentManagedActionsRequest  (optional)
     * @return ApiResponse&lt;DescribeEnvironmentManagedActionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEnvironmentManagedActionsResult> pOSTDescribeEnvironmentManagedActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentManagedActionsRequest describeEnvironmentManagedActionsRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEnvironmentManagedActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentManagedActionsRequest, null);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentManagedActionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists an environment&#39;s upcoming and in-progress managed actions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentManagedActionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentManagedActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentManagedActionsRequest describeEnvironmentManagedActionsRequest, final ApiCallback<DescribeEnvironmentManagedActionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEnvironmentManagedActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentManagedActionsRequest, _callback);
        Type localVarReturnType = new TypeToken<DescribeEnvironmentManagedActionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEnvironmentResources
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentResourcesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentResourcesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentResourcesMessage describeEnvironmentResourcesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEnvironmentResourcesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironmentResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEnvironmentResourcesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentResourcesMessage describeEnvironmentResourcesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEnvironmentResources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEnvironmentResources(Async)");
        }

        return pOSTDescribeEnvironmentResourcesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentResourcesMessage, _callback);

    }

    /**
     * 
     * Returns AWS resources for this environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentResourcesMessage  (optional)
     * @return EnvironmentResourceDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentResourceDescriptionsMessage pOSTDescribeEnvironmentResources(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentResourcesMessage describeEnvironmentResourcesMessage) throws ApiException {
        ApiResponse<EnvironmentResourceDescriptionsMessage> localVarResp = pOSTDescribeEnvironmentResourcesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentResourcesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns AWS resources for this environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentResourcesMessage  (optional)
     * @return ApiResponse&lt;EnvironmentResourceDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentResourceDescriptionsMessage> pOSTDescribeEnvironmentResourcesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentResourcesMessage describeEnvironmentResourcesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEnvironmentResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentResourcesMessage, null);
        Type localVarReturnType = new TypeToken<EnvironmentResourceDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns AWS resources for this environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentResourcesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentResourcesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentResourcesMessage describeEnvironmentResourcesMessage, final ApiCallback<EnvironmentResourceDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEnvironmentResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentResourcesMessage, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentResourceDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEnvironments
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentsMessage describeEnvironmentsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEnvironmentsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEnvironments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEnvironmentsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentsMessage describeEnvironmentsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEnvironments(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEnvironments(Async)");
        }

        return pOSTDescribeEnvironmentsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentsMessage, _callback);

    }

    /**
     * 
     * Returns descriptions for existing environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentsMessage  (optional)
     * @return EnvironmentDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescriptionsMessage pOSTDescribeEnvironments(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentsMessage describeEnvironmentsMessage) throws ApiException {
        ApiResponse<EnvironmentDescriptionsMessage> localVarResp = pOSTDescribeEnvironmentsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns descriptions for existing environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentsMessage  (optional)
     * @return ApiResponse&lt;EnvironmentDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescriptionsMessage> pOSTDescribeEnvironmentsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentsMessage describeEnvironmentsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEnvironmentsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentsMessage, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns descriptions for existing environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEnvironmentsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEnvironmentsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEnvironmentsMessage describeEnvironmentsMessage, final ApiCallback<EnvironmentDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEnvironmentsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEnvironmentsMessage, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeEventsMessage describeEventsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeEventsMessage describeEventsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEvents(Async)");
        }

        return pOSTDescribeEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeEventsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns list of event descriptions matching criteria up to the last 6 weeks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action returns the most recent 1,000 events from the specified &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @return EventDescriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventDescriptionsMessage pOSTDescribeEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeEventsMessage describeEventsMessage) throws ApiException {
        ApiResponse<EventDescriptionsMessage> localVarResp = pOSTDescribeEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeEventsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns list of event descriptions matching criteria up to the last 6 weeks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action returns the most recent 1,000 events from the specified &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @return ApiResponse&lt;EventDescriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventDescriptionsMessage> pOSTDescribeEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeEventsMessage describeEventsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeEventsMessage, null);
        Type localVarReturnType = new TypeToken<EventDescriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns list of event descriptions matching criteria up to the last 6 weeks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action returns the most recent 1,000 events from the specified &lt;code&gt;NextToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeEventsMessage describeEventsMessage, final ApiCallback<EventDescriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeEventsMessage, _callback);
        Type localVarReturnType = new TypeToken<EventDescriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeInstancesHealth
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeInstancesHealthRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeInstancesHealthCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstancesHealthRequest describeInstancesHealthRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeInstancesHealthRequest;

        // create path and map variables
        String localVarPath = "/#Action=DescribeInstancesHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeInstancesHealthValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstancesHealthRequest describeInstancesHealthRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeInstancesHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeInstancesHealth(Async)");
        }

        return pOSTDescribeInstancesHealthCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeInstancesHealthRequest, _callback);

    }

    /**
     * 
     * Retrieves detailed information about the health of instances in your AWS Elastic Beanstalk. This operation requires &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html\&quot;&gt;enhanced health reporting&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeInstancesHealthRequest  (optional)
     * @return DescribeInstancesHealthResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeInstancesHealthResult pOSTDescribeInstancesHealth(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstancesHealthRequest describeInstancesHealthRequest) throws ApiException {
        ApiResponse<DescribeInstancesHealthResult> localVarResp = pOSTDescribeInstancesHealthWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeInstancesHealthRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves detailed information about the health of instances in your AWS Elastic Beanstalk. This operation requires &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html\&quot;&gt;enhanced health reporting&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeInstancesHealthRequest  (optional)
     * @return ApiResponse&lt;DescribeInstancesHealthResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeInstancesHealthResult> pOSTDescribeInstancesHealthWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstancesHealthRequest describeInstancesHealthRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeInstancesHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeInstancesHealthRequest, null);
        Type localVarReturnType = new TypeToken<DescribeInstancesHealthResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves detailed information about the health of instances in your AWS Elastic Beanstalk. This operation requires &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html\&quot;&gt;enhanced health reporting&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeInstancesHealthRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeInstancesHealthAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstancesHealthRequest describeInstancesHealthRequest, final ApiCallback<DescribeInstancesHealthResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeInstancesHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeInstancesHealthRequest, _callback);
        Type localVarReturnType = new TypeToken<DescribeInstancesHealthResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribePlatformVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describePlatformVersionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePlatformVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePlatformVersionRequest describePlatformVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describePlatformVersionRequest;

        // create path and map variables
        String localVarPath = "/#Action=DescribePlatformVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribePlatformVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePlatformVersionRequest describePlatformVersionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribePlatformVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribePlatformVersion(Async)");
        }

        return pOSTDescribePlatformVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describePlatformVersionRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes a platform version. Provides full details. Compare to &lt;a&gt;ListPlatformVersions&lt;/a&gt;, which provides summary information about a list of platform versions.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describePlatformVersionRequest  (optional)
     * @return DescribePlatformVersionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public DescribePlatformVersionResult pOSTDescribePlatformVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePlatformVersionRequest describePlatformVersionRequest) throws ApiException {
        ApiResponse<DescribePlatformVersionResult> localVarResp = pOSTDescribePlatformVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describePlatformVersionRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes a platform version. Provides full details. Compare to &lt;a&gt;ListPlatformVersions&lt;/a&gt;, which provides summary information about a list of platform versions.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describePlatformVersionRequest  (optional)
     * @return ApiResponse&lt;DescribePlatformVersionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribePlatformVersionResult> pOSTDescribePlatformVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePlatformVersionRequest describePlatformVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describePlatformVersionRequest, null);
        Type localVarReturnType = new TypeToken<DescribePlatformVersionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes a platform version. Provides full details. Compare to &lt;a&gt;ListPlatformVersions&lt;/a&gt;, which provides summary information about a list of platform versions.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describePlatformVersionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePlatformVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePlatformVersionRequest describePlatformVersionRequest, final ApiCallback<DescribePlatformVersionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribePlatformVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describePlatformVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<DescribePlatformVersionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDisassociateEnvironmentOperationsRole
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disassociateEnvironmentOperationsRoleMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisassociateEnvironmentOperationsRoleCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateEnvironmentOperationsRoleMessage disassociateEnvironmentOperationsRoleMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateEnvironmentOperationsRoleMessage;

        // create path and map variables
        String localVarPath = "/#Action=DisassociateEnvironmentOperationsRole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDisassociateEnvironmentOperationsRoleValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateEnvironmentOperationsRoleMessage disassociateEnvironmentOperationsRoleMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDisassociateEnvironmentOperationsRole(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDisassociateEnvironmentOperationsRole(Async)");
        }

        return pOSTDisassociateEnvironmentOperationsRoleCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateEnvironmentOperationsRoleMessage, _callback);

    }

    /**
     * 
     * Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses the caller&#39;s permissions for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disassociateEnvironmentOperationsRoleMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDisassociateEnvironmentOperationsRole(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateEnvironmentOperationsRoleMessage disassociateEnvironmentOperationsRoleMessage) throws ApiException {
        pOSTDisassociateEnvironmentOperationsRoleWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateEnvironmentOperationsRoleMessage);
    }

    /**
     * 
     * Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses the caller&#39;s permissions for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disassociateEnvironmentOperationsRoleMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDisassociateEnvironmentOperationsRoleWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateEnvironmentOperationsRoleMessage disassociateEnvironmentOperationsRoleMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDisassociateEnvironmentOperationsRoleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateEnvironmentOperationsRoleMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses the caller&#39;s permissions for permissions to downstream services during subsequent calls acting on this environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html\&quot;&gt;Operations roles&lt;/a&gt; in the &lt;i&gt;AWS Elastic Beanstalk Developer Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disassociateEnvironmentOperationsRoleMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisassociateEnvironmentOperationsRoleAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateEnvironmentOperationsRoleMessage disassociateEnvironmentOperationsRoleMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDisassociateEnvironmentOperationsRoleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateEnvironmentOperationsRoleMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListAvailableSolutionStacks
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListAvailableSolutionStacksCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListAvailableSolutionStacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListAvailableSolutionStacksValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListAvailableSolutionStacks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListAvailableSolutionStacks(Async)");
        }

        return pOSTListAvailableSolutionStacksCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns a list of the available solution stack names, with the public version first and then in reverse chronological order.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListAvailableSolutionStacksResultMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableSolutionStacksResultMessage pOSTListAvailableSolutionStacks(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListAvailableSolutionStacksResultMessage> localVarResp = pOSTListAvailableSolutionStacksWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the available solution stack names, with the public version first and then in reverse chronological order.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListAvailableSolutionStacksResultMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAvailableSolutionStacksResultMessage> pOSTListAvailableSolutionStacksWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTListAvailableSolutionStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListAvailableSolutionStacksResultMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the available solution stack names, with the public version first and then in reverse chronological order.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListAvailableSolutionStacksAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListAvailableSolutionStacksResultMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListAvailableSolutionStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListAvailableSolutionStacksResultMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListPlatformBranches
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformBranchesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListPlatformBranchesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformBranchesRequest listPlatformBranchesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPlatformBranchesRequest;

        // create path and map variables
        String localVarPath = "/#Action=ListPlatformBranches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListPlatformBranchesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformBranchesRequest listPlatformBranchesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListPlatformBranches(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListPlatformBranches(Async)");
        }

        return pOSTListPlatformBranchesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, listPlatformBranchesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the platform branches available for your account in an AWS Region. Provides summary information about each platform branch.&lt;/p&gt; &lt;p&gt;For definitions of platform branch and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformBranchesRequest  (optional)
     * @return ListPlatformBranchesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListPlatformBranchesResult pOSTListPlatformBranches(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformBranchesRequest listPlatformBranchesRequest) throws ApiException {
        ApiResponse<ListPlatformBranchesResult> localVarResp = pOSTListPlatformBranchesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, listPlatformBranchesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the platform branches available for your account in an AWS Region. Provides summary information about each platform branch.&lt;/p&gt; &lt;p&gt;For definitions of platform branch and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformBranchesRequest  (optional)
     * @return ApiResponse&lt;ListPlatformBranchesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPlatformBranchesResult> pOSTListPlatformBranchesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformBranchesRequest listPlatformBranchesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTListPlatformBranchesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, listPlatformBranchesRequest, null);
        Type localVarReturnType = new TypeToken<ListPlatformBranchesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the platform branches available for your account in an AWS Region. Provides summary information about each platform branch.&lt;/p&gt; &lt;p&gt;For definitions of platform branch and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformBranchesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListPlatformBranchesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformBranchesRequest listPlatformBranchesRequest, final ApiCallback<ListPlatformBranchesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListPlatformBranchesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, listPlatformBranchesRequest, _callback);
        Type localVarReturnType = new TypeToken<ListPlatformBranchesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListPlatformVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformVersionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListPlatformVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformVersionsRequest listPlatformVersionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPlatformVersionsRequest;

        // create path and map variables
        String localVarPath = "/#Action=ListPlatformVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListPlatformVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformVersionsRequest listPlatformVersionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListPlatformVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListPlatformVersions(Async)");
        }

        return pOSTListPlatformVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, listPlatformVersionsRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the platform versions available for your account in an AWS Region. Provides summary information about each platform version. Compare to &lt;a&gt;DescribePlatformVersion&lt;/a&gt;, which provides full details about a single platform version.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformVersionsRequest  (optional)
     * @return ListPlatformVersionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ListPlatformVersionsResult pOSTListPlatformVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformVersionsRequest listPlatformVersionsRequest) throws ApiException {
        ApiResponse<ListPlatformVersionsResult> localVarResp = pOSTListPlatformVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, listPlatformVersionsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the platform versions available for your account in an AWS Region. Provides summary information about each platform version. Compare to &lt;a&gt;DescribePlatformVersion&lt;/a&gt;, which provides full details about a single platform version.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformVersionsRequest  (optional)
     * @return ApiResponse&lt;ListPlatformVersionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPlatformVersionsResult> pOSTListPlatformVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformVersionsRequest listPlatformVersionsRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTListPlatformVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, listPlatformVersionsRequest, null);
        Type localVarReturnType = new TypeToken<ListPlatformVersionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the platform versions available for your account in an AWS Region. Provides summary information about each platform version. Compare to &lt;a&gt;DescribePlatformVersion&lt;/a&gt;, which provides full details about a single platform version.&lt;/p&gt; &lt;p&gt;For definitions of platform version and other platform-related terms, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html\&quot;&gt;AWS Elastic Beanstalk Platforms Glossary&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listPlatformVersionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ElasticBeanstalkServiceException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListPlatformVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, ListPlatformVersionsRequest listPlatformVersionsRequest, final ApiCallback<ListPlatformVersionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListPlatformVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, listPlatformVersionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ListPlatformVersionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTagsForResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTagsForResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTagsForResource(Async)");
        }

        return pOSTListTagsForResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @return ResourceTagsDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ResourceTagsDescriptionMessage pOSTListTagsForResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage) throws ApiException {
        ApiResponse<ResourceTagsDescriptionMessage> localVarResp = pOSTListTagsForResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @return ApiResponse&lt;ResourceTagsDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceTagsDescriptionMessage> pOSTListTagsForResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, null);
        Type localVarReturnType = new TypeToken<ResourceTagsDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback<ResourceTagsDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, _callback);
        Type localVarReturnType = new TypeToken<ResourceTagsDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRebuildEnvironment
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebuildEnvironmentMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebuildEnvironmentCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebuildEnvironmentMessage rebuildEnvironmentMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rebuildEnvironmentMessage;

        // create path and map variables
        String localVarPath = "/#Action=RebuildEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRebuildEnvironmentValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebuildEnvironmentMessage rebuildEnvironmentMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRebuildEnvironment(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRebuildEnvironment(Async)");
        }

        return pOSTRebuildEnvironmentCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebuildEnvironmentMessage, _callback);

    }

    /**
     * 
     * Deletes and recreates all of the AWS resources (for example: the Auto Scaling group, load balancer, etc.) for a specified environment and forces a restart.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebuildEnvironmentMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTRebuildEnvironment(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebuildEnvironmentMessage rebuildEnvironmentMessage) throws ApiException {
        pOSTRebuildEnvironmentWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebuildEnvironmentMessage);
    }

    /**
     * 
     * Deletes and recreates all of the AWS resources (for example: the Auto Scaling group, load balancer, etc.) for a specified environment and forces a restart.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebuildEnvironmentMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTRebuildEnvironmentWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebuildEnvironmentMessage rebuildEnvironmentMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRebuildEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebuildEnvironmentMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes and recreates all of the AWS resources (for example: the Auto Scaling group, load balancer, etc.) for a specified environment and forces a restart.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebuildEnvironmentMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebuildEnvironmentAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebuildEnvironmentMessage rebuildEnvironmentMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRebuildEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebuildEnvironmentMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRequestEnvironmentInfo
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param requestEnvironmentInfoMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRequestEnvironmentInfoCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RequestEnvironmentInfoMessage requestEnvironmentInfoMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestEnvironmentInfoMessage;

        // create path and map variables
        String localVarPath = "/#Action=RequestEnvironmentInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRequestEnvironmentInfoValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RequestEnvironmentInfoMessage requestEnvironmentInfoMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRequestEnvironmentInfo(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRequestEnvironmentInfo(Async)");
        }

        return pOSTRequestEnvironmentInfoCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, requestEnvironmentInfoMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Initiates a request to compile the specified type of information of the deployed environment.&lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;tail&lt;/code&gt; compiles the last lines from the application server log files of every Amazon EC2 instance in your environment. &lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;bundle&lt;/code&gt; compresses the application server log files for every Amazon EC2 instance into a &lt;code&gt;.zip&lt;/code&gt; file. Legacy and .NET containers do not support bundle logs. &lt;/p&gt; &lt;p&gt; Use &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; to obtain the set of logs. &lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param requestEnvironmentInfoMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTRequestEnvironmentInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RequestEnvironmentInfoMessage requestEnvironmentInfoMessage) throws ApiException {
        pOSTRequestEnvironmentInfoWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, requestEnvironmentInfoMessage);
    }

    /**
     * 
     * &lt;p&gt;Initiates a request to compile the specified type of information of the deployed environment.&lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;tail&lt;/code&gt; compiles the last lines from the application server log files of every Amazon EC2 instance in your environment. &lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;bundle&lt;/code&gt; compresses the application server log files for every Amazon EC2 instance into a &lt;code&gt;.zip&lt;/code&gt; file. Legacy and .NET containers do not support bundle logs. &lt;/p&gt; &lt;p&gt; Use &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; to obtain the set of logs. &lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param requestEnvironmentInfoMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTRequestEnvironmentInfoWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RequestEnvironmentInfoMessage requestEnvironmentInfoMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRequestEnvironmentInfoValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, requestEnvironmentInfoMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Initiates a request to compile the specified type of information of the deployed environment.&lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;tail&lt;/code&gt; compiles the last lines from the application server log files of every Amazon EC2 instance in your environment. &lt;/p&gt; &lt;p&gt; Setting the &lt;code&gt;InfoType&lt;/code&gt; to &lt;code&gt;bundle&lt;/code&gt; compresses the application server log files for every Amazon EC2 instance into a &lt;code&gt;.zip&lt;/code&gt; file. Legacy and .NET containers do not support bundle logs. &lt;/p&gt; &lt;p&gt; Use &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; to obtain the set of logs. &lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RetrieveEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param requestEnvironmentInfoMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRequestEnvironmentInfoAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RequestEnvironmentInfoMessage requestEnvironmentInfoMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRequestEnvironmentInfoValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, requestEnvironmentInfoMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRestartAppServer
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restartAppServerMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestartAppServerCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestartAppServerMessage restartAppServerMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restartAppServerMessage;

        // create path and map variables
        String localVarPath = "/#Action=RestartAppServer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRestartAppServerValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestartAppServerMessage restartAppServerMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRestartAppServer(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRestartAppServer(Async)");
        }

        return pOSTRestartAppServerCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restartAppServerMessage, _callback);

    }

    /**
     * 
     * Causes the environment to restart the application container server running on each Amazon EC2 instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restartAppServerMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTRestartAppServer(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestartAppServerMessage restartAppServerMessage) throws ApiException {
        pOSTRestartAppServerWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restartAppServerMessage);
    }

    /**
     * 
     * Causes the environment to restart the application container server running on each Amazon EC2 instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restartAppServerMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTRestartAppServerWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestartAppServerMessage restartAppServerMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRestartAppServerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restartAppServerMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Causes the environment to restart the application container server running on each Amazon EC2 instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restartAppServerMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestartAppServerAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestartAppServerMessage restartAppServerMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRestartAppServerValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restartAppServerMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRetrieveEnvironmentInfo
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retrieveEnvironmentInfoMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRetrieveEnvironmentInfoCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RetrieveEnvironmentInfoMessage retrieveEnvironmentInfoMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retrieveEnvironmentInfoMessage;

        // create path and map variables
        String localVarPath = "/#Action=RetrieveEnvironmentInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRetrieveEnvironmentInfoValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RetrieveEnvironmentInfoMessage retrieveEnvironmentInfoMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRetrieveEnvironmentInfo(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRetrieveEnvironmentInfo(Async)");
        }

        return pOSTRetrieveEnvironmentInfoCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retrieveEnvironmentInfoMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the compiled information from a &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; request.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retrieveEnvironmentInfoMessage  (optional)
     * @return RetrieveEnvironmentInfoResultMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveEnvironmentInfoResultMessage pOSTRetrieveEnvironmentInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RetrieveEnvironmentInfoMessage retrieveEnvironmentInfoMessage) throws ApiException {
        ApiResponse<RetrieveEnvironmentInfoResultMessage> localVarResp = pOSTRetrieveEnvironmentInfoWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retrieveEnvironmentInfoMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the compiled information from a &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; request.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retrieveEnvironmentInfoMessage  (optional)
     * @return ApiResponse&lt;RetrieveEnvironmentInfoResultMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveEnvironmentInfoResultMessage> pOSTRetrieveEnvironmentInfoWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RetrieveEnvironmentInfoMessage retrieveEnvironmentInfoMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRetrieveEnvironmentInfoValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retrieveEnvironmentInfoMessage, null);
        Type localVarReturnType = new TypeToken<RetrieveEnvironmentInfoResultMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the compiled information from a &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; request.&lt;/p&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;RequestEnvironmentInfo&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retrieveEnvironmentInfoMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRetrieveEnvironmentInfoAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RetrieveEnvironmentInfoMessage retrieveEnvironmentInfoMessage, final ApiCallback<RetrieveEnvironmentInfoResultMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRetrieveEnvironmentInfoValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retrieveEnvironmentInfoMessage, _callback);
        Type localVarReturnType = new TypeToken<RetrieveEnvironmentInfoResultMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSwapEnvironmentCNAMEs
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param swapEnvironmentCNAMEsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSwapEnvironmentCNAMEsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SwapEnvironmentCNAMEsMessage swapEnvironmentCNAMEsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = swapEnvironmentCNAMEsMessage;

        // create path and map variables
        String localVarPath = "/#Action=SwapEnvironmentCNAMEs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSwapEnvironmentCNAMEsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SwapEnvironmentCNAMEsMessage swapEnvironmentCNAMEsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSwapEnvironmentCNAMEs(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSwapEnvironmentCNAMEs(Async)");
        }

        return pOSTSwapEnvironmentCNAMEsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, swapEnvironmentCNAMEsMessage, _callback);

    }

    /**
     * 
     * Swaps the CNAMEs of two environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param swapEnvironmentCNAMEsMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSwapEnvironmentCNAMEs(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SwapEnvironmentCNAMEsMessage swapEnvironmentCNAMEsMessage) throws ApiException {
        pOSTSwapEnvironmentCNAMEsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, swapEnvironmentCNAMEsMessage);
    }

    /**
     * 
     * Swaps the CNAMEs of two environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param swapEnvironmentCNAMEsMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSwapEnvironmentCNAMEsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SwapEnvironmentCNAMEsMessage swapEnvironmentCNAMEsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTSwapEnvironmentCNAMEsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, swapEnvironmentCNAMEsMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Swaps the CNAMEs of two environments.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param swapEnvironmentCNAMEsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSwapEnvironmentCNAMEsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SwapEnvironmentCNAMEsMessage swapEnvironmentCNAMEsMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSwapEnvironmentCNAMEsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, swapEnvironmentCNAMEsMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTTerminateEnvironment
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateEnvironmentMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTerminateEnvironmentCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateEnvironmentMessage terminateEnvironmentMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = terminateEnvironmentMessage;

        // create path and map variables
        String localVarPath = "/#Action=TerminateEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTTerminateEnvironmentValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateEnvironmentMessage terminateEnvironmentMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTTerminateEnvironment(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTTerminateEnvironment(Async)");
        }

        return pOSTTerminateEnvironmentCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateEnvironmentMessage, _callback);

    }

    /**
     * 
     * Terminates the specified environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateEnvironmentMessage  (optional)
     * @return EnvironmentDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescription pOSTTerminateEnvironment(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateEnvironmentMessage terminateEnvironmentMessage) throws ApiException {
        ApiResponse<EnvironmentDescription> localVarResp = pOSTTerminateEnvironmentWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateEnvironmentMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Terminates the specified environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateEnvironmentMessage  (optional)
     * @return ApiResponse&lt;EnvironmentDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescription> pOSTTerminateEnvironmentWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateEnvironmentMessage terminateEnvironmentMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTTerminateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateEnvironmentMessage, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Terminates the specified environment.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateEnvironmentMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTerminateEnvironmentAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateEnvironmentMessage terminateEnvironmentMessage, final ApiCallback<EnvironmentDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTTerminateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateEnvironmentMessage, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateApplication
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateApplicationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationMessage updateApplicationMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApplicationMessage;

        // create path and map variables
        String localVarPath = "/#Action=UpdateApplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateApplicationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationMessage updateApplicationMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateApplication(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateApplication(Async)");
        }

        return pOSTUpdateApplicationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the specified application to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear these properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationMessage  (optional)
     * @return ApplicationDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationDescriptionMessage pOSTUpdateApplication(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationMessage updateApplicationMessage) throws ApiException {
        ApiResponse<ApplicationDescriptionMessage> localVarResp = pOSTUpdateApplicationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the specified application to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear these properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationMessage  (optional)
     * @return ApiResponse&lt;ApplicationDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationDescriptionMessage> pOSTUpdateApplicationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationMessage updateApplicationMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationMessage, null);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the specified application to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear these properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateApplicationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationMessage updateApplicationMessage, final ApiCallback<ApplicationDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateApplicationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationMessage, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateApplicationResourceLifecycle
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationResourceLifecycleMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateApplicationResourceLifecycleCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationResourceLifecycleMessage updateApplicationResourceLifecycleMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApplicationResourceLifecycleMessage;

        // create path and map variables
        String localVarPath = "/#Action=UpdateApplicationResourceLifecycle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateApplicationResourceLifecycleValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationResourceLifecycleMessage updateApplicationResourceLifecycleMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateApplicationResourceLifecycle(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateApplicationResourceLifecycle(Async)");
        }

        return pOSTUpdateApplicationResourceLifecycleCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationResourceLifecycleMessage, _callback);

    }

    /**
     * 
     * Modifies lifecycle settings for an application.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationResourceLifecycleMessage  (optional)
     * @return ApplicationResourceLifecycleDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResourceLifecycleDescriptionMessage pOSTUpdateApplicationResourceLifecycle(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationResourceLifecycleMessage updateApplicationResourceLifecycleMessage) throws ApiException {
        ApiResponse<ApplicationResourceLifecycleDescriptionMessage> localVarResp = pOSTUpdateApplicationResourceLifecycleWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationResourceLifecycleMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies lifecycle settings for an application.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationResourceLifecycleMessage  (optional)
     * @return ApiResponse&lt;ApplicationResourceLifecycleDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResourceLifecycleDescriptionMessage> pOSTUpdateApplicationResourceLifecycleWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationResourceLifecycleMessage updateApplicationResourceLifecycleMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateApplicationResourceLifecycleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationResourceLifecycleMessage, null);
        Type localVarReturnType = new TypeToken<ApplicationResourceLifecycleDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies lifecycle settings for an application.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationResourceLifecycleMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateApplicationResourceLifecycleAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationResourceLifecycleMessage updateApplicationResourceLifecycleMessage, final ApiCallback<ApplicationResourceLifecycleDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateApplicationResourceLifecycleValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationResourceLifecycleMessage, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResourceLifecycleDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateApplicationVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationVersionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateApplicationVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationVersionMessage updateApplicationVersionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApplicationVersionMessage;

        // create path and map variables
        String localVarPath = "/#Action=UpdateApplicationVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateApplicationVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationVersionMessage updateApplicationVersionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateApplicationVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateApplicationVersion(Async)");
        }

        return pOSTUpdateApplicationVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationVersionMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the specified application version to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationVersionMessage  (optional)
     * @return ApplicationVersionDescriptionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationVersionDescriptionMessage pOSTUpdateApplicationVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationVersionMessage updateApplicationVersionMessage) throws ApiException {
        ApiResponse<ApplicationVersionDescriptionMessage> localVarResp = pOSTUpdateApplicationVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationVersionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the specified application version to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationVersionMessage  (optional)
     * @return ApiResponse&lt;ApplicationVersionDescriptionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationVersionDescriptionMessage> pOSTUpdateApplicationVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationVersionMessage updateApplicationVersionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateApplicationVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationVersionMessage, null);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the specified application version to have the specified properties.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;description&lt;/code&gt;) is not provided, the value remains unchanged. To clear properties, specify an empty string.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateApplicationVersionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateApplicationVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateApplicationVersionMessage updateApplicationVersionMessage, final ApiCallback<ApplicationVersionDescriptionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateApplicationVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateApplicationVersionMessage, _callback);
        Type localVarReturnType = new TypeToken<ApplicationVersionDescriptionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateConfigurationTemplate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateConfigurationTemplateMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateConfigurationTemplateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateConfigurationTemplateMessage updateConfigurationTemplateMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConfigurationTemplateMessage;

        // create path and map variables
        String localVarPath = "/#Action=UpdateConfigurationTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateConfigurationTemplateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateConfigurationTemplateMessage updateConfigurationTemplateMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateConfigurationTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateConfigurationTemplate(Async)");
        }

        return pOSTUpdateConfigurationTemplateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateConfigurationTemplateMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the specified configuration template to have the specified properties or configuration option values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;ApplicationName&lt;/code&gt;) is not provided, its value remains unchanged. To clear such properties, specify an empty string.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateConfigurationTemplateMessage  (optional)
     * @return ConfigurationSettingsDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSettingsDescription pOSTUpdateConfigurationTemplate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateConfigurationTemplateMessage updateConfigurationTemplateMessage) throws ApiException {
        ApiResponse<ConfigurationSettingsDescription> localVarResp = pOSTUpdateConfigurationTemplateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateConfigurationTemplateMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the specified configuration template to have the specified properties or configuration option values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;ApplicationName&lt;/code&gt;) is not provided, its value remains unchanged. To clear such properties, specify an empty string.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateConfigurationTemplateMessage  (optional)
     * @return ApiResponse&lt;ConfigurationSettingsDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSettingsDescription> pOSTUpdateConfigurationTemplateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateConfigurationTemplateMessage updateConfigurationTemplateMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateConfigurationTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateConfigurationTemplateMessage, null);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the specified configuration template to have the specified properties or configuration option values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a property (for example, &lt;code&gt;ApplicationName&lt;/code&gt;) is not provided, its value remains unchanged. To clear such properties, specify an empty string.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Related Topics&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;DescribeConfigurationOptions&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateConfigurationTemplateMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateConfigurationTemplateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateConfigurationTemplateMessage updateConfigurationTemplateMessage, final ApiCallback<ConfigurationSettingsDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateConfigurationTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateConfigurationTemplateMessage, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateEnvironment
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateEnvironmentMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateEnvironmentCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateEnvironmentMessage updateEnvironmentMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEnvironmentMessage;

        // create path and map variables
        String localVarPath = "/#Action=UpdateEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateEnvironmentValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateEnvironmentMessage updateEnvironmentMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateEnvironment(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateEnvironment(Async)");
        }

        return pOSTUpdateEnvironmentCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateEnvironmentMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the environment description, deploys a new application version, updates the configuration settings to an entirely new configuration template, or updates select configuration option values in the running environment.&lt;/p&gt; &lt;p&gt; Attempting to update both the release and configuration is not allowed and AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; When updating the configuration settings to a new template or individual settings, a draft configuration is created and &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; for this environment returns two setting descriptions with different &lt;code&gt;DeploymentStatus&lt;/code&gt; values. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateEnvironmentMessage  (optional)
     * @return EnvironmentDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentDescription pOSTUpdateEnvironment(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateEnvironmentMessage updateEnvironmentMessage) throws ApiException {
        ApiResponse<EnvironmentDescription> localVarResp = pOSTUpdateEnvironmentWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateEnvironmentMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the environment description, deploys a new application version, updates the configuration settings to an entirely new configuration template, or updates select configuration option values in the running environment.&lt;/p&gt; &lt;p&gt; Attempting to update both the release and configuration is not allowed and AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; When updating the configuration settings to a new template or individual settings, a draft configuration is created and &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; for this environment returns two setting descriptions with different &lt;code&gt;DeploymentStatus&lt;/code&gt; values. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateEnvironmentMessage  (optional)
     * @return ApiResponse&lt;EnvironmentDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentDescription> pOSTUpdateEnvironmentWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateEnvironmentMessage updateEnvironmentMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateEnvironmentMessage, null);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the environment description, deploys a new application version, updates the configuration settings to an entirely new configuration template, or updates select configuration option values in the running environment.&lt;/p&gt; &lt;p&gt; Attempting to update both the release and configuration is not allowed and AWS Elastic Beanstalk returns an &lt;code&gt;InvalidParameterCombination&lt;/code&gt; error. &lt;/p&gt; &lt;p&gt; When updating the configuration settings to a new template or individual settings, a draft configuration is created and &lt;a&gt;DescribeConfigurationSettings&lt;/a&gt; for this environment returns two setting descriptions with different &lt;code&gt;DeploymentStatus&lt;/code&gt; values. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateEnvironmentMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateEnvironmentAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateEnvironmentMessage updateEnvironmentMessage, final ApiCallback<EnvironmentDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateEnvironmentValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateEnvironmentMessage, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateTagsForResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateTagsForResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateTagsForResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTagsForResourceMessage updateTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTagsForResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=UpdateTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateTagsForResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTagsForResourceMessage updateTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateTagsForResource(Async)");
        }

        return pOSTUpdateTagsForResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateTagsForResourceMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: &lt;code&gt;TagsToAdd&lt;/code&gt; for tags to add or update, and &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a custom IAM user policy to control permission to this operation, specify one of the following two virtual actions (or both) instead of the API operation name:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;elasticbeanstalk:AddTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tags to add in the &lt;code&gt;TagsToAdd&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;elasticbeanstalk:RemoveTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tag keys to remove in the &lt;code&gt;TagsToRemove&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;For details about creating a custom user policy, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies\&quot;&gt;Creating a Custom User Policy&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateTagsForResourceMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTUpdateTagsForResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTagsForResourceMessage updateTagsForResourceMessage) throws ApiException {
        pOSTUpdateTagsForResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateTagsForResourceMessage);
    }

    /**
     * 
     * &lt;p&gt;Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: &lt;code&gt;TagsToAdd&lt;/code&gt; for tags to add or update, and &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a custom IAM user policy to control permission to this operation, specify one of the following two virtual actions (or both) instead of the API operation name:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;elasticbeanstalk:AddTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tags to add in the &lt;code&gt;TagsToAdd&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;elasticbeanstalk:RemoveTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tag keys to remove in the &lt;code&gt;TagsToRemove&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;For details about creating a custom user policy, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies\&quot;&gt;Creating a Custom User Policy&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateTagsForResourceMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTUpdateTagsForResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTagsForResourceMessage updateTagsForResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateTagsForResourceMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: &lt;code&gt;TagsToAdd&lt;/code&gt; for tags to add or update, and &lt;code&gt;TagsToRemove&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html\&quot;&gt;Tagging Application Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you create a custom IAM user policy to control permission to this operation, specify one of the following two virtual actions (or both) instead of the API operation name:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;elasticbeanstalk:AddTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tags to add in the &lt;code&gt;TagsToAdd&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;elasticbeanstalk:RemoveTags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Controls permission to call &lt;code&gt;UpdateTagsForResource&lt;/code&gt; and pass a list of tag keys to remove in the &lt;code&gt;TagsToRemove&lt;/code&gt; parameter.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;For details about creating a custom user policy, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies\&quot;&gt;Creating a Custom User Policy&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateTagsForResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateTagsForResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTagsForResourceMessage updateTagsForResourceMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateTagsForResourceMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTValidateConfigurationSettings
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param validateConfigurationSettingsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTValidateConfigurationSettingsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateConfigurationSettingsMessage validateConfigurationSettingsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validateConfigurationSettingsMessage;

        // create path and map variables
        String localVarPath = "/#Action=ValidateConfigurationSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTValidateConfigurationSettingsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateConfigurationSettingsMessage validateConfigurationSettingsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTValidateConfigurationSettings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTValidateConfigurationSettings(Async)");
        }

        return pOSTValidateConfigurationSettingsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, validateConfigurationSettingsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Takes a set of configuration settings and either a configuration template or environment, and determines whether those values are valid.&lt;/p&gt; &lt;p&gt;This action returns a list of messages indicating any errors or warnings associated with the selection of option values.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param validateConfigurationSettingsMessage  (optional)
     * @return ConfigurationSettingsValidationMessages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSettingsValidationMessages pOSTValidateConfigurationSettings(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateConfigurationSettingsMessage validateConfigurationSettingsMessage) throws ApiException {
        ApiResponse<ConfigurationSettingsValidationMessages> localVarResp = pOSTValidateConfigurationSettingsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, validateConfigurationSettingsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Takes a set of configuration settings and either a configuration template or environment, and determines whether those values are valid.&lt;/p&gt; &lt;p&gt;This action returns a list of messages indicating any errors or warnings associated with the selection of option values.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param validateConfigurationSettingsMessage  (optional)
     * @return ApiResponse&lt;ConfigurationSettingsValidationMessages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSettingsValidationMessages> pOSTValidateConfigurationSettingsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateConfigurationSettingsMessage validateConfigurationSettingsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTValidateConfigurationSettingsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, validateConfigurationSettingsMessage, null);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsValidationMessages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Takes a set of configuration settings and either a configuration template or environment, and determines whether those values are valid.&lt;/p&gt; &lt;p&gt;This action returns a list of messages indicating any errors or warnings associated with the selection of option values.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param validateConfigurationSettingsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientPrivilegesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyBucketsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTValidateConfigurationSettingsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateConfigurationSettingsMessage validateConfigurationSettingsMessage, final ApiCallback<ConfigurationSettingsValidationMessages> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTValidateConfigurationSettingsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, validateConfigurationSettingsMessage, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSettingsValidationMessages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
