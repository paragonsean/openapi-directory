/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CPU utilization metrics for an instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CPUUtilization {
  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  private Double user;

  public static final String SERIALIZED_NAME_NICE = "Nice";
  @SerializedName(SERIALIZED_NAME_NICE)
  private Double nice;

  public static final String SERIALIZED_NAME_SYSTEM = "System";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private Double system;

  public static final String SERIALIZED_NAME_IDLE = "Idle";
  @SerializedName(SERIALIZED_NAME_IDLE)
  private Double idle;

  public static final String SERIALIZED_NAME_IO_WAIT = "IOWait";
  @SerializedName(SERIALIZED_NAME_IO_WAIT)
  private Double ioWait;

  public static final String SERIALIZED_NAME_I_R_Q = "IRQ";
  @SerializedName(SERIALIZED_NAME_I_R_Q)
  private Double IRQ;

  public static final String SERIALIZED_NAME_SOFT_I_R_Q = "SoftIRQ";
  @SerializedName(SERIALIZED_NAME_SOFT_I_R_Q)
  private Double softIRQ;

  public static final String SERIALIZED_NAME_PRIVILEGED = "Privileged";
  @SerializedName(SERIALIZED_NAME_PRIVILEGED)
  private Double privileged;

  public CPUUtilization() {
  }

  public CPUUtilization user(Double user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public Double getUser() {
    return user;
  }

  public void setUser(Double user) {
    this.user = user;
  }


  public CPUUtilization nice(Double nice) {
    this.nice = nice;
    return this;
  }

  /**
   * Get nice
   * @return nice
   */
  @javax.annotation.Nullable
  public Double getNice() {
    return nice;
  }

  public void setNice(Double nice) {
    this.nice = nice;
  }


  public CPUUtilization system(Double system) {
    this.system = system;
    return this;
  }

  /**
   * Get system
   * @return system
   */
  @javax.annotation.Nullable
  public Double getSystem() {
    return system;
  }

  public void setSystem(Double system) {
    this.system = system;
  }


  public CPUUtilization idle(Double idle) {
    this.idle = idle;
    return this;
  }

  /**
   * Get idle
   * @return idle
   */
  @javax.annotation.Nullable
  public Double getIdle() {
    return idle;
  }

  public void setIdle(Double idle) {
    this.idle = idle;
  }


  public CPUUtilization ioWait(Double ioWait) {
    this.ioWait = ioWait;
    return this;
  }

  /**
   * Get ioWait
   * @return ioWait
   */
  @javax.annotation.Nullable
  public Double getIoWait() {
    return ioWait;
  }

  public void setIoWait(Double ioWait) {
    this.ioWait = ioWait;
  }


  public CPUUtilization IRQ(Double IRQ) {
    this.IRQ = IRQ;
    return this;
  }

  /**
   * Get IRQ
   * @return IRQ
   */
  @javax.annotation.Nullable
  public Double getIRQ() {
    return IRQ;
  }

  public void setIRQ(Double IRQ) {
    this.IRQ = IRQ;
  }


  public CPUUtilization softIRQ(Double softIRQ) {
    this.softIRQ = softIRQ;
    return this;
  }

  /**
   * Get softIRQ
   * @return softIRQ
   */
  @javax.annotation.Nullable
  public Double getSoftIRQ() {
    return softIRQ;
  }

  public void setSoftIRQ(Double softIRQ) {
    this.softIRQ = softIRQ;
  }


  public CPUUtilization privileged(Double privileged) {
    this.privileged = privileged;
    return this;
  }

  /**
   * Get privileged
   * @return privileged
   */
  @javax.annotation.Nullable
  public Double getPrivileged() {
    return privileged;
  }

  public void setPrivileged(Double privileged) {
    this.privileged = privileged;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CPUUtilization cpUUtilization = (CPUUtilization) o;
    return Objects.equals(this.user, cpUUtilization.user) &&
        Objects.equals(this.nice, cpUUtilization.nice) &&
        Objects.equals(this.system, cpUUtilization.system) &&
        Objects.equals(this.idle, cpUUtilization.idle) &&
        Objects.equals(this.ioWait, cpUUtilization.ioWait) &&
        Objects.equals(this.IRQ, cpUUtilization.IRQ) &&
        Objects.equals(this.softIRQ, cpUUtilization.softIRQ) &&
        Objects.equals(this.privileged, cpUUtilization.privileged);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, nice, system, idle, ioWait, IRQ, softIRQ, privileged);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CPUUtilization {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    nice: ").append(toIndentedString(nice)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    idle: ").append(toIndentedString(idle)).append("\n");
    sb.append("    ioWait: ").append(toIndentedString(ioWait)).append("\n");
    sb.append("    IRQ: ").append(toIndentedString(IRQ)).append("\n");
    sb.append("    softIRQ: ").append(toIndentedString(softIRQ)).append("\n");
    sb.append("    privileged: ").append(toIndentedString(privileged)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("User");
    openapiFields.add("Nice");
    openapiFields.add("System");
    openapiFields.add("Idle");
    openapiFields.add("IOWait");
    openapiFields.add("IRQ");
    openapiFields.add("SoftIRQ");
    openapiFields.add("Privileged");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CPUUtilization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CPUUtilization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CPUUtilization is not found in the empty JSON string", CPUUtilization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CPUUtilization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CPUUtilization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `User`
      if (jsonObj.get("User") != null && !jsonObj.get("User").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("User"));
      }
      // validate the optional field `Nice`
      if (jsonObj.get("Nice") != null && !jsonObj.get("Nice").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Nice"));
      }
      // validate the optional field `System`
      if (jsonObj.get("System") != null && !jsonObj.get("System").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("System"));
      }
      // validate the optional field `Idle`
      if (jsonObj.get("Idle") != null && !jsonObj.get("Idle").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Idle"));
      }
      // validate the optional field `IOWait`
      if (jsonObj.get("IOWait") != null && !jsonObj.get("IOWait").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("IOWait"));
      }
      // validate the optional field `IRQ`
      if (jsonObj.get("IRQ") != null && !jsonObj.get("IRQ").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("IRQ"));
      }
      // validate the optional field `SoftIRQ`
      if (jsonObj.get("SoftIRQ") != null && !jsonObj.get("SoftIRQ").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("SoftIRQ"));
      }
      // validate the optional field `Privileged`
      if (jsonObj.get("Privileged") != null && !jsonObj.get("Privileged").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Privileged"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CPUUtilization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CPUUtilization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CPUUtilization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CPUUtilization.class));

       return (TypeAdapter<T>) new TypeAdapter<CPUUtilization>() {
           @Override
           public void write(JsonWriter out, CPUUtilization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CPUUtilization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CPUUtilization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CPUUtilization
   * @throws IOException if the JSON string is invalid with respect to CPUUtilization
   */
  public static CPUUtilization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CPUUtilization.class);
  }

  /**
   * Convert an instance of CPUUtilization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

