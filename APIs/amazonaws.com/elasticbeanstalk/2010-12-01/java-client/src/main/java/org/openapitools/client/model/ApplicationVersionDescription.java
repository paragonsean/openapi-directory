/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationVersionDescriptionSourceBuildInformation;
import org.openapitools.client.model.ApplicationVersionDescriptionSourceBundle;
import org.openapitools.client.model.ApplicationVersionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of an application version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationVersionDescription {
  public static final String SERIALIZED_NAME_APPLICATION_VERSION_ARN = "ApplicationVersionArn";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION_ARN)
  private String applicationVersionArn;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_VERSION_LABEL = "VersionLabel";
  @SerializedName(SERIALIZED_NAME_VERSION_LABEL)
  private String versionLabel;

  public static final String SERIALIZED_NAME_SOURCE_BUILD_INFORMATION = "SourceBuildInformation";
  @SerializedName(SERIALIZED_NAME_SOURCE_BUILD_INFORMATION)
  private ApplicationVersionDescriptionSourceBuildInformation sourceBuildInformation;

  public static final String SERIALIZED_NAME_BUILD_ARN = "BuildArn";
  @SerializedName(SERIALIZED_NAME_BUILD_ARN)
  private String buildArn;

  public static final String SERIALIZED_NAME_SOURCE_BUNDLE = "SourceBundle";
  @SerializedName(SERIALIZED_NAME_SOURCE_BUNDLE)
  private ApplicationVersionDescriptionSourceBundle sourceBundle;

  public static final String SERIALIZED_NAME_DATE_CREATED = "DateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "DateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ApplicationVersionStatus status;

  public ApplicationVersionDescription() {
  }

  public ApplicationVersionDescription applicationVersionArn(String applicationVersionArn) {
    this.applicationVersionArn = applicationVersionArn;
    return this;
  }

  /**
   * Get applicationVersionArn
   * @return applicationVersionArn
   */
  @javax.annotation.Nullable
  public String getApplicationVersionArn() {
    return applicationVersionArn;
  }

  public void setApplicationVersionArn(String applicationVersionArn) {
    this.applicationVersionArn = applicationVersionArn;
  }


  public ApplicationVersionDescription applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public ApplicationVersionDescription description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApplicationVersionDescription versionLabel(String versionLabel) {
    this.versionLabel = versionLabel;
    return this;
  }

  /**
   * Get versionLabel
   * @return versionLabel
   */
  @javax.annotation.Nullable
  public String getVersionLabel() {
    return versionLabel;
  }

  public void setVersionLabel(String versionLabel) {
    this.versionLabel = versionLabel;
  }


  public ApplicationVersionDescription sourceBuildInformation(ApplicationVersionDescriptionSourceBuildInformation sourceBuildInformation) {
    this.sourceBuildInformation = sourceBuildInformation;
    return this;
  }

  /**
   * Get sourceBuildInformation
   * @return sourceBuildInformation
   */
  @javax.annotation.Nullable
  public ApplicationVersionDescriptionSourceBuildInformation getSourceBuildInformation() {
    return sourceBuildInformation;
  }

  public void setSourceBuildInformation(ApplicationVersionDescriptionSourceBuildInformation sourceBuildInformation) {
    this.sourceBuildInformation = sourceBuildInformation;
  }


  public ApplicationVersionDescription buildArn(String buildArn) {
    this.buildArn = buildArn;
    return this;
  }

  /**
   * Get buildArn
   * @return buildArn
   */
  @javax.annotation.Nullable
  public String getBuildArn() {
    return buildArn;
  }

  public void setBuildArn(String buildArn) {
    this.buildArn = buildArn;
  }


  public ApplicationVersionDescription sourceBundle(ApplicationVersionDescriptionSourceBundle sourceBundle) {
    this.sourceBundle = sourceBundle;
    return this;
  }

  /**
   * Get sourceBundle
   * @return sourceBundle
   */
  @javax.annotation.Nullable
  public ApplicationVersionDescriptionSourceBundle getSourceBundle() {
    return sourceBundle;
  }

  public void setSourceBundle(ApplicationVersionDescriptionSourceBundle sourceBundle) {
    this.sourceBundle = sourceBundle;
  }


  public ApplicationVersionDescription dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ApplicationVersionDescription dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Get dateUpdated
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public ApplicationVersionDescription status(ApplicationVersionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ApplicationVersionStatus getStatus() {
    return status;
  }

  public void setStatus(ApplicationVersionStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationVersionDescription applicationVersionDescription = (ApplicationVersionDescription) o;
    return Objects.equals(this.applicationVersionArn, applicationVersionDescription.applicationVersionArn) &&
        Objects.equals(this.applicationName, applicationVersionDescription.applicationName) &&
        Objects.equals(this.description, applicationVersionDescription.description) &&
        Objects.equals(this.versionLabel, applicationVersionDescription.versionLabel) &&
        Objects.equals(this.sourceBuildInformation, applicationVersionDescription.sourceBuildInformation) &&
        Objects.equals(this.buildArn, applicationVersionDescription.buildArn) &&
        Objects.equals(this.sourceBundle, applicationVersionDescription.sourceBundle) &&
        Objects.equals(this.dateCreated, applicationVersionDescription.dateCreated) &&
        Objects.equals(this.dateUpdated, applicationVersionDescription.dateUpdated) &&
        Objects.equals(this.status, applicationVersionDescription.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationVersionArn, applicationName, description, versionLabel, sourceBuildInformation, buildArn, sourceBundle, dateCreated, dateUpdated, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationVersionDescription {\n");
    sb.append("    applicationVersionArn: ").append(toIndentedString(applicationVersionArn)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    versionLabel: ").append(toIndentedString(versionLabel)).append("\n");
    sb.append("    sourceBuildInformation: ").append(toIndentedString(sourceBuildInformation)).append("\n");
    sb.append("    buildArn: ").append(toIndentedString(buildArn)).append("\n");
    sb.append("    sourceBundle: ").append(toIndentedString(sourceBundle)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationVersionArn");
    openapiFields.add("ApplicationName");
    openapiFields.add("Description");
    openapiFields.add("VersionLabel");
    openapiFields.add("SourceBuildInformation");
    openapiFields.add("BuildArn");
    openapiFields.add("SourceBundle");
    openapiFields.add("DateCreated");
    openapiFields.add("DateUpdated");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationVersionDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationVersionDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationVersionDescription is not found in the empty JSON string", ApplicationVersionDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationVersionDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationVersionDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationVersionArn`
      if (jsonObj.get("ApplicationVersionArn") != null && !jsonObj.get("ApplicationVersionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationVersionArn"));
      }
      // validate the optional field `ApplicationName`
      if (jsonObj.get("ApplicationName") != null && !jsonObj.get("ApplicationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `VersionLabel`
      if (jsonObj.get("VersionLabel") != null && !jsonObj.get("VersionLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VersionLabel"));
      }
      // validate the optional field `SourceBuildInformation`
      if (jsonObj.get("SourceBuildInformation") != null && !jsonObj.get("SourceBuildInformation").isJsonNull()) {
        ApplicationVersionDescriptionSourceBuildInformation.validateJsonElement(jsonObj.get("SourceBuildInformation"));
      }
      // validate the optional field `BuildArn`
      if (jsonObj.get("BuildArn") != null && !jsonObj.get("BuildArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BuildArn"));
      }
      // validate the optional field `SourceBundle`
      if (jsonObj.get("SourceBundle") != null && !jsonObj.get("SourceBundle").isJsonNull()) {
        ApplicationVersionDescriptionSourceBundle.validateJsonElement(jsonObj.get("SourceBundle"));
      }
      // validate the optional field `DateCreated`
      if (jsonObj.get("DateCreated") != null && !jsonObj.get("DateCreated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DateCreated"));
      }
      // validate the optional field `DateUpdated`
      if (jsonObj.get("DateUpdated") != null && !jsonObj.get("DateUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DateUpdated"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ApplicationVersionStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationVersionDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationVersionDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationVersionDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationVersionDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationVersionDescription>() {
           @Override
           public void write(JsonWriter out, ApplicationVersionDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationVersionDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationVersionDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationVersionDescription
   * @throws IOException if the JSON string is invalid with respect to ApplicationVersionDescription
   */
  public static ApplicationVersionDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationVersionDescription.class);
  }

  /**
   * Convert an instance of ApplicationVersionDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

