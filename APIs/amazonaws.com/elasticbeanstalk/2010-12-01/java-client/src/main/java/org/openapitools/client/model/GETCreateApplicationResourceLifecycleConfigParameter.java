/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GETCreateApplicationResourceLifecycleConfigParameterVersionLifecycleConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The resource lifecycle configuration for an application. Defines lifecycle settings for resources that belong to the application, and the service role that AWS Elastic Beanstalk assumes in order to apply lifecycle settings. The version lifecycle configuration defines lifecycle settings for application versions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETCreateApplicationResourceLifecycleConfigParameter {
  public static final String SERIALIZED_NAME_SERVICE_ROLE = "ServiceRole";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE)
  private String serviceRole;

  public static final String SERIALIZED_NAME_VERSION_LIFECYCLE_CONFIG = "VersionLifecycleConfig";
  @SerializedName(SERIALIZED_NAME_VERSION_LIFECYCLE_CONFIG)
  private GETCreateApplicationResourceLifecycleConfigParameterVersionLifecycleConfig versionLifecycleConfig;

  public GETCreateApplicationResourceLifecycleConfigParameter() {
  }

  public GETCreateApplicationResourceLifecycleConfigParameter serviceRole(String serviceRole) {
    this.serviceRole = serviceRole;
    return this;
  }

  /**
   * Get serviceRole
   * @return serviceRole
   */
  @javax.annotation.Nullable
  public String getServiceRole() {
    return serviceRole;
  }

  public void setServiceRole(String serviceRole) {
    this.serviceRole = serviceRole;
  }


  public GETCreateApplicationResourceLifecycleConfigParameter versionLifecycleConfig(GETCreateApplicationResourceLifecycleConfigParameterVersionLifecycleConfig versionLifecycleConfig) {
    this.versionLifecycleConfig = versionLifecycleConfig;
    return this;
  }

  /**
   * Get versionLifecycleConfig
   * @return versionLifecycleConfig
   */
  @javax.annotation.Nullable
  public GETCreateApplicationResourceLifecycleConfigParameterVersionLifecycleConfig getVersionLifecycleConfig() {
    return versionLifecycleConfig;
  }

  public void setVersionLifecycleConfig(GETCreateApplicationResourceLifecycleConfigParameterVersionLifecycleConfig versionLifecycleConfig) {
    this.versionLifecycleConfig = versionLifecycleConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETCreateApplicationResourceLifecycleConfigParameter geTCreateApplicationResourceLifecycleConfigParameter = (GETCreateApplicationResourceLifecycleConfigParameter) o;
    return Objects.equals(this.serviceRole, geTCreateApplicationResourceLifecycleConfigParameter.serviceRole) &&
        Objects.equals(this.versionLifecycleConfig, geTCreateApplicationResourceLifecycleConfigParameter.versionLifecycleConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceRole, versionLifecycleConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETCreateApplicationResourceLifecycleConfigParameter {\n");
    sb.append("    serviceRole: ").append(toIndentedString(serviceRole)).append("\n");
    sb.append("    versionLifecycleConfig: ").append(toIndentedString(versionLifecycleConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServiceRole");
    openapiFields.add("VersionLifecycleConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETCreateApplicationResourceLifecycleConfigParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETCreateApplicationResourceLifecycleConfigParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETCreateApplicationResourceLifecycleConfigParameter is not found in the empty JSON string", GETCreateApplicationResourceLifecycleConfigParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETCreateApplicationResourceLifecycleConfigParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETCreateApplicationResourceLifecycleConfigParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ServiceRole`
      if (jsonObj.get("ServiceRole") != null && !jsonObj.get("ServiceRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceRole"));
      }
      // validate the optional field `VersionLifecycleConfig`
      if (jsonObj.get("VersionLifecycleConfig") != null && !jsonObj.get("VersionLifecycleConfig").isJsonNull()) {
        GETCreateApplicationResourceLifecycleConfigParameterVersionLifecycleConfig.validateJsonElement(jsonObj.get("VersionLifecycleConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETCreateApplicationResourceLifecycleConfigParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETCreateApplicationResourceLifecycleConfigParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETCreateApplicationResourceLifecycleConfigParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETCreateApplicationResourceLifecycleConfigParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<GETCreateApplicationResourceLifecycleConfigParameter>() {
           @Override
           public void write(JsonWriter out, GETCreateApplicationResourceLifecycleConfigParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETCreateApplicationResourceLifecycleConfigParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETCreateApplicationResourceLifecycleConfigParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETCreateApplicationResourceLifecycleConfigParameter
   * @throws IOException if the JSON string is invalid with respect to GETCreateApplicationResourceLifecycleConfigParameter
   */
  public static GETCreateApplicationResourceLifecycleConfigParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETCreateApplicationResourceLifecycleConfigParameter.class);
  }

  /**
   * Convert an instance of GETCreateApplicationResourceLifecycleConfigParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

