/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateApplicationVersionMessageBuildConfiguration;
import org.openapitools.client.model.CreateApplicationVersionMessageSourceBuildInformation;
import org.openapitools.client.model.CreateApplicationVersionMessageSourceBundle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p/&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApplicationVersionMessage {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "ApplicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_VERSION_LABEL = "VersionLabel";
  @SerializedName(SERIALIZED_NAME_VERSION_LABEL)
  private String versionLabel;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SOURCE_BUILD_INFORMATION = "SourceBuildInformation";
  @SerializedName(SERIALIZED_NAME_SOURCE_BUILD_INFORMATION)
  private CreateApplicationVersionMessageSourceBuildInformation sourceBuildInformation;

  public static final String SERIALIZED_NAME_SOURCE_BUNDLE = "SourceBundle";
  @SerializedName(SERIALIZED_NAME_SOURCE_BUNDLE)
  private CreateApplicationVersionMessageSourceBundle sourceBundle;

  public static final String SERIALIZED_NAME_BUILD_CONFIGURATION = "BuildConfiguration";
  @SerializedName(SERIALIZED_NAME_BUILD_CONFIGURATION)
  private CreateApplicationVersionMessageBuildConfiguration buildConfiguration;

  public static final String SERIALIZED_NAME_AUTO_CREATE_APPLICATION = "AutoCreateApplication";
  @SerializedName(SERIALIZED_NAME_AUTO_CREATE_APPLICATION)
  private Boolean autoCreateApplication;

  public static final String SERIALIZED_NAME_PROCESS = "Process";
  @SerializedName(SERIALIZED_NAME_PROCESS)
  private Boolean process;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateApplicationVersionMessage() {
  }

  public CreateApplicationVersionMessage applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

  /**
   * Get applicationName
   * @return applicationName
   */
  @javax.annotation.Nonnull
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public CreateApplicationVersionMessage versionLabel(String versionLabel) {
    this.versionLabel = versionLabel;
    return this;
  }

  /**
   * Get versionLabel
   * @return versionLabel
   */
  @javax.annotation.Nonnull
  public String getVersionLabel() {
    return versionLabel;
  }

  public void setVersionLabel(String versionLabel) {
    this.versionLabel = versionLabel;
  }


  public CreateApplicationVersionMessage description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateApplicationVersionMessage sourceBuildInformation(CreateApplicationVersionMessageSourceBuildInformation sourceBuildInformation) {
    this.sourceBuildInformation = sourceBuildInformation;
    return this;
  }

  /**
   * Get sourceBuildInformation
   * @return sourceBuildInformation
   */
  @javax.annotation.Nullable
  public CreateApplicationVersionMessageSourceBuildInformation getSourceBuildInformation() {
    return sourceBuildInformation;
  }

  public void setSourceBuildInformation(CreateApplicationVersionMessageSourceBuildInformation sourceBuildInformation) {
    this.sourceBuildInformation = sourceBuildInformation;
  }


  public CreateApplicationVersionMessage sourceBundle(CreateApplicationVersionMessageSourceBundle sourceBundle) {
    this.sourceBundle = sourceBundle;
    return this;
  }

  /**
   * Get sourceBundle
   * @return sourceBundle
   */
  @javax.annotation.Nullable
  public CreateApplicationVersionMessageSourceBundle getSourceBundle() {
    return sourceBundle;
  }

  public void setSourceBundle(CreateApplicationVersionMessageSourceBundle sourceBundle) {
    this.sourceBundle = sourceBundle;
  }


  public CreateApplicationVersionMessage buildConfiguration(CreateApplicationVersionMessageBuildConfiguration buildConfiguration) {
    this.buildConfiguration = buildConfiguration;
    return this;
  }

  /**
   * Get buildConfiguration
   * @return buildConfiguration
   */
  @javax.annotation.Nullable
  public CreateApplicationVersionMessageBuildConfiguration getBuildConfiguration() {
    return buildConfiguration;
  }

  public void setBuildConfiguration(CreateApplicationVersionMessageBuildConfiguration buildConfiguration) {
    this.buildConfiguration = buildConfiguration;
  }


  public CreateApplicationVersionMessage autoCreateApplication(Boolean autoCreateApplication) {
    this.autoCreateApplication = autoCreateApplication;
    return this;
  }

  /**
   * Get autoCreateApplication
   * @return autoCreateApplication
   */
  @javax.annotation.Nullable
  public Boolean getAutoCreateApplication() {
    return autoCreateApplication;
  }

  public void setAutoCreateApplication(Boolean autoCreateApplication) {
    this.autoCreateApplication = autoCreateApplication;
  }


  public CreateApplicationVersionMessage process(Boolean process) {
    this.process = process;
    return this;
  }

  /**
   * Get process
   * @return process
   */
  @javax.annotation.Nullable
  public Boolean getProcess() {
    return process;
  }

  public void setProcess(Boolean process) {
    this.process = process;
  }


  public CreateApplicationVersionMessage tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApplicationVersionMessage createApplicationVersionMessage = (CreateApplicationVersionMessage) o;
    return Objects.equals(this.applicationName, createApplicationVersionMessage.applicationName) &&
        Objects.equals(this.versionLabel, createApplicationVersionMessage.versionLabel) &&
        Objects.equals(this.description, createApplicationVersionMessage.description) &&
        Objects.equals(this.sourceBuildInformation, createApplicationVersionMessage.sourceBuildInformation) &&
        Objects.equals(this.sourceBundle, createApplicationVersionMessage.sourceBundle) &&
        Objects.equals(this.buildConfiguration, createApplicationVersionMessage.buildConfiguration) &&
        Objects.equals(this.autoCreateApplication, createApplicationVersionMessage.autoCreateApplication) &&
        Objects.equals(this.process, createApplicationVersionMessage.process) &&
        Objects.equals(this.tags, createApplicationVersionMessage.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, versionLabel, description, sourceBuildInformation, sourceBundle, buildConfiguration, autoCreateApplication, process, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApplicationVersionMessage {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    versionLabel: ").append(toIndentedString(versionLabel)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sourceBuildInformation: ").append(toIndentedString(sourceBuildInformation)).append("\n");
    sb.append("    sourceBundle: ").append(toIndentedString(sourceBundle)).append("\n");
    sb.append("    buildConfiguration: ").append(toIndentedString(buildConfiguration)).append("\n");
    sb.append("    autoCreateApplication: ").append(toIndentedString(autoCreateApplication)).append("\n");
    sb.append("    process: ").append(toIndentedString(process)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationName");
    openapiFields.add("VersionLabel");
    openapiFields.add("Description");
    openapiFields.add("SourceBuildInformation");
    openapiFields.add("SourceBundle");
    openapiFields.add("BuildConfiguration");
    openapiFields.add("AutoCreateApplication");
    openapiFields.add("Process");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationName");
    openapiRequiredFields.add("VersionLabel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApplicationVersionMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApplicationVersionMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApplicationVersionMessage is not found in the empty JSON string", CreateApplicationVersionMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApplicationVersionMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApplicationVersionMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateApplicationVersionMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationName`
      String.validateJsonElement(jsonObj.get("ApplicationName"));
      // validate the required field `VersionLabel`
      String.validateJsonElement(jsonObj.get("VersionLabel"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `SourceBuildInformation`
      if (jsonObj.get("SourceBuildInformation") != null && !jsonObj.get("SourceBuildInformation").isJsonNull()) {
        CreateApplicationVersionMessageSourceBuildInformation.validateJsonElement(jsonObj.get("SourceBuildInformation"));
      }
      // validate the optional field `SourceBundle`
      if (jsonObj.get("SourceBundle") != null && !jsonObj.get("SourceBundle").isJsonNull()) {
        CreateApplicationVersionMessageSourceBundle.validateJsonElement(jsonObj.get("SourceBundle"));
      }
      // validate the optional field `BuildConfiguration`
      if (jsonObj.get("BuildConfiguration") != null && !jsonObj.get("BuildConfiguration").isJsonNull()) {
        CreateApplicationVersionMessageBuildConfiguration.validateJsonElement(jsonObj.get("BuildConfiguration"));
      }
      // validate the optional field `AutoCreateApplication`
      if (jsonObj.get("AutoCreateApplication") != null && !jsonObj.get("AutoCreateApplication").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoCreateApplication"));
      }
      // validate the optional field `Process`
      if (jsonObj.get("Process") != null && !jsonObj.get("Process").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Process"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApplicationVersionMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApplicationVersionMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApplicationVersionMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApplicationVersionMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApplicationVersionMessage>() {
           @Override
           public void write(JsonWriter out, CreateApplicationVersionMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApplicationVersionMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApplicationVersionMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApplicationVersionMessage
   * @throws IOException if the JSON string is invalid with respect to CreateApplicationVersionMessage
   */
  public static CreateApplicationVersionMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApplicationVersionMessage.class);
  }

  /**
   * Convert an instance of CreateApplicationVersionMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

