/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary information about a platform branch.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlatformBranchSummary {
  public static final String SERIALIZED_NAME_PLATFORM_NAME = "PlatformName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_NAME)
  private String platformName;

  public static final String SERIALIZED_NAME_BRANCH_NAME = "BranchName";
  @SerializedName(SERIALIZED_NAME_BRANCH_NAME)
  private String branchName;

  public static final String SERIALIZED_NAME_LIFECYCLE_STATE = "LifecycleState";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_STATE)
  private String lifecycleState;

  public static final String SERIALIZED_NAME_BRANCH_ORDER = "BranchOrder";
  @SerializedName(SERIALIZED_NAME_BRANCH_ORDER)
  private Integer branchOrder;

  public static final String SERIALIZED_NAME_SUPPORTED_TIER_LIST = "SupportedTierList";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_TIER_LIST)
  private List supportedTierList;

  public PlatformBranchSummary() {
  }

  public PlatformBranchSummary platformName(String platformName) {
    this.platformName = platformName;
    return this;
  }

  /**
   * Get platformName
   * @return platformName
   */
  @javax.annotation.Nullable
  public String getPlatformName() {
    return platformName;
  }

  public void setPlatformName(String platformName) {
    this.platformName = platformName;
  }


  public PlatformBranchSummary branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

  /**
   * Get branchName
   * @return branchName
   */
  @javax.annotation.Nullable
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }


  public PlatformBranchSummary lifecycleState(String lifecycleState) {
    this.lifecycleState = lifecycleState;
    return this;
  }

  /**
   * Get lifecycleState
   * @return lifecycleState
   */
  @javax.annotation.Nullable
  public String getLifecycleState() {
    return lifecycleState;
  }

  public void setLifecycleState(String lifecycleState) {
    this.lifecycleState = lifecycleState;
  }


  public PlatformBranchSummary branchOrder(Integer branchOrder) {
    this.branchOrder = branchOrder;
    return this;
  }

  /**
   * Get branchOrder
   * @return branchOrder
   */
  @javax.annotation.Nullable
  public Integer getBranchOrder() {
    return branchOrder;
  }

  public void setBranchOrder(Integer branchOrder) {
    this.branchOrder = branchOrder;
  }


  public PlatformBranchSummary supportedTierList(List supportedTierList) {
    this.supportedTierList = supportedTierList;
    return this;
  }

  /**
   * Get supportedTierList
   * @return supportedTierList
   */
  @javax.annotation.Nullable
  public List getSupportedTierList() {
    return supportedTierList;
  }

  public void setSupportedTierList(List supportedTierList) {
    this.supportedTierList = supportedTierList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlatformBranchSummary platformBranchSummary = (PlatformBranchSummary) o;
    return Objects.equals(this.platformName, platformBranchSummary.platformName) &&
        Objects.equals(this.branchName, platformBranchSummary.branchName) &&
        Objects.equals(this.lifecycleState, platformBranchSummary.lifecycleState) &&
        Objects.equals(this.branchOrder, platformBranchSummary.branchOrder) &&
        Objects.equals(this.supportedTierList, platformBranchSummary.supportedTierList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platformName, branchName, lifecycleState, branchOrder, supportedTierList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlatformBranchSummary {\n");
    sb.append("    platformName: ").append(toIndentedString(platformName)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    lifecycleState: ").append(toIndentedString(lifecycleState)).append("\n");
    sb.append("    branchOrder: ").append(toIndentedString(branchOrder)).append("\n");
    sb.append("    supportedTierList: ").append(toIndentedString(supportedTierList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PlatformName");
    openapiFields.add("BranchName");
    openapiFields.add("LifecycleState");
    openapiFields.add("BranchOrder");
    openapiFields.add("SupportedTierList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlatformBranchSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlatformBranchSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlatformBranchSummary is not found in the empty JSON string", PlatformBranchSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlatformBranchSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlatformBranchSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PlatformName`
      if (jsonObj.get("PlatformName") != null && !jsonObj.get("PlatformName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformName"));
      }
      // validate the optional field `BranchName`
      if (jsonObj.get("BranchName") != null && !jsonObj.get("BranchName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BranchName"));
      }
      // validate the optional field `LifecycleState`
      if (jsonObj.get("LifecycleState") != null && !jsonObj.get("LifecycleState").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LifecycleState"));
      }
      // validate the optional field `BranchOrder`
      if (jsonObj.get("BranchOrder") != null && !jsonObj.get("BranchOrder").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BranchOrder"));
      }
      // validate the optional field `SupportedTierList`
      if (jsonObj.get("SupportedTierList") != null && !jsonObj.get("SupportedTierList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedTierList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlatformBranchSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlatformBranchSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlatformBranchSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlatformBranchSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PlatformBranchSummary>() {
           @Override
           public void write(JsonWriter out, PlatformBranchSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlatformBranchSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlatformBranchSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlatformBranchSummary
   * @throws IOException if the JSON string is invalid with respect to PlatformBranchSummary
   */
  public static PlatformBranchSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlatformBranchSummary.class);
  }

  /**
   * Convert an instance of PlatformBranchSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

