/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ActionHistoryStatus;
import org.openapitools.client.model.ActionType;
import org.openapitools.client.model.FailureType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The record of a completed or failed managed action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedActionHistoryItem {
  public static final String SERIALIZED_NAME_ACTION_ID = "ActionId";
  @SerializedName(SERIALIZED_NAME_ACTION_ID)
  private String actionId;

  public static final String SERIALIZED_NAME_ACTION_TYPE = "ActionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private ActionType actionType;

  public static final String SERIALIZED_NAME_ACTION_DESCRIPTION = "ActionDescription";
  @SerializedName(SERIALIZED_NAME_ACTION_DESCRIPTION)
  private String actionDescription;

  public static final String SERIALIZED_NAME_FAILURE_TYPE = "FailureType";
  @SerializedName(SERIALIZED_NAME_FAILURE_TYPE)
  private FailureType failureType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ActionHistoryStatus status;

  public static final String SERIALIZED_NAME_FAILURE_DESCRIPTION = "FailureDescription";
  @SerializedName(SERIALIZED_NAME_FAILURE_DESCRIPTION)
  private String failureDescription;

  public static final String SERIALIZED_NAME_EXECUTED_TIME = "ExecutedTime";
  @SerializedName(SERIALIZED_NAME_EXECUTED_TIME)
  private OffsetDateTime executedTime;

  public static final String SERIALIZED_NAME_FINISHED_TIME = "FinishedTime";
  @SerializedName(SERIALIZED_NAME_FINISHED_TIME)
  private OffsetDateTime finishedTime;

  public ManagedActionHistoryItem() {
  }

  public ManagedActionHistoryItem actionId(String actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * Get actionId
   * @return actionId
   */
  @javax.annotation.Nullable
  public String getActionId() {
    return actionId;
  }

  public void setActionId(String actionId) {
    this.actionId = actionId;
  }


  public ManagedActionHistoryItem actionType(ActionType actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Get actionType
   * @return actionType
   */
  @javax.annotation.Nullable
  public ActionType getActionType() {
    return actionType;
  }

  public void setActionType(ActionType actionType) {
    this.actionType = actionType;
  }


  public ManagedActionHistoryItem actionDescription(String actionDescription) {
    this.actionDescription = actionDescription;
    return this;
  }

  /**
   * Get actionDescription
   * @return actionDescription
   */
  @javax.annotation.Nullable
  public String getActionDescription() {
    return actionDescription;
  }

  public void setActionDescription(String actionDescription) {
    this.actionDescription = actionDescription;
  }


  public ManagedActionHistoryItem failureType(FailureType failureType) {
    this.failureType = failureType;
    return this;
  }

  /**
   * Get failureType
   * @return failureType
   */
  @javax.annotation.Nullable
  public FailureType getFailureType() {
    return failureType;
  }

  public void setFailureType(FailureType failureType) {
    this.failureType = failureType;
  }


  public ManagedActionHistoryItem status(ActionHistoryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ActionHistoryStatus getStatus() {
    return status;
  }

  public void setStatus(ActionHistoryStatus status) {
    this.status = status;
  }


  public ManagedActionHistoryItem failureDescription(String failureDescription) {
    this.failureDescription = failureDescription;
    return this;
  }

  /**
   * Get failureDescription
   * @return failureDescription
   */
  @javax.annotation.Nullable
  public String getFailureDescription() {
    return failureDescription;
  }

  public void setFailureDescription(String failureDescription) {
    this.failureDescription = failureDescription;
  }


  public ManagedActionHistoryItem executedTime(OffsetDateTime executedTime) {
    this.executedTime = executedTime;
    return this;
  }

  /**
   * Get executedTime
   * @return executedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExecutedTime() {
    return executedTime;
  }

  public void setExecutedTime(OffsetDateTime executedTime) {
    this.executedTime = executedTime;
  }


  public ManagedActionHistoryItem finishedTime(OffsetDateTime finishedTime) {
    this.finishedTime = finishedTime;
    return this;
  }

  /**
   * Get finishedTime
   * @return finishedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinishedTime() {
    return finishedTime;
  }

  public void setFinishedTime(OffsetDateTime finishedTime) {
    this.finishedTime = finishedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedActionHistoryItem managedActionHistoryItem = (ManagedActionHistoryItem) o;
    return Objects.equals(this.actionId, managedActionHistoryItem.actionId) &&
        Objects.equals(this.actionType, managedActionHistoryItem.actionType) &&
        Objects.equals(this.actionDescription, managedActionHistoryItem.actionDescription) &&
        Objects.equals(this.failureType, managedActionHistoryItem.failureType) &&
        Objects.equals(this.status, managedActionHistoryItem.status) &&
        Objects.equals(this.failureDescription, managedActionHistoryItem.failureDescription) &&
        Objects.equals(this.executedTime, managedActionHistoryItem.executedTime) &&
        Objects.equals(this.finishedTime, managedActionHistoryItem.finishedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, actionType, actionDescription, failureType, status, failureDescription, executedTime, finishedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedActionHistoryItem {\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    actionDescription: ").append(toIndentedString(actionDescription)).append("\n");
    sb.append("    failureType: ").append(toIndentedString(failureType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failureDescription: ").append(toIndentedString(failureDescription)).append("\n");
    sb.append("    executedTime: ").append(toIndentedString(executedTime)).append("\n");
    sb.append("    finishedTime: ").append(toIndentedString(finishedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionId");
    openapiFields.add("ActionType");
    openapiFields.add("ActionDescription");
    openapiFields.add("FailureType");
    openapiFields.add("Status");
    openapiFields.add("FailureDescription");
    openapiFields.add("ExecutedTime");
    openapiFields.add("FinishedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedActionHistoryItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedActionHistoryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedActionHistoryItem is not found in the empty JSON string", ManagedActionHistoryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedActionHistoryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedActionHistoryItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActionId`
      if (jsonObj.get("ActionId") != null && !jsonObj.get("ActionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActionId"));
      }
      // validate the optional field `ActionType`
      if (jsonObj.get("ActionType") != null && !jsonObj.get("ActionType").isJsonNull()) {
        ActionType.validateJsonElement(jsonObj.get("ActionType"));
      }
      // validate the optional field `ActionDescription`
      if (jsonObj.get("ActionDescription") != null && !jsonObj.get("ActionDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActionDescription"));
      }
      // validate the optional field `FailureType`
      if (jsonObj.get("FailureType") != null && !jsonObj.get("FailureType").isJsonNull()) {
        FailureType.validateJsonElement(jsonObj.get("FailureType"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ActionHistoryStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `FailureDescription`
      if (jsonObj.get("FailureDescription") != null && !jsonObj.get("FailureDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureDescription"));
      }
      // validate the optional field `ExecutedTime`
      if (jsonObj.get("ExecutedTime") != null && !jsonObj.get("ExecutedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ExecutedTime"));
      }
      // validate the optional field `FinishedTime`
      if (jsonObj.get("FinishedTime") != null && !jsonObj.get("FinishedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FinishedTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedActionHistoryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedActionHistoryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedActionHistoryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedActionHistoryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedActionHistoryItem>() {
           @Override
           public void write(JsonWriter out, ManagedActionHistoryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedActionHistoryItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedActionHistoryItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedActionHistoryItem
   * @throws IOException if the JSON string is invalid with respect to ManagedActionHistoryItem
   */
  public static ManagedActionHistoryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedActionHistoryItem.class);
  }

  /**
   * Convert an instance of ManagedActionHistoryItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

