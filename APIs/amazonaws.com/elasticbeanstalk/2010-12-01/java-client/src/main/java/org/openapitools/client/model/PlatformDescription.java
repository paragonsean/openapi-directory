/*
 * AWS Elastic Beanstalk
 * <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes it easy for you to create, deploy, and manage scalable, fault-tolerant applications running on the Amazon Web Services cloud.</p> <p>For more information about this product, go to the <a href=\"http://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> details page. The location of the latest AWS Elastic Beanstalk WSDL is <a href=\"https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl\">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>. To install the Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools that enable you to access the API, go to <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of region-specific endpoints that AWS Elastic Beanstalk supports, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region\">Regions and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlatformStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed information about a platform version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:45.656965-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlatformDescription {
  public static final String SERIALIZED_NAME_PLATFORM_ARN = "PlatformArn";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ARN)
  private String platformArn;

  public static final String SERIALIZED_NAME_PLATFORM_OWNER = "PlatformOwner";
  @SerializedName(SERIALIZED_NAME_PLATFORM_OWNER)
  private String platformOwner;

  public static final String SERIALIZED_NAME_PLATFORM_NAME = "PlatformName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_NAME)
  private String platformName;

  public static final String SERIALIZED_NAME_PLATFORM_VERSION = "PlatformVersion";
  @SerializedName(SERIALIZED_NAME_PLATFORM_VERSION)
  private String platformVersion;

  public static final String SERIALIZED_NAME_SOLUTION_STACK_NAME = "SolutionStackName";
  @SerializedName(SERIALIZED_NAME_SOLUTION_STACK_NAME)
  private String solutionStackName;

  public static final String SERIALIZED_NAME_PLATFORM_STATUS = "PlatformStatus";
  @SerializedName(SERIALIZED_NAME_PLATFORM_STATUS)
  private PlatformStatus platformStatus;

  public static final String SERIALIZED_NAME_DATE_CREATED = "DateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "DateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_PLATFORM_CATEGORY = "PlatformCategory";
  @SerializedName(SERIALIZED_NAME_PLATFORM_CATEGORY)
  private String platformCategory;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MAINTAINER = "Maintainer";
  @SerializedName(SERIALIZED_NAME_MAINTAINER)
  private String maintainer;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM_NAME = "OperatingSystemName";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_NAME)
  private String operatingSystemName;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM_VERSION = "OperatingSystemVersion";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_VERSION)
  private String operatingSystemVersion;

  public static final String SERIALIZED_NAME_PROGRAMMING_LANGUAGES = "ProgrammingLanguages";
  @SerializedName(SERIALIZED_NAME_PROGRAMMING_LANGUAGES)
  private List programmingLanguages;

  public static final String SERIALIZED_NAME_FRAMEWORKS = "Frameworks";
  @SerializedName(SERIALIZED_NAME_FRAMEWORKS)
  private List frameworks;

  public static final String SERIALIZED_NAME_CUSTOM_AMI_LIST = "CustomAmiList";
  @SerializedName(SERIALIZED_NAME_CUSTOM_AMI_LIST)
  private List customAmiList;

  public static final String SERIALIZED_NAME_SUPPORTED_TIER_LIST = "SupportedTierList";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_TIER_LIST)
  private List supportedTierList;

  public static final String SERIALIZED_NAME_SUPPORTED_ADDON_LIST = "SupportedAddonList";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ADDON_LIST)
  private List supportedAddonList;

  public static final String SERIALIZED_NAME_PLATFORM_LIFECYCLE_STATE = "PlatformLifecycleState";
  @SerializedName(SERIALIZED_NAME_PLATFORM_LIFECYCLE_STATE)
  private String platformLifecycleState;

  public static final String SERIALIZED_NAME_PLATFORM_BRANCH_NAME = "PlatformBranchName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_BRANCH_NAME)
  private String platformBranchName;

  public static final String SERIALIZED_NAME_PLATFORM_BRANCH_LIFECYCLE_STATE = "PlatformBranchLifecycleState";
  @SerializedName(SERIALIZED_NAME_PLATFORM_BRANCH_LIFECYCLE_STATE)
  private String platformBranchLifecycleState;

  public PlatformDescription() {
  }

  public PlatformDescription platformArn(String platformArn) {
    this.platformArn = platformArn;
    return this;
  }

  /**
   * Get platformArn
   * @return platformArn
   */
  @javax.annotation.Nullable
  public String getPlatformArn() {
    return platformArn;
  }

  public void setPlatformArn(String platformArn) {
    this.platformArn = platformArn;
  }


  public PlatformDescription platformOwner(String platformOwner) {
    this.platformOwner = platformOwner;
    return this;
  }

  /**
   * Get platformOwner
   * @return platformOwner
   */
  @javax.annotation.Nullable
  public String getPlatformOwner() {
    return platformOwner;
  }

  public void setPlatformOwner(String platformOwner) {
    this.platformOwner = platformOwner;
  }


  public PlatformDescription platformName(String platformName) {
    this.platformName = platformName;
    return this;
  }

  /**
   * Get platformName
   * @return platformName
   */
  @javax.annotation.Nullable
  public String getPlatformName() {
    return platformName;
  }

  public void setPlatformName(String platformName) {
    this.platformName = platformName;
  }


  public PlatformDescription platformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
    return this;
  }

  /**
   * Get platformVersion
   * @return platformVersion
   */
  @javax.annotation.Nullable
  public String getPlatformVersion() {
    return platformVersion;
  }

  public void setPlatformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
  }


  public PlatformDescription solutionStackName(String solutionStackName) {
    this.solutionStackName = solutionStackName;
    return this;
  }

  /**
   * Get solutionStackName
   * @return solutionStackName
   */
  @javax.annotation.Nullable
  public String getSolutionStackName() {
    return solutionStackName;
  }

  public void setSolutionStackName(String solutionStackName) {
    this.solutionStackName = solutionStackName;
  }


  public PlatformDescription platformStatus(PlatformStatus platformStatus) {
    this.platformStatus = platformStatus;
    return this;
  }

  /**
   * Get platformStatus
   * @return platformStatus
   */
  @javax.annotation.Nullable
  public PlatformStatus getPlatformStatus() {
    return platformStatus;
  }

  public void setPlatformStatus(PlatformStatus platformStatus) {
    this.platformStatus = platformStatus;
  }


  public PlatformDescription dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public PlatformDescription dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Get dateUpdated
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public PlatformDescription platformCategory(String platformCategory) {
    this.platformCategory = platformCategory;
    return this;
  }

  /**
   * Get platformCategory
   * @return platformCategory
   */
  @javax.annotation.Nullable
  public String getPlatformCategory() {
    return platformCategory;
  }

  public void setPlatformCategory(String platformCategory) {
    this.platformCategory = platformCategory;
  }


  public PlatformDescription description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PlatformDescription maintainer(String maintainer) {
    this.maintainer = maintainer;
    return this;
  }

  /**
   * Get maintainer
   * @return maintainer
   */
  @javax.annotation.Nullable
  public String getMaintainer() {
    return maintainer;
  }

  public void setMaintainer(String maintainer) {
    this.maintainer = maintainer;
  }


  public PlatformDescription operatingSystemName(String operatingSystemName) {
    this.operatingSystemName = operatingSystemName;
    return this;
  }

  /**
   * Get operatingSystemName
   * @return operatingSystemName
   */
  @javax.annotation.Nullable
  public String getOperatingSystemName() {
    return operatingSystemName;
  }

  public void setOperatingSystemName(String operatingSystemName) {
    this.operatingSystemName = operatingSystemName;
  }


  public PlatformDescription operatingSystemVersion(String operatingSystemVersion) {
    this.operatingSystemVersion = operatingSystemVersion;
    return this;
  }

  /**
   * Get operatingSystemVersion
   * @return operatingSystemVersion
   */
  @javax.annotation.Nullable
  public String getOperatingSystemVersion() {
    return operatingSystemVersion;
  }

  public void setOperatingSystemVersion(String operatingSystemVersion) {
    this.operatingSystemVersion = operatingSystemVersion;
  }


  public PlatformDescription programmingLanguages(List programmingLanguages) {
    this.programmingLanguages = programmingLanguages;
    return this;
  }

  /**
   * Get programmingLanguages
   * @return programmingLanguages
   */
  @javax.annotation.Nullable
  public List getProgrammingLanguages() {
    return programmingLanguages;
  }

  public void setProgrammingLanguages(List programmingLanguages) {
    this.programmingLanguages = programmingLanguages;
  }


  public PlatformDescription frameworks(List frameworks) {
    this.frameworks = frameworks;
    return this;
  }

  /**
   * Get frameworks
   * @return frameworks
   */
  @javax.annotation.Nullable
  public List getFrameworks() {
    return frameworks;
  }

  public void setFrameworks(List frameworks) {
    this.frameworks = frameworks;
  }


  public PlatformDescription customAmiList(List customAmiList) {
    this.customAmiList = customAmiList;
    return this;
  }

  /**
   * Get customAmiList
   * @return customAmiList
   */
  @javax.annotation.Nullable
  public List getCustomAmiList() {
    return customAmiList;
  }

  public void setCustomAmiList(List customAmiList) {
    this.customAmiList = customAmiList;
  }


  public PlatformDescription supportedTierList(List supportedTierList) {
    this.supportedTierList = supportedTierList;
    return this;
  }

  /**
   * Get supportedTierList
   * @return supportedTierList
   */
  @javax.annotation.Nullable
  public List getSupportedTierList() {
    return supportedTierList;
  }

  public void setSupportedTierList(List supportedTierList) {
    this.supportedTierList = supportedTierList;
  }


  public PlatformDescription supportedAddonList(List supportedAddonList) {
    this.supportedAddonList = supportedAddonList;
    return this;
  }

  /**
   * Get supportedAddonList
   * @return supportedAddonList
   */
  @javax.annotation.Nullable
  public List getSupportedAddonList() {
    return supportedAddonList;
  }

  public void setSupportedAddonList(List supportedAddonList) {
    this.supportedAddonList = supportedAddonList;
  }


  public PlatformDescription platformLifecycleState(String platformLifecycleState) {
    this.platformLifecycleState = platformLifecycleState;
    return this;
  }

  /**
   * Get platformLifecycleState
   * @return platformLifecycleState
   */
  @javax.annotation.Nullable
  public String getPlatformLifecycleState() {
    return platformLifecycleState;
  }

  public void setPlatformLifecycleState(String platformLifecycleState) {
    this.platformLifecycleState = platformLifecycleState;
  }


  public PlatformDescription platformBranchName(String platformBranchName) {
    this.platformBranchName = platformBranchName;
    return this;
  }

  /**
   * Get platformBranchName
   * @return platformBranchName
   */
  @javax.annotation.Nullable
  public String getPlatformBranchName() {
    return platformBranchName;
  }

  public void setPlatformBranchName(String platformBranchName) {
    this.platformBranchName = platformBranchName;
  }


  public PlatformDescription platformBranchLifecycleState(String platformBranchLifecycleState) {
    this.platformBranchLifecycleState = platformBranchLifecycleState;
    return this;
  }

  /**
   * Get platformBranchLifecycleState
   * @return platformBranchLifecycleState
   */
  @javax.annotation.Nullable
  public String getPlatformBranchLifecycleState() {
    return platformBranchLifecycleState;
  }

  public void setPlatformBranchLifecycleState(String platformBranchLifecycleState) {
    this.platformBranchLifecycleState = platformBranchLifecycleState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlatformDescription platformDescription = (PlatformDescription) o;
    return Objects.equals(this.platformArn, platformDescription.platformArn) &&
        Objects.equals(this.platformOwner, platformDescription.platformOwner) &&
        Objects.equals(this.platformName, platformDescription.platformName) &&
        Objects.equals(this.platformVersion, platformDescription.platformVersion) &&
        Objects.equals(this.solutionStackName, platformDescription.solutionStackName) &&
        Objects.equals(this.platformStatus, platformDescription.platformStatus) &&
        Objects.equals(this.dateCreated, platformDescription.dateCreated) &&
        Objects.equals(this.dateUpdated, platformDescription.dateUpdated) &&
        Objects.equals(this.platformCategory, platformDescription.platformCategory) &&
        Objects.equals(this.description, platformDescription.description) &&
        Objects.equals(this.maintainer, platformDescription.maintainer) &&
        Objects.equals(this.operatingSystemName, platformDescription.operatingSystemName) &&
        Objects.equals(this.operatingSystemVersion, platformDescription.operatingSystemVersion) &&
        Objects.equals(this.programmingLanguages, platformDescription.programmingLanguages) &&
        Objects.equals(this.frameworks, platformDescription.frameworks) &&
        Objects.equals(this.customAmiList, platformDescription.customAmiList) &&
        Objects.equals(this.supportedTierList, platformDescription.supportedTierList) &&
        Objects.equals(this.supportedAddonList, platformDescription.supportedAddonList) &&
        Objects.equals(this.platformLifecycleState, platformDescription.platformLifecycleState) &&
        Objects.equals(this.platformBranchName, platformDescription.platformBranchName) &&
        Objects.equals(this.platformBranchLifecycleState, platformDescription.platformBranchLifecycleState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platformArn, platformOwner, platformName, platformVersion, solutionStackName, platformStatus, dateCreated, dateUpdated, platformCategory, description, maintainer, operatingSystemName, operatingSystemVersion, programmingLanguages, frameworks, customAmiList, supportedTierList, supportedAddonList, platformLifecycleState, platformBranchName, platformBranchLifecycleState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlatformDescription {\n");
    sb.append("    platformArn: ").append(toIndentedString(platformArn)).append("\n");
    sb.append("    platformOwner: ").append(toIndentedString(platformOwner)).append("\n");
    sb.append("    platformName: ").append(toIndentedString(platformName)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    solutionStackName: ").append(toIndentedString(solutionStackName)).append("\n");
    sb.append("    platformStatus: ").append(toIndentedString(platformStatus)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    platformCategory: ").append(toIndentedString(platformCategory)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    maintainer: ").append(toIndentedString(maintainer)).append("\n");
    sb.append("    operatingSystemName: ").append(toIndentedString(operatingSystemName)).append("\n");
    sb.append("    operatingSystemVersion: ").append(toIndentedString(operatingSystemVersion)).append("\n");
    sb.append("    programmingLanguages: ").append(toIndentedString(programmingLanguages)).append("\n");
    sb.append("    frameworks: ").append(toIndentedString(frameworks)).append("\n");
    sb.append("    customAmiList: ").append(toIndentedString(customAmiList)).append("\n");
    sb.append("    supportedTierList: ").append(toIndentedString(supportedTierList)).append("\n");
    sb.append("    supportedAddonList: ").append(toIndentedString(supportedAddonList)).append("\n");
    sb.append("    platformLifecycleState: ").append(toIndentedString(platformLifecycleState)).append("\n");
    sb.append("    platformBranchName: ").append(toIndentedString(platformBranchName)).append("\n");
    sb.append("    platformBranchLifecycleState: ").append(toIndentedString(platformBranchLifecycleState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PlatformArn");
    openapiFields.add("PlatformOwner");
    openapiFields.add("PlatformName");
    openapiFields.add("PlatformVersion");
    openapiFields.add("SolutionStackName");
    openapiFields.add("PlatformStatus");
    openapiFields.add("DateCreated");
    openapiFields.add("DateUpdated");
    openapiFields.add("PlatformCategory");
    openapiFields.add("Description");
    openapiFields.add("Maintainer");
    openapiFields.add("OperatingSystemName");
    openapiFields.add("OperatingSystemVersion");
    openapiFields.add("ProgrammingLanguages");
    openapiFields.add("Frameworks");
    openapiFields.add("CustomAmiList");
    openapiFields.add("SupportedTierList");
    openapiFields.add("SupportedAddonList");
    openapiFields.add("PlatformLifecycleState");
    openapiFields.add("PlatformBranchName");
    openapiFields.add("PlatformBranchLifecycleState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlatformDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlatformDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlatformDescription is not found in the empty JSON string", PlatformDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlatformDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlatformDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PlatformArn`
      if (jsonObj.get("PlatformArn") != null && !jsonObj.get("PlatformArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformArn"));
      }
      // validate the optional field `PlatformOwner`
      if (jsonObj.get("PlatformOwner") != null && !jsonObj.get("PlatformOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformOwner"));
      }
      // validate the optional field `PlatformName`
      if (jsonObj.get("PlatformName") != null && !jsonObj.get("PlatformName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformName"));
      }
      // validate the optional field `PlatformVersion`
      if (jsonObj.get("PlatformVersion") != null && !jsonObj.get("PlatformVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformVersion"));
      }
      // validate the optional field `SolutionStackName`
      if (jsonObj.get("SolutionStackName") != null && !jsonObj.get("SolutionStackName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SolutionStackName"));
      }
      // validate the optional field `PlatformStatus`
      if (jsonObj.get("PlatformStatus") != null && !jsonObj.get("PlatformStatus").isJsonNull()) {
        PlatformStatus.validateJsonElement(jsonObj.get("PlatformStatus"));
      }
      // validate the optional field `DateCreated`
      if (jsonObj.get("DateCreated") != null && !jsonObj.get("DateCreated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DateCreated"));
      }
      // validate the optional field `DateUpdated`
      if (jsonObj.get("DateUpdated") != null && !jsonObj.get("DateUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DateUpdated"));
      }
      // validate the optional field `PlatformCategory`
      if (jsonObj.get("PlatformCategory") != null && !jsonObj.get("PlatformCategory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformCategory"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Maintainer`
      if (jsonObj.get("Maintainer") != null && !jsonObj.get("Maintainer").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Maintainer"));
      }
      // validate the optional field `OperatingSystemName`
      if (jsonObj.get("OperatingSystemName") != null && !jsonObj.get("OperatingSystemName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OperatingSystemName"));
      }
      // validate the optional field `OperatingSystemVersion`
      if (jsonObj.get("OperatingSystemVersion") != null && !jsonObj.get("OperatingSystemVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OperatingSystemVersion"));
      }
      // validate the optional field `ProgrammingLanguages`
      if (jsonObj.get("ProgrammingLanguages") != null && !jsonObj.get("ProgrammingLanguages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProgrammingLanguages"));
      }
      // validate the optional field `Frameworks`
      if (jsonObj.get("Frameworks") != null && !jsonObj.get("Frameworks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Frameworks"));
      }
      // validate the optional field `CustomAmiList`
      if (jsonObj.get("CustomAmiList") != null && !jsonObj.get("CustomAmiList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CustomAmiList"));
      }
      // validate the optional field `SupportedTierList`
      if (jsonObj.get("SupportedTierList") != null && !jsonObj.get("SupportedTierList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedTierList"));
      }
      // validate the optional field `SupportedAddonList`
      if (jsonObj.get("SupportedAddonList") != null && !jsonObj.get("SupportedAddonList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedAddonList"));
      }
      // validate the optional field `PlatformLifecycleState`
      if (jsonObj.get("PlatformLifecycleState") != null && !jsonObj.get("PlatformLifecycleState").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformLifecycleState"));
      }
      // validate the optional field `PlatformBranchName`
      if (jsonObj.get("PlatformBranchName") != null && !jsonObj.get("PlatformBranchName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformBranchName"));
      }
      // validate the optional field `PlatformBranchLifecycleState`
      if (jsonObj.get("PlatformBranchLifecycleState") != null && !jsonObj.get("PlatformBranchLifecycleState").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlatformBranchLifecycleState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlatformDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlatformDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlatformDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlatformDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<PlatformDescription>() {
           @Override
           public void write(JsonWriter out, PlatformDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlatformDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlatformDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlatformDescription
   * @throws IOException if the JSON string is invalid with respect to PlatformDescription
   */
  public static PlatformDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlatformDescription.class);
  }

  /**
   * Convert an instance of PlatformDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

