# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListRecommendationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Dict[str, str]=None, next_token: str=None, page_size: int=None):
        """ListRecommendationsRequest - a model defined in OpenAPI

        :param filter: The filter of this ListRecommendationsRequest.
        :param next_token: The next_token of this ListRecommendationsRequest.
        :param page_size: The page_size of this ListRecommendationsRequest.
        """
        self.openapi_types = {
            'filter': Dict[str, str],
            'next_token': str,
            'page_size': int
        }

        self.attribute_map = {
            'filter': 'Filter',
            'next_token': 'NextToken',
            'page_size': 'PageSize'
        }

        self._filter = filter
        self._next_token = next_token
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRecommendationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRecommendations_request of this ListRecommendationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this ListRecommendationsRequest.

        An object that contains mapping between <code>ListRecommendationsFilterKey</code> and <code>ListRecommendationFilterValue</code> to filter by.

        :return: The filter of this ListRecommendationsRequest.
        :rtype: Dict[str, str]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ListRecommendationsRequest.

        An object that contains mapping between <code>ListRecommendationsFilterKey</code> and <code>ListRecommendationFilterValue</code> to filter by.

        :param filter: The filter of this ListRecommendationsRequest.
        :type filter: Dict[str, str]
        """
        if filter is not None and len(filter) > 2:
            raise ValueError("Invalid value for `filter`, number of items must be less than or equal to `2`")
        if filter is not None and len(filter) < 1:
            raise ValueError("Invalid value for `filter`, number of items must be greater than or equal to `1`")

        self._filter = filter

    @property
    def next_token(self):
        """Gets the next_token of this ListRecommendationsRequest.

        A token returned from a previous call to <code>ListRecommendations</code> to indicate the position in the list of recommendations.

        :return: The next_token of this ListRecommendationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListRecommendationsRequest.

        A token returned from a previous call to <code>ListRecommendations</code> to indicate the position in the list of recommendations.

        :param next_token: The next_token of this ListRecommendationsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def page_size(self):
        """Gets the page_size of this ListRecommendationsRequest.

        <p>The number of results to show in a single call to <code>ListRecommendations</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 1, and can be no more than 100.</p>

        :return: The page_size of this ListRecommendationsRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ListRecommendationsRequest.

        <p>The number of results to show in a single call to <code>ListRecommendations</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 1, and can be no more than 100.</p>

        :param page_size: The page_size of this ListRecommendationsRequest.
        :type page_size: int
        """

        self._page_size = page_size
