# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_suppressed_destination_response_suppressed_destination import GetSuppressedDestinationResponseSuppressedDestination
from openapi_server import util


class GetSuppressedDestinationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, suppressed_destination: GetSuppressedDestinationResponseSuppressedDestination=None):
        """GetSuppressedDestinationResponse - a model defined in OpenAPI

        :param suppressed_destination: The suppressed_destination of this GetSuppressedDestinationResponse.
        """
        self.openapi_types = {
            'suppressed_destination': GetSuppressedDestinationResponseSuppressedDestination
        }

        self.attribute_map = {
            'suppressed_destination': 'SuppressedDestination'
        }

        self._suppressed_destination = suppressed_destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSuppressedDestinationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSuppressedDestinationResponse of this GetSuppressedDestinationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def suppressed_destination(self):
        """Gets the suppressed_destination of this GetSuppressedDestinationResponse.


        :return: The suppressed_destination of this GetSuppressedDestinationResponse.
        :rtype: GetSuppressedDestinationResponseSuppressedDestination
        """
        return self._suppressed_destination

    @suppressed_destination.setter
    def suppressed_destination(self, suppressed_destination):
        """Sets the suppressed_destination of this GetSuppressedDestinationResponse.


        :param suppressed_destination: The suppressed_destination of this GetSuppressedDestinationResponse.
        :type suppressed_destination: GetSuppressedDestinationResponseSuppressedDestination
        """
        if suppressed_destination is None:
            raise ValueError("Invalid value for `suppressed_destination`, must not be `None`")

        self._suppressed_destination = suppressed_destination
