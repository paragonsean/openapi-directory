# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_impact import RecommendationImpact
from openapi_server.models.recommendation_status import RecommendationStatus
from openapi_server.models.recommendation_type import RecommendationType
from openapi_server import util


class Recommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, type: RecommendationType=None, description: str=None, status: RecommendationStatus=None, created_timestamp: datetime=None, last_updated_timestamp: datetime=None, impact: RecommendationImpact=None):
        """Recommendation - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this Recommendation.
        :param type: The type of this Recommendation.
        :param description: The description of this Recommendation.
        :param status: The status of this Recommendation.
        :param created_timestamp: The created_timestamp of this Recommendation.
        :param last_updated_timestamp: The last_updated_timestamp of this Recommendation.
        :param impact: The impact of this Recommendation.
        """
        self.openapi_types = {
            'resource_arn': str,
            'type': RecommendationType,
            'description': str,
            'status': RecommendationStatus,
            'created_timestamp': datetime,
            'last_updated_timestamp': datetime,
            'impact': RecommendationImpact
        }

        self.attribute_map = {
            'resource_arn': 'ResourceArn',
            'type': 'Type',
            'description': 'Description',
            'status': 'Status',
            'created_timestamp': 'CreatedTimestamp',
            'last_updated_timestamp': 'LastUpdatedTimestamp',
            'impact': 'Impact'
        }

        self._resource_arn = resource_arn
        self._type = type
        self._description = description
        self._status = status
        self._created_timestamp = created_timestamp
        self._last_updated_timestamp = last_updated_timestamp
        self._impact = impact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recommendation of this Recommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this Recommendation.


        :return: The resource_arn of this Recommendation.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this Recommendation.


        :param resource_arn: The resource_arn of this Recommendation.
        :type resource_arn: str
        """

        self._resource_arn = resource_arn

    @property
    def type(self):
        """Gets the type of this Recommendation.


        :return: The type of this Recommendation.
        :rtype: RecommendationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Recommendation.


        :param type: The type of this Recommendation.
        :type type: RecommendationType
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this Recommendation.


        :return: The description of this Recommendation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Recommendation.


        :param description: The description of this Recommendation.
        :type description: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this Recommendation.


        :return: The status of this Recommendation.
        :rtype: RecommendationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Recommendation.


        :param status: The status of this Recommendation.
        :type status: RecommendationStatus
        """

        self._status = status

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Recommendation.


        :return: The created_timestamp of this Recommendation.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Recommendation.


        :param created_timestamp: The created_timestamp of this Recommendation.
        :type created_timestamp: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this Recommendation.


        :return: The last_updated_timestamp of this Recommendation.
        :rtype: datetime
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this Recommendation.


        :param last_updated_timestamp: The last_updated_timestamp of this Recommendation.
        :type last_updated_timestamp: datetime
        """

        self._last_updated_timestamp = last_updated_timestamp

    @property
    def impact(self):
        """Gets the impact of this Recommendation.


        :return: The impact of this Recommendation.
        :rtype: RecommendationImpact
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this Recommendation.


        :param impact: The impact of this Recommendation.
        :type impact: RecommendationImpact
        """

        self._impact = impact
