# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutDedicatedIpWarmupAttributesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, warmup_percentage: int=None):
        """PutDedicatedIpWarmupAttributesRequest - a model defined in OpenAPI

        :param warmup_percentage: The warmup_percentage of this PutDedicatedIpWarmupAttributesRequest.
        """
        self.openapi_types = {
            'warmup_percentage': int
        }

        self.attribute_map = {
            'warmup_percentage': 'WarmupPercentage'
        }

        self._warmup_percentage = warmup_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutDedicatedIpWarmupAttributesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutDedicatedIpWarmupAttributes_request of this PutDedicatedIpWarmupAttributesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def warmup_percentage(self):
        """Gets the warmup_percentage of this PutDedicatedIpWarmupAttributesRequest.

        The warm-up percentage that you want to associate with the dedicated IP address.

        :return: The warmup_percentage of this PutDedicatedIpWarmupAttributesRequest.
        :rtype: int
        """
        return self._warmup_percentage

    @warmup_percentage.setter
    def warmup_percentage(self, warmup_percentage):
        """Sets the warmup_percentage of this PutDedicatedIpWarmupAttributesRequest.

        The warm-up percentage that you want to associate with the dedicated IP address.

        :param warmup_percentage: The warmup_percentage of this PutDedicatedIpWarmupAttributesRequest.
        :type warmup_percentage: int
        """
        if warmup_percentage is None:
            raise ValueError("Invalid value for `warmup_percentage`, must not be `None`")

        self._warmup_percentage = warmup_percentage
