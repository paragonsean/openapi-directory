# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutDedicatedIpPoolScalingAttributesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scaling_mode: str=None):
        """PutDedicatedIpPoolScalingAttributesRequest - a model defined in OpenAPI

        :param scaling_mode: The scaling_mode of this PutDedicatedIpPoolScalingAttributesRequest.
        """
        self.openapi_types = {
            'scaling_mode': str
        }

        self.attribute_map = {
            'scaling_mode': 'ScalingMode'
        }

        self._scaling_mode = scaling_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutDedicatedIpPoolScalingAttributesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutDedicatedIpPoolScalingAttributes_request of this PutDedicatedIpPoolScalingAttributesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scaling_mode(self):
        """Gets the scaling_mode of this PutDedicatedIpPoolScalingAttributesRequest.

        <p>The scaling mode to apply to the dedicated IP pool.</p> <note> <p>Changing the scaling mode from <code>MANAGED</code> to <code>STANDARD</code> is not supported.</p> </note>

        :return: The scaling_mode of this PutDedicatedIpPoolScalingAttributesRequest.
        :rtype: str
        """
        return self._scaling_mode

    @scaling_mode.setter
    def scaling_mode(self, scaling_mode):
        """Sets the scaling_mode of this PutDedicatedIpPoolScalingAttributesRequest.

        <p>The scaling mode to apply to the dedicated IP pool.</p> <note> <p>Changing the scaling mode from <code>MANAGED</code> to <code>STANDARD</code> is not supported.</p> </note>

        :param scaling_mode: The scaling_mode of this PutDedicatedIpPoolScalingAttributesRequest.
        :type scaling_mode: str
        """
        allowed_values = ["STANDARD", "MANAGED"]  # noqa: E501
        if scaling_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `scaling_mode` ({0}), must be one of {1}"
                .format(scaling_mode, allowed_values)
            )

        self._scaling_mode = scaling_mode
