# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_email_template_response_template_content import GetEmailTemplateResponseTemplateContent
from openapi_server import util


class GetEmailTemplateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, template_name: str=None, template_content: GetEmailTemplateResponseTemplateContent=None):
        """GetEmailTemplateResponse - a model defined in OpenAPI

        :param template_name: The template_name of this GetEmailTemplateResponse.
        :param template_content: The template_content of this GetEmailTemplateResponse.
        """
        self.openapi_types = {
            'template_name': str,
            'template_content': GetEmailTemplateResponseTemplateContent
        }

        self.attribute_map = {
            'template_name': 'TemplateName',
            'template_content': 'TemplateContent'
        }

        self._template_name = template_name
        self._template_content = template_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEmailTemplateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetEmailTemplateResponse of this GetEmailTemplateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template_name(self):
        """Gets the template_name of this GetEmailTemplateResponse.


        :return: The template_name of this GetEmailTemplateResponse.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this GetEmailTemplateResponse.


        :param template_name: The template_name of this GetEmailTemplateResponse.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name

    @property
    def template_content(self):
        """Gets the template_content of this GetEmailTemplateResponse.


        :return: The template_content of this GetEmailTemplateResponse.
        :rtype: GetEmailTemplateResponseTemplateContent
        """
        return self._template_content

    @template_content.setter
    def template_content(self, template_content):
        """Sets the template_content of this GetEmailTemplateResponse.


        :param template_content: The template_content of this GetEmailTemplateResponse.
        :type template_content: GetEmailTemplateResponseTemplateContent
        """
        if template_content is None:
            raise ValueError("Invalid value for `template_content`, must not be `None`")

        self._template_content = template_content
