# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_status import SubscriptionStatus
from openapi_server import util


class TopicPreference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic_name: str=None, subscription_status: SubscriptionStatus=None):
        """TopicPreference - a model defined in OpenAPI

        :param topic_name: The topic_name of this TopicPreference.
        :param subscription_status: The subscription_status of this TopicPreference.
        """
        self.openapi_types = {
            'topic_name': str,
            'subscription_status': SubscriptionStatus
        }

        self.attribute_map = {
            'topic_name': 'TopicName',
            'subscription_status': 'SubscriptionStatus'
        }

        self._topic_name = topic_name
        self._subscription_status = subscription_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopicPreference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopicPreference of this TopicPreference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_name(self):
        """Gets the topic_name of this TopicPreference.


        :return: The topic_name of this TopicPreference.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this TopicPreference.


        :param topic_name: The topic_name of this TopicPreference.
        :type topic_name: str
        """
        if topic_name is None:
            raise ValueError("Invalid value for `topic_name`, must not be `None`")

        self._topic_name = topic_name

    @property
    def subscription_status(self):
        """Gets the subscription_status of this TopicPreference.


        :return: The subscription_status of this TopicPreference.
        :rtype: SubscriptionStatus
        """
        return self._subscription_status

    @subscription_status.setter
    def subscription_status(self, subscription_status):
        """Sets the subscription_status of this TopicPreference.


        :param subscription_status: The subscription_status of this TopicPreference.
        :type subscription_status: SubscriptionStatus
        """
        if subscription_status is None:
            raise ValueError("Invalid value for `subscription_status`, must not be `None`")

        self._subscription_status = subscription_status
