# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_email_template_request_template_content import CreateEmailTemplateRequestTemplateContent
from openapi_server import util


class CreateEmailTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, template_name: str=None, template_content: CreateEmailTemplateRequestTemplateContent=None):
        """CreateEmailTemplateRequest - a model defined in OpenAPI

        :param template_name: The template_name of this CreateEmailTemplateRequest.
        :param template_content: The template_content of this CreateEmailTemplateRequest.
        """
        self.openapi_types = {
            'template_name': str,
            'template_content': CreateEmailTemplateRequestTemplateContent
        }

        self.attribute_map = {
            'template_name': 'TemplateName',
            'template_content': 'TemplateContent'
        }

        self._template_name = template_name
        self._template_content = template_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEmailTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEmailTemplate_request of this CreateEmailTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template_name(self):
        """Gets the template_name of this CreateEmailTemplateRequest.

        The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.

        :return: The template_name of this CreateEmailTemplateRequest.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateEmailTemplateRequest.

        The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.

        :param template_name: The template_name of this CreateEmailTemplateRequest.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")
        if template_name is not None and len(template_name) < 1:
            raise ValueError("Invalid value for `template_name`, length must be greater than or equal to `1`")

        self._template_name = template_name

    @property
    def template_content(self):
        """Gets the template_content of this CreateEmailTemplateRequest.


        :return: The template_content of this CreateEmailTemplateRequest.
        :rtype: CreateEmailTemplateRequestTemplateContent
        """
        return self._template_content

    @template_content.setter
    def template_content(self, template_content):
        """Sets the template_content of this CreateEmailTemplateRequest.


        :param template_content: The template_content of this CreateEmailTemplateRequest.
        :type template_content: CreateEmailTemplateRequestTemplateContent
        """
        if template_content is None:
            raise ValueError("Invalid value for `template_content`, must not be `None`")

        self._template_content = template_content
