# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReplacementTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replacement_template_data: str=None):
        """ReplacementTemplate - a model defined in OpenAPI

        :param replacement_template_data: The replacement_template_data of this ReplacementTemplate.
        """
        self.openapi_types = {
            'replacement_template_data': str
        }

        self.attribute_map = {
            'replacement_template_data': 'ReplacementTemplateData'
        }

        self._replacement_template_data = replacement_template_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplacementTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplacementTemplate of this ReplacementTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replacement_template_data(self):
        """Gets the replacement_template_data of this ReplacementTemplate.


        :return: The replacement_template_data of this ReplacementTemplate.
        :rtype: str
        """
        return self._replacement_template_data

    @replacement_template_data.setter
    def replacement_template_data(self, replacement_template_data):
        """Sets the replacement_template_data of this ReplacementTemplate.


        :param replacement_template_data: The replacement_template_data of this ReplacementTemplate.
        :type replacement_template_data: str
        """

        self._replacement_template_data = replacement_template_data
