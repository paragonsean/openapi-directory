# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_status import SubscriptionStatus
from openapi_server import util


class Topic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic_name: str=None, display_name: str=None, description: str=None, default_subscription_status: SubscriptionStatus=None):
        """Topic - a model defined in OpenAPI

        :param topic_name: The topic_name of this Topic.
        :param display_name: The display_name of this Topic.
        :param description: The description of this Topic.
        :param default_subscription_status: The default_subscription_status of this Topic.
        """
        self.openapi_types = {
            'topic_name': str,
            'display_name': str,
            'description': str,
            'default_subscription_status': SubscriptionStatus
        }

        self.attribute_map = {
            'topic_name': 'TopicName',
            'display_name': 'DisplayName',
            'description': 'Description',
            'default_subscription_status': 'DefaultSubscriptionStatus'
        }

        self._topic_name = topic_name
        self._display_name = display_name
        self._description = description
        self._default_subscription_status = default_subscription_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Topic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Topic of this Topic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_name(self):
        """Gets the topic_name of this Topic.


        :return: The topic_name of this Topic.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this Topic.


        :param topic_name: The topic_name of this Topic.
        :type topic_name: str
        """
        if topic_name is None:
            raise ValueError("Invalid value for `topic_name`, must not be `None`")

        self._topic_name = topic_name

    @property
    def display_name(self):
        """Gets the display_name of this Topic.


        :return: The display_name of this Topic.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Topic.


        :param display_name: The display_name of this Topic.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this Topic.


        :return: The description of this Topic.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Topic.


        :param description: The description of this Topic.
        :type description: str
        """

        self._description = description

    @property
    def default_subscription_status(self):
        """Gets the default_subscription_status of this Topic.


        :return: The default_subscription_status of this Topic.
        :rtype: SubscriptionStatus
        """
        return self._default_subscription_status

    @default_subscription_status.setter
    def default_subscription_status(self, default_subscription_status):
        """Sets the default_subscription_status of this Topic.


        :param default_subscription_status: The default_subscription_status of this Topic.
        :type default_subscription_status: SubscriptionStatus
        """
        if default_subscription_status is None:
            raise ValueError("Invalid value for `default_subscription_status`, must not be `None`")

        self._default_subscription_status = default_subscription_status
