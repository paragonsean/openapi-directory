# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_destination import ImportDestination
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class ImportJobSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, import_destination: ImportDestination=None, job_status: JobStatus=None, created_timestamp: datetime=None, processed_records_count: int=None, failed_records_count: int=None):
        """ImportJobSummary - a model defined in OpenAPI

        :param job_id: The job_id of this ImportJobSummary.
        :param import_destination: The import_destination of this ImportJobSummary.
        :param job_status: The job_status of this ImportJobSummary.
        :param created_timestamp: The created_timestamp of this ImportJobSummary.
        :param processed_records_count: The processed_records_count of this ImportJobSummary.
        :param failed_records_count: The failed_records_count of this ImportJobSummary.
        """
        self.openapi_types = {
            'job_id': str,
            'import_destination': ImportDestination,
            'job_status': JobStatus,
            'created_timestamp': datetime,
            'processed_records_count': int,
            'failed_records_count': int
        }

        self.attribute_map = {
            'job_id': 'JobId',
            'import_destination': 'ImportDestination',
            'job_status': 'JobStatus',
            'created_timestamp': 'CreatedTimestamp',
            'processed_records_count': 'ProcessedRecordsCount',
            'failed_records_count': 'FailedRecordsCount'
        }

        self._job_id = job_id
        self._import_destination = import_destination
        self._job_status = job_status
        self._created_timestamp = created_timestamp
        self._processed_records_count = processed_records_count
        self._failed_records_count = failed_records_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportJobSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportJobSummary of this ImportJobSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this ImportJobSummary.

        A string that represents the import job ID.

        :return: The job_id of this ImportJobSummary.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ImportJobSummary.

        A string that represents the import job ID.

        :param job_id: The job_id of this ImportJobSummary.
        :type job_id: str
        """
        if job_id is not None and len(job_id) < 1:
            raise ValueError("Invalid value for `job_id`, length must be greater than or equal to `1`")

        self._job_id = job_id

    @property
    def import_destination(self):
        """Gets the import_destination of this ImportJobSummary.


        :return: The import_destination of this ImportJobSummary.
        :rtype: ImportDestination
        """
        return self._import_destination

    @import_destination.setter
    def import_destination(self, import_destination):
        """Sets the import_destination of this ImportJobSummary.


        :param import_destination: The import_destination of this ImportJobSummary.
        :type import_destination: ImportDestination
        """

        self._import_destination = import_destination

    @property
    def job_status(self):
        """Gets the job_status of this ImportJobSummary.


        :return: The job_status of this ImportJobSummary.
        :rtype: JobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this ImportJobSummary.


        :param job_status: The job_status of this ImportJobSummary.
        :type job_status: JobStatus
        """

        self._job_status = job_status

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ImportJobSummary.


        :return: The created_timestamp of this ImportJobSummary.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ImportJobSummary.


        :param created_timestamp: The created_timestamp of this ImportJobSummary.
        :type created_timestamp: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def processed_records_count(self):
        """Gets the processed_records_count of this ImportJobSummary.


        :return: The processed_records_count of this ImportJobSummary.
        :rtype: int
        """
        return self._processed_records_count

    @processed_records_count.setter
    def processed_records_count(self, processed_records_count):
        """Sets the processed_records_count of this ImportJobSummary.


        :param processed_records_count: The processed_records_count of this ImportJobSummary.
        :type processed_records_count: int
        """

        self._processed_records_count = processed_records_count

    @property
    def failed_records_count(self):
        """Gets the failed_records_count of this ImportJobSummary.


        :return: The failed_records_count of this ImportJobSummary.
        :rtype: int
        """
        return self._failed_records_count

    @failed_records_count.setter
    def failed_records_count(self, failed_records_count):
        """Sets the failed_records_count of this ImportJobSummary.


        :param failed_records_count: The failed_records_count of this ImportJobSummary.
        :type failed_records_count: int
        """

        self._failed_records_count = failed_records_count
