# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetBlacklistReportsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blacklist_report: Dict=None):
        """GetBlacklistReportsResponse - a model defined in OpenAPI

        :param blacklist_report: The blacklist_report of this GetBlacklistReportsResponse.
        """
        self.openapi_types = {
            'blacklist_report': Dict
        }

        self.attribute_map = {
            'blacklist_report': 'BlacklistReport'
        }

        self._blacklist_report = blacklist_report

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetBlacklistReportsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetBlacklistReportsResponse of this GetBlacklistReportsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blacklist_report(self):
        """Gets the blacklist_report of this GetBlacklistReportsResponse.


        :return: The blacklist_report of this GetBlacklistReportsResponse.
        :rtype: Dict
        """
        return self._blacklist_report

    @blacklist_report.setter
    def blacklist_report(self, blacklist_report):
        """Sets the blacklist_report of this GetBlacklistReportsResponse.


        :param blacklist_report: The blacklist_report of this GetBlacklistReportsResponse.
        :type blacklist_report: Dict
        """
        if blacklist_report is None:
            raise ValueError("Invalid value for `blacklist_report`, must not be `None`")

        self._blacklist_report = blacklist_report
