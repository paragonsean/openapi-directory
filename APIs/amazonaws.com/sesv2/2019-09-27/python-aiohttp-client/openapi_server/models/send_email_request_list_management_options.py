# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendEmailRequestListManagementOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_list_name: str=None, topic_name: str=None):
        """SendEmailRequestListManagementOptions - a model defined in OpenAPI

        :param contact_list_name: The contact_list_name of this SendEmailRequestListManagementOptions.
        :param topic_name: The topic_name of this SendEmailRequestListManagementOptions.
        """
        self.openapi_types = {
            'contact_list_name': str,
            'topic_name': str
        }

        self.attribute_map = {
            'contact_list_name': 'ContactListName',
            'topic_name': 'TopicName'
        }

        self._contact_list_name = contact_list_name
        self._topic_name = topic_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendEmailRequestListManagementOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendEmailRequest_ListManagementOptions of this SendEmailRequestListManagementOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_list_name(self):
        """Gets the contact_list_name of this SendEmailRequestListManagementOptions.


        :return: The contact_list_name of this SendEmailRequestListManagementOptions.
        :rtype: str
        """
        return self._contact_list_name

    @contact_list_name.setter
    def contact_list_name(self, contact_list_name):
        """Sets the contact_list_name of this SendEmailRequestListManagementOptions.


        :param contact_list_name: The contact_list_name of this SendEmailRequestListManagementOptions.
        :type contact_list_name: str
        """
        if contact_list_name is None:
            raise ValueError("Invalid value for `contact_list_name`, must not be `None`")

        self._contact_list_name = contact_list_name

    @property
    def topic_name(self):
        """Gets the topic_name of this SendEmailRequestListManagementOptions.


        :return: The topic_name of this SendEmailRequestListManagementOptions.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this SendEmailRequestListManagementOptions.


        :param topic_name: The topic_name of this SendEmailRequestListManagementOptions.
        :type topic_name: str
        """

        self._topic_name = topic_name
