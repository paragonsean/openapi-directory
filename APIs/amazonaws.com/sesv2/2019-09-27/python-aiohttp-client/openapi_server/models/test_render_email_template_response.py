# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestRenderEmailTemplateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rendered_template: str=None):
        """TestRenderEmailTemplateResponse - a model defined in OpenAPI

        :param rendered_template: The rendered_template of this TestRenderEmailTemplateResponse.
        """
        self.openapi_types = {
            'rendered_template': str
        }

        self.attribute_map = {
            'rendered_template': 'RenderedTemplate'
        }

        self._rendered_template = rendered_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestRenderEmailTemplateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestRenderEmailTemplateResponse of this TestRenderEmailTemplateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rendered_template(self):
        """Gets the rendered_template of this TestRenderEmailTemplateResponse.


        :return: The rendered_template of this TestRenderEmailTemplateResponse.
        :rtype: str
        """
        return self._rendered_template

    @rendered_template.setter
    def rendered_template(self, rendered_template):
        """Sets the rendered_template of this TestRenderEmailTemplateResponse.


        :param rendered_template: The rendered_template of this TestRenderEmailTemplateResponse.
        :type rendered_template: str
        """
        if rendered_template is None:
            raise ValueError("Invalid value for `rendered_template`, must not be `None`")

        self._rendered_template = rendered_template
