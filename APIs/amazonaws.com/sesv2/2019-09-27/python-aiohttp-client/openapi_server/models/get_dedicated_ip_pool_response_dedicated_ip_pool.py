# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scaling_mode import ScalingMode
from openapi_server import util


class GetDedicatedIpPoolResponseDedicatedIpPool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pool_name: str=None, scaling_mode: ScalingMode=None):
        """GetDedicatedIpPoolResponseDedicatedIpPool - a model defined in OpenAPI

        :param pool_name: The pool_name of this GetDedicatedIpPoolResponseDedicatedIpPool.
        :param scaling_mode: The scaling_mode of this GetDedicatedIpPoolResponseDedicatedIpPool.
        """
        self.openapi_types = {
            'pool_name': str,
            'scaling_mode': ScalingMode
        }

        self.attribute_map = {
            'pool_name': 'PoolName',
            'scaling_mode': 'ScalingMode'
        }

        self._pool_name = pool_name
        self._scaling_mode = scaling_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDedicatedIpPoolResponseDedicatedIpPool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDedicatedIpPoolResponse_DedicatedIpPool of this GetDedicatedIpPoolResponseDedicatedIpPool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pool_name(self):
        """Gets the pool_name of this GetDedicatedIpPoolResponseDedicatedIpPool.


        :return: The pool_name of this GetDedicatedIpPoolResponseDedicatedIpPool.
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this GetDedicatedIpPoolResponseDedicatedIpPool.


        :param pool_name: The pool_name of this GetDedicatedIpPoolResponseDedicatedIpPool.
        :type pool_name: str
        """
        if pool_name is None:
            raise ValueError("Invalid value for `pool_name`, must not be `None`")

        self._pool_name = pool_name

    @property
    def scaling_mode(self):
        """Gets the scaling_mode of this GetDedicatedIpPoolResponseDedicatedIpPool.


        :return: The scaling_mode of this GetDedicatedIpPoolResponseDedicatedIpPool.
        :rtype: ScalingMode
        """
        return self._scaling_mode

    @scaling_mode.setter
    def scaling_mode(self, scaling_mode):
        """Sets the scaling_mode of this GetDedicatedIpPoolResponseDedicatedIpPool.


        :param scaling_mode: The scaling_mode of this GetDedicatedIpPoolResponseDedicatedIpPool.
        :type scaling_mode: ScalingMode
        """
        if scaling_mode is None:
            raise ValueError("Invalid value for `scaling_mode`, must not be `None`")

        self._scaling_mode = scaling_mode
