# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.topic_preference import TopicPreference
from openapi_server import util


class UpdateContactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic_preferences: List[TopicPreference]=None, unsubscribe_all: bool=None, attributes_data: str=None):
        """UpdateContactRequest - a model defined in OpenAPI

        :param topic_preferences: The topic_preferences of this UpdateContactRequest.
        :param unsubscribe_all: The unsubscribe_all of this UpdateContactRequest.
        :param attributes_data: The attributes_data of this UpdateContactRequest.
        """
        self.openapi_types = {
            'topic_preferences': List[TopicPreference],
            'unsubscribe_all': bool,
            'attributes_data': str
        }

        self.attribute_map = {
            'topic_preferences': 'TopicPreferences',
            'unsubscribe_all': 'UnsubscribeAll',
            'attributes_data': 'AttributesData'
        }

        self._topic_preferences = topic_preferences
        self._unsubscribe_all = unsubscribe_all
        self._attributes_data = attributes_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContact_request of this UpdateContactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_preferences(self):
        """Gets the topic_preferences of this UpdateContactRequest.

        The contact's preference for being opted-in to or opted-out of a topic.

        :return: The topic_preferences of this UpdateContactRequest.
        :rtype: List[TopicPreference]
        """
        return self._topic_preferences

    @topic_preferences.setter
    def topic_preferences(self, topic_preferences):
        """Sets the topic_preferences of this UpdateContactRequest.

        The contact's preference for being opted-in to or opted-out of a topic.

        :param topic_preferences: The topic_preferences of this UpdateContactRequest.
        :type topic_preferences: List[TopicPreference]
        """

        self._topic_preferences = topic_preferences

    @property
    def unsubscribe_all(self):
        """Gets the unsubscribe_all of this UpdateContactRequest.

        A boolean value status noting if the contact is unsubscribed from all contact list topics.

        :return: The unsubscribe_all of this UpdateContactRequest.
        :rtype: bool
        """
        return self._unsubscribe_all

    @unsubscribe_all.setter
    def unsubscribe_all(self, unsubscribe_all):
        """Sets the unsubscribe_all of this UpdateContactRequest.

        A boolean value status noting if the contact is unsubscribed from all contact list topics.

        :param unsubscribe_all: The unsubscribe_all of this UpdateContactRequest.
        :type unsubscribe_all: bool
        """

        self._unsubscribe_all = unsubscribe_all

    @property
    def attributes_data(self):
        """Gets the attributes_data of this UpdateContactRequest.

        The attribute data attached to a contact.

        :return: The attributes_data of this UpdateContactRequest.
        :rtype: str
        """
        return self._attributes_data

    @attributes_data.setter
    def attributes_data(self, attributes_data):
        """Sets the attributes_data of this UpdateContactRequest.

        The attribute data attached to a contact.

        :param attributes_data: The attributes_data of this UpdateContactRequest.
        :type attributes_data: str
        """

        self._attributes_data = attributes_data
