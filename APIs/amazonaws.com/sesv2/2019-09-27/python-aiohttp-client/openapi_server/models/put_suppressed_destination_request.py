# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutSuppressedDestinationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, reason: str=None):
        """PutSuppressedDestinationRequest - a model defined in OpenAPI

        :param email_address: The email_address of this PutSuppressedDestinationRequest.
        :param reason: The reason of this PutSuppressedDestinationRequest.
        """
        self.openapi_types = {
            'email_address': str,
            'reason': str
        }

        self.attribute_map = {
            'email_address': 'EmailAddress',
            'reason': 'Reason'
        }

        self._email_address = email_address
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutSuppressedDestinationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutSuppressedDestination_request of this PutSuppressedDestinationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this PutSuppressedDestinationRequest.

        The email address that should be added to the suppression list for your account.

        :return: The email_address of this PutSuppressedDestinationRequest.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this PutSuppressedDestinationRequest.

        The email address that should be added to the suppression list for your account.

        :param email_address: The email_address of this PutSuppressedDestinationRequest.
        :type email_address: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")

        self._email_address = email_address

    @property
    def reason(self):
        """Gets the reason of this PutSuppressedDestinationRequest.

        <p>The reason that the address was added to the suppression list for your account. The value can be one of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.</p> </li> </ul>

        :return: The reason of this PutSuppressedDestinationRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this PutSuppressedDestinationRequest.

        <p>The reason that the address was added to the suppression list for your account. The value can be one of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.</p> </li> </ul>

        :param reason: The reason of this PutSuppressedDestinationRequest.
        :type reason: str
        """
        allowed_values = ["BOUNCE", "COMPLAINT"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
