# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListContactsRequestFilterTopicFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic_name: str=None, use_default_if_preference_unavailable: bool=None):
        """ListContactsRequestFilterTopicFilter - a model defined in OpenAPI

        :param topic_name: The topic_name of this ListContactsRequestFilterTopicFilter.
        :param use_default_if_preference_unavailable: The use_default_if_preference_unavailable of this ListContactsRequestFilterTopicFilter.
        """
        self.openapi_types = {
            'topic_name': str,
            'use_default_if_preference_unavailable': bool
        }

        self.attribute_map = {
            'topic_name': 'TopicName',
            'use_default_if_preference_unavailable': 'UseDefaultIfPreferenceUnavailable'
        }

        self._topic_name = topic_name
        self._use_default_if_preference_unavailable = use_default_if_preference_unavailable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListContactsRequestFilterTopicFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListContacts_request_Filter_TopicFilter of this ListContactsRequestFilterTopicFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_name(self):
        """Gets the topic_name of this ListContactsRequestFilterTopicFilter.


        :return: The topic_name of this ListContactsRequestFilterTopicFilter.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this ListContactsRequestFilterTopicFilter.


        :param topic_name: The topic_name of this ListContactsRequestFilterTopicFilter.
        :type topic_name: str
        """

        self._topic_name = topic_name

    @property
    def use_default_if_preference_unavailable(self):
        """Gets the use_default_if_preference_unavailable of this ListContactsRequestFilterTopicFilter.


        :return: The use_default_if_preference_unavailable of this ListContactsRequestFilterTopicFilter.
        :rtype: bool
        """
        return self._use_default_if_preference_unavailable

    @use_default_if_preference_unavailable.setter
    def use_default_if_preference_unavailable(self, use_default_if_preference_unavailable):
        """Sets the use_default_if_preference_unavailable of this ListContactsRequestFilterTopicFilter.


        :param use_default_if_preference_unavailable: The use_default_if_preference_unavailable of this ListContactsRequestFilterTopicFilter.
        :type use_default_if_preference_unavailable: bool
        """

        self._use_default_if_preference_unavailable = use_default_if_preference_unavailable
