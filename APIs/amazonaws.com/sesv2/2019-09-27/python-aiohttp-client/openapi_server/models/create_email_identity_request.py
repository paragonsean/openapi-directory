# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_email_identity_request_dkim_signing_attributes import CreateEmailIdentityRequestDkimSigningAttributes
from openapi_server.models.tag import Tag
from openapi_server import util


class CreateEmailIdentityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_identity: str=None, tags: List[Tag]=None, dkim_signing_attributes: CreateEmailIdentityRequestDkimSigningAttributes=None, configuration_set_name: str=None):
        """CreateEmailIdentityRequest - a model defined in OpenAPI

        :param email_identity: The email_identity of this CreateEmailIdentityRequest.
        :param tags: The tags of this CreateEmailIdentityRequest.
        :param dkim_signing_attributes: The dkim_signing_attributes of this CreateEmailIdentityRequest.
        :param configuration_set_name: The configuration_set_name of this CreateEmailIdentityRequest.
        """
        self.openapi_types = {
            'email_identity': str,
            'tags': List[Tag],
            'dkim_signing_attributes': CreateEmailIdentityRequestDkimSigningAttributes,
            'configuration_set_name': str
        }

        self.attribute_map = {
            'email_identity': 'EmailIdentity',
            'tags': 'Tags',
            'dkim_signing_attributes': 'DkimSigningAttributes',
            'configuration_set_name': 'ConfigurationSetName'
        }

        self._email_identity = email_identity
        self._tags = tags
        self._dkim_signing_attributes = dkim_signing_attributes
        self._configuration_set_name = configuration_set_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEmailIdentityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEmailIdentity_request of this CreateEmailIdentityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_identity(self):
        """Gets the email_identity of this CreateEmailIdentityRequest.

        The email address or domain to verify.

        :return: The email_identity of this CreateEmailIdentityRequest.
        :rtype: str
        """
        return self._email_identity

    @email_identity.setter
    def email_identity(self, email_identity):
        """Sets the email_identity of this CreateEmailIdentityRequest.

        The email address or domain to verify.

        :param email_identity: The email_identity of this CreateEmailIdentityRequest.
        :type email_identity: str
        """
        if email_identity is None:
            raise ValueError("Invalid value for `email_identity`, must not be `None`")
        if email_identity is not None and len(email_identity) < 1:
            raise ValueError("Invalid value for `email_identity`, length must be greater than or equal to `1`")

        self._email_identity = email_identity

    @property
    def tags(self):
        """Gets the tags of this CreateEmailIdentityRequest.

        An array of objects that define the tags (keys and values) to associate with the email identity.

        :return: The tags of this CreateEmailIdentityRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEmailIdentityRequest.

        An array of objects that define the tags (keys and values) to associate with the email identity.

        :param tags: The tags of this CreateEmailIdentityRequest.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def dkim_signing_attributes(self):
        """Gets the dkim_signing_attributes of this CreateEmailIdentityRequest.


        :return: The dkim_signing_attributes of this CreateEmailIdentityRequest.
        :rtype: CreateEmailIdentityRequestDkimSigningAttributes
        """
        return self._dkim_signing_attributes

    @dkim_signing_attributes.setter
    def dkim_signing_attributes(self, dkim_signing_attributes):
        """Sets the dkim_signing_attributes of this CreateEmailIdentityRequest.


        :param dkim_signing_attributes: The dkim_signing_attributes of this CreateEmailIdentityRequest.
        :type dkim_signing_attributes: CreateEmailIdentityRequestDkimSigningAttributes
        """

        self._dkim_signing_attributes = dkim_signing_attributes

    @property
    def configuration_set_name(self):
        """Gets the configuration_set_name of this CreateEmailIdentityRequest.

        <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>

        :return: The configuration_set_name of this CreateEmailIdentityRequest.
        :rtype: str
        """
        return self._configuration_set_name

    @configuration_set_name.setter
    def configuration_set_name(self, configuration_set_name):
        """Sets the configuration_set_name of this CreateEmailIdentityRequest.

        <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>

        :param configuration_set_name: The configuration_set_name of this CreateEmailIdentityRequest.
        :type configuration_set_name: str
        """

        self._configuration_set_name = configuration_set_name
