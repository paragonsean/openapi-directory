# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric import Metric
from openapi_server.models.metric_namespace import MetricNamespace
from openapi_server import util


class BatchGetMetricDataQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, namespace: MetricNamespace=None, metric: Metric=None, dimensions: Dict=None, start_date: datetime=None, end_date: datetime=None):
        """BatchGetMetricDataQuery - a model defined in OpenAPI

        :param id: The id of this BatchGetMetricDataQuery.
        :param namespace: The namespace of this BatchGetMetricDataQuery.
        :param metric: The metric of this BatchGetMetricDataQuery.
        :param dimensions: The dimensions of this BatchGetMetricDataQuery.
        :param start_date: The start_date of this BatchGetMetricDataQuery.
        :param end_date: The end_date of this BatchGetMetricDataQuery.
        """
        self.openapi_types = {
            'id': str,
            'namespace': MetricNamespace,
            'metric': Metric,
            'dimensions': Dict,
            'start_date': datetime,
            'end_date': datetime
        }

        self.attribute_map = {
            'id': 'Id',
            'namespace': 'Namespace',
            'metric': 'Metric',
            'dimensions': 'Dimensions',
            'start_date': 'StartDate',
            'end_date': 'EndDate'
        }

        self._id = id
        self._namespace = namespace
        self._metric = metric
        self._dimensions = dimensions
        self._start_date = start_date
        self._end_date = end_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetMetricDataQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetMetricDataQuery of this BatchGetMetricDataQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BatchGetMetricDataQuery.


        :return: The id of this BatchGetMetricDataQuery.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BatchGetMetricDataQuery.


        :param id: The id of this BatchGetMetricDataQuery.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this BatchGetMetricDataQuery.


        :return: The namespace of this BatchGetMetricDataQuery.
        :rtype: MetricNamespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this BatchGetMetricDataQuery.


        :param namespace: The namespace of this BatchGetMetricDataQuery.
        :type namespace: MetricNamespace
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def metric(self):
        """Gets the metric of this BatchGetMetricDataQuery.


        :return: The metric of this BatchGetMetricDataQuery.
        :rtype: Metric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this BatchGetMetricDataQuery.


        :param metric: The metric of this BatchGetMetricDataQuery.
        :type metric: Metric
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def dimensions(self):
        """Gets the dimensions of this BatchGetMetricDataQuery.


        :return: The dimensions of this BatchGetMetricDataQuery.
        :rtype: Dict
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this BatchGetMetricDataQuery.


        :param dimensions: The dimensions of this BatchGetMetricDataQuery.
        :type dimensions: Dict
        """

        self._dimensions = dimensions

    @property
    def start_date(self):
        """Gets the start_date of this BatchGetMetricDataQuery.


        :return: The start_date of this BatchGetMetricDataQuery.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BatchGetMetricDataQuery.


        :param start_date: The start_date of this BatchGetMetricDataQuery.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this BatchGetMetricDataQuery.


        :return: The end_date of this BatchGetMetricDataQuery.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this BatchGetMetricDataQuery.


        :param end_date: The end_date of this BatchGetMetricDataQuery.
        :type end_date: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date
