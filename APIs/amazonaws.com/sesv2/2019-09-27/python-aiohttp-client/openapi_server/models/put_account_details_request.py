# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutAccountDetailsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mail_type: str=None, website_url: str=None, contact_language: str=None, use_case_description: str=None, additional_contact_email_addresses: List[str]=None, production_access_enabled: bool=None):
        """PutAccountDetailsRequest - a model defined in OpenAPI

        :param mail_type: The mail_type of this PutAccountDetailsRequest.
        :param website_url: The website_url of this PutAccountDetailsRequest.
        :param contact_language: The contact_language of this PutAccountDetailsRequest.
        :param use_case_description: The use_case_description of this PutAccountDetailsRequest.
        :param additional_contact_email_addresses: The additional_contact_email_addresses of this PutAccountDetailsRequest.
        :param production_access_enabled: The production_access_enabled of this PutAccountDetailsRequest.
        """
        self.openapi_types = {
            'mail_type': str,
            'website_url': str,
            'contact_language': str,
            'use_case_description': str,
            'additional_contact_email_addresses': List[str],
            'production_access_enabled': bool
        }

        self.attribute_map = {
            'mail_type': 'MailType',
            'website_url': 'WebsiteURL',
            'contact_language': 'ContactLanguage',
            'use_case_description': 'UseCaseDescription',
            'additional_contact_email_addresses': 'AdditionalContactEmailAddresses',
            'production_access_enabled': 'ProductionAccessEnabled'
        }

        self._mail_type = mail_type
        self._website_url = website_url
        self._contact_language = contact_language
        self._use_case_description = use_case_description
        self._additional_contact_email_addresses = additional_contact_email_addresses
        self._production_access_enabled = production_access_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutAccountDetailsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutAccountDetails_request of this PutAccountDetailsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mail_type(self):
        """Gets the mail_type of this PutAccountDetailsRequest.

        The type of email your account will send.

        :return: The mail_type of this PutAccountDetailsRequest.
        :rtype: str
        """
        return self._mail_type

    @mail_type.setter
    def mail_type(self, mail_type):
        """Sets the mail_type of this PutAccountDetailsRequest.

        The type of email your account will send.

        :param mail_type: The mail_type of this PutAccountDetailsRequest.
        :type mail_type: str
        """
        allowed_values = ["MARKETING", "TRANSACTIONAL"]  # noqa: E501
        if mail_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mail_type` ({0}), must be one of {1}"
                .format(mail_type, allowed_values)
            )

        self._mail_type = mail_type

    @property
    def website_url(self):
        """Gets the website_url of this PutAccountDetailsRequest.

        The URL of your website. This information helps us better understand the type of content that you plan to send.

        :return: The website_url of this PutAccountDetailsRequest.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this PutAccountDetailsRequest.

        The URL of your website. This information helps us better understand the type of content that you plan to send.

        :param website_url: The website_url of this PutAccountDetailsRequest.
        :type website_url: str
        """
        if website_url is None:
            raise ValueError("Invalid value for `website_url`, must not be `None`")
        if website_url is not None and len(website_url) > 1000:
            raise ValueError("Invalid value for `website_url`, length must be less than or equal to `1000`")
        if website_url is not None and len(website_url) < 1:
            raise ValueError("Invalid value for `website_url`, length must be greater than or equal to `1`")
        if website_url is not None and not re.search(r'^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?', website_url):
            raise ValueError("Invalid value for `website_url`, must be a follow pattern or equal to `/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/`")

        self._website_url = website_url

    @property
    def contact_language(self):
        """Gets the contact_language of this PutAccountDetailsRequest.

        The language you would prefer to be contacted with.

        :return: The contact_language of this PutAccountDetailsRequest.
        :rtype: str
        """
        return self._contact_language

    @contact_language.setter
    def contact_language(self, contact_language):
        """Sets the contact_language of this PutAccountDetailsRequest.

        The language you would prefer to be contacted with.

        :param contact_language: The contact_language of this PutAccountDetailsRequest.
        :type contact_language: str
        """
        allowed_values = ["EN", "JA"]  # noqa: E501
        if contact_language not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_language` ({0}), must be one of {1}"
                .format(contact_language, allowed_values)
            )

        self._contact_language = contact_language

    @property
    def use_case_description(self):
        """Gets the use_case_description of this PutAccountDetailsRequest.

        A description of the types of email that you plan to send.

        :return: The use_case_description of this PutAccountDetailsRequest.
        :rtype: str
        """
        return self._use_case_description

    @use_case_description.setter
    def use_case_description(self, use_case_description):
        """Sets the use_case_description of this PutAccountDetailsRequest.

        A description of the types of email that you plan to send.

        :param use_case_description: The use_case_description of this PutAccountDetailsRequest.
        :type use_case_description: str
        """
        if use_case_description is None:
            raise ValueError("Invalid value for `use_case_description`, must not be `None`")
        if use_case_description is not None and len(use_case_description) > 5000:
            raise ValueError("Invalid value for `use_case_description`, length must be less than or equal to `5000`")
        if use_case_description is not None and len(use_case_description) < 1:
            raise ValueError("Invalid value for `use_case_description`, length must be greater than or equal to `1`")

        self._use_case_description = use_case_description

    @property
    def additional_contact_email_addresses(self):
        """Gets the additional_contact_email_addresses of this PutAccountDetailsRequest.

        Additional email addresses that you would like to be notified regarding Amazon SES matters.

        :return: The additional_contact_email_addresses of this PutAccountDetailsRequest.
        :rtype: List[str]
        """
        return self._additional_contact_email_addresses

    @additional_contact_email_addresses.setter
    def additional_contact_email_addresses(self, additional_contact_email_addresses):
        """Sets the additional_contact_email_addresses of this PutAccountDetailsRequest.

        Additional email addresses that you would like to be notified regarding Amazon SES matters.

        :param additional_contact_email_addresses: The additional_contact_email_addresses of this PutAccountDetailsRequest.
        :type additional_contact_email_addresses: List[str]
        """
        if additional_contact_email_addresses is not None and len(additional_contact_email_addresses) > 4:
            raise ValueError("Invalid value for `additional_contact_email_addresses`, number of items must be less than or equal to `4`")
        if additional_contact_email_addresses is not None and len(additional_contact_email_addresses) < 1:
            raise ValueError("Invalid value for `additional_contact_email_addresses`, number of items must be greater than or equal to `1`")

        self._additional_contact_email_addresses = additional_contact_email_addresses

    @property
    def production_access_enabled(self):
        """Gets the production_access_enabled of this PutAccountDetailsRequest.

        <p>Indicates whether or not your account should have production access in the current Amazon Web Services Region.</p> <p>If the value is <code>false</code>, then your account is in the <i>sandbox</i>. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1.</p> <p>If the value is <code>true</code>, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.</p>

        :return: The production_access_enabled of this PutAccountDetailsRequest.
        :rtype: bool
        """
        return self._production_access_enabled

    @production_access_enabled.setter
    def production_access_enabled(self, production_access_enabled):
        """Sets the production_access_enabled of this PutAccountDetailsRequest.

        <p>Indicates whether or not your account should have production access in the current Amazon Web Services Region.</p> <p>If the value is <code>false</code>, then your account is in the <i>sandbox</i>. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1.</p> <p>If the value is <code>true</code>, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.</p>

        :param production_access_enabled: The production_access_enabled of this PutAccountDetailsRequest.
        :type production_access_enabled: bool
        """

        self._production_access_enabled = production_access_enabled
