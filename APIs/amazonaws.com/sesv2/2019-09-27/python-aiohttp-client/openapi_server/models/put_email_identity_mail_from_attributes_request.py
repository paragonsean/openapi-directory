# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutEmailIdentityMailFromAttributesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mail_from_domain: str=None, behavior_on_mx_failure: str=None):
        """PutEmailIdentityMailFromAttributesRequest - a model defined in OpenAPI

        :param mail_from_domain: The mail_from_domain of this PutEmailIdentityMailFromAttributesRequest.
        :param behavior_on_mx_failure: The behavior_on_mx_failure of this PutEmailIdentityMailFromAttributesRequest.
        """
        self.openapi_types = {
            'mail_from_domain': str,
            'behavior_on_mx_failure': str
        }

        self.attribute_map = {
            'mail_from_domain': 'MailFromDomain',
            'behavior_on_mx_failure': 'BehaviorOnMxFailure'
        }

        self._mail_from_domain = mail_from_domain
        self._behavior_on_mx_failure = behavior_on_mx_failure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutEmailIdentityMailFromAttributesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutEmailIdentityMailFromAttributes_request of this PutEmailIdentityMailFromAttributesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mail_from_domain(self):
        """Gets the mail_from_domain of this PutEmailIdentityMailFromAttributesRequest.

        The domain to use as a MAIL FROM domain.

        :return: The mail_from_domain of this PutEmailIdentityMailFromAttributesRequest.
        :rtype: str
        """
        return self._mail_from_domain

    @mail_from_domain.setter
    def mail_from_domain(self, mail_from_domain):
        """Sets the mail_from_domain of this PutEmailIdentityMailFromAttributesRequest.

        The domain to use as a MAIL FROM domain.

        :param mail_from_domain: The mail_from_domain of this PutEmailIdentityMailFromAttributesRequest.
        :type mail_from_domain: str
        """

        self._mail_from_domain = mail_from_domain

    @property
    def behavior_on_mx_failure(self):
        """Gets the behavior_on_mx_failure of this PutEmailIdentityMailFromAttributesRequest.

        <p>The action to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>

        :return: The behavior_on_mx_failure of this PutEmailIdentityMailFromAttributesRequest.
        :rtype: str
        """
        return self._behavior_on_mx_failure

    @behavior_on_mx_failure.setter
    def behavior_on_mx_failure(self, behavior_on_mx_failure):
        """Sets the behavior_on_mx_failure of this PutEmailIdentityMailFromAttributesRequest.

        <p>The action to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>

        :param behavior_on_mx_failure: The behavior_on_mx_failure of this PutEmailIdentityMailFromAttributesRequest.
        :type behavior_on_mx_failure: str
        """
        allowed_values = ["USE_DEFAULT_VALUE", "REJECT_MESSAGE"]  # noqa: E501
        if behavior_on_mx_failure not in allowed_values:
            raise ValueError(
                "Invalid value for `behavior_on_mx_failure` ({0}), must be one of {1}"
                .format(behavior_on_mx_failure, allowed_values)
            )

        self._behavior_on_mx_failure = behavior_on_mx_failure
