# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListImportJobsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, import_destination_type: str=None):
        """ListImportJobsRequest - a model defined in OpenAPI

        :param import_destination_type: The import_destination_type of this ListImportJobsRequest.
        """
        self.openapi_types = {
            'import_destination_type': str
        }

        self.attribute_map = {
            'import_destination_type': 'ImportDestinationType'
        }

        self._import_destination_type = import_destination_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListImportJobsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListImportJobs_request of this ListImportJobsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def import_destination_type(self):
        """Gets the import_destination_type of this ListImportJobsRequest.

        The destination of the import job, which can be used to list import jobs that have a certain <code>ImportDestinationType</code>.

        :return: The import_destination_type of this ListImportJobsRequest.
        :rtype: str
        """
        return self._import_destination_type

    @import_destination_type.setter
    def import_destination_type(self, import_destination_type):
        """Sets the import_destination_type of this ListImportJobsRequest.

        The destination of the import job, which can be used to list import jobs that have a certain <code>ImportDestinationType</code>.

        :param import_destination_type: The import_destination_type of this ListImportJobsRequest.
        :type import_destination_type: str
        """
        allowed_values = ["SUPPRESSION_LIST", "CONTACT_LIST"]  # noqa: E501
        if import_destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `import_destination_type` ({0}), must be one of {1}"
                .format(import_destination_type, allowed_values)
            )

        self._import_destination_type = import_destination_type
