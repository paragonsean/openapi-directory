# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_get_metric_data_query import BatchGetMetricDataQuery
from openapi_server import util


class BatchGetMetricDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queries: List[BatchGetMetricDataQuery]=None):
        """BatchGetMetricDataRequest - a model defined in OpenAPI

        :param queries: The queries of this BatchGetMetricDataRequest.
        """
        self.openapi_types = {
            'queries': List[BatchGetMetricDataQuery]
        }

        self.attribute_map = {
            'queries': 'Queries'
        }

        self._queries = queries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetMetricDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetMetricData_request of this BatchGetMetricDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queries(self):
        """Gets the queries of this BatchGetMetricDataRequest.

        A list of queries for metrics to be retrieved.

        :return: The queries of this BatchGetMetricDataRequest.
        :rtype: List[BatchGetMetricDataQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this BatchGetMetricDataRequest.

        A list of queries for metrics to be retrieved.

        :param queries: The queries of this BatchGetMetricDataRequest.
        :type queries: List[BatchGetMetricDataQuery]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")
        if queries is not None and len(queries) > 10:
            raise ValueError("Invalid value for `queries`, number of items must be less than or equal to `10`")
        if queries is not None and len(queries) < 1:
            raise ValueError("Invalid value for `queries`, number of items must be greater than or equal to `1`")

        self._queries = queries
