/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage_Body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage_Body::OAIMessage_Body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage_Body::OAIMessage_Body() {
    this->initializeModel();
}

OAIMessage_Body::~OAIMessage_Body() {}

void OAIMessage_Body::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;
}

void OAIMessage_Body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage_Body::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("Html")]);
    m_html_isSet = !json[QString("Html")].isNull() && m_html_isValid;
}

QString OAIMessage_Body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage_Body::asJsonObject() const {
    QJsonObject obj;
    if (m_text.isSet()) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_html.isSet()) {
        obj.insert(QString("Html"), ::OpenAPI::toJsonValue(m_html));
    }
    return obj;
}

OAIBody_Text OAIMessage_Body::getText() const {
    return m_text;
}
void OAIMessage_Body::setText(const OAIBody_Text &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessage_Body::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessage_Body::is_text_Valid() const{
    return m_text_isValid;
}

OAIBody_Html OAIMessage_Body::getHtml() const {
    return m_html;
}
void OAIMessage_Body::setHtml(const OAIBody_Html &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIMessage_Body::is_html_Set() const{
    return m_html_isSet;
}

bool OAIMessage_Body::is_html_Valid() const{
    return m_html_isValid;
}

bool OAIMessage_Body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage_Body::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
