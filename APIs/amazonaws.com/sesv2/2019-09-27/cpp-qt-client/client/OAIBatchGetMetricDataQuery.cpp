/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetMetricDataQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetMetricDataQuery::OAIBatchGetMetricDataQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetMetricDataQuery::OAIBatchGetMetricDataQuery() {
    this->initializeModel();
}

OAIBatchGetMetricDataQuery::~OAIBatchGetMetricDataQuery() {}

void OAIBatchGetMetricDataQuery::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;
}

void OAIBatchGetMetricDataQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetMetricDataQuery::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("Metric")]);
    m_metric_isSet = !json[QString("Metric")].isNull() && m_metric_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;
}

QString OAIBatchGetMetricDataQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetMetricDataQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_r_namespace.isSet()) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("Metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    return obj;
}

QString OAIBatchGetMetricDataQuery::getId() const {
    return m_id;
}
void OAIBatchGetMetricDataQuery::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBatchGetMetricDataQuery::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBatchGetMetricDataQuery::is_id_Valid() const{
    return m_id_isValid;
}

OAIMetricNamespace OAIBatchGetMetricDataQuery::getRNamespace() const {
    return m_r_namespace;
}
void OAIBatchGetMetricDataQuery::setRNamespace(const OAIMetricNamespace &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIBatchGetMetricDataQuery::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIBatchGetMetricDataQuery::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

OAIMetric OAIBatchGetMetricDataQuery::getMetric() const {
    return m_metric;
}
void OAIBatchGetMetricDataQuery::setMetric(const OAIMetric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIBatchGetMetricDataQuery::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIBatchGetMetricDataQuery::is_metric_Valid() const{
    return m_metric_isValid;
}

QMap OAIBatchGetMetricDataQuery::getDimensions() const {
    return m_dimensions;
}
void OAIBatchGetMetricDataQuery::setDimensions(const QMap &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIBatchGetMetricDataQuery::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIBatchGetMetricDataQuery::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QDateTime OAIBatchGetMetricDataQuery::getStartDate() const {
    return m_start_date;
}
void OAIBatchGetMetricDataQuery::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIBatchGetMetricDataQuery::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIBatchGetMetricDataQuery::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIBatchGetMetricDataQuery::getEndDate() const {
    return m_end_date;
}
void OAIBatchGetMetricDataQuery::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIBatchGetMetricDataQuery::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIBatchGetMetricDataQuery::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIBatchGetMetricDataQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetMetricDataQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_r_namespace_isValid && m_metric_isValid && m_start_date_isValid && m_end_date_isValid && true;
}

} // namespace OpenAPI
