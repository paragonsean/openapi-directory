/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDedicatedIpResponse_DedicatedIp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDedicatedIpResponse_DedicatedIp::OAIGetDedicatedIpResponse_DedicatedIp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDedicatedIpResponse_DedicatedIp::OAIGetDedicatedIpResponse_DedicatedIp() {
    this->initializeModel();
}

OAIGetDedicatedIpResponse_DedicatedIp::~OAIGetDedicatedIpResponse_DedicatedIp() {}

void OAIGetDedicatedIpResponse_DedicatedIp::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_warmup_status_isSet = false;
    m_warmup_status_isValid = false;

    m_warmup_percentage_isSet = false;
    m_warmup_percentage_isValid = false;

    m_pool_name_isSet = false;
    m_pool_name_isValid = false;
}

void OAIGetDedicatedIpResponse_DedicatedIp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDedicatedIpResponse_DedicatedIp::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("Ip")]);
    m_ip_isSet = !json[QString("Ip")].isNull() && m_ip_isValid;

    m_warmup_status_isValid = ::OpenAPI::fromJsonValue(m_warmup_status, json[QString("WarmupStatus")]);
    m_warmup_status_isSet = !json[QString("WarmupStatus")].isNull() && m_warmup_status_isValid;

    m_warmup_percentage_isValid = ::OpenAPI::fromJsonValue(m_warmup_percentage, json[QString("WarmupPercentage")]);
    m_warmup_percentage_isSet = !json[QString("WarmupPercentage")].isNull() && m_warmup_percentage_isValid;

    m_pool_name_isValid = ::OpenAPI::fromJsonValue(m_pool_name, json[QString("PoolName")]);
    m_pool_name_isSet = !json[QString("PoolName")].isNull() && m_pool_name_isValid;
}

QString OAIGetDedicatedIpResponse_DedicatedIp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDedicatedIpResponse_DedicatedIp::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("Ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_warmup_status.isSet()) {
        obj.insert(QString("WarmupStatus"), ::OpenAPI::toJsonValue(m_warmup_status));
    }
    if (m_warmup_percentage_isSet) {
        obj.insert(QString("WarmupPercentage"), ::OpenAPI::toJsonValue(m_warmup_percentage));
    }
    if (m_pool_name_isSet) {
        obj.insert(QString("PoolName"), ::OpenAPI::toJsonValue(m_pool_name));
    }
    return obj;
}

QString OAIGetDedicatedIpResponse_DedicatedIp::getIp() const {
    return m_ip;
}
void OAIGetDedicatedIpResponse_DedicatedIp::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::is_ip_Valid() const{
    return m_ip_isValid;
}

OAIWarmupStatus OAIGetDedicatedIpResponse_DedicatedIp::getWarmupStatus() const {
    return m_warmup_status;
}
void OAIGetDedicatedIpResponse_DedicatedIp::setWarmupStatus(const OAIWarmupStatus &warmup_status) {
    m_warmup_status = warmup_status;
    m_warmup_status_isSet = true;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::is_warmup_status_Set() const{
    return m_warmup_status_isSet;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::is_warmup_status_Valid() const{
    return m_warmup_status_isValid;
}

qint32 OAIGetDedicatedIpResponse_DedicatedIp::getWarmupPercentage() const {
    return m_warmup_percentage;
}
void OAIGetDedicatedIpResponse_DedicatedIp::setWarmupPercentage(const qint32 &warmup_percentage) {
    m_warmup_percentage = warmup_percentage;
    m_warmup_percentage_isSet = true;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::is_warmup_percentage_Set() const{
    return m_warmup_percentage_isSet;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::is_warmup_percentage_Valid() const{
    return m_warmup_percentage_isValid;
}

QString OAIGetDedicatedIpResponse_DedicatedIp::getPoolName() const {
    return m_pool_name;
}
void OAIGetDedicatedIpResponse_DedicatedIp::setPoolName(const QString &pool_name) {
    m_pool_name = pool_name;
    m_pool_name_isSet = true;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::is_pool_name_Set() const{
    return m_pool_name_isSet;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::is_pool_name_Valid() const{
    return m_pool_name_isValid;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warmup_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warmup_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDedicatedIpResponse_DedicatedIp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ip_isValid && m_warmup_status_isValid && m_warmup_percentage_isValid && true;
}

} // namespace OpenAPI
