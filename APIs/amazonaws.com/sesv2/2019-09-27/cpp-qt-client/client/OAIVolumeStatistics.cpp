/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeStatistics::OAIVolumeStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeStatistics::OAIVolumeStatistics() {
    this->initializeModel();
}

OAIVolumeStatistics::~OAIVolumeStatistics() {}

void OAIVolumeStatistics::initializeModel() {

    m_inbox_raw_count_isSet = false;
    m_inbox_raw_count_isValid = false;

    m_spam_raw_count_isSet = false;
    m_spam_raw_count_isValid = false;

    m_projected_inbox_isSet = false;
    m_projected_inbox_isValid = false;

    m_projected_spam_isSet = false;
    m_projected_spam_isValid = false;
}

void OAIVolumeStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeStatistics::fromJsonObject(QJsonObject json) {

    m_inbox_raw_count_isValid = ::OpenAPI::fromJsonValue(m_inbox_raw_count, json[QString("InboxRawCount")]);
    m_inbox_raw_count_isSet = !json[QString("InboxRawCount")].isNull() && m_inbox_raw_count_isValid;

    m_spam_raw_count_isValid = ::OpenAPI::fromJsonValue(m_spam_raw_count, json[QString("SpamRawCount")]);
    m_spam_raw_count_isSet = !json[QString("SpamRawCount")].isNull() && m_spam_raw_count_isValid;

    m_projected_inbox_isValid = ::OpenAPI::fromJsonValue(m_projected_inbox, json[QString("ProjectedInbox")]);
    m_projected_inbox_isSet = !json[QString("ProjectedInbox")].isNull() && m_projected_inbox_isValid;

    m_projected_spam_isValid = ::OpenAPI::fromJsonValue(m_projected_spam, json[QString("ProjectedSpam")]);
    m_projected_spam_isSet = !json[QString("ProjectedSpam")].isNull() && m_projected_spam_isValid;
}

QString OAIVolumeStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_inbox_raw_count_isSet) {
        obj.insert(QString("InboxRawCount"), ::OpenAPI::toJsonValue(m_inbox_raw_count));
    }
    if (m_spam_raw_count_isSet) {
        obj.insert(QString("SpamRawCount"), ::OpenAPI::toJsonValue(m_spam_raw_count));
    }
    if (m_projected_inbox_isSet) {
        obj.insert(QString("ProjectedInbox"), ::OpenAPI::toJsonValue(m_projected_inbox));
    }
    if (m_projected_spam_isSet) {
        obj.insert(QString("ProjectedSpam"), ::OpenAPI::toJsonValue(m_projected_spam));
    }
    return obj;
}

qint32 OAIVolumeStatistics::getInboxRawCount() const {
    return m_inbox_raw_count;
}
void OAIVolumeStatistics::setInboxRawCount(const qint32 &inbox_raw_count) {
    m_inbox_raw_count = inbox_raw_count;
    m_inbox_raw_count_isSet = true;
}

bool OAIVolumeStatistics::is_inbox_raw_count_Set() const{
    return m_inbox_raw_count_isSet;
}

bool OAIVolumeStatistics::is_inbox_raw_count_Valid() const{
    return m_inbox_raw_count_isValid;
}

qint32 OAIVolumeStatistics::getSpamRawCount() const {
    return m_spam_raw_count;
}
void OAIVolumeStatistics::setSpamRawCount(const qint32 &spam_raw_count) {
    m_spam_raw_count = spam_raw_count;
    m_spam_raw_count_isSet = true;
}

bool OAIVolumeStatistics::is_spam_raw_count_Set() const{
    return m_spam_raw_count_isSet;
}

bool OAIVolumeStatistics::is_spam_raw_count_Valid() const{
    return m_spam_raw_count_isValid;
}

qint32 OAIVolumeStatistics::getProjectedInbox() const {
    return m_projected_inbox;
}
void OAIVolumeStatistics::setProjectedInbox(const qint32 &projected_inbox) {
    m_projected_inbox = projected_inbox;
    m_projected_inbox_isSet = true;
}

bool OAIVolumeStatistics::is_projected_inbox_Set() const{
    return m_projected_inbox_isSet;
}

bool OAIVolumeStatistics::is_projected_inbox_Valid() const{
    return m_projected_inbox_isValid;
}

qint32 OAIVolumeStatistics::getProjectedSpam() const {
    return m_projected_spam;
}
void OAIVolumeStatistics::setProjectedSpam(const qint32 &projected_spam) {
    m_projected_spam = projected_spam;
    m_projected_spam_isSet = true;
}

bool OAIVolumeStatistics::is_projected_spam_Set() const{
    return m_projected_spam_isSet;
}

bool OAIVolumeStatistics::is_projected_spam_Valid() const{
    return m_projected_spam_isValid;
}

bool OAIVolumeStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inbox_raw_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spam_raw_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_inbox_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_spam_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
