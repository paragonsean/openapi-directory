/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendBulkEmail_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendBulkEmail_request::OAISendBulkEmail_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendBulkEmail_request::OAISendBulkEmail_request() {
    this->initializeModel();
}

OAISendBulkEmail_request::~OAISendBulkEmail_request() {}

void OAISendBulkEmail_request::initializeModel() {

    m_from_email_address_isSet = false;
    m_from_email_address_isValid = false;

    m_from_email_address_identity_arn_isSet = false;
    m_from_email_address_identity_arn_isValid = false;

    m_reply_to_addresses_isSet = false;
    m_reply_to_addresses_isValid = false;

    m_feedback_forwarding_email_address_isSet = false;
    m_feedback_forwarding_email_address_isValid = false;

    m_feedback_forwarding_email_address_identity_arn_isSet = false;
    m_feedback_forwarding_email_address_identity_arn_isValid = false;

    m_default_email_tags_isSet = false;
    m_default_email_tags_isValid = false;

    m_default_content_isSet = false;
    m_default_content_isValid = false;

    m_bulk_email_entries_isSet = false;
    m_bulk_email_entries_isValid = false;

    m_configuration_set_name_isSet = false;
    m_configuration_set_name_isValid = false;
}

void OAISendBulkEmail_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendBulkEmail_request::fromJsonObject(QJsonObject json) {

    m_from_email_address_isValid = ::OpenAPI::fromJsonValue(m_from_email_address, json[QString("FromEmailAddress")]);
    m_from_email_address_isSet = !json[QString("FromEmailAddress")].isNull() && m_from_email_address_isValid;

    m_from_email_address_identity_arn_isValid = ::OpenAPI::fromJsonValue(m_from_email_address_identity_arn, json[QString("FromEmailAddressIdentityArn")]);
    m_from_email_address_identity_arn_isSet = !json[QString("FromEmailAddressIdentityArn")].isNull() && m_from_email_address_identity_arn_isValid;

    m_reply_to_addresses_isValid = ::OpenAPI::fromJsonValue(m_reply_to_addresses, json[QString("ReplyToAddresses")]);
    m_reply_to_addresses_isSet = !json[QString("ReplyToAddresses")].isNull() && m_reply_to_addresses_isValid;

    m_feedback_forwarding_email_address_isValid = ::OpenAPI::fromJsonValue(m_feedback_forwarding_email_address, json[QString("FeedbackForwardingEmailAddress")]);
    m_feedback_forwarding_email_address_isSet = !json[QString("FeedbackForwardingEmailAddress")].isNull() && m_feedback_forwarding_email_address_isValid;

    m_feedback_forwarding_email_address_identity_arn_isValid = ::OpenAPI::fromJsonValue(m_feedback_forwarding_email_address_identity_arn, json[QString("FeedbackForwardingEmailAddressIdentityArn")]);
    m_feedback_forwarding_email_address_identity_arn_isSet = !json[QString("FeedbackForwardingEmailAddressIdentityArn")].isNull() && m_feedback_forwarding_email_address_identity_arn_isValid;

    m_default_email_tags_isValid = ::OpenAPI::fromJsonValue(m_default_email_tags, json[QString("DefaultEmailTags")]);
    m_default_email_tags_isSet = !json[QString("DefaultEmailTags")].isNull() && m_default_email_tags_isValid;

    m_default_content_isValid = ::OpenAPI::fromJsonValue(m_default_content, json[QString("DefaultContent")]);
    m_default_content_isSet = !json[QString("DefaultContent")].isNull() && m_default_content_isValid;

    m_bulk_email_entries_isValid = ::OpenAPI::fromJsonValue(m_bulk_email_entries, json[QString("BulkEmailEntries")]);
    m_bulk_email_entries_isSet = !json[QString("BulkEmailEntries")].isNull() && m_bulk_email_entries_isValid;

    m_configuration_set_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_set_name, json[QString("ConfigurationSetName")]);
    m_configuration_set_name_isSet = !json[QString("ConfigurationSetName")].isNull() && m_configuration_set_name_isValid;
}

QString OAISendBulkEmail_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendBulkEmail_request::asJsonObject() const {
    QJsonObject obj;
    if (m_from_email_address_isSet) {
        obj.insert(QString("FromEmailAddress"), ::OpenAPI::toJsonValue(m_from_email_address));
    }
    if (m_from_email_address_identity_arn_isSet) {
        obj.insert(QString("FromEmailAddressIdentityArn"), ::OpenAPI::toJsonValue(m_from_email_address_identity_arn));
    }
    if (m_reply_to_addresses.size() > 0) {
        obj.insert(QString("ReplyToAddresses"), ::OpenAPI::toJsonValue(m_reply_to_addresses));
    }
    if (m_feedback_forwarding_email_address_isSet) {
        obj.insert(QString("FeedbackForwardingEmailAddress"), ::OpenAPI::toJsonValue(m_feedback_forwarding_email_address));
    }
    if (m_feedback_forwarding_email_address_identity_arn_isSet) {
        obj.insert(QString("FeedbackForwardingEmailAddressIdentityArn"), ::OpenAPI::toJsonValue(m_feedback_forwarding_email_address_identity_arn));
    }
    if (m_default_email_tags.size() > 0) {
        obj.insert(QString("DefaultEmailTags"), ::OpenAPI::toJsonValue(m_default_email_tags));
    }
    if (m_default_content.isSet()) {
        obj.insert(QString("DefaultContent"), ::OpenAPI::toJsonValue(m_default_content));
    }
    if (m_bulk_email_entries.size() > 0) {
        obj.insert(QString("BulkEmailEntries"), ::OpenAPI::toJsonValue(m_bulk_email_entries));
    }
    if (m_configuration_set_name_isSet) {
        obj.insert(QString("ConfigurationSetName"), ::OpenAPI::toJsonValue(m_configuration_set_name));
    }
    return obj;
}

QString OAISendBulkEmail_request::getFromEmailAddress() const {
    return m_from_email_address;
}
void OAISendBulkEmail_request::setFromEmailAddress(const QString &from_email_address) {
    m_from_email_address = from_email_address;
    m_from_email_address_isSet = true;
}

bool OAISendBulkEmail_request::is_from_email_address_Set() const{
    return m_from_email_address_isSet;
}

bool OAISendBulkEmail_request::is_from_email_address_Valid() const{
    return m_from_email_address_isValid;
}

QString OAISendBulkEmail_request::getFromEmailAddressIdentityArn() const {
    return m_from_email_address_identity_arn;
}
void OAISendBulkEmail_request::setFromEmailAddressIdentityArn(const QString &from_email_address_identity_arn) {
    m_from_email_address_identity_arn = from_email_address_identity_arn;
    m_from_email_address_identity_arn_isSet = true;
}

bool OAISendBulkEmail_request::is_from_email_address_identity_arn_Set() const{
    return m_from_email_address_identity_arn_isSet;
}

bool OAISendBulkEmail_request::is_from_email_address_identity_arn_Valid() const{
    return m_from_email_address_identity_arn_isValid;
}

QList<QString> OAISendBulkEmail_request::getReplyToAddresses() const {
    return m_reply_to_addresses;
}
void OAISendBulkEmail_request::setReplyToAddresses(const QList<QString> &reply_to_addresses) {
    m_reply_to_addresses = reply_to_addresses;
    m_reply_to_addresses_isSet = true;
}

bool OAISendBulkEmail_request::is_reply_to_addresses_Set() const{
    return m_reply_to_addresses_isSet;
}

bool OAISendBulkEmail_request::is_reply_to_addresses_Valid() const{
    return m_reply_to_addresses_isValid;
}

QString OAISendBulkEmail_request::getFeedbackForwardingEmailAddress() const {
    return m_feedback_forwarding_email_address;
}
void OAISendBulkEmail_request::setFeedbackForwardingEmailAddress(const QString &feedback_forwarding_email_address) {
    m_feedback_forwarding_email_address = feedback_forwarding_email_address;
    m_feedback_forwarding_email_address_isSet = true;
}

bool OAISendBulkEmail_request::is_feedback_forwarding_email_address_Set() const{
    return m_feedback_forwarding_email_address_isSet;
}

bool OAISendBulkEmail_request::is_feedback_forwarding_email_address_Valid() const{
    return m_feedback_forwarding_email_address_isValid;
}

QString OAISendBulkEmail_request::getFeedbackForwardingEmailAddressIdentityArn() const {
    return m_feedback_forwarding_email_address_identity_arn;
}
void OAISendBulkEmail_request::setFeedbackForwardingEmailAddressIdentityArn(const QString &feedback_forwarding_email_address_identity_arn) {
    m_feedback_forwarding_email_address_identity_arn = feedback_forwarding_email_address_identity_arn;
    m_feedback_forwarding_email_address_identity_arn_isSet = true;
}

bool OAISendBulkEmail_request::is_feedback_forwarding_email_address_identity_arn_Set() const{
    return m_feedback_forwarding_email_address_identity_arn_isSet;
}

bool OAISendBulkEmail_request::is_feedback_forwarding_email_address_identity_arn_Valid() const{
    return m_feedback_forwarding_email_address_identity_arn_isValid;
}

QList<OAIMessageTag> OAISendBulkEmail_request::getDefaultEmailTags() const {
    return m_default_email_tags;
}
void OAISendBulkEmail_request::setDefaultEmailTags(const QList<OAIMessageTag> &default_email_tags) {
    m_default_email_tags = default_email_tags;
    m_default_email_tags_isSet = true;
}

bool OAISendBulkEmail_request::is_default_email_tags_Set() const{
    return m_default_email_tags_isSet;
}

bool OAISendBulkEmail_request::is_default_email_tags_Valid() const{
    return m_default_email_tags_isValid;
}

OAISendBulkEmail_request_DefaultContent OAISendBulkEmail_request::getDefaultContent() const {
    return m_default_content;
}
void OAISendBulkEmail_request::setDefaultContent(const OAISendBulkEmail_request_DefaultContent &default_content) {
    m_default_content = default_content;
    m_default_content_isSet = true;
}

bool OAISendBulkEmail_request::is_default_content_Set() const{
    return m_default_content_isSet;
}

bool OAISendBulkEmail_request::is_default_content_Valid() const{
    return m_default_content_isValid;
}

QList<OAIBulkEmailEntry> OAISendBulkEmail_request::getBulkEmailEntries() const {
    return m_bulk_email_entries;
}
void OAISendBulkEmail_request::setBulkEmailEntries(const QList<OAIBulkEmailEntry> &bulk_email_entries) {
    m_bulk_email_entries = bulk_email_entries;
    m_bulk_email_entries_isSet = true;
}

bool OAISendBulkEmail_request::is_bulk_email_entries_Set() const{
    return m_bulk_email_entries_isSet;
}

bool OAISendBulkEmail_request::is_bulk_email_entries_Valid() const{
    return m_bulk_email_entries_isValid;
}

QString OAISendBulkEmail_request::getConfigurationSetName() const {
    return m_configuration_set_name;
}
void OAISendBulkEmail_request::setConfigurationSetName(const QString &configuration_set_name) {
    m_configuration_set_name = configuration_set_name;
    m_configuration_set_name_isSet = true;
}

bool OAISendBulkEmail_request::is_configuration_set_name_Set() const{
    return m_configuration_set_name_isSet;
}

bool OAISendBulkEmail_request::is_configuration_set_name_Valid() const{
    return m_configuration_set_name_isValid;
}

bool OAISendBulkEmail_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_email_address_identity_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_forwarding_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_forwarding_email_address_identity_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_email_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bulk_email_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendBulkEmail_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_content_isValid && m_bulk_email_entries_isValid && true;
}

} // namespace OpenAPI
