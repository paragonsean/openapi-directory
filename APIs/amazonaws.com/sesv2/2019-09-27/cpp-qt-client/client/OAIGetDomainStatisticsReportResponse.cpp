/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDomainStatisticsReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDomainStatisticsReportResponse::OAIGetDomainStatisticsReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDomainStatisticsReportResponse::OAIGetDomainStatisticsReportResponse() {
    this->initializeModel();
}

OAIGetDomainStatisticsReportResponse::~OAIGetDomainStatisticsReportResponse() {}

void OAIGetDomainStatisticsReportResponse::initializeModel() {

    m_overall_volume_isSet = false;
    m_overall_volume_isValid = false;

    m_daily_volumes_isSet = false;
    m_daily_volumes_isValid = false;
}

void OAIGetDomainStatisticsReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDomainStatisticsReportResponse::fromJsonObject(QJsonObject json) {

    m_overall_volume_isValid = ::OpenAPI::fromJsonValue(m_overall_volume, json[QString("OverallVolume")]);
    m_overall_volume_isSet = !json[QString("OverallVolume")].isNull() && m_overall_volume_isValid;

    m_daily_volumes_isValid = ::OpenAPI::fromJsonValue(m_daily_volumes, json[QString("DailyVolumes")]);
    m_daily_volumes_isSet = !json[QString("DailyVolumes")].isNull() && m_daily_volumes_isValid;
}

QString OAIGetDomainStatisticsReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDomainStatisticsReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_overall_volume.isSet()) {
        obj.insert(QString("OverallVolume"), ::OpenAPI::toJsonValue(m_overall_volume));
    }
    if (m_daily_volumes.isSet()) {
        obj.insert(QString("DailyVolumes"), ::OpenAPI::toJsonValue(m_daily_volumes));
    }
    return obj;
}

OAIGetDomainStatisticsReportResponse_OverallVolume OAIGetDomainStatisticsReportResponse::getOverallVolume() const {
    return m_overall_volume;
}
void OAIGetDomainStatisticsReportResponse::setOverallVolume(const OAIGetDomainStatisticsReportResponse_OverallVolume &overall_volume) {
    m_overall_volume = overall_volume;
    m_overall_volume_isSet = true;
}

bool OAIGetDomainStatisticsReportResponse::is_overall_volume_Set() const{
    return m_overall_volume_isSet;
}

bool OAIGetDomainStatisticsReportResponse::is_overall_volume_Valid() const{
    return m_overall_volume_isValid;
}

QList OAIGetDomainStatisticsReportResponse::getDailyVolumes() const {
    return m_daily_volumes;
}
void OAIGetDomainStatisticsReportResponse::setDailyVolumes(const QList &daily_volumes) {
    m_daily_volumes = daily_volumes;
    m_daily_volumes_isSet = true;
}

bool OAIGetDomainStatisticsReportResponse::is_daily_volumes_Set() const{
    return m_daily_volumes_isSet;
}

bool OAIGetDomainStatisticsReportResponse::is_daily_volumes_Valid() const{
    return m_daily_volumes_isValid;
}

bool OAIGetDomainStatisticsReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_overall_volume.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_volumes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDomainStatisticsReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_overall_volume_isValid && m_daily_volumes_isValid && true;
}

} // namespace OpenAPI
