/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuppressedDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuppressedDestination::OAISuppressedDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuppressedDestination::OAISuppressedDestination() {
    this->initializeModel();
}

OAISuppressedDestination::~OAISuppressedDestination() {}

void OAISuppressedDestination::initializeModel() {

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAISuppressedDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuppressedDestination::fromJsonObject(QJsonObject json) {

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("EmailAddress")]);
    m_email_address_isSet = !json[QString("EmailAddress")].isNull() && m_email_address_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("Reason")]);
    m_reason_isSet = !json[QString("Reason")].isNull() && m_reason_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("LastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("LastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;
}

QString OAISuppressedDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuppressedDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_email_address_isSet) {
        obj.insert(QString("EmailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_reason.isSet()) {
        obj.insert(QString("Reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("LastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAISuppressedDestination::getEmailAddress() const {
    return m_email_address;
}
void OAISuppressedDestination::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAISuppressedDestination::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAISuppressedDestination::is_email_address_Valid() const{
    return m_email_address_isValid;
}

OAISuppressionListReason OAISuppressedDestination::getReason() const {
    return m_reason;
}
void OAISuppressedDestination::setReason(const OAISuppressionListReason &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAISuppressedDestination::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAISuppressedDestination::is_reason_Valid() const{
    return m_reason_isValid;
}

QDateTime OAISuppressedDestination::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAISuppressedDestination::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAISuppressedDestination::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAISuppressedDestination::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

OAISuppressedDestination_Attributes OAISuppressedDestination::getAttributes() const {
    return m_attributes;
}
void OAISuppressedDestination::setAttributes(const OAISuppressedDestination_Attributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISuppressedDestination::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISuppressedDestination::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAISuppressedDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuppressedDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_address_isValid && m_reason_isValid && m_last_update_time_isValid && true;
}

} // namespace OpenAPI
