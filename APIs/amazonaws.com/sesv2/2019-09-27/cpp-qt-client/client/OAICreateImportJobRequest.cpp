/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateImportJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateImportJobRequest::OAICreateImportJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateImportJobRequest::OAICreateImportJobRequest() {
    this->initializeModel();
}

OAICreateImportJobRequest::~OAICreateImportJobRequest() {}

void OAICreateImportJobRequest::initializeModel() {

    m_import_destination_isSet = false;
    m_import_destination_isValid = false;

    m_import_data_source_isSet = false;
    m_import_data_source_isValid = false;
}

void OAICreateImportJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateImportJobRequest::fromJsonObject(QJsonObject json) {

    m_import_destination_isValid = ::OpenAPI::fromJsonValue(m_import_destination, json[QString("ImportDestination")]);
    m_import_destination_isSet = !json[QString("ImportDestination")].isNull() && m_import_destination_isValid;

    m_import_data_source_isValid = ::OpenAPI::fromJsonValue(m_import_data_source, json[QString("ImportDataSource")]);
    m_import_data_source_isSet = !json[QString("ImportDataSource")].isNull() && m_import_data_source_isValid;
}

QString OAICreateImportJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateImportJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_import_destination.isSet()) {
        obj.insert(QString("ImportDestination"), ::OpenAPI::toJsonValue(m_import_destination));
    }
    if (m_import_data_source.isSet()) {
        obj.insert(QString("ImportDataSource"), ::OpenAPI::toJsonValue(m_import_data_source));
    }
    return obj;
}

OAICreateImportJobRequest_ImportDestination OAICreateImportJobRequest::getImportDestination() const {
    return m_import_destination;
}
void OAICreateImportJobRequest::setImportDestination(const OAICreateImportJobRequest_ImportDestination &import_destination) {
    m_import_destination = import_destination;
    m_import_destination_isSet = true;
}

bool OAICreateImportJobRequest::is_import_destination_Set() const{
    return m_import_destination_isSet;
}

bool OAICreateImportJobRequest::is_import_destination_Valid() const{
    return m_import_destination_isValid;
}

OAICreateImportJobRequest_ImportDataSource OAICreateImportJobRequest::getImportDataSource() const {
    return m_import_data_source;
}
void OAICreateImportJobRequest::setImportDataSource(const OAICreateImportJobRequest_ImportDataSource &import_data_source) {
    m_import_data_source = import_data_source;
    m_import_data_source_isSet = true;
}

bool OAICreateImportJobRequest::is_import_data_source_Set() const{
    return m_import_data_source_isSet;
}

bool OAICreateImportJobRequest::is_import_data_source_Valid() const{
    return m_import_data_source_isValid;
}

bool OAICreateImportJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_import_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateImportJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_import_destination_isValid && m_import_data_source_isValid && true;
}

} // namespace OpenAPI
