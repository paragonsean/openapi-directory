/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendation::OAIRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendation::OAIRecommendation() {
    this->initializeModel();
}

OAIRecommendation::~OAIRecommendation() {}

void OAIRecommendation::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_impact_isSet = false;
    m_impact_isValid = false;
}

void OAIRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendation::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_impact_isValid = ::OpenAPI::fromJsonValue(m_impact, json[QString("Impact")]);
    m_impact_isSet = !json[QString("Impact")].isNull() && m_impact_isValid;
}

QString OAIRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_impact.isSet()) {
        obj.insert(QString("Impact"), ::OpenAPI::toJsonValue(m_impact));
    }
    return obj;
}

QString OAIRecommendation::getResourceArn() const {
    return m_resource_arn;
}
void OAIRecommendation::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIRecommendation::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIRecommendation::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAIRecommendationType OAIRecommendation::getType() const {
    return m_type;
}
void OAIRecommendation::setType(const OAIRecommendationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRecommendation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRecommendation::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRecommendation::getDescription() const {
    return m_description;
}
void OAIRecommendation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRecommendation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRecommendation::is_description_Valid() const{
    return m_description_isValid;
}

OAIRecommendationStatus OAIRecommendation::getStatus() const {
    return m_status;
}
void OAIRecommendation::setStatus(const OAIRecommendationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRecommendation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRecommendation::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIRecommendation::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIRecommendation::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIRecommendation::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIRecommendation::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIRecommendation::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIRecommendation::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIRecommendation::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIRecommendation::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

OAIRecommendationImpact OAIRecommendation::getImpact() const {
    return m_impact;
}
void OAIRecommendation::setImpact(const OAIRecommendationImpact &impact) {
    m_impact = impact;
    m_impact_isSet = true;
}

bool OAIRecommendation::is_impact_Set() const{
    return m_impact_isSet;
}

bool OAIRecommendation::is_impact_Valid() const{
    return m_impact_isValid;
}

bool OAIRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
