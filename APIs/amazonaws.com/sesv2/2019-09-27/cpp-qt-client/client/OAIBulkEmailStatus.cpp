/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkEmailStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkEmailStatus::OAIBulkEmailStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkEmailStatus::OAIBulkEmailStatus() {
    this->initializeModel();
}

OAIBulkEmailStatus::~OAIBulkEmailStatus() {}

void OAIBulkEmailStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBulkEmailStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBulkEmailStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SUCCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MESSAGE_REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::MESSAGE_REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAIL_FROM_DOMAIN_NOT_VERIFIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::MAIL_FROM_DOMAIN_NOT_VERIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFIGURATION_SET_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::CONFIGURATION_SET_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEMPLATE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::TEMPLATE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_SUSPENDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::ACCOUNT_SUSPENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_THROTTLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::ACCOUNT_THROTTLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_DAILY_QUOTA_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::ACCOUNT_DAILY_QUOTA_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_SENDING_POOL_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::INVALID_SENDING_POOL_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCOUNT_SENDING_PAUSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::ACCOUNT_SENDING_PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFIGURATION_SET_SENDING_PAUSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::CONFIGURATION_SET_SENDING_PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_PARAMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::INVALID_PARAMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRANSIENT_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::TRANSIENT_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBulkEmailStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBulkEmailStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBulkEmailStatus::SUCCESS:
            val = "SUCCESS";
            break;
        case eOAIBulkEmailStatus::MESSAGE_REJECTED:
            val = "MESSAGE_REJECTED";
            break;
        case eOAIBulkEmailStatus::MAIL_FROM_DOMAIN_NOT_VERIFIED:
            val = "MAIL_FROM_DOMAIN_NOT_VERIFIED";
            break;
        case eOAIBulkEmailStatus::CONFIGURATION_SET_NOT_FOUND:
            val = "CONFIGURATION_SET_NOT_FOUND";
            break;
        case eOAIBulkEmailStatus::TEMPLATE_NOT_FOUND:
            val = "TEMPLATE_NOT_FOUND";
            break;
        case eOAIBulkEmailStatus::ACCOUNT_SUSPENDED:
            val = "ACCOUNT_SUSPENDED";
            break;
        case eOAIBulkEmailStatus::ACCOUNT_THROTTLED:
            val = "ACCOUNT_THROTTLED";
            break;
        case eOAIBulkEmailStatus::ACCOUNT_DAILY_QUOTA_EXCEEDED:
            val = "ACCOUNT_DAILY_QUOTA_EXCEEDED";
            break;
        case eOAIBulkEmailStatus::INVALID_SENDING_POOL_NAME:
            val = "INVALID_SENDING_POOL_NAME";
            break;
        case eOAIBulkEmailStatus::ACCOUNT_SENDING_PAUSED:
            val = "ACCOUNT_SENDING_PAUSED";
            break;
        case eOAIBulkEmailStatus::CONFIGURATION_SET_SENDING_PAUSED:
            val = "CONFIGURATION_SET_SENDING_PAUSED";
            break;
        case eOAIBulkEmailStatus::INVALID_PARAMETER:
            val = "INVALID_PARAMETER";
            break;
        case eOAIBulkEmailStatus::TRANSIENT_FAILURE:
            val = "TRANSIENT_FAILURE";
            break;
        case eOAIBulkEmailStatus::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBulkEmailStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBulkEmailStatus::eOAIBulkEmailStatus OAIBulkEmailStatus::getValue() const {
    return m_value;
}

void OAIBulkEmailStatus::setValue(const OAIBulkEmailStatus::eOAIBulkEmailStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBulkEmailStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIBulkEmailStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
