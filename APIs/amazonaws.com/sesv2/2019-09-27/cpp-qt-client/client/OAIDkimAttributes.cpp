/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDkimAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDkimAttributes::OAIDkimAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDkimAttributes::OAIDkimAttributes() {
    this->initializeModel();
}

OAIDkimAttributes::~OAIDkimAttributes() {}

void OAIDkimAttributes::initializeModel() {

    m_signing_enabled_isSet = false;
    m_signing_enabled_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;

    m_signing_attributes_origin_isSet = false;
    m_signing_attributes_origin_isValid = false;

    m_next_signing_key_length_isSet = false;
    m_next_signing_key_length_isValid = false;

    m_current_signing_key_length_isSet = false;
    m_current_signing_key_length_isValid = false;

    m_last_key_generation_timestamp_isSet = false;
    m_last_key_generation_timestamp_isValid = false;
}

void OAIDkimAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDkimAttributes::fromJsonObject(QJsonObject json) {

    m_signing_enabled_isValid = ::OpenAPI::fromJsonValue(m_signing_enabled, json[QString("SigningEnabled")]);
    m_signing_enabled_isSet = !json[QString("SigningEnabled")].isNull() && m_signing_enabled_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("Tokens")]);
    m_tokens_isSet = !json[QString("Tokens")].isNull() && m_tokens_isValid;

    m_signing_attributes_origin_isValid = ::OpenAPI::fromJsonValue(m_signing_attributes_origin, json[QString("SigningAttributesOrigin")]);
    m_signing_attributes_origin_isSet = !json[QString("SigningAttributesOrigin")].isNull() && m_signing_attributes_origin_isValid;

    m_next_signing_key_length_isValid = ::OpenAPI::fromJsonValue(m_next_signing_key_length, json[QString("NextSigningKeyLength")]);
    m_next_signing_key_length_isSet = !json[QString("NextSigningKeyLength")].isNull() && m_next_signing_key_length_isValid;

    m_current_signing_key_length_isValid = ::OpenAPI::fromJsonValue(m_current_signing_key_length, json[QString("CurrentSigningKeyLength")]);
    m_current_signing_key_length_isSet = !json[QString("CurrentSigningKeyLength")].isNull() && m_current_signing_key_length_isValid;

    m_last_key_generation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_key_generation_timestamp, json[QString("LastKeyGenerationTimestamp")]);
    m_last_key_generation_timestamp_isSet = !json[QString("LastKeyGenerationTimestamp")].isNull() && m_last_key_generation_timestamp_isValid;
}

QString OAIDkimAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDkimAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_signing_enabled_isSet) {
        obj.insert(QString("SigningEnabled"), ::OpenAPI::toJsonValue(m_signing_enabled));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tokens.isSet()) {
        obj.insert(QString("Tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    if (m_signing_attributes_origin.isSet()) {
        obj.insert(QString("SigningAttributesOrigin"), ::OpenAPI::toJsonValue(m_signing_attributes_origin));
    }
    if (m_next_signing_key_length.isSet()) {
        obj.insert(QString("NextSigningKeyLength"), ::OpenAPI::toJsonValue(m_next_signing_key_length));
    }
    if (m_current_signing_key_length.isSet()) {
        obj.insert(QString("CurrentSigningKeyLength"), ::OpenAPI::toJsonValue(m_current_signing_key_length));
    }
    if (m_last_key_generation_timestamp_isSet) {
        obj.insert(QString("LastKeyGenerationTimestamp"), ::OpenAPI::toJsonValue(m_last_key_generation_timestamp));
    }
    return obj;
}

bool OAIDkimAttributes::getSigningEnabled() const {
    return m_signing_enabled;
}
void OAIDkimAttributes::setSigningEnabled(const bool &signing_enabled) {
    m_signing_enabled = signing_enabled;
    m_signing_enabled_isSet = true;
}

bool OAIDkimAttributes::is_signing_enabled_Set() const{
    return m_signing_enabled_isSet;
}

bool OAIDkimAttributes::is_signing_enabled_Valid() const{
    return m_signing_enabled_isValid;
}

OAIDkimStatus OAIDkimAttributes::getStatus() const {
    return m_status;
}
void OAIDkimAttributes::setStatus(const OAIDkimStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDkimAttributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDkimAttributes::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIDkimAttributes::getTokens() const {
    return m_tokens;
}
void OAIDkimAttributes::setTokens(const QList &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAIDkimAttributes::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAIDkimAttributes::is_tokens_Valid() const{
    return m_tokens_isValid;
}

OAIDkimSigningAttributesOrigin OAIDkimAttributes::getSigningAttributesOrigin() const {
    return m_signing_attributes_origin;
}
void OAIDkimAttributes::setSigningAttributesOrigin(const OAIDkimSigningAttributesOrigin &signing_attributes_origin) {
    m_signing_attributes_origin = signing_attributes_origin;
    m_signing_attributes_origin_isSet = true;
}

bool OAIDkimAttributes::is_signing_attributes_origin_Set() const{
    return m_signing_attributes_origin_isSet;
}

bool OAIDkimAttributes::is_signing_attributes_origin_Valid() const{
    return m_signing_attributes_origin_isValid;
}

OAIDkimSigningKeyLength OAIDkimAttributes::getNextSigningKeyLength() const {
    return m_next_signing_key_length;
}
void OAIDkimAttributes::setNextSigningKeyLength(const OAIDkimSigningKeyLength &next_signing_key_length) {
    m_next_signing_key_length = next_signing_key_length;
    m_next_signing_key_length_isSet = true;
}

bool OAIDkimAttributes::is_next_signing_key_length_Set() const{
    return m_next_signing_key_length_isSet;
}

bool OAIDkimAttributes::is_next_signing_key_length_Valid() const{
    return m_next_signing_key_length_isValid;
}

OAIDkimSigningKeyLength OAIDkimAttributes::getCurrentSigningKeyLength() const {
    return m_current_signing_key_length;
}
void OAIDkimAttributes::setCurrentSigningKeyLength(const OAIDkimSigningKeyLength &current_signing_key_length) {
    m_current_signing_key_length = current_signing_key_length;
    m_current_signing_key_length_isSet = true;
}

bool OAIDkimAttributes::is_current_signing_key_length_Set() const{
    return m_current_signing_key_length_isSet;
}

bool OAIDkimAttributes::is_current_signing_key_length_Valid() const{
    return m_current_signing_key_length_isValid;
}

QDateTime OAIDkimAttributes::getLastKeyGenerationTimestamp() const {
    return m_last_key_generation_timestamp;
}
void OAIDkimAttributes::setLastKeyGenerationTimestamp(const QDateTime &last_key_generation_timestamp) {
    m_last_key_generation_timestamp = last_key_generation_timestamp;
    m_last_key_generation_timestamp_isSet = true;
}

bool OAIDkimAttributes::is_last_key_generation_timestamp_Set() const{
    return m_last_key_generation_timestamp_isSet;
}

bool OAIDkimAttributes::is_last_key_generation_timestamp_Valid() const{
    return m_last_key_generation_timestamp_isValid;
}

bool OAIDkimAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_signing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_attributes_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_signing_key_length.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_signing_key_length.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_key_generation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDkimAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
