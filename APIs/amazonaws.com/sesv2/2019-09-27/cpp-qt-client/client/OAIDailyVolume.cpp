/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyVolume::OAIDailyVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyVolume::OAIDailyVolume() {
    this->initializeModel();
}

OAIDailyVolume::~OAIDailyVolume() {}

void OAIDailyVolume::initializeModel() {

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_volume_statistics_isSet = false;
    m_volume_statistics_isValid = false;

    m_domain_isp_placements_isSet = false;
    m_domain_isp_placements_isValid = false;
}

void OAIDailyVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyVolume::fromJsonObject(QJsonObject json) {

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_volume_statistics_isValid = ::OpenAPI::fromJsonValue(m_volume_statistics, json[QString("VolumeStatistics")]);
    m_volume_statistics_isSet = !json[QString("VolumeStatistics")].isNull() && m_volume_statistics_isValid;

    m_domain_isp_placements_isValid = ::OpenAPI::fromJsonValue(m_domain_isp_placements, json[QString("DomainIspPlacements")]);
    m_domain_isp_placements_isSet = !json[QString("DomainIspPlacements")].isNull() && m_domain_isp_placements_isValid;
}

QString OAIDailyVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_volume_statistics.isSet()) {
        obj.insert(QString("VolumeStatistics"), ::OpenAPI::toJsonValue(m_volume_statistics));
    }
    if (m_domain_isp_placements.isSet()) {
        obj.insert(QString("DomainIspPlacements"), ::OpenAPI::toJsonValue(m_domain_isp_placements));
    }
    return obj;
}

QDateTime OAIDailyVolume::getStartDate() const {
    return m_start_date;
}
void OAIDailyVolume::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDailyVolume::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDailyVolume::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIDailyVolume_VolumeStatistics OAIDailyVolume::getVolumeStatistics() const {
    return m_volume_statistics;
}
void OAIDailyVolume::setVolumeStatistics(const OAIDailyVolume_VolumeStatistics &volume_statistics) {
    m_volume_statistics = volume_statistics;
    m_volume_statistics_isSet = true;
}

bool OAIDailyVolume::is_volume_statistics_Set() const{
    return m_volume_statistics_isSet;
}

bool OAIDailyVolume::is_volume_statistics_Valid() const{
    return m_volume_statistics_isValid;
}

QList OAIDailyVolume::getDomainIspPlacements() const {
    return m_domain_isp_placements;
}
void OAIDailyVolume::setDomainIspPlacements(const QList &domain_isp_placements) {
    m_domain_isp_placements = domain_isp_placements;
    m_domain_isp_placements_isSet = true;
}

bool OAIDailyVolume::is_domain_isp_placements_Set() const{
    return m_domain_isp_placements_isSet;
}

bool OAIDailyVolume::is_domain_isp_placements_Valid() const{
    return m_domain_isp_placements_isValid;
}

bool OAIDailyVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isp_placements.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
