/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeliverabilityTestReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeliverabilityTestReportResponse::OAIGetDeliverabilityTestReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeliverabilityTestReportResponse::OAIGetDeliverabilityTestReportResponse() {
    this->initializeModel();
}

OAIGetDeliverabilityTestReportResponse::~OAIGetDeliverabilityTestReportResponse() {}

void OAIGetDeliverabilityTestReportResponse::initializeModel() {

    m_deliverability_test_report_isSet = false;
    m_deliverability_test_report_isValid = false;

    m_overall_placement_isSet = false;
    m_overall_placement_isValid = false;

    m_isp_placements_isSet = false;
    m_isp_placements_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetDeliverabilityTestReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeliverabilityTestReportResponse::fromJsonObject(QJsonObject json) {

    m_deliverability_test_report_isValid = ::OpenAPI::fromJsonValue(m_deliverability_test_report, json[QString("DeliverabilityTestReport")]);
    m_deliverability_test_report_isSet = !json[QString("DeliverabilityTestReport")].isNull() && m_deliverability_test_report_isValid;

    m_overall_placement_isValid = ::OpenAPI::fromJsonValue(m_overall_placement, json[QString("OverallPlacement")]);
    m_overall_placement_isSet = !json[QString("OverallPlacement")].isNull() && m_overall_placement_isValid;

    m_isp_placements_isValid = ::OpenAPI::fromJsonValue(m_isp_placements, json[QString("IspPlacements")]);
    m_isp_placements_isSet = !json[QString("IspPlacements")].isNull() && m_isp_placements_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetDeliverabilityTestReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeliverabilityTestReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_deliverability_test_report.isSet()) {
        obj.insert(QString("DeliverabilityTestReport"), ::OpenAPI::toJsonValue(m_deliverability_test_report));
    }
    if (m_overall_placement.isSet()) {
        obj.insert(QString("OverallPlacement"), ::OpenAPI::toJsonValue(m_overall_placement));
    }
    if (m_isp_placements.isSet()) {
        obj.insert(QString("IspPlacements"), ::OpenAPI::toJsonValue(m_isp_placements));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIGetDeliverabilityTestReportResponse_DeliverabilityTestReport OAIGetDeliverabilityTestReportResponse::getDeliverabilityTestReport() const {
    return m_deliverability_test_report;
}
void OAIGetDeliverabilityTestReportResponse::setDeliverabilityTestReport(const OAIGetDeliverabilityTestReportResponse_DeliverabilityTestReport &deliverability_test_report) {
    m_deliverability_test_report = deliverability_test_report;
    m_deliverability_test_report_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_deliverability_test_report_Set() const{
    return m_deliverability_test_report_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_deliverability_test_report_Valid() const{
    return m_deliverability_test_report_isValid;
}

OAIGetDeliverabilityTestReportResponse_OverallPlacement OAIGetDeliverabilityTestReportResponse::getOverallPlacement() const {
    return m_overall_placement;
}
void OAIGetDeliverabilityTestReportResponse::setOverallPlacement(const OAIGetDeliverabilityTestReportResponse_OverallPlacement &overall_placement) {
    m_overall_placement = overall_placement;
    m_overall_placement_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_overall_placement_Set() const{
    return m_overall_placement_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_overall_placement_Valid() const{
    return m_overall_placement_isValid;
}

QList OAIGetDeliverabilityTestReportResponse::getIspPlacements() const {
    return m_isp_placements;
}
void OAIGetDeliverabilityTestReportResponse::setIspPlacements(const QList &isp_placements) {
    m_isp_placements = isp_placements;
    m_isp_placements_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_isp_placements_Set() const{
    return m_isp_placements_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_isp_placements_Valid() const{
    return m_isp_placements_isValid;
}

QString OAIGetDeliverabilityTestReportResponse::getMessage() const {
    return m_message;
}
void OAIGetDeliverabilityTestReportResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_message_Valid() const{
    return m_message_isValid;
}

QList OAIGetDeliverabilityTestReportResponse::getTags() const {
    return m_tags;
}
void OAIGetDeliverabilityTestReportResponse::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetDeliverabilityTestReportResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetDeliverabilityTestReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deliverability_test_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_isp_placements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeliverabilityTestReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deliverability_test_report_isValid && m_overall_placement_isValid && m_isp_placements_isValid && true;
}

} // namespace OpenAPI
