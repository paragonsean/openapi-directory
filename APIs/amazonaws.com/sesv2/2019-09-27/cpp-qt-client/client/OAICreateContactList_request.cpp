/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateContactList_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateContactList_request::OAICreateContactList_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateContactList_request::OAICreateContactList_request() {
    this->initializeModel();
}

OAICreateContactList_request::~OAICreateContactList_request() {}

void OAICreateContactList_request::initializeModel() {

    m_contact_list_name_isSet = false;
    m_contact_list_name_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateContactList_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateContactList_request::fromJsonObject(QJsonObject json) {

    m_contact_list_name_isValid = ::OpenAPI::fromJsonValue(m_contact_list_name, json[QString("ContactListName")]);
    m_contact_list_name_isSet = !json[QString("ContactListName")].isNull() && m_contact_list_name_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("Topics")]);
    m_topics_isSet = !json[QString("Topics")].isNull() && m_topics_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateContactList_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateContactList_request::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_list_name_isSet) {
        obj.insert(QString("ContactListName"), ::OpenAPI::toJsonValue(m_contact_list_name));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("Topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateContactList_request::getContactListName() const {
    return m_contact_list_name;
}
void OAICreateContactList_request::setContactListName(const QString &contact_list_name) {
    m_contact_list_name = contact_list_name;
    m_contact_list_name_isSet = true;
}

bool OAICreateContactList_request::is_contact_list_name_Set() const{
    return m_contact_list_name_isSet;
}

bool OAICreateContactList_request::is_contact_list_name_Valid() const{
    return m_contact_list_name_isValid;
}

QList<OAITopic> OAICreateContactList_request::getTopics() const {
    return m_topics;
}
void OAICreateContactList_request::setTopics(const QList<OAITopic> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAICreateContactList_request::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAICreateContactList_request::is_topics_Valid() const{
    return m_topics_isValid;
}

QString OAICreateContactList_request::getDescription() const {
    return m_description;
}
void OAICreateContactList_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateContactList_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateContactList_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAITag> OAICreateContactList_request::getTags() const {
    return m_tags;
}
void OAICreateContactList_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateContactList_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateContactList_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateContactList_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_list_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateContactList_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_list_name_isValid && true;
}

} // namespace OpenAPI
