/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEmailIdentityRequest_DkimSigningAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEmailIdentityRequest_DkimSigningAttributes::OAICreateEmailIdentityRequest_DkimSigningAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEmailIdentityRequest_DkimSigningAttributes::OAICreateEmailIdentityRequest_DkimSigningAttributes() {
    this->initializeModel();
}

OAICreateEmailIdentityRequest_DkimSigningAttributes::~OAICreateEmailIdentityRequest_DkimSigningAttributes() {}

void OAICreateEmailIdentityRequest_DkimSigningAttributes::initializeModel() {

    m_domain_signing_selector_isSet = false;
    m_domain_signing_selector_isValid = false;

    m_domain_signing_private_key_isSet = false;
    m_domain_signing_private_key_isValid = false;

    m_next_signing_key_length_isSet = false;
    m_next_signing_key_length_isValid = false;
}

void OAICreateEmailIdentityRequest_DkimSigningAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEmailIdentityRequest_DkimSigningAttributes::fromJsonObject(QJsonObject json) {

    m_domain_signing_selector_isValid = ::OpenAPI::fromJsonValue(m_domain_signing_selector, json[QString("DomainSigningSelector")]);
    m_domain_signing_selector_isSet = !json[QString("DomainSigningSelector")].isNull() && m_domain_signing_selector_isValid;

    m_domain_signing_private_key_isValid = ::OpenAPI::fromJsonValue(m_domain_signing_private_key, json[QString("DomainSigningPrivateKey")]);
    m_domain_signing_private_key_isSet = !json[QString("DomainSigningPrivateKey")].isNull() && m_domain_signing_private_key_isValid;

    m_next_signing_key_length_isValid = ::OpenAPI::fromJsonValue(m_next_signing_key_length, json[QString("NextSigningKeyLength")]);
    m_next_signing_key_length_isSet = !json[QString("NextSigningKeyLength")].isNull() && m_next_signing_key_length_isValid;
}

QString OAICreateEmailIdentityRequest_DkimSigningAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEmailIdentityRequest_DkimSigningAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_signing_selector_isSet) {
        obj.insert(QString("DomainSigningSelector"), ::OpenAPI::toJsonValue(m_domain_signing_selector));
    }
    if (m_domain_signing_private_key_isSet) {
        obj.insert(QString("DomainSigningPrivateKey"), ::OpenAPI::toJsonValue(m_domain_signing_private_key));
    }
    if (m_next_signing_key_length.isSet()) {
        obj.insert(QString("NextSigningKeyLength"), ::OpenAPI::toJsonValue(m_next_signing_key_length));
    }
    return obj;
}

QString OAICreateEmailIdentityRequest_DkimSigningAttributes::getDomainSigningSelector() const {
    return m_domain_signing_selector;
}
void OAICreateEmailIdentityRequest_DkimSigningAttributes::setDomainSigningSelector(const QString &domain_signing_selector) {
    m_domain_signing_selector = domain_signing_selector;
    m_domain_signing_selector_isSet = true;
}

bool OAICreateEmailIdentityRequest_DkimSigningAttributes::is_domain_signing_selector_Set() const{
    return m_domain_signing_selector_isSet;
}

bool OAICreateEmailIdentityRequest_DkimSigningAttributes::is_domain_signing_selector_Valid() const{
    return m_domain_signing_selector_isValid;
}

QString OAICreateEmailIdentityRequest_DkimSigningAttributes::getDomainSigningPrivateKey() const {
    return m_domain_signing_private_key;
}
void OAICreateEmailIdentityRequest_DkimSigningAttributes::setDomainSigningPrivateKey(const QString &domain_signing_private_key) {
    m_domain_signing_private_key = domain_signing_private_key;
    m_domain_signing_private_key_isSet = true;
}

bool OAICreateEmailIdentityRequest_DkimSigningAttributes::is_domain_signing_private_key_Set() const{
    return m_domain_signing_private_key_isSet;
}

bool OAICreateEmailIdentityRequest_DkimSigningAttributes::is_domain_signing_private_key_Valid() const{
    return m_domain_signing_private_key_isValid;
}

OAIDkimSigningKeyLength OAICreateEmailIdentityRequest_DkimSigningAttributes::getNextSigningKeyLength() const {
    return m_next_signing_key_length;
}
void OAICreateEmailIdentityRequest_DkimSigningAttributes::setNextSigningKeyLength(const OAIDkimSigningKeyLength &next_signing_key_length) {
    m_next_signing_key_length = next_signing_key_length;
    m_next_signing_key_length_isSet = true;
}

bool OAICreateEmailIdentityRequest_DkimSigningAttributes::is_next_signing_key_length_Set() const{
    return m_next_signing_key_length_isSet;
}

bool OAICreateEmailIdentityRequest_DkimSigningAttributes::is_next_signing_key_length_Valid() const{
    return m_next_signing_key_length_isValid;
}

bool OAICreateEmailIdentityRequest_DkimSigningAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_signing_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_signing_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_signing_key_length.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEmailIdentityRequest_DkimSigningAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
