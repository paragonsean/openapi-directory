/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportJobSummary::OAIImportJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportJobSummary::OAIImportJobSummary() {
    this->initializeModel();
}

OAIImportJobSummary::~OAIImportJobSummary() {}

void OAIImportJobSummary::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_import_destination_isSet = false;
    m_import_destination_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_processed_records_count_isSet = false;
    m_processed_records_count_isValid = false;

    m_failed_records_count_isSet = false;
    m_failed_records_count_isValid = false;
}

void OAIImportJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportJobSummary::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_import_destination_isValid = ::OpenAPI::fromJsonValue(m_import_destination, json[QString("ImportDestination")]);
    m_import_destination_isSet = !json[QString("ImportDestination")].isNull() && m_import_destination_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_processed_records_count_isValid = ::OpenAPI::fromJsonValue(m_processed_records_count, json[QString("ProcessedRecordsCount")]);
    m_processed_records_count_isSet = !json[QString("ProcessedRecordsCount")].isNull() && m_processed_records_count_isValid;

    m_failed_records_count_isValid = ::OpenAPI::fromJsonValue(m_failed_records_count, json[QString("FailedRecordsCount")]);
    m_failed_records_count_isSet = !json[QString("FailedRecordsCount")].isNull() && m_failed_records_count_isValid;
}

QString OAIImportJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_import_destination.isSet()) {
        obj.insert(QString("ImportDestination"), ::OpenAPI::toJsonValue(m_import_destination));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_processed_records_count_isSet) {
        obj.insert(QString("ProcessedRecordsCount"), ::OpenAPI::toJsonValue(m_processed_records_count));
    }
    if (m_failed_records_count_isSet) {
        obj.insert(QString("FailedRecordsCount"), ::OpenAPI::toJsonValue(m_failed_records_count));
    }
    return obj;
}

QString OAIImportJobSummary::getJobId() const {
    return m_job_id;
}
void OAIImportJobSummary::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIImportJobSummary::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIImportJobSummary::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIImportDestination OAIImportJobSummary::getImportDestination() const {
    return m_import_destination;
}
void OAIImportJobSummary::setImportDestination(const OAIImportDestination &import_destination) {
    m_import_destination = import_destination;
    m_import_destination_isSet = true;
}

bool OAIImportJobSummary::is_import_destination_Set() const{
    return m_import_destination_isSet;
}

bool OAIImportJobSummary::is_import_destination_Valid() const{
    return m_import_destination_isValid;
}

OAIJobStatus OAIImportJobSummary::getJobStatus() const {
    return m_job_status;
}
void OAIImportJobSummary::setJobStatus(const OAIJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIImportJobSummary::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIImportJobSummary::is_job_status_Valid() const{
    return m_job_status_isValid;
}

QDateTime OAIImportJobSummary::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIImportJobSummary::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIImportJobSummary::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIImportJobSummary::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

qint32 OAIImportJobSummary::getProcessedRecordsCount() const {
    return m_processed_records_count;
}
void OAIImportJobSummary::setProcessedRecordsCount(const qint32 &processed_records_count) {
    m_processed_records_count = processed_records_count;
    m_processed_records_count_isSet = true;
}

bool OAIImportJobSummary::is_processed_records_count_Set() const{
    return m_processed_records_count_isSet;
}

bool OAIImportJobSummary::is_processed_records_count_Valid() const{
    return m_processed_records_count_isValid;
}

qint32 OAIImportJobSummary::getFailedRecordsCount() const {
    return m_failed_records_count;
}
void OAIImportJobSummary::setFailedRecordsCount(const qint32 &failed_records_count) {
    m_failed_records_count = failed_records_count;
    m_failed_records_count_isSet = true;
}

bool OAIImportJobSummary::is_failed_records_count_Set() const{
    return m_failed_records_count_isSet;
}

bool OAIImportJobSummary::is_failed_records_count_Valid() const{
    return m_failed_records_count_isValid;
}

bool OAIImportJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_records_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_records_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
