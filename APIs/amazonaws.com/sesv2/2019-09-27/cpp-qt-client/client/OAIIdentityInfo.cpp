/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityInfo::OAIIdentityInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityInfo::OAIIdentityInfo() {
    this->initializeModel();
}

OAIIdentityInfo::~OAIIdentityInfo() {}

void OAIIdentityInfo::initializeModel() {

    m_identity_type_isSet = false;
    m_identity_type_isValid = false;

    m_identity_name_isSet = false;
    m_identity_name_isValid = false;

    m_sending_enabled_isSet = false;
    m_sending_enabled_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;
}

void OAIIdentityInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityInfo::fromJsonObject(QJsonObject json) {

    m_identity_type_isValid = ::OpenAPI::fromJsonValue(m_identity_type, json[QString("IdentityType")]);
    m_identity_type_isSet = !json[QString("IdentityType")].isNull() && m_identity_type_isValid;

    m_identity_name_isValid = ::OpenAPI::fromJsonValue(m_identity_name, json[QString("IdentityName")]);
    m_identity_name_isSet = !json[QString("IdentityName")].isNull() && m_identity_name_isValid;

    m_sending_enabled_isValid = ::OpenAPI::fromJsonValue(m_sending_enabled, json[QString("SendingEnabled")]);
    m_sending_enabled_isSet = !json[QString("SendingEnabled")].isNull() && m_sending_enabled_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("VerificationStatus")]);
    m_verification_status_isSet = !json[QString("VerificationStatus")].isNull() && m_verification_status_isValid;
}

QString OAIIdentityInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_type.isSet()) {
        obj.insert(QString("IdentityType"), ::OpenAPI::toJsonValue(m_identity_type));
    }
    if (m_identity_name_isSet) {
        obj.insert(QString("IdentityName"), ::OpenAPI::toJsonValue(m_identity_name));
    }
    if (m_sending_enabled_isSet) {
        obj.insert(QString("SendingEnabled"), ::OpenAPI::toJsonValue(m_sending_enabled));
    }
    if (m_verification_status.isSet()) {
        obj.insert(QString("VerificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    return obj;
}

OAIIdentityType OAIIdentityInfo::getIdentityType() const {
    return m_identity_type;
}
void OAIIdentityInfo::setIdentityType(const OAIIdentityType &identity_type) {
    m_identity_type = identity_type;
    m_identity_type_isSet = true;
}

bool OAIIdentityInfo::is_identity_type_Set() const{
    return m_identity_type_isSet;
}

bool OAIIdentityInfo::is_identity_type_Valid() const{
    return m_identity_type_isValid;
}

QString OAIIdentityInfo::getIdentityName() const {
    return m_identity_name;
}
void OAIIdentityInfo::setIdentityName(const QString &identity_name) {
    m_identity_name = identity_name;
    m_identity_name_isSet = true;
}

bool OAIIdentityInfo::is_identity_name_Set() const{
    return m_identity_name_isSet;
}

bool OAIIdentityInfo::is_identity_name_Valid() const{
    return m_identity_name_isValid;
}

bool OAIIdentityInfo::getSendingEnabled() const {
    return m_sending_enabled;
}
void OAIIdentityInfo::setSendingEnabled(const bool &sending_enabled) {
    m_sending_enabled = sending_enabled;
    m_sending_enabled_isSet = true;
}

bool OAIIdentityInfo::is_sending_enabled_Set() const{
    return m_sending_enabled_isSet;
}

bool OAIIdentityInfo::is_sending_enabled_Valid() const{
    return m_sending_enabled_isValid;
}

OAIVerificationStatus OAIIdentityInfo::getVerificationStatus() const {
    return m_verification_status;
}
void OAIIdentityInfo::setVerificationStatus(const OAIVerificationStatus &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAIIdentityInfo::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAIIdentityInfo::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

bool OAIIdentityInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sending_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
