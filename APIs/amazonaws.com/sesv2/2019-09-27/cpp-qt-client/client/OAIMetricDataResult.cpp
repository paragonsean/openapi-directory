/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricDataResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricDataResult::OAIMetricDataResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricDataResult::OAIMetricDataResult() {
    this->initializeModel();
}

OAIMetricDataResult::~OAIMetricDataResult() {}

void OAIMetricDataResult::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_timestamps_isSet = false;
    m_timestamps_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIMetricDataResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricDataResult::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_timestamps_isValid = ::OpenAPI::fromJsonValue(m_timestamps, json[QString("Timestamps")]);
    m_timestamps_isSet = !json[QString("Timestamps")].isNull() && m_timestamps_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIMetricDataResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricDataResult::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_timestamps.isSet()) {
        obj.insert(QString("Timestamps"), ::OpenAPI::toJsonValue(m_timestamps));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIMetricDataResult::getId() const {
    return m_id;
}
void OAIMetricDataResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMetricDataResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMetricDataResult::is_id_Valid() const{
    return m_id_isValid;
}

QList OAIMetricDataResult::getTimestamps() const {
    return m_timestamps;
}
void OAIMetricDataResult::setTimestamps(const QList &timestamps) {
    m_timestamps = timestamps;
    m_timestamps_isSet = true;
}

bool OAIMetricDataResult::is_timestamps_Set() const{
    return m_timestamps_isSet;
}

bool OAIMetricDataResult::is_timestamps_Valid() const{
    return m_timestamps_isValid;
}

QList OAIMetricDataResult::getValues() const {
    return m_values;
}
void OAIMetricDataResult::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIMetricDataResult::is_values_Set() const{
    return m_values_isSet;
}

bool OAIMetricDataResult::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIMetricDataResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricDataResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
