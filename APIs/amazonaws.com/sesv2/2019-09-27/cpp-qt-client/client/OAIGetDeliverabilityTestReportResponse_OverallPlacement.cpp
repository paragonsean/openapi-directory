/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeliverabilityTestReportResponse_OverallPlacement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeliverabilityTestReportResponse_OverallPlacement::OAIGetDeliverabilityTestReportResponse_OverallPlacement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeliverabilityTestReportResponse_OverallPlacement::OAIGetDeliverabilityTestReportResponse_OverallPlacement() {
    this->initializeModel();
}

OAIGetDeliverabilityTestReportResponse_OverallPlacement::~OAIGetDeliverabilityTestReportResponse_OverallPlacement() {}

void OAIGetDeliverabilityTestReportResponse_OverallPlacement::initializeModel() {

    m_inbox_percentage_isSet = false;
    m_inbox_percentage_isValid = false;

    m_spam_percentage_isSet = false;
    m_spam_percentage_isValid = false;

    m_missing_percentage_isSet = false;
    m_missing_percentage_isValid = false;

    m_spf_percentage_isSet = false;
    m_spf_percentage_isValid = false;

    m_dkim_percentage_isSet = false;
    m_dkim_percentage_isValid = false;
}

void OAIGetDeliverabilityTestReportResponse_OverallPlacement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeliverabilityTestReportResponse_OverallPlacement::fromJsonObject(QJsonObject json) {

    m_inbox_percentage_isValid = ::OpenAPI::fromJsonValue(m_inbox_percentage, json[QString("InboxPercentage")]);
    m_inbox_percentage_isSet = !json[QString("InboxPercentage")].isNull() && m_inbox_percentage_isValid;

    m_spam_percentage_isValid = ::OpenAPI::fromJsonValue(m_spam_percentage, json[QString("SpamPercentage")]);
    m_spam_percentage_isSet = !json[QString("SpamPercentage")].isNull() && m_spam_percentage_isValid;

    m_missing_percentage_isValid = ::OpenAPI::fromJsonValue(m_missing_percentage, json[QString("MissingPercentage")]);
    m_missing_percentage_isSet = !json[QString("MissingPercentage")].isNull() && m_missing_percentage_isValid;

    m_spf_percentage_isValid = ::OpenAPI::fromJsonValue(m_spf_percentage, json[QString("SpfPercentage")]);
    m_spf_percentage_isSet = !json[QString("SpfPercentage")].isNull() && m_spf_percentage_isValid;

    m_dkim_percentage_isValid = ::OpenAPI::fromJsonValue(m_dkim_percentage, json[QString("DkimPercentage")]);
    m_dkim_percentage_isSet = !json[QString("DkimPercentage")].isNull() && m_dkim_percentage_isValid;
}

QString OAIGetDeliverabilityTestReportResponse_OverallPlacement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeliverabilityTestReportResponse_OverallPlacement::asJsonObject() const {
    QJsonObject obj;
    if (m_inbox_percentage_isSet) {
        obj.insert(QString("InboxPercentage"), ::OpenAPI::toJsonValue(m_inbox_percentage));
    }
    if (m_spam_percentage_isSet) {
        obj.insert(QString("SpamPercentage"), ::OpenAPI::toJsonValue(m_spam_percentage));
    }
    if (m_missing_percentage_isSet) {
        obj.insert(QString("MissingPercentage"), ::OpenAPI::toJsonValue(m_missing_percentage));
    }
    if (m_spf_percentage_isSet) {
        obj.insert(QString("SpfPercentage"), ::OpenAPI::toJsonValue(m_spf_percentage));
    }
    if (m_dkim_percentage_isSet) {
        obj.insert(QString("DkimPercentage"), ::OpenAPI::toJsonValue(m_dkim_percentage));
    }
    return obj;
}

double OAIGetDeliverabilityTestReportResponse_OverallPlacement::getInboxPercentage() const {
    return m_inbox_percentage;
}
void OAIGetDeliverabilityTestReportResponse_OverallPlacement::setInboxPercentage(const double &inbox_percentage) {
    m_inbox_percentage = inbox_percentage;
    m_inbox_percentage_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_inbox_percentage_Set() const{
    return m_inbox_percentage_isSet;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_inbox_percentage_Valid() const{
    return m_inbox_percentage_isValid;
}

double OAIGetDeliverabilityTestReportResponse_OverallPlacement::getSpamPercentage() const {
    return m_spam_percentage;
}
void OAIGetDeliverabilityTestReportResponse_OverallPlacement::setSpamPercentage(const double &spam_percentage) {
    m_spam_percentage = spam_percentage;
    m_spam_percentage_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_spam_percentage_Set() const{
    return m_spam_percentage_isSet;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_spam_percentage_Valid() const{
    return m_spam_percentage_isValid;
}

double OAIGetDeliverabilityTestReportResponse_OverallPlacement::getMissingPercentage() const {
    return m_missing_percentage;
}
void OAIGetDeliverabilityTestReportResponse_OverallPlacement::setMissingPercentage(const double &missing_percentage) {
    m_missing_percentage = missing_percentage;
    m_missing_percentage_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_missing_percentage_Set() const{
    return m_missing_percentage_isSet;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_missing_percentage_Valid() const{
    return m_missing_percentage_isValid;
}

double OAIGetDeliverabilityTestReportResponse_OverallPlacement::getSpfPercentage() const {
    return m_spf_percentage;
}
void OAIGetDeliverabilityTestReportResponse_OverallPlacement::setSpfPercentage(const double &spf_percentage) {
    m_spf_percentage = spf_percentage;
    m_spf_percentage_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_spf_percentage_Set() const{
    return m_spf_percentage_isSet;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_spf_percentage_Valid() const{
    return m_spf_percentage_isValid;
}

double OAIGetDeliverabilityTestReportResponse_OverallPlacement::getDkimPercentage() const {
    return m_dkim_percentage;
}
void OAIGetDeliverabilityTestReportResponse_OverallPlacement::setDkimPercentage(const double &dkim_percentage) {
    m_dkim_percentage = dkim_percentage;
    m_dkim_percentage_isSet = true;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_dkim_percentage_Set() const{
    return m_dkim_percentage_isSet;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::is_dkim_percentage_Valid() const{
    return m_dkim_percentage_isValid;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inbox_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spam_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spf_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeliverabilityTestReportResponse_OverallPlacement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
