/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchGetMetricDataRequest from '../model/BatchGetMetricDataRequest';
import BatchGetMetricDataResponse from '../model/BatchGetMetricDataResponse';
import CreateConfigurationSetEventDestinationRequest from '../model/CreateConfigurationSetEventDestinationRequest';
import CreateConfigurationSetRequest from '../model/CreateConfigurationSetRequest';
import CreateContactListRequest from '../model/CreateContactListRequest';
import CreateContactRequest from '../model/CreateContactRequest';
import CreateCustomVerificationEmailTemplateRequest from '../model/CreateCustomVerificationEmailTemplateRequest';
import CreateDedicatedIpPoolRequest from '../model/CreateDedicatedIpPoolRequest';
import CreateDeliverabilityTestReportRequest from '../model/CreateDeliverabilityTestReportRequest';
import CreateDeliverabilityTestReportResponse from '../model/CreateDeliverabilityTestReportResponse';
import CreateEmailIdentityRequest from '../model/CreateEmailIdentityRequest';
import CreateEmailIdentityResponse from '../model/CreateEmailIdentityResponse';
import CreateEmailTemplateRequest from '../model/CreateEmailTemplateRequest';
import CreateImportJobRequest from '../model/CreateImportJobRequest';
import CreateImportJobResponse from '../model/CreateImportJobResponse';
import GetAccountResponse from '../model/GetAccountResponse';
import GetBlacklistReportsResponse from '../model/GetBlacklistReportsResponse';
import GetConfigurationSetEventDestinationsResponse from '../model/GetConfigurationSetEventDestinationsResponse';
import GetConfigurationSetResponse from '../model/GetConfigurationSetResponse';
import GetContactListResponse from '../model/GetContactListResponse';
import GetContactResponse from '../model/GetContactResponse';
import GetCustomVerificationEmailTemplateResponse from '../model/GetCustomVerificationEmailTemplateResponse';
import GetDedicatedIpPoolResponse from '../model/GetDedicatedIpPoolResponse';
import GetDedicatedIpResponse from '../model/GetDedicatedIpResponse';
import GetDedicatedIpsResponse from '../model/GetDedicatedIpsResponse';
import GetDeliverabilityDashboardOptionsResponse from '../model/GetDeliverabilityDashboardOptionsResponse';
import GetDeliverabilityTestReportResponse from '../model/GetDeliverabilityTestReportResponse';
import GetDomainDeliverabilityCampaignResponse from '../model/GetDomainDeliverabilityCampaignResponse';
import GetDomainStatisticsReportResponse from '../model/GetDomainStatisticsReportResponse';
import GetEmailIdentityPoliciesResponse from '../model/GetEmailIdentityPoliciesResponse';
import GetEmailIdentityResponse from '../model/GetEmailIdentityResponse';
import GetEmailTemplateResponse from '../model/GetEmailTemplateResponse';
import GetImportJobResponse from '../model/GetImportJobResponse';
import GetSuppressedDestinationResponse from '../model/GetSuppressedDestinationResponse';
import ListConfigurationSetsResponse from '../model/ListConfigurationSetsResponse';
import ListContactListsResponse from '../model/ListContactListsResponse';
import ListContactsRequest from '../model/ListContactsRequest';
import ListContactsResponse from '../model/ListContactsResponse';
import ListCustomVerificationEmailTemplatesResponse from '../model/ListCustomVerificationEmailTemplatesResponse';
import ListDedicatedIpPoolsResponse from '../model/ListDedicatedIpPoolsResponse';
import ListDeliverabilityTestReportsResponse from '../model/ListDeliverabilityTestReportsResponse';
import ListDomainDeliverabilityCampaignsResponse from '../model/ListDomainDeliverabilityCampaignsResponse';
import ListEmailIdentitiesResponse from '../model/ListEmailIdentitiesResponse';
import ListEmailTemplatesResponse from '../model/ListEmailTemplatesResponse';
import ListImportJobsRequest from '../model/ListImportJobsRequest';
import ListImportJobsResponse from '../model/ListImportJobsResponse';
import ListRecommendationsRequest from '../model/ListRecommendationsRequest';
import ListRecommendationsResponse from '../model/ListRecommendationsResponse';
import ListSuppressedDestinationsResponse from '../model/ListSuppressedDestinationsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutAccountDedicatedIpWarmupAttributesRequest from '../model/PutAccountDedicatedIpWarmupAttributesRequest';
import PutAccountDetailsRequest from '../model/PutAccountDetailsRequest';
import PutAccountSendingAttributesRequest from '../model/PutAccountSendingAttributesRequest';
import PutAccountSuppressionAttributesRequest from '../model/PutAccountSuppressionAttributesRequest';
import PutAccountVdmAttributesRequest from '../model/PutAccountVdmAttributesRequest';
import PutConfigurationSetDeliveryOptionsRequest from '../model/PutConfigurationSetDeliveryOptionsRequest';
import PutConfigurationSetReputationOptionsRequest from '../model/PutConfigurationSetReputationOptionsRequest';
import PutConfigurationSetSendingOptionsRequest from '../model/PutConfigurationSetSendingOptionsRequest';
import PutConfigurationSetSuppressionOptionsRequest from '../model/PutConfigurationSetSuppressionOptionsRequest';
import PutConfigurationSetTrackingOptionsRequest from '../model/PutConfigurationSetTrackingOptionsRequest';
import PutConfigurationSetVdmOptionsRequest from '../model/PutConfigurationSetVdmOptionsRequest';
import PutDedicatedIpInPoolRequest from '../model/PutDedicatedIpInPoolRequest';
import PutDedicatedIpPoolScalingAttributesRequest from '../model/PutDedicatedIpPoolScalingAttributesRequest';
import PutDedicatedIpWarmupAttributesRequest from '../model/PutDedicatedIpWarmupAttributesRequest';
import PutDeliverabilityDashboardOptionRequest from '../model/PutDeliverabilityDashboardOptionRequest';
import PutEmailIdentityConfigurationSetAttributesRequest from '../model/PutEmailIdentityConfigurationSetAttributesRequest';
import PutEmailIdentityDkimAttributesRequest from '../model/PutEmailIdentityDkimAttributesRequest';
import PutEmailIdentityDkimSigningAttributesRequest from '../model/PutEmailIdentityDkimSigningAttributesRequest';
import PutEmailIdentityDkimSigningAttributesResponse from '../model/PutEmailIdentityDkimSigningAttributesResponse';
import PutEmailIdentityFeedbackAttributesRequest from '../model/PutEmailIdentityFeedbackAttributesRequest';
import PutEmailIdentityMailFromAttributesRequest from '../model/PutEmailIdentityMailFromAttributesRequest';
import PutSuppressedDestinationRequest from '../model/PutSuppressedDestinationRequest';
import SendBulkEmailRequest from '../model/SendBulkEmailRequest';
import SendBulkEmailResponse from '../model/SendBulkEmailResponse';
import SendCustomVerificationEmailRequest from '../model/SendCustomVerificationEmailRequest';
import SendCustomVerificationEmailResponse from '../model/SendCustomVerificationEmailResponse';
import SendEmailRequest from '../model/SendEmailRequest';
import SendEmailResponse from '../model/SendEmailResponse';
import SuppressionListReason from '../model/SuppressionListReason';
import TagResourceRequest from '../model/TagResourceRequest';
import TestRenderEmailTemplateRequest from '../model/TestRenderEmailTemplateRequest';
import TestRenderEmailTemplateResponse from '../model/TestRenderEmailTemplateResponse';
import UpdateConfigurationSetEventDestinationRequest from '../model/UpdateConfigurationSetEventDestinationRequest';
import UpdateContactListRequest from '../model/UpdateContactListRequest';
import UpdateContactRequest from '../model/UpdateContactRequest';
import UpdateCustomVerificationEmailTemplateRequest from '../model/UpdateCustomVerificationEmailTemplateRequest';
import UpdateEmailIdentityPolicyRequest from '../model/UpdateEmailIdentityPolicyRequest';
import UpdateEmailTemplateRequest from '../model/UpdateEmailTemplateRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-09-27
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchGetMetricData operation.
     * @callback module:api/DefaultApi~batchGetMetricDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetMetricDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves batches of metric data collected based on your sending activity.</p> <p>You can execute this operation no more than 16 times per second, and with at most 160 queries from the batches per second (cumulative).</p>
     * @param {module:model/BatchGetMetricDataRequest} batchGetMetricDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetMetricDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetMetricDataResponse}
     */
    batchGetMetricData(batchGetMetricDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetMetricDataRequest;
      // verify the required parameter 'batchGetMetricDataRequest' is set
      if (batchGetMetricDataRequest === undefined || batchGetMetricDataRequest === null) {
        throw new Error("Missing the required parameter 'batchGetMetricDataRequest' when calling batchGetMetricData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetMetricDataResponse;
      return this.apiClient.callApi(
        '/v2/email/metrics/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfigurationSet operation.
     * @callback module:api/DefaultApi~createConfigurationSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a configuration set. <i>Configuration sets</i> are groups of rules that you can apply to the emails that you send. You apply a configuration set to an email by specifying the name of the configuration set when you call the Amazon SES API v2. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email. 
     * @param {module:model/CreateConfigurationSetRequest} createConfigurationSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfigurationSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createConfigurationSet(createConfigurationSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfigurationSetRequest;
      // verify the required parameter 'createConfigurationSetRequest' is set
      if (createConfigurationSetRequest === undefined || createConfigurationSetRequest === null) {
        throw new Error("Missing the required parameter 'createConfigurationSetRequest' when calling createConfigurationSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfigurationSetEventDestination operation.
     * @callback module:api/DefaultApi~createConfigurationSetEventDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create an event destination. <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p> <p>A single configuration set can include more than one event destination.</p>
     * @param {String} configurationSetName The name of the configuration set .
     * @param {module:model/CreateConfigurationSetEventDestinationRequest} createConfigurationSetEventDestinationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfigurationSetEventDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createConfigurationSetEventDestination(configurationSetName, createConfigurationSetEventDestinationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfigurationSetEventDestinationRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling createConfigurationSetEventDestination");
      }
      // verify the required parameter 'createConfigurationSetEventDestinationRequest' is set
      if (createConfigurationSetEventDestinationRequest === undefined || createConfigurationSetEventDestinationRequest === null) {
        throw new Error("Missing the required parameter 'createConfigurationSetEventDestinationRequest' when calling createConfigurationSetEventDestination");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContact operation.
     * @callback module:api/DefaultApi~createContactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a contact, which is an end-user who is receiving the email, and adds them to a contact list.
     * @param {String} contactListName The name of the contact list to which the contact should be added.
     * @param {module:model/CreateContactRequest} createContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createContact(contactListName, createContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = createContactRequest;
      // verify the required parameter 'contactListName' is set
      if (contactListName === undefined || contactListName === null) {
        throw new Error("Missing the required parameter 'contactListName' when calling createContact");
      }
      // verify the required parameter 'createContactRequest' is set
      if (createContactRequest === undefined || createContactRequest === null) {
        throw new Error("Missing the required parameter 'createContactRequest' when calling createContact");
      }

      let pathParams = {
        'ContactListName': contactListName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/contact-lists/{ContactListName}/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactList operation.
     * @callback module:api/DefaultApi~createContactListCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a contact list.
     * @param {module:model/CreateContactListRequest} createContactListRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createContactListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createContactList(createContactListRequest, opts, callback) {
      opts = opts || {};
      let postBody = createContactListRequest;
      // verify the required parameter 'createContactListRequest' is set
      if (createContactListRequest === undefined || createContactListRequest === null) {
        throw new Error("Missing the required parameter 'createContactListRequest' when calling createContactList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/contact-lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomVerificationEmailTemplate operation.
     * @callback module:api/DefaultApi~createCustomVerificationEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href=\"https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\">Using custom verification email templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {module:model/CreateCustomVerificationEmailTemplateRequest} createCustomVerificationEmailTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCustomVerificationEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createCustomVerificationEmailTemplate(createCustomVerificationEmailTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCustomVerificationEmailTemplateRequest;
      // verify the required parameter 'createCustomVerificationEmailTemplateRequest' is set
      if (createCustomVerificationEmailTemplateRequest === undefined || createCustomVerificationEmailTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createCustomVerificationEmailTemplateRequest' when calling createCustomVerificationEmailTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/custom-verification-email-templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDedicatedIpPool operation.
     * @callback module:api/DefaultApi~createDedicatedIpPoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new pool of dedicated IP addresses. A pool can include one or more dedicated IP addresses that are associated with your Amazon Web Services account. You can associate a pool with a configuration set. When you send an email that uses that configuration set, the message is sent from one of the addresses in the associated pool.
     * @param {module:model/CreateDedicatedIpPoolRequest} createDedicatedIpPoolRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDedicatedIpPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDedicatedIpPool(createDedicatedIpPoolRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDedicatedIpPoolRequest;
      // verify the required parameter 'createDedicatedIpPoolRequest' is set
      if (createDedicatedIpPoolRequest === undefined || createDedicatedIpPoolRequest === null) {
        throw new Error("Missing the required parameter 'createDedicatedIpPoolRequest' when calling createDedicatedIpPool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/dedicated-ip-pools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeliverabilityTestReport operation.
     * @callback module:api/DefaultApi~createDeliverabilityTestReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeliverabilityTestReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. Amazon SES then sends that message to special email addresses spread across several major email providers. After about 24 hours, the test is complete, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
     * @param {module:model/CreateDeliverabilityTestReportRequest} createDeliverabilityTestReportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDeliverabilityTestReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeliverabilityTestReportResponse}
     */
    createDeliverabilityTestReport(createDeliverabilityTestReportRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDeliverabilityTestReportRequest;
      // verify the required parameter 'createDeliverabilityTestReportRequest' is set
      if (createDeliverabilityTestReportRequest === undefined || createDeliverabilityTestReportRequest === null) {
        throw new Error("Missing the required parameter 'createDeliverabilityTestReportRequest' when calling createDeliverabilityTestReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDeliverabilityTestReportResponse;
      return this.apiClient.callApi(
        '/v2/email/deliverability-dashboard/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailIdentity operation.
     * @callback module:api/DefaultApi~createEmailIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEmailIdentityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts the process of verifying an email identity. An <i>identity</i> is an email address or domain that you use when you send email. Before you can use an identity to send email, you first have to verify it. By verifying an identity, you demonstrate that you're the owner of the identity, and that you've given Amazon SES API v2 permission to send email from the identity.</p> <p>When you verify an email address, Amazon SES sends an email to the address. Your email address is verified as soon as you follow the link in the verification email. </p> <p>When you verify a domain without specifying the <code>DkimSigningAttributes</code> object, this operation provides a set of DKIM tokens. You can convert these tokens into CNAME records, which you then add to the DNS configuration for your domain. Your domain is verified when Amazon SES detects these records in the DNS configuration for your domain. This verification method is known as <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\">Easy DKIM</a>.</p> <p>Alternatively, you can perform the verification process by providing your own public-private key pair. This verification method is known as Bring Your Own DKIM (BYODKIM). To use BYODKIM, your call to the <code>CreateEmailIdentity</code> operation has to include the <code>DkimSigningAttributes</code> object. When you specify this object, you provide a selector (a component of the DNS record name that identifies the public key to use for DKIM authentication) and a private key.</p> <p>When you verify a domain, this operation provides a set of DKIM tokens, which you can convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your domain. Your domain is verified when Amazon SES detects these records in the DNS configuration for your domain. For some DNS providers, it can take 72 hours or more to complete the domain verification process.</p> <p>Additionally, you can associate an existing configuration set with the email identity that you're verifying.</p>
     * @param {module:model/CreateEmailIdentityRequest} createEmailIdentityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEmailIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEmailIdentityResponse}
     */
    createEmailIdentity(createEmailIdentityRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEmailIdentityRequest;
      // verify the required parameter 'createEmailIdentityRequest' is set
      if (createEmailIdentityRequest === undefined || createEmailIdentityRequest === null) {
        throw new Error("Missing the required parameter 'createEmailIdentityRequest' when calling createEmailIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEmailIdentityResponse;
      return this.apiClient.callApi(
        '/v2/email/identities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailIdentityPolicy operation.
     * @callback module:api/DefaultApi~createEmailIdentityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates the specified sending authorization policy for the given identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} emailIdentity The email identity.
     * @param {String} policyName <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
     * @param {module:model/UpdateEmailIdentityPolicyRequest} updateEmailIdentityPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEmailIdentityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createEmailIdentityPolicy(emailIdentity, policyName, updateEmailIdentityPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEmailIdentityPolicyRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling createEmailIdentityPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling createEmailIdentityPolicy");
      }
      // verify the required parameter 'updateEmailIdentityPolicyRequest' is set
      if (updateEmailIdentityPolicyRequest === undefined || updateEmailIdentityPolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateEmailIdentityPolicyRequest' when calling createEmailIdentityPolicy");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity,
        'PolicyName': policyName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}/policies/{PolicyName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailTemplate operation.
     * @callback module:api/DefaultApi~createEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html\">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {module:model/CreateEmailTemplateRequest} createEmailTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createEmailTemplate(createEmailTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEmailTemplateRequest;
      // verify the required parameter 'createEmailTemplateRequest' is set
      if (createEmailTemplateRequest === undefined || createEmailTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createEmailTemplateRequest' when calling createEmailTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImportJob operation.
     * @callback module:api/DefaultApi~createImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an import job for a data destination.
     * @param {module:model/CreateImportJobRequest} createImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateImportJobResponse}
     */
    createImportJob(createImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createImportJobRequest;
      // verify the required parameter 'createImportJobRequest' is set
      if (createImportJobRequest === undefined || createImportJobRequest === null) {
        throw new Error("Missing the required parameter 'createImportJobRequest' when calling createImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateImportJobResponse;
      return this.apiClient.callApi(
        '/v2/email/import-jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigurationSet operation.
     * @callback module:api/DefaultApi~deleteConfigurationSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete an existing configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
     * @param {String} configurationSetName The name of the configuration set.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfigurationSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConfigurationSet(configurationSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling deleteConfigurationSet");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigurationSetEventDestination operation.
     * @callback module:api/DefaultApi~deleteConfigurationSetEventDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
     * @param {String} configurationSetName The name of the configuration set that contains the event destination to delete.
     * @param {String} eventDestinationName The name of the event destination to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfigurationSetEventDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConfigurationSetEventDestination(configurationSetName, eventDestinationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling deleteConfigurationSetEventDestination");
      }
      // verify the required parameter 'eventDestinationName' is set
      if (eventDestinationName === undefined || eventDestinationName === null) {
        throw new Error("Missing the required parameter 'eventDestinationName' when calling deleteConfigurationSetEventDestination");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName,
        'EventDestinationName': eventDestinationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContact operation.
     * @callback module:api/DefaultApi~deleteContactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a contact from a contact list.
     * @param {String} contactListName The name of the contact list from which the contact should be removed.
     * @param {String} emailAddress The contact's email address.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteContact(contactListName, emailAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactListName' is set
      if (contactListName === undefined || contactListName === null) {
        throw new Error("Missing the required parameter 'contactListName' when calling deleteContact");
      }
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling deleteContact");
      }

      let pathParams = {
        'ContactListName': contactListName,
        'EmailAddress': emailAddress
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactList operation.
     * @callback module:api/DefaultApi~deleteContactListCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a contact list and all of the contacts on that list.
     * @param {String} contactListName The name of the contact list.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteContactListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteContactList(contactListName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactListName' is set
      if (contactListName === undefined || contactListName === null) {
        throw new Error("Missing the required parameter 'contactListName' when calling deleteContactList");
      }

      let pathParams = {
        'ContactListName': contactListName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/contact-lists/{ContactListName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomVerificationEmailTemplate operation.
     * @callback module:api/DefaultApi~deleteCustomVerificationEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href=\"https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\">Using custom verification email templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} templateName The name of the custom verification email template that you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCustomVerificationEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteCustomVerificationEmailTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling deleteCustomVerificationEmailTemplate");
      }

      let pathParams = {
        'TemplateName': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/custom-verification-email-templates/{TemplateName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDedicatedIpPool operation.
     * @callback module:api/DefaultApi~deleteDedicatedIpPoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dedicated IP pool.
     * @param {String} poolName The name of the dedicated IP pool that you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDedicatedIpPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteDedicatedIpPool(poolName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling deleteDedicatedIpPool");
      }

      let pathParams = {
        'PoolName': poolName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/dedicated-ip-pools/{PoolName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailIdentity operation.
     * @callback module:api/DefaultApi~deleteEmailIdentityCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an email identity. An identity can be either an email address or a domain name.
     * @param {String} emailIdentity The identity (that is, the email address or domain) to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEmailIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEmailIdentity(emailIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling deleteEmailIdentity");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailIdentityPolicy operation.
     * @callback module:api/DefaultApi~deleteEmailIdentityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} emailIdentity The email identity.
     * @param {String} policyName <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEmailIdentityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEmailIdentityPolicy(emailIdentity, policyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling deleteEmailIdentityPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling deleteEmailIdentityPolicy");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity,
        'PolicyName': policyName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}/policies/{PolicyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplate operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} templateName The name of the template to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEmailTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling deleteEmailTemplate");
      }

      let pathParams = {
        'TemplateName': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/templates/{TemplateName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSuppressedDestination operation.
     * @callback module:api/DefaultApi~deleteSuppressedDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an email address from the suppression list for your account.
     * @param {String} emailAddress The suppressed email destination to remove from the account suppression list.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSuppressedDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSuppressedDestination(emailAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling deleteSuppressedDestination");
      }

      let pathParams = {
        'EmailAddress': emailAddress
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/suppression/addresses/{EmailAddress}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/DefaultApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain information about the email-sending status and capabilities of your Amazon SES account in the current Amazon Web Services Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountResponse}
     */
    getAccount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAccountResponse;
      return this.apiClient.callApi(
        '/v2/email/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlacklistReports operation.
     * @callback module:api/DefaultApi~getBlacklistReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlacklistReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of the blacklists that your dedicated IP addresses appear on.
     * @param {Array.<String>} blacklistItemNames A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon SES or Amazon Pinpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBlacklistReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlacklistReportsResponse}
     */
    getBlacklistReports(blacklistItemNames, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blacklistItemNames' is set
      if (blacklistItemNames === undefined || blacklistItemNames === null) {
        throw new Error("Missing the required parameter 'blacklistItemNames' when calling getBlacklistReports");
      }

      let pathParams = {
      };
      let queryParams = {
        'BlacklistItemNames': this.apiClient.buildCollectionParam(blacklistItemNames, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBlacklistReportsResponse;
      return this.apiClient.callApi(
        '/v2/email/deliverability-dashboard/blacklist-report#BlacklistItemNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurationSet operation.
     * @callback module:api/DefaultApi~getConfigurationSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfigurationSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Get information about an existing configuration set, including the dedicated IP pool that it's associated with, whether or not it's enabled for sending email, and more.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
     * @param {String} configurationSetName The name of the configuration set.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfigurationSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfigurationSetResponse}
     */
    getConfigurationSet(configurationSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling getConfigurationSet");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfigurationSetResponse;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurationSetEventDestinations operation.
     * @callback module:api/DefaultApi~getConfigurationSetEventDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfigurationSetEventDestinationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieve a list of event destinations that are associated with a configuration set.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
     * @param {String} configurationSetName The name of the configuration set that contains the event destination.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfigurationSetEventDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfigurationSetEventDestinationsResponse}
     */
    getConfigurationSetEventDestinations(configurationSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling getConfigurationSetEventDestinations");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfigurationSetEventDestinationsResponse;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContact operation.
     * @callback module:api/DefaultApi~getContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a contact from a contact list.
     * @param {String} contactListName The name of the contact list to which the contact belongs.
     * @param {String} emailAddress The contact's email address.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContactResponse}
     */
    getContact(contactListName, emailAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactListName' is set
      if (contactListName === undefined || contactListName === null) {
        throw new Error("Missing the required parameter 'contactListName' when calling getContact");
      }
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling getContact");
      }

      let pathParams = {
        'ContactListName': contactListName,
        'EmailAddress': emailAddress
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetContactResponse;
      return this.apiClient.callApi(
        '/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactList operation.
     * @callback module:api/DefaultApi~getContactListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContactListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns contact list metadata. It does not return any information about the contacts present in the list.
     * @param {String} contactListName The name of the contact list.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContactListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContactListResponse}
     */
    getContactList(contactListName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactListName' is set
      if (contactListName === undefined || contactListName === null) {
        throw new Error("Missing the required parameter 'contactListName' when calling getContactList");
      }

      let pathParams = {
        'ContactListName': contactListName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetContactListResponse;
      return this.apiClient.callApi(
        '/v2/email/contact-lists/{ContactListName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomVerificationEmailTemplate operation.
     * @callback module:api/DefaultApi~getCustomVerificationEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCustomVerificationEmailTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href=\"https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\">Using custom verification email templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} templateName The name of the custom verification email template that you want to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCustomVerificationEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCustomVerificationEmailTemplateResponse}
     */
    getCustomVerificationEmailTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling getCustomVerificationEmailTemplate");
      }

      let pathParams = {
        'TemplateName': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCustomVerificationEmailTemplateResponse;
      return this.apiClient.callApi(
        '/v2/email/custom-verification-email-templates/{TemplateName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDedicatedIp operation.
     * @callback module:api/DefaultApi~getDedicatedIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDedicatedIpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a dedicated IP address, including the name of the dedicated IP pool that it's associated with, as well information about the automatic warm-up process for the address.
     * @param {String} IP The IP address that you want to obtain more information about. The value you specify has to be a dedicated IP address that's assocaited with your Amazon Web Services account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDedicatedIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDedicatedIpResponse}
     */
    getDedicatedIp(IP, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling getDedicatedIp");
      }

      let pathParams = {
        'IP': IP
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDedicatedIpResponse;
      return this.apiClient.callApi(
        '/v2/email/dedicated-ips/{IP}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDedicatedIpPool operation.
     * @callback module:api/DefaultApi~getDedicatedIpPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDedicatedIpPoolResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about the dedicated pool.
     * @param {String} poolName The name of the dedicated IP pool to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDedicatedIpPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDedicatedIpPoolResponse}
     */
    getDedicatedIpPool(poolName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling getDedicatedIpPool");
      }

      let pathParams = {
        'PoolName': poolName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDedicatedIpPoolResponse;
      return this.apiClient.callApi(
        '/v2/email/dedicated-ip-pools/{PoolName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDedicatedIps operation.
     * @callback module:api/DefaultApi~getDedicatedIpsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDedicatedIpsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the dedicated IP addresses that are associated with your Amazon Web Services account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [poolName] The name of the IP pool that the dedicated IP address is associated with.
     * @param {String} [nextToken] A token returned from a previous call to <code>GetDedicatedIps</code> to indicate the position of the dedicated IP pool in the list of IP pools.
     * @param {Number} [pageSize] The number of results to show in a single call to <code>GetDedicatedIpsRequest</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.
     * @param {module:api/DefaultApi~getDedicatedIpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDedicatedIpsResponse}
     */
    getDedicatedIps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PoolName': opts['poolName'],
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDedicatedIpsResponse;
      return this.apiClient.callApi(
        '/v2/email/dedicated-ips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliverabilityDashboardOptions operation.
     * @callback module:api/DefaultApi~getDeliverabilityDashboardOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeliverabilityDashboardOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieve information about the status of the Deliverability dashboard for your account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more information about the features and cost of a Deliverability dashboard subscription, see <a href=\"http://aws.amazon.com/ses/pricing/\">Amazon SES Pricing</a>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeliverabilityDashboardOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeliverabilityDashboardOptionsResponse}
     */
    getDeliverabilityDashboardOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeliverabilityDashboardOptionsResponse;
      return this.apiClient.callApi(
        '/v2/email/deliverability-dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliverabilityTestReport operation.
     * @callback module:api/DefaultApi~getDeliverabilityTestReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeliverabilityTestReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the results of a predictive inbox placement test.
     * @param {String} reportId A unique string that identifies the predictive inbox placement test.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeliverabilityTestReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeliverabilityTestReportResponse}
     */
    getDeliverabilityTestReport(reportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getDeliverabilityTestReport");
      }

      let pathParams = {
        'ReportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeliverabilityTestReportResponse;
      return this.apiClient.callApi(
        '/v2/email/deliverability-dashboard/test-reports/{ReportId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainDeliverabilityCampaign operation.
     * @callback module:api/DefaultApi~getDomainDeliverabilityCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomainDeliverabilityCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for.
     * @param {String} campaignId The unique identifier for the campaign. The Deliverability dashboard automatically generates and assigns this identifier to a campaign.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDomainDeliverabilityCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomainDeliverabilityCampaignResponse}
     */
    getDomainDeliverabilityCampaign(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getDomainDeliverabilityCampaign");
      }

      let pathParams = {
        'CampaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDomainDeliverabilityCampaignResponse;
      return this.apiClient.callApi(
        '/v2/email/deliverability-dashboard/campaigns/{CampaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainStatisticsReport operation.
     * @callback module:api/DefaultApi~getDomainStatisticsReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomainStatisticsReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve inbox placement and engagement rates for the domains that you use to send email.
     * @param {String} domain The domain that you want to obtain deliverability metrics for.
     * @param {Date} startDate The first day (in Unix time) that you want to obtain domain deliverability metrics for.
     * @param {Date} endDate The last day (in Unix time) that you want to obtain domain deliverability metrics for. The <code>EndDate</code> that you specify has to be less than or equal to 30 days after the <code>StartDate</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDomainStatisticsReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomainStatisticsReportResponse}
     */
    getDomainStatisticsReport(domain, startDate, endDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainStatisticsReport");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getDomainStatisticsReport");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getDomainStatisticsReport");
      }

      let pathParams = {
        'Domain': domain
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDomainStatisticsReportResponse;
      return this.apiClient.callApi(
        '/v2/email/deliverability-dashboard/statistics-report/{Domain}#StartDate&EndDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailIdentity operation.
     * @callback module:api/DefaultApi~getEmailIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEmailIdentityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about a specific identity, including the identity's verification status, sending authorization policies, its DKIM authentication status, and its custom Mail-From settings.
     * @param {String} emailIdentity The email identity.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEmailIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEmailIdentityResponse}
     */
    getEmailIdentity(emailIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling getEmailIdentity");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEmailIdentityResponse;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailIdentityPolicies operation.
     * @callback module:api/DefaultApi~getEmailIdentityPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEmailIdentityPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} emailIdentity The email identity.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEmailIdentityPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEmailIdentityPoliciesResponse}
     */
    getEmailIdentityPolicies(emailIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling getEmailIdentityPolicies");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEmailIdentityPoliciesResponse;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplate operation.
     * @callback module:api/DefaultApi~getEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEmailTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Displays the template object (which includes the subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} templateName The name of the template.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEmailTemplateResponse}
     */
    getEmailTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling getEmailTemplate");
      }

      let pathParams = {
        'TemplateName': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEmailTemplateResponse;
      return this.apiClient.callApi(
        '/v2/email/templates/{TemplateName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImportJob operation.
     * @callback module:api/DefaultApi~getImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about an import job.
     * @param {String} jobId The ID of the import job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetImportJobResponse}
     */
    getImportJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getImportJob");
      }

      let pathParams = {
        'JobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetImportJobResponse;
      return this.apiClient.callApi(
        '/v2/email/import-jobs/{JobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuppressedDestination operation.
     * @callback module:api/DefaultApi~getSuppressedDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSuppressedDestinationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about a specific email address that's on the suppression list for your account.
     * @param {String} emailAddress The email address that's on the account suppression list.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSuppressedDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSuppressedDestinationResponse}
     */
    getSuppressedDestination(emailAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling getSuppressedDestination");
      }

      let pathParams = {
        'EmailAddress': emailAddress
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSuppressedDestinationResponse;
      return this.apiClient.callApi(
        '/v2/email/suppression/addresses/{EmailAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigurationSets operation.
     * @callback module:api/DefaultApi~listConfigurationSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfigurationSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>List all of the configuration sets associated with your account in the current region.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position in the list of configuration sets.
     * @param {Number} [pageSize] The number of results to show in a single call to <code>ListConfigurationSets</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.
     * @param {module:api/DefaultApi~listConfigurationSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfigurationSetsResponse}
     */
    listConfigurationSets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfigurationSetsResponse;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContactLists operation.
     * @callback module:api/DefaultApi~listContactListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContactListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the contact lists available.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [pageSize] Maximum number of contact lists to return at once. Use this parameter to paginate results. If additional contact lists exist beyond the specified limit, the <code>NextToken</code> element is sent in the response. Use the <code>NextToken</code> value in subsequent requests to retrieve additional lists.
     * @param {String} [nextToken] A string token indicating that there might be additional contact lists available to be listed. Use the token provided in the Response to use in the subsequent call to ListContactLists with the same parameters to retrieve the next page of contact lists.
     * @param {module:api/DefaultApi~listContactListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContactListsResponse}
     */
    listContactLists(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListContactListsResponse;
      return this.apiClient.callApi(
        '/v2/email/contact-lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContacts operation.
     * @callback module:api/DefaultApi~listContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContactsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the contacts present in a specific contact list.
     * @param {String} contactListName The name of the contact list.
     * @param {module:model/ListContactsRequest} listContactsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [pageSize] The number of contacts that may be returned at once, which is dependent on if there are more or less contacts than the value of the PageSize. Use this parameter to paginate results. If additional contacts exist beyond the specified limit, the <code>NextToken</code> element is sent in the response. Use the <code>NextToken</code> value in subsequent requests to retrieve additional contacts.
     * @param {String} [nextToken] A string token indicating that there might be additional contacts available to be listed. Use the token provided in the Response to use in the subsequent call to ListContacts with the same parameters to retrieve the next page of contacts.
     * @param {module:api/DefaultApi~listContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContactsResponse}
     */
    listContacts(contactListName, listContactsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listContactsRequest;
      // verify the required parameter 'contactListName' is set
      if (contactListName === undefined || contactListName === null) {
        throw new Error("Missing the required parameter 'contactListName' when calling listContacts");
      }
      // verify the required parameter 'listContactsRequest' is set
      if (listContactsRequest === undefined || listContactsRequest === null) {
        throw new Error("Missing the required parameter 'listContactsRequest' when calling listContacts");
      }

      let pathParams = {
        'ContactListName': contactListName
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListContactsResponse;
      return this.apiClient.callApi(
        '/v2/email/contact-lists/{ContactListName}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomVerificationEmailTemplates operation.
     * @callback module:api/DefaultApi~listCustomVerificationEmailTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCustomVerificationEmailTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the existing custom verification email templates for your account in the current Amazon Web Services Region.</p> <p>For more information about custom verification email templates, see <a href=\"https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\">Using custom verification email templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListCustomVerificationEmailTemplates</code> to indicate the position in the list of custom verification email templates.
     * @param {Number} [pageSize] <p>The number of results to show in a single call to <code>ListCustomVerificationEmailTemplates</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 1, and can be no more than 50.</p>
     * @param {module:api/DefaultApi~listCustomVerificationEmailTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCustomVerificationEmailTemplatesResponse}
     */
    listCustomVerificationEmailTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCustomVerificationEmailTemplatesResponse;
      return this.apiClient.callApi(
        '/v2/email/custom-verification-email-templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDedicatedIpPools operation.
     * @callback module:api/DefaultApi~listDedicatedIpPoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDedicatedIpPoolsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of the dedicated IP pools that exist in your Amazon Web Services account in the current Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListDedicatedIpPools</code> to indicate the position in the list of dedicated IP pools.
     * @param {Number} [pageSize] The number of results to show in a single call to <code>ListDedicatedIpPools</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.
     * @param {module:api/DefaultApi~listDedicatedIpPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDedicatedIpPoolsResponse}
     */
    listDedicatedIpPools(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDedicatedIpPoolsResponse;
      return this.apiClient.callApi(
        '/v2/email/dedicated-ip-pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeliverabilityTestReports operation.
     * @callback module:api/DefaultApi~listDeliverabilityTestReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeliverabilityTestReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a list of the predictive inbox placement tests that you've performed, regardless of their statuses. For predictive inbox placement tests that are complete, you can use the <code>GetDeliverabilityTestReport</code> operation to view the results.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListDeliverabilityTestReports</code> to indicate the position in the list of predictive inbox placement tests.
     * @param {Number} [pageSize] <p>The number of results to show in a single call to <code>ListDeliverabilityTestReports</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 0, and can be no more than 1000.</p>
     * @param {module:api/DefaultApi~listDeliverabilityTestReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeliverabilityTestReportsResponse}
     */
    listDeliverabilityTestReports(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDeliverabilityTestReportsResponse;
      return this.apiClient.callApi(
        '/v2/email/deliverability-dashboard/test-reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomainDeliverabilityCampaigns operation.
     * @callback module:api/DefaultApi~listDomainDeliverabilityCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainDeliverabilityCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard for the domain.
     * @param {Date} startDate The first day that you want to obtain deliverability data for.
     * @param {Date} endDate The last day that you want to obtain deliverability data for. This value has to be less than or equal to 30 days after the value of the <code>StartDate</code> parameter.
     * @param {String} subscribedDomain The domain to obtain deliverability data for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token that’s returned from a previous call to the <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the position of a campaign in the list of campaigns.
     * @param {Number} [pageSize] The maximum number of results to include in response to a single call to the <code>ListDomainDeliverabilityCampaigns</code> operation. If the number of results is larger than the number that you specify in this parameter, the response includes a <code>NextToken</code> element, which you can use to obtain additional results.
     * @param {module:api/DefaultApi~listDomainDeliverabilityCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainDeliverabilityCampaignsResponse}
     */
    listDomainDeliverabilityCampaigns(startDate, endDate, subscribedDomain, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling listDomainDeliverabilityCampaigns");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling listDomainDeliverabilityCampaigns");
      }
      // verify the required parameter 'subscribedDomain' is set
      if (subscribedDomain === undefined || subscribedDomain === null) {
        throw new Error("Missing the required parameter 'subscribedDomain' when calling listDomainDeliverabilityCampaigns");
      }

      let pathParams = {
        'SubscribedDomain': subscribedDomain
      };
      let queryParams = {
        'StartDate': startDate,
        'EndDate': endDate,
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDomainDeliverabilityCampaignsResponse;
      return this.apiClient.callApi(
        '/v2/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns#StartDate&EndDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEmailIdentities operation.
     * @callback module:api/DefaultApi~listEmailIdentitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEmailIdentitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all of the email identities that are associated with your Amazon Web Services account. An identity can be either an email address or a domain. This operation returns identities that are verified as well as those that aren't. This operation returns identities that are associated with Amazon SES and Amazon Pinpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListEmailIdentities</code> to indicate the position in the list of identities.
     * @param {Number} [pageSize] <p>The number of results to show in a single call to <code>ListEmailIdentities</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 0, and can be no more than 1000.</p>
     * @param {module:api/DefaultApi~listEmailIdentitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEmailIdentitiesResponse}
     */
    listEmailIdentities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEmailIdentitiesResponse;
      return this.apiClient.callApi(
        '/v2/email/identities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEmailTemplates operation.
     * @callback module:api/DefaultApi~listEmailTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEmailTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the email templates present in your Amazon SES account in the current Amazon Web Services Region.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token returned from a previous call to <code>ListEmailTemplates</code> to indicate the position in the list of email templates.
     * @param {Number} [pageSize] <p>The number of results to show in a single call to <code>ListEmailTemplates</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 1, and can be no more than 10.</p>
     * @param {module:api/DefaultApi~listEmailTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEmailTemplatesResponse}
     */
    listEmailTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEmailTemplatesResponse;
      return this.apiClient.callApi(
        '/v2/email/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImportJobs operation.
     * @callback module:api/DefaultApi~listImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the import jobs.
     * @param {module:model/ListImportJobsRequest} listImportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A string token indicating that there might be additional import jobs available to be listed. Copy this token to a subsequent call to <code>ListImportJobs</code> with the same parameters to retrieve the next page of import jobs.
     * @param {Number} [pageSize] Maximum number of import jobs to return at once. Use this parameter to paginate results. If additional import jobs exist beyond the specified limit, the <code>NextToken</code> element is sent in the response. Use the <code>NextToken</code> value in subsequent requests to retrieve additional addresses.
     * @param {module:api/DefaultApi~listImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListImportJobsResponse}
     */
    listImportJobs(listImportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listImportJobsRequest;
      // verify the required parameter 'listImportJobsRequest' is set
      if (listImportJobsRequest === undefined || listImportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listImportJobsRequest' when calling listImportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListImportJobsResponse;
      return this.apiClient.callApi(
        '/v2/email/import-jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecommendations operation.
     * @callback module:api/DefaultApi~listRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the recommendations present in your Amazon SES account in the current Amazon Web Services Region.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {module:model/ListRecommendationsRequest} listRecommendationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRecommendationsResponse}
     */
    listRecommendations(listRecommendationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRecommendationsRequest;
      // verify the required parameter 'listRecommendationsRequest' is set
      if (listRecommendationsRequest === undefined || listRecommendationsRequest === null) {
        throw new Error("Missing the required parameter 'listRecommendationsRequest' when calling listRecommendations");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRecommendationsResponse;
      return this.apiClient.callApi(
        '/v2/email/vdm/recommendations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSuppressedDestinations operation.
     * @callback module:api/DefaultApi~listSuppressedDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSuppressedDestinationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of email addresses that are on the suppression list for your account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/SuppressionListReason>} [reason] The factors that caused the email address to be added to .
     * @param {Date} [startDate] Used to filter the list of suppressed email destinations so that it only includes addresses that were added to the list after a specific date.
     * @param {Date} [endDate] Used to filter the list of suppressed email destinations so that it only includes addresses that were added to the list before a specific date.
     * @param {String} [nextToken] A token returned from a previous call to <code>ListSuppressedDestinations</code> to indicate the position in the list of suppressed email addresses.
     * @param {Number} [pageSize] The number of results to show in a single call to <code>ListSuppressedDestinations</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.
     * @param {module:api/DefaultApi~listSuppressedDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSuppressedDestinationsResponse}
     */
    listSuppressedDestinations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Reason': this.apiClient.buildCollectionParam(opts['reason'], 'multi'),
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'NextToken': opts['nextToken'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSuppressedDestinationsResponse;
      return this.apiClient.callApi(
        '/v2/email/suppression/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of the tags (keys and values) that are associated with a specified resource. A <i>tag</i> is a label that you optionally define and associate with a resource. Each tag consists of a required <i>tag key</i> and an optional associated <i>tag value</i>. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource that you want to retrieve tag information for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceArn': resourceArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/v2/email/tags#ResourceArn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAccountDedicatedIpWarmupAttributes operation.
     * @callback module:api/DefaultApi~putAccountDedicatedIpWarmupAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable the automatic warm-up feature for dedicated IP addresses.
     * @param {module:model/PutAccountDedicatedIpWarmupAttributesRequest} putAccountDedicatedIpWarmupAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAccountDedicatedIpWarmupAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAccountDedicatedIpWarmupAttributes(putAccountDedicatedIpWarmupAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAccountDedicatedIpWarmupAttributesRequest;
      // verify the required parameter 'putAccountDedicatedIpWarmupAttributesRequest' is set
      if (putAccountDedicatedIpWarmupAttributesRequest === undefined || putAccountDedicatedIpWarmupAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putAccountDedicatedIpWarmupAttributesRequest' when calling putAccountDedicatedIpWarmupAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/account/dedicated-ips/warmup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAccountDetails operation.
     * @callback module:api/DefaultApi~putAccountDetailsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update your Amazon SES account details.
     * @param {module:model/PutAccountDetailsRequest} putAccountDetailsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAccountDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAccountDetails(putAccountDetailsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAccountDetailsRequest;
      // verify the required parameter 'putAccountDetailsRequest' is set
      if (putAccountDetailsRequest === undefined || putAccountDetailsRequest === null) {
        throw new Error("Missing the required parameter 'putAccountDetailsRequest' when calling putAccountDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/account/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAccountSendingAttributes operation.
     * @callback module:api/DefaultApi~putAccountSendingAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable the ability of your account to send email.
     * @param {module:model/PutAccountSendingAttributesRequest} putAccountSendingAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAccountSendingAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAccountSendingAttributes(putAccountSendingAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAccountSendingAttributesRequest;
      // verify the required parameter 'putAccountSendingAttributesRequest' is set
      if (putAccountSendingAttributesRequest === undefined || putAccountSendingAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putAccountSendingAttributesRequest' when calling putAccountSendingAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/account/sending', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAccountSuppressionAttributes operation.
     * @callback module:api/DefaultApi~putAccountSuppressionAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the settings for the account-level suppression list.
     * @param {module:model/PutAccountSuppressionAttributesRequest} putAccountSuppressionAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAccountSuppressionAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAccountSuppressionAttributes(putAccountSuppressionAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAccountSuppressionAttributesRequest;
      // verify the required parameter 'putAccountSuppressionAttributesRequest' is set
      if (putAccountSuppressionAttributesRequest === undefined || putAccountSuppressionAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putAccountSuppressionAttributesRequest' when calling putAccountSuppressionAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/account/suppression', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAccountVdmAttributes operation.
     * @callback module:api/DefaultApi~putAccountVdmAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update your Amazon SES account VDM attributes.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {module:model/PutAccountVdmAttributesRequest} putAccountVdmAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAccountVdmAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAccountVdmAttributes(putAccountVdmAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAccountVdmAttributesRequest;
      // verify the required parameter 'putAccountVdmAttributesRequest' is set
      if (putAccountVdmAttributesRequest === undefined || putAccountVdmAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putAccountVdmAttributesRequest' when calling putAccountVdmAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/account/vdm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetDeliveryOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetDeliveryOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools to create groups of dedicated IP addresses for sending specific types of email.
     * @param {String} configurationSetName The name of the configuration set to associate with a dedicated IP pool.
     * @param {module:model/PutConfigurationSetDeliveryOptionsRequest} putConfigurationSetDeliveryOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetDeliveryOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetDeliveryOptions(configurationSetName, putConfigurationSetDeliveryOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetDeliveryOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetDeliveryOptions");
      }
      // verify the required parameter 'putConfigurationSetDeliveryOptionsRequest' is set
      if (putConfigurationSetDeliveryOptionsRequest === undefined || putConfigurationSetDeliveryOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetDeliveryOptionsRequest' when calling putConfigurationSetDeliveryOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/delivery-options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetReputationOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetReputationOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable collection of reputation metrics for emails that you send using a particular configuration set in a specific Amazon Web Services Region.
     * @param {String} configurationSetName The name of the configuration set.
     * @param {module:model/PutConfigurationSetReputationOptionsRequest} putConfigurationSetReputationOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetReputationOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetReputationOptions(configurationSetName, putConfigurationSetReputationOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetReputationOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetReputationOptions");
      }
      // verify the required parameter 'putConfigurationSetReputationOptionsRequest' is set
      if (putConfigurationSetReputationOptionsRequest === undefined || putConfigurationSetReputationOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetReputationOptionsRequest' when calling putConfigurationSetReputationOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/reputation-options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetSendingOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetSendingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable email sending for messages that use a particular configuration set in a specific Amazon Web Services Region.
     * @param {String} configurationSetName The name of the configuration set to enable or disable email sending for.
     * @param {module:model/PutConfigurationSetSendingOptionsRequest} putConfigurationSetSendingOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetSendingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetSendingOptions(configurationSetName, putConfigurationSetSendingOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetSendingOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetSendingOptions");
      }
      // verify the required parameter 'putConfigurationSetSendingOptionsRequest' is set
      if (putConfigurationSetSendingOptionsRequest === undefined || putConfigurationSetSendingOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetSendingOptionsRequest' when calling putConfigurationSetSendingOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/sending', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetSuppressionOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetSuppressionOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specify the account suppression list preferences for a configuration set.
     * @param {String} configurationSetName The name of the configuration set to change the suppression list preferences for.
     * @param {module:model/PutConfigurationSetSuppressionOptionsRequest} putConfigurationSetSuppressionOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetSuppressionOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetSuppressionOptions(configurationSetName, putConfigurationSetSuppressionOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetSuppressionOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetSuppressionOptions");
      }
      // verify the required parameter 'putConfigurationSetSuppressionOptionsRequest' is set
      if (putConfigurationSetSuppressionOptionsRequest === undefined || putConfigurationSetSuppressionOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetSuppressionOptionsRequest' when calling putConfigurationSetSuppressionOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/suppression-options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetTrackingOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetTrackingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specify a custom domain to use for open and click tracking elements in email that you send.
     * @param {String} configurationSetName The name of the configuration set.
     * @param {module:model/PutConfigurationSetTrackingOptionsRequest} putConfigurationSetTrackingOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetTrackingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetTrackingOptions(configurationSetName, putConfigurationSetTrackingOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetTrackingOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetTrackingOptions");
      }
      // verify the required parameter 'putConfigurationSetTrackingOptionsRequest' is set
      if (putConfigurationSetTrackingOptionsRequest === undefined || putConfigurationSetTrackingOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetTrackingOptionsRequest' when calling putConfigurationSetTrackingOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/tracking-options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigurationSetVdmOptions operation.
     * @callback module:api/DefaultApi~putConfigurationSetVdmOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Specify VDM preferences for email that you send using the configuration set.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} configurationSetName The name of the configuration set.
     * @param {module:model/PutConfigurationSetVdmOptionsRequest} putConfigurationSetVdmOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putConfigurationSetVdmOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putConfigurationSetVdmOptions(configurationSetName, putConfigurationSetVdmOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putConfigurationSetVdmOptionsRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling putConfigurationSetVdmOptions");
      }
      // verify the required parameter 'putConfigurationSetVdmOptionsRequest' is set
      if (putConfigurationSetVdmOptionsRequest === undefined || putConfigurationSetVdmOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putConfigurationSetVdmOptionsRequest' when calling putConfigurationSetVdmOptions");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/vdm-options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDedicatedIpInPool operation.
     * @callback module:api/DefaultApi~putDedicatedIpInPoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Move a dedicated IP address to an existing dedicated IP pool.</p> <note> <p>The dedicated IP address that you specify must already exist, and must be associated with your Amazon Web Services account. </p> <p>The dedicated IP pool you specify must already exist. You can create a new pool by using the <code>CreateDedicatedIpPool</code> operation.</p> </note>
     * @param {String} IP The IP address that you want to move to the dedicated IP pool. The value you specify has to be a dedicated IP address that's associated with your Amazon Web Services account.
     * @param {module:model/PutDedicatedIpInPoolRequest} putDedicatedIpInPoolRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putDedicatedIpInPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putDedicatedIpInPool(IP, putDedicatedIpInPoolRequest, opts, callback) {
      opts = opts || {};
      let postBody = putDedicatedIpInPoolRequest;
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling putDedicatedIpInPool");
      }
      // verify the required parameter 'putDedicatedIpInPoolRequest' is set
      if (putDedicatedIpInPoolRequest === undefined || putDedicatedIpInPoolRequest === null) {
        throw new Error("Missing the required parameter 'putDedicatedIpInPoolRequest' when calling putDedicatedIpInPool");
      }

      let pathParams = {
        'IP': IP
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/dedicated-ips/{IP}/pool', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDedicatedIpPoolScalingAttributes operation.
     * @callback module:api/DefaultApi~putDedicatedIpPoolScalingAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Used to convert a dedicated IP pool to a different scaling mode.</p> <note> <p> <code>MANAGED</code> pools cannot be converted to <code>STANDARD</code> scaling mode.</p> </note>
     * @param {String} poolName The name of the dedicated IP pool.
     * @param {module:model/PutDedicatedIpPoolScalingAttributesRequest} putDedicatedIpPoolScalingAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putDedicatedIpPoolScalingAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putDedicatedIpPoolScalingAttributes(poolName, putDedicatedIpPoolScalingAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putDedicatedIpPoolScalingAttributesRequest;
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling putDedicatedIpPoolScalingAttributes");
      }
      // verify the required parameter 'putDedicatedIpPoolScalingAttributesRequest' is set
      if (putDedicatedIpPoolScalingAttributesRequest === undefined || putDedicatedIpPoolScalingAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putDedicatedIpPoolScalingAttributesRequest' when calling putDedicatedIpPoolScalingAttributes");
      }

      let pathParams = {
        'PoolName': poolName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/dedicated-ip-pools/{PoolName}/scaling', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDedicatedIpWarmupAttributes operation.
     * @callback module:api/DefaultApi~putDedicatedIpWarmupAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p/>
     * @param {String} IP The dedicated IP address that you want to update the warm-up attributes for.
     * @param {module:model/PutDedicatedIpWarmupAttributesRequest} putDedicatedIpWarmupAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putDedicatedIpWarmupAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putDedicatedIpWarmupAttributes(IP, putDedicatedIpWarmupAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putDedicatedIpWarmupAttributesRequest;
      // verify the required parameter 'IP' is set
      if (IP === undefined || IP === null) {
        throw new Error("Missing the required parameter 'IP' when calling putDedicatedIpWarmupAttributes");
      }
      // verify the required parameter 'putDedicatedIpWarmupAttributesRequest' is set
      if (putDedicatedIpWarmupAttributesRequest === undefined || putDedicatedIpWarmupAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putDedicatedIpWarmupAttributesRequest' when calling putDedicatedIpWarmupAttributes");
      }

      let pathParams = {
        'IP': IP
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/dedicated-ips/{IP}/warmup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDeliverabilityDashboardOption operation.
     * @callback module:api/DefaultApi~putDeliverabilityDashboardOptionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more information about the features and cost of a Deliverability dashboard subscription, see <a href=\"http://aws.amazon.com/ses/pricing/\">Amazon SES Pricing</a>.</p>
     * @param {module:model/PutDeliverabilityDashboardOptionRequest} putDeliverabilityDashboardOptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putDeliverabilityDashboardOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putDeliverabilityDashboardOption(putDeliverabilityDashboardOptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = putDeliverabilityDashboardOptionRequest;
      // verify the required parameter 'putDeliverabilityDashboardOptionRequest' is set
      if (putDeliverabilityDashboardOptionRequest === undefined || putDeliverabilityDashboardOptionRequest === null) {
        throw new Error("Missing the required parameter 'putDeliverabilityDashboardOptionRequest' when calling putDeliverabilityDashboardOption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/deliverability-dashboard', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailIdentityConfigurationSetAttributes operation.
     * @callback module:api/DefaultApi~putEmailIdentityConfigurationSetAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to associate a configuration set with an email identity.
     * @param {String} emailIdentity The email address or domain to associate with a configuration set.
     * @param {module:model/PutEmailIdentityConfigurationSetAttributesRequest} putEmailIdentityConfigurationSetAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEmailIdentityConfigurationSetAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putEmailIdentityConfigurationSetAttributes(emailIdentity, putEmailIdentityConfigurationSetAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEmailIdentityConfigurationSetAttributesRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling putEmailIdentityConfigurationSetAttributes");
      }
      // verify the required parameter 'putEmailIdentityConfigurationSetAttributesRequest' is set
      if (putEmailIdentityConfigurationSetAttributesRequest === undefined || putEmailIdentityConfigurationSetAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putEmailIdentityConfigurationSetAttributesRequest' when calling putEmailIdentityConfigurationSetAttributes");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}/configuration-set', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailIdentityDkimAttributes operation.
     * @callback module:api/DefaultApi~putEmailIdentityDkimAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to enable or disable DKIM authentication for an email identity.
     * @param {String} emailIdentity The email identity.
     * @param {module:model/PutEmailIdentityDkimAttributesRequest} putEmailIdentityDkimAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEmailIdentityDkimAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putEmailIdentityDkimAttributes(emailIdentity, putEmailIdentityDkimAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEmailIdentityDkimAttributesRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling putEmailIdentityDkimAttributes");
      }
      // verify the required parameter 'putEmailIdentityDkimAttributesRequest' is set
      if (putEmailIdentityDkimAttributesRequest === undefined || putEmailIdentityDkimAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putEmailIdentityDkimAttributesRequest' when calling putEmailIdentityDkimAttributes");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}/dkim', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailIdentityDkimSigningAttributes operation.
     * @callback module:api/DefaultApi~putEmailIdentityDkimSigningAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutEmailIdentityDkimSigningAttributesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Used to configure or change the DKIM authentication settings for an email domain identity. You can use this operation to do any of the following:</p> <ul> <li> <p>Update the signing attributes for an identity that uses Bring Your Own DKIM (BYODKIM).</p> </li> <li> <p>Update the key length that should be used for Easy DKIM.</p> </li> <li> <p>Change from using no DKIM authentication to using Easy DKIM.</p> </li> <li> <p>Change from using no DKIM authentication to using BYODKIM.</p> </li> <li> <p>Change from using Easy DKIM to using BYODKIM.</p> </li> <li> <p>Change from using BYODKIM to using Easy DKIM.</p> </li> </ul>
     * @param {String} emailIdentity The email identity.
     * @param {module:model/PutEmailIdentityDkimSigningAttributesRequest} putEmailIdentityDkimSigningAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEmailIdentityDkimSigningAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutEmailIdentityDkimSigningAttributesResponse}
     */
    putEmailIdentityDkimSigningAttributes(emailIdentity, putEmailIdentityDkimSigningAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEmailIdentityDkimSigningAttributesRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling putEmailIdentityDkimSigningAttributes");
      }
      // verify the required parameter 'putEmailIdentityDkimSigningAttributesRequest' is set
      if (putEmailIdentityDkimSigningAttributesRequest === undefined || putEmailIdentityDkimSigningAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putEmailIdentityDkimSigningAttributesRequest' when calling putEmailIdentityDkimSigningAttributes");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutEmailIdentityDkimSigningAttributesResponse;
      return this.apiClient.callApi(
        '/v1/email/identities/{EmailIdentity}/dkim/signing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailIdentityFeedbackAttributes operation.
     * @callback module:api/DefaultApi~putEmailIdentityFeedbackAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Used to enable or disable feedback forwarding for an identity. This setting determines what happens when an identity is used to send an email that results in a bounce or complaint event.</p> <p>If the value is <code>true</code>, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the <code>Return-Path</code> header of the original email.</p> <p>You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).</p>
     * @param {String} emailIdentity The email identity.
     * @param {module:model/PutEmailIdentityFeedbackAttributesRequest} putEmailIdentityFeedbackAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEmailIdentityFeedbackAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putEmailIdentityFeedbackAttributes(emailIdentity, putEmailIdentityFeedbackAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEmailIdentityFeedbackAttributesRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling putEmailIdentityFeedbackAttributes");
      }
      // verify the required parameter 'putEmailIdentityFeedbackAttributesRequest' is set
      if (putEmailIdentityFeedbackAttributesRequest === undefined || putEmailIdentityFeedbackAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putEmailIdentityFeedbackAttributesRequest' when calling putEmailIdentityFeedbackAttributes");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}/feedback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailIdentityMailFromAttributes operation.
     * @callback module:api/DefaultApi~putEmailIdentityMailFromAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to enable or disable the custom Mail-From domain configuration for an email identity.
     * @param {String} emailIdentity The verified email identity.
     * @param {module:model/PutEmailIdentityMailFromAttributesRequest} putEmailIdentityMailFromAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEmailIdentityMailFromAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putEmailIdentityMailFromAttributes(emailIdentity, putEmailIdentityMailFromAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEmailIdentityMailFromAttributesRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling putEmailIdentityMailFromAttributes");
      }
      // verify the required parameter 'putEmailIdentityMailFromAttributesRequest' is set
      if (putEmailIdentityMailFromAttributesRequest === undefined || putEmailIdentityMailFromAttributesRequest === null) {
        throw new Error("Missing the required parameter 'putEmailIdentityMailFromAttributesRequest' when calling putEmailIdentityMailFromAttributes");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}/mail-from', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSuppressedDestination operation.
     * @callback module:api/DefaultApi~putSuppressedDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an email address to the suppression list for your account.
     * @param {module:model/PutSuppressedDestinationRequest} putSuppressedDestinationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putSuppressedDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putSuppressedDestination(putSuppressedDestinationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putSuppressedDestinationRequest;
      // verify the required parameter 'putSuppressedDestinationRequest' is set
      if (putSuppressedDestinationRequest === undefined || putSuppressedDestinationRequest === null) {
        throw new Error("Missing the required parameter 'putSuppressedDestinationRequest' when calling putSuppressedDestination");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/suppression/addresses', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendBulkEmail operation.
     * @callback module:api/DefaultApi~sendBulkEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendBulkEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Composes an email message to multiple destinations.
     * @param {module:model/SendBulkEmailRequest} sendBulkEmailRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendBulkEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendBulkEmailResponse}
     */
    sendBulkEmail(sendBulkEmailRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendBulkEmailRequest;
      // verify the required parameter 'sendBulkEmailRequest' is set
      if (sendBulkEmailRequest === undefined || sendBulkEmailRequest === null) {
        throw new Error("Missing the required parameter 'sendBulkEmailRequest' when calling sendBulkEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendBulkEmailResponse;
      return this.apiClient.callApi(
        '/v2/email/outbound-bulk-emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendCustomVerificationEmail operation.
     * @callback module:api/DefaultApi~sendCustomVerificationEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendCustomVerificationEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds an email address to the list of identities for your Amazon SES account in the current Amazon Web Services Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href=\"https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\">Using custom verification email templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {module:model/SendCustomVerificationEmailRequest} sendCustomVerificationEmailRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendCustomVerificationEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendCustomVerificationEmailResponse}
     */
    sendCustomVerificationEmail(sendCustomVerificationEmailRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendCustomVerificationEmailRequest;
      // verify the required parameter 'sendCustomVerificationEmailRequest' is set
      if (sendCustomVerificationEmailRequest === undefined || sendCustomVerificationEmailRequest === null) {
        throw new Error("Missing the required parameter 'sendCustomVerificationEmailRequest' when calling sendCustomVerificationEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendCustomVerificationEmailResponse;
      return this.apiClient.callApi(
        '/v2/email/outbound-custom-verification-emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmail operation.
     * @callback module:api/DefaultApi~sendEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sends an email message. You can use the Amazon SES API v2 to send the following types of messages:</p> <ul> <li> <p> <b>Simple</b> – A standard email message. When you create this type of message, you specify the sender, the recipient, and the message body, and Amazon SES assembles the message for you.</p> </li> <li> <p> <b>Raw</b> – A raw, MIME-formatted email message. When you send this type of email, you have to specify all of the message headers, as well as the message body. You can use this message type to send messages that contain attachments. The message that you specify has to be a valid MIME message.</p> </li> <li> <p> <b>Templated</b> – A message that contains personalization tags. When you send this type of email, Amazon SES API v2 automatically replaces the tags with values that you specify.</p> </li> </ul>
     * @param {module:model/SendEmailRequest} sendEmailRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailResponse}
     */
    sendEmail(sendEmailRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendEmailRequest;
      // verify the required parameter 'sendEmailRequest' is set
      if (sendEmailRequest === undefined || sendEmailRequest === null) {
        throw new Error("Missing the required parameter 'sendEmailRequest' when calling sendEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendEmailResponse;
      return this.apiClient.callApi(
        '/v2/email/outbound-emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Add one or more tags (keys and values) to a specified resource. A <i>tag</i> is a label that you optionally define and associate with a resource. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags.</p> <p>Each tag consists of a required <i>tag key</i> and an associated <i>tag value</i>, both of which you define. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.</p>
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testRenderEmailTemplate operation.
     * @callback module:api/DefaultApi~testRenderEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRenderEmailTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} templateName The name of the template.
     * @param {module:model/TestRenderEmailTemplateRequest} testRenderEmailTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~testRenderEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRenderEmailTemplateResponse}
     */
    testRenderEmailTemplate(templateName, testRenderEmailTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = testRenderEmailTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling testRenderEmailTemplate");
      }
      // verify the required parameter 'testRenderEmailTemplateRequest' is set
      if (testRenderEmailTemplateRequest === undefined || testRenderEmailTemplateRequest === null) {
        throw new Error("Missing the required parameter 'testRenderEmailTemplateRequest' when calling testRenderEmailTemplate");
      }

      let pathParams = {
        'TemplateName': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestRenderEmailTemplateResponse;
      return this.apiClient.callApi(
        '/v2/email/templates/{TemplateName}/render', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove one or more tags (keys and values) from a specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource that you want to remove one or more tags from.
     * @param {Array.<String>} tagKeys <p>The tags (tag keys) that you want to remove from the resource. When you specify a tag key, the action removes both that key and its associated tag value.</p> <p>To remove more than one tag from the resource, append the <code>TagKeys</code> parameter and argument for each additional tag to remove, separated by an ampersand. For example: <code>/v2/email/tags?ResourceArn=ResourceArn&amp;TagKeys=Key1&amp;TagKeys=Key2</code> </p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceArn': resourceArn,
        'TagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/tags#ResourceArn&TagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfigurationSetEventDestination operation.
     * @callback module:api/DefaultApi~updateConfigurationSetEventDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update the configuration of an event destination for a configuration set.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
     * @param {String} configurationSetName The name of the configuration set that contains the event destination to modify.
     * @param {String} eventDestinationName The name of the event destination.
     * @param {module:model/UpdateConfigurationSetEventDestinationRequest} updateConfigurationSetEventDestinationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfigurationSetEventDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateConfigurationSetEventDestination(configurationSetName, eventDestinationName, updateConfigurationSetEventDestinationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfigurationSetEventDestinationRequest;
      // verify the required parameter 'configurationSetName' is set
      if (configurationSetName === undefined || configurationSetName === null) {
        throw new Error("Missing the required parameter 'configurationSetName' when calling updateConfigurationSetEventDestination");
      }
      // verify the required parameter 'eventDestinationName' is set
      if (eventDestinationName === undefined || eventDestinationName === null) {
        throw new Error("Missing the required parameter 'eventDestinationName' when calling updateConfigurationSetEventDestination");
      }
      // verify the required parameter 'updateConfigurationSetEventDestinationRequest' is set
      if (updateConfigurationSetEventDestinationRequest === undefined || updateConfigurationSetEventDestinationRequest === null) {
        throw new Error("Missing the required parameter 'updateConfigurationSetEventDestinationRequest' when calling updateConfigurationSetEventDestination");
      }

      let pathParams = {
        'ConfigurationSetName': configurationSetName,
        'EventDestinationName': eventDestinationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact operation.
     * @callback module:api/DefaultApi~updateContactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a contact's preferences for a list. It is not necessary to specify all existing topic preferences in the TopicPreferences object, just the ones that need updating.
     * @param {String} contactListName The name of the contact list.
     * @param {String} emailAddress The contact's email address.
     * @param {module:model/UpdateContactRequest} updateContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContact(contactListName, emailAddress, updateContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactRequest;
      // verify the required parameter 'contactListName' is set
      if (contactListName === undefined || contactListName === null) {
        throw new Error("Missing the required parameter 'contactListName' when calling updateContact");
      }
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling updateContact");
      }
      // verify the required parameter 'updateContactRequest' is set
      if (updateContactRequest === undefined || updateContactRequest === null) {
        throw new Error("Missing the required parameter 'updateContactRequest' when calling updateContact");
      }

      let pathParams = {
        'ContactListName': contactListName,
        'EmailAddress': emailAddress
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactList operation.
     * @callback module:api/DefaultApi~updateContactListCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates contact list metadata. This operation does a complete replacement.
     * @param {String} contactListName The name of the contact list.
     * @param {module:model/UpdateContactListRequest} updateContactListRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContactList(contactListName, updateContactListRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactListRequest;
      // verify the required parameter 'contactListName' is set
      if (contactListName === undefined || contactListName === null) {
        throw new Error("Missing the required parameter 'contactListName' when calling updateContactList");
      }
      // verify the required parameter 'updateContactListRequest' is set
      if (updateContactListRequest === undefined || updateContactListRequest === null) {
        throw new Error("Missing the required parameter 'updateContactListRequest' when calling updateContactList");
      }

      let pathParams = {
        'ContactListName': contactListName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/contact-lists/{ContactListName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomVerificationEmailTemplate operation.
     * @callback module:api/DefaultApi~updateCustomVerificationEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href=\"https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\">Using custom verification email templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} templateName The name of the custom verification email template that you want to update.
     * @param {module:model/UpdateCustomVerificationEmailTemplateRequest} updateCustomVerificationEmailTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateCustomVerificationEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCustomVerificationEmailTemplate(templateName, updateCustomVerificationEmailTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateCustomVerificationEmailTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling updateCustomVerificationEmailTemplate");
      }
      // verify the required parameter 'updateCustomVerificationEmailTemplateRequest' is set
      if (updateCustomVerificationEmailTemplateRequest === undefined || updateCustomVerificationEmailTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateCustomVerificationEmailTemplateRequest' when calling updateCustomVerificationEmailTemplate");
      }

      let pathParams = {
        'TemplateName': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/custom-verification-email-templates/{TemplateName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailIdentityPolicy operation.
     * @callback module:api/DefaultApi~updateEmailIdentityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} emailIdentity The email identity.
     * @param {String} policyName <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
     * @param {module:model/UpdateEmailIdentityPolicyRequest} updateEmailIdentityPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEmailIdentityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateEmailIdentityPolicy(emailIdentity, policyName, updateEmailIdentityPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEmailIdentityPolicyRequest;
      // verify the required parameter 'emailIdentity' is set
      if (emailIdentity === undefined || emailIdentity === null) {
        throw new Error("Missing the required parameter 'emailIdentity' when calling updateEmailIdentityPolicy");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling updateEmailIdentityPolicy");
      }
      // verify the required parameter 'updateEmailIdentityPolicyRequest' is set
      if (updateEmailIdentityPolicyRequest === undefined || updateEmailIdentityPolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateEmailIdentityPolicyRequest' when calling updateEmailIdentityPolicy");
      }

      let pathParams = {
        'EmailIdentity': emailIdentity,
        'PolicyName': policyName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/identities/{EmailIdentity}/policies/{PolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailTemplate operation.
     * @callback module:api/DefaultApi~updateEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html\">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
     * @param {String} templateName The name of the template.
     * @param {module:model/UpdateEmailTemplateRequest} updateEmailTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateEmailTemplate(templateName, updateEmailTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEmailTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling updateEmailTemplate");
      }
      // verify the required parameter 'updateEmailTemplateRequest' is set
      if (updateEmailTemplateRequest === undefined || updateEmailTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateEmailTemplateRequest' when calling updateEmailTemplate");
      }

      let pathParams = {
        'TemplateName': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/email/templates/{TemplateName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
