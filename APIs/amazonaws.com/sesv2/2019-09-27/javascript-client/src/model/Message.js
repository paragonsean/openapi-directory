/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageBody from './MessageBody';
import MessageSubject from './MessageSubject';

/**
 * The Message model module.
 * @module model/Message
 * @version 2019-09-27
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * Represents the email message that you&#39;re sending. The &lt;code&gt;Message&lt;/code&gt; object consists of a subject line and a message body.
     * @alias module:model/Message
     * @param subject {module:model/MessageSubject} 
     * @param body {module:model/MessageBody} 
     */
    constructor(subject, body) { 
        
        Message.initialize(this, subject, body);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subject, body) { 
        obj['Subject'] = subject;
        obj['Body'] = body;
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = MessageSubject.constructFromObject(data['Subject']);
            }
            if (data.hasOwnProperty('Body')) {
                obj['Body'] = MessageBody.constructFromObject(data['Body']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Message.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Subject`
        if (data['Subject']) { // data not null
          MessageSubject.validateJSON(data['Subject']);
        }
        // validate the optional field `Body`
        if (data['Body']) { // data not null
          MessageBody.validateJSON(data['Body']);
        }

        return true;
    }


}

Message.RequiredProperties = ["Subject", "Body"];

/**
 * @member {module:model/MessageSubject} Subject
 */
Message.prototype['Subject'] = undefined;

/**
 * @member {module:model/MessageBody} Body
 */
Message.prototype['Body'] = undefined;






export default Message;

