/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateConfigurationSetEventDestinationRequestEventDestination from './CreateConfigurationSetEventDestinationRequestEventDestination';

/**
 * The CreateConfigurationSetEventDestinationRequest model module.
 * @module model/CreateConfigurationSetEventDestinationRequest
 * @version 2019-09-27
 */
class CreateConfigurationSetEventDestinationRequest {
    /**
     * Constructs a new <code>CreateConfigurationSetEventDestinationRequest</code>.
     * @alias module:model/CreateConfigurationSetEventDestinationRequest
     * @param eventDestinationName {String} <p>The name of an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
     * @param eventDestination {module:model/CreateConfigurationSetEventDestinationRequestEventDestination} 
     */
    constructor(eventDestinationName, eventDestination) { 
        
        CreateConfigurationSetEventDestinationRequest.initialize(this, eventDestinationName, eventDestination);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventDestinationName, eventDestination) { 
        obj['EventDestinationName'] = eventDestinationName;
        obj['EventDestination'] = eventDestination;
    }

    /**
     * Constructs a <code>CreateConfigurationSetEventDestinationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateConfigurationSetEventDestinationRequest} obj Optional instance to populate.
     * @return {module:model/CreateConfigurationSetEventDestinationRequest} The populated <code>CreateConfigurationSetEventDestinationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateConfigurationSetEventDestinationRequest();

            if (data.hasOwnProperty('EventDestinationName')) {
                obj['EventDestinationName'] = ApiClient.convertToType(data['EventDestinationName'], 'String');
            }
            if (data.hasOwnProperty('EventDestination')) {
                obj['EventDestination'] = CreateConfigurationSetEventDestinationRequestEventDestination.constructFromObject(data['EventDestination']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateConfigurationSetEventDestinationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateConfigurationSetEventDestinationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateConfigurationSetEventDestinationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['EventDestinationName'] && !(typeof data['EventDestinationName'] === 'string' || data['EventDestinationName'] instanceof String)) {
            throw new Error("Expected the field `EventDestinationName` to be a primitive type in the JSON string but got " + data['EventDestinationName']);
        }
        // validate the optional field `EventDestination`
        if (data['EventDestination']) { // data not null
          CreateConfigurationSetEventDestinationRequestEventDestination.validateJSON(data['EventDestination']);
        }

        return true;
    }


}

CreateConfigurationSetEventDestinationRequest.RequiredProperties = ["EventDestinationName", "EventDestination"];

/**
 * <p>The name of an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
 * @member {String} EventDestinationName
 */
CreateConfigurationSetEventDestinationRequest.prototype['EventDestinationName'] = undefined;

/**
 * @member {module:model/CreateConfigurationSetEventDestinationRequestEventDestination} EventDestination
 */
CreateConfigurationSetEventDestinationRequest.prototype['EventDestination'] = undefined;






export default CreateConfigurationSetEventDestinationRequest;

