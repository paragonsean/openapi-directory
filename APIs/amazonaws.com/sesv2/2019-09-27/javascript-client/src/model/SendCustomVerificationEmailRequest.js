/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SendCustomVerificationEmailRequest model module.
 * @module model/SendCustomVerificationEmailRequest
 * @version 2019-09-27
 */
class SendCustomVerificationEmailRequest {
    /**
     * Constructs a new <code>SendCustomVerificationEmailRequest</code>.
     * @alias module:model/SendCustomVerificationEmailRequest
     * @param emailAddress {String} The email address to verify.
     * @param templateName {String} The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
     */
    constructor(emailAddress, templateName) { 
        
        SendCustomVerificationEmailRequest.initialize(this, emailAddress, templateName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, emailAddress, templateName) { 
        obj['EmailAddress'] = emailAddress;
        obj['TemplateName'] = templateName;
    }

    /**
     * Constructs a <code>SendCustomVerificationEmailRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendCustomVerificationEmailRequest} obj Optional instance to populate.
     * @return {module:model/SendCustomVerificationEmailRequest} The populated <code>SendCustomVerificationEmailRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendCustomVerificationEmailRequest();

            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], 'String');
            }
            if (data.hasOwnProperty('TemplateName')) {
                obj['TemplateName'] = ApiClient.convertToType(data['TemplateName'], 'String');
            }
            if (data.hasOwnProperty('ConfigurationSetName')) {
                obj['ConfigurationSetName'] = ApiClient.convertToType(data['ConfigurationSetName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendCustomVerificationEmailRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendCustomVerificationEmailRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendCustomVerificationEmailRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['EmailAddress'] && !(typeof data['EmailAddress'] === 'string' || data['EmailAddress'] instanceof String)) {
            throw new Error("Expected the field `EmailAddress` to be a primitive type in the JSON string but got " + data['EmailAddress']);
        }
        // ensure the json data is a string
        if (data['TemplateName'] && !(typeof data['TemplateName'] === 'string' || data['TemplateName'] instanceof String)) {
            throw new Error("Expected the field `TemplateName` to be a primitive type in the JSON string but got " + data['TemplateName']);
        }
        // ensure the json data is a string
        if (data['ConfigurationSetName'] && !(typeof data['ConfigurationSetName'] === 'string' || data['ConfigurationSetName'] instanceof String)) {
            throw new Error("Expected the field `ConfigurationSetName` to be a primitive type in the JSON string but got " + data['ConfigurationSetName']);
        }

        return true;
    }


}

SendCustomVerificationEmailRequest.RequiredProperties = ["EmailAddress", "TemplateName"];

/**
 * The email address to verify.
 * @member {String} EmailAddress
 */
SendCustomVerificationEmailRequest.prototype['EmailAddress'] = undefined;

/**
 * The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
 * @member {String} TemplateName
 */
SendCustomVerificationEmailRequest.prototype['TemplateName'] = undefined;

/**
 * <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
 * @member {String} ConfigurationSetName
 */
SendCustomVerificationEmailRequest.prototype['ConfigurationSetName'] = undefined;






export default SendCustomVerificationEmailRequest;

