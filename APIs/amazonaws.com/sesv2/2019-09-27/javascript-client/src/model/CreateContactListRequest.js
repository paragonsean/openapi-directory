/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tag from './Tag';
import Topic from './Topic';

/**
 * The CreateContactListRequest model module.
 * @module model/CreateContactListRequest
 * @version 2019-09-27
 */
class CreateContactListRequest {
    /**
     * Constructs a new <code>CreateContactListRequest</code>.
     * @alias module:model/CreateContactListRequest
     * @param contactListName {String} The name of the contact list.
     */
    constructor(contactListName) { 
        
        CreateContactListRequest.initialize(this, contactListName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contactListName) { 
        obj['ContactListName'] = contactListName;
    }

    /**
     * Constructs a <code>CreateContactListRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateContactListRequest} obj Optional instance to populate.
     * @return {module:model/CreateContactListRequest} The populated <code>CreateContactListRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateContactListRequest();

            if (data.hasOwnProperty('ContactListName')) {
                obj['ContactListName'] = ApiClient.convertToType(data['ContactListName'], 'String');
            }
            if (data.hasOwnProperty('Topics')) {
                obj['Topics'] = ApiClient.convertToType(data['Topics'], [Topic]);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateContactListRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateContactListRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateContactListRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ContactListName'] && !(typeof data['ContactListName'] === 'string' || data['ContactListName'] instanceof String)) {
            throw new Error("Expected the field `ContactListName` to be a primitive type in the JSON string but got " + data['ContactListName']);
        }
        if (data['Topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Topics'])) {
                throw new Error("Expected the field `Topics` to be an array in the JSON data but got " + data['Topics']);
            }
            // validate the optional field `Topics` (array)
            for (const item of data['Topics']) {
                Topic.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                Tag.validateJSON(item);
            };
        }

        return true;
    }


}

CreateContactListRequest.RequiredProperties = ["ContactListName"];

/**
 * The name of the contact list.
 * @member {String} ContactListName
 */
CreateContactListRequest.prototype['ContactListName'] = undefined;

/**
 * An interest group, theme, or label within a list. A contact list can have multiple topics.
 * @member {Array.<module:model/Topic>} Topics
 */
CreateContactListRequest.prototype['Topics'] = undefined;

/**
 * A description of what the contact list is about.
 * @member {String} Description
 */
CreateContactListRequest.prototype['Description'] = undefined;

/**
 * The tags associated with a contact list.
 * @member {Array.<module:model/Tag>} Tags
 */
CreateContactListRequest.prototype['Tags'] = undefined;






export default CreateContactListRequest;

