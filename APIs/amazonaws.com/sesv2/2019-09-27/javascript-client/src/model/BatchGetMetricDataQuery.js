/**
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metric from './Metric';
import MetricNamespace from './MetricNamespace';

/**
 * The BatchGetMetricDataQuery model module.
 * @module model/BatchGetMetricDataQuery
 * @version 2019-09-27
 */
class BatchGetMetricDataQuery {
    /**
     * Constructs a new <code>BatchGetMetricDataQuery</code>.
     * Represents a single metric data query to include in a batch.
     * @alias module:model/BatchGetMetricDataQuery
     * @param id {String} 
     * @param namespace {module:model/MetricNamespace} 
     * @param metric {module:model/Metric} 
     * @param startDate {Date} 
     * @param endDate {Date} 
     */
    constructor(id, namespace, metric, startDate, endDate) { 
        
        BatchGetMetricDataQuery.initialize(this, id, namespace, metric, startDate, endDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, namespace, metric, startDate, endDate) { 
        obj['Id'] = id;
        obj['Namespace'] = namespace;
        obj['Metric'] = metric;
        obj['StartDate'] = startDate;
        obj['EndDate'] = endDate;
    }

    /**
     * Constructs a <code>BatchGetMetricDataQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchGetMetricDataQuery} obj Optional instance to populate.
     * @return {module:model/BatchGetMetricDataQuery} The populated <code>BatchGetMetricDataQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchGetMetricDataQuery();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Namespace')) {
                obj['Namespace'] = ApiClient.convertToType(data['Namespace'], MetricNamespace);
            }
            if (data.hasOwnProperty('Metric')) {
                obj['Metric'] = ApiClient.convertToType(data['Metric'], Metric);
            }
            if (data.hasOwnProperty('Dimensions')) {
                obj['Dimensions'] = ApiClient.convertToType(data['Dimensions'], Object);
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchGetMetricDataQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchGetMetricDataQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BatchGetMetricDataQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `Namespace`
        if (data['Namespace']) { // data not null
          MetricNamespace.validateJSON(data['Namespace']);
        }
        // validate the optional field `Metric`
        if (data['Metric']) { // data not null
          Metric.validateJSON(data['Metric']);
        }
        // validate the optional field `Dimensions`
        if (data['Dimensions']) { // data not null
          Object.validateJSON(data['Dimensions']);
        }
        // validate the optional field `StartDate`
        if (data['StartDate']) { // data not null
          Date.validateJSON(data['StartDate']);
        }
        // validate the optional field `EndDate`
        if (data['EndDate']) { // data not null
          Date.validateJSON(data['EndDate']);
        }

        return true;
    }


}

BatchGetMetricDataQuery.RequiredProperties = ["Id", "Namespace", "Metric", "StartDate", "EndDate"];

/**
 * @member {String} Id
 */
BatchGetMetricDataQuery.prototype['Id'] = undefined;

/**
 * @member {module:model/MetricNamespace} Namespace
 */
BatchGetMetricDataQuery.prototype['Namespace'] = undefined;

/**
 * @member {module:model/Metric} Metric
 */
BatchGetMetricDataQuery.prototype['Metric'] = undefined;

/**
 * @member {Object} Dimensions
 */
BatchGetMetricDataQuery.prototype['Dimensions'] = undefined;

/**
 * @member {Date} StartDate
 */
BatchGetMetricDataQuery.prototype['StartDate'] = undefined;

/**
 * @member {Date} EndDate
 */
BatchGetMetricDataQuery.prototype['EndDate'] = undefined;






export default BatchGetMetricDataQuery;

