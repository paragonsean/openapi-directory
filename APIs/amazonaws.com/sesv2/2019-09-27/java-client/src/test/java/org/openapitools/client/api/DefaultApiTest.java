/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchGetMetricDataRequest;
import org.openapitools.client.model.BatchGetMetricDataResponse;
import org.openapitools.client.model.CreateConfigurationSetEventDestinationRequest;
import org.openapitools.client.model.CreateConfigurationSetRequest;
import org.openapitools.client.model.CreateContactListRequest;
import org.openapitools.client.model.CreateContactRequest;
import org.openapitools.client.model.CreateCustomVerificationEmailTemplateRequest;
import org.openapitools.client.model.CreateDedicatedIpPoolRequest;
import org.openapitools.client.model.CreateDeliverabilityTestReportRequest;
import org.openapitools.client.model.CreateDeliverabilityTestReportResponse;
import org.openapitools.client.model.CreateEmailIdentityRequest;
import org.openapitools.client.model.CreateEmailIdentityResponse;
import org.openapitools.client.model.CreateEmailTemplateRequest;
import org.openapitools.client.model.CreateImportJobRequest;
import org.openapitools.client.model.CreateImportJobResponse;
import org.openapitools.client.model.GetAccountResponse;
import org.openapitools.client.model.GetBlacklistReportsResponse;
import org.openapitools.client.model.GetConfigurationSetEventDestinationsResponse;
import org.openapitools.client.model.GetConfigurationSetResponse;
import org.openapitools.client.model.GetContactListResponse;
import org.openapitools.client.model.GetContactResponse;
import org.openapitools.client.model.GetCustomVerificationEmailTemplateResponse;
import org.openapitools.client.model.GetDedicatedIpPoolResponse;
import org.openapitools.client.model.GetDedicatedIpResponse;
import org.openapitools.client.model.GetDedicatedIpsResponse;
import org.openapitools.client.model.GetDeliverabilityDashboardOptionsResponse;
import org.openapitools.client.model.GetDeliverabilityTestReportResponse;
import org.openapitools.client.model.GetDomainDeliverabilityCampaignResponse;
import org.openapitools.client.model.GetDomainStatisticsReportResponse;
import org.openapitools.client.model.GetEmailIdentityPoliciesResponse;
import org.openapitools.client.model.GetEmailIdentityResponse;
import org.openapitools.client.model.GetEmailTemplateResponse;
import org.openapitools.client.model.GetImportJobResponse;
import org.openapitools.client.model.GetSuppressedDestinationResponse;
import org.openapitools.client.model.ListConfigurationSetsResponse;
import org.openapitools.client.model.ListContactListsResponse;
import org.openapitools.client.model.ListContactsRequest;
import org.openapitools.client.model.ListContactsResponse;
import org.openapitools.client.model.ListCustomVerificationEmailTemplatesResponse;
import org.openapitools.client.model.ListDedicatedIpPoolsResponse;
import org.openapitools.client.model.ListDeliverabilityTestReportsResponse;
import org.openapitools.client.model.ListDomainDeliverabilityCampaignsResponse;
import org.openapitools.client.model.ListEmailIdentitiesResponse;
import org.openapitools.client.model.ListEmailTemplatesResponse;
import org.openapitools.client.model.ListImportJobsRequest;
import org.openapitools.client.model.ListImportJobsResponse;
import org.openapitools.client.model.ListRecommendationsRequest;
import org.openapitools.client.model.ListRecommendationsResponse;
import org.openapitools.client.model.ListSuppressedDestinationsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutAccountDedicatedIpWarmupAttributesRequest;
import org.openapitools.client.model.PutAccountDetailsRequest;
import org.openapitools.client.model.PutAccountSendingAttributesRequest;
import org.openapitools.client.model.PutAccountSuppressionAttributesRequest;
import org.openapitools.client.model.PutAccountVdmAttributesRequest;
import org.openapitools.client.model.PutConfigurationSetDeliveryOptionsRequest;
import org.openapitools.client.model.PutConfigurationSetReputationOptionsRequest;
import org.openapitools.client.model.PutConfigurationSetSendingOptionsRequest;
import org.openapitools.client.model.PutConfigurationSetSuppressionOptionsRequest;
import org.openapitools.client.model.PutConfigurationSetTrackingOptionsRequest;
import org.openapitools.client.model.PutConfigurationSetVdmOptionsRequest;
import org.openapitools.client.model.PutDedicatedIpInPoolRequest;
import org.openapitools.client.model.PutDedicatedIpPoolScalingAttributesRequest;
import org.openapitools.client.model.PutDedicatedIpWarmupAttributesRequest;
import org.openapitools.client.model.PutDeliverabilityDashboardOptionRequest;
import org.openapitools.client.model.PutEmailIdentityConfigurationSetAttributesRequest;
import org.openapitools.client.model.PutEmailIdentityDkimAttributesRequest;
import org.openapitools.client.model.PutEmailIdentityDkimSigningAttributesRequest;
import org.openapitools.client.model.PutEmailIdentityDkimSigningAttributesResponse;
import org.openapitools.client.model.PutEmailIdentityFeedbackAttributesRequest;
import org.openapitools.client.model.PutEmailIdentityMailFromAttributesRequest;
import org.openapitools.client.model.PutSuppressedDestinationRequest;
import org.openapitools.client.model.SendBulkEmailRequest;
import org.openapitools.client.model.SendBulkEmailResponse;
import org.openapitools.client.model.SendCustomVerificationEmailRequest;
import org.openapitools.client.model.SendCustomVerificationEmailResponse;
import org.openapitools.client.model.SendEmailRequest;
import org.openapitools.client.model.SendEmailResponse;
import org.openapitools.client.model.SuppressionListReason;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TestRenderEmailTemplateRequest;
import org.openapitools.client.model.TestRenderEmailTemplateResponse;
import org.openapitools.client.model.UpdateConfigurationSetEventDestinationRequest;
import org.openapitools.client.model.UpdateContactListRequest;
import org.openapitools.client.model.UpdateContactRequest;
import org.openapitools.client.model.UpdateCustomVerificationEmailTemplateRequest;
import org.openapitools.client.model.UpdateEmailIdentityPolicyRequest;
import org.openapitools.client.model.UpdateEmailTemplateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Retrieves batches of metric data collected based on your sending activity.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than 16 times per second, and with at most 160 queries from the batches per second (cumulative).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetMetricDataTest() throws ApiException {
        BatchGetMetricDataRequest batchGetMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetMetricDataResponse response = api.batchGetMetricData(batchGetMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a configuration set. &lt;i&gt;Configuration sets&lt;/i&gt; are groups of rules that you can apply to the emails that you send. You apply a configuration set to an email by specifying the name of the configuration set when you call the Amazon SES API v2. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfigurationSetTest() throws ApiException {
        CreateConfigurationSetRequest createConfigurationSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createConfigurationSet(createConfigurationSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create an event destination. &lt;i&gt;Events&lt;/i&gt; include message sends, deliveries, opens, clicks, bounces, and complaints. &lt;i&gt;Event destinations&lt;/i&gt; are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.&lt;/p&gt; &lt;p&gt;A single configuration set can include more than one event destination.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfigurationSetEventDestinationTest() throws ApiException {
        String configurationSetName = null;
        CreateConfigurationSetEventDestinationRequest createConfigurationSetEventDestinationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createConfigurationSetEventDestination(configurationSetName, createConfigurationSetEventDestinationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a contact, which is an end-user who is receiving the email, and adds them to a contact list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        String contactListName = null;
        CreateContactRequest createContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createContact(contactListName, createContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a contact list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactListTest() throws ApiException {
        CreateContactListRequest createContactListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createContactList(createContactListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new custom verification email template.&lt;/p&gt; &lt;p&gt;For more information about custom verification email templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\&quot;&gt;Using custom verification email templates&lt;/a&gt; in the &lt;i&gt;Amazon SES Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomVerificationEmailTemplateTest() throws ApiException {
        CreateCustomVerificationEmailTemplateRequest createCustomVerificationEmailTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createCustomVerificationEmailTemplate(createCustomVerificationEmailTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new pool of dedicated IP addresses. A pool can include one or more dedicated IP addresses that are associated with your Amazon Web Services account. You can associate a pool with a configuration set. When you send an email that uses that configuration set, the message is sent from one of the addresses in the associated pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDedicatedIpPoolTest() throws ApiException {
        CreateDedicatedIpPoolRequest createDedicatedIpPoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createDedicatedIpPool(createDedicatedIpPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. Amazon SES then sends that message to special email addresses spread across several major email providers. After about 24 hours, the test is complete, and you can use the &lt;code&gt;GetDeliverabilityTestReport&lt;/code&gt; operation to view the results of the test.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeliverabilityTestReportTest() throws ApiException {
        CreateDeliverabilityTestReportRequest createDeliverabilityTestReportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDeliverabilityTestReportResponse response = api.createDeliverabilityTestReport(createDeliverabilityTestReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts the process of verifying an email identity. An &lt;i&gt;identity&lt;/i&gt; is an email address or domain that you use when you send email. Before you can use an identity to send email, you first have to verify it. By verifying an identity, you demonstrate that you&#39;re the owner of the identity, and that you&#39;ve given Amazon SES API v2 permission to send email from the identity.&lt;/p&gt; &lt;p&gt;When you verify an email address, Amazon SES sends an email to the address. Your email address is verified as soon as you follow the link in the verification email. &lt;/p&gt; &lt;p&gt;When you verify a domain without specifying the &lt;code&gt;DkimSigningAttributes&lt;/code&gt; object, this operation provides a set of DKIM tokens. You can convert these tokens into CNAME records, which you then add to the DNS configuration for your domain. Your domain is verified when Amazon SES detects these records in the DNS configuration for your domain. This verification method is known as &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\&quot;&gt;Easy DKIM&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Alternatively, you can perform the verification process by providing your own public-private key pair. This verification method is known as Bring Your Own DKIM (BYODKIM). To use BYODKIM, your call to the &lt;code&gt;CreateEmailIdentity&lt;/code&gt; operation has to include the &lt;code&gt;DkimSigningAttributes&lt;/code&gt; object. When you specify this object, you provide a selector (a component of the DNS record name that identifies the public key to use for DKIM authentication) and a private key.&lt;/p&gt; &lt;p&gt;When you verify a domain, this operation provides a set of DKIM tokens, which you can convert into CNAME tokens. You add these CNAME tokens to the DNS configuration for your domain. Your domain is verified when Amazon SES detects these records in the DNS configuration for your domain. For some DNS providers, it can take 72 hours or more to complete the domain verification process.&lt;/p&gt; &lt;p&gt;Additionally, you can associate an existing configuration set with the email identity that you&#39;re verifying.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailIdentityTest() throws ApiException {
        CreateEmailIdentityRequest createEmailIdentityRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEmailIdentityResponse response = api.createEmailIdentity(createEmailIdentityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates the specified sending authorization policy for the given identity (an email address or a domain).&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API is for the identity owner only. If you have not verified the identity, this API will return an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailIdentityPolicyTest() throws ApiException {
        String emailIdentity = null;
        String policyName = null;
        UpdateEmailIdentityPolicyRequest updateEmailIdentityPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createEmailIdentityPolicy(emailIdentity, policyName, updateEmailIdentityPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailTemplateTest() throws ApiException {
        CreateEmailTemplateRequest createEmailTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createEmailTemplate(createEmailTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an import job for a data destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImportJobTest() throws ApiException {
        CreateImportJobRequest createImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateImportJobResponse response = api.createImportJob(createImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete an existing configuration set.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Configuration sets&lt;/i&gt; are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConfigurationSetTest() throws ApiException {
        String configurationSetName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConfigurationSet(configurationSetName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete an event destination.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Events&lt;/i&gt; include message sends, deliveries, opens, clicks, bounces, and complaints. &lt;i&gt;Event destinations&lt;/i&gt; are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConfigurationSetEventDestinationTest() throws ApiException {
        String configurationSetName = null;
        String eventDestinationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConfigurationSetEventDestination(configurationSetName, eventDestinationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a contact from a contact list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        String contactListName = null;
        String emailAddress = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContact(contactListName, emailAddress, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a contact list and all of the contacts on that list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactListTest() throws ApiException {
        String contactListName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContactList(contactListName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing custom verification email template.&lt;/p&gt; &lt;p&gt;For more information about custom verification email templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\&quot;&gt;Using custom verification email templates&lt;/a&gt; in the &lt;i&gt;Amazon SES Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomVerificationEmailTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteCustomVerificationEmailTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete a dedicated IP pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDedicatedIpPoolTest() throws ApiException {
        String poolName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDedicatedIpPool(poolName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an email identity. An identity can be either an email address or a domain name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailIdentityTest() throws ApiException {
        String emailIdentity = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEmailIdentity(emailIdentity, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API is for the identity owner only. If you have not verified the identity, this API will return an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailIdentityPolicyTest() throws ApiException {
        String emailIdentity = null;
        String policyName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEmailIdentityPolicy(emailIdentity, policyName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an email template.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEmailTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an email address from the suppression list for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSuppressedDestinationTest() throws ApiException {
        String emailAddress = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSuppressedDestination(emailAddress, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Obtain information about the email-sending status and capabilities of your Amazon SES account in the current Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAccountResponse response = api.getAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve a list of the blacklists that your dedicated IP addresses appear on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlacklistReportsTest() throws ApiException {
        List<String> blacklistItemNames = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBlacklistReportsResponse response = api.getBlacklistReports(blacklistItemNames, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Get information about an existing configuration set, including the dedicated IP pool that it&#39;s associated with, whether or not it&#39;s enabled for sending email, and more.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Configuration sets&lt;/i&gt; are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationSetTest() throws ApiException {
        String configurationSetName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConfigurationSetResponse response = api.getConfigurationSet(configurationSetName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieve a list of event destinations that are associated with a configuration set.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Events&lt;/i&gt; include message sends, deliveries, opens, clicks, bounces, and complaints. &lt;i&gt;Event destinations&lt;/i&gt; are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationSetEventDestinationsTest() throws ApiException {
        String configurationSetName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConfigurationSetEventDestinationsResponse response = api.getConfigurationSetEventDestinations(configurationSetName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a contact from a contact list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        String contactListName = null;
        String emailAddress = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContactResponse response = api.getContact(contactListName, emailAddress, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns contact list metadata. It does not return any information about the contacts present in the list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactListTest() throws ApiException {
        String contactListName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContactListResponse response = api.getContactList(contactListName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the custom email verification template for the template name you specify.&lt;/p&gt; &lt;p&gt;For more information about custom verification email templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\&quot;&gt;Using custom verification email templates&lt;/a&gt; in the &lt;i&gt;Amazon SES Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomVerificationEmailTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCustomVerificationEmailTemplateResponse response = api.getCustomVerificationEmailTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get information about a dedicated IP address, including the name of the dedicated IP pool that it&#39;s associated with, as well information about the automatic warm-up process for the address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDedicatedIpTest() throws ApiException {
        String IP = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDedicatedIpResponse response = api.getDedicatedIp(IP, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve information about the dedicated pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDedicatedIpPoolTest() throws ApiException {
        String poolName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDedicatedIpPoolResponse response = api.getDedicatedIpPool(poolName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * List the dedicated IP addresses that are associated with your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDedicatedIpsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String poolName = null;
        String nextToken = null;
        Integer pageSize = null;
        GetDedicatedIpsResponse response = api.getDedicatedIps(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, poolName, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieve information about the status of the Deliverability dashboard for your account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email. You also gain the ability to perform predictive inbox placement tests.&lt;/p&gt; &lt;p&gt;When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more information about the features and cost of a Deliverability dashboard subscription, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/ses/pricing/\&quot;&gt;Amazon SES Pricing&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliverabilityDashboardOptionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeliverabilityDashboardOptionsResponse response = api.getDeliverabilityDashboardOptions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve the results of a predictive inbox placement test.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliverabilityTestReportTest() throws ApiException {
        String reportId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeliverabilityTestReportResponse response = api.getDeliverabilityTestReport(reportId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainDeliverabilityCampaignTest() throws ApiException {
        String campaignId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDomainDeliverabilityCampaignResponse response = api.getDomainDeliverabilityCampaign(campaignId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve inbox placement and engagement rates for the domains that you use to send email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainStatisticsReportTest() throws ApiException {
        String domain = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDomainStatisticsReportResponse response = api.getDomainStatisticsReport(domain, startDate, endDate, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides information about a specific identity, including the identity&#39;s verification status, sending authorization policies, its DKIM authentication status, and its custom Mail-From settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailIdentityTest() throws ApiException {
        String emailIdentity = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEmailIdentityResponse response = api.getEmailIdentity(emailIdentity, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API is for the identity owner only. If you have not verified the identity, this API will return an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailIdentityPoliciesTest() throws ApiException {
        String emailIdentity = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEmailIdentityPoliciesResponse response = api.getEmailIdentityPolicies(emailIdentity, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Displays the template object (which includes the subject line, HTML part and text part) for the template you specify.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEmailTemplateResponse response = api.getEmailTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides information about an import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImportJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetImportJobResponse response = api.getImportJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a specific email address that&#39;s on the suppression list for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuppressedDestinationTest() throws ApiException {
        String emailAddress = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSuppressedDestinationResponse response = api.getSuppressedDestination(emailAddress, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;List all of the configuration sets associated with your account in the current region.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Configuration sets&lt;/i&gt; are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfigurationSetsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer pageSize = null;
        ListConfigurationSetsResponse response = api.listConfigurationSets(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Lists all of the contact lists available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactListsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer pageSize = null;
        String nextToken = null;
        ListContactListsResponse response = api.listContactLists(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the contacts present in a specific contact list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactsTest() throws ApiException {
        String contactListName = null;
        ListContactsRequest listContactsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer pageSize = null;
        String nextToken = null;
        ListContactsResponse response = api.listContacts(contactListName, listContactsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the existing custom verification email templates for your account in the current Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;For more information about custom verification email templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\&quot;&gt;Using custom verification email templates&lt;/a&gt; in the &lt;i&gt;Amazon SES Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomVerificationEmailTemplatesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer pageSize = null;
        ListCustomVerificationEmailTemplatesResponse response = api.listCustomVerificationEmailTemplates(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * List all of the dedicated IP pools that exist in your Amazon Web Services account in the current Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDedicatedIpPoolsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer pageSize = null;
        ListDedicatedIpPoolsResponse response = api.listDedicatedIpPools(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Show a list of the predictive inbox placement tests that you&#39;ve performed, regardless of their statuses. For predictive inbox placement tests that are complete, you can use the &lt;code&gt;GetDeliverabilityTestReport&lt;/code&gt; operation to view the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeliverabilityTestReportsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer pageSize = null;
        ListDeliverabilityTestReportsResponse response = api.listDeliverabilityTestReports(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard for the domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDomainDeliverabilityCampaignsTest() throws ApiException {
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String subscribedDomain = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer pageSize = null;
        ListDomainDeliverabilityCampaignsResponse response = api.listDomainDeliverabilityCampaigns(startDate, endDate, subscribedDomain, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Returns a list of all of the email identities that are associated with your Amazon Web Services account. An identity can be either an email address or a domain. This operation returns identities that are verified as well as those that aren&#39;t. This operation returns identities that are associated with Amazon SES and Amazon Pinpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmailIdentitiesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer pageSize = null;
        ListEmailIdentitiesResponse response = api.listEmailIdentities(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the email templates present in your Amazon SES account in the current Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmailTemplatesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer pageSize = null;
        ListEmailTemplatesResponse response = api.listEmailTemplates(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Lists all of the import jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportJobsTest() throws ApiException {
        ListImportJobsRequest listImportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer pageSize = null;
        ListImportJobsResponse response = api.listImportJobs(listImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the recommendations present in your Amazon SES account in the current Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecommendationsTest() throws ApiException {
        ListRecommendationsRequest listRecommendationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String nextToken = null;
        ListRecommendationsResponse response = api.listRecommendations(listRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of email addresses that are on the suppression list for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSuppressedDestinationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<SuppressionListReason> reason = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String nextToken = null;
        Integer pageSize = null;
        ListSuppressedDestinationsResponse response = api.listSuppressedDestinations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reason, startDate, endDate, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Retrieve a list of the tags (keys and values) that are associated with a specified resource. A &lt;i&gt;tag&lt;/i&gt; is a label that you optionally define and associate with a resource. Each tag consists of a required &lt;i&gt;tag key&lt;/i&gt; and an optional associated &lt;i&gt;tag value&lt;/i&gt;. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enable or disable the automatic warm-up feature for dedicated IP addresses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAccountDedicatedIpWarmupAttributesTest() throws ApiException {
        PutAccountDedicatedIpWarmupAttributesRequest putAccountDedicatedIpWarmupAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putAccountDedicatedIpWarmupAttributes(putAccountDedicatedIpWarmupAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update your Amazon SES account details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAccountDetailsTest() throws ApiException {
        PutAccountDetailsRequest putAccountDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putAccountDetails(putAccountDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enable or disable the ability of your account to send email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAccountSendingAttributesTest() throws ApiException {
        PutAccountSendingAttributesRequest putAccountSendingAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putAccountSendingAttributes(putAccountSendingAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Change the settings for the account-level suppression list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAccountSuppressionAttributesTest() throws ApiException {
        PutAccountSuppressionAttributesRequest putAccountSuppressionAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putAccountSuppressionAttributes(putAccountSuppressionAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update your Amazon SES account VDM attributes.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAccountVdmAttributesTest() throws ApiException {
        PutAccountVdmAttributesRequest putAccountVdmAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putAccountVdmAttributes(putAccountVdmAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools to create groups of dedicated IP addresses for sending specific types of email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putConfigurationSetDeliveryOptionsTest() throws ApiException {
        String configurationSetName = null;
        PutConfigurationSetDeliveryOptionsRequest putConfigurationSetDeliveryOptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putConfigurationSetDeliveryOptions(configurationSetName, putConfigurationSetDeliveryOptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enable or disable collection of reputation metrics for emails that you send using a particular configuration set in a specific Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putConfigurationSetReputationOptionsTest() throws ApiException {
        String configurationSetName = null;
        PutConfigurationSetReputationOptionsRequest putConfigurationSetReputationOptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putConfigurationSetReputationOptions(configurationSetName, putConfigurationSetReputationOptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enable or disable email sending for messages that use a particular configuration set in a specific Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putConfigurationSetSendingOptionsTest() throws ApiException {
        String configurationSetName = null;
        PutConfigurationSetSendingOptionsRequest putConfigurationSetSendingOptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putConfigurationSetSendingOptions(configurationSetName, putConfigurationSetSendingOptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Specify the account suppression list preferences for a configuration set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putConfigurationSetSuppressionOptionsTest() throws ApiException {
        String configurationSetName = null;
        PutConfigurationSetSuppressionOptionsRequest putConfigurationSetSuppressionOptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putConfigurationSetSuppressionOptions(configurationSetName, putConfigurationSetSuppressionOptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Specify a custom domain to use for open and click tracking elements in email that you send.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putConfigurationSetTrackingOptionsTest() throws ApiException {
        String configurationSetName = null;
        PutConfigurationSetTrackingOptionsRequest putConfigurationSetTrackingOptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putConfigurationSetTrackingOptions(configurationSetName, putConfigurationSetTrackingOptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Specify VDM preferences for email that you send using the configuration set.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putConfigurationSetVdmOptionsTest() throws ApiException {
        String configurationSetName = null;
        PutConfigurationSetVdmOptionsRequest putConfigurationSetVdmOptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putConfigurationSetVdmOptions(configurationSetName, putConfigurationSetVdmOptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Move a dedicated IP address to an existing dedicated IP pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The dedicated IP address that you specify must already exist, and must be associated with your Amazon Web Services account. &lt;/p&gt; &lt;p&gt;The dedicated IP pool you specify must already exist. You can create a new pool by using the &lt;code&gt;CreateDedicatedIpPool&lt;/code&gt; operation.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDedicatedIpInPoolTest() throws ApiException {
        String IP = null;
        PutDedicatedIpInPoolRequest putDedicatedIpInPoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putDedicatedIpInPool(IP, putDedicatedIpInPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Used to convert a dedicated IP pool to a different scaling mode.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;MANAGED&lt;/code&gt; pools cannot be converted to &lt;code&gt;STANDARD&lt;/code&gt; scaling mode.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDedicatedIpPoolScalingAttributesTest() throws ApiException {
        String poolName = null;
        PutDedicatedIpPoolScalingAttributesRequest putDedicatedIpPoolScalingAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putDedicatedIpPoolScalingAttributes(poolName, putDedicatedIpPoolScalingAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDedicatedIpWarmupAttributesTest() throws ApiException {
        String IP = null;
        PutDedicatedIpWarmupAttributesRequest putDedicatedIpWarmupAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putDedicatedIpWarmupAttributes(IP, putDedicatedIpWarmupAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email. You also gain the ability to perform predictive inbox placement tests.&lt;/p&gt; &lt;p&gt;When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more information about the features and cost of a Deliverability dashboard subscription, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/ses/pricing/\&quot;&gt;Amazon SES Pricing&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDeliverabilityDashboardOptionTest() throws ApiException {
        PutDeliverabilityDashboardOptionRequest putDeliverabilityDashboardOptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putDeliverabilityDashboardOption(putDeliverabilityDashboardOptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used to associate a configuration set with an email identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmailIdentityConfigurationSetAttributesTest() throws ApiException {
        String emailIdentity = null;
        PutEmailIdentityConfigurationSetAttributesRequest putEmailIdentityConfigurationSetAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putEmailIdentityConfigurationSetAttributes(emailIdentity, putEmailIdentityConfigurationSetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used to enable or disable DKIM authentication for an email identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmailIdentityDkimAttributesTest() throws ApiException {
        String emailIdentity = null;
        PutEmailIdentityDkimAttributesRequest putEmailIdentityDkimAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putEmailIdentityDkimAttributes(emailIdentity, putEmailIdentityDkimAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Used to configure or change the DKIM authentication settings for an email domain identity. You can use this operation to do any of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Update the signing attributes for an identity that uses Bring Your Own DKIM (BYODKIM).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the key length that should be used for Easy DKIM.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change from using no DKIM authentication to using Easy DKIM.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change from using no DKIM authentication to using BYODKIM.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change from using Easy DKIM to using BYODKIM.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change from using BYODKIM to using Easy DKIM.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmailIdentityDkimSigningAttributesTest() throws ApiException {
        String emailIdentity = null;
        PutEmailIdentityDkimSigningAttributesRequest putEmailIdentityDkimSigningAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutEmailIdentityDkimSigningAttributesResponse response = api.putEmailIdentityDkimSigningAttributes(emailIdentity, putEmailIdentityDkimSigningAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Used to enable or disable feedback forwarding for an identity. This setting determines what happens when an identity is used to send an email that results in a bounce or complaint event.&lt;/p&gt; &lt;p&gt;If the value is &lt;code&gt;true&lt;/code&gt;, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the &lt;code&gt;Return-Path&lt;/code&gt; header of the original email.&lt;/p&gt; &lt;p&gt;You&#39;re required to have a method of tracking bounces and complaints. If you haven&#39;t set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmailIdentityFeedbackAttributesTest() throws ApiException {
        String emailIdentity = null;
        PutEmailIdentityFeedbackAttributesRequest putEmailIdentityFeedbackAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putEmailIdentityFeedbackAttributes(emailIdentity, putEmailIdentityFeedbackAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used to enable or disable the custom Mail-From domain configuration for an email identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmailIdentityMailFromAttributesTest() throws ApiException {
        String emailIdentity = null;
        PutEmailIdentityMailFromAttributesRequest putEmailIdentityMailFromAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putEmailIdentityMailFromAttributes(emailIdentity, putEmailIdentityMailFromAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds an email address to the suppression list for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSuppressedDestinationTest() throws ApiException {
        PutSuppressedDestinationRequest putSuppressedDestinationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putSuppressedDestination(putSuppressedDestinationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Composes an email message to multiple destinations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendBulkEmailTest() throws ApiException {
        SendBulkEmailRequest sendBulkEmailRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendBulkEmailResponse response = api.sendBulkEmail(sendBulkEmailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds an email address to the list of identities for your Amazon SES account in the current Amazon Web Services Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.&lt;/p&gt; &lt;p&gt;To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\&quot;&gt;Using custom verification email templates&lt;/a&gt; in the &lt;i&gt;Amazon SES Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendCustomVerificationEmailTest() throws ApiException {
        SendCustomVerificationEmailRequest sendCustomVerificationEmailRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendCustomVerificationEmailResponse response = api.sendCustomVerificationEmail(sendCustomVerificationEmailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sends an email message. You can use the Amazon SES API v2 to send the following types of messages:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Simple&lt;/b&gt; – A standard email message. When you create this type of message, you specify the sender, the recipient, and the message body, and Amazon SES assembles the message for you.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Raw&lt;/b&gt; – A raw, MIME-formatted email message. When you send this type of email, you have to specify all of the message headers, as well as the message body. You can use this message type to send messages that contain attachments. The message that you specify has to be a valid MIME message.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Templated&lt;/b&gt; – A message that contains personalization tags. When you send this type of email, Amazon SES API v2 automatically replaces the tags with values that you specify.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailTest() throws ApiException {
        SendEmailRequest sendEmailRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendEmailResponse response = api.sendEmail(sendEmailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Add one or more tags (keys and values) to a specified resource. A &lt;i&gt;tag&lt;/i&gt; is a label that you optionally define and associate with a resource. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags.&lt;/p&gt; &lt;p&gt;Each tag consists of a required &lt;i&gt;tag key&lt;/i&gt; and an associated &lt;i&gt;tag value&lt;/i&gt;, both of which you define. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testRenderEmailTemplateTest() throws ApiException {
        String templateName = null;
        TestRenderEmailTemplateRequest testRenderEmailTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestRenderEmailTemplateResponse response = api.testRenderEmailTemplate(templateName, testRenderEmailTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove one or more tags (keys and values) from a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update the configuration of an event destination for a configuration set.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Events&lt;/i&gt; include message sends, deliveries, opens, clicks, bounces, and complaints. &lt;i&gt;Event destinations&lt;/i&gt; are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigurationSetEventDestinationTest() throws ApiException {
        String configurationSetName = null;
        String eventDestinationName = null;
        UpdateConfigurationSetEventDestinationRequest updateConfigurationSetEventDestinationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateConfigurationSetEventDestination(configurationSetName, eventDestinationName, updateConfigurationSetEventDestinationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a contact&#39;s preferences for a list. It is not necessary to specify all existing topic preferences in the TopicPreferences object, just the ones that need updating.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String contactListName = null;
        String emailAddress = null;
        UpdateContactRequest updateContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContact(contactListName, emailAddress, updateContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates contact list metadata. This operation does a complete replacement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactListTest() throws ApiException {
        String contactListName = null;
        UpdateContactListRequest updateContactListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContactList(contactListName, updateContactListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an existing custom verification email template.&lt;/p&gt; &lt;p&gt;For more information about custom verification email templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/dg/creating-identities.html#send-email-verify-address-custom\&quot;&gt;Using custom verification email templates&lt;/a&gt; in the &lt;i&gt;Amazon SES Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomVerificationEmailTemplateTest() throws ApiException {
        String templateName = null;
        UpdateCustomVerificationEmailTemplateRequest updateCustomVerificationEmailTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateCustomVerificationEmailTemplate(templateName, updateCustomVerificationEmailTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API is for the identity owner only. If you have not verified the identity, this API will return an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailIdentityPolicyTest() throws ApiException {
        String emailIdentity = null;
        String policyName = null;
        UpdateEmailIdentityPolicyRequest updateEmailIdentityPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateEmailIdentityPolicy(emailIdentity, policyName, updateEmailIdentityPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can execute this operation no more than once per second.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailTemplateTest() throws ApiException {
        String templateName = null;
        UpdateEmailTemplateRequest updateEmailTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateEmailTemplate(templateName, updateEmailTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
