/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TopicPreference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateContactRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateContactRequest {
  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_TOPIC_PREFERENCES = "TopicPreferences";
  @SerializedName(SERIALIZED_NAME_TOPIC_PREFERENCES)
  private List<TopicPreference> topicPreferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNSUBSCRIBE_ALL = "UnsubscribeAll";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBE_ALL)
  private Boolean unsubscribeAll;

  public static final String SERIALIZED_NAME_ATTRIBUTES_DATA = "AttributesData";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_DATA)
  private String attributesData;

  public CreateContactRequest() {
  }

  public CreateContactRequest emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * The contact&#39;s email address.
   * @return emailAddress
   */
  @javax.annotation.Nonnull
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public CreateContactRequest topicPreferences(List<TopicPreference> topicPreferences) {
    this.topicPreferences = topicPreferences;
    return this;
  }

  public CreateContactRequest addTopicPreferencesItem(TopicPreference topicPreferencesItem) {
    if (this.topicPreferences == null) {
      this.topicPreferences = new ArrayList<>();
    }
    this.topicPreferences.add(topicPreferencesItem);
    return this;
  }

  /**
   * The contact&#39;s preferences for being opted-in to or opted-out of topics.
   * @return topicPreferences
   */
  @javax.annotation.Nullable
  public List<TopicPreference> getTopicPreferences() {
    return topicPreferences;
  }

  public void setTopicPreferences(List<TopicPreference> topicPreferences) {
    this.topicPreferences = topicPreferences;
  }


  public CreateContactRequest unsubscribeAll(Boolean unsubscribeAll) {
    this.unsubscribeAll = unsubscribeAll;
    return this;
  }

  /**
   * A boolean value status noting if the contact is unsubscribed from all contact list topics.
   * @return unsubscribeAll
   */
  @javax.annotation.Nullable
  public Boolean getUnsubscribeAll() {
    return unsubscribeAll;
  }

  public void setUnsubscribeAll(Boolean unsubscribeAll) {
    this.unsubscribeAll = unsubscribeAll;
  }


  public CreateContactRequest attributesData(String attributesData) {
    this.attributesData = attributesData;
    return this;
  }

  /**
   * The attribute data attached to a contact.
   * @return attributesData
   */
  @javax.annotation.Nullable
  public String getAttributesData() {
    return attributesData;
  }

  public void setAttributesData(String attributesData) {
    this.attributesData = attributesData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateContactRequest createContactRequest = (CreateContactRequest) o;
    return Objects.equals(this.emailAddress, createContactRequest.emailAddress) &&
        Objects.equals(this.topicPreferences, createContactRequest.topicPreferences) &&
        Objects.equals(this.unsubscribeAll, createContactRequest.unsubscribeAll) &&
        Objects.equals(this.attributesData, createContactRequest.attributesData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailAddress, topicPreferences, unsubscribeAll, attributesData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateContactRequest {\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    topicPreferences: ").append(toIndentedString(topicPreferences)).append("\n");
    sb.append("    unsubscribeAll: ").append(toIndentedString(unsubscribeAll)).append("\n");
    sb.append("    attributesData: ").append(toIndentedString(attributesData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmailAddress");
    openapiFields.add("TopicPreferences");
    openapiFields.add("UnsubscribeAll");
    openapiFields.add("AttributesData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EmailAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateContactRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateContactRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateContactRequest is not found in the empty JSON string", CreateContactRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateContactRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateContactRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateContactRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("EmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailAddress").toString()));
      }
      if (jsonObj.get("TopicPreferences") != null && !jsonObj.get("TopicPreferences").isJsonNull()) {
        JsonArray jsonArraytopicPreferences = jsonObj.getAsJsonArray("TopicPreferences");
        if (jsonArraytopicPreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TopicPreferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TopicPreferences` to be an array in the JSON string but got `%s`", jsonObj.get("TopicPreferences").toString()));
          }

          // validate the optional field `TopicPreferences` (array)
          for (int i = 0; i < jsonArraytopicPreferences.size(); i++) {
            TopicPreference.validateJsonElement(jsonArraytopicPreferences.get(i));
          };
        }
      }
      if ((jsonObj.get("AttributesData") != null && !jsonObj.get("AttributesData").isJsonNull()) && !jsonObj.get("AttributesData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributesData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttributesData").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateContactRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateContactRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateContactRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateContactRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateContactRequest>() {
           @Override
           public void write(JsonWriter out, CreateContactRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateContactRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateContactRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateContactRequest
   * @throws IOException if the JSON string is invalid with respect to CreateContactRequest
   */
  public static CreateContactRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateContactRequest.class);
  }

  /**
   * Convert an instance of CreateContactRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

