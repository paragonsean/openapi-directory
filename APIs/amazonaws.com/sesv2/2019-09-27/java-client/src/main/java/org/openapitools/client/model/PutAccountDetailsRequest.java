/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutAccountDetailsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutAccountDetailsRequest {
  /**
   * The type of email your account will send.
   */
  @JsonAdapter(MailTypeEnum.Adapter.class)
  public enum MailTypeEnum {
    MARKETING("MARKETING"),
    
    TRANSACTIONAL("TRANSACTIONAL");

    private String value;

    MailTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MailTypeEnum fromValue(String value) {
      for (MailTypeEnum b : MailTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MailTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MailTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MailTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MailTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MailTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAIL_TYPE = "MailType";
  @SerializedName(SERIALIZED_NAME_MAIL_TYPE)
  private MailTypeEnum mailType;

  public static final String SERIALIZED_NAME_WEBSITE_U_R_L = "WebsiteURL";
  @SerializedName(SERIALIZED_NAME_WEBSITE_U_R_L)
  private String websiteURL;

  /**
   * The language you would prefer to be contacted with.
   */
  @JsonAdapter(ContactLanguageEnum.Adapter.class)
  public enum ContactLanguageEnum {
    EN("EN"),
    
    JA("JA");

    private String value;

    ContactLanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContactLanguageEnum fromValue(String value) {
      for (ContactLanguageEnum b : ContactLanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContactLanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContactLanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContactLanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContactLanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContactLanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTACT_LANGUAGE = "ContactLanguage";
  @SerializedName(SERIALIZED_NAME_CONTACT_LANGUAGE)
  private ContactLanguageEnum contactLanguage;

  public static final String SERIALIZED_NAME_USE_CASE_DESCRIPTION = "UseCaseDescription";
  @SerializedName(SERIALIZED_NAME_USE_CASE_DESCRIPTION)
  private String useCaseDescription;

  public static final String SERIALIZED_NAME_ADDITIONAL_CONTACT_EMAIL_ADDRESSES = "AdditionalContactEmailAddresses";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CONTACT_EMAIL_ADDRESSES)
  private List<String> additionalContactEmailAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCTION_ACCESS_ENABLED = "ProductionAccessEnabled";
  @SerializedName(SERIALIZED_NAME_PRODUCTION_ACCESS_ENABLED)
  private Boolean productionAccessEnabled;

  public PutAccountDetailsRequest() {
  }

  public PutAccountDetailsRequest mailType(MailTypeEnum mailType) {
    this.mailType = mailType;
    return this;
  }

  /**
   * The type of email your account will send.
   * @return mailType
   */
  @javax.annotation.Nonnull
  public MailTypeEnum getMailType() {
    return mailType;
  }

  public void setMailType(MailTypeEnum mailType) {
    this.mailType = mailType;
  }


  public PutAccountDetailsRequest websiteURL(String websiteURL) {
    this.websiteURL = websiteURL;
    return this;
  }

  /**
   * The URL of your website. This information helps us better understand the type of content that you plan to send.
   * @return websiteURL
   */
  @javax.annotation.Nonnull
  public String getWebsiteURL() {
    return websiteURL;
  }

  public void setWebsiteURL(String websiteURL) {
    this.websiteURL = websiteURL;
  }


  public PutAccountDetailsRequest contactLanguage(ContactLanguageEnum contactLanguage) {
    this.contactLanguage = contactLanguage;
    return this;
  }

  /**
   * The language you would prefer to be contacted with.
   * @return contactLanguage
   */
  @javax.annotation.Nullable
  public ContactLanguageEnum getContactLanguage() {
    return contactLanguage;
  }

  public void setContactLanguage(ContactLanguageEnum contactLanguage) {
    this.contactLanguage = contactLanguage;
  }


  public PutAccountDetailsRequest useCaseDescription(String useCaseDescription) {
    this.useCaseDescription = useCaseDescription;
    return this;
  }

  /**
   * A description of the types of email that you plan to send.
   * @return useCaseDescription
   */
  @javax.annotation.Nonnull
  public String getUseCaseDescription() {
    return useCaseDescription;
  }

  public void setUseCaseDescription(String useCaseDescription) {
    this.useCaseDescription = useCaseDescription;
  }


  public PutAccountDetailsRequest additionalContactEmailAddresses(List<String> additionalContactEmailAddresses) {
    this.additionalContactEmailAddresses = additionalContactEmailAddresses;
    return this;
  }

  public PutAccountDetailsRequest addAdditionalContactEmailAddressesItem(String additionalContactEmailAddressesItem) {
    if (this.additionalContactEmailAddresses == null) {
      this.additionalContactEmailAddresses = new ArrayList<>();
    }
    this.additionalContactEmailAddresses.add(additionalContactEmailAddressesItem);
    return this;
  }

  /**
   * Additional email addresses that you would like to be notified regarding Amazon SES matters.
   * @return additionalContactEmailAddresses
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalContactEmailAddresses() {
    return additionalContactEmailAddresses;
  }

  public void setAdditionalContactEmailAddresses(List<String> additionalContactEmailAddresses) {
    this.additionalContactEmailAddresses = additionalContactEmailAddresses;
  }


  public PutAccountDetailsRequest productionAccessEnabled(Boolean productionAccessEnabled) {
    this.productionAccessEnabled = productionAccessEnabled;
    return this;
  }

  /**
   * &lt;p&gt;Indicates whether or not your account should have production access in the current Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;If the value is &lt;code&gt;false&lt;/code&gt;, then your account is in the &lt;i&gt;sandbox&lt;/i&gt;. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1.&lt;/p&gt; &lt;p&gt;If the value is &lt;code&gt;true&lt;/code&gt;, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.&lt;/p&gt;
   * @return productionAccessEnabled
   */
  @javax.annotation.Nullable
  public Boolean getProductionAccessEnabled() {
    return productionAccessEnabled;
  }

  public void setProductionAccessEnabled(Boolean productionAccessEnabled) {
    this.productionAccessEnabled = productionAccessEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutAccountDetailsRequest putAccountDetailsRequest = (PutAccountDetailsRequest) o;
    return Objects.equals(this.mailType, putAccountDetailsRequest.mailType) &&
        Objects.equals(this.websiteURL, putAccountDetailsRequest.websiteURL) &&
        Objects.equals(this.contactLanguage, putAccountDetailsRequest.contactLanguage) &&
        Objects.equals(this.useCaseDescription, putAccountDetailsRequest.useCaseDescription) &&
        Objects.equals(this.additionalContactEmailAddresses, putAccountDetailsRequest.additionalContactEmailAddresses) &&
        Objects.equals(this.productionAccessEnabled, putAccountDetailsRequest.productionAccessEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mailType, websiteURL, contactLanguage, useCaseDescription, additionalContactEmailAddresses, productionAccessEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutAccountDetailsRequest {\n");
    sb.append("    mailType: ").append(toIndentedString(mailType)).append("\n");
    sb.append("    websiteURL: ").append("*").append("\n");
    sb.append("    contactLanguage: ").append(toIndentedString(contactLanguage)).append("\n");
    sb.append("    useCaseDescription: ").append("*").append("\n");
    sb.append("    additionalContactEmailAddresses: ").append(toIndentedString(additionalContactEmailAddresses)).append("\n");
    sb.append("    productionAccessEnabled: ").append(toIndentedString(productionAccessEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MailType");
    openapiFields.add("WebsiteURL");
    openapiFields.add("ContactLanguage");
    openapiFields.add("UseCaseDescription");
    openapiFields.add("AdditionalContactEmailAddresses");
    openapiFields.add("ProductionAccessEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MailType");
    openapiRequiredFields.add("WebsiteURL");
    openapiRequiredFields.add("UseCaseDescription");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutAccountDetailsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutAccountDetailsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutAccountDetailsRequest is not found in the empty JSON string", PutAccountDetailsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutAccountDetailsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutAccountDetailsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutAccountDetailsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("MailType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MailType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MailType").toString()));
      }
      // validate the required field `MailType`
      MailTypeEnum.validateJsonElement(jsonObj.get("MailType"));
      if (!jsonObj.get("WebsiteURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebsiteURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebsiteURL").toString()));
      }
      if ((jsonObj.get("ContactLanguage") != null && !jsonObj.get("ContactLanguage").isJsonNull()) && !jsonObj.get("ContactLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactLanguage").toString()));
      }
      // validate the optional field `ContactLanguage`
      if (jsonObj.get("ContactLanguage") != null && !jsonObj.get("ContactLanguage").isJsonNull()) {
        ContactLanguageEnum.validateJsonElement(jsonObj.get("ContactLanguage"));
      }
      if (!jsonObj.get("UseCaseDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UseCaseDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UseCaseDescription").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AdditionalContactEmailAddresses") != null && !jsonObj.get("AdditionalContactEmailAddresses").isJsonNull() && !jsonObj.get("AdditionalContactEmailAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdditionalContactEmailAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("AdditionalContactEmailAddresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutAccountDetailsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutAccountDetailsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutAccountDetailsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutAccountDetailsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutAccountDetailsRequest>() {
           @Override
           public void write(JsonWriter out, PutAccountDetailsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutAccountDetailsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutAccountDetailsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutAccountDetailsRequest
   * @throws IOException if the JSON string is invalid with respect to PutAccountDetailsRequest
   */
  public static PutAccountDetailsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutAccountDetailsRequest.class);
  }

  /**
   * Convert an instance of PutAccountDetailsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

