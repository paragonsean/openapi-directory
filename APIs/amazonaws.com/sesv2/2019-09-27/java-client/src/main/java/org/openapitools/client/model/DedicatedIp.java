/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WarmupStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about a dedicated IP address that is associated with your Amazon SES account.&lt;/p&gt; &lt;p&gt;To learn more about requesting dedicated IP addresses, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html\&quot;&gt;Requesting and Relinquishing Dedicated IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon SES Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DedicatedIp {
  public static final String SERIALIZED_NAME_IP = "Ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_WARMUP_STATUS = "WarmupStatus";
  @SerializedName(SERIALIZED_NAME_WARMUP_STATUS)
  private WarmupStatus warmupStatus;

  public static final String SERIALIZED_NAME_WARMUP_PERCENTAGE = "WarmupPercentage";
  @SerializedName(SERIALIZED_NAME_WARMUP_PERCENTAGE)
  private Integer warmupPercentage;

  public static final String SERIALIZED_NAME_POOL_NAME = "PoolName";
  @SerializedName(SERIALIZED_NAME_POOL_NAME)
  private String poolName;

  public DedicatedIp() {
  }

  public DedicatedIp ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public DedicatedIp warmupStatus(WarmupStatus warmupStatus) {
    this.warmupStatus = warmupStatus;
    return this;
  }

  /**
   * Get warmupStatus
   * @return warmupStatus
   */
  @javax.annotation.Nonnull
  public WarmupStatus getWarmupStatus() {
    return warmupStatus;
  }

  public void setWarmupStatus(WarmupStatus warmupStatus) {
    this.warmupStatus = warmupStatus;
  }


  public DedicatedIp warmupPercentage(Integer warmupPercentage) {
    this.warmupPercentage = warmupPercentage;
    return this;
  }

  /**
   * Get warmupPercentage
   * @return warmupPercentage
   */
  @javax.annotation.Nonnull
  public Integer getWarmupPercentage() {
    return warmupPercentage;
  }

  public void setWarmupPercentage(Integer warmupPercentage) {
    this.warmupPercentage = warmupPercentage;
  }


  public DedicatedIp poolName(String poolName) {
    this.poolName = poolName;
    return this;
  }

  /**
   * Get poolName
   * @return poolName
   */
  @javax.annotation.Nullable
  public String getPoolName() {
    return poolName;
  }

  public void setPoolName(String poolName) {
    this.poolName = poolName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DedicatedIp dedicatedIp = (DedicatedIp) o;
    return Objects.equals(this.ip, dedicatedIp.ip) &&
        Objects.equals(this.warmupStatus, dedicatedIp.warmupStatus) &&
        Objects.equals(this.warmupPercentage, dedicatedIp.warmupPercentage) &&
        Objects.equals(this.poolName, dedicatedIp.poolName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ip, warmupStatus, warmupPercentage, poolName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DedicatedIp {\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    warmupStatus: ").append(toIndentedString(warmupStatus)).append("\n");
    sb.append("    warmupPercentage: ").append(toIndentedString(warmupPercentage)).append("\n");
    sb.append("    poolName: ").append(toIndentedString(poolName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Ip");
    openapiFields.add("WarmupStatus");
    openapiFields.add("WarmupPercentage");
    openapiFields.add("PoolName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Ip");
    openapiRequiredFields.add("WarmupStatus");
    openapiRequiredFields.add("WarmupPercentage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DedicatedIp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DedicatedIp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DedicatedIp is not found in the empty JSON string", DedicatedIp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DedicatedIp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DedicatedIp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DedicatedIp.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Ip`
      String.validateJsonElement(jsonObj.get("Ip"));
      // validate the required field `WarmupStatus`
      WarmupStatus.validateJsonElement(jsonObj.get("WarmupStatus"));
      // validate the required field `WarmupPercentage`
      Integer.validateJsonElement(jsonObj.get("WarmupPercentage"));
      // validate the optional field `PoolName`
      if (jsonObj.get("PoolName") != null && !jsonObj.get("PoolName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PoolName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DedicatedIp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DedicatedIp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DedicatedIp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DedicatedIp.class));

       return (TypeAdapter<T>) new TypeAdapter<DedicatedIp>() {
           @Override
           public void write(JsonWriter out, DedicatedIp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DedicatedIp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DedicatedIp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DedicatedIp
   * @throws IOException if the JSON string is invalid with respect to DedicatedIp
   */
  public static DedicatedIp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DedicatedIp.class);
  }

  /**
   * Convert an instance of DedicatedIp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

