/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetDeliverabilityTestReportResponseDeliverabilityTestReport;
import org.openapitools.client.model.GetDeliverabilityTestReportResponseOverallPlacement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The results of the predictive inbox placement test.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeliverabilityTestReportResponse {
  public static final String SERIALIZED_NAME_DELIVERABILITY_TEST_REPORT = "DeliverabilityTestReport";
  @SerializedName(SERIALIZED_NAME_DELIVERABILITY_TEST_REPORT)
  private GetDeliverabilityTestReportResponseDeliverabilityTestReport deliverabilityTestReport;

  public static final String SERIALIZED_NAME_OVERALL_PLACEMENT = "OverallPlacement";
  @SerializedName(SERIALIZED_NAME_OVERALL_PLACEMENT)
  private GetDeliverabilityTestReportResponseOverallPlacement overallPlacement;

  public static final String SERIALIZED_NAME_ISP_PLACEMENTS = "IspPlacements";
  @SerializedName(SERIALIZED_NAME_ISP_PLACEMENTS)
  private List ispPlacements;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public GetDeliverabilityTestReportResponse() {
  }

  public GetDeliverabilityTestReportResponse deliverabilityTestReport(GetDeliverabilityTestReportResponseDeliverabilityTestReport deliverabilityTestReport) {
    this.deliverabilityTestReport = deliverabilityTestReport;
    return this;
  }

  /**
   * Get deliverabilityTestReport
   * @return deliverabilityTestReport
   */
  @javax.annotation.Nonnull
  public GetDeliverabilityTestReportResponseDeliverabilityTestReport getDeliverabilityTestReport() {
    return deliverabilityTestReport;
  }

  public void setDeliverabilityTestReport(GetDeliverabilityTestReportResponseDeliverabilityTestReport deliverabilityTestReport) {
    this.deliverabilityTestReport = deliverabilityTestReport;
  }


  public GetDeliverabilityTestReportResponse overallPlacement(GetDeliverabilityTestReportResponseOverallPlacement overallPlacement) {
    this.overallPlacement = overallPlacement;
    return this;
  }

  /**
   * Get overallPlacement
   * @return overallPlacement
   */
  @javax.annotation.Nonnull
  public GetDeliverabilityTestReportResponseOverallPlacement getOverallPlacement() {
    return overallPlacement;
  }

  public void setOverallPlacement(GetDeliverabilityTestReportResponseOverallPlacement overallPlacement) {
    this.overallPlacement = overallPlacement;
  }


  public GetDeliverabilityTestReportResponse ispPlacements(List ispPlacements) {
    this.ispPlacements = ispPlacements;
    return this;
  }

  /**
   * Get ispPlacements
   * @return ispPlacements
   */
  @javax.annotation.Nonnull
  public List getIspPlacements() {
    return ispPlacements;
  }

  public void setIspPlacements(List ispPlacements) {
    this.ispPlacements = ispPlacements;
  }


  public GetDeliverabilityTestReportResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GetDeliverabilityTestReportResponse tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeliverabilityTestReportResponse getDeliverabilityTestReportResponse = (GetDeliverabilityTestReportResponse) o;
    return Objects.equals(this.deliverabilityTestReport, getDeliverabilityTestReportResponse.deliverabilityTestReport) &&
        Objects.equals(this.overallPlacement, getDeliverabilityTestReportResponse.overallPlacement) &&
        Objects.equals(this.ispPlacements, getDeliverabilityTestReportResponse.ispPlacements) &&
        Objects.equals(this.message, getDeliverabilityTestReportResponse.message) &&
        Objects.equals(this.tags, getDeliverabilityTestReportResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliverabilityTestReport, overallPlacement, ispPlacements, message, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeliverabilityTestReportResponse {\n");
    sb.append("    deliverabilityTestReport: ").append(toIndentedString(deliverabilityTestReport)).append("\n");
    sb.append("    overallPlacement: ").append(toIndentedString(overallPlacement)).append("\n");
    sb.append("    ispPlacements: ").append(toIndentedString(ispPlacements)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeliverabilityTestReport");
    openapiFields.add("OverallPlacement");
    openapiFields.add("IspPlacements");
    openapiFields.add("Message");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeliverabilityTestReport");
    openapiRequiredFields.add("OverallPlacement");
    openapiRequiredFields.add("IspPlacements");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeliverabilityTestReportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeliverabilityTestReportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeliverabilityTestReportResponse is not found in the empty JSON string", GetDeliverabilityTestReportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeliverabilityTestReportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeliverabilityTestReportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDeliverabilityTestReportResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DeliverabilityTestReport`
      GetDeliverabilityTestReportResponseDeliverabilityTestReport.validateJsonElement(jsonObj.get("DeliverabilityTestReport"));
      // validate the required field `OverallPlacement`
      GetDeliverabilityTestReportResponseOverallPlacement.validateJsonElement(jsonObj.get("OverallPlacement"));
      // validate the required field `IspPlacements`
      List.validateJsonElement(jsonObj.get("IspPlacements"));
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeliverabilityTestReportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeliverabilityTestReportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeliverabilityTestReportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeliverabilityTestReportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeliverabilityTestReportResponse>() {
           @Override
           public void write(JsonWriter out, GetDeliverabilityTestReportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeliverabilityTestReportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeliverabilityTestReportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeliverabilityTestReportResponse
   * @throws IOException if the JSON string is invalid with respect to GetDeliverabilityTestReportResponse
   */
  public static GetDeliverabilityTestReportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeliverabilityTestReportResponse.class);
  }

  /**
   * Convert an instance of GetDeliverabilityTestReportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

