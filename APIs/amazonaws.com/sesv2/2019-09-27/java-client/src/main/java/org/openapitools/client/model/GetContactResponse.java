/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetContactResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetContactResponse {
  public static final String SERIALIZED_NAME_CONTACT_LIST_NAME = "ContactListName";
  @SerializedName(SERIALIZED_NAME_CONTACT_LIST_NAME)
  private String contactListName;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_TOPIC_PREFERENCES = "TopicPreferences";
  @SerializedName(SERIALIZED_NAME_TOPIC_PREFERENCES)
  private List topicPreferences;

  public static final String SERIALIZED_NAME_TOPIC_DEFAULT_PREFERENCES = "TopicDefaultPreferences";
  @SerializedName(SERIALIZED_NAME_TOPIC_DEFAULT_PREFERENCES)
  private List topicDefaultPreferences;

  public static final String SERIALIZED_NAME_UNSUBSCRIBE_ALL = "UnsubscribeAll";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBE_ALL)
  private Boolean unsubscribeAll;

  public static final String SERIALIZED_NAME_ATTRIBUTES_DATA = "AttributesData";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_DATA)
  private String attributesData;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "LastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  private OffsetDateTime lastUpdatedTimestamp;

  public GetContactResponse() {
  }

  public GetContactResponse contactListName(String contactListName) {
    this.contactListName = contactListName;
    return this;
  }

  /**
   * Get contactListName
   * @return contactListName
   */
  @javax.annotation.Nullable
  public String getContactListName() {
    return contactListName;
  }

  public void setContactListName(String contactListName) {
    this.contactListName = contactListName;
  }


  public GetContactResponse emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Get emailAddress
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public GetContactResponse topicPreferences(List topicPreferences) {
    this.topicPreferences = topicPreferences;
    return this;
  }

  /**
   * Get topicPreferences
   * @return topicPreferences
   */
  @javax.annotation.Nullable
  public List getTopicPreferences() {
    return topicPreferences;
  }

  public void setTopicPreferences(List topicPreferences) {
    this.topicPreferences = topicPreferences;
  }


  public GetContactResponse topicDefaultPreferences(List topicDefaultPreferences) {
    this.topicDefaultPreferences = topicDefaultPreferences;
    return this;
  }

  /**
   * Get topicDefaultPreferences
   * @return topicDefaultPreferences
   */
  @javax.annotation.Nullable
  public List getTopicDefaultPreferences() {
    return topicDefaultPreferences;
  }

  public void setTopicDefaultPreferences(List topicDefaultPreferences) {
    this.topicDefaultPreferences = topicDefaultPreferences;
  }


  public GetContactResponse unsubscribeAll(Boolean unsubscribeAll) {
    this.unsubscribeAll = unsubscribeAll;
    return this;
  }

  /**
   * Get unsubscribeAll
   * @return unsubscribeAll
   */
  @javax.annotation.Nullable
  public Boolean getUnsubscribeAll() {
    return unsubscribeAll;
  }

  public void setUnsubscribeAll(Boolean unsubscribeAll) {
    this.unsubscribeAll = unsubscribeAll;
  }


  public GetContactResponse attributesData(String attributesData) {
    this.attributesData = attributesData;
    return this;
  }

  /**
   * Get attributesData
   * @return attributesData
   */
  @javax.annotation.Nullable
  public String getAttributesData() {
    return attributesData;
  }

  public void setAttributesData(String attributesData) {
    this.attributesData = attributesData;
  }


  public GetContactResponse createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public GetContactResponse lastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * Get lastUpdatedTimestamp
   * @return lastUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContactResponse getContactResponse = (GetContactResponse) o;
    return Objects.equals(this.contactListName, getContactResponse.contactListName) &&
        Objects.equals(this.emailAddress, getContactResponse.emailAddress) &&
        Objects.equals(this.topicPreferences, getContactResponse.topicPreferences) &&
        Objects.equals(this.topicDefaultPreferences, getContactResponse.topicDefaultPreferences) &&
        Objects.equals(this.unsubscribeAll, getContactResponse.unsubscribeAll) &&
        Objects.equals(this.attributesData, getContactResponse.attributesData) &&
        Objects.equals(this.createdTimestamp, getContactResponse.createdTimestamp) &&
        Objects.equals(this.lastUpdatedTimestamp, getContactResponse.lastUpdatedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactListName, emailAddress, topicPreferences, topicDefaultPreferences, unsubscribeAll, attributesData, createdTimestamp, lastUpdatedTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContactResponse {\n");
    sb.append("    contactListName: ").append(toIndentedString(contactListName)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    topicPreferences: ").append(toIndentedString(topicPreferences)).append("\n");
    sb.append("    topicDefaultPreferences: ").append(toIndentedString(topicDefaultPreferences)).append("\n");
    sb.append("    unsubscribeAll: ").append(toIndentedString(unsubscribeAll)).append("\n");
    sb.append("    attributesData: ").append(toIndentedString(attributesData)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContactListName");
    openapiFields.add("EmailAddress");
    openapiFields.add("TopicPreferences");
    openapiFields.add("TopicDefaultPreferences");
    openapiFields.add("UnsubscribeAll");
    openapiFields.add("AttributesData");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("LastUpdatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetContactResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetContactResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetContactResponse is not found in the empty JSON string", GetContactResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetContactResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetContactResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ContactListName`
      if (jsonObj.get("ContactListName") != null && !jsonObj.get("ContactListName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContactListName"));
      }
      // validate the optional field `EmailAddress`
      if (jsonObj.get("EmailAddress") != null && !jsonObj.get("EmailAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EmailAddress"));
      }
      // validate the optional field `TopicPreferences`
      if (jsonObj.get("TopicPreferences") != null && !jsonObj.get("TopicPreferences").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TopicPreferences"));
      }
      // validate the optional field `TopicDefaultPreferences`
      if (jsonObj.get("TopicDefaultPreferences") != null && !jsonObj.get("TopicDefaultPreferences").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TopicDefaultPreferences"));
      }
      // validate the optional field `UnsubscribeAll`
      if (jsonObj.get("UnsubscribeAll") != null && !jsonObj.get("UnsubscribeAll").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UnsubscribeAll"));
      }
      // validate the optional field `AttributesData`
      if (jsonObj.get("AttributesData") != null && !jsonObj.get("AttributesData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AttributesData"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `LastUpdatedTimestamp`
      if (jsonObj.get("LastUpdatedTimestamp") != null && !jsonObj.get("LastUpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetContactResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetContactResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetContactResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetContactResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetContactResponse>() {
           @Override
           public void write(JsonWriter out, GetContactResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetContactResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetContactResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetContactResponse
   * @throws IOException if the JSON string is invalid with respect to GetContactResponse
   */
  public static GetContactResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetContactResponse.class);
  }

  /**
   * Convert an instance of GetContactResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

