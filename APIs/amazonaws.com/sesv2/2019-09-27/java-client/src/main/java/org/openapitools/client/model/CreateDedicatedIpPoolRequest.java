/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDedicatedIpPoolRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDedicatedIpPoolRequest {
  public static final String SERIALIZED_NAME_POOL_NAME = "PoolName";
  @SerializedName(SERIALIZED_NAME_POOL_NAME)
  private String poolName;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  /**
   * The type of scaling mode.
   */
  @JsonAdapter(ScalingModeEnum.Adapter.class)
  public enum ScalingModeEnum {
    STANDARD("STANDARD"),
    
    MANAGED("MANAGED");

    private String value;

    ScalingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScalingModeEnum fromValue(String value) {
      for (ScalingModeEnum b : ScalingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScalingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScalingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScalingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScalingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScalingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCALING_MODE = "ScalingMode";
  @SerializedName(SERIALIZED_NAME_SCALING_MODE)
  private ScalingModeEnum scalingMode;

  public CreateDedicatedIpPoolRequest() {
  }

  public CreateDedicatedIpPoolRequest poolName(String poolName) {
    this.poolName = poolName;
    return this;
  }

  /**
   * The name of a dedicated IP pool.
   * @return poolName
   */
  @javax.annotation.Nonnull
  public String getPoolName() {
    return poolName;
  }

  public void setPoolName(String poolName) {
    this.poolName = poolName;
  }


  public CreateDedicatedIpPoolRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDedicatedIpPoolRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * An object that defines the tags (keys and values) that you want to associate with the pool.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateDedicatedIpPoolRequest scalingMode(ScalingModeEnum scalingMode) {
    this.scalingMode = scalingMode;
    return this;
  }

  /**
   * The type of scaling mode.
   * @return scalingMode
   */
  @javax.annotation.Nullable
  public ScalingModeEnum getScalingMode() {
    return scalingMode;
  }

  public void setScalingMode(ScalingModeEnum scalingMode) {
    this.scalingMode = scalingMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDedicatedIpPoolRequest createDedicatedIpPoolRequest = (CreateDedicatedIpPoolRequest) o;
    return Objects.equals(this.poolName, createDedicatedIpPoolRequest.poolName) &&
        Objects.equals(this.tags, createDedicatedIpPoolRequest.tags) &&
        Objects.equals(this.scalingMode, createDedicatedIpPoolRequest.scalingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(poolName, tags, scalingMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDedicatedIpPoolRequest {\n");
    sb.append("    poolName: ").append(toIndentedString(poolName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    scalingMode: ").append(toIndentedString(scalingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PoolName");
    openapiFields.add("Tags");
    openapiFields.add("ScalingMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PoolName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDedicatedIpPoolRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDedicatedIpPoolRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDedicatedIpPoolRequest is not found in the empty JSON string", CreateDedicatedIpPoolRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDedicatedIpPoolRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDedicatedIpPoolRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDedicatedIpPoolRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("PoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PoolName").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("ScalingMode") != null && !jsonObj.get("ScalingMode").isJsonNull()) && !jsonObj.get("ScalingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScalingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScalingMode").toString()));
      }
      // validate the optional field `ScalingMode`
      if (jsonObj.get("ScalingMode") != null && !jsonObj.get("ScalingMode").isJsonNull()) {
        ScalingModeEnum.validateJsonElement(jsonObj.get("ScalingMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDedicatedIpPoolRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDedicatedIpPoolRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDedicatedIpPoolRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDedicatedIpPoolRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDedicatedIpPoolRequest>() {
           @Override
           public void write(JsonWriter out, CreateDedicatedIpPoolRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDedicatedIpPoolRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDedicatedIpPoolRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDedicatedIpPoolRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDedicatedIpPoolRequest
   */
  public static CreateDedicatedIpPoolRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDedicatedIpPoolRequest.class);
  }

  /**
   * Convert an instance of CreateDedicatedIpPoolRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

