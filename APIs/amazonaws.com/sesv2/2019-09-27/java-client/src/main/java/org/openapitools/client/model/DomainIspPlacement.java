/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that contains inbox placement data for email sent from one of your email domains to a specific email provider.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainIspPlacement {
  public static final String SERIALIZED_NAME_ISP_NAME = "IspName";
  @SerializedName(SERIALIZED_NAME_ISP_NAME)
  private String ispName;

  public static final String SERIALIZED_NAME_INBOX_RAW_COUNT = "InboxRawCount";
  @SerializedName(SERIALIZED_NAME_INBOX_RAW_COUNT)
  private Integer inboxRawCount;

  public static final String SERIALIZED_NAME_SPAM_RAW_COUNT = "SpamRawCount";
  @SerializedName(SERIALIZED_NAME_SPAM_RAW_COUNT)
  private Integer spamRawCount;

  public static final String SERIALIZED_NAME_INBOX_PERCENTAGE = "InboxPercentage";
  @SerializedName(SERIALIZED_NAME_INBOX_PERCENTAGE)
  private Double inboxPercentage;

  public static final String SERIALIZED_NAME_SPAM_PERCENTAGE = "SpamPercentage";
  @SerializedName(SERIALIZED_NAME_SPAM_PERCENTAGE)
  private Double spamPercentage;

  public DomainIspPlacement() {
  }

  public DomainIspPlacement ispName(String ispName) {
    this.ispName = ispName;
    return this;
  }

  /**
   * Get ispName
   * @return ispName
   */
  @javax.annotation.Nullable
  public String getIspName() {
    return ispName;
  }

  public void setIspName(String ispName) {
    this.ispName = ispName;
  }


  public DomainIspPlacement inboxRawCount(Integer inboxRawCount) {
    this.inboxRawCount = inboxRawCount;
    return this;
  }

  /**
   * Get inboxRawCount
   * @return inboxRawCount
   */
  @javax.annotation.Nullable
  public Integer getInboxRawCount() {
    return inboxRawCount;
  }

  public void setInboxRawCount(Integer inboxRawCount) {
    this.inboxRawCount = inboxRawCount;
  }


  public DomainIspPlacement spamRawCount(Integer spamRawCount) {
    this.spamRawCount = spamRawCount;
    return this;
  }

  /**
   * Get spamRawCount
   * @return spamRawCount
   */
  @javax.annotation.Nullable
  public Integer getSpamRawCount() {
    return spamRawCount;
  }

  public void setSpamRawCount(Integer spamRawCount) {
    this.spamRawCount = spamRawCount;
  }


  public DomainIspPlacement inboxPercentage(Double inboxPercentage) {
    this.inboxPercentage = inboxPercentage;
    return this;
  }

  /**
   * Get inboxPercentage
   * @return inboxPercentage
   */
  @javax.annotation.Nullable
  public Double getInboxPercentage() {
    return inboxPercentage;
  }

  public void setInboxPercentage(Double inboxPercentage) {
    this.inboxPercentage = inboxPercentage;
  }


  public DomainIspPlacement spamPercentage(Double spamPercentage) {
    this.spamPercentage = spamPercentage;
    return this;
  }

  /**
   * Get spamPercentage
   * @return spamPercentage
   */
  @javax.annotation.Nullable
  public Double getSpamPercentage() {
    return spamPercentage;
  }

  public void setSpamPercentage(Double spamPercentage) {
    this.spamPercentage = spamPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainIspPlacement domainIspPlacement = (DomainIspPlacement) o;
    return Objects.equals(this.ispName, domainIspPlacement.ispName) &&
        Objects.equals(this.inboxRawCount, domainIspPlacement.inboxRawCount) &&
        Objects.equals(this.spamRawCount, domainIspPlacement.spamRawCount) &&
        Objects.equals(this.inboxPercentage, domainIspPlacement.inboxPercentage) &&
        Objects.equals(this.spamPercentage, domainIspPlacement.spamPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ispName, inboxRawCount, spamRawCount, inboxPercentage, spamPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainIspPlacement {\n");
    sb.append("    ispName: ").append(toIndentedString(ispName)).append("\n");
    sb.append("    inboxRawCount: ").append(toIndentedString(inboxRawCount)).append("\n");
    sb.append("    spamRawCount: ").append(toIndentedString(spamRawCount)).append("\n");
    sb.append("    inboxPercentage: ").append(toIndentedString(inboxPercentage)).append("\n");
    sb.append("    spamPercentage: ").append(toIndentedString(spamPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IspName");
    openapiFields.add("InboxRawCount");
    openapiFields.add("SpamRawCount");
    openapiFields.add("InboxPercentage");
    openapiFields.add("SpamPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainIspPlacement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainIspPlacement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainIspPlacement is not found in the empty JSON string", DomainIspPlacement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainIspPlacement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainIspPlacement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IspName`
      if (jsonObj.get("IspName") != null && !jsonObj.get("IspName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IspName"));
      }
      // validate the optional field `InboxRawCount`
      if (jsonObj.get("InboxRawCount") != null && !jsonObj.get("InboxRawCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InboxRawCount"));
      }
      // validate the optional field `SpamRawCount`
      if (jsonObj.get("SpamRawCount") != null && !jsonObj.get("SpamRawCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SpamRawCount"));
      }
      // validate the optional field `InboxPercentage`
      if (jsonObj.get("InboxPercentage") != null && !jsonObj.get("InboxPercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("InboxPercentage"));
      }
      // validate the optional field `SpamPercentage`
      if (jsonObj.get("SpamPercentage") != null && !jsonObj.get("SpamPercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("SpamPercentage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainIspPlacement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainIspPlacement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainIspPlacement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainIspPlacement.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainIspPlacement>() {
           @Override
           public void write(JsonWriter out, DomainIspPlacement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainIspPlacement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainIspPlacement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainIspPlacement
   * @throws IOException if the JSON string is invalid with respect to DomainIspPlacement
   */
  public static DomainIspPlacement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainIspPlacement.class);
  }

  /**
   * Convert an instance of DomainIspPlacement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

