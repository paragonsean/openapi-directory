/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutEmailIdentityMailFromAttributesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutEmailIdentityMailFromAttributesRequest {
  public static final String SERIALIZED_NAME_MAIL_FROM_DOMAIN = "MailFromDomain";
  @SerializedName(SERIALIZED_NAME_MAIL_FROM_DOMAIN)
  private String mailFromDomain;

  /**
   * &lt;p&gt;The action to take if the required MX record can&#39;t be found when you send an email. When you set this value to &lt;code&gt;UseDefaultValue&lt;/code&gt;, the mail is sent using &lt;i&gt;amazonses.com&lt;/i&gt; as the MAIL FROM domain. When you set this value to &lt;code&gt;RejectMessage&lt;/code&gt;, the Amazon SES API v2 returns a &lt;code&gt;MailFromDomainNotVerified&lt;/code&gt; error, and doesn&#39;t attempt to deliver the email.&lt;/p&gt; &lt;p&gt;These behaviors are taken when the custom MAIL FROM domain configuration is in the &lt;code&gt;Pending&lt;/code&gt;, &lt;code&gt;Failed&lt;/code&gt;, and &lt;code&gt;TemporaryFailure&lt;/code&gt; states.&lt;/p&gt;
   */
  @JsonAdapter(BehaviorOnMxFailureEnum.Adapter.class)
  public enum BehaviorOnMxFailureEnum {
    USE_DEFAULT_VALUE("USE_DEFAULT_VALUE"),
    
    REJECT_MESSAGE("REJECT_MESSAGE");

    private String value;

    BehaviorOnMxFailureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BehaviorOnMxFailureEnum fromValue(String value) {
      for (BehaviorOnMxFailureEnum b : BehaviorOnMxFailureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BehaviorOnMxFailureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BehaviorOnMxFailureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BehaviorOnMxFailureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BehaviorOnMxFailureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BehaviorOnMxFailureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BEHAVIOR_ON_MX_FAILURE = "BehaviorOnMxFailure";
  @SerializedName(SERIALIZED_NAME_BEHAVIOR_ON_MX_FAILURE)
  private BehaviorOnMxFailureEnum behaviorOnMxFailure;

  public PutEmailIdentityMailFromAttributesRequest() {
  }

  public PutEmailIdentityMailFromAttributesRequest mailFromDomain(String mailFromDomain) {
    this.mailFromDomain = mailFromDomain;
    return this;
  }

  /**
   * The domain to use as a MAIL FROM domain.
   * @return mailFromDomain
   */
  @javax.annotation.Nullable
  public String getMailFromDomain() {
    return mailFromDomain;
  }

  public void setMailFromDomain(String mailFromDomain) {
    this.mailFromDomain = mailFromDomain;
  }


  public PutEmailIdentityMailFromAttributesRequest behaviorOnMxFailure(BehaviorOnMxFailureEnum behaviorOnMxFailure) {
    this.behaviorOnMxFailure = behaviorOnMxFailure;
    return this;
  }

  /**
   * &lt;p&gt;The action to take if the required MX record can&#39;t be found when you send an email. When you set this value to &lt;code&gt;UseDefaultValue&lt;/code&gt;, the mail is sent using &lt;i&gt;amazonses.com&lt;/i&gt; as the MAIL FROM domain. When you set this value to &lt;code&gt;RejectMessage&lt;/code&gt;, the Amazon SES API v2 returns a &lt;code&gt;MailFromDomainNotVerified&lt;/code&gt; error, and doesn&#39;t attempt to deliver the email.&lt;/p&gt; &lt;p&gt;These behaviors are taken when the custom MAIL FROM domain configuration is in the &lt;code&gt;Pending&lt;/code&gt;, &lt;code&gt;Failed&lt;/code&gt;, and &lt;code&gt;TemporaryFailure&lt;/code&gt; states.&lt;/p&gt;
   * @return behaviorOnMxFailure
   */
  @javax.annotation.Nullable
  public BehaviorOnMxFailureEnum getBehaviorOnMxFailure() {
    return behaviorOnMxFailure;
  }

  public void setBehaviorOnMxFailure(BehaviorOnMxFailureEnum behaviorOnMxFailure) {
    this.behaviorOnMxFailure = behaviorOnMxFailure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutEmailIdentityMailFromAttributesRequest putEmailIdentityMailFromAttributesRequest = (PutEmailIdentityMailFromAttributesRequest) o;
    return Objects.equals(this.mailFromDomain, putEmailIdentityMailFromAttributesRequest.mailFromDomain) &&
        Objects.equals(this.behaviorOnMxFailure, putEmailIdentityMailFromAttributesRequest.behaviorOnMxFailure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mailFromDomain, behaviorOnMxFailure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutEmailIdentityMailFromAttributesRequest {\n");
    sb.append("    mailFromDomain: ").append(toIndentedString(mailFromDomain)).append("\n");
    sb.append("    behaviorOnMxFailure: ").append(toIndentedString(behaviorOnMxFailure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MailFromDomain");
    openapiFields.add("BehaviorOnMxFailure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutEmailIdentityMailFromAttributesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutEmailIdentityMailFromAttributesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutEmailIdentityMailFromAttributesRequest is not found in the empty JSON string", PutEmailIdentityMailFromAttributesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutEmailIdentityMailFromAttributesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutEmailIdentityMailFromAttributesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("MailFromDomain") != null && !jsonObj.get("MailFromDomain").isJsonNull()) && !jsonObj.get("MailFromDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MailFromDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MailFromDomain").toString()));
      }
      if ((jsonObj.get("BehaviorOnMxFailure") != null && !jsonObj.get("BehaviorOnMxFailure").isJsonNull()) && !jsonObj.get("BehaviorOnMxFailure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BehaviorOnMxFailure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BehaviorOnMxFailure").toString()));
      }
      // validate the optional field `BehaviorOnMxFailure`
      if (jsonObj.get("BehaviorOnMxFailure") != null && !jsonObj.get("BehaviorOnMxFailure").isJsonNull()) {
        BehaviorOnMxFailureEnum.validateJsonElement(jsonObj.get("BehaviorOnMxFailure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutEmailIdentityMailFromAttributesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutEmailIdentityMailFromAttributesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutEmailIdentityMailFromAttributesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutEmailIdentityMailFromAttributesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutEmailIdentityMailFromAttributesRequest>() {
           @Override
           public void write(JsonWriter out, PutEmailIdentityMailFromAttributesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutEmailIdentityMailFromAttributesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutEmailIdentityMailFromAttributesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutEmailIdentityMailFromAttributesRequest
   * @throws IOException if the JSON string is invalid with respect to PutEmailIdentityMailFromAttributesRequest
   */
  public static PutEmailIdentityMailFromAttributesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutEmailIdentityMailFromAttributesRequest.class);
  }

  /**
   * Convert an instance of PutEmailIdentityMailFromAttributesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

