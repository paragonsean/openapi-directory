/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateEmailIdentityRequestDkimSigningAttributes;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEmailIdentityRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEmailIdentityRequest {
  public static final String SERIALIZED_NAME_EMAIL_IDENTITY = "EmailIdentity";
  @SerializedName(SERIALIZED_NAME_EMAIL_IDENTITY)
  private String emailIdentity;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DKIM_SIGNING_ATTRIBUTES = "DkimSigningAttributes";
  @SerializedName(SERIALIZED_NAME_DKIM_SIGNING_ATTRIBUTES)
  private CreateEmailIdentityRequestDkimSigningAttributes dkimSigningAttributes;

  public static final String SERIALIZED_NAME_CONFIGURATION_SET_NAME = "ConfigurationSetName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_SET_NAME)
  private String configurationSetName;

  public CreateEmailIdentityRequest() {
  }

  public CreateEmailIdentityRequest emailIdentity(String emailIdentity) {
    this.emailIdentity = emailIdentity;
    return this;
  }

  /**
   * The email address or domain to verify.
   * @return emailIdentity
   */
  @javax.annotation.Nonnull
  public String getEmailIdentity() {
    return emailIdentity;
  }

  public void setEmailIdentity(String emailIdentity) {
    this.emailIdentity = emailIdentity;
  }


  public CreateEmailIdentityRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateEmailIdentityRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * An array of objects that define the tags (keys and values) to associate with the email identity.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateEmailIdentityRequest dkimSigningAttributes(CreateEmailIdentityRequestDkimSigningAttributes dkimSigningAttributes) {
    this.dkimSigningAttributes = dkimSigningAttributes;
    return this;
  }

  /**
   * Get dkimSigningAttributes
   * @return dkimSigningAttributes
   */
  @javax.annotation.Nullable
  public CreateEmailIdentityRequestDkimSigningAttributes getDkimSigningAttributes() {
    return dkimSigningAttributes;
  }

  public void setDkimSigningAttributes(CreateEmailIdentityRequestDkimSigningAttributes dkimSigningAttributes) {
    this.dkimSigningAttributes = dkimSigningAttributes;
  }


  public CreateEmailIdentityRequest configurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
    return this;
  }

  /**
   * &lt;p&gt;The name of a configuration set.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Configuration sets&lt;/i&gt; are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.&lt;/p&gt;
   * @return configurationSetName
   */
  @javax.annotation.Nullable
  public String getConfigurationSetName() {
    return configurationSetName;
  }

  public void setConfigurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEmailIdentityRequest createEmailIdentityRequest = (CreateEmailIdentityRequest) o;
    return Objects.equals(this.emailIdentity, createEmailIdentityRequest.emailIdentity) &&
        Objects.equals(this.tags, createEmailIdentityRequest.tags) &&
        Objects.equals(this.dkimSigningAttributes, createEmailIdentityRequest.dkimSigningAttributes) &&
        Objects.equals(this.configurationSetName, createEmailIdentityRequest.configurationSetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailIdentity, tags, dkimSigningAttributes, configurationSetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEmailIdentityRequest {\n");
    sb.append("    emailIdentity: ").append(toIndentedString(emailIdentity)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    dkimSigningAttributes: ").append(toIndentedString(dkimSigningAttributes)).append("\n");
    sb.append("    configurationSetName: ").append(toIndentedString(configurationSetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmailIdentity");
    openapiFields.add("Tags");
    openapiFields.add("DkimSigningAttributes");
    openapiFields.add("ConfigurationSetName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EmailIdentity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEmailIdentityRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEmailIdentityRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEmailIdentityRequest is not found in the empty JSON string", CreateEmailIdentityRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEmailIdentityRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEmailIdentityRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEmailIdentityRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("EmailIdentity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailIdentity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailIdentity").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `DkimSigningAttributes`
      if (jsonObj.get("DkimSigningAttributes") != null && !jsonObj.get("DkimSigningAttributes").isJsonNull()) {
        CreateEmailIdentityRequestDkimSigningAttributes.validateJsonElement(jsonObj.get("DkimSigningAttributes"));
      }
      if ((jsonObj.get("ConfigurationSetName") != null && !jsonObj.get("ConfigurationSetName").isJsonNull()) && !jsonObj.get("ConfigurationSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigurationSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigurationSetName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEmailIdentityRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEmailIdentityRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEmailIdentityRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEmailIdentityRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEmailIdentityRequest>() {
           @Override
           public void write(JsonWriter out, CreateEmailIdentityRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEmailIdentityRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEmailIdentityRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEmailIdentityRequest
   * @throws IOException if the JSON string is invalid with respect to CreateEmailIdentityRequest
   */
  public static CreateEmailIdentityRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEmailIdentityRequest.class);
  }

  /**
   * Convert an instance of CreateEmailIdentityRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

