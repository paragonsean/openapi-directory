/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DeliverabilityTestStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDeliverabilityTestReportResponseDeliverabilityTestReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeliverabilityTestReportResponseDeliverabilityTestReport {
  public static final String SERIALIZED_NAME_REPORT_ID = "ReportId";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_REPORT_NAME = "ReportName";
  @SerializedName(SERIALIZED_NAME_REPORT_NAME)
  private String reportName;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_FROM_EMAIL_ADDRESS = "FromEmailAddress";
  @SerializedName(SERIALIZED_NAME_FROM_EMAIL_ADDRESS)
  private String fromEmailAddress;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_DELIVERABILITY_TEST_STATUS = "DeliverabilityTestStatus";
  @SerializedName(SERIALIZED_NAME_DELIVERABILITY_TEST_STATUS)
  private DeliverabilityTestStatus deliverabilityTestStatus;

  public GetDeliverabilityTestReportResponseDeliverabilityTestReport() {
  }

  public GetDeliverabilityTestReportResponseDeliverabilityTestReport reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

  /**
   * Get reportId
   * @return reportId
   */
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public GetDeliverabilityTestReportResponseDeliverabilityTestReport reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

  /**
   * Get reportName
   * @return reportName
   */
  @javax.annotation.Nullable
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }


  public GetDeliverabilityTestReportResponseDeliverabilityTestReport subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public GetDeliverabilityTestReportResponseDeliverabilityTestReport fromEmailAddress(String fromEmailAddress) {
    this.fromEmailAddress = fromEmailAddress;
    return this;
  }

  /**
   * Get fromEmailAddress
   * @return fromEmailAddress
   */
  @javax.annotation.Nullable
  public String getFromEmailAddress() {
    return fromEmailAddress;
  }

  public void setFromEmailAddress(String fromEmailAddress) {
    this.fromEmailAddress = fromEmailAddress;
  }


  public GetDeliverabilityTestReportResponseDeliverabilityTestReport createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public GetDeliverabilityTestReportResponseDeliverabilityTestReport deliverabilityTestStatus(DeliverabilityTestStatus deliverabilityTestStatus) {
    this.deliverabilityTestStatus = deliverabilityTestStatus;
    return this;
  }

  /**
   * Get deliverabilityTestStatus
   * @return deliverabilityTestStatus
   */
  @javax.annotation.Nullable
  public DeliverabilityTestStatus getDeliverabilityTestStatus() {
    return deliverabilityTestStatus;
  }

  public void setDeliverabilityTestStatus(DeliverabilityTestStatus deliverabilityTestStatus) {
    this.deliverabilityTestStatus = deliverabilityTestStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeliverabilityTestReportResponseDeliverabilityTestReport getDeliverabilityTestReportResponseDeliverabilityTestReport = (GetDeliverabilityTestReportResponseDeliverabilityTestReport) o;
    return Objects.equals(this.reportId, getDeliverabilityTestReportResponseDeliverabilityTestReport.reportId) &&
        Objects.equals(this.reportName, getDeliverabilityTestReportResponseDeliverabilityTestReport.reportName) &&
        Objects.equals(this.subject, getDeliverabilityTestReportResponseDeliverabilityTestReport.subject) &&
        Objects.equals(this.fromEmailAddress, getDeliverabilityTestReportResponseDeliverabilityTestReport.fromEmailAddress) &&
        Objects.equals(this.createDate, getDeliverabilityTestReportResponseDeliverabilityTestReport.createDate) &&
        Objects.equals(this.deliverabilityTestStatus, getDeliverabilityTestReportResponseDeliverabilityTestReport.deliverabilityTestStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportId, reportName, subject, fromEmailAddress, createDate, deliverabilityTestStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeliverabilityTestReportResponseDeliverabilityTestReport {\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    fromEmailAddress: ").append(toIndentedString(fromEmailAddress)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    deliverabilityTestStatus: ").append(toIndentedString(deliverabilityTestStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReportId");
    openapiFields.add("ReportName");
    openapiFields.add("Subject");
    openapiFields.add("FromEmailAddress");
    openapiFields.add("CreateDate");
    openapiFields.add("DeliverabilityTestStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeliverabilityTestReportResponseDeliverabilityTestReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeliverabilityTestReportResponseDeliverabilityTestReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeliverabilityTestReportResponseDeliverabilityTestReport is not found in the empty JSON string", GetDeliverabilityTestReportResponseDeliverabilityTestReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeliverabilityTestReportResponseDeliverabilityTestReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeliverabilityTestReportResponseDeliverabilityTestReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReportId`
      if (jsonObj.get("ReportId") != null && !jsonObj.get("ReportId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReportId"));
      }
      // validate the optional field `ReportName`
      if (jsonObj.get("ReportName") != null && !jsonObj.get("ReportName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReportName"));
      }
      // validate the optional field `Subject`
      if (jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Subject"));
      }
      // validate the optional field `FromEmailAddress`
      if (jsonObj.get("FromEmailAddress") != null && !jsonObj.get("FromEmailAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FromEmailAddress"));
      }
      // validate the optional field `CreateDate`
      if (jsonObj.get("CreateDate") != null && !jsonObj.get("CreateDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreateDate"));
      }
      // validate the optional field `DeliverabilityTestStatus`
      if (jsonObj.get("DeliverabilityTestStatus") != null && !jsonObj.get("DeliverabilityTestStatus").isJsonNull()) {
        DeliverabilityTestStatus.validateJsonElement(jsonObj.get("DeliverabilityTestStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeliverabilityTestReportResponseDeliverabilityTestReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeliverabilityTestReportResponseDeliverabilityTestReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeliverabilityTestReportResponseDeliverabilityTestReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeliverabilityTestReportResponseDeliverabilityTestReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeliverabilityTestReportResponseDeliverabilityTestReport>() {
           @Override
           public void write(JsonWriter out, GetDeliverabilityTestReportResponseDeliverabilityTestReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeliverabilityTestReportResponseDeliverabilityTestReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeliverabilityTestReportResponseDeliverabilityTestReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeliverabilityTestReportResponseDeliverabilityTestReport
   * @throws IOException if the JSON string is invalid with respect to GetDeliverabilityTestReportResponseDeliverabilityTestReport
   */
  public static GetDeliverabilityTestReportResponseDeliverabilityTestReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeliverabilityTestReportResponseDeliverabilityTestReport.class);
  }

  /**
   * Convert an instance of GetDeliverabilityTestReportResponseDeliverabilityTestReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

