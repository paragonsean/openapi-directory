/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BulkEmailEntry;
import org.openapitools.client.model.MessageTag;
import org.openapitools.client.model.SendBulkEmailRequestDefaultContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendBulkEmailRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendBulkEmailRequest {
  public static final String SERIALIZED_NAME_FROM_EMAIL_ADDRESS = "FromEmailAddress";
  @SerializedName(SERIALIZED_NAME_FROM_EMAIL_ADDRESS)
  private String fromEmailAddress;

  public static final String SERIALIZED_NAME_FROM_EMAIL_ADDRESS_IDENTITY_ARN = "FromEmailAddressIdentityArn";
  @SerializedName(SERIALIZED_NAME_FROM_EMAIL_ADDRESS_IDENTITY_ARN)
  private String fromEmailAddressIdentityArn;

  public static final String SERIALIZED_NAME_REPLY_TO_ADDRESSES = "ReplyToAddresses";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_ADDRESSES)
  private List<String> replyToAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEEDBACK_FORWARDING_EMAIL_ADDRESS = "FeedbackForwardingEmailAddress";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_FORWARDING_EMAIL_ADDRESS)
  private String feedbackForwardingEmailAddress;

  public static final String SERIALIZED_NAME_FEEDBACK_FORWARDING_EMAIL_ADDRESS_IDENTITY_ARN = "FeedbackForwardingEmailAddressIdentityArn";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_FORWARDING_EMAIL_ADDRESS_IDENTITY_ARN)
  private String feedbackForwardingEmailAddressIdentityArn;

  public static final String SERIALIZED_NAME_DEFAULT_EMAIL_TAGS = "DefaultEmailTags";
  @SerializedName(SERIALIZED_NAME_DEFAULT_EMAIL_TAGS)
  private List<MessageTag> defaultEmailTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_CONTENT = "DefaultContent";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CONTENT)
  private SendBulkEmailRequestDefaultContent defaultContent;

  public static final String SERIALIZED_NAME_BULK_EMAIL_ENTRIES = "BulkEmailEntries";
  @SerializedName(SERIALIZED_NAME_BULK_EMAIL_ENTRIES)
  private List<BulkEmailEntry> bulkEmailEntries = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURATION_SET_NAME = "ConfigurationSetName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_SET_NAME)
  private String configurationSetName;

  public SendBulkEmailRequest() {
  }

  public SendBulkEmailRequest fromEmailAddress(String fromEmailAddress) {
    this.fromEmailAddress = fromEmailAddress;
    return this;
  }

  /**
   * The email address to use as the \&quot;From\&quot; address for the email. The address that you specify has to be verified.
   * @return fromEmailAddress
   */
  @javax.annotation.Nullable
  public String getFromEmailAddress() {
    return fromEmailAddress;
  }

  public void setFromEmailAddress(String fromEmailAddress) {
    this.fromEmailAddress = fromEmailAddress;
  }


  public SendBulkEmailRequest fromEmailAddressIdentityArn(String fromEmailAddressIdentityArn) {
    this.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn;
    return this;
  }

  /**
   * &lt;p&gt;This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the &lt;code&gt;FromEmailAddress&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the &lt;code&gt;FromEmailAddressIdentityArn&lt;/code&gt; to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the &lt;code&gt;FromEmailAddress&lt;/code&gt; to be sender@example.com.&lt;/p&gt; &lt;p&gt;For more information about sending authorization, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt;
   * @return fromEmailAddressIdentityArn
   */
  @javax.annotation.Nullable
  public String getFromEmailAddressIdentityArn() {
    return fromEmailAddressIdentityArn;
  }

  public void setFromEmailAddressIdentityArn(String fromEmailAddressIdentityArn) {
    this.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn;
  }


  public SendBulkEmailRequest replyToAddresses(List<String> replyToAddresses) {
    this.replyToAddresses = replyToAddresses;
    return this;
  }

  public SendBulkEmailRequest addReplyToAddressesItem(String replyToAddressesItem) {
    if (this.replyToAddresses == null) {
      this.replyToAddresses = new ArrayList<>();
    }
    this.replyToAddresses.add(replyToAddressesItem);
    return this;
  }

  /**
   * The \&quot;Reply-to\&quot; email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
   * @return replyToAddresses
   */
  @javax.annotation.Nullable
  public List<String> getReplyToAddresses() {
    return replyToAddresses;
  }

  public void setReplyToAddresses(List<String> replyToAddresses) {
    this.replyToAddresses = replyToAddresses;
  }


  public SendBulkEmailRequest feedbackForwardingEmailAddress(String feedbackForwardingEmailAddress) {
    this.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress;
    return this;
  }

  /**
   * The address that you want bounce and complaint notifications to be sent to.
   * @return feedbackForwardingEmailAddress
   */
  @javax.annotation.Nullable
  public String getFeedbackForwardingEmailAddress() {
    return feedbackForwardingEmailAddress;
  }

  public void setFeedbackForwardingEmailAddress(String feedbackForwardingEmailAddress) {
    this.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress;
  }


  public SendBulkEmailRequest feedbackForwardingEmailAddressIdentityArn(String feedbackForwardingEmailAddressIdentityArn) {
    this.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn;
    return this;
  }

  /**
   * &lt;p&gt;This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the &lt;code&gt;FeedbackForwardingEmailAddress&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the &lt;code&gt;FeedbackForwardingEmailAddressIdentityArn&lt;/code&gt; to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the &lt;code&gt;FeedbackForwardingEmailAddress&lt;/code&gt; to be feedback@example.com.&lt;/p&gt; &lt;p&gt;For more information about sending authorization, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt;
   * @return feedbackForwardingEmailAddressIdentityArn
   */
  @javax.annotation.Nullable
  public String getFeedbackForwardingEmailAddressIdentityArn() {
    return feedbackForwardingEmailAddressIdentityArn;
  }

  public void setFeedbackForwardingEmailAddressIdentityArn(String feedbackForwardingEmailAddressIdentityArn) {
    this.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn;
  }


  public SendBulkEmailRequest defaultEmailTags(List<MessageTag> defaultEmailTags) {
    this.defaultEmailTags = defaultEmailTags;
    return this;
  }

  public SendBulkEmailRequest addDefaultEmailTagsItem(MessageTag defaultEmailTagsItem) {
    if (this.defaultEmailTags == null) {
      this.defaultEmailTags = new ArrayList<>();
    }
    this.defaultEmailTags.add(defaultEmailTagsItem);
    return this;
  }

  /**
   * A list of message tags.
   * @return defaultEmailTags
   */
  @javax.annotation.Nullable
  public List<MessageTag> getDefaultEmailTags() {
    return defaultEmailTags;
  }

  public void setDefaultEmailTags(List<MessageTag> defaultEmailTags) {
    this.defaultEmailTags = defaultEmailTags;
  }


  public SendBulkEmailRequest defaultContent(SendBulkEmailRequestDefaultContent defaultContent) {
    this.defaultContent = defaultContent;
    return this;
  }

  /**
   * Get defaultContent
   * @return defaultContent
   */
  @javax.annotation.Nonnull
  public SendBulkEmailRequestDefaultContent getDefaultContent() {
    return defaultContent;
  }

  public void setDefaultContent(SendBulkEmailRequestDefaultContent defaultContent) {
    this.defaultContent = defaultContent;
  }


  public SendBulkEmailRequest bulkEmailEntries(List<BulkEmailEntry> bulkEmailEntries) {
    this.bulkEmailEntries = bulkEmailEntries;
    return this;
  }

  public SendBulkEmailRequest addBulkEmailEntriesItem(BulkEmailEntry bulkEmailEntriesItem) {
    if (this.bulkEmailEntries == null) {
      this.bulkEmailEntries = new ArrayList<>();
    }
    this.bulkEmailEntries.add(bulkEmailEntriesItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;BulkEmailEntry&lt;/code&gt; objects.
   * @return bulkEmailEntries
   */
  @javax.annotation.Nonnull
  public List<BulkEmailEntry> getBulkEmailEntries() {
    return bulkEmailEntries;
  }

  public void setBulkEmailEntries(List<BulkEmailEntry> bulkEmailEntries) {
    this.bulkEmailEntries = bulkEmailEntries;
  }


  public SendBulkEmailRequest configurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
    return this;
  }

  /**
   * &lt;p&gt;The name of a configuration set.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Configuration sets&lt;/i&gt; are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.&lt;/p&gt;
   * @return configurationSetName
   */
  @javax.annotation.Nullable
  public String getConfigurationSetName() {
    return configurationSetName;
  }

  public void setConfigurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendBulkEmailRequest sendBulkEmailRequest = (SendBulkEmailRequest) o;
    return Objects.equals(this.fromEmailAddress, sendBulkEmailRequest.fromEmailAddress) &&
        Objects.equals(this.fromEmailAddressIdentityArn, sendBulkEmailRequest.fromEmailAddressIdentityArn) &&
        Objects.equals(this.replyToAddresses, sendBulkEmailRequest.replyToAddresses) &&
        Objects.equals(this.feedbackForwardingEmailAddress, sendBulkEmailRequest.feedbackForwardingEmailAddress) &&
        Objects.equals(this.feedbackForwardingEmailAddressIdentityArn, sendBulkEmailRequest.feedbackForwardingEmailAddressIdentityArn) &&
        Objects.equals(this.defaultEmailTags, sendBulkEmailRequest.defaultEmailTags) &&
        Objects.equals(this.defaultContent, sendBulkEmailRequest.defaultContent) &&
        Objects.equals(this.bulkEmailEntries, sendBulkEmailRequest.bulkEmailEntries) &&
        Objects.equals(this.configurationSetName, sendBulkEmailRequest.configurationSetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromEmailAddress, fromEmailAddressIdentityArn, replyToAddresses, feedbackForwardingEmailAddress, feedbackForwardingEmailAddressIdentityArn, defaultEmailTags, defaultContent, bulkEmailEntries, configurationSetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendBulkEmailRequest {\n");
    sb.append("    fromEmailAddress: ").append(toIndentedString(fromEmailAddress)).append("\n");
    sb.append("    fromEmailAddressIdentityArn: ").append(toIndentedString(fromEmailAddressIdentityArn)).append("\n");
    sb.append("    replyToAddresses: ").append(toIndentedString(replyToAddresses)).append("\n");
    sb.append("    feedbackForwardingEmailAddress: ").append(toIndentedString(feedbackForwardingEmailAddress)).append("\n");
    sb.append("    feedbackForwardingEmailAddressIdentityArn: ").append(toIndentedString(feedbackForwardingEmailAddressIdentityArn)).append("\n");
    sb.append("    defaultEmailTags: ").append(toIndentedString(defaultEmailTags)).append("\n");
    sb.append("    defaultContent: ").append(toIndentedString(defaultContent)).append("\n");
    sb.append("    bulkEmailEntries: ").append(toIndentedString(bulkEmailEntries)).append("\n");
    sb.append("    configurationSetName: ").append(toIndentedString(configurationSetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FromEmailAddress");
    openapiFields.add("FromEmailAddressIdentityArn");
    openapiFields.add("ReplyToAddresses");
    openapiFields.add("FeedbackForwardingEmailAddress");
    openapiFields.add("FeedbackForwardingEmailAddressIdentityArn");
    openapiFields.add("DefaultEmailTags");
    openapiFields.add("DefaultContent");
    openapiFields.add("BulkEmailEntries");
    openapiFields.add("ConfigurationSetName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DefaultContent");
    openapiRequiredFields.add("BulkEmailEntries");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendBulkEmailRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendBulkEmailRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendBulkEmailRequest is not found in the empty JSON string", SendBulkEmailRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendBulkEmailRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendBulkEmailRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendBulkEmailRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FromEmailAddress") != null && !jsonObj.get("FromEmailAddress").isJsonNull()) && !jsonObj.get("FromEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FromEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FromEmailAddress").toString()));
      }
      if ((jsonObj.get("FromEmailAddressIdentityArn") != null && !jsonObj.get("FromEmailAddressIdentityArn").isJsonNull()) && !jsonObj.get("FromEmailAddressIdentityArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FromEmailAddressIdentityArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FromEmailAddressIdentityArn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ReplyToAddresses") != null && !jsonObj.get("ReplyToAddresses").isJsonNull() && !jsonObj.get("ReplyToAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplyToAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("ReplyToAddresses").toString()));
      }
      if ((jsonObj.get("FeedbackForwardingEmailAddress") != null && !jsonObj.get("FeedbackForwardingEmailAddress").isJsonNull()) && !jsonObj.get("FeedbackForwardingEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeedbackForwardingEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeedbackForwardingEmailAddress").toString()));
      }
      if ((jsonObj.get("FeedbackForwardingEmailAddressIdentityArn") != null && !jsonObj.get("FeedbackForwardingEmailAddressIdentityArn").isJsonNull()) && !jsonObj.get("FeedbackForwardingEmailAddressIdentityArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeedbackForwardingEmailAddressIdentityArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeedbackForwardingEmailAddressIdentityArn").toString()));
      }
      if (jsonObj.get("DefaultEmailTags") != null && !jsonObj.get("DefaultEmailTags").isJsonNull()) {
        JsonArray jsonArraydefaultEmailTags = jsonObj.getAsJsonArray("DefaultEmailTags");
        if (jsonArraydefaultEmailTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DefaultEmailTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DefaultEmailTags` to be an array in the JSON string but got `%s`", jsonObj.get("DefaultEmailTags").toString()));
          }

          // validate the optional field `DefaultEmailTags` (array)
          for (int i = 0; i < jsonArraydefaultEmailTags.size(); i++) {
            MessageTag.validateJsonElement(jsonArraydefaultEmailTags.get(i));
          };
        }
      }
      // validate the required field `DefaultContent`
      SendBulkEmailRequestDefaultContent.validateJsonElement(jsonObj.get("DefaultContent"));
      // ensure the json data is an array
      if (!jsonObj.get("BulkEmailEntries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BulkEmailEntries` to be an array in the JSON string but got `%s`", jsonObj.get("BulkEmailEntries").toString()));
      }

      JsonArray jsonArraybulkEmailEntries = jsonObj.getAsJsonArray("BulkEmailEntries");
      // validate the required field `BulkEmailEntries` (array)
      for (int i = 0; i < jsonArraybulkEmailEntries.size(); i++) {
        BulkEmailEntry.validateJsonElement(jsonArraybulkEmailEntries.get(i));
      };
      if ((jsonObj.get("ConfigurationSetName") != null && !jsonObj.get("ConfigurationSetName").isJsonNull()) && !jsonObj.get("ConfigurationSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigurationSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigurationSetName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendBulkEmailRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendBulkEmailRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendBulkEmailRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendBulkEmailRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendBulkEmailRequest>() {
           @Override
           public void write(JsonWriter out, SendBulkEmailRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendBulkEmailRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendBulkEmailRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendBulkEmailRequest
   * @throws IOException if the JSON string is invalid with respect to SendBulkEmailRequest
   */
  public static SendBulkEmailRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendBulkEmailRequest.class);
  }

  /**
   * Convert an instance of SendBulkEmailRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

