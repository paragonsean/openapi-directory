/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImportDestination;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A summary of the import job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportJobSummary {
  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_IMPORT_DESTINATION = "ImportDestination";
  @SerializedName(SERIALIZED_NAME_IMPORT_DESTINATION)
  private ImportDestination importDestination;

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_PROCESSED_RECORDS_COUNT = "ProcessedRecordsCount";
  @SerializedName(SERIALIZED_NAME_PROCESSED_RECORDS_COUNT)
  private Integer processedRecordsCount;

  public static final String SERIALIZED_NAME_FAILED_RECORDS_COUNT = "FailedRecordsCount";
  @SerializedName(SERIALIZED_NAME_FAILED_RECORDS_COUNT)
  private Integer failedRecordsCount;

  public ImportJobSummary() {
  }

  public ImportJobSummary jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * A string that represents the import job ID.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public ImportJobSummary importDestination(ImportDestination importDestination) {
    this.importDestination = importDestination;
    return this;
  }

  /**
   * Get importDestination
   * @return importDestination
   */
  @javax.annotation.Nullable
  public ImportDestination getImportDestination() {
    return importDestination;
  }

  public void setImportDestination(ImportDestination importDestination) {
    this.importDestination = importDestination;
  }


  public ImportJobSummary jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public ImportJobSummary createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public ImportJobSummary processedRecordsCount(Integer processedRecordsCount) {
    this.processedRecordsCount = processedRecordsCount;
    return this;
  }

  /**
   * Get processedRecordsCount
   * @return processedRecordsCount
   */
  @javax.annotation.Nullable
  public Integer getProcessedRecordsCount() {
    return processedRecordsCount;
  }

  public void setProcessedRecordsCount(Integer processedRecordsCount) {
    this.processedRecordsCount = processedRecordsCount;
  }


  public ImportJobSummary failedRecordsCount(Integer failedRecordsCount) {
    this.failedRecordsCount = failedRecordsCount;
    return this;
  }

  /**
   * Get failedRecordsCount
   * @return failedRecordsCount
   */
  @javax.annotation.Nullable
  public Integer getFailedRecordsCount() {
    return failedRecordsCount;
  }

  public void setFailedRecordsCount(Integer failedRecordsCount) {
    this.failedRecordsCount = failedRecordsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportJobSummary importJobSummary = (ImportJobSummary) o;
    return Objects.equals(this.jobId, importJobSummary.jobId) &&
        Objects.equals(this.importDestination, importJobSummary.importDestination) &&
        Objects.equals(this.jobStatus, importJobSummary.jobStatus) &&
        Objects.equals(this.createdTimestamp, importJobSummary.createdTimestamp) &&
        Objects.equals(this.processedRecordsCount, importJobSummary.processedRecordsCount) &&
        Objects.equals(this.failedRecordsCount, importJobSummary.failedRecordsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, importDestination, jobStatus, createdTimestamp, processedRecordsCount, failedRecordsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportJobSummary {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    importDestination: ").append(toIndentedString(importDestination)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    processedRecordsCount: ").append(toIndentedString(processedRecordsCount)).append("\n");
    sb.append("    failedRecordsCount: ").append(toIndentedString(failedRecordsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobId");
    openapiFields.add("ImportDestination");
    openapiFields.add("JobStatus");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("ProcessedRecordsCount");
    openapiFields.add("FailedRecordsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportJobSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportJobSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportJobSummary is not found in the empty JSON string", ImportJobSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportJobSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportJobSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) && !jsonObj.get("JobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobId").toString()));
      }
      // validate the optional field `ImportDestination`
      if (jsonObj.get("ImportDestination") != null && !jsonObj.get("ImportDestination").isJsonNull()) {
        ImportDestination.validateJsonElement(jsonObj.get("ImportDestination"));
      }
      // validate the optional field `JobStatus`
      if (jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("JobStatus"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `ProcessedRecordsCount`
      if (jsonObj.get("ProcessedRecordsCount") != null && !jsonObj.get("ProcessedRecordsCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProcessedRecordsCount"));
      }
      // validate the optional field `FailedRecordsCount`
      if (jsonObj.get("FailedRecordsCount") != null && !jsonObj.get("FailedRecordsCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailedRecordsCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportJobSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportJobSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportJobSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportJobSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportJobSummary>() {
           @Override
           public void write(JsonWriter out, ImportJobSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportJobSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportJobSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportJobSummary
   * @throws IOException if the JSON string is invalid with respect to ImportJobSummary
   */
  public static ImportJobSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportJobSummary.class);
  }

  /**
   * Convert an instance of ImportJobSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

