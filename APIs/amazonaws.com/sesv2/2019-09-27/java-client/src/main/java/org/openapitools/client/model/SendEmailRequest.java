/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateDeliverabilityTestReportRequestContent;
import org.openapitools.client.model.MessageTag;
import org.openapitools.client.model.SendEmailRequestDestination;
import org.openapitools.client.model.SendEmailRequestListManagementOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendEmailRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendEmailRequest {
  public static final String SERIALIZED_NAME_FROM_EMAIL_ADDRESS = "FromEmailAddress";
  @SerializedName(SERIALIZED_NAME_FROM_EMAIL_ADDRESS)
  private String fromEmailAddress;

  public static final String SERIALIZED_NAME_FROM_EMAIL_ADDRESS_IDENTITY_ARN = "FromEmailAddressIdentityArn";
  @SerializedName(SERIALIZED_NAME_FROM_EMAIL_ADDRESS_IDENTITY_ARN)
  private String fromEmailAddressIdentityArn;

  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private SendEmailRequestDestination destination;

  public static final String SERIALIZED_NAME_REPLY_TO_ADDRESSES = "ReplyToAddresses";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_ADDRESSES)
  private List<String> replyToAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEEDBACK_FORWARDING_EMAIL_ADDRESS = "FeedbackForwardingEmailAddress";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_FORWARDING_EMAIL_ADDRESS)
  private String feedbackForwardingEmailAddress;

  public static final String SERIALIZED_NAME_FEEDBACK_FORWARDING_EMAIL_ADDRESS_IDENTITY_ARN = "FeedbackForwardingEmailAddressIdentityArn";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_FORWARDING_EMAIL_ADDRESS_IDENTITY_ARN)
  private String feedbackForwardingEmailAddressIdentityArn;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private CreateDeliverabilityTestReportRequestContent content;

  public static final String SERIALIZED_NAME_EMAIL_TAGS = "EmailTags";
  @SerializedName(SERIALIZED_NAME_EMAIL_TAGS)
  private List<MessageTag> emailTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURATION_SET_NAME = "ConfigurationSetName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_SET_NAME)
  private String configurationSetName;

  public static final String SERIALIZED_NAME_LIST_MANAGEMENT_OPTIONS = "ListManagementOptions";
  @SerializedName(SERIALIZED_NAME_LIST_MANAGEMENT_OPTIONS)
  private SendEmailRequestListManagementOptions listManagementOptions;

  public SendEmailRequest() {
  }

  public SendEmailRequest fromEmailAddress(String fromEmailAddress) {
    this.fromEmailAddress = fromEmailAddress;
    return this;
  }

  /**
   * The email address to use as the \&quot;From\&quot; address for the email. The address that you specify has to be verified. 
   * @return fromEmailAddress
   */
  @javax.annotation.Nullable
  public String getFromEmailAddress() {
    return fromEmailAddress;
  }

  public void setFromEmailAddress(String fromEmailAddress) {
    this.fromEmailAddress = fromEmailAddress;
  }


  public SendEmailRequest fromEmailAddressIdentityArn(String fromEmailAddressIdentityArn) {
    this.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn;
    return this;
  }

  /**
   * &lt;p&gt;This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the &lt;code&gt;FromEmailAddress&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the &lt;code&gt;FromEmailAddressIdentityArn&lt;/code&gt; to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the &lt;code&gt;FromEmailAddress&lt;/code&gt; to be sender@example.com.&lt;/p&gt; &lt;p&gt;For more information about sending authorization, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For Raw emails, the &lt;code&gt;FromEmailAddressIdentityArn&lt;/code&gt; value overrides the X-SES-SOURCE-ARN and X-SES-FROM-ARN headers specified in raw email message content.&lt;/p&gt;
   * @return fromEmailAddressIdentityArn
   */
  @javax.annotation.Nullable
  public String getFromEmailAddressIdentityArn() {
    return fromEmailAddressIdentityArn;
  }

  public void setFromEmailAddressIdentityArn(String fromEmailAddressIdentityArn) {
    this.fromEmailAddressIdentityArn = fromEmailAddressIdentityArn;
  }


  public SendEmailRequest destination(SendEmailRequestDestination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public SendEmailRequestDestination getDestination() {
    return destination;
  }

  public void setDestination(SendEmailRequestDestination destination) {
    this.destination = destination;
  }


  public SendEmailRequest replyToAddresses(List<String> replyToAddresses) {
    this.replyToAddresses = replyToAddresses;
    return this;
  }

  public SendEmailRequest addReplyToAddressesItem(String replyToAddressesItem) {
    if (this.replyToAddresses == null) {
      this.replyToAddresses = new ArrayList<>();
    }
    this.replyToAddresses.add(replyToAddressesItem);
    return this;
  }

  /**
   * The \&quot;Reply-to\&quot; email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
   * @return replyToAddresses
   */
  @javax.annotation.Nullable
  public List<String> getReplyToAddresses() {
    return replyToAddresses;
  }

  public void setReplyToAddresses(List<String> replyToAddresses) {
    this.replyToAddresses = replyToAddresses;
  }


  public SendEmailRequest feedbackForwardingEmailAddress(String feedbackForwardingEmailAddress) {
    this.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress;
    return this;
  }

  /**
   * The address that you want bounce and complaint notifications to be sent to.
   * @return feedbackForwardingEmailAddress
   */
  @javax.annotation.Nullable
  public String getFeedbackForwardingEmailAddress() {
    return feedbackForwardingEmailAddress;
  }

  public void setFeedbackForwardingEmailAddress(String feedbackForwardingEmailAddress) {
    this.feedbackForwardingEmailAddress = feedbackForwardingEmailAddress;
  }


  public SendEmailRequest feedbackForwardingEmailAddressIdentityArn(String feedbackForwardingEmailAddressIdentityArn) {
    this.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn;
    return this;
  }

  /**
   * &lt;p&gt;This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the &lt;code&gt;FeedbackForwardingEmailAddress&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the &lt;code&gt;FeedbackForwardingEmailAddressIdentityArn&lt;/code&gt; to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the &lt;code&gt;FeedbackForwardingEmailAddress&lt;/code&gt; to be feedback@example.com.&lt;/p&gt; &lt;p&gt;For more information about sending authorization, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt;
   * @return feedbackForwardingEmailAddressIdentityArn
   */
  @javax.annotation.Nullable
  public String getFeedbackForwardingEmailAddressIdentityArn() {
    return feedbackForwardingEmailAddressIdentityArn;
  }

  public void setFeedbackForwardingEmailAddressIdentityArn(String feedbackForwardingEmailAddressIdentityArn) {
    this.feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArn;
  }


  public SendEmailRequest content(CreateDeliverabilityTestReportRequestContent content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nonnull
  public CreateDeliverabilityTestReportRequestContent getContent() {
    return content;
  }

  public void setContent(CreateDeliverabilityTestReportRequestContent content) {
    this.content = content;
  }


  public SendEmailRequest emailTags(List<MessageTag> emailTags) {
    this.emailTags = emailTags;
    return this;
  }

  public SendEmailRequest addEmailTagsItem(MessageTag emailTagsItem) {
    if (this.emailTags == null) {
      this.emailTags = new ArrayList<>();
    }
    this.emailTags.add(emailTagsItem);
    return this;
  }

  /**
   * A list of message tags.
   * @return emailTags
   */
  @javax.annotation.Nullable
  public List<MessageTag> getEmailTags() {
    return emailTags;
  }

  public void setEmailTags(List<MessageTag> emailTags) {
    this.emailTags = emailTags;
  }


  public SendEmailRequest configurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
    return this;
  }

  /**
   * &lt;p&gt;The name of a configuration set.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Configuration sets&lt;/i&gt; are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.&lt;/p&gt;
   * @return configurationSetName
   */
  @javax.annotation.Nullable
  public String getConfigurationSetName() {
    return configurationSetName;
  }

  public void setConfigurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
  }


  public SendEmailRequest listManagementOptions(SendEmailRequestListManagementOptions listManagementOptions) {
    this.listManagementOptions = listManagementOptions;
    return this;
  }

  /**
   * Get listManagementOptions
   * @return listManagementOptions
   */
  @javax.annotation.Nullable
  public SendEmailRequestListManagementOptions getListManagementOptions() {
    return listManagementOptions;
  }

  public void setListManagementOptions(SendEmailRequestListManagementOptions listManagementOptions) {
    this.listManagementOptions = listManagementOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendEmailRequest sendEmailRequest = (SendEmailRequest) o;
    return Objects.equals(this.fromEmailAddress, sendEmailRequest.fromEmailAddress) &&
        Objects.equals(this.fromEmailAddressIdentityArn, sendEmailRequest.fromEmailAddressIdentityArn) &&
        Objects.equals(this.destination, sendEmailRequest.destination) &&
        Objects.equals(this.replyToAddresses, sendEmailRequest.replyToAddresses) &&
        Objects.equals(this.feedbackForwardingEmailAddress, sendEmailRequest.feedbackForwardingEmailAddress) &&
        Objects.equals(this.feedbackForwardingEmailAddressIdentityArn, sendEmailRequest.feedbackForwardingEmailAddressIdentityArn) &&
        Objects.equals(this.content, sendEmailRequest.content) &&
        Objects.equals(this.emailTags, sendEmailRequest.emailTags) &&
        Objects.equals(this.configurationSetName, sendEmailRequest.configurationSetName) &&
        Objects.equals(this.listManagementOptions, sendEmailRequest.listManagementOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromEmailAddress, fromEmailAddressIdentityArn, destination, replyToAddresses, feedbackForwardingEmailAddress, feedbackForwardingEmailAddressIdentityArn, content, emailTags, configurationSetName, listManagementOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendEmailRequest {\n");
    sb.append("    fromEmailAddress: ").append(toIndentedString(fromEmailAddress)).append("\n");
    sb.append("    fromEmailAddressIdentityArn: ").append(toIndentedString(fromEmailAddressIdentityArn)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    replyToAddresses: ").append(toIndentedString(replyToAddresses)).append("\n");
    sb.append("    feedbackForwardingEmailAddress: ").append(toIndentedString(feedbackForwardingEmailAddress)).append("\n");
    sb.append("    feedbackForwardingEmailAddressIdentityArn: ").append(toIndentedString(feedbackForwardingEmailAddressIdentityArn)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    emailTags: ").append(toIndentedString(emailTags)).append("\n");
    sb.append("    configurationSetName: ").append(toIndentedString(configurationSetName)).append("\n");
    sb.append("    listManagementOptions: ").append(toIndentedString(listManagementOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FromEmailAddress");
    openapiFields.add("FromEmailAddressIdentityArn");
    openapiFields.add("Destination");
    openapiFields.add("ReplyToAddresses");
    openapiFields.add("FeedbackForwardingEmailAddress");
    openapiFields.add("FeedbackForwardingEmailAddressIdentityArn");
    openapiFields.add("Content");
    openapiFields.add("EmailTags");
    openapiFields.add("ConfigurationSetName");
    openapiFields.add("ListManagementOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Content");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendEmailRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendEmailRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendEmailRequest is not found in the empty JSON string", SendEmailRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendEmailRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendEmailRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendEmailRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FromEmailAddress") != null && !jsonObj.get("FromEmailAddress").isJsonNull()) && !jsonObj.get("FromEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FromEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FromEmailAddress").toString()));
      }
      if ((jsonObj.get("FromEmailAddressIdentityArn") != null && !jsonObj.get("FromEmailAddressIdentityArn").isJsonNull()) && !jsonObj.get("FromEmailAddressIdentityArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FromEmailAddressIdentityArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FromEmailAddressIdentityArn").toString()));
      }
      // validate the optional field `Destination`
      if (jsonObj.get("Destination") != null && !jsonObj.get("Destination").isJsonNull()) {
        SendEmailRequestDestination.validateJsonElement(jsonObj.get("Destination"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ReplyToAddresses") != null && !jsonObj.get("ReplyToAddresses").isJsonNull() && !jsonObj.get("ReplyToAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplyToAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("ReplyToAddresses").toString()));
      }
      if ((jsonObj.get("FeedbackForwardingEmailAddress") != null && !jsonObj.get("FeedbackForwardingEmailAddress").isJsonNull()) && !jsonObj.get("FeedbackForwardingEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeedbackForwardingEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeedbackForwardingEmailAddress").toString()));
      }
      if ((jsonObj.get("FeedbackForwardingEmailAddressIdentityArn") != null && !jsonObj.get("FeedbackForwardingEmailAddressIdentityArn").isJsonNull()) && !jsonObj.get("FeedbackForwardingEmailAddressIdentityArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeedbackForwardingEmailAddressIdentityArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeedbackForwardingEmailAddressIdentityArn").toString()));
      }
      // validate the required field `Content`
      CreateDeliverabilityTestReportRequestContent.validateJsonElement(jsonObj.get("Content"));
      if (jsonObj.get("EmailTags") != null && !jsonObj.get("EmailTags").isJsonNull()) {
        JsonArray jsonArrayemailTags = jsonObj.getAsJsonArray("EmailTags");
        if (jsonArrayemailTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EmailTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EmailTags` to be an array in the JSON string but got `%s`", jsonObj.get("EmailTags").toString()));
          }

          // validate the optional field `EmailTags` (array)
          for (int i = 0; i < jsonArrayemailTags.size(); i++) {
            MessageTag.validateJsonElement(jsonArrayemailTags.get(i));
          };
        }
      }
      if ((jsonObj.get("ConfigurationSetName") != null && !jsonObj.get("ConfigurationSetName").isJsonNull()) && !jsonObj.get("ConfigurationSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigurationSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigurationSetName").toString()));
      }
      // validate the optional field `ListManagementOptions`
      if (jsonObj.get("ListManagementOptions") != null && !jsonObj.get("ListManagementOptions").isJsonNull()) {
        SendEmailRequestListManagementOptions.validateJsonElement(jsonObj.get("ListManagementOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendEmailRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendEmailRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendEmailRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendEmailRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendEmailRequest>() {
           @Override
           public void write(JsonWriter out, SendEmailRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendEmailRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendEmailRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendEmailRequest
   * @throws IOException if the JSON string is invalid with respect to SendEmailRequest
   */
  public static SendEmailRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendEmailRequest.class);
  }

  /**
   * Convert an instance of SendEmailRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

