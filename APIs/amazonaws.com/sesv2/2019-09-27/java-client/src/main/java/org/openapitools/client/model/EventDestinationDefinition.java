/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateConfigurationSetEventDestinationRequestEventDestinationCloudWatchDestination;
import org.openapitools.client.model.CreateConfigurationSetEventDestinationRequestEventDestinationKinesisFirehoseDestination;
import org.openapitools.client.model.CreateConfigurationSetEventDestinationRequestEventDestinationPinpointDestination;
import org.openapitools.client.model.CreateConfigurationSetEventDestinationRequestEventDestinationSnsDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventDestinationDefinition {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MATCHING_EVENT_TYPES = "MatchingEventTypes";
  @SerializedName(SERIALIZED_NAME_MATCHING_EVENT_TYPES)
  private List matchingEventTypes;

  public static final String SERIALIZED_NAME_KINESIS_FIREHOSE_DESTINATION = "KinesisFirehoseDestination";
  @SerializedName(SERIALIZED_NAME_KINESIS_FIREHOSE_DESTINATION)
  private CreateConfigurationSetEventDestinationRequestEventDestinationKinesisFirehoseDestination kinesisFirehoseDestination;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_DESTINATION = "CloudWatchDestination";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_DESTINATION)
  private CreateConfigurationSetEventDestinationRequestEventDestinationCloudWatchDestination cloudWatchDestination;

  public static final String SERIALIZED_NAME_SNS_DESTINATION = "SnsDestination";
  @SerializedName(SERIALIZED_NAME_SNS_DESTINATION)
  private CreateConfigurationSetEventDestinationRequestEventDestinationSnsDestination snsDestination;

  public static final String SERIALIZED_NAME_PINPOINT_DESTINATION = "PinpointDestination";
  @SerializedName(SERIALIZED_NAME_PINPOINT_DESTINATION)
  private CreateConfigurationSetEventDestinationRequestEventDestinationPinpointDestination pinpointDestination;

  public EventDestinationDefinition() {
  }

  public EventDestinationDefinition enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public EventDestinationDefinition matchingEventTypes(List matchingEventTypes) {
    this.matchingEventTypes = matchingEventTypes;
    return this;
  }

  /**
   * Get matchingEventTypes
   * @return matchingEventTypes
   */
  @javax.annotation.Nullable
  public List getMatchingEventTypes() {
    return matchingEventTypes;
  }

  public void setMatchingEventTypes(List matchingEventTypes) {
    this.matchingEventTypes = matchingEventTypes;
  }


  public EventDestinationDefinition kinesisFirehoseDestination(CreateConfigurationSetEventDestinationRequestEventDestinationKinesisFirehoseDestination kinesisFirehoseDestination) {
    this.kinesisFirehoseDestination = kinesisFirehoseDestination;
    return this;
  }

  /**
   * Get kinesisFirehoseDestination
   * @return kinesisFirehoseDestination
   */
  @javax.annotation.Nullable
  public CreateConfigurationSetEventDestinationRequestEventDestinationKinesisFirehoseDestination getKinesisFirehoseDestination() {
    return kinesisFirehoseDestination;
  }

  public void setKinesisFirehoseDestination(CreateConfigurationSetEventDestinationRequestEventDestinationKinesisFirehoseDestination kinesisFirehoseDestination) {
    this.kinesisFirehoseDestination = kinesisFirehoseDestination;
  }


  public EventDestinationDefinition cloudWatchDestination(CreateConfigurationSetEventDestinationRequestEventDestinationCloudWatchDestination cloudWatchDestination) {
    this.cloudWatchDestination = cloudWatchDestination;
    return this;
  }

  /**
   * Get cloudWatchDestination
   * @return cloudWatchDestination
   */
  @javax.annotation.Nullable
  public CreateConfigurationSetEventDestinationRequestEventDestinationCloudWatchDestination getCloudWatchDestination() {
    return cloudWatchDestination;
  }

  public void setCloudWatchDestination(CreateConfigurationSetEventDestinationRequestEventDestinationCloudWatchDestination cloudWatchDestination) {
    this.cloudWatchDestination = cloudWatchDestination;
  }


  public EventDestinationDefinition snsDestination(CreateConfigurationSetEventDestinationRequestEventDestinationSnsDestination snsDestination) {
    this.snsDestination = snsDestination;
    return this;
  }

  /**
   * Get snsDestination
   * @return snsDestination
   */
  @javax.annotation.Nullable
  public CreateConfigurationSetEventDestinationRequestEventDestinationSnsDestination getSnsDestination() {
    return snsDestination;
  }

  public void setSnsDestination(CreateConfigurationSetEventDestinationRequestEventDestinationSnsDestination snsDestination) {
    this.snsDestination = snsDestination;
  }


  public EventDestinationDefinition pinpointDestination(CreateConfigurationSetEventDestinationRequestEventDestinationPinpointDestination pinpointDestination) {
    this.pinpointDestination = pinpointDestination;
    return this;
  }

  /**
   * Get pinpointDestination
   * @return pinpointDestination
   */
  @javax.annotation.Nullable
  public CreateConfigurationSetEventDestinationRequestEventDestinationPinpointDestination getPinpointDestination() {
    return pinpointDestination;
  }

  public void setPinpointDestination(CreateConfigurationSetEventDestinationRequestEventDestinationPinpointDestination pinpointDestination) {
    this.pinpointDestination = pinpointDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDestinationDefinition eventDestinationDefinition = (EventDestinationDefinition) o;
    return Objects.equals(this.enabled, eventDestinationDefinition.enabled) &&
        Objects.equals(this.matchingEventTypes, eventDestinationDefinition.matchingEventTypes) &&
        Objects.equals(this.kinesisFirehoseDestination, eventDestinationDefinition.kinesisFirehoseDestination) &&
        Objects.equals(this.cloudWatchDestination, eventDestinationDefinition.cloudWatchDestination) &&
        Objects.equals(this.snsDestination, eventDestinationDefinition.snsDestination) &&
        Objects.equals(this.pinpointDestination, eventDestinationDefinition.pinpointDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, matchingEventTypes, kinesisFirehoseDestination, cloudWatchDestination, snsDestination, pinpointDestination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDestinationDefinition {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    matchingEventTypes: ").append(toIndentedString(matchingEventTypes)).append("\n");
    sb.append("    kinesisFirehoseDestination: ").append(toIndentedString(kinesisFirehoseDestination)).append("\n");
    sb.append("    cloudWatchDestination: ").append(toIndentedString(cloudWatchDestination)).append("\n");
    sb.append("    snsDestination: ").append(toIndentedString(snsDestination)).append("\n");
    sb.append("    pinpointDestination: ").append(toIndentedString(pinpointDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("MatchingEventTypes");
    openapiFields.add("KinesisFirehoseDestination");
    openapiFields.add("CloudWatchDestination");
    openapiFields.add("SnsDestination");
    openapiFields.add("PinpointDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventDestinationDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventDestinationDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventDestinationDefinition is not found in the empty JSON string", EventDestinationDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventDestinationDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventDestinationDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
      // validate the optional field `MatchingEventTypes`
      if (jsonObj.get("MatchingEventTypes") != null && !jsonObj.get("MatchingEventTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MatchingEventTypes"));
      }
      // validate the optional field `KinesisFirehoseDestination`
      if (jsonObj.get("KinesisFirehoseDestination") != null && !jsonObj.get("KinesisFirehoseDestination").isJsonNull()) {
        CreateConfigurationSetEventDestinationRequestEventDestinationKinesisFirehoseDestination.validateJsonElement(jsonObj.get("KinesisFirehoseDestination"));
      }
      // validate the optional field `CloudWatchDestination`
      if (jsonObj.get("CloudWatchDestination") != null && !jsonObj.get("CloudWatchDestination").isJsonNull()) {
        CreateConfigurationSetEventDestinationRequestEventDestinationCloudWatchDestination.validateJsonElement(jsonObj.get("CloudWatchDestination"));
      }
      // validate the optional field `SnsDestination`
      if (jsonObj.get("SnsDestination") != null && !jsonObj.get("SnsDestination").isJsonNull()) {
        CreateConfigurationSetEventDestinationRequestEventDestinationSnsDestination.validateJsonElement(jsonObj.get("SnsDestination"));
      }
      // validate the optional field `PinpointDestination`
      if (jsonObj.get("PinpointDestination") != null && !jsonObj.get("PinpointDestination").isJsonNull()) {
        CreateConfigurationSetEventDestinationRequestEventDestinationPinpointDestination.validateJsonElement(jsonObj.get("PinpointDestination"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventDestinationDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventDestinationDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventDestinationDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventDestinationDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<EventDestinationDefinition>() {
           @Override
           public void write(JsonWriter out, EventDestinationDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventDestinationDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventDestinationDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventDestinationDefinition
   * @throws IOException if the JSON string is invalid with respect to EventDestinationDefinition
   */
  public static EventDestinationDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventDestinationDefinition.class);
  }

  /**
   * Convert an instance of EventDestinationDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

