/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that contains inbox placement data for an email provider.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlacementStatistics {
  public static final String SERIALIZED_NAME_INBOX_PERCENTAGE = "InboxPercentage";
  @SerializedName(SERIALIZED_NAME_INBOX_PERCENTAGE)
  private Double inboxPercentage;

  public static final String SERIALIZED_NAME_SPAM_PERCENTAGE = "SpamPercentage";
  @SerializedName(SERIALIZED_NAME_SPAM_PERCENTAGE)
  private Double spamPercentage;

  public static final String SERIALIZED_NAME_MISSING_PERCENTAGE = "MissingPercentage";
  @SerializedName(SERIALIZED_NAME_MISSING_PERCENTAGE)
  private Double missingPercentage;

  public static final String SERIALIZED_NAME_SPF_PERCENTAGE = "SpfPercentage";
  @SerializedName(SERIALIZED_NAME_SPF_PERCENTAGE)
  private Double spfPercentage;

  public static final String SERIALIZED_NAME_DKIM_PERCENTAGE = "DkimPercentage";
  @SerializedName(SERIALIZED_NAME_DKIM_PERCENTAGE)
  private Double dkimPercentage;

  public PlacementStatistics() {
  }

  public PlacementStatistics inboxPercentage(Double inboxPercentage) {
    this.inboxPercentage = inboxPercentage;
    return this;
  }

  /**
   * Get inboxPercentage
   * @return inboxPercentage
   */
  @javax.annotation.Nullable
  public Double getInboxPercentage() {
    return inboxPercentage;
  }

  public void setInboxPercentage(Double inboxPercentage) {
    this.inboxPercentage = inboxPercentage;
  }


  public PlacementStatistics spamPercentage(Double spamPercentage) {
    this.spamPercentage = spamPercentage;
    return this;
  }

  /**
   * Get spamPercentage
   * @return spamPercentage
   */
  @javax.annotation.Nullable
  public Double getSpamPercentage() {
    return spamPercentage;
  }

  public void setSpamPercentage(Double spamPercentage) {
    this.spamPercentage = spamPercentage;
  }


  public PlacementStatistics missingPercentage(Double missingPercentage) {
    this.missingPercentage = missingPercentage;
    return this;
  }

  /**
   * Get missingPercentage
   * @return missingPercentage
   */
  @javax.annotation.Nullable
  public Double getMissingPercentage() {
    return missingPercentage;
  }

  public void setMissingPercentage(Double missingPercentage) {
    this.missingPercentage = missingPercentage;
  }


  public PlacementStatistics spfPercentage(Double spfPercentage) {
    this.spfPercentage = spfPercentage;
    return this;
  }

  /**
   * Get spfPercentage
   * @return spfPercentage
   */
  @javax.annotation.Nullable
  public Double getSpfPercentage() {
    return spfPercentage;
  }

  public void setSpfPercentage(Double spfPercentage) {
    this.spfPercentage = spfPercentage;
  }


  public PlacementStatistics dkimPercentage(Double dkimPercentage) {
    this.dkimPercentage = dkimPercentage;
    return this;
  }

  /**
   * Get dkimPercentage
   * @return dkimPercentage
   */
  @javax.annotation.Nullable
  public Double getDkimPercentage() {
    return dkimPercentage;
  }

  public void setDkimPercentage(Double dkimPercentage) {
    this.dkimPercentage = dkimPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlacementStatistics placementStatistics = (PlacementStatistics) o;
    return Objects.equals(this.inboxPercentage, placementStatistics.inboxPercentage) &&
        Objects.equals(this.spamPercentage, placementStatistics.spamPercentage) &&
        Objects.equals(this.missingPercentage, placementStatistics.missingPercentage) &&
        Objects.equals(this.spfPercentage, placementStatistics.spfPercentage) &&
        Objects.equals(this.dkimPercentage, placementStatistics.dkimPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboxPercentage, spamPercentage, missingPercentage, spfPercentage, dkimPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlacementStatistics {\n");
    sb.append("    inboxPercentage: ").append(toIndentedString(inboxPercentage)).append("\n");
    sb.append("    spamPercentage: ").append(toIndentedString(spamPercentage)).append("\n");
    sb.append("    missingPercentage: ").append(toIndentedString(missingPercentage)).append("\n");
    sb.append("    spfPercentage: ").append(toIndentedString(spfPercentage)).append("\n");
    sb.append("    dkimPercentage: ").append(toIndentedString(dkimPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InboxPercentage");
    openapiFields.add("SpamPercentage");
    openapiFields.add("MissingPercentage");
    openapiFields.add("SpfPercentage");
    openapiFields.add("DkimPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlacementStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlacementStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlacementStatistics is not found in the empty JSON string", PlacementStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlacementStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlacementStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InboxPercentage`
      if (jsonObj.get("InboxPercentage") != null && !jsonObj.get("InboxPercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("InboxPercentage"));
      }
      // validate the optional field `SpamPercentage`
      if (jsonObj.get("SpamPercentage") != null && !jsonObj.get("SpamPercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("SpamPercentage"));
      }
      // validate the optional field `MissingPercentage`
      if (jsonObj.get("MissingPercentage") != null && !jsonObj.get("MissingPercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("MissingPercentage"));
      }
      // validate the optional field `SpfPercentage`
      if (jsonObj.get("SpfPercentage") != null && !jsonObj.get("SpfPercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("SpfPercentage"));
      }
      // validate the optional field `DkimPercentage`
      if (jsonObj.get("DkimPercentage") != null && !jsonObj.get("DkimPercentage").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("DkimPercentage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlacementStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlacementStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlacementStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlacementStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<PlacementStatistics>() {
           @Override
           public void write(JsonWriter out, PlacementStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlacementStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlacementStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlacementStatistics
   * @throws IOException if the JSON string is invalid with respect to PlacementStatistics
   */
  public static PlacementStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlacementStatistics.class);
  }

  /**
   * Convert an instance of PlacementStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

