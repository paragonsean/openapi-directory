/*
 * Amazon Simple Email Service
 * <fullname>Amazon SES API v2</fullname> <p> <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that you can use to send email messages to your customers.</p> <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer Guide</i> provides information and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>
 *
 * The version of the OpenAPI document: 2019-09-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateConfigurationSetEventDestinationRequestEventDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConfigurationSetEventDestinationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:13.736436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateConfigurationSetEventDestinationRequest {
  public static final String SERIALIZED_NAME_EVENT_DESTINATION_NAME = "EventDestinationName";
  @SerializedName(SERIALIZED_NAME_EVENT_DESTINATION_NAME)
  private String eventDestinationName;

  public static final String SERIALIZED_NAME_EVENT_DESTINATION = "EventDestination";
  @SerializedName(SERIALIZED_NAME_EVENT_DESTINATION)
  private CreateConfigurationSetEventDestinationRequestEventDestination eventDestination;

  public CreateConfigurationSetEventDestinationRequest() {
  }

  public CreateConfigurationSetEventDestinationRequest eventDestinationName(String eventDestinationName) {
    this.eventDestinationName = eventDestinationName;
    return this;
  }

  /**
   * &lt;p&gt;The name of an event destination.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Events&lt;/i&gt; include message sends, deliveries, opens, clicks, bounces, and complaints. &lt;i&gt;Event destinations&lt;/i&gt; are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.&lt;/p&gt;
   * @return eventDestinationName
   */
  @javax.annotation.Nonnull
  public String getEventDestinationName() {
    return eventDestinationName;
  }

  public void setEventDestinationName(String eventDestinationName) {
    this.eventDestinationName = eventDestinationName;
  }


  public CreateConfigurationSetEventDestinationRequest eventDestination(CreateConfigurationSetEventDestinationRequestEventDestination eventDestination) {
    this.eventDestination = eventDestination;
    return this;
  }

  /**
   * Get eventDestination
   * @return eventDestination
   */
  @javax.annotation.Nonnull
  public CreateConfigurationSetEventDestinationRequestEventDestination getEventDestination() {
    return eventDestination;
  }

  public void setEventDestination(CreateConfigurationSetEventDestinationRequestEventDestination eventDestination) {
    this.eventDestination = eventDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConfigurationSetEventDestinationRequest createConfigurationSetEventDestinationRequest = (CreateConfigurationSetEventDestinationRequest) o;
    return Objects.equals(this.eventDestinationName, createConfigurationSetEventDestinationRequest.eventDestinationName) &&
        Objects.equals(this.eventDestination, createConfigurationSetEventDestinationRequest.eventDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventDestinationName, eventDestination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConfigurationSetEventDestinationRequest {\n");
    sb.append("    eventDestinationName: ").append(toIndentedString(eventDestinationName)).append("\n");
    sb.append("    eventDestination: ").append(toIndentedString(eventDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventDestinationName");
    openapiFields.add("EventDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EventDestinationName");
    openapiRequiredFields.add("EventDestination");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConfigurationSetEventDestinationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConfigurationSetEventDestinationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConfigurationSetEventDestinationRequest is not found in the empty JSON string", CreateConfigurationSetEventDestinationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConfigurationSetEventDestinationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConfigurationSetEventDestinationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConfigurationSetEventDestinationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("EventDestinationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventDestinationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventDestinationName").toString()));
      }
      // validate the required field `EventDestination`
      CreateConfigurationSetEventDestinationRequestEventDestination.validateJsonElement(jsonObj.get("EventDestination"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConfigurationSetEventDestinationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConfigurationSetEventDestinationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConfigurationSetEventDestinationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConfigurationSetEventDestinationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConfigurationSetEventDestinationRequest>() {
           @Override
           public void write(JsonWriter out, CreateConfigurationSetEventDestinationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConfigurationSetEventDestinationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConfigurationSetEventDestinationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConfigurationSetEventDestinationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateConfigurationSetEventDestinationRequest
   */
  public static CreateConfigurationSetEventDestinationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConfigurationSetEventDestinationRequest.class);
  }

  /**
   * Convert an instance of CreateConfigurationSetEventDestinationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

