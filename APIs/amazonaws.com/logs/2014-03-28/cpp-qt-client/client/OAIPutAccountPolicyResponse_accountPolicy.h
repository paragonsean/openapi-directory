/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutAccountPolicyResponse_accountPolicy.h
 *
 * 
 */

#ifndef OAIPutAccountPolicyResponse_accountPolicy_H
#define OAIPutAccountPolicyResponse_accountPolicy_H

#include <QJsonObject>

#include "OAIPolicyType.h"
#include "OAIScope.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutAccountPolicyResponse_accountPolicy : public OAIObject {
public:
    OAIPutAccountPolicyResponse_accountPolicy();
    OAIPutAccountPolicyResponse_accountPolicy(QString json);
    ~OAIPutAccountPolicyResponse_accountPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPolicyName() const;
    void setPolicyName(const QString &policy_name);
    bool is_policy_name_Set() const;
    bool is_policy_name_Valid() const;

    QString getPolicyDocument() const;
    void setPolicyDocument(const QString &policy_document);
    bool is_policy_document_Set() const;
    bool is_policy_document_Valid() const;

    qint32 getLastUpdatedTime() const;
    void setLastUpdatedTime(const qint32 &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    OAIPolicyType getPolicyType() const;
    void setPolicyType(const OAIPolicyType &policy_type);
    bool is_policy_type_Set() const;
    bool is_policy_type_Valid() const;

    OAIScope getScope() const;
    void setScope(const OAIScope &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_policy_name;
    bool m_policy_name_isSet;
    bool m_policy_name_isValid;

    QString m_policy_document;
    bool m_policy_document_isSet;
    bool m_policy_document_isValid;

    qint32 m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    OAIPolicyType m_policy_type;
    bool m_policy_type_isSet;
    bool m_policy_type_isValid;

    OAIScope m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutAccountPolicyResponse_accountPolicy)

#endif // OAIPutAccountPolicyResponse_accountPolicy_H
