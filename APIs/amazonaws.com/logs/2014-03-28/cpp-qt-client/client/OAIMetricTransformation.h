/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricTransformation.h
 *
 * Indicates how to transform ingested log events to metric data in a CloudWatch metric.
 */

#ifndef OAIMetricTransformation_H
#define OAIMetricTransformation_H

#include <QJsonObject>

#include "OAIStandardUnit.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMetricTransformation : public OAIObject {
public:
    OAIMetricTransformation();
    OAIMetricTransformation(QString json);
    ~OAIMetricTransformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    QString getMetricNamespace() const;
    void setMetricNamespace(const QString &metric_namespace);
    bool is_metric_namespace_Set() const;
    bool is_metric_namespace_Valid() const;

    QString getMetricValue() const;
    void setMetricValue(const QString &metric_value);
    bool is_metric_value_Set() const;
    bool is_metric_value_Valid() const;

    double getDefaultValue() const;
    void setDefaultValue(const double &default_value);
    bool is_default_value_Set() const;
    bool is_default_value_Valid() const;

    QMap getDimensions() const;
    void setDimensions(const QMap &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    OAIStandardUnit getUnit() const;
    void setUnit(const OAIStandardUnit &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    QString m_metric_namespace;
    bool m_metric_namespace_isSet;
    bool m_metric_namespace_isValid;

    QString m_metric_value;
    bool m_metric_value_isSet;
    bool m_metric_value_isValid;

    double m_default_value;
    bool m_default_value_isSet;
    bool m_default_value_isValid;

    QMap m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    OAIStandardUnit m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricTransformation)

#endif // OAIMetricTransformation_H
