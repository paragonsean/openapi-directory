/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRejectedLogEventsInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRejectedLogEventsInfo::OAIRejectedLogEventsInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRejectedLogEventsInfo::OAIRejectedLogEventsInfo() {
    this->initializeModel();
}

OAIRejectedLogEventsInfo::~OAIRejectedLogEventsInfo() {}

void OAIRejectedLogEventsInfo::initializeModel() {

    m_too_new_log_event_start_index_isSet = false;
    m_too_new_log_event_start_index_isValid = false;

    m_too_old_log_event_end_index_isSet = false;
    m_too_old_log_event_end_index_isValid = false;

    m_expired_log_event_end_index_isSet = false;
    m_expired_log_event_end_index_isValid = false;
}

void OAIRejectedLogEventsInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRejectedLogEventsInfo::fromJsonObject(QJsonObject json) {

    m_too_new_log_event_start_index_isValid = ::OpenAPI::fromJsonValue(m_too_new_log_event_start_index, json[QString("tooNewLogEventStartIndex")]);
    m_too_new_log_event_start_index_isSet = !json[QString("tooNewLogEventStartIndex")].isNull() && m_too_new_log_event_start_index_isValid;

    m_too_old_log_event_end_index_isValid = ::OpenAPI::fromJsonValue(m_too_old_log_event_end_index, json[QString("tooOldLogEventEndIndex")]);
    m_too_old_log_event_end_index_isSet = !json[QString("tooOldLogEventEndIndex")].isNull() && m_too_old_log_event_end_index_isValid;

    m_expired_log_event_end_index_isValid = ::OpenAPI::fromJsonValue(m_expired_log_event_end_index, json[QString("expiredLogEventEndIndex")]);
    m_expired_log_event_end_index_isSet = !json[QString("expiredLogEventEndIndex")].isNull() && m_expired_log_event_end_index_isValid;
}

QString OAIRejectedLogEventsInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRejectedLogEventsInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_too_new_log_event_start_index_isSet) {
        obj.insert(QString("tooNewLogEventStartIndex"), ::OpenAPI::toJsonValue(m_too_new_log_event_start_index));
    }
    if (m_too_old_log_event_end_index_isSet) {
        obj.insert(QString("tooOldLogEventEndIndex"), ::OpenAPI::toJsonValue(m_too_old_log_event_end_index));
    }
    if (m_expired_log_event_end_index_isSet) {
        obj.insert(QString("expiredLogEventEndIndex"), ::OpenAPI::toJsonValue(m_expired_log_event_end_index));
    }
    return obj;
}

qint32 OAIRejectedLogEventsInfo::getTooNewLogEventStartIndex() const {
    return m_too_new_log_event_start_index;
}
void OAIRejectedLogEventsInfo::setTooNewLogEventStartIndex(const qint32 &too_new_log_event_start_index) {
    m_too_new_log_event_start_index = too_new_log_event_start_index;
    m_too_new_log_event_start_index_isSet = true;
}

bool OAIRejectedLogEventsInfo::is_too_new_log_event_start_index_Set() const{
    return m_too_new_log_event_start_index_isSet;
}

bool OAIRejectedLogEventsInfo::is_too_new_log_event_start_index_Valid() const{
    return m_too_new_log_event_start_index_isValid;
}

qint32 OAIRejectedLogEventsInfo::getTooOldLogEventEndIndex() const {
    return m_too_old_log_event_end_index;
}
void OAIRejectedLogEventsInfo::setTooOldLogEventEndIndex(const qint32 &too_old_log_event_end_index) {
    m_too_old_log_event_end_index = too_old_log_event_end_index;
    m_too_old_log_event_end_index_isSet = true;
}

bool OAIRejectedLogEventsInfo::is_too_old_log_event_end_index_Set() const{
    return m_too_old_log_event_end_index_isSet;
}

bool OAIRejectedLogEventsInfo::is_too_old_log_event_end_index_Valid() const{
    return m_too_old_log_event_end_index_isValid;
}

qint32 OAIRejectedLogEventsInfo::getExpiredLogEventEndIndex() const {
    return m_expired_log_event_end_index;
}
void OAIRejectedLogEventsInfo::setExpiredLogEventEndIndex(const qint32 &expired_log_event_end_index) {
    m_expired_log_event_end_index = expired_log_event_end_index;
    m_expired_log_event_end_index_isSet = true;
}

bool OAIRejectedLogEventsInfo::is_expired_log_event_end_index_Set() const{
    return m_expired_log_event_end_index_isSet;
}

bool OAIRejectedLogEventsInfo::is_expired_log_event_end_index_Valid() const{
    return m_expired_log_event_end_index_isValid;
}

bool OAIRejectedLogEventsInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_too_new_log_event_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_too_old_log_event_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_log_event_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRejectedLogEventsInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
