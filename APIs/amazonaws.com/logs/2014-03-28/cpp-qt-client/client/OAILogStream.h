/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILogStream.h
 *
 * Represents a log stream, which is a sequence of log events from a single emitter of logs.
 */

#ifndef OAILogStream_H
#define OAILogStream_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILogStream : public OAIObject {
public:
    OAILogStream();
    OAILogStream(QString json);
    ~OAILogStream() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLogStreamName() const;
    void setLogStreamName(const QString &log_stream_name);
    bool is_log_stream_name_Set() const;
    bool is_log_stream_name_Valid() const;

    qint32 getCreationTime() const;
    void setCreationTime(const qint32 &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    qint32 getFirstEventTimestamp() const;
    void setFirstEventTimestamp(const qint32 &first_event_timestamp);
    bool is_first_event_timestamp_Set() const;
    bool is_first_event_timestamp_Valid() const;

    qint32 getLastEventTimestamp() const;
    void setLastEventTimestamp(const qint32 &last_event_timestamp);
    bool is_last_event_timestamp_Set() const;
    bool is_last_event_timestamp_Valid() const;

    qint32 getLastIngestionTime() const;
    void setLastIngestionTime(const qint32 &last_ingestion_time);
    bool is_last_ingestion_time_Set() const;
    bool is_last_ingestion_time_Valid() const;

    QString getUploadSequenceToken() const;
    void setUploadSequenceToken(const QString &upload_sequence_token);
    bool is_upload_sequence_token_Set() const;
    bool is_upload_sequence_token_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    qint32 getStoredBytes() const;
    void setStoredBytes(const qint32 &stored_bytes);
    bool is_stored_bytes_Set() const;
    bool is_stored_bytes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_log_stream_name;
    bool m_log_stream_name_isSet;
    bool m_log_stream_name_isValid;

    qint32 m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    qint32 m_first_event_timestamp;
    bool m_first_event_timestamp_isSet;
    bool m_first_event_timestamp_isValid;

    qint32 m_last_event_timestamp;
    bool m_last_event_timestamp_isSet;
    bool m_last_event_timestamp_isValid;

    qint32 m_last_ingestion_time;
    bool m_last_ingestion_time_isSet;
    bool m_last_ingestion_time_isValid;

    QString m_upload_sequence_token;
    bool m_upload_sequence_token_isSet;
    bool m_upload_sequence_token_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    qint32 m_stored_bytes;
    bool m_stored_bytes_isSet;
    bool m_stored_bytes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILogStream)

#endif // OAILogStream_H
