/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExportTask.h
 *
 * Represents an export task.
 */

#ifndef OAIExportTask_H
#define OAIExportTask_H

#include <QJsonObject>

#include "OAIExportTask_executionInfo.h"
#include "OAIExportTask_status.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExportTask_status;
class OAIExportTask_executionInfo;

class OAIExportTask : public OAIObject {
public:
    OAIExportTask();
    OAIExportTask(QString json);
    ~OAIExportTask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTaskId() const;
    void setTaskId(const QString &task_id);
    bool is_task_id_Set() const;
    bool is_task_id_Valid() const;

    QString getTaskName() const;
    void setTaskName(const QString &task_name);
    bool is_task_name_Set() const;
    bool is_task_name_Valid() const;

    QString getLogGroupName() const;
    void setLogGroupName(const QString &log_group_name);
    bool is_log_group_name_Set() const;
    bool is_log_group_name_Valid() const;

    qint32 getFrom() const;
    void setFrom(const qint32 &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    qint32 getTo() const;
    void setTo(const qint32 &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    QString getDestination() const;
    void setDestination(const QString &destination);
    bool is_destination_Set() const;
    bool is_destination_Valid() const;

    QString getDestinationPrefix() const;
    void setDestinationPrefix(const QString &destination_prefix);
    bool is_destination_prefix_Set() const;
    bool is_destination_prefix_Valid() const;

    OAIExportTask_status getStatus() const;
    void setStatus(const OAIExportTask_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIExportTask_executionInfo getExecutionInfo() const;
    void setExecutionInfo(const OAIExportTask_executionInfo &execution_info);
    bool is_execution_info_Set() const;
    bool is_execution_info_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_task_id;
    bool m_task_id_isSet;
    bool m_task_id_isValid;

    QString m_task_name;
    bool m_task_name_isSet;
    bool m_task_name_isValid;

    QString m_log_group_name;
    bool m_log_group_name_isSet;
    bool m_log_group_name_isValid;

    qint32 m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    qint32 m_to;
    bool m_to_isSet;
    bool m_to_isValid;

    QString m_destination;
    bool m_destination_isSet;
    bool m_destination_isValid;

    QString m_destination_prefix;
    bool m_destination_prefix_isSet;
    bool m_destination_prefix_isValid;

    OAIExportTask_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIExportTask_executionInfo m_execution_info;
    bool m_execution_info_isSet;
    bool m_execution_info_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExportTask)

#endif // OAIExportTask_H
