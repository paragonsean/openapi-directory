/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFilterLogEventsRequest.h
 *
 * 
 */

#ifndef OAIFilterLogEventsRequest_H
#define OAIFilterLogEventsRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFilterLogEventsRequest : public OAIObject {
public:
    OAIFilterLogEventsRequest();
    OAIFilterLogEventsRequest(QString json);
    ~OAIFilterLogEventsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLogGroupName() const;
    void setLogGroupName(const QString &log_group_name);
    bool is_log_group_name_Set() const;
    bool is_log_group_name_Valid() const;

    QString getLogGroupIdentifier() const;
    void setLogGroupIdentifier(const QString &log_group_identifier);
    bool is_log_group_identifier_Set() const;
    bool is_log_group_identifier_Valid() const;

    QList getLogStreamNames() const;
    void setLogStreamNames(const QList &log_stream_names);
    bool is_log_stream_names_Set() const;
    bool is_log_stream_names_Valid() const;

    QString getLogStreamNamePrefix() const;
    void setLogStreamNamePrefix(const QString &log_stream_name_prefix);
    bool is_log_stream_name_prefix_Set() const;
    bool is_log_stream_name_prefix_Valid() const;

    qint32 getStartTime() const;
    void setStartTime(const qint32 &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getEndTime() const;
    void setEndTime(const qint32 &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getFilterPattern() const;
    void setFilterPattern(const QString &filter_pattern);
    bool is_filter_pattern_Set() const;
    bool is_filter_pattern_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    bool getInterleaved() const;
    void setInterleaved(const bool &interleaved);
    bool is_interleaved_Set() const;
    bool is_interleaved_Valid() const;

    bool getUnmask() const;
    void setUnmask(const bool &unmask);
    bool is_unmask_Set() const;
    bool is_unmask_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_log_group_name;
    bool m_log_group_name_isSet;
    bool m_log_group_name_isValid;

    QString m_log_group_identifier;
    bool m_log_group_identifier_isSet;
    bool m_log_group_identifier_isValid;

    QList m_log_stream_names;
    bool m_log_stream_names_isSet;
    bool m_log_stream_names_isValid;

    QString m_log_stream_name_prefix;
    bool m_log_stream_name_prefix_isSet;
    bool m_log_stream_name_prefix_isValid;

    qint32 m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_filter_pattern;
    bool m_filter_pattern_isSet;
    bool m_filter_pattern_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    bool m_interleaved;
    bool m_interleaved_isSet;
    bool m_interleaved_isValid;

    bool m_unmask;
    bool m_unmask_isSet;
    bool m_unmask_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFilterLogEventsRequest)

#endif // OAIFilterLogEventsRequest_H
