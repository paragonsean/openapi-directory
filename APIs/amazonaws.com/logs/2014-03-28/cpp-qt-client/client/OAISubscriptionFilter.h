/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscriptionFilter.h
 *
 * Represents a subscription filter.
 */

#ifndef OAISubscriptionFilter_H
#define OAISubscriptionFilter_H

#include <QJsonObject>

#include "OAIDistribution.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISubscriptionFilter : public OAIObject {
public:
    OAISubscriptionFilter();
    OAISubscriptionFilter(QString json);
    ~OAISubscriptionFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFilterName() const;
    void setFilterName(const QString &filter_name);
    bool is_filter_name_Set() const;
    bool is_filter_name_Valid() const;

    QString getLogGroupName() const;
    void setLogGroupName(const QString &log_group_name);
    bool is_log_group_name_Set() const;
    bool is_log_group_name_Valid() const;

    QString getFilterPattern() const;
    void setFilterPattern(const QString &filter_pattern);
    bool is_filter_pattern_Set() const;
    bool is_filter_pattern_Valid() const;

    QString getDestinationArn() const;
    void setDestinationArn(const QString &destination_arn);
    bool is_destination_arn_Set() const;
    bool is_destination_arn_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    OAIDistribution getDistribution() const;
    void setDistribution(const OAIDistribution &distribution);
    bool is_distribution_Set() const;
    bool is_distribution_Valid() const;

    qint32 getCreationTime() const;
    void setCreationTime(const qint32 &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_filter_name;
    bool m_filter_name_isSet;
    bool m_filter_name_isValid;

    QString m_log_group_name;
    bool m_log_group_name_isSet;
    bool m_log_group_name_isValid;

    QString m_filter_pattern;
    bool m_filter_pattern_isSet;
    bool m_filter_pattern_isValid;

    QString m_destination_arn;
    bool m_destination_arn_isSet;
    bool m_destination_arn_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    OAIDistribution m_distribution;
    bool m_distribution_isSet;
    bool m_distribution_isValid;

    qint32 m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscriptionFilter)

#endif // OAISubscriptionFilter_H
