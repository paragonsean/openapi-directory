/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILogGroup.h
 *
 * Represents a log group.
 */

#ifndef OAILogGroup_H
#define OAILogGroup_H

#include <QJsonObject>

#include "OAIDataProtectionStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILogGroup : public OAIObject {
public:
    OAILogGroup();
    OAILogGroup(QString json);
    ~OAILogGroup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLogGroupName() const;
    void setLogGroupName(const QString &log_group_name);
    bool is_log_group_name_Set() const;
    bool is_log_group_name_Valid() const;

    qint32 getCreationTime() const;
    void setCreationTime(const qint32 &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    qint32 getRetentionInDays() const;
    void setRetentionInDays(const qint32 &retention_in_days);
    bool is_retention_in_days_Set() const;
    bool is_retention_in_days_Valid() const;

    qint32 getMetricFilterCount() const;
    void setMetricFilterCount(const qint32 &metric_filter_count);
    bool is_metric_filter_count_Set() const;
    bool is_metric_filter_count_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    qint32 getStoredBytes() const;
    void setStoredBytes(const qint32 &stored_bytes);
    bool is_stored_bytes_Set() const;
    bool is_stored_bytes_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    OAIDataProtectionStatus getDataProtectionStatus() const;
    void setDataProtectionStatus(const OAIDataProtectionStatus &data_protection_status);
    bool is_data_protection_status_Set() const;
    bool is_data_protection_status_Valid() const;

    QList getInheritedProperties() const;
    void setInheritedProperties(const QList &inherited_properties);
    bool is_inherited_properties_Set() const;
    bool is_inherited_properties_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_log_group_name;
    bool m_log_group_name_isSet;
    bool m_log_group_name_isValid;

    qint32 m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    qint32 m_retention_in_days;
    bool m_retention_in_days_isSet;
    bool m_retention_in_days_isValid;

    qint32 m_metric_filter_count;
    bool m_metric_filter_count_isSet;
    bool m_metric_filter_count_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    qint32 m_stored_bytes;
    bool m_stored_bytes_isSet;
    bool m_stored_bytes_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    OAIDataProtectionStatus m_data_protection_status;
    bool m_data_protection_status_isSet;
    bool m_data_protection_status_isValid;

    QList m_inherited_properties;
    bool m_inherited_properties_isSet;
    bool m_inherited_properties_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILogGroup)

#endif // OAILogGroup_H
