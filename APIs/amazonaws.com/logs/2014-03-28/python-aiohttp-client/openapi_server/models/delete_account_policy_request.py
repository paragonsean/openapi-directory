# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_type import PolicyType
from openapi_server import util


class DeleteAccountPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_name: str=None, policy_type: PolicyType=None):
        """DeleteAccountPolicyRequest - a model defined in OpenAPI

        :param policy_name: The policy_name of this DeleteAccountPolicyRequest.
        :param policy_type: The policy_type of this DeleteAccountPolicyRequest.
        """
        self.openapi_types = {
            'policy_name': str,
            'policy_type': PolicyType
        }

        self.attribute_map = {
            'policy_name': 'policyName',
            'policy_type': 'policyType'
        }

        self._policy_name = policy_name
        self._policy_type = policy_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteAccountPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteAccountPolicyRequest of this DeleteAccountPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_name(self):
        """Gets the policy_name of this DeleteAccountPolicyRequest.


        :return: The policy_name of this DeleteAccountPolicyRequest.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this DeleteAccountPolicyRequest.


        :param policy_name: The policy_name of this DeleteAccountPolicyRequest.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")

        self._policy_name = policy_name

    @property
    def policy_type(self):
        """Gets the policy_type of this DeleteAccountPolicyRequest.


        :return: The policy_type of this DeleteAccountPolicyRequest.
        :rtype: PolicyType
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this DeleteAccountPolicyRequest.


        :param policy_type: The policy_type of this DeleteAccountPolicyRequest.
        :type policy_type: PolicyType
        """
        if policy_type is None:
            raise ValueError("Invalid value for `policy_type`, must not be `None`")

        self._policy_type = policy_type
