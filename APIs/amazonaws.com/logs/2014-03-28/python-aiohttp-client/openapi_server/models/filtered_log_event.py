# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FilteredLogEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_stream_name: str=None, timestamp: int=None, message: str=None, ingestion_time: int=None, event_id: str=None):
        """FilteredLogEvent - a model defined in OpenAPI

        :param log_stream_name: The log_stream_name of this FilteredLogEvent.
        :param timestamp: The timestamp of this FilteredLogEvent.
        :param message: The message of this FilteredLogEvent.
        :param ingestion_time: The ingestion_time of this FilteredLogEvent.
        :param event_id: The event_id of this FilteredLogEvent.
        """
        self.openapi_types = {
            'log_stream_name': str,
            'timestamp': int,
            'message': str,
            'ingestion_time': int,
            'event_id': str
        }

        self.attribute_map = {
            'log_stream_name': 'logStreamName',
            'timestamp': 'timestamp',
            'message': 'message',
            'ingestion_time': 'ingestionTime',
            'event_id': 'eventId'
        }

        self._log_stream_name = log_stream_name
        self._timestamp = timestamp
        self._message = message
        self._ingestion_time = ingestion_time
        self._event_id = event_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilteredLogEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilteredLogEvent of this FilteredLogEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_stream_name(self):
        """Gets the log_stream_name of this FilteredLogEvent.


        :return: The log_stream_name of this FilteredLogEvent.
        :rtype: str
        """
        return self._log_stream_name

    @log_stream_name.setter
    def log_stream_name(self, log_stream_name):
        """Sets the log_stream_name of this FilteredLogEvent.


        :param log_stream_name: The log_stream_name of this FilteredLogEvent.
        :type log_stream_name: str
        """

        self._log_stream_name = log_stream_name

    @property
    def timestamp(self):
        """Gets the timestamp of this FilteredLogEvent.


        :return: The timestamp of this FilteredLogEvent.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FilteredLogEvent.


        :param timestamp: The timestamp of this FilteredLogEvent.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def message(self):
        """Gets the message of this FilteredLogEvent.


        :return: The message of this FilteredLogEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this FilteredLogEvent.


        :param message: The message of this FilteredLogEvent.
        :type message: str
        """

        self._message = message

    @property
    def ingestion_time(self):
        """Gets the ingestion_time of this FilteredLogEvent.


        :return: The ingestion_time of this FilteredLogEvent.
        :rtype: int
        """
        return self._ingestion_time

    @ingestion_time.setter
    def ingestion_time(self, ingestion_time):
        """Sets the ingestion_time of this FilteredLogEvent.


        :param ingestion_time: The ingestion_time of this FilteredLogEvent.
        :type ingestion_time: int
        """

        self._ingestion_time = ingestion_time

    @property
    def event_id(self):
        """Gets the event_id of this FilteredLogEvent.


        :return: The event_id of this FilteredLogEvent.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this FilteredLogEvent.


        :param event_id: The event_id of this FilteredLogEvent.
        :type event_id: str
        """

        self._event_id = event_id
