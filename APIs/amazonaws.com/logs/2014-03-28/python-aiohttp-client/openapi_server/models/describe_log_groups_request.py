# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeLogGroupsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_identifiers: List=None, log_group_name_prefix: str=None, log_group_name_pattern: str=None, next_token: str=None, limit: int=None, include_linked_accounts: bool=None):
        """DescribeLogGroupsRequest - a model defined in OpenAPI

        :param account_identifiers: The account_identifiers of this DescribeLogGroupsRequest.
        :param log_group_name_prefix: The log_group_name_prefix of this DescribeLogGroupsRequest.
        :param log_group_name_pattern: The log_group_name_pattern of this DescribeLogGroupsRequest.
        :param next_token: The next_token of this DescribeLogGroupsRequest.
        :param limit: The limit of this DescribeLogGroupsRequest.
        :param include_linked_accounts: The include_linked_accounts of this DescribeLogGroupsRequest.
        """
        self.openapi_types = {
            'account_identifiers': List,
            'log_group_name_prefix': str,
            'log_group_name_pattern': str,
            'next_token': str,
            'limit': int,
            'include_linked_accounts': bool
        }

        self.attribute_map = {
            'account_identifiers': 'accountIdentifiers',
            'log_group_name_prefix': 'logGroupNamePrefix',
            'log_group_name_pattern': 'logGroupNamePattern',
            'next_token': 'nextToken',
            'limit': 'limit',
            'include_linked_accounts': 'includeLinkedAccounts'
        }

        self._account_identifiers = account_identifiers
        self._log_group_name_prefix = log_group_name_prefix
        self._log_group_name_pattern = log_group_name_pattern
        self._next_token = next_token
        self._limit = limit
        self._include_linked_accounts = include_linked_accounts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeLogGroupsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeLogGroupsRequest of this DescribeLogGroupsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_identifiers(self):
        """Gets the account_identifiers of this DescribeLogGroupsRequest.


        :return: The account_identifiers of this DescribeLogGroupsRequest.
        :rtype: List
        """
        return self._account_identifiers

    @account_identifiers.setter
    def account_identifiers(self, account_identifiers):
        """Sets the account_identifiers of this DescribeLogGroupsRequest.


        :param account_identifiers: The account_identifiers of this DescribeLogGroupsRequest.
        :type account_identifiers: List
        """

        self._account_identifiers = account_identifiers

    @property
    def log_group_name_prefix(self):
        """Gets the log_group_name_prefix of this DescribeLogGroupsRequest.


        :return: The log_group_name_prefix of this DescribeLogGroupsRequest.
        :rtype: str
        """
        return self._log_group_name_prefix

    @log_group_name_prefix.setter
    def log_group_name_prefix(self, log_group_name_prefix):
        """Sets the log_group_name_prefix of this DescribeLogGroupsRequest.


        :param log_group_name_prefix: The log_group_name_prefix of this DescribeLogGroupsRequest.
        :type log_group_name_prefix: str
        """

        self._log_group_name_prefix = log_group_name_prefix

    @property
    def log_group_name_pattern(self):
        """Gets the log_group_name_pattern of this DescribeLogGroupsRequest.


        :return: The log_group_name_pattern of this DescribeLogGroupsRequest.
        :rtype: str
        """
        return self._log_group_name_pattern

    @log_group_name_pattern.setter
    def log_group_name_pattern(self, log_group_name_pattern):
        """Sets the log_group_name_pattern of this DescribeLogGroupsRequest.


        :param log_group_name_pattern: The log_group_name_pattern of this DescribeLogGroupsRequest.
        :type log_group_name_pattern: str
        """

        self._log_group_name_pattern = log_group_name_pattern

    @property
    def next_token(self):
        """Gets the next_token of this DescribeLogGroupsRequest.


        :return: The next_token of this DescribeLogGroupsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeLogGroupsRequest.


        :param next_token: The next_token of this DescribeLogGroupsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def limit(self):
        """Gets the limit of this DescribeLogGroupsRequest.


        :return: The limit of this DescribeLogGroupsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DescribeLogGroupsRequest.


        :param limit: The limit of this DescribeLogGroupsRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def include_linked_accounts(self):
        """Gets the include_linked_accounts of this DescribeLogGroupsRequest.


        :return: The include_linked_accounts of this DescribeLogGroupsRequest.
        :rtype: bool
        """
        return self._include_linked_accounts

    @include_linked_accounts.setter
    def include_linked_accounts(self, include_linked_accounts):
        """Sets the include_linked_accounts of this DescribeLogGroupsRequest.


        :param include_linked_accounts: The include_linked_accounts of this DescribeLogGroupsRequest.
        :type include_linked_accounts: bool
        """

        self._include_linked_accounts = include_linked_accounts
