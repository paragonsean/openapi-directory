# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.export_task_execution_info import ExportTaskExecutionInfo
from openapi_server.models.export_task_status import ExportTaskStatus
from openapi_server import util


class ExportTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_id: str=None, task_name: str=None, log_group_name: str=None, _from: int=None, to: int=None, destination: str=None, destination_prefix: str=None, status: ExportTaskStatus=None, execution_info: ExportTaskExecutionInfo=None):
        """ExportTask - a model defined in OpenAPI

        :param task_id: The task_id of this ExportTask.
        :param task_name: The task_name of this ExportTask.
        :param log_group_name: The log_group_name of this ExportTask.
        :param _from: The _from of this ExportTask.
        :param to: The to of this ExportTask.
        :param destination: The destination of this ExportTask.
        :param destination_prefix: The destination_prefix of this ExportTask.
        :param status: The status of this ExportTask.
        :param execution_info: The execution_info of this ExportTask.
        """
        self.openapi_types = {
            'task_id': str,
            'task_name': str,
            'log_group_name': str,
            '_from': int,
            'to': int,
            'destination': str,
            'destination_prefix': str,
            'status': ExportTaskStatus,
            'execution_info': ExportTaskExecutionInfo
        }

        self.attribute_map = {
            'task_id': 'taskId',
            'task_name': 'taskName',
            'log_group_name': 'logGroupName',
            '_from': 'from',
            'to': 'to',
            'destination': 'destination',
            'destination_prefix': 'destinationPrefix',
            'status': 'status',
            'execution_info': 'executionInfo'
        }

        self._task_id = task_id
        self._task_name = task_name
        self._log_group_name = log_group_name
        self.__from = _from
        self._to = to
        self._destination = destination
        self._destination_prefix = destination_prefix
        self._status = status
        self._execution_info = execution_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportTask of this ExportTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self):
        """Gets the task_id of this ExportTask.


        :return: The task_id of this ExportTask.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this ExportTask.


        :param task_id: The task_id of this ExportTask.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def task_name(self):
        """Gets the task_name of this ExportTask.


        :return: The task_name of this ExportTask.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this ExportTask.


        :param task_name: The task_name of this ExportTask.
        :type task_name: str
        """

        self._task_name = task_name

    @property
    def log_group_name(self):
        """Gets the log_group_name of this ExportTask.


        :return: The log_group_name of this ExportTask.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this ExportTask.


        :param log_group_name: The log_group_name of this ExportTask.
        :type log_group_name: str
        """

        self._log_group_name = log_group_name

    @property
    def _from(self):
        """Gets the _from of this ExportTask.


        :return: The _from of this ExportTask.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ExportTask.


        :param _from: The _from of this ExportTask.
        :type _from: int
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this ExportTask.


        :return: The to of this ExportTask.
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ExportTask.


        :param to: The to of this ExportTask.
        :type to: int
        """

        self._to = to

    @property
    def destination(self):
        """Gets the destination of this ExportTask.


        :return: The destination of this ExportTask.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ExportTask.


        :param destination: The destination of this ExportTask.
        :type destination: str
        """

        self._destination = destination

    @property
    def destination_prefix(self):
        """Gets the destination_prefix of this ExportTask.


        :return: The destination_prefix of this ExportTask.
        :rtype: str
        """
        return self._destination_prefix

    @destination_prefix.setter
    def destination_prefix(self, destination_prefix):
        """Sets the destination_prefix of this ExportTask.


        :param destination_prefix: The destination_prefix of this ExportTask.
        :type destination_prefix: str
        """

        self._destination_prefix = destination_prefix

    @property
    def status(self):
        """Gets the status of this ExportTask.


        :return: The status of this ExportTask.
        :rtype: ExportTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExportTask.


        :param status: The status of this ExportTask.
        :type status: ExportTaskStatus
        """

        self._status = status

    @property
    def execution_info(self):
        """Gets the execution_info of this ExportTask.


        :return: The execution_info of this ExportTask.
        :rtype: ExportTaskExecutionInfo
        """
        return self._execution_info

    @execution_info.setter
    def execution_info(self, execution_info):
        """Sets the execution_info of this ExportTask.


        :param execution_info: The execution_info of this ExportTask.
        :type execution_info: ExportTaskExecutionInfo
        """

        self._execution_info = execution_info
