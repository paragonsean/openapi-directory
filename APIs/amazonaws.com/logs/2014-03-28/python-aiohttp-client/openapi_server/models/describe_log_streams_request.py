# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_by import OrderBy
from openapi_server import util


class DescribeLogStreamsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_name: str=None, log_group_identifier: str=None, log_stream_name_prefix: str=None, order_by: OrderBy=None, descending: bool=None, next_token: str=None, limit: int=None):
        """DescribeLogStreamsRequest - a model defined in OpenAPI

        :param log_group_name: The log_group_name of this DescribeLogStreamsRequest.
        :param log_group_identifier: The log_group_identifier of this DescribeLogStreamsRequest.
        :param log_stream_name_prefix: The log_stream_name_prefix of this DescribeLogStreamsRequest.
        :param order_by: The order_by of this DescribeLogStreamsRequest.
        :param descending: The descending of this DescribeLogStreamsRequest.
        :param next_token: The next_token of this DescribeLogStreamsRequest.
        :param limit: The limit of this DescribeLogStreamsRequest.
        """
        self.openapi_types = {
            'log_group_name': str,
            'log_group_identifier': str,
            'log_stream_name_prefix': str,
            'order_by': OrderBy,
            'descending': bool,
            'next_token': str,
            'limit': int
        }

        self.attribute_map = {
            'log_group_name': 'logGroupName',
            'log_group_identifier': 'logGroupIdentifier',
            'log_stream_name_prefix': 'logStreamNamePrefix',
            'order_by': 'orderBy',
            'descending': 'descending',
            'next_token': 'nextToken',
            'limit': 'limit'
        }

        self._log_group_name = log_group_name
        self._log_group_identifier = log_group_identifier
        self._log_stream_name_prefix = log_stream_name_prefix
        self._order_by = order_by
        self._descending = descending
        self._next_token = next_token
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeLogStreamsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeLogStreamsRequest of this DescribeLogStreamsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_name(self):
        """Gets the log_group_name of this DescribeLogStreamsRequest.


        :return: The log_group_name of this DescribeLogStreamsRequest.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this DescribeLogStreamsRequest.


        :param log_group_name: The log_group_name of this DescribeLogStreamsRequest.
        :type log_group_name: str
        """

        self._log_group_name = log_group_name

    @property
    def log_group_identifier(self):
        """Gets the log_group_identifier of this DescribeLogStreamsRequest.


        :return: The log_group_identifier of this DescribeLogStreamsRequest.
        :rtype: str
        """
        return self._log_group_identifier

    @log_group_identifier.setter
    def log_group_identifier(self, log_group_identifier):
        """Sets the log_group_identifier of this DescribeLogStreamsRequest.


        :param log_group_identifier: The log_group_identifier of this DescribeLogStreamsRequest.
        :type log_group_identifier: str
        """

        self._log_group_identifier = log_group_identifier

    @property
    def log_stream_name_prefix(self):
        """Gets the log_stream_name_prefix of this DescribeLogStreamsRequest.


        :return: The log_stream_name_prefix of this DescribeLogStreamsRequest.
        :rtype: str
        """
        return self._log_stream_name_prefix

    @log_stream_name_prefix.setter
    def log_stream_name_prefix(self, log_stream_name_prefix):
        """Sets the log_stream_name_prefix of this DescribeLogStreamsRequest.


        :param log_stream_name_prefix: The log_stream_name_prefix of this DescribeLogStreamsRequest.
        :type log_stream_name_prefix: str
        """

        self._log_stream_name_prefix = log_stream_name_prefix

    @property
    def order_by(self):
        """Gets the order_by of this DescribeLogStreamsRequest.


        :return: The order_by of this DescribeLogStreamsRequest.
        :rtype: OrderBy
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this DescribeLogStreamsRequest.


        :param order_by: The order_by of this DescribeLogStreamsRequest.
        :type order_by: OrderBy
        """

        self._order_by = order_by

    @property
    def descending(self):
        """Gets the descending of this DescribeLogStreamsRequest.


        :return: The descending of this DescribeLogStreamsRequest.
        :rtype: bool
        """
        return self._descending

    @descending.setter
    def descending(self, descending):
        """Sets the descending of this DescribeLogStreamsRequest.


        :param descending: The descending of this DescribeLogStreamsRequest.
        :type descending: bool
        """

        self._descending = descending

    @property
    def next_token(self):
        """Gets the next_token of this DescribeLogStreamsRequest.


        :return: The next_token of this DescribeLogStreamsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeLogStreamsRequest.


        :param next_token: The next_token of this DescribeLogStreamsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def limit(self):
        """Gets the limit of this DescribeLogStreamsRequest.


        :return: The limit of this DescribeLogStreamsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DescribeLogStreamsRequest.


        :param limit: The limit of this DescribeLogStreamsRequest.
        :type limit: int
        """

        self._limit = limit
