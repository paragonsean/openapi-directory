# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteDataProtectionPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_identifier: str=None):
        """DeleteDataProtectionPolicyRequest - a model defined in OpenAPI

        :param log_group_identifier: The log_group_identifier of this DeleteDataProtectionPolicyRequest.
        """
        self.openapi_types = {
            'log_group_identifier': str
        }

        self.attribute_map = {
            'log_group_identifier': 'logGroupIdentifier'
        }

        self._log_group_identifier = log_group_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteDataProtectionPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteDataProtectionPolicyRequest of this DeleteDataProtectionPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_identifier(self):
        """Gets the log_group_identifier of this DeleteDataProtectionPolicyRequest.


        :return: The log_group_identifier of this DeleteDataProtectionPolicyRequest.
        :rtype: str
        """
        return self._log_group_identifier

    @log_group_identifier.setter
    def log_group_identifier(self, log_group_identifier):
        """Sets the log_group_identifier of this DeleteDataProtectionPolicyRequest.


        :param log_group_identifier: The log_group_identifier of this DeleteDataProtectionPolicyRequest.
        :type log_group_identifier: str
        """
        if log_group_identifier is None:
            raise ValueError("Invalid value for `log_group_identifier`, must not be `None`")

        self._log_group_identifier = log_group_identifier
