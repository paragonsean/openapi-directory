# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutQueryDefinitionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, query_definition_id: str=None, log_group_names: List=None, query_string: str=None):
        """PutQueryDefinitionRequest - a model defined in OpenAPI

        :param name: The name of this PutQueryDefinitionRequest.
        :param query_definition_id: The query_definition_id of this PutQueryDefinitionRequest.
        :param log_group_names: The log_group_names of this PutQueryDefinitionRequest.
        :param query_string: The query_string of this PutQueryDefinitionRequest.
        """
        self.openapi_types = {
            'name': str,
            'query_definition_id': str,
            'log_group_names': List,
            'query_string': str
        }

        self.attribute_map = {
            'name': 'name',
            'query_definition_id': 'queryDefinitionId',
            'log_group_names': 'logGroupNames',
            'query_string': 'queryString'
        }

        self._name = name
        self._query_definition_id = query_definition_id
        self._log_group_names = log_group_names
        self._query_string = query_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutQueryDefinitionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutQueryDefinitionRequest of this PutQueryDefinitionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PutQueryDefinitionRequest.


        :return: The name of this PutQueryDefinitionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutQueryDefinitionRequest.


        :param name: The name of this PutQueryDefinitionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def query_definition_id(self):
        """Gets the query_definition_id of this PutQueryDefinitionRequest.


        :return: The query_definition_id of this PutQueryDefinitionRequest.
        :rtype: str
        """
        return self._query_definition_id

    @query_definition_id.setter
    def query_definition_id(self, query_definition_id):
        """Sets the query_definition_id of this PutQueryDefinitionRequest.


        :param query_definition_id: The query_definition_id of this PutQueryDefinitionRequest.
        :type query_definition_id: str
        """

        self._query_definition_id = query_definition_id

    @property
    def log_group_names(self):
        """Gets the log_group_names of this PutQueryDefinitionRequest.


        :return: The log_group_names of this PutQueryDefinitionRequest.
        :rtype: List
        """
        return self._log_group_names

    @log_group_names.setter
    def log_group_names(self, log_group_names):
        """Sets the log_group_names of this PutQueryDefinitionRequest.


        :param log_group_names: The log_group_names of this PutQueryDefinitionRequest.
        :type log_group_names: List
        """

        self._log_group_names = log_group_names

    @property
    def query_string(self):
        """Gets the query_string of this PutQueryDefinitionRequest.


        :return: The query_string of this PutQueryDefinitionRequest.
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this PutQueryDefinitionRequest.


        :param query_string: The query_string of this PutQueryDefinitionRequest.
        :type query_string: str
        """
        if query_string is None:
            raise ValueError("Invalid value for `query_string`, must not be `None`")

        self._query_string = query_string
