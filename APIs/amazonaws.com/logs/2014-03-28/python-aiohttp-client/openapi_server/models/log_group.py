# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_protection_status import DataProtectionStatus
from openapi_server import util


class LogGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_name: str=None, creation_time: int=None, retention_in_days: int=None, metric_filter_count: int=None, arn: str=None, stored_bytes: int=None, kms_key_id: str=None, data_protection_status: DataProtectionStatus=None, inherited_properties: List=None):
        """LogGroup - a model defined in OpenAPI

        :param log_group_name: The log_group_name of this LogGroup.
        :param creation_time: The creation_time of this LogGroup.
        :param retention_in_days: The retention_in_days of this LogGroup.
        :param metric_filter_count: The metric_filter_count of this LogGroup.
        :param arn: The arn of this LogGroup.
        :param stored_bytes: The stored_bytes of this LogGroup.
        :param kms_key_id: The kms_key_id of this LogGroup.
        :param data_protection_status: The data_protection_status of this LogGroup.
        :param inherited_properties: The inherited_properties of this LogGroup.
        """
        self.openapi_types = {
            'log_group_name': str,
            'creation_time': int,
            'retention_in_days': int,
            'metric_filter_count': int,
            'arn': str,
            'stored_bytes': int,
            'kms_key_id': str,
            'data_protection_status': DataProtectionStatus,
            'inherited_properties': List
        }

        self.attribute_map = {
            'log_group_name': 'logGroupName',
            'creation_time': 'creationTime',
            'retention_in_days': 'retentionInDays',
            'metric_filter_count': 'metricFilterCount',
            'arn': 'arn',
            'stored_bytes': 'storedBytes',
            'kms_key_id': 'kmsKeyId',
            'data_protection_status': 'dataProtectionStatus',
            'inherited_properties': 'inheritedProperties'
        }

        self._log_group_name = log_group_name
        self._creation_time = creation_time
        self._retention_in_days = retention_in_days
        self._metric_filter_count = metric_filter_count
        self._arn = arn
        self._stored_bytes = stored_bytes
        self._kms_key_id = kms_key_id
        self._data_protection_status = data_protection_status
        self._inherited_properties = inherited_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogGroup of this LogGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_name(self):
        """Gets the log_group_name of this LogGroup.


        :return: The log_group_name of this LogGroup.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this LogGroup.


        :param log_group_name: The log_group_name of this LogGroup.
        :type log_group_name: str
        """

        self._log_group_name = log_group_name

    @property
    def creation_time(self):
        """Gets the creation_time of this LogGroup.


        :return: The creation_time of this LogGroup.
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this LogGroup.


        :param creation_time: The creation_time of this LogGroup.
        :type creation_time: int
        """

        self._creation_time = creation_time

    @property
    def retention_in_days(self):
        """Gets the retention_in_days of this LogGroup.

        <p>The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.</p> <p>To set a log group so that its log events do not expire, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html\">DeleteRetentionPolicy</a>. </p>

        :return: The retention_in_days of this LogGroup.
        :rtype: int
        """
        return self._retention_in_days

    @retention_in_days.setter
    def retention_in_days(self, retention_in_days):
        """Sets the retention_in_days of this LogGroup.

        <p>The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.</p> <p>To set a log group so that its log events do not expire, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html\">DeleteRetentionPolicy</a>. </p>

        :param retention_in_days: The retention_in_days of this LogGroup.
        :type retention_in_days: int
        """

        self._retention_in_days = retention_in_days

    @property
    def metric_filter_count(self):
        """Gets the metric_filter_count of this LogGroup.


        :return: The metric_filter_count of this LogGroup.
        :rtype: int
        """
        return self._metric_filter_count

    @metric_filter_count.setter
    def metric_filter_count(self, metric_filter_count):
        """Sets the metric_filter_count of this LogGroup.


        :param metric_filter_count: The metric_filter_count of this LogGroup.
        :type metric_filter_count: int
        """

        self._metric_filter_count = metric_filter_count

    @property
    def arn(self):
        """Gets the arn of this LogGroup.


        :return: The arn of this LogGroup.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this LogGroup.


        :param arn: The arn of this LogGroup.
        :type arn: str
        """

        self._arn = arn

    @property
    def stored_bytes(self):
        """Gets the stored_bytes of this LogGroup.


        :return: The stored_bytes of this LogGroup.
        :rtype: int
        """
        return self._stored_bytes

    @stored_bytes.setter
    def stored_bytes(self, stored_bytes):
        """Sets the stored_bytes of this LogGroup.


        :param stored_bytes: The stored_bytes of this LogGroup.
        :type stored_bytes: int
        """

        self._stored_bytes = stored_bytes

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this LogGroup.


        :return: The kms_key_id of this LogGroup.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this LogGroup.


        :param kms_key_id: The kms_key_id of this LogGroup.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def data_protection_status(self):
        """Gets the data_protection_status of this LogGroup.


        :return: The data_protection_status of this LogGroup.
        :rtype: DataProtectionStatus
        """
        return self._data_protection_status

    @data_protection_status.setter
    def data_protection_status(self, data_protection_status):
        """Sets the data_protection_status of this LogGroup.


        :param data_protection_status: The data_protection_status of this LogGroup.
        :type data_protection_status: DataProtectionStatus
        """

        self._data_protection_status = data_protection_status

    @property
    def inherited_properties(self):
        """Gets the inherited_properties of this LogGroup.


        :return: The inherited_properties of this LogGroup.
        :rtype: List
        """
        return self._inherited_properties

    @inherited_properties.setter
    def inherited_properties(self, inherited_properties):
        """Sets the inherited_properties of this LogGroup.


        :param inherited_properties: The inherited_properties of this LogGroup.
        :type inherited_properties: List
        """

        self._inherited_properties = inherited_properties
