# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartQueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_name: str=None, log_group_names: List=None, log_group_identifiers: List=None, start_time: int=None, end_time: int=None, query_string: str=None, limit: int=None):
        """StartQueryRequest - a model defined in OpenAPI

        :param log_group_name: The log_group_name of this StartQueryRequest.
        :param log_group_names: The log_group_names of this StartQueryRequest.
        :param log_group_identifiers: The log_group_identifiers of this StartQueryRequest.
        :param start_time: The start_time of this StartQueryRequest.
        :param end_time: The end_time of this StartQueryRequest.
        :param query_string: The query_string of this StartQueryRequest.
        :param limit: The limit of this StartQueryRequest.
        """
        self.openapi_types = {
            'log_group_name': str,
            'log_group_names': List,
            'log_group_identifiers': List,
            'start_time': int,
            'end_time': int,
            'query_string': str,
            'limit': int
        }

        self.attribute_map = {
            'log_group_name': 'logGroupName',
            'log_group_names': 'logGroupNames',
            'log_group_identifiers': 'logGroupIdentifiers',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'query_string': 'queryString',
            'limit': 'limit'
        }

        self._log_group_name = log_group_name
        self._log_group_names = log_group_names
        self._log_group_identifiers = log_group_identifiers
        self._start_time = start_time
        self._end_time = end_time
        self._query_string = query_string
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartQueryRequest of this StartQueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_name(self):
        """Gets the log_group_name of this StartQueryRequest.


        :return: The log_group_name of this StartQueryRequest.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this StartQueryRequest.


        :param log_group_name: The log_group_name of this StartQueryRequest.
        :type log_group_name: str
        """

        self._log_group_name = log_group_name

    @property
    def log_group_names(self):
        """Gets the log_group_names of this StartQueryRequest.


        :return: The log_group_names of this StartQueryRequest.
        :rtype: List
        """
        return self._log_group_names

    @log_group_names.setter
    def log_group_names(self, log_group_names):
        """Sets the log_group_names of this StartQueryRequest.


        :param log_group_names: The log_group_names of this StartQueryRequest.
        :type log_group_names: List
        """

        self._log_group_names = log_group_names

    @property
    def log_group_identifiers(self):
        """Gets the log_group_identifiers of this StartQueryRequest.


        :return: The log_group_identifiers of this StartQueryRequest.
        :rtype: List
        """
        return self._log_group_identifiers

    @log_group_identifiers.setter
    def log_group_identifiers(self, log_group_identifiers):
        """Sets the log_group_identifiers of this StartQueryRequest.


        :param log_group_identifiers: The log_group_identifiers of this StartQueryRequest.
        :type log_group_identifiers: List
        """

        self._log_group_identifiers = log_group_identifiers

    @property
    def start_time(self):
        """Gets the start_time of this StartQueryRequest.


        :return: The start_time of this StartQueryRequest.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StartQueryRequest.


        :param start_time: The start_time of this StartQueryRequest.
        :type start_time: int
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this StartQueryRequest.


        :return: The end_time of this StartQueryRequest.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this StartQueryRequest.


        :param end_time: The end_time of this StartQueryRequest.
        :type end_time: int
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def query_string(self):
        """Gets the query_string of this StartQueryRequest.


        :return: The query_string of this StartQueryRequest.
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this StartQueryRequest.


        :param query_string: The query_string of this StartQueryRequest.
        :type query_string: str
        """
        if query_string is None:
            raise ValueError("Invalid value for `query_string`, must not be `None`")

        self._query_string = query_string

    @property
    def limit(self):
        """Gets the limit of this StartQueryRequest.


        :return: The limit of this StartQueryRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this StartQueryRequest.


        :param limit: The limit of this StartQueryRequest.
        :type limit: int
        """

        self._limit = limit
