# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputLogEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: int=None, message: str=None, ingestion_time: int=None):
        """OutputLogEvent - a model defined in OpenAPI

        :param timestamp: The timestamp of this OutputLogEvent.
        :param message: The message of this OutputLogEvent.
        :param ingestion_time: The ingestion_time of this OutputLogEvent.
        """
        self.openapi_types = {
            'timestamp': int,
            'message': str,
            'ingestion_time': int
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'message': 'message',
            'ingestion_time': 'ingestionTime'
        }

        self._timestamp = timestamp
        self._message = message
        self._ingestion_time = ingestion_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputLogEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputLogEvent of this OutputLogEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this OutputLogEvent.


        :return: The timestamp of this OutputLogEvent.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this OutputLogEvent.


        :param timestamp: The timestamp of this OutputLogEvent.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def message(self):
        """Gets the message of this OutputLogEvent.


        :return: The message of this OutputLogEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OutputLogEvent.


        :param message: The message of this OutputLogEvent.
        :type message: str
        """

        self._message = message

    @property
    def ingestion_time(self):
        """Gets the ingestion_time of this OutputLogEvent.


        :return: The ingestion_time of this OutputLogEvent.
        :rtype: int
        """
        return self._ingestion_time

    @ingestion_time.setter
    def ingestion_time(self, ingestion_time):
        """Sets the ingestion_time of this OutputLogEvent.


        :param ingestion_time: The ingestion_time of this OutputLogEvent.
        :type ingestion_time: int
        """

        self._ingestion_time = ingestion_time
