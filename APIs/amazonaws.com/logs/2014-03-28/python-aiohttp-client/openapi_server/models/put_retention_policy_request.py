# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutRetentionPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_name: str=None, retention_in_days: int=None):
        """PutRetentionPolicyRequest - a model defined in OpenAPI

        :param log_group_name: The log_group_name of this PutRetentionPolicyRequest.
        :param retention_in_days: The retention_in_days of this PutRetentionPolicyRequest.
        """
        self.openapi_types = {
            'log_group_name': str,
            'retention_in_days': int
        }

        self.attribute_map = {
            'log_group_name': 'logGroupName',
            'retention_in_days': 'retentionInDays'
        }

        self._log_group_name = log_group_name
        self._retention_in_days = retention_in_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRetentionPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRetentionPolicyRequest of this PutRetentionPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_name(self):
        """Gets the log_group_name of this PutRetentionPolicyRequest.


        :return: The log_group_name of this PutRetentionPolicyRequest.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this PutRetentionPolicyRequest.


        :param log_group_name: The log_group_name of this PutRetentionPolicyRequest.
        :type log_group_name: str
        """
        if log_group_name is None:
            raise ValueError("Invalid value for `log_group_name`, must not be `None`")

        self._log_group_name = log_group_name

    @property
    def retention_in_days(self):
        """Gets the retention_in_days of this PutRetentionPolicyRequest.

        <p>The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.</p> <p>To set a log group so that its log events do not expire, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html\">DeleteRetentionPolicy</a>. </p>

        :return: The retention_in_days of this PutRetentionPolicyRequest.
        :rtype: int
        """
        return self._retention_in_days

    @retention_in_days.setter
    def retention_in_days(self, retention_in_days):
        """Sets the retention_in_days of this PutRetentionPolicyRequest.

        <p>The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.</p> <p>To set a log group so that its log events do not expire, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html\">DeleteRetentionPolicy</a>. </p>

        :param retention_in_days: The retention_in_days of this PutRetentionPolicyRequest.
        :type retention_in_days: int
        """
        if retention_in_days is None:
            raise ValueError("Invalid value for `retention_in_days`, must not be `None`")

        self._retention_in_days = retention_in_days
