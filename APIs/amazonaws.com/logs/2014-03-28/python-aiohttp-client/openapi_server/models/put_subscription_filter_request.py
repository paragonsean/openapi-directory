# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distribution import Distribution
from openapi_server import util


class PutSubscriptionFilterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_name: str=None, filter_name: str=None, filter_pattern: str=None, destination_arn: str=None, role_arn: str=None, distribution: Distribution=None):
        """PutSubscriptionFilterRequest - a model defined in OpenAPI

        :param log_group_name: The log_group_name of this PutSubscriptionFilterRequest.
        :param filter_name: The filter_name of this PutSubscriptionFilterRequest.
        :param filter_pattern: The filter_pattern of this PutSubscriptionFilterRequest.
        :param destination_arn: The destination_arn of this PutSubscriptionFilterRequest.
        :param role_arn: The role_arn of this PutSubscriptionFilterRequest.
        :param distribution: The distribution of this PutSubscriptionFilterRequest.
        """
        self.openapi_types = {
            'log_group_name': str,
            'filter_name': str,
            'filter_pattern': str,
            'destination_arn': str,
            'role_arn': str,
            'distribution': Distribution
        }

        self.attribute_map = {
            'log_group_name': 'logGroupName',
            'filter_name': 'filterName',
            'filter_pattern': 'filterPattern',
            'destination_arn': 'destinationArn',
            'role_arn': 'roleArn',
            'distribution': 'distribution'
        }

        self._log_group_name = log_group_name
        self._filter_name = filter_name
        self._filter_pattern = filter_pattern
        self._destination_arn = destination_arn
        self._role_arn = role_arn
        self._distribution = distribution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutSubscriptionFilterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutSubscriptionFilterRequest of this PutSubscriptionFilterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_name(self):
        """Gets the log_group_name of this PutSubscriptionFilterRequest.


        :return: The log_group_name of this PutSubscriptionFilterRequest.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this PutSubscriptionFilterRequest.


        :param log_group_name: The log_group_name of this PutSubscriptionFilterRequest.
        :type log_group_name: str
        """
        if log_group_name is None:
            raise ValueError("Invalid value for `log_group_name`, must not be `None`")

        self._log_group_name = log_group_name

    @property
    def filter_name(self):
        """Gets the filter_name of this PutSubscriptionFilterRequest.


        :return: The filter_name of this PutSubscriptionFilterRequest.
        :rtype: str
        """
        return self._filter_name

    @filter_name.setter
    def filter_name(self, filter_name):
        """Sets the filter_name of this PutSubscriptionFilterRequest.


        :param filter_name: The filter_name of this PutSubscriptionFilterRequest.
        :type filter_name: str
        """
        if filter_name is None:
            raise ValueError("Invalid value for `filter_name`, must not be `None`")

        self._filter_name = filter_name

    @property
    def filter_pattern(self):
        """Gets the filter_pattern of this PutSubscriptionFilterRequest.


        :return: The filter_pattern of this PutSubscriptionFilterRequest.
        :rtype: str
        """
        return self._filter_pattern

    @filter_pattern.setter
    def filter_pattern(self, filter_pattern):
        """Sets the filter_pattern of this PutSubscriptionFilterRequest.


        :param filter_pattern: The filter_pattern of this PutSubscriptionFilterRequest.
        :type filter_pattern: str
        """
        if filter_pattern is None:
            raise ValueError("Invalid value for `filter_pattern`, must not be `None`")

        self._filter_pattern = filter_pattern

    @property
    def destination_arn(self):
        """Gets the destination_arn of this PutSubscriptionFilterRequest.


        :return: The destination_arn of this PutSubscriptionFilterRequest.
        :rtype: str
        """
        return self._destination_arn

    @destination_arn.setter
    def destination_arn(self, destination_arn):
        """Sets the destination_arn of this PutSubscriptionFilterRequest.


        :param destination_arn: The destination_arn of this PutSubscriptionFilterRequest.
        :type destination_arn: str
        """
        if destination_arn is None:
            raise ValueError("Invalid value for `destination_arn`, must not be `None`")

        self._destination_arn = destination_arn

    @property
    def role_arn(self):
        """Gets the role_arn of this PutSubscriptionFilterRequest.


        :return: The role_arn of this PutSubscriptionFilterRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this PutSubscriptionFilterRequest.


        :param role_arn: The role_arn of this PutSubscriptionFilterRequest.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def distribution(self):
        """Gets the distribution of this PutSubscriptionFilterRequest.


        :return: The distribution of this PutSubscriptionFilterRequest.
        :rtype: Distribution
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this PutSubscriptionFilterRequest.


        :param distribution: The distribution of this PutSubscriptionFilterRequest.
        :type distribution: Distribution
        """

        self._distribution = distribution
