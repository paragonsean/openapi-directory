# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeMetricFiltersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_name: str=None, filter_name_prefix: str=None, next_token: str=None, limit: int=None, metric_name: str=None, metric_namespace: str=None):
        """DescribeMetricFiltersRequest - a model defined in OpenAPI

        :param log_group_name: The log_group_name of this DescribeMetricFiltersRequest.
        :param filter_name_prefix: The filter_name_prefix of this DescribeMetricFiltersRequest.
        :param next_token: The next_token of this DescribeMetricFiltersRequest.
        :param limit: The limit of this DescribeMetricFiltersRequest.
        :param metric_name: The metric_name of this DescribeMetricFiltersRequest.
        :param metric_namespace: The metric_namespace of this DescribeMetricFiltersRequest.
        """
        self.openapi_types = {
            'log_group_name': str,
            'filter_name_prefix': str,
            'next_token': str,
            'limit': int,
            'metric_name': str,
            'metric_namespace': str
        }

        self.attribute_map = {
            'log_group_name': 'logGroupName',
            'filter_name_prefix': 'filterNamePrefix',
            'next_token': 'nextToken',
            'limit': 'limit',
            'metric_name': 'metricName',
            'metric_namespace': 'metricNamespace'
        }

        self._log_group_name = log_group_name
        self._filter_name_prefix = filter_name_prefix
        self._next_token = next_token
        self._limit = limit
        self._metric_name = metric_name
        self._metric_namespace = metric_namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeMetricFiltersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeMetricFiltersRequest of this DescribeMetricFiltersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_name(self):
        """Gets the log_group_name of this DescribeMetricFiltersRequest.


        :return: The log_group_name of this DescribeMetricFiltersRequest.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this DescribeMetricFiltersRequest.


        :param log_group_name: The log_group_name of this DescribeMetricFiltersRequest.
        :type log_group_name: str
        """

        self._log_group_name = log_group_name

    @property
    def filter_name_prefix(self):
        """Gets the filter_name_prefix of this DescribeMetricFiltersRequest.


        :return: The filter_name_prefix of this DescribeMetricFiltersRequest.
        :rtype: str
        """
        return self._filter_name_prefix

    @filter_name_prefix.setter
    def filter_name_prefix(self, filter_name_prefix):
        """Sets the filter_name_prefix of this DescribeMetricFiltersRequest.


        :param filter_name_prefix: The filter_name_prefix of this DescribeMetricFiltersRequest.
        :type filter_name_prefix: str
        """

        self._filter_name_prefix = filter_name_prefix

    @property
    def next_token(self):
        """Gets the next_token of this DescribeMetricFiltersRequest.


        :return: The next_token of this DescribeMetricFiltersRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeMetricFiltersRequest.


        :param next_token: The next_token of this DescribeMetricFiltersRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def limit(self):
        """Gets the limit of this DescribeMetricFiltersRequest.


        :return: The limit of this DescribeMetricFiltersRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DescribeMetricFiltersRequest.


        :param limit: The limit of this DescribeMetricFiltersRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def metric_name(self):
        """Gets the metric_name of this DescribeMetricFiltersRequest.


        :return: The metric_name of this DescribeMetricFiltersRequest.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this DescribeMetricFiltersRequest.


        :param metric_name: The metric_name of this DescribeMetricFiltersRequest.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def metric_namespace(self):
        """Gets the metric_namespace of this DescribeMetricFiltersRequest.


        :return: The metric_namespace of this DescribeMetricFiltersRequest.
        :rtype: str
        """
        return self._metric_namespace

    @metric_namespace.setter
    def metric_namespace(self, metric_namespace):
        """Sets the metric_namespace of this DescribeMetricFiltersRequest.


        :param metric_namespace: The metric_namespace of this DescribeMetricFiltersRequest.
        :type metric_namespace: str
        """

        self._metric_namespace = metric_namespace
