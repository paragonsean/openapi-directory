# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestMetricFilterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_pattern: str=None, log_event_messages: List=None):
        """TestMetricFilterRequest - a model defined in OpenAPI

        :param filter_pattern: The filter_pattern of this TestMetricFilterRequest.
        :param log_event_messages: The log_event_messages of this TestMetricFilterRequest.
        """
        self.openapi_types = {
            'filter_pattern': str,
            'log_event_messages': List
        }

        self.attribute_map = {
            'filter_pattern': 'filterPattern',
            'log_event_messages': 'logEventMessages'
        }

        self._filter_pattern = filter_pattern
        self._log_event_messages = log_event_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestMetricFilterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestMetricFilterRequest of this TestMetricFilterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_pattern(self):
        """Gets the filter_pattern of this TestMetricFilterRequest.

        A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.

        :return: The filter_pattern of this TestMetricFilterRequest.
        :rtype: str
        """
        return self._filter_pattern

    @filter_pattern.setter
    def filter_pattern(self, filter_pattern):
        """Sets the filter_pattern of this TestMetricFilterRequest.

        A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.

        :param filter_pattern: The filter_pattern of this TestMetricFilterRequest.
        :type filter_pattern: str
        """
        if filter_pattern is None:
            raise ValueError("Invalid value for `filter_pattern`, must not be `None`")
        if filter_pattern is not None and len(filter_pattern) > 1024:
            raise ValueError("Invalid value for `filter_pattern`, length must be less than or equal to `1024`")
        if filter_pattern is not None and len(filter_pattern) < 0:
            raise ValueError("Invalid value for `filter_pattern`, length must be greater than or equal to `0`")

        self._filter_pattern = filter_pattern

    @property
    def log_event_messages(self):
        """Gets the log_event_messages of this TestMetricFilterRequest.


        :return: The log_event_messages of this TestMetricFilterRequest.
        :rtype: List
        """
        return self._log_event_messages

    @log_event_messages.setter
    def log_event_messages(self, log_event_messages):
        """Sets the log_event_messages of this TestMetricFilterRequest.


        :param log_event_messages: The log_event_messages of this TestMetricFilterRequest.
        :type log_event_messages: List
        """
        if log_event_messages is None:
            raise ValueError("Invalid value for `log_event_messages`, must not be `None`")

        self._log_event_messages = log_event_messages
