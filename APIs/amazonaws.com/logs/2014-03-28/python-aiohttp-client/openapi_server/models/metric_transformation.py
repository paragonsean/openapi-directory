# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.standard_unit import StandardUnit
from openapi_server import util


class MetricTransformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, metric_namespace: str=None, metric_value: str=None, default_value: float=None, dimensions: Dict=None, unit: StandardUnit=None):
        """MetricTransformation - a model defined in OpenAPI

        :param metric_name: The metric_name of this MetricTransformation.
        :param metric_namespace: The metric_namespace of this MetricTransformation.
        :param metric_value: The metric_value of this MetricTransformation.
        :param default_value: The default_value of this MetricTransformation.
        :param dimensions: The dimensions of this MetricTransformation.
        :param unit: The unit of this MetricTransformation.
        """
        self.openapi_types = {
            'metric_name': str,
            'metric_namespace': str,
            'metric_value': str,
            'default_value': float,
            'dimensions': Dict,
            'unit': StandardUnit
        }

        self.attribute_map = {
            'metric_name': 'metricName',
            'metric_namespace': 'metricNamespace',
            'metric_value': 'metricValue',
            'default_value': 'defaultValue',
            'dimensions': 'dimensions',
            'unit': 'unit'
        }

        self._metric_name = metric_name
        self._metric_namespace = metric_namespace
        self._metric_value = metric_value
        self._default_value = default_value
        self._dimensions = dimensions
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricTransformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricTransformation of this MetricTransformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this MetricTransformation.


        :return: The metric_name of this MetricTransformation.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this MetricTransformation.


        :param metric_name: The metric_name of this MetricTransformation.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def metric_namespace(self):
        """Gets the metric_namespace of this MetricTransformation.


        :return: The metric_namespace of this MetricTransformation.
        :rtype: str
        """
        return self._metric_namespace

    @metric_namespace.setter
    def metric_namespace(self, metric_namespace):
        """Sets the metric_namespace of this MetricTransformation.


        :param metric_namespace: The metric_namespace of this MetricTransformation.
        :type metric_namespace: str
        """
        if metric_namespace is None:
            raise ValueError("Invalid value for `metric_namespace`, must not be `None`")

        self._metric_namespace = metric_namespace

    @property
    def metric_value(self):
        """Gets the metric_value of this MetricTransformation.


        :return: The metric_value of this MetricTransformation.
        :rtype: str
        """
        return self._metric_value

    @metric_value.setter
    def metric_value(self, metric_value):
        """Sets the metric_value of this MetricTransformation.


        :param metric_value: The metric_value of this MetricTransformation.
        :type metric_value: str
        """
        if metric_value is None:
            raise ValueError("Invalid value for `metric_value`, must not be `None`")

        self._metric_value = metric_value

    @property
    def default_value(self):
        """Gets the default_value of this MetricTransformation.


        :return: The default_value of this MetricTransformation.
        :rtype: float
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this MetricTransformation.


        :param default_value: The default_value of this MetricTransformation.
        :type default_value: float
        """

        self._default_value = default_value

    @property
    def dimensions(self):
        """Gets the dimensions of this MetricTransformation.


        :return: The dimensions of this MetricTransformation.
        :rtype: Dict
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MetricTransformation.


        :param dimensions: The dimensions of this MetricTransformation.
        :type dimensions: Dict
        """

        self._dimensions = dimensions

    @property
    def unit(self):
        """Gets the unit of this MetricTransformation.


        :return: The unit of this MetricTransformation.
        :rtype: StandardUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MetricTransformation.


        :param unit: The unit of this MetricTransformation.
        :type unit: StandardUnit
        """

        self._unit = unit
