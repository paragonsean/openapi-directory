# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_status import QueryStatus
from openapi_server import util


class DescribeQueriesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_name: str=None, status: QueryStatus=None, max_results: int=None, next_token: str=None):
        """DescribeQueriesRequest - a model defined in OpenAPI

        :param log_group_name: The log_group_name of this DescribeQueriesRequest.
        :param status: The status of this DescribeQueriesRequest.
        :param max_results: The max_results of this DescribeQueriesRequest.
        :param next_token: The next_token of this DescribeQueriesRequest.
        """
        self.openapi_types = {
            'log_group_name': str,
            'status': QueryStatus,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'log_group_name': 'logGroupName',
            'status': 'status',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._log_group_name = log_group_name
        self._status = status
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeQueriesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeQueriesRequest of this DescribeQueriesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_name(self):
        """Gets the log_group_name of this DescribeQueriesRequest.


        :return: The log_group_name of this DescribeQueriesRequest.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this DescribeQueriesRequest.


        :param log_group_name: The log_group_name of this DescribeQueriesRequest.
        :type log_group_name: str
        """

        self._log_group_name = log_group_name

    @property
    def status(self):
        """Gets the status of this DescribeQueriesRequest.


        :return: The status of this DescribeQueriesRequest.
        :rtype: QueryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeQueriesRequest.


        :param status: The status of this DescribeQueriesRequest.
        :type status: QueryStatus
        """

        self._status = status

    @property
    def max_results(self):
        """Gets the max_results of this DescribeQueriesRequest.


        :return: The max_results of this DescribeQueriesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeQueriesRequest.


        :param max_results: The max_results of this DescribeQueriesRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribeQueriesRequest.

        The token for the next set of items to return. The token expires after 24 hours.

        :return: The next_token of this DescribeQueriesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeQueriesRequest.

        The token for the next set of items to return. The token expires after 24 hours.

        :param next_token: The next_token of this DescribeQueriesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token
