# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutDestinationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_name: str=None, target_arn: str=None, role_arn: str=None, tags: Dict=None):
        """PutDestinationRequest - a model defined in OpenAPI

        :param destination_name: The destination_name of this PutDestinationRequest.
        :param target_arn: The target_arn of this PutDestinationRequest.
        :param role_arn: The role_arn of this PutDestinationRequest.
        :param tags: The tags of this PutDestinationRequest.
        """
        self.openapi_types = {
            'destination_name': str,
            'target_arn': str,
            'role_arn': str,
            'tags': Dict
        }

        self.attribute_map = {
            'destination_name': 'destinationName',
            'target_arn': 'targetArn',
            'role_arn': 'roleArn',
            'tags': 'tags'
        }

        self._destination_name = destination_name
        self._target_arn = target_arn
        self._role_arn = role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutDestinationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutDestinationRequest of this PutDestinationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_name(self):
        """Gets the destination_name of this PutDestinationRequest.


        :return: The destination_name of this PutDestinationRequest.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this PutDestinationRequest.


        :param destination_name: The destination_name of this PutDestinationRequest.
        :type destination_name: str
        """
        if destination_name is None:
            raise ValueError("Invalid value for `destination_name`, must not be `None`")

        self._destination_name = destination_name

    @property
    def target_arn(self):
        """Gets the target_arn of this PutDestinationRequest.


        :return: The target_arn of this PutDestinationRequest.
        :rtype: str
        """
        return self._target_arn

    @target_arn.setter
    def target_arn(self, target_arn):
        """Sets the target_arn of this PutDestinationRequest.


        :param target_arn: The target_arn of this PutDestinationRequest.
        :type target_arn: str
        """
        if target_arn is None:
            raise ValueError("Invalid value for `target_arn`, must not be `None`")

        self._target_arn = target_arn

    @property
    def role_arn(self):
        """Gets the role_arn of this PutDestinationRequest.


        :return: The role_arn of this PutDestinationRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this PutDestinationRequest.


        :param role_arn: The role_arn of this PutDestinationRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this PutDestinationRequest.


        :return: The tags of this PutDestinationRequest.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutDestinationRequest.


        :param tags: The tags of this PutDestinationRequest.
        :type tags: Dict
        """

        self._tags = tags
