# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetLogEventsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_group_name: str=None, log_group_identifier: str=None, log_stream_name: str=None, start_time: int=None, end_time: int=None, next_token: str=None, limit: int=None, start_from_head: bool=None, unmask: bool=None):
        """GetLogEventsRequest - a model defined in OpenAPI

        :param log_group_name: The log_group_name of this GetLogEventsRequest.
        :param log_group_identifier: The log_group_identifier of this GetLogEventsRequest.
        :param log_stream_name: The log_stream_name of this GetLogEventsRequest.
        :param start_time: The start_time of this GetLogEventsRequest.
        :param end_time: The end_time of this GetLogEventsRequest.
        :param next_token: The next_token of this GetLogEventsRequest.
        :param limit: The limit of this GetLogEventsRequest.
        :param start_from_head: The start_from_head of this GetLogEventsRequest.
        :param unmask: The unmask of this GetLogEventsRequest.
        """
        self.openapi_types = {
            'log_group_name': str,
            'log_group_identifier': str,
            'log_stream_name': str,
            'start_time': int,
            'end_time': int,
            'next_token': str,
            'limit': int,
            'start_from_head': bool,
            'unmask': bool
        }

        self.attribute_map = {
            'log_group_name': 'logGroupName',
            'log_group_identifier': 'logGroupIdentifier',
            'log_stream_name': 'logStreamName',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'next_token': 'nextToken',
            'limit': 'limit',
            'start_from_head': 'startFromHead',
            'unmask': 'unmask'
        }

        self._log_group_name = log_group_name
        self._log_group_identifier = log_group_identifier
        self._log_stream_name = log_stream_name
        self._start_time = start_time
        self._end_time = end_time
        self._next_token = next_token
        self._limit = limit
        self._start_from_head = start_from_head
        self._unmask = unmask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLogEventsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetLogEventsRequest of this GetLogEventsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_group_name(self):
        """Gets the log_group_name of this GetLogEventsRequest.


        :return: The log_group_name of this GetLogEventsRequest.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this GetLogEventsRequest.


        :param log_group_name: The log_group_name of this GetLogEventsRequest.
        :type log_group_name: str
        """

        self._log_group_name = log_group_name

    @property
    def log_group_identifier(self):
        """Gets the log_group_identifier of this GetLogEventsRequest.


        :return: The log_group_identifier of this GetLogEventsRequest.
        :rtype: str
        """
        return self._log_group_identifier

    @log_group_identifier.setter
    def log_group_identifier(self, log_group_identifier):
        """Sets the log_group_identifier of this GetLogEventsRequest.


        :param log_group_identifier: The log_group_identifier of this GetLogEventsRequest.
        :type log_group_identifier: str
        """

        self._log_group_identifier = log_group_identifier

    @property
    def log_stream_name(self):
        """Gets the log_stream_name of this GetLogEventsRequest.


        :return: The log_stream_name of this GetLogEventsRequest.
        :rtype: str
        """
        return self._log_stream_name

    @log_stream_name.setter
    def log_stream_name(self, log_stream_name):
        """Sets the log_stream_name of this GetLogEventsRequest.


        :param log_stream_name: The log_stream_name of this GetLogEventsRequest.
        :type log_stream_name: str
        """
        if log_stream_name is None:
            raise ValueError("Invalid value for `log_stream_name`, must not be `None`")

        self._log_stream_name = log_stream_name

    @property
    def start_time(self):
        """Gets the start_time of this GetLogEventsRequest.


        :return: The start_time of this GetLogEventsRequest.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetLogEventsRequest.


        :param start_time: The start_time of this GetLogEventsRequest.
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetLogEventsRequest.


        :return: The end_time of this GetLogEventsRequest.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetLogEventsRequest.


        :param end_time: The end_time of this GetLogEventsRequest.
        :type end_time: int
        """

        self._end_time = end_time

    @property
    def next_token(self):
        """Gets the next_token of this GetLogEventsRequest.


        :return: The next_token of this GetLogEventsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetLogEventsRequest.


        :param next_token: The next_token of this GetLogEventsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def limit(self):
        """Gets the limit of this GetLogEventsRequest.


        :return: The limit of this GetLogEventsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetLogEventsRequest.


        :param limit: The limit of this GetLogEventsRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def start_from_head(self):
        """Gets the start_from_head of this GetLogEventsRequest.


        :return: The start_from_head of this GetLogEventsRequest.
        :rtype: bool
        """
        return self._start_from_head

    @start_from_head.setter
    def start_from_head(self, start_from_head):
        """Sets the start_from_head of this GetLogEventsRequest.


        :param start_from_head: The start_from_head of this GetLogEventsRequest.
        :type start_from_head: bool
        """

        self._start_from_head = start_from_head

    @property
    def unmask(self):
        """Gets the unmask of this GetLogEventsRequest.


        :return: The unmask of this GetLogEventsRequest.
        :rtype: bool
        """
        return self._unmask

    @unmask.setter
    def unmask(self, unmask):
        """Sets the unmask of this GetLogEventsRequest.


        :param unmask: The unmask of this GetLogEventsRequest.
        :type unmask: bool
        """

        self._unmask = unmask
