# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_name: str=None, filter_pattern: str=None, metric_transformations: List=None, creation_time: int=None, log_group_name: str=None):
        """MetricFilter - a model defined in OpenAPI

        :param filter_name: The filter_name of this MetricFilter.
        :param filter_pattern: The filter_pattern of this MetricFilter.
        :param metric_transformations: The metric_transformations of this MetricFilter.
        :param creation_time: The creation_time of this MetricFilter.
        :param log_group_name: The log_group_name of this MetricFilter.
        """
        self.openapi_types = {
            'filter_name': str,
            'filter_pattern': str,
            'metric_transformations': List,
            'creation_time': int,
            'log_group_name': str
        }

        self.attribute_map = {
            'filter_name': 'filterName',
            'filter_pattern': 'filterPattern',
            'metric_transformations': 'metricTransformations',
            'creation_time': 'creationTime',
            'log_group_name': 'logGroupName'
        }

        self._filter_name = filter_name
        self._filter_pattern = filter_pattern
        self._metric_transformations = metric_transformations
        self._creation_time = creation_time
        self._log_group_name = log_group_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricFilter of this MetricFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_name(self):
        """Gets the filter_name of this MetricFilter.


        :return: The filter_name of this MetricFilter.
        :rtype: str
        """
        return self._filter_name

    @filter_name.setter
    def filter_name(self, filter_name):
        """Sets the filter_name of this MetricFilter.


        :param filter_name: The filter_name of this MetricFilter.
        :type filter_name: str
        """

        self._filter_name = filter_name

    @property
    def filter_pattern(self):
        """Gets the filter_pattern of this MetricFilter.

        A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.

        :return: The filter_pattern of this MetricFilter.
        :rtype: str
        """
        return self._filter_pattern

    @filter_pattern.setter
    def filter_pattern(self, filter_pattern):
        """Sets the filter_pattern of this MetricFilter.

        A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.

        :param filter_pattern: The filter_pattern of this MetricFilter.
        :type filter_pattern: str
        """
        if filter_pattern is not None and len(filter_pattern) > 1024:
            raise ValueError("Invalid value for `filter_pattern`, length must be less than or equal to `1024`")
        if filter_pattern is not None and len(filter_pattern) < 0:
            raise ValueError("Invalid value for `filter_pattern`, length must be greater than or equal to `0`")

        self._filter_pattern = filter_pattern

    @property
    def metric_transformations(self):
        """Gets the metric_transformations of this MetricFilter.


        :return: The metric_transformations of this MetricFilter.
        :rtype: List
        """
        return self._metric_transformations

    @metric_transformations.setter
    def metric_transformations(self, metric_transformations):
        """Sets the metric_transformations of this MetricFilter.


        :param metric_transformations: The metric_transformations of this MetricFilter.
        :type metric_transformations: List
        """

        self._metric_transformations = metric_transformations

    @property
    def creation_time(self):
        """Gets the creation_time of this MetricFilter.


        :return: The creation_time of this MetricFilter.
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this MetricFilter.


        :param creation_time: The creation_time of this MetricFilter.
        :type creation_time: int
        """

        self._creation_time = creation_time

    @property
    def log_group_name(self):
        """Gets the log_group_name of this MetricFilter.


        :return: The log_group_name of this MetricFilter.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this MetricFilter.


        :param log_group_name: The log_group_name of this MetricFilter.
        :type log_group_name: str
        """

        self._log_group_name = log_group_name
