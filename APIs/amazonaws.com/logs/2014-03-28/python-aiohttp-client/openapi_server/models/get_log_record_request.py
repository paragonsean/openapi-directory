# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetLogRecordRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_record_pointer: str=None, unmask: bool=None):
        """GetLogRecordRequest - a model defined in OpenAPI

        :param log_record_pointer: The log_record_pointer of this GetLogRecordRequest.
        :param unmask: The unmask of this GetLogRecordRequest.
        """
        self.openapi_types = {
            'log_record_pointer': str,
            'unmask': bool
        }

        self.attribute_map = {
            'log_record_pointer': 'logRecordPointer',
            'unmask': 'unmask'
        }

        self._log_record_pointer = log_record_pointer
        self._unmask = unmask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLogRecordRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetLogRecordRequest of this GetLogRecordRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_record_pointer(self):
        """Gets the log_record_pointer of this GetLogRecordRequest.


        :return: The log_record_pointer of this GetLogRecordRequest.
        :rtype: str
        """
        return self._log_record_pointer

    @log_record_pointer.setter
    def log_record_pointer(self, log_record_pointer):
        """Sets the log_record_pointer of this GetLogRecordRequest.


        :param log_record_pointer: The log_record_pointer of this GetLogRecordRequest.
        :type log_record_pointer: str
        """
        if log_record_pointer is None:
            raise ValueError("Invalid value for `log_record_pointer`, must not be `None`")

        self._log_record_pointer = log_record_pointer

    @property
    def unmask(self):
        """Gets the unmask of this GetLogRecordRequest.


        :return: The unmask of this GetLogRecordRequest.
        :rtype: bool
        """
        return self._unmask

    @unmask.setter
    def unmask(self, unmask):
        """Sets the unmask of this GetLogRecordRequest.


        :param unmask: The unmask of this GetLogRecordRequest.
        :type unmask: bool
        """

        self._unmask = unmask
