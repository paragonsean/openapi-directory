/*
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataProtectionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a log group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:38.242841-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogGroup {
  public static final String SERIALIZED_NAME_LOG_GROUP_NAME = "logGroupName";
  @SerializedName(SERIALIZED_NAME_LOG_GROUP_NAME)
  private String logGroupName;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private Integer creationTime;

  public static final String SERIALIZED_NAME_RETENTION_IN_DAYS = "retentionInDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_IN_DAYS)
  private Integer retentionInDays;

  public static final String SERIALIZED_NAME_METRIC_FILTER_COUNT = "metricFilterCount";
  @SerializedName(SERIALIZED_NAME_METRIC_FILTER_COUNT)
  private Integer metricFilterCount;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_STORED_BYTES = "storedBytes";
  @SerializedName(SERIALIZED_NAME_STORED_BYTES)
  private Integer storedBytes;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "kmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_DATA_PROTECTION_STATUS = "dataProtectionStatus";
  @SerializedName(SERIALIZED_NAME_DATA_PROTECTION_STATUS)
  private DataProtectionStatus dataProtectionStatus;

  public static final String SERIALIZED_NAME_INHERITED_PROPERTIES = "inheritedProperties";
  @SerializedName(SERIALIZED_NAME_INHERITED_PROPERTIES)
  private List inheritedProperties;

  public LogGroup() {
  }

  public LogGroup logGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
    return this;
  }

  /**
   * Get logGroupName
   * @return logGroupName
   */
  @javax.annotation.Nullable
  public String getLogGroupName() {
    return logGroupName;
  }

  public void setLogGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
  }


  public LogGroup creationTime(Integer creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public Integer getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(Integer creationTime) {
    this.creationTime = creationTime;
  }


  public LogGroup retentionInDays(Integer retentionInDays) {
    this.retentionInDays = retentionInDays;
    return this;
  }

  /**
   * &lt;p&gt;The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.&lt;/p&gt; &lt;p&gt;To set a log group so that its log events do not expire, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html\&quot;&gt;DeleteRetentionPolicy&lt;/a&gt;. &lt;/p&gt;
   * @return retentionInDays
   */
  @javax.annotation.Nullable
  public Integer getRetentionInDays() {
    return retentionInDays;
  }

  public void setRetentionInDays(Integer retentionInDays) {
    this.retentionInDays = retentionInDays;
  }


  public LogGroup metricFilterCount(Integer metricFilterCount) {
    this.metricFilterCount = metricFilterCount;
    return this;
  }

  /**
   * Get metricFilterCount
   * @return metricFilterCount
   */
  @javax.annotation.Nullable
  public Integer getMetricFilterCount() {
    return metricFilterCount;
  }

  public void setMetricFilterCount(Integer metricFilterCount) {
    this.metricFilterCount = metricFilterCount;
  }


  public LogGroup arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public LogGroup storedBytes(Integer storedBytes) {
    this.storedBytes = storedBytes;
    return this;
  }

  /**
   * Get storedBytes
   * @return storedBytes
   */
  @javax.annotation.Nullable
  public Integer getStoredBytes() {
    return storedBytes;
  }

  public void setStoredBytes(Integer storedBytes) {
    this.storedBytes = storedBytes;
  }


  public LogGroup kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public LogGroup dataProtectionStatus(DataProtectionStatus dataProtectionStatus) {
    this.dataProtectionStatus = dataProtectionStatus;
    return this;
  }

  /**
   * Get dataProtectionStatus
   * @return dataProtectionStatus
   */
  @javax.annotation.Nullable
  public DataProtectionStatus getDataProtectionStatus() {
    return dataProtectionStatus;
  }

  public void setDataProtectionStatus(DataProtectionStatus dataProtectionStatus) {
    this.dataProtectionStatus = dataProtectionStatus;
  }


  public LogGroup inheritedProperties(List inheritedProperties) {
    this.inheritedProperties = inheritedProperties;
    return this;
  }

  /**
   * Get inheritedProperties
   * @return inheritedProperties
   */
  @javax.annotation.Nullable
  public List getInheritedProperties() {
    return inheritedProperties;
  }

  public void setInheritedProperties(List inheritedProperties) {
    this.inheritedProperties = inheritedProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogGroup logGroup = (LogGroup) o;
    return Objects.equals(this.logGroupName, logGroup.logGroupName) &&
        Objects.equals(this.creationTime, logGroup.creationTime) &&
        Objects.equals(this.retentionInDays, logGroup.retentionInDays) &&
        Objects.equals(this.metricFilterCount, logGroup.metricFilterCount) &&
        Objects.equals(this.arn, logGroup.arn) &&
        Objects.equals(this.storedBytes, logGroup.storedBytes) &&
        Objects.equals(this.kmsKeyId, logGroup.kmsKeyId) &&
        Objects.equals(this.dataProtectionStatus, logGroup.dataProtectionStatus) &&
        Objects.equals(this.inheritedProperties, logGroup.inheritedProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logGroupName, creationTime, retentionInDays, metricFilterCount, arn, storedBytes, kmsKeyId, dataProtectionStatus, inheritedProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogGroup {\n");
    sb.append("    logGroupName: ").append(toIndentedString(logGroupName)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    retentionInDays: ").append(toIndentedString(retentionInDays)).append("\n");
    sb.append("    metricFilterCount: ").append(toIndentedString(metricFilterCount)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    storedBytes: ").append(toIndentedString(storedBytes)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    dataProtectionStatus: ").append(toIndentedString(dataProtectionStatus)).append("\n");
    sb.append("    inheritedProperties: ").append(toIndentedString(inheritedProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logGroupName");
    openapiFields.add("creationTime");
    openapiFields.add("retentionInDays");
    openapiFields.add("metricFilterCount");
    openapiFields.add("arn");
    openapiFields.add("storedBytes");
    openapiFields.add("kmsKeyId");
    openapiFields.add("dataProtectionStatus");
    openapiFields.add("inheritedProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogGroup is not found in the empty JSON string", LogGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `logGroupName`
      if (jsonObj.get("logGroupName") != null && !jsonObj.get("logGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logGroupName"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `metricFilterCount`
      if (jsonObj.get("metricFilterCount") != null && !jsonObj.get("metricFilterCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("metricFilterCount"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `storedBytes`
      if (jsonObj.get("storedBytes") != null && !jsonObj.get("storedBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("storedBytes"));
      }
      // validate the optional field `kmsKeyId`
      if (jsonObj.get("kmsKeyId") != null && !jsonObj.get("kmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("kmsKeyId"));
      }
      // validate the optional field `dataProtectionStatus`
      if (jsonObj.get("dataProtectionStatus") != null && !jsonObj.get("dataProtectionStatus").isJsonNull()) {
        DataProtectionStatus.validateJsonElement(jsonObj.get("dataProtectionStatus"));
      }
      // validate the optional field `inheritedProperties`
      if (jsonObj.get("inheritedProperties") != null && !jsonObj.get("inheritedProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("inheritedProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<LogGroup>() {
           @Override
           public void write(JsonWriter out, LogGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogGroup
   * @throws IOException if the JSON string is invalid with respect to LogGroup
   */
  public static LogGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogGroup.class);
  }

  /**
   * Convert an instance of LogGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

