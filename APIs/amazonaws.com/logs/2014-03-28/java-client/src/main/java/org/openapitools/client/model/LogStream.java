/*
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a log stream, which is a sequence of log events from a single emitter of logs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:38.242841-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogStream {
  public static final String SERIALIZED_NAME_LOG_STREAM_NAME = "logStreamName";
  @SerializedName(SERIALIZED_NAME_LOG_STREAM_NAME)
  private String logStreamName;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private Integer creationTime;

  public static final String SERIALIZED_NAME_FIRST_EVENT_TIMESTAMP = "firstEventTimestamp";
  @SerializedName(SERIALIZED_NAME_FIRST_EVENT_TIMESTAMP)
  private Integer firstEventTimestamp;

  public static final String SERIALIZED_NAME_LAST_EVENT_TIMESTAMP = "lastEventTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_EVENT_TIMESTAMP)
  private Integer lastEventTimestamp;

  public static final String SERIALIZED_NAME_LAST_INGESTION_TIME = "lastIngestionTime";
  @SerializedName(SERIALIZED_NAME_LAST_INGESTION_TIME)
  private Integer lastIngestionTime;

  public static final String SERIALIZED_NAME_UPLOAD_SEQUENCE_TOKEN = "uploadSequenceToken";
  @SerializedName(SERIALIZED_NAME_UPLOAD_SEQUENCE_TOKEN)
  private String uploadSequenceToken;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_STORED_BYTES = "storedBytes";
  @SerializedName(SERIALIZED_NAME_STORED_BYTES)
  private Integer storedBytes;

  public LogStream() {
  }

  public LogStream logStreamName(String logStreamName) {
    this.logStreamName = logStreamName;
    return this;
  }

  /**
   * Get logStreamName
   * @return logStreamName
   */
  @javax.annotation.Nullable
  public String getLogStreamName() {
    return logStreamName;
  }

  public void setLogStreamName(String logStreamName) {
    this.logStreamName = logStreamName;
  }


  public LogStream creationTime(Integer creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public Integer getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(Integer creationTime) {
    this.creationTime = creationTime;
  }


  public LogStream firstEventTimestamp(Integer firstEventTimestamp) {
    this.firstEventTimestamp = firstEventTimestamp;
    return this;
  }

  /**
   * Get firstEventTimestamp
   * @return firstEventTimestamp
   */
  @javax.annotation.Nullable
  public Integer getFirstEventTimestamp() {
    return firstEventTimestamp;
  }

  public void setFirstEventTimestamp(Integer firstEventTimestamp) {
    this.firstEventTimestamp = firstEventTimestamp;
  }


  public LogStream lastEventTimestamp(Integer lastEventTimestamp) {
    this.lastEventTimestamp = lastEventTimestamp;
    return this;
  }

  /**
   * Get lastEventTimestamp
   * @return lastEventTimestamp
   */
  @javax.annotation.Nullable
  public Integer getLastEventTimestamp() {
    return lastEventTimestamp;
  }

  public void setLastEventTimestamp(Integer lastEventTimestamp) {
    this.lastEventTimestamp = lastEventTimestamp;
  }


  public LogStream lastIngestionTime(Integer lastIngestionTime) {
    this.lastIngestionTime = lastIngestionTime;
    return this;
  }

  /**
   * Get lastIngestionTime
   * @return lastIngestionTime
   */
  @javax.annotation.Nullable
  public Integer getLastIngestionTime() {
    return lastIngestionTime;
  }

  public void setLastIngestionTime(Integer lastIngestionTime) {
    this.lastIngestionTime = lastIngestionTime;
  }


  public LogStream uploadSequenceToken(String uploadSequenceToken) {
    this.uploadSequenceToken = uploadSequenceToken;
    return this;
  }

  /**
   * Get uploadSequenceToken
   * @return uploadSequenceToken
   */
  @javax.annotation.Nullable
  public String getUploadSequenceToken() {
    return uploadSequenceToken;
  }

  public void setUploadSequenceToken(String uploadSequenceToken) {
    this.uploadSequenceToken = uploadSequenceToken;
  }


  public LogStream arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public LogStream storedBytes(Integer storedBytes) {
    this.storedBytes = storedBytes;
    return this;
  }

  /**
   * Get storedBytes
   * @return storedBytes
   */
  @javax.annotation.Nullable
  public Integer getStoredBytes() {
    return storedBytes;
  }

  public void setStoredBytes(Integer storedBytes) {
    this.storedBytes = storedBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogStream logStream = (LogStream) o;
    return Objects.equals(this.logStreamName, logStream.logStreamName) &&
        Objects.equals(this.creationTime, logStream.creationTime) &&
        Objects.equals(this.firstEventTimestamp, logStream.firstEventTimestamp) &&
        Objects.equals(this.lastEventTimestamp, logStream.lastEventTimestamp) &&
        Objects.equals(this.lastIngestionTime, logStream.lastIngestionTime) &&
        Objects.equals(this.uploadSequenceToken, logStream.uploadSequenceToken) &&
        Objects.equals(this.arn, logStream.arn) &&
        Objects.equals(this.storedBytes, logStream.storedBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logStreamName, creationTime, firstEventTimestamp, lastEventTimestamp, lastIngestionTime, uploadSequenceToken, arn, storedBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogStream {\n");
    sb.append("    logStreamName: ").append(toIndentedString(logStreamName)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    firstEventTimestamp: ").append(toIndentedString(firstEventTimestamp)).append("\n");
    sb.append("    lastEventTimestamp: ").append(toIndentedString(lastEventTimestamp)).append("\n");
    sb.append("    lastIngestionTime: ").append(toIndentedString(lastIngestionTime)).append("\n");
    sb.append("    uploadSequenceToken: ").append(toIndentedString(uploadSequenceToken)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    storedBytes: ").append(toIndentedString(storedBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logStreamName");
    openapiFields.add("creationTime");
    openapiFields.add("firstEventTimestamp");
    openapiFields.add("lastEventTimestamp");
    openapiFields.add("lastIngestionTime");
    openapiFields.add("uploadSequenceToken");
    openapiFields.add("arn");
    openapiFields.add("storedBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogStream is not found in the empty JSON string", LogStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `logStreamName`
      if (jsonObj.get("logStreamName") != null && !jsonObj.get("logStreamName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logStreamName"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `firstEventTimestamp`
      if (jsonObj.get("firstEventTimestamp") != null && !jsonObj.get("firstEventTimestamp").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("firstEventTimestamp"));
      }
      // validate the optional field `lastEventTimestamp`
      if (jsonObj.get("lastEventTimestamp") != null && !jsonObj.get("lastEventTimestamp").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("lastEventTimestamp"));
      }
      // validate the optional field `lastIngestionTime`
      if (jsonObj.get("lastIngestionTime") != null && !jsonObj.get("lastIngestionTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("lastIngestionTime"));
      }
      // validate the optional field `uploadSequenceToken`
      if (jsonObj.get("uploadSequenceToken") != null && !jsonObj.get("uploadSequenceToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("uploadSequenceToken"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `storedBytes`
      if (jsonObj.get("storedBytes") != null && !jsonObj.get("storedBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("storedBytes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogStream.class));

       return (TypeAdapter<T>) new TypeAdapter<LogStream>() {
           @Override
           public void write(JsonWriter out, LogStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogStream
   * @throws IOException if the JSON string is invalid with respect to LogStream
   */
  public static LogStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogStream.class);
  }

  /**
   * Convert an instance of LogStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

