/*
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeLogStreamsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:38.242841-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeLogStreamsRequest {
  public static final String SERIALIZED_NAME_LOG_GROUP_NAME = "logGroupName";
  @SerializedName(SERIALIZED_NAME_LOG_GROUP_NAME)
  private String logGroupName;

  public static final String SERIALIZED_NAME_LOG_GROUP_IDENTIFIER = "logGroupIdentifier";
  @SerializedName(SERIALIZED_NAME_LOG_GROUP_IDENTIFIER)
  private String logGroupIdentifier;

  public static final String SERIALIZED_NAME_LOG_STREAM_NAME_PREFIX = "logStreamNamePrefix";
  @SerializedName(SERIALIZED_NAME_LOG_STREAM_NAME_PREFIX)
  private String logStreamNamePrefix;

  public static final String SERIALIZED_NAME_ORDER_BY = "orderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private OrderBy orderBy;

  public static final String SERIALIZED_NAME_DESCENDING = "descending";
  @SerializedName(SERIALIZED_NAME_DESCENDING)
  private Boolean descending;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public DescribeLogStreamsRequest() {
  }

  public DescribeLogStreamsRequest logGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
    return this;
  }

  /**
   * Get logGroupName
   * @return logGroupName
   */
  @javax.annotation.Nullable
  public String getLogGroupName() {
    return logGroupName;
  }

  public void setLogGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
  }


  public DescribeLogStreamsRequest logGroupIdentifier(String logGroupIdentifier) {
    this.logGroupIdentifier = logGroupIdentifier;
    return this;
  }

  /**
   * Get logGroupIdentifier
   * @return logGroupIdentifier
   */
  @javax.annotation.Nullable
  public String getLogGroupIdentifier() {
    return logGroupIdentifier;
  }

  public void setLogGroupIdentifier(String logGroupIdentifier) {
    this.logGroupIdentifier = logGroupIdentifier;
  }


  public DescribeLogStreamsRequest logStreamNamePrefix(String logStreamNamePrefix) {
    this.logStreamNamePrefix = logStreamNamePrefix;
    return this;
  }

  /**
   * Get logStreamNamePrefix
   * @return logStreamNamePrefix
   */
  @javax.annotation.Nullable
  public String getLogStreamNamePrefix() {
    return logStreamNamePrefix;
  }

  public void setLogStreamNamePrefix(String logStreamNamePrefix) {
    this.logStreamNamePrefix = logStreamNamePrefix;
  }


  public DescribeLogStreamsRequest orderBy(OrderBy orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * Get orderBy
   * @return orderBy
   */
  @javax.annotation.Nullable
  public OrderBy getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(OrderBy orderBy) {
    this.orderBy = orderBy;
  }


  public DescribeLogStreamsRequest descending(Boolean descending) {
    this.descending = descending;
    return this;
  }

  /**
   * Get descending
   * @return descending
   */
  @javax.annotation.Nullable
  public Boolean getDescending() {
    return descending;
  }

  public void setDescending(Boolean descending) {
    this.descending = descending;
  }


  public DescribeLogStreamsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public DescribeLogStreamsRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeLogStreamsRequest describeLogStreamsRequest = (DescribeLogStreamsRequest) o;
    return Objects.equals(this.logGroupName, describeLogStreamsRequest.logGroupName) &&
        Objects.equals(this.logGroupIdentifier, describeLogStreamsRequest.logGroupIdentifier) &&
        Objects.equals(this.logStreamNamePrefix, describeLogStreamsRequest.logStreamNamePrefix) &&
        Objects.equals(this.orderBy, describeLogStreamsRequest.orderBy) &&
        Objects.equals(this.descending, describeLogStreamsRequest.descending) &&
        Objects.equals(this.nextToken, describeLogStreamsRequest.nextToken) &&
        Objects.equals(this.limit, describeLogStreamsRequest.limit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logGroupName, logGroupIdentifier, logStreamNamePrefix, orderBy, descending, nextToken, limit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeLogStreamsRequest {\n");
    sb.append("    logGroupName: ").append(toIndentedString(logGroupName)).append("\n");
    sb.append("    logGroupIdentifier: ").append(toIndentedString(logGroupIdentifier)).append("\n");
    sb.append("    logStreamNamePrefix: ").append(toIndentedString(logStreamNamePrefix)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    descending: ").append(toIndentedString(descending)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logGroupName");
    openapiFields.add("logGroupIdentifier");
    openapiFields.add("logStreamNamePrefix");
    openapiFields.add("orderBy");
    openapiFields.add("descending");
    openapiFields.add("nextToken");
    openapiFields.add("limit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeLogStreamsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeLogStreamsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeLogStreamsRequest is not found in the empty JSON string", DescribeLogStreamsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeLogStreamsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeLogStreamsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `logGroupName`
      if (jsonObj.get("logGroupName") != null && !jsonObj.get("logGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logGroupName"));
      }
      // validate the optional field `logGroupIdentifier`
      if (jsonObj.get("logGroupIdentifier") != null && !jsonObj.get("logGroupIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logGroupIdentifier"));
      }
      // validate the optional field `logStreamNamePrefix`
      if (jsonObj.get("logStreamNamePrefix") != null && !jsonObj.get("logStreamNamePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logStreamNamePrefix"));
      }
      // validate the optional field `orderBy`
      if (jsonObj.get("orderBy") != null && !jsonObj.get("orderBy").isJsonNull()) {
        OrderBy.validateJsonElement(jsonObj.get("orderBy"));
      }
      // validate the optional field `descending`
      if (jsonObj.get("descending") != null && !jsonObj.get("descending").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("descending"));
      }
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
      // validate the optional field `limit`
      if (jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("limit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeLogStreamsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeLogStreamsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeLogStreamsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeLogStreamsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeLogStreamsRequest>() {
           @Override
           public void write(JsonWriter out, DescribeLogStreamsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeLogStreamsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeLogStreamsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeLogStreamsRequest
   * @throws IOException if the JSON string is invalid with respect to DescribeLogStreamsRequest
   */
  public static DescribeLogStreamsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeLogStreamsRequest.class);
  }

  /**
   * Convert an instance of DescribeLogStreamsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

