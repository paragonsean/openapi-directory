/*
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateExportTaskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:38.242841-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateExportTaskRequest {
  public static final String SERIALIZED_NAME_TASK_NAME = "taskName";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  private String taskName;

  public static final String SERIALIZED_NAME_LOG_GROUP_NAME = "logGroupName";
  @SerializedName(SERIALIZED_NAME_LOG_GROUP_NAME)
  private String logGroupName;

  public static final String SERIALIZED_NAME_LOG_STREAM_NAME_PREFIX = "logStreamNamePrefix";
  @SerializedName(SERIALIZED_NAME_LOG_STREAM_NAME_PREFIX)
  private String logStreamNamePrefix;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private Integer from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private Integer to;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_DESTINATION_PREFIX = "destinationPrefix";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PREFIX)
  private String destinationPrefix;

  public CreateExportTaskRequest() {
  }

  public CreateExportTaskRequest taskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

  /**
   * Get taskName
   * @return taskName
   */
  @javax.annotation.Nullable
  public String getTaskName() {
    return taskName;
  }

  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }


  public CreateExportTaskRequest logGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
    return this;
  }

  /**
   * Get logGroupName
   * @return logGroupName
   */
  @javax.annotation.Nonnull
  public String getLogGroupName() {
    return logGroupName;
  }

  public void setLogGroupName(String logGroupName) {
    this.logGroupName = logGroupName;
  }


  public CreateExportTaskRequest logStreamNamePrefix(String logStreamNamePrefix) {
    this.logStreamNamePrefix = logStreamNamePrefix;
    return this;
  }

  /**
   * Get logStreamNamePrefix
   * @return logStreamNamePrefix
   */
  @javax.annotation.Nullable
  public String getLogStreamNamePrefix() {
    return logStreamNamePrefix;
  }

  public void setLogStreamNamePrefix(String logStreamNamePrefix) {
    this.logStreamNamePrefix = logStreamNamePrefix;
  }


  public CreateExportTaskRequest from(Integer from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nonnull
  public Integer getFrom() {
    return from;
  }

  public void setFrom(Integer from) {
    this.from = from;
  }


  public CreateExportTaskRequest to(Integer to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nonnull
  public Integer getTo() {
    return to;
  }

  public void setTo(Integer to) {
    this.to = to;
  }


  public CreateExportTaskRequest destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public CreateExportTaskRequest destinationPrefix(String destinationPrefix) {
    this.destinationPrefix = destinationPrefix;
    return this;
  }

  /**
   * Get destinationPrefix
   * @return destinationPrefix
   */
  @javax.annotation.Nullable
  public String getDestinationPrefix() {
    return destinationPrefix;
  }

  public void setDestinationPrefix(String destinationPrefix) {
    this.destinationPrefix = destinationPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateExportTaskRequest createExportTaskRequest = (CreateExportTaskRequest) o;
    return Objects.equals(this.taskName, createExportTaskRequest.taskName) &&
        Objects.equals(this.logGroupName, createExportTaskRequest.logGroupName) &&
        Objects.equals(this.logStreamNamePrefix, createExportTaskRequest.logStreamNamePrefix) &&
        Objects.equals(this.from, createExportTaskRequest.from) &&
        Objects.equals(this.to, createExportTaskRequest.to) &&
        Objects.equals(this.destination, createExportTaskRequest.destination) &&
        Objects.equals(this.destinationPrefix, createExportTaskRequest.destinationPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskName, logGroupName, logStreamNamePrefix, from, to, destination, destinationPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateExportTaskRequest {\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    logGroupName: ").append(toIndentedString(logGroupName)).append("\n");
    sb.append("    logStreamNamePrefix: ").append(toIndentedString(logStreamNamePrefix)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    destinationPrefix: ").append(toIndentedString(destinationPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("taskName");
    openapiFields.add("logGroupName");
    openapiFields.add("logStreamNamePrefix");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("destination");
    openapiFields.add("destinationPrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logGroupName");
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("destination");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateExportTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateExportTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateExportTaskRequest is not found in the empty JSON string", CreateExportTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateExportTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateExportTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateExportTaskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `taskName`
      if (jsonObj.get("taskName") != null && !jsonObj.get("taskName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskName"));
      }
      // validate the required field `logGroupName`
      String.validateJsonElement(jsonObj.get("logGroupName"));
      // validate the optional field `logStreamNamePrefix`
      if (jsonObj.get("logStreamNamePrefix") != null && !jsonObj.get("logStreamNamePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logStreamNamePrefix"));
      }
      // validate the required field `from`
      Integer.validateJsonElement(jsonObj.get("from"));
      // validate the required field `to`
      Integer.validateJsonElement(jsonObj.get("to"));
      // validate the required field `destination`
      String.validateJsonElement(jsonObj.get("destination"));
      // validate the optional field `destinationPrefix`
      if (jsonObj.get("destinationPrefix") != null && !jsonObj.get("destinationPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("destinationPrefix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateExportTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateExportTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateExportTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateExportTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateExportTaskRequest>() {
           @Override
           public void write(JsonWriter out, CreateExportTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateExportTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateExportTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateExportTaskRequest
   * @throws IOException if the JSON string is invalid with respect to CreateExportTaskRequest
   */
  public static CreateExportTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateExportTaskRequest.class);
  }

  /**
   * Convert an instance of CreateExportTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

