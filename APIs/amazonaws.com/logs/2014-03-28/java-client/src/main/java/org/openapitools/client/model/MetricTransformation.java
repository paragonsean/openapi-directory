/*
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.StandardUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Indicates how to transform ingested log events to metric data in a CloudWatch metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:38.242841-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricTransformation {
  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_METRIC_NAMESPACE = "metricNamespace";
  @SerializedName(SERIALIZED_NAME_METRIC_NAMESPACE)
  private String metricNamespace;

  public static final String SERIALIZED_NAME_METRIC_VALUE = "metricValue";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUE)
  private String metricValue;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private Double defaultValue;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Map dimensions;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private StandardUnit unit;

  public MetricTransformation() {
  }

  public MetricTransformation metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nonnull
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public MetricTransformation metricNamespace(String metricNamespace) {
    this.metricNamespace = metricNamespace;
    return this;
  }

  /**
   * Get metricNamespace
   * @return metricNamespace
   */
  @javax.annotation.Nonnull
  public String getMetricNamespace() {
    return metricNamespace;
  }

  public void setMetricNamespace(String metricNamespace) {
    this.metricNamespace = metricNamespace;
  }


  public MetricTransformation metricValue(String metricValue) {
    this.metricValue = metricValue;
    return this;
  }

  /**
   * Get metricValue
   * @return metricValue
   */
  @javax.annotation.Nonnull
  public String getMetricValue() {
    return metricValue;
  }

  public void setMetricValue(String metricValue) {
    this.metricValue = metricValue;
  }


  public MetricTransformation defaultValue(Double defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public Double getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(Double defaultValue) {
    this.defaultValue = defaultValue;
  }


  public MetricTransformation dimensions(Map dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Map getDimensions() {
    return dimensions;
  }

  public void setDimensions(Map dimensions) {
    this.dimensions = dimensions;
  }


  public MetricTransformation unit(StandardUnit unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public StandardUnit getUnit() {
    return unit;
  }

  public void setUnit(StandardUnit unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricTransformation metricTransformation = (MetricTransformation) o;
    return Objects.equals(this.metricName, metricTransformation.metricName) &&
        Objects.equals(this.metricNamespace, metricTransformation.metricNamespace) &&
        Objects.equals(this.metricValue, metricTransformation.metricValue) &&
        Objects.equals(this.defaultValue, metricTransformation.defaultValue) &&
        Objects.equals(this.dimensions, metricTransformation.dimensions) &&
        Objects.equals(this.unit, metricTransformation.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricName, metricNamespace, metricValue, defaultValue, dimensions, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricTransformation {\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    metricNamespace: ").append(toIndentedString(metricNamespace)).append("\n");
    sb.append("    metricValue: ").append(toIndentedString(metricValue)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metricName");
    openapiFields.add("metricNamespace");
    openapiFields.add("metricValue");
    openapiFields.add("defaultValue");
    openapiFields.add("dimensions");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metricName");
    openapiRequiredFields.add("metricNamespace");
    openapiRequiredFields.add("metricValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricTransformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricTransformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricTransformation is not found in the empty JSON string", MetricTransformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricTransformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricTransformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricTransformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `metricName`
      String.validateJsonElement(jsonObj.get("metricName"));
      // validate the required field `metricNamespace`
      String.validateJsonElement(jsonObj.get("metricNamespace"));
      // validate the required field `metricValue`
      String.validateJsonElement(jsonObj.get("metricValue"));
      // validate the optional field `defaultValue`
      if (jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("defaultValue"));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("dimensions"));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        StandardUnit.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricTransformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricTransformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricTransformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricTransformation.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricTransformation>() {
           @Override
           public void write(JsonWriter out, MetricTransformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricTransformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricTransformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricTransformation
   * @throws IOException if the JSON string is invalid with respect to MetricTransformation
   */
  public static MetricTransformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricTransformation.class);
  }

  /**
   * Convert an instance of MetricTransformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

