openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<p>You can use Amazon CloudWatch Logs to monitor, store, and access\
    \ your log files from EC2 instances, CloudTrail, and other sources. You can then\
    \ retrieve the associated log data from CloudWatch Logs using the CloudWatch console.\
    \ Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services\
    \ CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch\
    \ Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>:\
    \ You can use CloudWatch Logs to monitor applications and systems using log data.\
    \ For example, CloudWatch Logs can track the number of errors that occur in your\
    \ application logs. Then, it can send you a notification whenever the rate of\
    \ errors exceeds a threshold that you specify. CloudWatch Logs uses your log data\
    \ for monitoring so no code changes are required. For example, you can monitor\
    \ application logs for specific literal terms (such as \"NullReferenceException\"\
    ). You can also count the number of occurrences of a literal term at a particular\
    \ position in log data (such as \"404\" status codes in an Apache access log).\
    \ When the term you are searching for is found, CloudWatch Logs reports the data\
    \ to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail\
    \ logged events</b>: You can create alarms in CloudWatch and receive notifications\
    \ of particular API activity as captured by CloudTrail. You can use the notification\
    \ to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You\
    \ can use CloudWatch Logs to store your log data in highly durable storage. You\
    \ can change the log retention setting so that any log events earlier than this\
    \ setting are automatically deleted. The CloudWatch Logs agent helps to quickly\
    \ send both rotated and non-rotated log data off of a host and into the log service.\
    \ You can then access the raw log data when you need it.</p> </li> </ul>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon CloudWatch Logs
  version: 2014-03-28
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: logs
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/logs-2014-03-28.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/logs/
servers:
- description: The Amazon CloudWatch Logs multi-region endpoint
  url: "http://logs.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon CloudWatch Logs multi-region endpoint
  url: "https://logs.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon CloudWatch Logs endpoint for China (Beijing) and China (Ningxia)
  url: "http://logs.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon CloudWatch Logs endpoint for China (Beijing) and China (Ningxia)
  url: "https://logs.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /#X-Amz-Target=Logs_20140328.AssociateKmsKey:
    post:
      description: "<p>Associates the specified KMS key with either one log group\
        \ in the account, or with all stored CloudWatch Logs query insights results\
        \ in the account.</p> <p>When you use <code>AssociateKmsKey</code>, you specify\
        \ either the <code>logGroupName</code> parameter or the <code>resourceIdentifier</code>\
        \ parameter. You can't specify both of those parameters in the same operation.</p>\
        \ <ul> <li> <p>Specify the <code>logGroupName</code> parameter to cause all\
        \ log events stored in the log group to be encrypted with that key. Only the\
        \ log events ingested after the key is associated are encrypted with that\
        \ key.</p> <p>Associating a KMS key with a log group overrides any existing\
        \ associations between the log group and a KMS key. After a KMS key is associated\
        \ with a log group, all newly ingested data for the log group is encrypted\
        \ using the KMS key. This association is stored as long as the data encrypted\
        \ with the KMS key is still within CloudWatch Logs. This enables CloudWatch\
        \ Logs to decrypt this data whenever it is requested.</p> <p>Associating a\
        \ key with a log group does not cause the results of queries of that log group\
        \ to be encrypted with that key. To have query results encrypted with a KMS\
        \ key, you must use an <code>AssociateKmsKey</code> operation with the <code>resourceIdentifier</code>\
        \ parameter that specifies a <code>query-result</code> resource. </p> </li>\
        \ <li> <p>Specify the <code>resourceIdentifier</code> parameter with a <code>query-result</code>\
        \ resource, to use that key to encrypt the stored results of all future <a\
        \ href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html\"\
        >StartQuery</a> operations in the account. The response from a <a href=\"\
        https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetQueryResults.html\"\
        >GetQueryResults</a> operation will still return the query results in plain\
        \ text.</p> <p>Even if you have not associated a key with your query results,\
        \ the query results are encrypted when stored, using the default CloudWatch\
        \ Logs method.</p> <p>If you run a query from a monitoring account that queries\
        \ logs in a source account, the query results key from the monitoring account,\
        \ if any, is used.</p> </li> </ul> <important> <p>If you delete the key that\
        \ is used to encrypt log events or log group query results, then all the associated\
        \ stored log events or query results that were encrypted with that key will\
        \ be unencryptable and unusable.</p> </important> <note> <p>CloudWatch Logs\
        \ supports only symmetric KMS keys. Do not use an associate an asymmetric\
        \ KMS key with your log group or query results. For more information, see\
        \ <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\"\
        >Using Symmetric and Asymmetric Keys</a>.</p> </note> <p>It can take up to\
        \ 5 minutes for this operation to take effect.</p> <p>If you attempt to associate\
        \ a KMS key with a log group but the KMS key does not exist or the KMS key\
        \ is disabled, you receive an <code>InvalidParameterException</code> error.\
        \ </p>"
      operationId: AssociateKmsKey
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.AssociateKmsKey
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateKmsKeyRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.CancelExportTask:
    post:
      description: <p>Cancels the specified export task.</p> <p>The task must be in
        the <code>PENDING</code> or <code>RUNNING</code> state.</p>
      operationId: CancelExportTask
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.CancelExportTask
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelExportTaskRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOperationException'
          description: InvalidOperationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.CreateExportTask:
    post:
      description: "<p>Creates an export task so that you can efficiently export data\
        \ from a log group to an Amazon S3 bucket. When you perform a <code>CreateExportTask</code>\
        \ operation, you must use credentials that have permission to write to the\
        \ S3 bucket that you specify as the destination.</p> <p>Exporting log data\
        \ to S3 buckets that are encrypted by KMS is supported. Exporting log data\
        \ to Amazon S3 buckets that have S3 Object Lock enabled with a retention period\
        \ is also supported.</p> <p>Exporting to S3 buckets that are encrypted with\
        \ AES-256 is supported. </p> <p>This is an asynchronous call. If all the required\
        \ information is provided, this operation initiates an export task and responds\
        \ with the ID of the task. After the task has started, you can use <a href=\"\
        https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeExportTasks.html\"\
        >DescribeExportTasks</a> to get the status of the export task. Each account\
        \ can only have one active (<code>RUNNING</code> or <code>PENDING</code>)\
        \ export task at a time. To cancel an export task, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CancelExportTask.html\"\
        >CancelExportTask</a>.</p> <p>You can export logs from multiple log groups\
        \ or multiple time ranges to the same S3 bucket. To separate log data for\
        \ each export task, specify a prefix to be used as the Amazon S3 key prefix\
        \ for all exported objects.</p> <note> <p>Time-based sorting on chunks of\
        \ log data inside an exported file is not guaranteed. You can sort the exported\
        \ log field data by using Linux utilities.</p> </note>"
      operationId: CreateExportTask
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.CreateExportTask
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExportTaskRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateExportTaskResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
          description: ResourceAlreadyExistsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.CreateLogGroup:
    post:
      description: "<p>Creates a log group with the specified name. You can create\
        \ up to 20,000 log groups per account.</p> <p>You must use the following guidelines\
        \ when naming a log group:</p> <ul> <li> <p>Log group names must be unique\
        \ within a Region for an Amazon Web Services account.</p> </li> <li> <p>Log\
        \ group names can be between 1 and 512 characters long.</p> </li> <li> <p>Log\
        \ group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore),\
        \ '-' (hyphen), '/' (forward slash), '.' (period), and '#' (number sign)</p>\
        \ </li> </ul> <p>When you create a log group, by default the log events in\
        \ the log group do not expire. To set a retention policy so that events expire\
        \ and are deleted after a specified time, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html\"\
        >PutRetentionPolicy</a>.</p> <p>If you associate an KMS key with the log group,\
        \ ingested data is encrypted using the KMS key. This association is stored\
        \ as long as the data encrypted with the KMS key is still within CloudWatch\
        \ Logs. This enables CloudWatch Logs to decrypt this data whenever it is requested.</p>\
        \ <p>If you attempt to associate a KMS key with the log group but the KMS\
        \ key does not exist or the KMS key is disabled, you receive an <code>InvalidParameterException</code>\
        \ error. </p> <important> <p>CloudWatch Logs supports only symmetric KMS keys.\
        \ Do not associate an asymmetric KMS key with your log group. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\"\
        >Using Symmetric and Asymmetric Keys</a>.</p> </important>"
      operationId: CreateLogGroup
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.CreateLogGroup
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogGroupRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
          description: ResourceAlreadyExistsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.CreateLogStream:
    post:
      description: "<p>Creates a log stream for the specified log group. A log stream\
        \ is a sequence of log events that originate from a single source, such as\
        \ an application instance or a resource that is being monitored.</p> <p>There\
        \ is no limit on the number of log streams that you can create for a log group.\
        \ There is a limit of 50 TPS on <code>CreateLogStream</code> operations, after\
        \ which transactions are throttled.</p> <p>You must use the following guidelines\
        \ when naming a log stream:</p> <ul> <li> <p>Log stream names must be unique\
        \ within the log group.</p> </li> <li> <p>Log stream names can be between\
        \ 1 and 512 characters long.</p> </li> <li> <p>Don't use ':' (colon) or '*'\
        \ (asterisk) characters.</p> </li> </ul>"
      operationId: CreateLogStream
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.CreateLogStream
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogStreamRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
          description: ResourceAlreadyExistsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteAccountPolicy:
    post:
      description: "<p>Deletes a CloudWatch Logs account policy.</p> <p>To use this\
        \ operation, you must be signed on with the <code>logs:DeleteDataProtectionPolicy</code>\
        \ and <code>logs:DeleteAccountPolicy</code> permissions.</p>"
      operationId: DeleteAccountPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteAccountPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccountPolicyRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteDataProtectionPolicy:
    post:
      description: "<p>Deletes the data protection policy from the specified log group.\
        \ </p> <p>For more information about data protection policies, see <a href=\"\
        https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDataProtectionPolicy.html\"\
        >PutDataProtectionPolicy</a>.</p>"
      operationId: DeleteDataProtectionPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteDataProtectionPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDataProtectionPolicyRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteDestination:
    post:
      description: "Deletes the specified destination, and eventually disables all\
        \ the subscription filters that publish to it. This operation does not delete\
        \ the physical resource encapsulated by the destination."
      operationId: DeleteDestination
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteDestination
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDestinationRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteLogGroup:
    post:
      description: Deletes the specified log group and permanently deletes all the
        archived log events associated with the log group.
      operationId: DeleteLogGroup
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteLogGroup
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLogGroupRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteLogStream:
    post:
      description: Deletes the specified log stream and permanently deletes all the
        archived log events associated with the log stream.
      operationId: DeleteLogStream
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteLogStream
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLogStreamRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteMetricFilter:
    post:
      description: Deletes the specified metric filter.
      operationId: DeleteMetricFilter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteMetricFilter
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMetricFilterRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteQueryDefinition:
    post:
      description: <p>Deletes a saved CloudWatch Logs Insights query definition. A
        query definition contains details about a saved CloudWatch Logs Insights query.</p>
        <p>Each <code>DeleteQueryDefinition</code> operation can delete one query
        definition.</p> <p>You must have the <code>logs:DeleteQueryDefinition</code>
        permission to be able to perform this operation.</p>
      operationId: DeleteQueryDefinition
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteQueryDefinition
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteQueryDefinitionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteQueryDefinitionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteResourcePolicy:
    post:
      description: Deletes a resource policy from this account. This revokes the access
        of the identities in that policy to put log events to this account.
      operationId: DeleteResourcePolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteResourcePolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourcePolicyRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteRetentionPolicy:
    post:
      description: <p>Deletes the specified retention policy.</p> <p>Log events do
        not expire if they belong to log groups without a retention policy.</p>
      operationId: DeleteRetentionPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteRetentionPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRetentionPolicyRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DeleteSubscriptionFilter:
    post:
      description: Deletes the specified subscription filter.
      operationId: DeleteSubscriptionFilter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DeleteSubscriptionFilter
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSubscriptionFilterRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeAccountPolicies:
    post:
      description: Returns a list of all CloudWatch Logs account policies in the account.
      operationId: DescribeAccountPolicies
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeAccountPolicies
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeAccountPoliciesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeAccountPoliciesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeDestinations:
    post:
      description: Lists all your destinations. The results are ASCII-sorted by destination
        name.
      operationId: DescribeDestinations
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeDestinations
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeDestinationsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeDestinationsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeExportTasks:
    post:
      description: Lists the specified export tasks. You can list all your export
        tasks or filter the results based on task ID or task status.
      operationId: DescribeExportTasks
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeExportTasks
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeExportTasksRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeExportTasksResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeLogGroups:
    post:
      description: "<p>Lists the specified log groups. You can list all your log groups\
        \ or filter the results by prefix. The results are ASCII-sorted by log group\
        \ name.</p> <p>CloudWatch Logs doesn’t support IAM policies that control access\
        \ to the <code>DescribeLogGroups</code> action by using the <code>aws:ResourceTag/<i>key-name</i>\
        \ </code> condition key. Other CloudWatch Logs actions do support the use\
        \ of the <code>aws:ResourceTag/<i>key-name</i> </code> condition key to control\
        \ access. For more information about using tags to control access, see <a\
        \ href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\"\
        >Controlling access to Amazon Web Services resources using tags</a>.</p> <p>If\
        \ you are using CloudWatch cross-account observability, you can use this operation\
        \ in a monitoring account and view data from the linked source accounts. For\
        \ more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\"\
        >CloudWatch cross-account observability</a>.</p>"
      operationId: DescribeLogGroups
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeLogGroups
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeLogGroupsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeLogGroupsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeLogStreams:
    post:
      description: "<p>Lists the log streams for the specified log group. You can\
        \ list all the log streams or filter the results by prefix. You can also control\
        \ how the results are ordered.</p> <p>You can specify the log group to search\
        \ by using either <code>logGroupIdentifier</code> or <code>logGroupName</code>.\
        \ You must include one of these two parameters, but you can't include both.\
        \ </p> <p>This operation has a limit of five transactions per second, after\
        \ which transactions are throttled.</p> <p>If you are using CloudWatch cross-account\
        \ observability, you can use this operation in a monitoring account and view\
        \ data from the linked source accounts. For more information, see <a href=\"\
        https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\"\
        >CloudWatch cross-account observability</a>.</p>"
      operationId: DescribeLogStreams
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeLogStreams
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeLogStreamsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeLogStreamsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeMetricFilters:
    post:
      description: "Lists the specified metric filters. You can list all of the metric\
        \ filters or filter the results by log name, prefix, metric name, or metric\
        \ namespace. The results are ASCII-sorted by filter name."
      operationId: DescribeMetricFilters
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeMetricFilters
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeMetricFiltersRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeMetricFiltersResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeQueries:
    post:
      description: "Returns a list of CloudWatch Logs Insights queries that are scheduled,\
        \ running, or have been run recently in this account. You can request all\
        \ queries or limit it to queries of a specific log group or queries with a\
        \ certain status."
      operationId: DescribeQueries
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeQueries
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeQueriesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeQueriesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeQueryDefinitions:
    post:
      description: <p>This operation returns a paginated list of your saved CloudWatch
        Logs Insights query definitions.</p> <p>You can use the <code>queryDefinitionNamePrefix</code>
        parameter to limit the results to only the query definitions that have names
        that start with a certain string.</p>
      operationId: DescribeQueryDefinitions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeQueryDefinitions
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeQueryDefinitionsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeQueryDefinitionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeResourcePolicies:
    post:
      description: Lists the resource policies in this account.
      operationId: DescribeResourcePolicies
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeResourcePolicies
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeResourcePoliciesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeResourcePoliciesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DescribeSubscriptionFilters:
    post:
      description: Lists the subscription filters for the specified log group. You
        can list all the subscription filters or filter the results by prefix. The
        results are ASCII-sorted by filter name.
      operationId: DescribeSubscriptionFilters
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DescribeSubscriptionFilters
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeSubscriptionFiltersRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeSubscriptionFiltersResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.DisassociateKmsKey:
    post:
      description: "<p>Disassociates the specified KMS key from the specified log\
        \ group or from all CloudWatch Logs Insights query results in the account.</p>\
        \ <p>When you use <code>DisassociateKmsKey</code>, you specify either the\
        \ <code>logGroupName</code> parameter or the <code>resourceIdentifier</code>\
        \ parameter. You can't specify both of those parameters in the same operation.</p>\
        \ <ul> <li> <p>Specify the <code>logGroupName</code> parameter to stop using\
        \ the KMS key to encrypt future log events ingested and stored in the log\
        \ group. Instead, they will be encrypted with the default CloudWatch Logs\
        \ method. The log events that were ingested while the key was associated with\
        \ the log group are still encrypted with that key. Therefore, CloudWatch Logs\
        \ will need permissions for the key whenever that data is accessed.</p> </li>\
        \ <li> <p>Specify the <code>resourceIdentifier</code> parameter with the <code>query-result</code>\
        \ resource to stop using the KMS key to encrypt the results of all future\
        \ <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html\"\
        >StartQuery</a> operations in the account. They will instead be encrypted\
        \ with the default CloudWatch Logs method. The results from queries that ran\
        \ while the key was associated with the account are still encrypted with that\
        \ key. Therefore, CloudWatch Logs will need permissions for the key whenever\
        \ that data is accessed.</p> </li> </ul> <p>It can take up to 5 minutes for\
        \ this operation to take effect.</p>"
      operationId: DisassociateKmsKey
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.DisassociateKmsKey
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisassociateKmsKeyRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.FilterLogEvents:
    post:
      description: "<p>Lists log events from the specified log group. You can list\
        \ all the log events or filter the results using a filter pattern, a time\
        \ range, and the name of the log stream.</p> <p>You must have the <code>logs:FilterLogEvents</code>\
        \ permission to perform this operation.</p> <p>You can specify the log group\
        \ to search by using either <code>logGroupIdentifier</code> or <code>logGroupName</code>.\
        \ You must include one of these two parameters, but you can't include both.\
        \ </p> <p>By default, this operation returns as many log events as can fit\
        \ in 1 MB (up to 10,000 log events) or all the events found within the specified\
        \ time range. If the results include a token, that means there are more log\
        \ events available. You can get additional results by specifying the token\
        \ in a subsequent call. This operation can return empty results while there\
        \ are more log events available through the token.</p> <p>The returned log\
        \ events are sorted by event timestamp, the timestamp when the event was ingested\
        \ by CloudWatch Logs, and the ID of the <code>PutLogEvents</code> request.</p>\
        \ <p>If you are using CloudWatch cross-account observability, you can use\
        \ this operation in a monitoring account and view data from the linked source\
        \ accounts. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\"\
        >CloudWatch cross-account observability</a>.</p>"
      operationId: FilterLogEvents
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.FilterLogEvents
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterLogEventsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterLogEventsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.GetDataProtectionPolicy:
    post:
      description: Returns information about a log group data protection policy.
      operationId: GetDataProtectionPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.GetDataProtectionPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDataProtectionPolicyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataProtectionPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.GetLogEvents:
    post:
      description: "<p>Lists log events from the specified log stream. You can list\
        \ all of the log events or filter using a time range.</p> <p>By default, this\
        \ operation returns as many log events as can fit in a response size of 1MB\
        \ (up to 10,000 log events). You can get additional log events by specifying\
        \ one of the tokens in a subsequent call. This operation can return empty\
        \ results while there are more log events available through the token.</p>\
        \ <p>If you are using CloudWatch cross-account observability, you can use\
        \ this operation in a monitoring account and view data from the linked source\
        \ accounts. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\"\
        >CloudWatch cross-account observability</a>.</p> <p>You can specify the log\
        \ group to search by using either <code>logGroupIdentifier</code> or <code>logGroupName</code>.\
        \ You must include one of these two parameters, but you can't include both.\
        \ </p>"
      operationId: GetLogEvents
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.GetLogEvents
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLogEventsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLogEventsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.GetLogGroupFields:
    post:
      description: "<p>Returns a list of the fields that are included in log events\
        \ in the specified log group. Includes the percentage of log events that contain\
        \ each field. The search is limited to a time period that you specify.</p>\
        \ <p>You can specify the log group to search by using either <code>logGroupIdentifier</code>\
        \ or <code>logGroupName</code>. You must specify one of these parameters,\
        \ but you can't specify both. </p> <p>In the results, fields that start with\
        \ <code>@</code> are fields generated by CloudWatch Logs. For example, <code>@timestamp</code>\
        \ is the timestamp of each log event. For more information about the fields\
        \ that are generated by CloudWatch logs, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html\"\
        >Supported Logs and Discovered Fields</a>.</p> <p>The response results are\
        \ sorted by the frequency percentage, starting with the highest percentage.</p>\
        \ <p>If you are using CloudWatch cross-account observability, you can use\
        \ this operation in a monitoring account and view data from the linked source\
        \ accounts. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\"\
        >CloudWatch cross-account observability</a>.</p>"
      operationId: GetLogGroupFields
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.GetLogGroupFields
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLogGroupFieldsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLogGroupFieldsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.GetLogRecord:
    post:
      description: "<p>Retrieves all of the fields and values of a single log event.\
        \ All fields are retrieved, even if the original query that produced the <code>logRecordPointer</code>\
        \ retrieved only a subset of fields. Fields are returned as field name/field\
        \ value pairs.</p> <p>The full unparsed log event is returned within <code>@message</code>.</p>"
      operationId: GetLogRecord
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.GetLogRecord
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLogRecordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLogRecordResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.GetQueryResults:
    post:
      description: "<p>Returns the results from the specified query.</p> <p>Only the\
        \ fields requested in the query are returned, along with a <code>@ptr</code>\
        \ field, which is the identifier for the log record. You can use the value\
        \ of <code>@ptr</code> in a <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetLogRecord.html\"\
        >GetLogRecord</a> operation to get the full log record.</p> <p> <code>GetQueryResults</code>\
        \ does not start running a query. To run a query, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html\"\
        >StartQuery</a>.</p> <p>If the value of the <code>Status</code> field in the\
        \ output is <code>Running</code>, this operation returns only partial results.\
        \ If you see a value of <code>Scheduled</code> or <code>Running</code> for\
        \ the status, you can retry the operation later to see the final results.\
        \ </p> <p>If you are using CloudWatch cross-account observability, you can\
        \ use this operation in a monitoring account to start queries in linked source\
        \ accounts. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\"\
        >CloudWatch cross-account observability</a>.</p>"
      operationId: GetQueryResults
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.GetQueryResults
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetQueryResultsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQueryResultsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.ListTagsForResource:
    post:
      description: "Displays the tags associated with a CloudWatch Logs resource.\
        \ Currently, log groups and destinations support tagging."
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.ListTagsForResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.ListTagsLogGroup:
    post:
      deprecated: true
      description: <important> <p>The ListTagsLogGroup operation is on the path to
        deprecation. We recommend that you use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsForResource.html">ListTagsForResource</a>
        instead.</p> </important> <p>Lists the tags for the specified log group.</p>
      operationId: ListTagsLogGroup
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.ListTagsLogGroup
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsLogGroupRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsLogGroupResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutAccountPolicy:
    post:
      description: "<p>Creates an account-level data protection policy that applies\
        \ to all log groups in the account. A data protection policy can help safeguard\
        \ sensitive data that's ingested by your log groups by auditing and masking\
        \ the sensitive log data. Each account can have only one account-level policy.</p>\
        \ <important> <p>Sensitive data is detected and masked when it is ingested\
        \ into a log group. When you set a data protection policy, log events ingested\
        \ into the log groups before that time are not masked.</p> </important> <p>If\
        \ you use <code>PutAccountPolicy</code> to create a data protection policy\
        \ for your whole account, it applies to both existing log groups and all log\
        \ groups that are created later in this account. The account policy is applied\
        \ to existing log groups with eventual consistency. It might take up to 5\
        \ minutes before sensitive data in existing log groups begins to be masked.</p>\
        \ <p>By default, when a user views a log event that includes masked data,\
        \ the sensitive data is replaced by asterisks. A user who has the <code>logs:Unmask</code>\
        \ permission can use a <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetLogEvents.html\"\
        >GetLogEvents</a> or <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_FilterLogEvents.html\"\
        >FilterLogEvents</a> operation with the <code>unmask</code> parameter set\
        \ to <code>true</code> to view the unmasked log events. Users with the <code>logs:Unmask</code>\
        \ can also view unmasked data in the CloudWatch Logs console by running a\
        \ CloudWatch Logs Insights query with the <code>unmask</code> query command.</p>\
        \ <p>For more information, including a list of types of data that can be audited\
        \ and masked, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html\"\
        >Protect sensitive log data with masking</a>.</p> <p>To use the <code>PutAccountPolicy</code>\
        \ operation, you must be signed on with the <code>logs:PutDataProtectionPolicy</code>\
        \ and <code>logs:PutAccountPolicy</code> permissions.</p> <p>The <code>PutAccountPolicy</code>\
        \ operation applies to all log groups in the account. You can also use <a\
        \ href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDataProtectionPolicy.html\"\
        >PutDataProtectionPolicy</a> to create a data protection policy that applies\
        \ to just one log group. If a log group has its own data protection policy\
        \ and the account also has an account-level data protection policy, then the\
        \ two policies are cumulative. Any sensitive term specified in either policy\
        \ is masked.</p>"
      operationId: PutAccountPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutAccountPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAccountPolicyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutAccountPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutDataProtectionPolicy:
    post:
      description: "<p>Creates a data protection policy for the specified log group.\
        \ A data protection policy can help safeguard sensitive data that's ingested\
        \ by the log group by auditing and masking the sensitive log data.</p> <important>\
        \ <p>Sensitive data is detected and masked when it is ingested into the log\
        \ group. When you set a data protection policy, log events ingested into the\
        \ log group before that time are not masked.</p> </important> <p>By default,\
        \ when a user views a log event that includes masked data, the sensitive data\
        \ is replaced by asterisks. A user who has the <code>logs:Unmask</code> permission\
        \ can use a <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetLogEvents.html\"\
        >GetLogEvents</a> or <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_FilterLogEvents.html\"\
        >FilterLogEvents</a> operation with the <code>unmask</code> parameter set\
        \ to <code>true</code> to view the unmasked log events. Users with the <code>logs:Unmask</code>\
        \ can also view unmasked data in the CloudWatch Logs console by running a\
        \ CloudWatch Logs Insights query with the <code>unmask</code> query command.</p>\
        \ <p>For more information, including a list of types of data that can be audited\
        \ and masked, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html\"\
        >Protect sensitive log data with masking</a>.</p> <p>The <code>PutDataProtectionPolicy</code>\
        \ operation applies to only the specified log group. You can also use <a href=\"\
        https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutAccountPolicy.html\"\
        >PutAccountPolicy</a> to create an account-level data protection policy that\
        \ applies to all log groups in the account, including both existing log groups\
        \ and log groups that are created level. If a log group has its own data protection\
        \ policy and the account also has an account-level data protection policy,\
        \ then the two policies are cumulative. Any sensitive term specified in either\
        \ policy is masked.</p>"
      operationId: PutDataProtectionPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutDataProtectionPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDataProtectionPolicyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutDataProtectionPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutDestination:
    post:
      description: "<p>Creates or updates a destination. This operation is used only\
        \ to create destinations for cross-account subscriptions.</p> <p>A destination\
        \ encapsulates a physical resource (such as an Amazon Kinesis stream). With\
        \ a destination, you can subscribe to a real-time stream of log events for\
        \ a different account, ingested using <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\"\
        >PutLogEvents</a>.</p> <p>Through an access policy, a destination controls\
        \ what is written to it. By default, <code>PutDestination</code> does not\
        \ set any access policy with the destination, which means a cross-account\
        \ user cannot call <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutSubscriptionFilter.html\"\
        >PutSubscriptionFilter</a> against this destination. To enable this, the destination\
        \ owner must call <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html\"\
        >PutDestinationPolicy</a> after <code>PutDestination</code>.</p> <p>To perform\
        \ a <code>PutDestination</code> operation, you must also have the <code>iam:PassRole</code>\
        \ permission.</p>"
      operationId: PutDestination
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutDestination
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDestinationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutDestinationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutDestinationPolicy:
    post:
      description: Creates or updates an access policy associated with an existing
        destination. An access policy is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html">IAM
        policy document</a> that is used to authorize claims to register a subscription
        filter against a given destination.
      operationId: PutDestinationPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutDestinationPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDestinationPolicyRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutLogEvents:
    post:
      description: "<p>Uploads a batch of log events to the specified log stream.</p>\
        \ <important> <p>The sequence token is now ignored in <code>PutLogEvents</code>\
        \ actions. <code>PutLogEvents</code> actions are always accepted and never\
        \ return <code>InvalidSequenceTokenException</code> or <code>DataAlreadyAcceptedException</code>\
        \ even if the sequence token is not valid. You can use parallel <code>PutLogEvents</code>\
        \ actions on the same log stream. </p> </important> <p>The batch of events\
        \ must satisfy the following constraints:</p> <ul> <li> <p>The maximum batch\
        \ size is 1,048,576 bytes. This size is calculated as the sum of all event\
        \ messages in UTF-8, plus 26 bytes for each log event.</p> </li> <li> <p>None\
        \ of the log events in the batch can be more than 2 hours in the future.</p>\
        \ </li> <li> <p>None of the log events in the batch can be more than 14 days\
        \ in the past. Also, none of the log events can be from earlier than the retention\
        \ period of the log group.</p> </li> <li> <p>The log events in the batch must\
        \ be in chronological order by their timestamp. The timestamp is the time\
        \ that the event occurred, expressed as the number of milliseconds after <code>Jan\
        \ 1, 1970 00:00:00 UTC</code>. (In Amazon Web Services Tools for PowerShell\
        \ and the Amazon Web Services SDK for .NET, the timestamp is specified in\
        \ .NET format: <code>yyyy-mm-ddThh:mm:ss</code>. For example, <code>2017-09-15T13:45:30</code>.)\
        \ </p> </li> <li> <p>A batch of log events in a single request cannot span\
        \ more than 24 hours. Otherwise, the operation fails.</p> </li> <li> <p>Each\
        \ log event can be no larger than 256 KB.</p> </li> <li> <p>The maximum number\
        \ of log events in a batch is 10,000.</p> </li> <li> <important> <p>The quota\
        \ of five requests per second per log stream has been removed. Instead, <code>PutLogEvents</code>\
        \ actions are throttled based on a per-second per-account quota. You can request\
        \ an increase to the per-second throttling quota by using the Service Quotas\
        \ service.</p> </important> </li> </ul> <p>If a call to <code>PutLogEvents</code>\
        \ returns \"UnrecognizedClientException\" the most likely cause is a non-valid\
        \ Amazon Web Services access key ID or secret key. </p>"
      operationId: PutLogEvents
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutLogEvents
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLogEventsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutLogEventsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSequenceTokenException'
          description: InvalidSequenceTokenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAlreadyAcceptedException'
          description: DataAlreadyAcceptedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnrecognizedClientException'
          description: UnrecognizedClientException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutMetricFilter:
    post:
      description: "<p>Creates or updates a metric filter and associates it with the\
        \ specified log group. With metric filters, you can configure rules to extract\
        \ metric data from log events ingested through <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\"\
        >PutLogEvents</a>.</p> <p>The maximum number of metric filters that can be\
        \ associated with a log group is 100.</p> <p>When you create a metric filter,\
        \ you can also optionally assign a unit and dimensions to the metric that\
        \ is created.</p> <important> <p>Metrics extracted from log events are charged\
        \ as custom metrics. To prevent unexpected high charges, do not specify high-cardinality\
        \ fields such as <code>IPAddress</code> or <code>requestID</code> as dimensions.\
        \ Each different value found for a dimension is treated as a separate metric\
        \ and accrues charges as a separate custom metric. </p> <p>CloudWatch Logs\
        \ disables a metric filter if it generates 1,000 different name/value pairs\
        \ for your specified dimensions within a certain amount of time. This helps\
        \ to prevent accidental high charges.</p> <p>You can also set up a billing\
        \ alarm to alert you if your charges are higher than expected. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html\"\
        > Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges</a>.\
        \ </p> </important>"
      operationId: PutMetricFilter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutMetricFilter
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMetricFilterRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutQueryDefinition:
    post:
      description: "<p>Creates or updates a query definition for CloudWatch Logs Insights.\
        \ For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AnalyzingLogData.html\"\
        >Analyzing Log Data with CloudWatch Logs Insights</a>.</p> <p>To update a\
        \ query definition, specify its <code>queryDefinitionId</code> in your request.\
        \ The values of <code>name</code>, <code>queryString</code>, and <code>logGroupNames</code>\
        \ are changed to the values that you specify in your update operation. No\
        \ current values are retained from the current query definition. For example,\
        \ imagine updating a current query definition that includes log groups. If\
        \ you don't specify the <code>logGroupNames</code> parameter in your update\
        \ operation, the query definition changes to contain no log groups.</p> <p>You\
        \ must have the <code>logs:PutQueryDefinition</code> permission to be able\
        \ to perform this operation.</p>"
      operationId: PutQueryDefinition
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutQueryDefinition
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutQueryDefinitionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutQueryDefinitionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutResourcePolicy:
    post:
      description: "Creates or updates a resource policy allowing other Amazon Web\
        \ Services services to put log events to this account, such as Amazon Route\
        \ 53. An account can have up to 10 resource policies per Amazon Web Services\
        \ Region."
      operationId: PutResourcePolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutResourcePolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutResourcePolicyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutResourcePolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutRetentionPolicy:
    post:
      description: "<p>Sets the retention of the specified log group. With a retention\
        \ policy, you can configure the number of days for which to retain log events\
        \ in the specified log group.</p> <note> <p>CloudWatch Logs doesn’t immediately\
        \ delete log events when they reach their retention setting. It typically\
        \ takes up to 72 hours after that before log events are deleted, but in rare\
        \ situations might take longer.</p> <p>To illustrate, imagine that you change\
        \ a log group to have a longer retention setting when it contains log events\
        \ that are past the expiration date, but haven’t been deleted. Those log events\
        \ will take up to 72 hours to be deleted after the new retention date is reached.\
        \ To make sure that log data is deleted permanently, keep a log group at its\
        \ lower retention setting until 72 hours after the previous retention period\
        \ ends. Alternatively, wait to change the retention setting until you confirm\
        \ that the earlier log events are deleted. </p> </note>"
      operationId: PutRetentionPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutRetentionPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRetentionPolicyRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.PutSubscriptionFilter:
    post:
      description: "<p>Creates or updates a subscription filter and associates it\
        \ with the specified log group. With subscription filters, you can subscribe\
        \ to a real-time stream of log events ingested through <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\"\
        >PutLogEvents</a> and have them delivered to a specific destination. When\
        \ log events are sent to the receiving service, they are Base64 encoded and\
        \ compressed with the GZIP format.</p> <p>The following destinations are supported\
        \ for subscription filters:</p> <ul> <li> <p>An Amazon Kinesis data stream\
        \ belonging to the same account as the subscription filter, for same-account\
        \ delivery.</p> </li> <li> <p>A logical destination created with <a href=\"\
        https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestination.html\"\
        >PutDestination</a> that belongs to a different account, for cross-account\
        \ delivery. We currently support Kinesis Data Streams and Kinesis Data Firehose\
        \ as logical destinations.</p> </li> <li> <p>An Amazon Kinesis Data Firehose\
        \ delivery stream that belongs to the same account as the subscription filter,\
        \ for same-account delivery.</p> </li> <li> <p>An Lambda function that belongs\
        \ to the same account as the subscription filter, for same-account delivery.</p>\
        \ </li> </ul> <p>Each log group can have up to two subscription filters associated\
        \ with it. If you are updating an existing filter, you must specify the correct\
        \ name in <code>filterName</code>. </p> <p>To perform a <code>PutSubscriptionFilter</code>\
        \ operation for any destination except a Lambda function, you must also have\
        \ the <code>iam:PassRole</code> permission.</p>"
      operationId: PutSubscriptionFilter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.PutSubscriptionFilter
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionFilterRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAbortedException'
          description: OperationAbortedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.StartQuery:
    post:
      description: "<p>Schedules a query of a log group using CloudWatch Logs Insights.\
        \ You specify the log group and time range to query and the query string to\
        \ use.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\"\
        >CloudWatch Logs Insights Query Syntax</a>.</p> <p>After you run a query using\
        \ <code>StartQuery</code>, the query results are stored by CloudWatch Logs.\
        \ You can use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetQueryResults.html\"\
        >GetQueryResults</a> to retrieve the results of a query, using the <code>queryId</code>\
        \ that <code>StartQuery</code> returns. </p> <p>If you have associated a KMS\
        \ key with the query results in this account, then <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html\"\
        >StartQuery</a> uses that key to encrypt the results when it stores them.\
        \ If no key is associated with query results, the query results are encrypted\
        \ with the default CloudWatch Logs encryption method.</p> <p>Queries time\
        \ out after 60 minutes of runtime. If your queries are timing out, reduce\
        \ the time range being searched or partition your query into a number of queries.</p>\
        \ <p>If you are using CloudWatch cross-account observability, you can use\
        \ this operation in a monitoring account to start a query in a linked source\
        \ account. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html\"\
        >CloudWatch cross-account observability</a>. For a cross-account <code>StartQuery</code>\
        \ operation, the query definition must be defined in the monitoring account.</p>\
        \ <p>You can have up to 30 concurrent CloudWatch Logs insights queries, including\
        \ queries that have been added to dashboards. </p>"
      operationId: StartQuery
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.StartQuery
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartQueryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartQueryResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MalformedQueryException'
          description: MalformedQueryException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.StopQuery:
    post:
      description: "Stops a CloudWatch Logs Insights query that is in progress. If\
        \ the query has already ended, the operation returns an error indicating that\
        \ the specified query is not running."
      operationId: StopQuery
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.StopQuery
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopQueryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopQueryResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.TagLogGroup:
    post:
      deprecated: true
      description: "<important> <p>The TagLogGroup operation is on the path to deprecation.\
        \ We recommend that you use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_TagResource.html\"\
        >TagResource</a> instead.</p> </important> <p>Adds or updates the specified\
        \ tags for the specified log group.</p> <p>To list the tags for a log group,\
        \ use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsForResource.html\"\
        >ListTagsForResource</a>. To remove tags, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UntagResource.html\"\
        >UntagResource</a>.</p> <p>For more information about tags, see <a href=\"\
        https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html#log-group-tagging\"\
        >Tag Log Groups in Amazon CloudWatch Logs</a> in the <i>Amazon CloudWatch\
        \ Logs User Guide</i>.</p> <p>CloudWatch Logs doesn’t support IAM policies\
        \ that prevent users from assigning specified tags to log groups using the\
        \ <code>aws:Resource/<i>key-name</i> </code> or <code>aws:TagKeys</code> condition\
        \ keys. For more information about using tags to control access, see <a href=\"\
        https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\">Controlling\
        \ access to Amazon Web Services resources using tags</a>.</p>"
      operationId: TagLogGroup
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.TagLogGroup
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagLogGroupRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.TagResource:
    post:
      description: "<p>Assigns one or more tags (key-value pairs) to the specified\
        \ CloudWatch Logs resource. Currently, the only CloudWatch Logs resources\
        \ that can be tagged are log groups and destinations. </p> <p>Tags can help\
        \ you organize and categorize your resources. You can also use them to scope\
        \ user permissions by granting a user permission to access or change only\
        \ resources with certain tag values.</p> <p>Tags don't have any semantic meaning\
        \ to Amazon Web Services and are interpreted strictly as strings of characters.</p>\
        \ <p>You can use the <code>TagResource</code> action with a resource that\
        \ already has tags. If you specify a new tag key for the alarm, this tag is\
        \ appended to the list of tags associated with the alarm. If you specify a\
        \ tag key that is already associated with the alarm, the new tag value that\
        \ you specify replaces the previous value for that tag.</p> <p>You can associate\
        \ as many as 50 tags with a CloudWatch Logs resource.</p>"
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.TagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.TestMetricFilter:
    post:
      description: Tests the filter pattern of a metric filter against a sample of
        log event messages. You can use this operation to validate the correctness
        of a metric filter pattern.
      operationId: TestMetricFilter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.TestMetricFilter
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestMetricFilterRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestMetricFilterResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.UntagLogGroup:
    post:
      deprecated: true
      description: "<important> <p>The UntagLogGroup operation is on the path to deprecation.\
        \ We recommend that you use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UntagResource.html\"\
        >UntagResource</a> instead.</p> </important> <p>Removes the specified tags\
        \ from the specified log group.</p> <p>To list the tags for a log group, use\
        \ <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsForResource.html\"\
        >ListTagsForResource</a>. To add tags, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_TagResource.html\"\
        >TagResource</a>.</p> <p>CloudWatch Logs doesn’t support IAM policies that\
        \ prevent users from assigning specified tags to log groups using the <code>aws:Resource/<i>key-name</i>\
        \ </code> or <code>aws:TagKeys</code> condition keys. </p>"
      operationId: UntagLogGroup
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.UntagLogGroup
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagLogGroupRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=Logs_20140328.UntagResource:
    post:
      description: Removes one or more tags from the specified resource.
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - Logs_20140328.UntagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    AssociateKmsKeyRequest:
      example:
        logGroupName: ""
        resourceIdentifier: ""
        kmsKeyId: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: "<p>The name of the log group.</p> <p>In your <code>AssociateKmsKey</code>\
              \ operation, you must specify either the <code>resourceIdentifier</code>\
              \ parameter or the <code>logGroup</code> parameter, but you can't specify\
              \ both.</p>"
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          - description: "The Amazon Resource Name (ARN) of the KMS key to use when\
              \ encrypting log data. This must be a symmetric KMS key. For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\"\
              >Amazon Resource Names</a> and <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\"\
              >Using Symmetric and Asymmetric Keys</a>."
        resourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceIdentifier'
          - description: "<p>Specifies the target for this operation. You must specify\
              \ one of the following:</p> <ul> <li> <p>Specify the following ARN to\
              \ have future <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetQueryResults.html\"\
              >GetQueryResults</a> operations in this account encrypt the results\
              \ with the specified KMS key. Replace <i>REGION</i> and <i>ACCOUNT_ID</i>\
              \ with your Region and account ID.</p> <p> <code>arn:aws:logs:<i>REGION</i>:<i>ACCOUNT_ID</i>:query-result:*</code>\
              \ </p> </li> <li> <p>Specify the ARN of a log group to have CloudWatch\
              \ Logs use the KMS key to encrypt log events that are ingested and stored\
              \ by that log group. The log group ARN must be in the following format.\
              \ Replace <i>REGION</i> and <i>ACCOUNT_ID</i> with your Region and account\
              \ ID.</p> <p> <code>arn:aws:logs:<i>REGION</i>:<i>ACCOUNT_ID</i>:log-group:<i>LOG_GROUP_NAME</i>\
              \ </code> </p> </li> </ul> <p>In your <code>AssociateKmsKey</code> operation,\
              \ you must specify either the <code>resourceIdentifier</code> parameter\
              \ or the <code>logGroup</code> parameter, but you can't specify both.</p>"
      required:
      - kmsKeyId
      title: AssociateKmsKeyRequest
      type: object
    InvalidParameterException: {}
    ResourceNotFoundException: {}
    OperationAbortedException: {}
    ServiceUnavailableException: {}
    CancelExportTaskRequest:
      example:
        taskId: ""
      properties:
        taskId:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          - description: The ID of the export task.
      required:
      - taskId
      title: CancelExportTaskRequest
      type: object
    InvalidOperationException: {}
    CreateExportTaskResponse:
      example:
        taskId: ""
      properties:
        taskId:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          - description: The ID of the export task.
      type: object
    CreateExportTaskRequest:
      example:
        logGroupName: ""
        destinationPrefix: ""
        logStreamNamePrefix: ""
        destination: ""
        taskName: ""
        from: ""
        to: ""
      properties:
        taskName:
          allOf:
          - $ref: '#/components/schemas/ExportTaskName'
          - description: The name of the export task.
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        logStreamNamePrefix:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: "Export only log streams that match the provided prefix.\
              \ If you don't specify a value, no prefix filter is applied."
        from:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The start time of the range for the request, expressed as\
              \ the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.\
              \ Events with a timestamp earlier than this time are not exported."
        to:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The end time of the range for the request, expressed\
              \ as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.\
              \ Events with a timestamp later than this time are not exported.</p>\
              \ <p>You must specify a time that is not earlier than when this log\
              \ group was created.</p>"
        destination:
          allOf:
          - $ref: '#/components/schemas/ExportDestinationBucket'
          - description: The name of S3 bucket for the exported log data. The bucket
              must be in the same Amazon Web Services Region.
        destinationPrefix:
          allOf:
          - $ref: '#/components/schemas/ExportDestinationPrefix'
          - description: "The prefix used as the start of the key for every object\
              \ exported. If you don't specify a value, the default is <code>exportedlogs</code>."
      required:
      - destination
      - from
      - logGroupName
      - to
      title: CreateExportTaskRequest
      type: object
    LimitExceededException: {}
    ResourceAlreadyExistsException: {}
    CreateLogGroupRequest:
      example:
        logGroupName: ""
        kmsKeyId: ""
        tags: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          - description: "The Amazon Resource Name (ARN) of the KMS key to use when\
              \ encrypting log data. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms\"\
              >Amazon Resource Names</a>."
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "<p>The key-value pairs to use for the tags.</p> <p>You can\
              \ grant users access to certain log groups while preventing them from\
              \ accessing other log groups. To do so, tag your groups and use IAM\
              \ policies that refer to those tags. To assign tags when you create\
              \ a log group, you must have either the <code>logs:TagResource</code>\
              \ or <code>logs:TagLogGroup</code> permission. For more information\
              \ about tagging, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
              >Tagging Amazon Web Services resources</a>. For more information about\
              \ using tags to control access, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\"\
              >Controlling access to Amazon Web Services resources using tags</a>.</p>"
      required:
      - logGroupName
      title: CreateLogGroupRequest
      type: object
    CreateLogStreamRequest:
      example:
        logGroupName: ""
        logStreamName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: The name of the log stream.
      required:
      - logGroupName
      - logStreamName
      title: CreateLogStreamRequest
      type: object
    DeleteAccountPolicyRequest:
      example:
        policyName: ""
        policyType: ""
      properties:
        policyName:
          allOf:
          - $ref: '#/components/schemas/PolicyName'
          - description: The name of the policy to delete.
        policyType:
          allOf:
          - $ref: '#/components/schemas/PolicyType'
          - description: "The type of policy to delete. Currently, the only valid\
              \ value is <code>DATA_PROTECTION_POLICY</code>."
      required:
      - policyName
      - policyType
      title: DeleteAccountPolicyRequest
      type: object
    DeleteDataProtectionPolicyRequest:
      example:
        logGroupIdentifier: ""
      properties:
        logGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifier'
          - description: The name or ARN of the log group that you want to delete
              the data protection policy for.
      required:
      - logGroupIdentifier
      title: DeleteDataProtectionPolicyRequest
      type: object
    DeleteDestinationRequest:
      example:
        destinationName: ""
      properties:
        destinationName:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          - description: The name of the destination.
      required:
      - destinationName
      title: DeleteDestinationRequest
      type: object
    DeleteLogGroupRequest:
      example:
        logGroupName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
      required:
      - logGroupName
      title: DeleteLogGroupRequest
      type: object
    DeleteLogStreamRequest:
      example:
        logGroupName: ""
        logStreamName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: The name of the log stream.
      required:
      - logGroupName
      - logStreamName
      title: DeleteLogStreamRequest
      type: object
    DeleteMetricFilterRequest:
      example:
        logGroupName: ""
        filterName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        filterName:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          - description: The name of the metric filter.
      required:
      - filterName
      - logGroupName
      title: DeleteMetricFilterRequest
      type: object
    DeleteQueryDefinitionResponse:
      example:
        success: ""
      properties:
        success:
          allOf:
          - $ref: '#/components/schemas/Success'
          - description: A value of TRUE indicates that the operation succeeded. FALSE
              indicates that the operation failed.
      type: object
    DeleteQueryDefinitionRequest:
      example:
        queryDefinitionId: ""
      properties:
        queryDefinitionId:
          allOf:
          - $ref: '#/components/schemas/QueryId'
          - description: The ID of the query definition that you want to delete. You
              can use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html">DescribeQueryDefinitions</a>
              to retrieve the IDs of your saved query definitions.
      required:
      - queryDefinitionId
      title: DeleteQueryDefinitionRequest
      type: object
    DeleteResourcePolicyRequest:
      example:
        policyName: ""
      properties:
        policyName:
          allOf:
          - $ref: '#/components/schemas/PolicyName'
          - description: The name of the policy to be revoked. This parameter is required.
      title: DeleteResourcePolicyRequest
      type: object
    DeleteRetentionPolicyRequest:
      example:
        logGroupName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
      required:
      - logGroupName
      title: DeleteRetentionPolicyRequest
      type: object
    DeleteSubscriptionFilterRequest:
      example:
        logGroupName: ""
        filterName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        filterName:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          - description: The name of the subscription filter.
      required:
      - filterName
      - logGroupName
      title: DeleteSubscriptionFilterRequest
      type: object
    DescribeAccountPoliciesResponse:
      example:
        accountPolicies: ""
      properties:
        accountPolicies:
          allOf:
          - $ref: '#/components/schemas/AccountPolicies'
          - description: An array of structures that contain information about the
              CloudWatch Logs account policies that match the specified filters.
      type: object
    DescribeAccountPoliciesRequest:
      example:
        policyName: ""
        policyType: ""
        accountIdentifiers: ""
      properties:
        policyType:
          allOf:
          - $ref: '#/components/schemas/PolicyType'
          - description: "Use this parameter to limit the returned policies to only\
              \ the policies that match the policy type that you specify. Currently,\
              \ the only valid value is <code>DATA_PROTECTION_POLICY</code>."
        policyName:
          allOf:
          - $ref: '#/components/schemas/PolicyName'
          - description: Use this parameter to limit the returned policies to only
              the policy with the name that you specify.
        accountIdentifiers:
          allOf:
          - $ref: '#/components/schemas/AccountIds'
          - description: "<p>If you are using an account that is set up as a monitoring\
              \ account for CloudWatch unified cross-account observability, you can\
              \ use this to specify the account ID of a source account. If you do,\
              \ the operation returns the account policy for the specified account.\
              \ Currently, you can specify only one account ID in this parameter.</p>\
              \ <p>If you omit this parameter, only the policy in the current account\
              \ is returned.</p>"
      required:
      - policyType
      title: DescribeAccountPoliciesRequest
      type: object
    DescribeDestinationsResponse:
      example:
        nextToken: nextToken
        destinations: ""
      properties:
        destinations:
          allOf:
          - $ref: '#/components/schemas/Destinations'
          - description: The destinations.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      type: object
    DescribeDestinationsRequest:
      example:
        nextToken: ""
        limit: ""
        DestinationNamePrefix: ""
      properties:
        DestinationNamePrefix:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          - description: "The prefix to match. If you don't specify a value, no prefix\
              \ filter is applied."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token for the next set of items to return. (You received
              this token from a previous call.)
        limit:
          allOf:
          - $ref: '#/components/schemas/DescribeLimit'
          - description: "The maximum number of items returned. If you don't specify\
              \ a value, the default maximum value of 50 items is used."
      title: DescribeDestinationsRequest
      type: object
    DescribeExportTasksResponse:
      example:
        nextToken: nextToken
        exportTasks: ""
      properties:
        exportTasks:
          allOf:
          - $ref: '#/components/schemas/ExportTasks'
          - description: The export tasks.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      type: object
    DescribeExportTasksRequest:
      example:
        nextToken: ""
        limit: ""
        taskId: ""
        statusCode: ""
      properties:
        taskId:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          - description: The ID of the export task. Specifying a task ID filters the
              results to one or zero export tasks.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/ExportTaskStatusCode'
          - description: The status code of the export task. Specifying a status code
              filters the results to zero or more export tasks.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token for the next set of items to return. (You received
              this token from a previous call.)
        limit:
          allOf:
          - $ref: '#/components/schemas/DescribeLimit'
          - description: "The maximum number of items returned. If you don't specify\
              \ a value, the default is up to 50 items."
      title: DescribeExportTasksRequest
      type: object
    DescribeLogGroupsResponse:
      example:
        nextToken: nextToken
        logGroups: ""
      properties:
        logGroups:
          allOf:
          - $ref: '#/components/schemas/LogGroups'
          - description: "<p>The log groups.</p> <p>If the <code>retentionInDays</code>\
              \ value is not included for a log group, then that log group's events\
              \ do not expire.</p>"
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      type: object
    DescribeLogGroupsRequest:
      example:
        logGroupNamePrefix: ""
        includeLinkedAccounts: ""
        nextToken: ""
        limit: ""
        logGroupNamePattern: ""
        accountIdentifiers: ""
      properties:
        accountIdentifiers:
          allOf:
          - $ref: '#/components/schemas/AccountIds'
          - description: "When <code>includeLinkedAccounts</code> is set to <code>True</code>,\
              \ use this parameter to specify the list of accounts to search. You\
              \ can specify as many as 20 account IDs in the array. "
        logGroupNamePrefix:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: <p>The prefix to match.</p> <note> <p> <code>logGroupNamePrefix</code>
              and <code>logGroupNamePattern</code> are mutually exclusive. Only one
              of these parameters can be passed. </p> </note>
        logGroupNamePattern:
          allOf:
          - $ref: '#/components/schemas/LogGroupNamePattern'
          - description: "<p>If you specify a string for this parameter, the operation\
              \ returns only log groups that have names that match the string based\
              \ on a case-sensitive substring search. For example, if you specify\
              \ <code>Foo</code>, log groups named <code>FooBar</code>, <code>aws/Foo</code>,\
              \ and <code>GroupFoo</code> would match, but <code>foo</code>, <code>F/o/o</code>\
              \ and <code>Froo</code> would not match.</p> <p>If you specify <code>logGroupNamePattern</code>\
              \ in your request, then only <code>arn</code>, <code>creationTime</code>,\
              \ and <code>logGroupName</code> are included in the response. </p> <note>\
              \ <p> <code>logGroupNamePattern</code> and <code>logGroupNamePrefix</code>\
              \ are mutually exclusive. Only one of these parameters can be passed.\
              \ </p> </note>"
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token for the next set of items to return. (You received
              this token from a previous call.)
        limit:
          allOf:
          - $ref: '#/components/schemas/DescribeLimit'
          - description: "The maximum number of items returned. If you don't specify\
              \ a value, the default is up to 50 items."
        includeLinkedAccounts:
          allOf:
          - $ref: '#/components/schemas/IncludeLinkedAccounts'
          - description: "<p>If you are using a monitoring account, set this to <code>True</code>\
              \ to have the operation return log groups in the accounts listed in\
              \ <code>accountIdentifiers</code>.</p> <p>If this parameter is set to\
              \ <code>true</code> and <code>accountIdentifiers</code> contains a null\
              \ value, the operation returns all log groups in the monitoring account\
              \ and all log groups in all source accounts that are linked to the monitoring\
              \ account. </p>"
      title: DescribeLogGroupsRequest
      type: object
    DescribeLogStreamsResponse:
      example:
        logStreams: ""
        nextToken: nextToken
      properties:
        logStreams:
          allOf:
          - $ref: '#/components/schemas/LogStreams'
          - description: The log streams.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      type: object
    DescribeLogStreamsRequest:
      example:
        logGroupName: ""
        logStreamNamePrefix: ""
        nextToken: ""
        limit: ""
        orderBy: ""
        logGroupIdentifier: ""
        descending: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: "<p>The name of the log group.</p> <note> <p> You must include\
              \ either <code>logGroupIdentifier</code> or <code>logGroupName</code>,\
              \ but not both. </p> </note>"
        logGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifier'
          - description: "<p>Specify either the name or ARN of the log group to view.\
              \ If the log group is in a source account and you are using a monitoring\
              \ account, you must use the log group ARN.</p> <note> <p> You must include\
              \ either <code>logGroupIdentifier</code> or <code>logGroupName</code>,\
              \ but not both. </p> </note>"
        logStreamNamePrefix:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: "<p>The prefix to match.</p> <p>If <code>orderBy</code> is\
              \ <code>LastEventTime</code>, you cannot specify this parameter.</p>"
        orderBy:
          allOf:
          - $ref: '#/components/schemas/OrderBy'
          - description: "<p>If the value is <code>LogStreamName</code>, the results\
              \ are ordered by log stream name. If the value is <code>LastEventTime</code>,\
              \ the results are ordered by the event time. The default value is <code>LogStreamName</code>.</p>\
              \ <p>If you order the results by event time, you cannot specify the\
              \ <code>logStreamNamePrefix</code> parameter.</p> <p> <code>lastEventTimestamp</code>\
              \ represents the time of the most recent log event in the log stream\
              \ in CloudWatch Logs. This number is expressed as the number of milliseconds\
              \ after <code>Jan 1, 1970 00:00:00 UTC</code>. <code>lastEventTimestamp</code>\
              \ updates on an eventual consistency basis. It typically updates in\
              \ less than an hour from ingestion, but in rare situations might take\
              \ longer.</p>"
        descending:
          allOf:
          - $ref: '#/components/schemas/Descending'
          - description: "If the value is true, results are returned in descending\
              \ order. If the value is to false, results are returned in ascending\
              \ order. The default value is false."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token for the next set of items to return. (You received
              this token from a previous call.)
        limit:
          allOf:
          - $ref: '#/components/schemas/DescribeLimit'
          - description: "The maximum number of items returned. If you don't specify\
              \ a value, the default is up to 50 items."
      title: DescribeLogStreamsRequest
      type: object
    DescribeMetricFiltersResponse:
      example:
        nextToken: nextToken
        metricFilters: ""
      properties:
        metricFilters:
          allOf:
          - $ref: '#/components/schemas/MetricFilters'
          - description: The metric filters.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      type: object
    DescribeMetricFiltersRequest:
      example:
        metricName: ""
        logGroupName: ""
        nextToken: ""
        limit: ""
        metricNamespace: ""
        filterNamePrefix: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        filterNamePrefix:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          - description: The prefix to match. CloudWatch Logs uses the value that
              you set here only if you also include the <code>logGroupName</code>
              parameter in your request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token for the next set of items to return. (You received
              this token from a previous call.)
        limit:
          allOf:
          - $ref: '#/components/schemas/DescribeLimit'
          - description: "The maximum number of items returned. If you don't specify\
              \ a value, the default is up to 50 items."
        metricName:
          allOf:
          - $ref: '#/components/schemas/MetricName'
          - description: "Filters results to include only those with the specified\
              \ metric name. If you include this parameter in your request, you must\
              \ also include the <code>metricNamespace</code> parameter."
        metricNamespace:
          allOf:
          - $ref: '#/components/schemas/MetricNamespace'
          - description: "Filters results to include only those in the specified namespace.\
              \ If you include this parameter in your request, you must also include\
              \ the <code>metricName</code> parameter."
      title: DescribeMetricFiltersRequest
      type: object
    DescribeQueriesResponse:
      example:
        nextToken: nextToken
        queries: ""
      properties:
        queries:
          allOf:
          - $ref: '#/components/schemas/QueryInfoList'
          - description: The list of queries that match the request.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      type: object
    DescribeQueriesRequest:
      example:
        logGroupName: ""
        maxResults: ""
        nextToken: nextToken
        status: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: Limits the returned queries to only those for the specified
              log group.
        status:
          allOf:
          - $ref: '#/components/schemas/QueryStatus'
          - description: "Limits the returned queries to only those that have the\
              \ specified status. Valid values are <code>Cancelled</code>, <code>Complete</code>,\
              \ <code>Failed</code>, <code>Running</code>, and <code>Scheduled</code>."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/DescribeQueriesMaxResults'
          - description: Limits the number of returned queries to the specified number.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      title: DescribeQueriesRequest
      type: object
    DescribeQueryDefinitionsResponse:
      example:
        nextToken: nextToken
        queryDefinitions: ""
      properties:
        queryDefinitions:
          allOf:
          - $ref: '#/components/schemas/QueryDefinitionList'
          - description: The list of query definitions that match your request.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      type: object
    DescribeQueryDefinitionsRequest:
      example:
        maxResults: ""
        nextToken: nextToken
        queryDefinitionNamePrefix: ""
      properties:
        queryDefinitionNamePrefix:
          allOf:
          - $ref: '#/components/schemas/QueryDefinitionName'
          - description: Use this parameter to filter your results to only the query
              definitions that have names that start with the prefix you specify.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/QueryListMaxResults'
          - description: Limits the number of returned query definitions to the specified
              number.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      title: DescribeQueryDefinitionsRequest
      type: object
    DescribeResourcePoliciesResponse:
      example:
        nextToken: nextToken
        resourcePolicies: ""
      properties:
        resourcePolicies:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicies'
          - description: The resource policies that exist in this account.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      type: object
    DescribeResourcePoliciesRequest:
      example:
        nextToken: nextToken
        limit: ""
      properties:
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
        limit:
          allOf:
          - $ref: '#/components/schemas/DescribeLimit'
          - description: The maximum number of resource policies to be displayed with
              one call of this API.
      title: DescribeResourcePoliciesRequest
      type: object
    DescribeSubscriptionFiltersResponse:
      example:
        subscriptionFilters: ""
        nextToken: nextToken
      properties:
        subscriptionFilters:
          allOf:
          - $ref: '#/components/schemas/SubscriptionFilters'
          - description: The subscription filters.
        nextToken:
          description: The token for the next set of items to return. The token expires
            after 24 hours.
          minLength: 1
          type: string
      type: object
    DescribeSubscriptionFiltersRequest:
      example:
        logGroupName: ""
        nextToken: ""
        limit: ""
        filterNamePrefix: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        filterNamePrefix:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          - description: "The prefix to match. If you don't specify a value, no prefix\
              \ filter is applied."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token for the next set of items to return. (You received
              this token from a previous call.)
        limit:
          allOf:
          - $ref: '#/components/schemas/DescribeLimit'
          - description: "The maximum number of items returned. If you don't specify\
              \ a value, the default is up to 50 items."
      required:
      - logGroupName
      title: DescribeSubscriptionFiltersRequest
      type: object
    DisassociateKmsKeyRequest:
      example:
        logGroupName: ""
        resourceIdentifier: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: "<p>The name of the log group.</p> <p>In your <code>DisassociateKmsKey</code>\
              \ operation, you must specify either the <code>resourceIdentifier</code>\
              \ parameter or the <code>logGroup</code> parameter, but you can't specify\
              \ both.</p>"
        resourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceIdentifier'
          - description: "<p>Specifies the target for this operation. You must specify\
              \ one of the following:</p> <ul> <li> <p>Specify the ARN of a log group\
              \ to stop having CloudWatch Logs use the KMS key to encrypt log events\
              \ that are ingested and stored by that log group. After you run this\
              \ operation, CloudWatch Logs encrypts ingested log events with the default\
              \ CloudWatch Logs method. The log group ARN must be in the following\
              \ format. Replace <i>REGION</i> and <i>ACCOUNT_ID</i> with your Region\
              \ and account ID.</p> <p> <code>arn:aws:logs:<i>REGION</i>:<i>ACCOUNT_ID</i>:log-group:<i>LOG_GROUP_NAME</i>\
              \ </code> </p> </li> <li> <p>Specify the following ARN to stop using\
              \ this key to encrypt the results of future <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html\"\
              >StartQuery</a> operations in this account. Replace <i>REGION</i> and\
              \ <i>ACCOUNT_ID</i> with your Region and account ID.</p> <p> <code>arn:aws:logs:<i>REGION</i>:<i>ACCOUNT_ID</i>:query-result:*</code>\
              \ </p> </li> </ul> <p>In your <code>DisssociateKmsKey</code> operation,\
              \ you must specify either the <code>resourceIdentifier</code> parameter\
              \ or the <code>logGroup</code> parameter, but you can't specify both.</p>"
      title: DisassociateKmsKeyRequest
      type: object
    FilterLogEventsResponse:
      example:
        searchedLogStreams: ""
        nextToken: ""
        events: ""
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/FilteredLogEvents'
          - description: The matched events.
        searchedLogStreams:
          allOf:
          - $ref: '#/components/schemas/SearchedLogStreams'
          - description: "<p> <b>Important</b> As of May 15, 2020, this parameter\
              \ is no longer supported. This parameter returns an empty list.</p>\
              \ <p>Indicates which log streams have been searched and whether each\
              \ has been searched completely.</p>"
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token to use when requesting the next set of items. The
              token expires after 24 hours.
      type: object
    FilterLogEventsRequest:
      example:
        filterPattern: ""
        logGroupName: ""
        logStreamNamePrefix: ""
        nextToken: ""
        limit: ""
        logStreamNames: ""
        startTime: ""
        interleaved: ""
        endTime: ""
        unmask: ""
        logGroupIdentifier: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: "<p>The name of the log group to search.</p> <note> <p> You\
              \ must include either <code>logGroupIdentifier</code> or <code>logGroupName</code>,\
              \ but not both. </p> </note>"
        logGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifier'
          - description: "<p>Specify either the name or ARN of the log group to view\
              \ log events from. If the log group is in a source account and you are\
              \ using a monitoring account, you must use the log group ARN.</p> <note>\
              \ <p> You must include either <code>logGroupIdentifier</code> or <code>logGroupName</code>,\
              \ but not both. </p> </note>"
        logStreamNames:
          allOf:
          - $ref: '#/components/schemas/InputLogStreamNames'
          - description: "<p>Filters the results to only logs from the log streams\
              \ in this list.</p> <p>If you specify a value for both <code>logStreamNamePrefix</code>\
              \ and <code>logStreamNames</code>, the action returns an <code>InvalidParameterException</code>\
              \ error.</p>"
        logStreamNamePrefix:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: "<p>Filters the results to include only events from log streams\
              \ that have names starting with this prefix.</p> <p>If you specify a\
              \ value for both <code>logStreamNamePrefix</code> and <code>logStreamNames</code>,\
              \ but the value for <code>logStreamNamePrefix</code> does not match\
              \ any log stream names specified in <code>logStreamNames</code>, the\
              \ action returns an <code>InvalidParameterException</code> error.</p>"
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The start of the time range, expressed as the number of\
              \ milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with\
              \ a timestamp before this time are not returned."
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The end of the time range, expressed as the number of milliseconds\
              \ after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp\
              \ later than this time are not returned."
        filterPattern:
          allOf:
          - $ref: '#/components/schemas/FilterPattern'
          - description: "<p>The filter pattern to use. For more information, see\
              \ <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html\"\
              >Filter and Pattern Syntax</a>.</p> <p>If not provided, all the events\
              \ are matched.</p>"
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token for the next set of events to return. (You received
              this token from a previous call.)
        limit:
          allOf:
          - $ref: '#/components/schemas/EventsLimit'
          - description: "The maximum number of events to return. The default is 10,000\
              \ events."
        interleaved:
          allOf:
          - $ref: '#/components/schemas/Interleaved'
          - deprecated: true
            description: "<p>If the value is true, the operation attempts to provide\
              \ responses that contain events from multiple log streams within the\
              \ log group, interleaved in a single response. If the value is false,\
              \ all the matched log events in the first log stream are searched first,\
              \ then those in the next log stream, and so on.</p> <p> <b>Important</b>\
              \ As of June 17, 2019, this parameter is ignored and the value is assumed\
              \ to be true. The response from this operation always interleaves events\
              \ from multiple log streams within a log group.</p>Starting on June\
              \ 17, 2019, this parameter will be ignored and the value will be assumed\
              \ to be true. The response from this operation will always interleave\
              \ events from multiple log streams within a log group."
        unmask:
          allOf:
          - $ref: '#/components/schemas/Unmask'
          - description: "<p>Specify <code>true</code> to display the log event fields\
              \ with all sensitive data unmasked and visible. The default is <code>false</code>.</p>\
              \ <p>To use this operation with this parameter, you must be signed into\
              \ an account with the <code>logs:Unmask</code> permission.</p>"
      title: FilterLogEventsRequest
      type: object
    GetDataProtectionPolicyResponse:
      example:
        policyDocument: ""
        lastUpdatedTime: ""
        logGroupIdentifier: ""
      properties:
        logGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifier'
          - description: The log group name or ARN that you specified in your request.
        policyDocument:
          allOf:
          - $ref: '#/components/schemas/DataProtectionPolicyDocument'
          - description: The data protection policy document for this log group.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that this policy was most recently updated.
      type: object
    GetDataProtectionPolicyRequest:
      example:
        logGroupIdentifier: ""
      properties:
        logGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifier'
          - description: The name or ARN of the log group that contains the data protection
              policy that you want to see.
      required:
      - logGroupIdentifier
      title: GetDataProtectionPolicyRequest
      type: object
    GetLogEventsResponse:
      example:
        nextForwardToken: ""
        nextBackwardToken: ""
        events: ""
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/OutputLogEvents'
          - description: The events.
        nextForwardToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The token for the next set of items in the forward direction.\
              \ The token expires after 24 hours. If you have reached the end of the\
              \ stream, it returns the same token you passed in."
        nextBackwardToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The token for the next set of items in the backward direction.\
              \ The token expires after 24 hours. This token is not null. If you have\
              \ reached the end of the stream, it returns the same token you passed\
              \ in."
      type: object
    GetLogEventsRequest:
      example:
        startFromHead: ""
        logGroupName: ""
        logStreamName: ""
        nextToken: ""
        limit: ""
        startTime: ""
        endTime: ""
        unmask: ""
        logGroupIdentifier: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: "<p>The name of the log group.</p> <note> <p> You must include\
              \ either <code>logGroupIdentifier</code> or <code>logGroupName</code>,\
              \ but not both. </p> </note>"
        logGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifier'
          - description: "<p>Specify either the name or ARN of the log group to view\
              \ events from. If the log group is in a source account and you are using\
              \ a monitoring account, you must use the log group ARN.</p> <note> <p>\
              \ You must include either <code>logGroupIdentifier</code> or <code>logGroupName</code>,\
              \ but not both. </p> </note>"
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: The name of the log stream.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The start of the time range, expressed as the number of\
              \ milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with\
              \ a timestamp equal to this time or later than this time are included.\
              \ Events with a timestamp earlier than this time are not included."
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The end of the time range, expressed as the number of milliseconds\
              \ after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp\
              \ equal to or later than this time are not included."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token for the next set of items to return. (You received
              this token from a previous call.)
        limit:
          allOf:
          - $ref: '#/components/schemas/EventsLimit'
          - description: "The maximum number of log events returned. If you don't\
              \ specify a limit, the default is as many log events as can fit in a\
              \ response size of 1 MB (up to 10,000 log events)."
        startFromHead:
          allOf:
          - $ref: '#/components/schemas/StartFromHead'
          - description: "<p>If the value is true, the earliest log events are returned\
              \ first. If the value is false, the latest log events are returned first.\
              \ The default value is false.</p> <p>If you are using a previous <code>nextForwardToken</code>\
              \ value as the <code>nextToken</code> in this operation, you must specify\
              \ <code>true</code> for <code>startFromHead</code>.</p>"
        unmask:
          allOf:
          - $ref: '#/components/schemas/Unmask'
          - description: "<p>Specify <code>true</code> to display the log event fields\
              \ with all sensitive data unmasked and visible. The default is <code>false</code>.</p>\
              \ <p>To use this operation with this parameter, you must be signed into\
              \ an account with the <code>logs:Unmask</code> permission.</p>"
      required:
      - logStreamName
      title: GetLogEventsRequest
      type: object
    GetLogGroupFieldsResponse:
      example:
        logGroupFields: ""
      properties:
        logGroupFields:
          allOf:
          - $ref: '#/components/schemas/LogGroupFieldList'
          - description: "The array of fields found in the query. Each object in the\
              \ array contains the name of the field, along with the percentage of\
              \ time it appeared in the log events that were queried."
      type: object
    GetLogGroupFieldsRequest:
      example:
        logGroupName: ""
        time: ""
        logGroupIdentifier: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: "<p>The name of the log group to search.</p> <note> <p> You\
              \ must include either <code>logGroupIdentifier</code> or <code>logGroupName</code>,\
              \ but not both. </p> </note>"
        time:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The time to set as the center of the query. If you specify\
              \ <code>time</code>, the 8 minutes before and 8 minutes after this time\
              \ are searched. If you omit <code>time</code>, the most recent 15 minutes\
              \ up to the current time are searched.</p> <p>The <code>time</code>\
              \ value is specified as epoch time, which is the number of seconds since\
              \ <code>January 1, 1970, 00:00:00 UTC</code>.</p>"
        logGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifier'
          - description: "<p>Specify either the name or ARN of the log group to view.\
              \ If the log group is in a source account and you are using a monitoring\
              \ account, you must specify the ARN.</p> <note> <p> You must include\
              \ either <code>logGroupIdentifier</code> or <code>logGroupName</code>,\
              \ but not both. </p> </note>"
      title: GetLogGroupFieldsRequest
      type: object
    GetLogRecordResponse:
      example:
        logRecord: ""
      properties:
        logRecord:
          allOf:
          - $ref: '#/components/schemas/LogRecord'
          - description: "The requested log event, as a JSON string."
      type: object
    GetLogRecordRequest:
      example:
        unmask: ""
        logRecordPointer: ""
      properties:
        logRecordPointer:
          allOf:
          - $ref: '#/components/schemas/LogRecordPointer'
          - description: "The pointer corresponding to the log event record you want\
              \ to retrieve. You get this from the response of a <code>GetQueryResults</code>\
              \ operation. In that response, the value of the <code>@ptr</code> field\
              \ for a log event is the value to use as <code>logRecordPointer</code>\
              \ to retrieve that complete log event record."
        unmask:
          allOf:
          - $ref: '#/components/schemas/Unmask'
          - description: "<p>Specify <code>true</code> to display the log event fields\
              \ with all sensitive data unmasked and visible. The default is <code>false</code>.</p>\
              \ <p>To use this operation with this parameter, you must be signed into\
              \ an account with the <code>logs:Unmask</code> permission.</p>"
      required:
      - logRecordPointer
      title: GetLogRecordRequest
      type: object
    GetQueryResultsResponse:
      example:
        encryptionKey: ""
        results: ""
        statistics:
          bytesScanned: ""
          recordsScanned: ""
          recordsMatched: ""
        status: ""
      properties:
        results:
          allOf:
          - $ref: '#/components/schemas/QueryResults'
          - description: <p>The log events that matched the query criteria during
              the most recent time it ran.</p> <p>The <code>results</code> value is
              an array of arrays. Each log event is one object in the top-level array.
              Each of these log event objects is an array of <code>field</code>/<code>value</code>
              pairs.</p>
        statistics:
          $ref: '#/components/schemas/GetQueryResultsResponse_statistics'
        status:
          allOf:
          - $ref: '#/components/schemas/QueryStatus'
          - description: "<p>The status of the most recent running of the query. Possible\
              \ values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>,\
              \ <code>Running</code>, <code>Scheduled</code>, <code>Timeout</code>,\
              \ and <code>Unknown</code>.</p> <p>Queries time out after 60 minutes\
              \ of runtime. To avoid having your queries time out, reduce the time\
              \ range being searched or partition your query into a number of queries.</p>"
        encryptionKey:
          allOf:
          - $ref: '#/components/schemas/EncryptionKey'
          - description: "If you associated an KMS key with the CloudWatch Logs Insights\
              \ query results in this account, this field displays the ARN of the\
              \ key that's used to encrypt the query results when <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html\"\
              >StartQuery</a> stores them."
      type: object
    GetQueryResultsRequest:
      example:
        queryId: ""
      properties:
        queryId:
          allOf:
          - $ref: '#/components/schemas/QueryId'
          - description: The ID number of the query.
      required:
      - queryId
      title: GetQueryResultsRequest
      type: object
    ListTagsForResourceResponse:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The list of tags associated with the requested resource.&gt;
      type: object
    ListTagsForResourceRequest:
      example:
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          - description: "<p>The ARN of the resource that you want to view tags for.</p>\
              \ <p>The ARN format of a log group is <code>arn:aws:logs:<i>Region</i>:<i>account-id</i>:log-group:<i>log-group-name</i>\
              \ </code> </p> <p>The ARN format of a destination is <code>arn:aws:logs:<i>Region</i>:<i>account-id</i>:destination:<i>destination-name</i>\
              \ </code> </p> <p>For more information about ARN format, see <a href=\"\
              https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html\"\
              >CloudWatch Logs resources and operations</a>.</p>"
      required:
      - resourceArn
      title: ListTagsForResourceRequest
      type: object
    ListTagsLogGroupResponse:
      deprecated: true
      description: Please use the generic tagging API model ListTagsForResourceRequest
        and ListTagsForResourceResponse
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The tags for the log group.
      type: object
    ListTagsLogGroupRequest:
      deprecated: true
      description: Please use the generic tagging API model ListTagsForResourceRequest
        and ListTagsForResourceResponse
      example:
        logGroupName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
      required:
      - logGroupName
      title: ListTagsLogGroupRequest
      type: object
    PutAccountPolicyResponse:
      example:
        accountPolicy:
          policyDocument: ""
          accountId: ""
          policyName: ""
          policyType: ""
          scope: ""
          lastUpdatedTime: ""
      properties:
        accountPolicy:
          $ref: '#/components/schemas/PutAccountPolicyResponse_accountPolicy'
      type: object
    PutAccountPolicyRequest:
      example:
        policyDocument: ""
        policyName: ""
        policyType: ""
        scope: ""
      properties:
        policyName:
          allOf:
          - $ref: '#/components/schemas/PolicyName'
          - description: A name for the policy. This must be unique within the account.
        policyDocument:
          allOf:
          - $ref: '#/components/schemas/AccountPolicyDocument'
          - description: "<p>Specify the data protection policy, in JSON.</p> <p>This\
              \ policy must include two JSON blocks:</p> <ul> <li> <p>The first block\
              \ must include both a <code>DataIdentifer</code> array and an <code>Operation</code>\
              \ property with an <code>Audit</code> action. The <code>DataIdentifer</code>\
              \ array lists the types of sensitive data that you want to mask. For\
              \ more information about the available options, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data-types.html\"\
              >Types of data that you can mask</a>.</p> <p>The <code>Operation</code>\
              \ property with an <code>Audit</code> action is required to find the\
              \ sensitive data terms. This <code>Audit</code> action must contain\
              \ a <code>FindingsDestination</code> object. You can optionally use\
              \ that <code>FindingsDestination</code> object to list one or more destinations\
              \ to send audit findings to. If you specify destinations such as log\
              \ groups, Kinesis Data Firehose streams, and S3 buckets, they must already\
              \ exist.</p> </li> <li> <p>The second block must include both a <code>DataIdentifer</code>\
              \ array and an <code>Operation</code> property with an <code>Deidentify</code>\
              \ action. The <code>DataIdentifer</code> array must exactly match the\
              \ <code>DataIdentifer</code> array in the first block of the policy.</p>\
              \ <p>The <code>Operation</code> property with the <code>Deidentify</code>\
              \ action is what actually masks the data, and it must contain the <code>\
              \ \"MaskConfig\": {}</code> object. The <code> \"MaskConfig\": {}</code>\
              \ object must be empty.</p> </li> </ul> <p>For an example data protection\
              \ policy, see the <b>Examples</b> section on this page.</p> <important>\
              \ <p>The contents of the two <code>DataIdentifer</code> arrays must\
              \ match exactly.</p> </important> <p>In addition to the two JSON blocks,\
              \ the <code>policyDocument</code> can also include <code>Name</code>,\
              \ <code>Description</code>, and <code>Version</code> fields. The <code>Name</code>\
              \ is different than the operation's <code>policyName</code> parameter,\
              \ and is used as a dimension when CloudWatch Logs reports audit findings\
              \ metrics to CloudWatch.</p> <p>The JSON specified in <code>policyDocument</code>\
              \ can be up to 30,720 characters.</p>"
        policyType:
          allOf:
          - $ref: '#/components/schemas/PolicyType'
          - description: Currently the only valid value for this parameter is <code>DATA_PROTECTION_POLICY</code>.
        scope:
          allOf:
          - $ref: '#/components/schemas/Scope'
          - description: "Currently the only valid value for this parameter is <code>ALL</code>,\
              \ which specifies that the data protection policy applies to all log\
              \ groups in the account. If you omit this parameter, the default of\
              \ <code>ALL</code> is used."
      required:
      - policyDocument
      - policyName
      - policyType
      title: PutAccountPolicyRequest
      type: object
    PutDataProtectionPolicyResponse:
      example:
        policyDocument: ""
        lastUpdatedTime: ""
        logGroupIdentifier: ""
      properties:
        logGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifier'
          - description: The log group name or ARN that you specified in your request.
        policyDocument:
          allOf:
          - $ref: '#/components/schemas/DataProtectionPolicyDocument'
          - description: The data protection policy used for this log group.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that this policy was most recently updated.
      type: object
    PutDataProtectionPolicyRequest:
      example:
        policyDocument: ""
        logGroupIdentifier: ""
      properties:
        logGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifier'
          - description: Specify either the log group name or log group ARN.
        policyDocument:
          allOf:
          - $ref: '#/components/schemas/DataProtectionPolicyDocument'
          - description: "<p>Specify the data protection policy, in JSON.</p> <p>This\
              \ policy must include two JSON blocks:</p> <ul> <li> <p>The first block\
              \ must include both a <code>DataIdentifer</code> array and an <code>Operation</code>\
              \ property with an <code>Audit</code> action. The <code>DataIdentifer</code>\
              \ array lists the types of sensitive data that you want to mask. For\
              \ more information about the available options, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data-types.html\"\
              >Types of data that you can mask</a>.</p> <p>The <code>Operation</code>\
              \ property with an <code>Audit</code> action is required to find the\
              \ sensitive data terms. This <code>Audit</code> action must contain\
              \ a <code>FindingsDestination</code> object. You can optionally use\
              \ that <code>FindingsDestination</code> object to list one or more destinations\
              \ to send audit findings to. If you specify destinations such as log\
              \ groups, Kinesis Data Firehose streams, and S3 buckets, they must already\
              \ exist.</p> </li> <li> <p>The second block must include both a <code>DataIdentifer</code>\
              \ array and an <code>Operation</code> property with an <code>Deidentify</code>\
              \ action. The <code>DataIdentifer</code> array must exactly match the\
              \ <code>DataIdentifer</code> array in the first block of the policy.</p>\
              \ <p>The <code>Operation</code> property with the <code>Deidentify</code>\
              \ action is what actually masks the data, and it must contain the <code>\
              \ \"MaskConfig\": {}</code> object. The <code> \"MaskConfig\": {}</code>\
              \ object must be empty.</p> </li> </ul> <p>For an example data protection\
              \ policy, see the <b>Examples</b> section on this page.</p> <important>\
              \ <p>The contents of the two <code>DataIdentifer</code> arrays must\
              \ match exactly.</p> </important> <p>In addition to the two JSON blocks,\
              \ the <code>policyDocument</code> can also include <code>Name</code>,\
              \ <code>Description</code>, and <code>Version</code> fields. The <code>Name</code>\
              \ is used as a dimension when CloudWatch Logs reports audit findings\
              \ metrics to CloudWatch.</p> <p>The JSON specified in <code>policyDocument</code>\
              \ can be up to 30,720 characters.</p>"
      required:
      - logGroupIdentifier
      - policyDocument
      title: PutDataProtectionPolicyRequest
      type: object
    PutDestinationResponse:
      example:
        destination:
          creationTime: ""
          roleArn: ""
          destinationName: ""
          accessPolicy: ""
          arn: ""
          targetArn: ""
      properties:
        destination:
          $ref: '#/components/schemas/PutDestinationResponse_destination'
      type: object
    PutDestinationRequest:
      example:
        roleArn: ""
        destinationName: ""
        targetArn: ""
        tags: ""
      properties:
        destinationName:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          - description: A name for the destination.
        targetArn:
          allOf:
          - $ref: '#/components/schemas/TargetArn'
          - description: The ARN of an Amazon Kinesis stream to which to deliver matching
              log events.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The ARN of an IAM role that grants CloudWatch Logs permissions
              to call the Amazon Kinesis <code>PutRecord</code> operation on the destination
              stream.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "<p>An optional list of key-value pairs to associate with\
              \ the resource.</p> <p>For more information about tagging, see <a href=\"\
              https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging\
              \ Amazon Web Services resources</a> </p>"
      required:
      - destinationName
      - roleArn
      - targetArn
      title: PutDestinationRequest
      type: object
    PutDestinationPolicyRequest:
      example:
        destinationName: ""
        accessPolicy: ""
        forceUpdate: ""
      properties:
        destinationName:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          - description: A name for an existing destination.
        accessPolicy:
          allOf:
          - $ref: '#/components/schemas/AccessPolicy'
          - description: An IAM policy document that authorizes cross-account users
              to deliver their log events to the associated destination. This can
              be up to 5120 bytes.
        forceUpdate:
          allOf:
          - $ref: '#/components/schemas/ForceUpdate'
          - description: "<p>Specify true if you are updating an existing destination\
              \ policy to grant permission to an organization ID instead of granting\
              \ permission to individual Amazon Web Services accounts. Before you\
              \ update a destination policy this way, you must first update the subscription\
              \ filters in the accounts that send logs to this destination. If you\
              \ do not, the subscription filters might stop working. By specifying\
              \ <code>true</code> for <code>forceUpdate</code>, you are affirming\
              \ that you have already updated the subscription filters. For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Cross-Account-Log_Subscription-Update.html\"\
              > Updating an existing cross-account subscription</a> </p> <p>If you\
              \ omit this parameter, the default of <code>false</code> is used.</p>"
      required:
      - accessPolicy
      - destinationName
      title: PutDestinationPolicyRequest
      type: object
    PutLogEventsResponse:
      example:
        nextSequenceToken: ""
        rejectedLogEventsInfo:
          tooOldLogEventEndIndex: ""
          tooNewLogEventStartIndex: ""
          expiredLogEventEndIndex: ""
      properties:
        nextSequenceToken:
          allOf:
          - $ref: '#/components/schemas/SequenceToken'
          - description: <p>The next sequence token.</p> <important> <p>This field
              has been deprecated.</p> <p>The sequence token is now ignored in <code>PutLogEvents</code>
              actions. <code>PutLogEvents</code> actions are always accepted even
              if the sequence token is not valid. You can use parallel <code>PutLogEvents</code>
              actions on the same log stream and you do not need to wait for the response
              of a previous <code>PutLogEvents</code> action to obtain the <code>nextSequenceToken</code>
              value.</p> </important>
        rejectedLogEventsInfo:
          $ref: '#/components/schemas/PutLogEventsResponse_rejectedLogEventsInfo'
      type: object
    PutLogEventsRequest:
      example:
        logEvents: ""
        logGroupName: ""
        sequenceToken: ""
        logStreamName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: The name of the log stream.
        logEvents:
          allOf:
          - $ref: '#/components/schemas/InputLogEvents'
          - description: The log events.
        sequenceToken:
          allOf:
          - $ref: '#/components/schemas/SequenceToken'
          - description: <p>The sequence token obtained from the response of the previous
              <code>PutLogEvents</code> call.</p> <important> <p>The <code>sequenceToken</code>
              parameter is now ignored in <code>PutLogEvents</code> actions. <code>PutLogEvents</code>
              actions are now accepted and never return <code>InvalidSequenceTokenException</code>
              or <code>DataAlreadyAcceptedException</code> even if the sequence token
              is not valid.</p> </important>
      required:
      - logEvents
      - logGroupName
      - logStreamName
      title: PutLogEventsRequest
      type: object
    InvalidSequenceTokenException: {}
    DataAlreadyAcceptedException: {}
    UnrecognizedClientException: {}
    PutMetricFilterRequest:
      example:
        filterPattern: ""
        metricTransformations: ""
        logGroupName: ""
        filterName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        filterName:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          - description: A name for the metric filter.
        filterPattern:
          allOf:
          - $ref: '#/components/schemas/FilterPattern'
          - description: A filter pattern for extracting metric data out of ingested
              log events.
        metricTransformations:
          allOf:
          - $ref: '#/components/schemas/MetricTransformations'
          - description: A collection of information that defines how metric data
              gets emitted.
      required:
      - filterName
      - filterPattern
      - logGroupName
      - metricTransformations
      title: PutMetricFilterRequest
      type: object
    PutQueryDefinitionResponse:
      example:
        queryDefinitionId: ""
      properties:
        queryDefinitionId:
          allOf:
          - $ref: '#/components/schemas/QueryId'
          - description: The ID of the query definition.
      type: object
    PutQueryDefinitionRequest:
      example:
        logGroupNames: ""
        queryDefinitionId: ""
        name: ""
        queryString: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/QueryDefinitionName'
          - description: "A name for the query definition. If you are saving numerous\
              \ query definitions, we recommend that you name them. This way, you\
              \ can find the ones you want by using the first part of the name as\
              \ a filter in the <code>queryDefinitionNamePrefix</code> parameter of\
              \ <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html\"\
              >DescribeQueryDefinitions</a>."
        queryDefinitionId:
          allOf:
          - $ref: '#/components/schemas/QueryId'
          - description: "<p>If you are updating a query definition, use this parameter\
              \ to specify the ID of the query definition that you want to update.\
              \ You can use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html\"\
              >DescribeQueryDefinitions</a> to retrieve the IDs of your saved query\
              \ definitions.</p> <p>If you are creating a query definition, do not\
              \ specify this parameter. CloudWatch generates a unique ID for the new\
              \ query definition and include it in the response to this operation.</p>"
        logGroupNames:
          allOf:
          - $ref: '#/components/schemas/LogGroupNames'
          - description: "<p>Use this parameter to include specific log groups as\
              \ part of your query definition.</p> <p>If you are updating a query\
              \ definition and you omit this parameter, then the updated definition\
              \ will contain no log groups.</p>"
        queryString:
          allOf:
          - $ref: '#/components/schemas/QueryDefinitionString'
          - description: "The query string to use for this definition. For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\"\
              >CloudWatch Logs Insights Query Syntax</a>."
      required:
      - name
      - queryString
      title: PutQueryDefinitionRequest
      type: object
    PutResourcePolicyResponse:
      example:
        resourcePolicy:
          policyDocument: ""
          policyName: ""
          lastUpdatedTime: ""
      properties:
        resourcePolicy:
          $ref: '#/components/schemas/PutResourcePolicyResponse_resourcePolicy'
      type: object
    PutResourcePolicyRequest:
      example:
        policyDocument: ""
        policyName: ""
      properties:
        policyName:
          allOf:
          - $ref: '#/components/schemas/PolicyName'
          - description: Name of the new policy. This parameter is required.
        policyDocument:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          - description: "<p>Details of the new policy, including the identity of\
              \ the principal that is enabled to put logs to this account. This is\
              \ formatted as a JSON string. This parameter is required.</p> <p>The\
              \ following example creates a resource policy enabling the Route 53\
              \ service to put DNS query logs in to the specified log group. Replace\
              \ <code>\"logArn\"</code> with the ARN of your CloudWatch Logs resource,\
              \ such as a log group or log stream.</p> <p>CloudWatch Logs also supports\
              \ <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourcearn\"\
              >aws:SourceArn</a> and <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourceaccount\"\
              >aws:SourceAccount</a> condition context keys.</p> <p>In the example\
              \ resource policy, you would replace the value of <code>SourceArn</code>\
              \ with the resource making the call from Route\_53 to CloudWatch Logs.\
              \ You would also replace the value of <code>SourceAccount</code> with\
              \ the Amazon Web Services account ID making that call.</p> <p/> <p>\
              \ <code>{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"\
              Route53LogsToCloudWatchLogs\", \"Effect\": \"Allow\", \"Principal\"\
              : { \"Service\": [ \"route53.amazonaws.com\" ] }, \"Action\": \"logs:PutLogEvents\"\
              , \"Resource\": \"logArn\", \"Condition\": { \"ArnLike\": { \"aws:SourceArn\"\
              : \"myRoute53ResourceArn\" }, \"StringEquals\": { \"aws:SourceAccount\"\
              : \"myAwsAccountId\" } } } ] }</code> </p>"
      title: PutResourcePolicyRequest
      type: object
    PutRetentionPolicyRequest:
      example:
        retentionInDays: 0
        logGroupName: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        retentionInDays:
          description: "<p>The number of days to retain the log events in the specified\
            \ log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150,\
            \ 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.</p>\
            \ <p>To set a log group so that its log events do not expire, use <a href=\"\
            https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html\"\
            >DeleteRetentionPolicy</a>. </p>"
          type: integer
      required:
      - logGroupName
      - retentionInDays
      title: PutRetentionPolicyRequest
      type: object
    PutSubscriptionFilterRequest:
      example:
        filterPattern: ""
        logGroupName: ""
        destinationArn: ""
        roleArn: ""
        filterName: ""
        distribution: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        filterName:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          - description: "A name for the subscription filter. If you are updating\
              \ an existing filter, you must specify the correct name in <code>filterName</code>.\
              \ To find the name of the filter currently associated with a log group,\
              \ use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeSubscriptionFilters.html\"\
              >DescribeSubscriptionFilters</a>."
        filterPattern:
          allOf:
          - $ref: '#/components/schemas/FilterPattern'
          - description: A filter pattern for subscribing to a filtered stream of
              log events.
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/DestinationArn'
          - description: "<p>The ARN of the destination to deliver matching log events\
              \ to. Currently, the supported destinations are:</p> <ul> <li> <p>An\
              \ Amazon Kinesis stream belonging to the same account as the subscription\
              \ filter, for same-account delivery.</p> </li> <li> <p>A logical destination\
              \ (specified using an ARN) belonging to a different account, for cross-account\
              \ delivery.</p> <p>If you're setting up a cross-account subscription,\
              \ the destination must have an IAM policy associated with it. The IAM\
              \ policy must allow the sender to send logs to the destination. For\
              \ more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html\"\
              >PutDestinationPolicy</a>.</p> </li> <li> <p>A Kinesis Data Firehose\
              \ delivery stream belonging to the same account as the subscription\
              \ filter, for same-account delivery.</p> </li> <li> <p>A Lambda function\
              \ belonging to the same account as the subscription filter, for same-account\
              \ delivery.</p> </li> </ul>"
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The ARN of an IAM role that grants CloudWatch Logs permissions
              to deliver ingested log events to the destination stream. You don't
              need to provide the ARN when you are working with a logical destination
              for cross-account delivery.
        distribution:
          allOf:
          - $ref: '#/components/schemas/Distribution'
          - description: "The method used to distribute log data to the destination.\
              \ By default, log data is grouped by log stream, but the grouping can\
              \ be set to random for a more even distribution. This property is only\
              \ applicable when the destination is an Amazon Kinesis data stream. "
      required:
      - destinationArn
      - filterName
      - filterPattern
      - logGroupName
      title: PutSubscriptionFilterRequest
      type: object
    StartQueryResponse:
      example:
        queryId: ""
      properties:
        queryId:
          allOf:
          - $ref: '#/components/schemas/QueryId'
          - description: 'The unique ID of the query. '
      type: object
    StartQueryRequest:
      example:
        logGroupIdentifiers: ""
        logGroupNames: ""
        logGroupName: ""
        limit: ""
        startTime: ""
        endTime: ""
        queryString: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: "<p>The log group on which to perform the query.</p> <note>\
              \ <p>A <code>StartQuery</code> operation must include exactly one of\
              \ the following parameters: <code>logGroupName</code>, <code>logGroupNames</code>,\
              \ or <code>logGroupIdentifiers</code>. </p> </note>"
        logGroupNames:
          allOf:
          - $ref: '#/components/schemas/LogGroupNames'
          - description: "<p>The list of log groups to be queried. You can include\
              \ up to 50 log groups.</p> <note> <p>A <code>StartQuery</code> operation\
              \ must include exactly one of the following parameters: <code>logGroupName</code>,\
              \ <code>logGroupNames</code>, or <code>logGroupIdentifiers</code>. </p>\
              \ </note>"
        logGroupIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LogGroupIdentifiers'
          - description: "<p>The list of log groups to query. You can include up to\
              \ 50 log groups.</p> <p>You can specify them by the log group name or\
              \ ARN. If a log group that you're querying is in a source account and\
              \ you're using a monitoring account, you must specify the ARN of the\
              \ log group here. The query definition must also be defined in the monitoring\
              \ account.</p> <p>If you specify an ARN, the ARN can't end with an asterisk\
              \ (*).</p> <p>A <code>StartQuery</code> operation must include exactly\
              \ one of the following parameters: <code>logGroupName</code>, <code>logGroupNames</code>,\
              \ or <code>logGroupIdentifiers</code>. </p>"
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The beginning of the time range to query. The range is inclusive,\
              \ so the specified start time is included in the query. Specified as\
              \ epoch time, the number of seconds since <code>January 1, 1970, 00:00:00\
              \ UTC</code>."
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The end of the time range to query. The range is inclusive,\
              \ so the specified end time is included in the query. Specified as epoch\
              \ time, the number of seconds since <code>January 1, 1970, 00:00:00\
              \ UTC</code>."
        queryString:
          allOf:
          - $ref: '#/components/schemas/QueryString'
          - description: "The query string to use. For more information, see <a href=\"\
              https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\"\
              >CloudWatch Logs Insights Query Syntax</a>."
        limit:
          allOf:
          - $ref: '#/components/schemas/EventsLimit'
          - description: "The maximum number of log events to return in the query.\
              \ If the query string uses the <code>fields</code> command, only the\
              \ specified fields and their values are returned. The default is 1000."
      required:
      - endTime
      - queryString
      - startTime
      title: StartQueryRequest
      type: object
    MalformedQueryException: {}
    StopQueryResponse:
      example:
        success: ""
      properties:
        success:
          allOf:
          - $ref: '#/components/schemas/Success'
          - description: This is true if the query was stopped by the <code>StopQuery</code>
              operation.
      type: object
    StopQueryRequest:
      example:
        queryId: ""
      properties:
        queryId:
          allOf:
          - $ref: '#/components/schemas/QueryId'
          - description: "The ID number of the query to stop. To find this ID number,\
              \ use <code>DescribeQueries</code>."
      required:
      - queryId
      title: StopQueryRequest
      type: object
    TagLogGroupRequest:
      deprecated: true
      description: Please use the generic tagging API model TagResourceRequest
      example:
        logGroupName: ""
        tags: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The key-value pairs to use for the tags.
      required:
      - logGroupName
      - tags
      title: TagLogGroupRequest
      type: object
    TagResourceRequest:
      example:
        resourceArn: ""
        tags: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          - description: "<p>The ARN of the resource that you're adding tags to.</p>\
              \ <p>The ARN format of a log group is <code>arn:aws:logs:<i>Region</i>:<i>account-id</i>:log-group:<i>log-group-name</i>\
              \ </code> </p> <p>The ARN format of a destination is <code>arn:aws:logs:<i>Region</i>:<i>account-id</i>:destination:<i>destination-name</i>\
              \ </code> </p> <p>For more information about ARN format, see <a href=\"\
              https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html\"\
              >CloudWatch Logs resources and operations</a>.</p>"
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: The list of key-value pairs to associate with the resource.
      required:
      - resourceArn
      - tags
      title: TagResourceRequest
      type: object
    TooManyTagsException: {}
    TestMetricFilterResponse:
      example:
        matches: ""
      properties:
        matches:
          allOf:
          - $ref: '#/components/schemas/MetricFilterMatches'
          - description: The matched events.
      type: object
    TestMetricFilterRequest:
      example:
        filterPattern: filterPattern
        logEventMessages: ""
      properties:
        filterPattern:
          description: "A symbolic description of how CloudWatch Logs should interpret\
            \ the data in each log event. For example, a log event can contain timestamps,\
            \ IP addresses, strings, and so on. You use the filter pattern to specify\
            \ what to look for in the log event message."
          maxLength: 1024
          minLength: 0
          type: string
        logEventMessages:
          allOf:
          - $ref: '#/components/schemas/TestEventMessages'
          - description: The log event messages to test.
      required:
      - filterPattern
      - logEventMessages
      title: TestMetricFilterRequest
      type: object
    UntagLogGroupRequest:
      deprecated: true
      description: Please use the generic tagging API model UntagResourceRequest
      example:
        logGroupName: ""
        tags: ""
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: The tag keys. The corresponding tags are removed from the
              log group.
      required:
      - logGroupName
      - tags
      title: UntagLogGroupRequest
      type: object
    UntagResourceRequest:
      example:
        tagKeys: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          - description: "<p>The ARN of the CloudWatch Logs resource that you're removing\
              \ tags from.</p> <p>The ARN format of a log group is <code>arn:aws:logs:<i>Region</i>:<i>account-id</i>:log-group:<i>log-group-name</i>\
              \ </code> </p> <p>The ARN format of a destination is <code>arn:aws:logs:<i>Region</i>:<i>account-id</i>:destination:<i>destination-name</i>\
              \ </code> </p> <p>For more information about ARN format, see <a href=\"\
              https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html\"\
              >CloudWatch Logs resources and operations</a>.</p>"
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          - description: The list of tag keys to remove from the resource.
      required:
      - resourceArn
      - tagKeys
      title: UntagResourceRequest
      type: object
    AccessPolicy:
      minLength: 1
      type: string
    AccountId:
      maxLength: 12
      minLength: 12
      pattern: "^\\d{12}$"
      type: string
    AccountIds:
      items:
        $ref: '#/components/schemas/AccountId'
      maxItems: 20
      minItems: 0
      type: array
    AccountPolicy:
      description: A structure that contains information about one CloudWatch Logs
        account policy.
      properties:
        policyName:
          allOf:
          - $ref: '#/components/schemas/PolicyName'
          - description: The name of the account policy.
        policyDocument:
          allOf:
          - $ref: '#/components/schemas/AccountPolicyDocument'
          - description: "<p>The policy document for this account policy.</p> <p>The\
              \ JSON specified in <code>policyDocument</code> can be up to 30,720\
              \ characters.</p>"
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that this policy was most recently updated.
        policyType:
          allOf:
          - $ref: '#/components/schemas/PolicyType'
          - description: The type of policy for this account policy.
        scope:
          allOf:
          - $ref: '#/components/schemas/Scope'
          - description: The scope of the account policy.
        accountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: The Amazon Web Services account ID that the policy applies
              to.
      type: object
    AccountPolicies:
      items:
        $ref: '#/components/schemas/AccountPolicy'
      type: array
    PolicyName:
      type: string
    AccountPolicyDocument:
      type: string
    Timestamp:
      minimum: 0
      type: integer
    PolicyType:
      enum:
      - DATA_PROTECTION_POLICY
      type: string
    Scope:
      enum:
      - ALL
      type: string
    AmazonResourceName:
      maxLength: 1011
      minLength: 1
      pattern: "[\\w+=/:,.@-]*"
      type: string
    Arn:
      type: string
    LogGroupName:
      maxLength: 512
      minLength: 1
      pattern: "[\\.\\-_/#A-Za-z0-9]+"
      type: string
    KmsKeyId:
      maxLength: 256
      type: string
    ResourceIdentifier:
      maxLength: 2048
      minLength: 1
      pattern: "[\\w+=/:,.@\\-\\*]*"
      type: string
    ExportTaskId:
      maxLength: 512
      minLength: 1
      type: string
    ExportTaskName:
      maxLength: 512
      minLength: 1
      type: string
    LogStreamName:
      maxLength: 512
      minLength: 1
      pattern: "[^:*]*"
      type: string
    ExportDestinationBucket:
      maxLength: 512
      minLength: 1
      type: string
    ExportDestinationPrefix:
      type: string
    Tags:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      maxProperties: 50
      minProperties: 1
      type: object
    DataProtectionPolicyDocument:
      type: string
    DataProtectionStatus:
      enum:
      - ACTIVATED
      - DELETED
      - ARCHIVED
      - DISABLED
      type: string
    Days:
      description: "<p>The number of days to retain the log events in the specified\
        \ log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180,\
        \ 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.</p> <p>To\
        \ set a log group so that its log events do not expire, use <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html\"\
        >DeleteRetentionPolicy</a>. </p>"
      type: integer
    DefaultValue:
      format: double
      type: number
    LogGroupIdentifier:
      maxLength: 2048
      minLength: 1
      pattern: "[\\w#+=/:,.@-]*"
      type: string
    DestinationName:
      maxLength: 512
      minLength: 1
      pattern: "[^:*]*"
      type: string
    FilterName:
      maxLength: 512
      minLength: 1
      pattern: "[^:*]*"
      type: string
    QueryId:
      maxLength: 256
      minLength: 0
      type: string
    Success:
      type: boolean
    Descending:
      type: boolean
    NextToken:
      description: The token for the next set of items to return. The token expires
        after 24 hours.
      minLength: 1
      type: string
    DescribeLimit:
      maximum: 50
      minimum: 1
      type: integer
    Destinations:
      items:
        $ref: '#/components/schemas/Destination'
      type: array
    ExportTaskStatusCode:
      enum:
      - CANCELLED
      - COMPLETED
      - FAILED
      - PENDING
      - PENDING_CANCEL
      - RUNNING
      type: string
    ExportTasks:
      items:
        $ref: '#/components/schemas/ExportTask'
      type: array
    LogGroupNamePattern:
      maxLength: 512
      minLength: 0
      pattern: "[\\.\\-_/#A-Za-z0-9]*"
      type: string
    IncludeLinkedAccounts:
      type: boolean
    LogGroups:
      items:
        $ref: '#/components/schemas/LogGroup'
      type: array
    OrderBy:
      enum:
      - LogStreamName
      - LastEventTime
      type: string
    LogStreams:
      items:
        $ref: '#/components/schemas/LogStream'
      type: array
    MetricName:
      description: "The name of the CloudWatch metric to which the monitored log information\
        \ should be published. For example, you might publish to a metric named ErrorCount."
      maxLength: 255
      pattern: "[^:*$]*"
      type: string
    MetricNamespace:
      maxLength: 255
      pattern: "[^:*$]*"
      type: string
    MetricFilters:
      items:
        $ref: '#/components/schemas/MetricFilter'
      type: array
    DescribeQueriesMaxResults:
      maximum: 1000
      minimum: 1
      type: integer
    QueryStatus:
      enum:
      - Scheduled
      - Running
      - Complete
      - Failed
      - Cancelled
      - Timeout
      - Unknown
      type: string
    QueryInfoList:
      items:
        $ref: '#/components/schemas/QueryInfo'
      type: array
    QueryDefinitionName:
      maxLength: 255
      minLength: 1
      type: string
    QueryListMaxResults:
      maximum: 1000
      minimum: 1
      type: integer
    QueryDefinitionList:
      items:
        $ref: '#/components/schemas/QueryDefinition'
      type: array
    ResourcePolicies:
      items:
        $ref: '#/components/schemas/ResourcePolicy'
      type: array
    SubscriptionFilters:
      items:
        $ref: '#/components/schemas/SubscriptionFilter'
      type: array
    TargetArn:
      minLength: 1
      type: string
    RoleArn:
      minLength: 1
      type: string
    Destination:
      description: Represents a cross-account destination that receives subscription
        log events.
      properties:
        destinationName:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          - description: The name of the destination.
        targetArn:
          allOf:
          - $ref: '#/components/schemas/TargetArn'
          - description: "The Amazon Resource Name (ARN) of the physical target where\
              \ the log events are delivered (for example, a Kinesis stream)."
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: "A role for impersonation, used when delivering log events\
              \ to the target."
        accessPolicy:
          allOf:
          - $ref: '#/components/schemas/AccessPolicy'
          - description: An IAM policy document that governs which Amazon Web Services
              accounts can create subscription filters against this destination.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN of this destination.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The creation time of the destination, expressed as the number\
              \ of milliseconds after Jan 1, 1970 00:00:00 UTC."
      type: object
    DestinationArn:
      minLength: 1
      type: string
    DimensionsValue:
      maxLength: 255
      type: string
    Dimensions:
      additionalProperties:
        $ref: '#/components/schemas/DimensionsValue'
      type: object
    DimensionsKey:
      maxLength: 255
      type: string
    Distribution:
      description: "The method used to distribute log data to the destination, which\
        \ can be either random or grouped by log stream."
      enum:
      - Random
      - ByLogStream
      type: string
    EncryptionKey:
      maxLength: 256
      type: string
    EventId:
      type: string
    EventMessage:
      minLength: 1
      type: string
    EventNumber:
      type: integer
    EventsLimit:
      maximum: 10000
      minimum: 1
      type: integer
    ExportTaskStatus:
      description: Represents the status of an export task.
      properties:
        code:
          allOf:
          - $ref: '#/components/schemas/ExportTaskStatusCode'
          - description: The status code of the export task.
        message:
          allOf:
          - $ref: '#/components/schemas/ExportTaskStatusMessage'
          - description: The status message related to the status code.
      type: object
    ExportTaskExecutionInfo:
      description: Represents the status of an export task.
      properties:
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The creation time of the export task, expressed as the number\
              \ of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
        completionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The completion time of the export task, expressed as the\
              \ number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
      type: object
    ExportTask:
      description: Represents an export task.
      properties:
        taskId:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          - description: The ID of the export task.
        taskName:
          allOf:
          - $ref: '#/components/schemas/ExportTaskName'
          - description: The name of the export task.
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group from which logs data was exported.
        from:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The start time, expressed as the number of milliseconds\
              \ after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp\
              \ before this time are not exported."
        to:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The end time, expressed as the number of milliseconds after\
              \ <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp later\
              \ than this time are not exported."
        destination:
          allOf:
          - $ref: '#/components/schemas/ExportDestinationBucket'
          - description: The name of the S3 bucket to which the log data was exported.
        destinationPrefix:
          allOf:
          - $ref: '#/components/schemas/ExportDestinationPrefix'
          - description: The prefix that was used as the start of Amazon S3 key for
              every object exported.
        status:
          $ref: '#/components/schemas/ExportTask_status'
        executionInfo:
          $ref: '#/components/schemas/ExportTask_executionInfo'
      type: object
    ExportTaskStatusMessage:
      type: string
    Value:
      type: string
    ExtractedValues:
      additionalProperties:
        $ref: '#/components/schemas/Value'
      type: object
    Field:
      type: string
    FilterCount:
      type: integer
    InputLogStreamNames:
      items:
        $ref: '#/components/schemas/LogStreamName'
      maxItems: 100
      minItems: 1
      type: array
    FilterPattern:
      description: "A symbolic description of how CloudWatch Logs should interpret\
        \ the data in each log event. For example, a log event can contain timestamps,\
        \ IP addresses, strings, and so on. You use the filter pattern to specify\
        \ what to look for in the log event message."
      maxLength: 1024
      minLength: 0
      type: string
    Interleaved:
      type: boolean
    Unmask:
      type: boolean
    FilteredLogEvents:
      items:
        $ref: '#/components/schemas/FilteredLogEvent'
      type: array
    SearchedLogStreams:
      items:
        $ref: '#/components/schemas/SearchedLogStream'
      type: array
    FilteredLogEvent:
      description: Represents a matched event.
      properties:
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: The name of the log stream to which this event belongs.
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time the event occurred, expressed as the number of\
              \ milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
        message:
          allOf:
          - $ref: '#/components/schemas/EventMessage'
          - description: The data contained in the log event.
        ingestionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time the event was ingested, expressed as the number\
              \ of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
        eventId:
          allOf:
          - $ref: '#/components/schemas/EventId'
          - description: The ID of the event.
      type: object
    ForceUpdate:
      type: boolean
    StartFromHead:
      type: boolean
    OutputLogEvents:
      items:
        $ref: '#/components/schemas/OutputLogEvent'
      type: array
    LogGroupFieldList:
      items:
        $ref: '#/components/schemas/LogGroupField'
      type: array
    LogRecordPointer:
      type: string
    LogRecord:
      additionalProperties:
        $ref: '#/components/schemas/Value'
      type: object
    QueryResults:
      items:
        $ref: '#/components/schemas/ResultRows'
      type: array
    QueryStatistics:
      description: "Contains the number of log events scanned by the query, the number\
        \ of log events that matched the query criteria, and the total number of bytes\
        \ in the log events that were scanned."
      properties:
        recordsMatched:
          allOf:
          - $ref: '#/components/schemas/StatsValue'
          - description: The number of log events that matched the query string.
        recordsScanned:
          allOf:
          - $ref: '#/components/schemas/StatsValue'
          - description: The total number of log events scanned during the query.
        bytesScanned:
          allOf:
          - $ref: '#/components/schemas/StatsValue'
          - description: The total number of bytes in the log events scanned during
              the query.
      type: object
    InheritedProperty:
      enum:
      - ACCOUNT_DATA_PROTECTION
      type: string
    InheritedProperties:
      items:
        $ref: '#/components/schemas/InheritedProperty'
      type: array
    InputLogEvent:
      description: "Represents a log event, which is a record of activity that was\
        \ recorded by the application or resource being monitored."
      properties:
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time the event occurred, expressed as the number of\
              \ milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
        message:
          allOf:
          - $ref: '#/components/schemas/EventMessage'
          - description: The raw event message. Each log event can be no larger than
              256 KB.
      required:
      - message
      - timestamp
      type: object
    InputLogEvents:
      items:
        $ref: '#/components/schemas/InputLogEvent'
      maxItems: 10000
      minItems: 1
      type: array
    LogEventIndex:
      type: integer
    StoredBytes:
      minimum: 0
      type: integer
    LogGroup:
      description: Represents a log group.
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The creation time of the log group, expressed as the number\
              \ of milliseconds after Jan 1, 1970 00:00:00 UTC."
        retentionInDays:
          description: "<p>The number of days to retain the log events in the specified\
            \ log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150,\
            \ 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.</p>\
            \ <p>To set a log group so that its log events do not expire, use <a href=\"\
            https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html\"\
            >DeleteRetentionPolicy</a>. </p>"
          type: integer
        metricFilterCount:
          allOf:
          - $ref: '#/components/schemas/FilterCount'
          - description: The number of metric filters.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the log group.
        storedBytes:
          allOf:
          - $ref: '#/components/schemas/StoredBytes'
          - description: The number of bytes stored.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          - description: The Amazon Resource Name (ARN) of the KMS key to use when
              encrypting log data.
        dataProtectionStatus:
          allOf:
          - $ref: '#/components/schemas/DataProtectionStatus'
          - description: "Displays whether this log group has a protection policy,\
              \ or whether it had one in the past. For more information, see <a href=\"\
              https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDataProtectionPolicy.html\"\
              >PutDataProtectionPolicy</a>."
        inheritedProperties:
          allOf:
          - $ref: '#/components/schemas/InheritedProperties'
          - description: Displays all the properties that this log group has inherited
              from account-level settings.
      type: object
    Percentage:
      maximum: 100
      minimum: 0
      type: integer
    LogGroupField:
      description: "The fields contained in log events found by a <code>GetLogGroupFields</code>\
        \ operation, along with the percentage of queried log events in which each\
        \ field appears."
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Field'
          - description: The name of a log field.
        percent:
          allOf:
          - $ref: '#/components/schemas/Percentage'
          - description: The percentage of log events queried that contained the field.
      type: object
    LogGroupIdentifiers:
      items:
        $ref: '#/components/schemas/LogGroupIdentifier'
      type: array
    LogGroupNames:
      items:
        $ref: '#/components/schemas/LogGroupName'
      type: array
    SequenceToken:
      minLength: 1
      type: string
    LogStream:
      description: "Represents a log stream, which is a sequence of log events from\
        \ a single emitter of logs."
      properties:
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: The name of the log stream.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The creation time of the stream, expressed as the number\
              \ of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
        firstEventTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time of the first event, expressed as the number of\
              \ milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
        lastEventTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time of the most recent log event in the log stream\
              \ in CloudWatch Logs. This number is expressed as the number of milliseconds\
              \ after <code>Jan 1, 1970 00:00:00 UTC</code>. The <code>lastEventTime</code>\
              \ value updates on an eventual consistency basis. It typically updates\
              \ in less than an hour from ingestion, but in rare situations might\
              \ take longer."
        lastIngestionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The ingestion time, expressed as the number of milliseconds\
              \ after <code>Jan 1, 1970 00:00:00 UTC</code> The <code>lastIngestionTime</code>\
              \ value updates on an eventual consistency basis. It typically updates\
              \ in less than an hour after ingestion, but in rare situations might\
              \ take longer."
        uploadSequenceToken:
          allOf:
          - $ref: '#/components/schemas/SequenceToken'
          - description: <p>The sequence token.</p> <important> <p>The sequence token
              is now ignored in <code>PutLogEvents</code> actions. <code>PutLogEvents</code>
              actions are always accepted regardless of receiving an invalid sequence
              token. You don't need to obtain <code>uploadSequenceToken</code> to
              use a <code>PutLogEvents</code> action.</p> </important>
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the log stream.
        storedBytes:
          allOf:
          - $ref: '#/components/schemas/StoredBytes'
          - deprecated: true
            description: "<p>The number of bytes stored.</p> <p> <b>Important:</b>\
              \ As of June 17, 2019, this parameter is no longer supported for log\
              \ streams, and is always reported as zero. This change applies only\
              \ to log streams. The <code>storedBytes</code> parameter for log groups\
              \ is not affected.</p>Starting on June 17, 2019, this parameter will\
              \ be deprecated for log streams, and will be reported as zero. This\
              \ change applies only to log streams. The storedBytes parameter for\
              \ log groups is not affected."
      type: object
    LogStreamSearchedCompletely:
      type: boolean
    MetricTransformations:
      items:
        $ref: '#/components/schemas/MetricTransformation'
      maxItems: 1
      minItems: 1
      type: array
    MetricFilter:
      description: Metric filters express how CloudWatch Logs would extract metric
        observations from ingested log events and transform them into metric data
        in a CloudWatch metric.
      properties:
        filterName:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          - description: The name of the metric filter.
        filterPattern:
          description: "A symbolic description of how CloudWatch Logs should interpret\
            \ the data in each log event. For example, a log event can contain timestamps,\
            \ IP addresses, strings, and so on. You use the filter pattern to specify\
            \ what to look for in the log event message."
          maxLength: 1024
          minLength: 0
          type: string
        metricTransformations:
          allOf:
          - $ref: '#/components/schemas/MetricTransformations'
          - description: The metric transformations.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The creation time of the metric filter, expressed as the\
              \ number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
      type: object
    MetricFilterMatchRecord:
      description: Represents a matched event.
      properties:
        eventNumber:
          allOf:
          - $ref: '#/components/schemas/EventNumber'
          - description: The event number.
        eventMessage:
          allOf:
          - $ref: '#/components/schemas/EventMessage'
          - description: The raw event data.
        extractedValues:
          allOf:
          - $ref: '#/components/schemas/ExtractedValues'
          - description: The values extracted from the event data by the filter.
      type: object
    MetricFilterMatches:
      items:
        $ref: '#/components/schemas/MetricFilterMatchRecord'
      type: array
    MetricValue:
      description: "The value to publish to the CloudWatch metric. For example, if\
        \ you're counting the occurrences of a term like <code>Error</code>, the value\
        \ is <code>1</code> for each occurrence. If you're counting the bytes transferred,\
        \ the value is the value in the log event."
      maxLength: 100
      type: string
    StandardUnit:
      enum:
      - Seconds
      - Microseconds
      - Milliseconds
      - Bytes
      - Kilobytes
      - Megabytes
      - Gigabytes
      - Terabytes
      - Bits
      - Kilobits
      - Megabits
      - Gigabits
      - Terabits
      - Percent
      - Count
      - Bytes/Second
      - Kilobytes/Second
      - Megabytes/Second
      - Gigabytes/Second
      - Terabytes/Second
      - Bits/Second
      - Kilobits/Second
      - Megabits/Second
      - Gigabits/Second
      - Terabits/Second
      - Count/Second
      - None
      type: string
    MetricTransformation:
      description: Indicates how to transform ingested log events to metric data in
        a CloudWatch metric.
      properties:
        metricName:
          allOf:
          - $ref: '#/components/schemas/MetricName'
          - description: The name of the CloudWatch metric.
        metricNamespace:
          allOf:
          - $ref: '#/components/schemas/MetricNamespace'
          - description: "A custom namespace to contain your metric in CloudWatch.\
              \ Use namespaces to group together metrics that are similar. For more\
              \ information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace\"\
              >Namespaces</a>."
        metricValue:
          allOf:
          - $ref: '#/components/schemas/MetricValue'
          - description: The value to publish to the CloudWatch metric when a filter
              pattern matches a log event.
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/DefaultValue'
          - description: (Optional) The value to emit when a filter pattern does not
              match a log event. This value can be null.
        dimensions:
          allOf:
          - $ref: '#/components/schemas/Dimensions'
          - description: "<p>The fields to use as dimensions for the metric. One metric\
              \ filter can include as many as three dimensions.</p> <important> <p>Metrics\
              \ extracted from log events are charged as custom metrics. To prevent\
              \ unexpected high charges, do not specify high-cardinality fields such\
              \ as <code>IPAddress</code> or <code>requestID</code> as dimensions.\
              \ Each different value found for a dimension is treated as a separate\
              \ metric and accrues charges as a separate custom metric. </p> <p>CloudWatch\
              \ Logs disables a metric filter if it generates 1000 different name/value\
              \ pairs for your specified dimensions within a certain amount of time.\
              \ This helps to prevent accidental high charges.</p> <p>You can also\
              \ set up a billing alarm to alert you if your charges are higher than\
              \ expected. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html\"\
              > Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services\
              \ Charges</a>. </p> </important>"
        unit:
          allOf:
          - $ref: '#/components/schemas/StandardUnit'
          - description: "The unit to assign to the metric. If you omit this, the\
              \ unit is set as <code>None</code>."
      required:
      - metricName
      - metricNamespace
      - metricValue
      type: object
    OutputLogEvent:
      description: Represents a log event.
      properties:
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time the event occurred, expressed as the number of\
              \ milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
        message:
          allOf:
          - $ref: '#/components/schemas/EventMessage'
          - description: The data contained in the log event.
        ingestionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time the event was ingested, expressed as the number\
              \ of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
      type: object
    PolicyDocument:
      maxLength: 5120
      minLength: 1
      type: string
    RejectedLogEventsInfo:
      description: Represents the rejected events.
      properties:
        tooNewLogEventStartIndex:
          allOf:
          - $ref: '#/components/schemas/LogEventIndex'
          - description: The log events that are too new.
        tooOldLogEventEndIndex:
          allOf:
          - $ref: '#/components/schemas/LogEventIndex'
          - description: The log events that are dated too far in the past.
        expiredLogEventEndIndex:
          allOf:
          - $ref: '#/components/schemas/LogEventIndex'
          - description: The expired log events.
      type: object
    QueryDefinitionString:
      maxLength: 10000
      minLength: 1
      type: string
    ResourcePolicy:
      description: A policy enabling one or more entities to put logs to a log group
        in this account.
      properties:
        policyName:
          allOf:
          - $ref: '#/components/schemas/PolicyName'
          - description: The name of the resource policy.
        policyDocument:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          - description: The details of the policy.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "Timestamp showing when this policy was last updated, expressed\
              \ as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
      type: object
    QueryDefinition:
      description: This structure contains details about a saved CloudWatch Logs Insights
        query definition.
      properties:
        queryDefinitionId:
          allOf:
          - $ref: '#/components/schemas/QueryId'
          - description: The unique ID of the query definition.
        name:
          allOf:
          - $ref: '#/components/schemas/QueryDefinitionName'
          - description: The name of the query definition.
        queryString:
          allOf:
          - $ref: '#/components/schemas/QueryDefinitionString'
          - description: "The query string to use for this definition. For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\"\
              >CloudWatch Logs Insights Query Syntax</a>."
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the query definition was most recently modified.
        logGroupNames:
          allOf:
          - $ref: '#/components/schemas/LogGroupNames'
          - description: "If this query definition contains a list of log groups that\
              \ it is limited to, that list appears here."
      type: object
    QueryString:
      maxLength: 10000
      minLength: 0
      type: string
    QueryInfo:
      description: 'Information about one CloudWatch Logs Insights query that matches
        the request in a <code>DescribeQueries</code> operation. '
      properties:
        queryId:
          allOf:
          - $ref: '#/components/schemas/QueryId'
          - description: The unique ID number of this query.
        queryString:
          allOf:
          - $ref: '#/components/schemas/QueryString'
          - description: The query string used in this query.
        status:
          allOf:
          - $ref: '#/components/schemas/QueryStatus'
          - description: "The status of this query. Possible values are <code>Cancelled</code>,\
              \ <code>Complete</code>, <code>Failed</code>, <code>Running</code>,\
              \ <code>Scheduled</code>, and <code>Unknown</code>."
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that this query was created.
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group scanned by this query.
      type: object
    ResultRows:
      items:
        $ref: '#/components/schemas/ResultField'
      type: array
    StatsValue:
      format: double
      type: number
    ResultField:
      description: "<p>Contains one field from one log event returned by a CloudWatch\
        \ Logs Insights query, along with the value of that field.</p> <p>For more\
        \ information about the fields that are generated by CloudWatch logs, see\
        \ <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html\"\
        >Supported Logs and Discovered Fields</a>.</p>"
      properties:
        field:
          allOf:
          - $ref: '#/components/schemas/Field'
          - description: The log event field.
        value:
          allOf:
          - $ref: '#/components/schemas/Value'
          - description: The value of this field.
      type: object
    SearchedLogStream:
      description: Represents the search status of a log stream.
      properties:
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/LogStreamName'
          - description: The name of the log stream.
        searchedCompletely:
          allOf:
          - $ref: '#/components/schemas/LogStreamSearchedCompletely'
          - description: Indicates whether all the events in this log stream were
              searched.
      type: object
    SubscriptionFilter:
      description: Represents a subscription filter.
      properties:
        filterName:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          - description: The name of the subscription filter.
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          - description: The name of the log group.
        filterPattern:
          description: "A symbolic description of how CloudWatch Logs should interpret\
            \ the data in each log event. For example, a log event can contain timestamps,\
            \ IP addresses, strings, and so on. You use the filter pattern to specify\
            \ what to look for in the log event message."
          maxLength: 1024
          minLength: 0
          type: string
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/DestinationArn'
          - description: The Amazon Resource Name (ARN) of the destination.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: <p/>
        distribution:
          $ref: '#/components/schemas/Distribution'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The creation time of the subscription filter, expressed\
              \ as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>."
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+)$"
      type: string
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 50
      minItems: 0
      type: array
    TagList:
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 1
      type: array
    TagValue:
      maxLength: 256
      pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"
      type: string
    TestEventMessages:
      items:
        $ref: '#/components/schemas/EventMessage'
      maxItems: 50
      minItems: 1
      type: array
    Token:
      type: string
    GetQueryResultsResponse_statistics:
      allOf:
      - $ref: '#/components/schemas/QueryStatistics'
      - description: "Includes the number of log events scanned by the query, the\
          \ number of log events that matched the query criteria, and the total number\
          \ of bytes in the scanned log events. These values reflect the full raw\
          \ results of the query."
      example:
        bytesScanned: ""
        recordsScanned: ""
        recordsMatched: ""
    PutAccountPolicyResponse_accountPolicy:
      allOf:
      - $ref: '#/components/schemas/AccountPolicy'
      - description: The account policy that you created.
      example:
        policyDocument: ""
        accountId: ""
        policyName: ""
        policyType: ""
        scope: ""
        lastUpdatedTime: ""
    PutDestinationResponse_destination:
      allOf:
      - $ref: '#/components/schemas/Destination'
      - description: The destination.
      example:
        creationTime: ""
        roleArn: ""
        destinationName: ""
        accessPolicy: ""
        arn: ""
        targetArn: ""
    PutLogEventsResponse_rejectedLogEventsInfo:
      allOf:
      - $ref: '#/components/schemas/RejectedLogEventsInfo'
      - description: The rejected events.
      example:
        tooOldLogEventEndIndex: ""
        tooNewLogEventStartIndex: ""
        expiredLogEventEndIndex: ""
    PutResourcePolicyResponse_resourcePolicy:
      allOf:
      - $ref: '#/components/schemas/ResourcePolicy'
      - description: The new policy.
      example:
        policyDocument: ""
        policyName: ""
        lastUpdatedTime: ""
    ExportTask_status:
      allOf:
      - $ref: '#/components/schemas/ExportTaskStatus'
      - description: The status of the export task.
    ExportTask_executionInfo:
      allOf:
      - $ref: '#/components/schemas/ExportTaskExecutionInfo'
      - description: Execution information about the export task.
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

