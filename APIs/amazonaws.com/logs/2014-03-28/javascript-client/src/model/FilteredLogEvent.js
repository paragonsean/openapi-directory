/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FilteredLogEvent model module.
 * @module model/FilteredLogEvent
 * @version 2014-03-28
 */
class FilteredLogEvent {
    /**
     * Constructs a new <code>FilteredLogEvent</code>.
     * Represents a matched event.
     * @alias module:model/FilteredLogEvent
     */
    constructor() { 
        
        FilteredLogEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilteredLogEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilteredLogEvent} obj Optional instance to populate.
     * @return {module:model/FilteredLogEvent} The populated <code>FilteredLogEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilteredLogEvent();

            if (data.hasOwnProperty('logStreamName')) {
                obj['logStreamName'] = ApiClient.convertToType(data['logStreamName'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('ingestionTime')) {
                obj['ingestionTime'] = ApiClient.convertToType(data['ingestionTime'], 'Number');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilteredLogEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilteredLogEvent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `logStreamName`
        if (data['logStreamName']) { // data not null
          String.validateJSON(data['logStreamName']);
        }
        // validate the optional field `timestamp`
        if (data['timestamp']) { // data not null
          Number.validateJSON(data['timestamp']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          String.validateJSON(data['message']);
        }
        // validate the optional field `ingestionTime`
        if (data['ingestionTime']) { // data not null
          Number.validateJSON(data['ingestionTime']);
        }
        // validate the optional field `eventId`
        if (data['eventId']) { // data not null
          String.validateJSON(data['eventId']);
        }

        return true;
    }


}



/**
 * @member {String} logStreamName
 */
FilteredLogEvent.prototype['logStreamName'] = undefined;

/**
 * @member {Number} timestamp
 */
FilteredLogEvent.prototype['timestamp'] = undefined;

/**
 * @member {String} message
 */
FilteredLogEvent.prototype['message'] = undefined;

/**
 * @member {Number} ingestionTime
 */
FilteredLogEvent.prototype['ingestionTime'] = undefined;

/**
 * @member {String} eventId
 */
FilteredLogEvent.prototype['eventId'] = undefined;






export default FilteredLogEvent;

