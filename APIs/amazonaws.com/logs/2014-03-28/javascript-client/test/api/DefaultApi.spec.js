/**
 * Amazon CloudWatch Logs
 * <p>You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2 instances in real time</b>: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as \"NullReferenceException\"). You can also count the number of occurrences of a literal term at a particular position in log data (such as \"404\" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2014-03-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudWatchLogs);
  }
}(this, function(expect, AmazonCloudWatchLogs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudWatchLogs.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateKmsKey', function() {
      it('should call associateKmsKey successfully', function(done) {
        //uncomment below and update the code to test associateKmsKey
        //instance.associateKmsKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelExportTask', function() {
      it('should call cancelExportTask successfully', function(done) {
        //uncomment below and update the code to test cancelExportTask
        //instance.cancelExportTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createExportTask', function() {
      it('should call createExportTask successfully', function(done) {
        //uncomment below and update the code to test createExportTask
        //instance.createExportTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLogGroup', function() {
      it('should call createLogGroup successfully', function(done) {
        //uncomment below and update the code to test createLogGroup
        //instance.createLogGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLogStream', function() {
      it('should call createLogStream successfully', function(done) {
        //uncomment below and update the code to test createLogStream
        //instance.createLogStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccountPolicy', function() {
      it('should call deleteAccountPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteAccountPolicy
        //instance.deleteAccountPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataProtectionPolicy', function() {
      it('should call deleteDataProtectionPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteDataProtectionPolicy
        //instance.deleteDataProtectionPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDestination', function() {
      it('should call deleteDestination successfully', function(done) {
        //uncomment below and update the code to test deleteDestination
        //instance.deleteDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLogGroup', function() {
      it('should call deleteLogGroup successfully', function(done) {
        //uncomment below and update the code to test deleteLogGroup
        //instance.deleteLogGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLogStream', function() {
      it('should call deleteLogStream successfully', function(done) {
        //uncomment below and update the code to test deleteLogStream
        //instance.deleteLogStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMetricFilter', function() {
      it('should call deleteMetricFilter successfully', function(done) {
        //uncomment below and update the code to test deleteMetricFilter
        //instance.deleteMetricFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQueryDefinition', function() {
      it('should call deleteQueryDefinition successfully', function(done) {
        //uncomment below and update the code to test deleteQueryDefinition
        //instance.deleteQueryDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourcePolicy', function() {
      it('should call deleteResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test deleteResourcePolicy
        //instance.deleteResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRetentionPolicy', function() {
      it('should call deleteRetentionPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteRetentionPolicy
        //instance.deleteRetentionPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubscriptionFilter', function() {
      it('should call deleteSubscriptionFilter successfully', function(done) {
        //uncomment below and update the code to test deleteSubscriptionFilter
        //instance.deleteSubscriptionFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountPolicies', function() {
      it('should call describeAccountPolicies successfully', function(done) {
        //uncomment below and update the code to test describeAccountPolicies
        //instance.describeAccountPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDestinations', function() {
      it('should call describeDestinations successfully', function(done) {
        //uncomment below and update the code to test describeDestinations
        //instance.describeDestinations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeExportTasks', function() {
      it('should call describeExportTasks successfully', function(done) {
        //uncomment below and update the code to test describeExportTasks
        //instance.describeExportTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLogGroups', function() {
      it('should call describeLogGroups successfully', function(done) {
        //uncomment below and update the code to test describeLogGroups
        //instance.describeLogGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLogStreams', function() {
      it('should call describeLogStreams successfully', function(done) {
        //uncomment below and update the code to test describeLogStreams
        //instance.describeLogStreams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMetricFilters', function() {
      it('should call describeMetricFilters successfully', function(done) {
        //uncomment below and update the code to test describeMetricFilters
        //instance.describeMetricFilters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeQueries', function() {
      it('should call describeQueries successfully', function(done) {
        //uncomment below and update the code to test describeQueries
        //instance.describeQueries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeQueryDefinitions', function() {
      it('should call describeQueryDefinitions successfully', function(done) {
        //uncomment below and update the code to test describeQueryDefinitions
        //instance.describeQueryDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeResourcePolicies', function() {
      it('should call describeResourcePolicies successfully', function(done) {
        //uncomment below and update the code to test describeResourcePolicies
        //instance.describeResourcePolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSubscriptionFilters', function() {
      it('should call describeSubscriptionFilters successfully', function(done) {
        //uncomment below and update the code to test describeSubscriptionFilters
        //instance.describeSubscriptionFilters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateKmsKey', function() {
      it('should call disassociateKmsKey successfully', function(done) {
        //uncomment below and update the code to test disassociateKmsKey
        //instance.disassociateKmsKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterLogEvents', function() {
      it('should call filterLogEvents successfully', function(done) {
        //uncomment below and update the code to test filterLogEvents
        //instance.filterLogEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataProtectionPolicy', function() {
      it('should call getDataProtectionPolicy successfully', function(done) {
        //uncomment below and update the code to test getDataProtectionPolicy
        //instance.getDataProtectionPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLogEvents', function() {
      it('should call getLogEvents successfully', function(done) {
        //uncomment below and update the code to test getLogEvents
        //instance.getLogEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLogGroupFields', function() {
      it('should call getLogGroupFields successfully', function(done) {
        //uncomment below and update the code to test getLogGroupFields
        //instance.getLogGroupFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLogRecord', function() {
      it('should call getLogRecord successfully', function(done) {
        //uncomment below and update the code to test getLogRecord
        //instance.getLogRecord(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQueryResults', function() {
      it('should call getQueryResults successfully', function(done) {
        //uncomment below and update the code to test getQueryResults
        //instance.getQueryResults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsLogGroup', function() {
      it('should call listTagsLogGroup successfully', function(done) {
        //uncomment below and update the code to test listTagsLogGroup
        //instance.listTagsLogGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAccountPolicy', function() {
      it('should call putAccountPolicy successfully', function(done) {
        //uncomment below and update the code to test putAccountPolicy
        //instance.putAccountPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putDataProtectionPolicy', function() {
      it('should call putDataProtectionPolicy successfully', function(done) {
        //uncomment below and update the code to test putDataProtectionPolicy
        //instance.putDataProtectionPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putDestination', function() {
      it('should call putDestination successfully', function(done) {
        //uncomment below and update the code to test putDestination
        //instance.putDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putDestinationPolicy', function() {
      it('should call putDestinationPolicy successfully', function(done) {
        //uncomment below and update the code to test putDestinationPolicy
        //instance.putDestinationPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putLogEvents', function() {
      it('should call putLogEvents successfully', function(done) {
        //uncomment below and update the code to test putLogEvents
        //instance.putLogEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putMetricFilter', function() {
      it('should call putMetricFilter successfully', function(done) {
        //uncomment below and update the code to test putMetricFilter
        //instance.putMetricFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putQueryDefinition', function() {
      it('should call putQueryDefinition successfully', function(done) {
        //uncomment below and update the code to test putQueryDefinition
        //instance.putQueryDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResourcePolicy', function() {
      it('should call putResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test putResourcePolicy
        //instance.putResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRetentionPolicy', function() {
      it('should call putRetentionPolicy successfully', function(done) {
        //uncomment below and update the code to test putRetentionPolicy
        //instance.putRetentionPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSubscriptionFilter', function() {
      it('should call putSubscriptionFilter successfully', function(done) {
        //uncomment below and update the code to test putSubscriptionFilter
        //instance.putSubscriptionFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startQuery', function() {
      it('should call startQuery successfully', function(done) {
        //uncomment below and update the code to test startQuery
        //instance.startQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopQuery', function() {
      it('should call stopQuery successfully', function(done) {
        //uncomment below and update the code to test stopQuery
        //instance.stopQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagLogGroup', function() {
      it('should call tagLogGroup successfully', function(done) {
        //uncomment below and update the code to test tagLogGroup
        //instance.tagLogGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('testMetricFilter', function() {
      it('should call testMetricFilter successfully', function(done) {
        //uncomment below and update the code to test testMetricFilter
        //instance.testMetricFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagLogGroup', function() {
      it('should call untagLogGroup successfully', function(done) {
        //uncomment below and update the code to test untagLogGroup
        //instance.untagLogGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
