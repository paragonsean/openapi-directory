/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBotResponse_abortStatement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBotResponse_abortStatement::OAIGetBotResponse_abortStatement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBotResponse_abortStatement::OAIGetBotResponse_abortStatement() {
    this->initializeModel();
}

OAIGetBotResponse_abortStatement::~OAIGetBotResponse_abortStatement() {}

void OAIGetBotResponse_abortStatement::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_response_card_isSet = false;
    m_response_card_isValid = false;
}

void OAIGetBotResponse_abortStatement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBotResponse_abortStatement::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_response_card_isValid = ::OpenAPI::fromJsonValue(m_response_card, json[QString("responseCard")]);
    m_response_card_isSet = !json[QString("responseCard")].isNull() && m_response_card_isValid;
}

QString OAIGetBotResponse_abortStatement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBotResponse_abortStatement::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.isSet()) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_response_card_isSet) {
        obj.insert(QString("responseCard"), ::OpenAPI::toJsonValue(m_response_card));
    }
    return obj;
}

QList OAIGetBotResponse_abortStatement::getMessages() const {
    return m_messages;
}
void OAIGetBotResponse_abortStatement::setMessages(const QList &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIGetBotResponse_abortStatement::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIGetBotResponse_abortStatement::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIGetBotResponse_abortStatement::getResponseCard() const {
    return m_response_card;
}
void OAIGetBotResponse_abortStatement::setResponseCard(const QString &response_card) {
    m_response_card = response_card;
    m_response_card_isSet = true;
}

bool OAIGetBotResponse_abortStatement::is_response_card_Set() const{
    return m_response_card_isSet;
}

bool OAIGetBotResponse_abortStatement::is_response_card_Valid() const{
    return m_response_card_isValid;
}

bool OAIGetBotResponse_abortStatement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_card_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBotResponse_abortStatement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_messages_isValid && true;
}

} // namespace OpenAPI
