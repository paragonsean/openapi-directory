/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutBotRequest.h
 *
 * 
 */

#ifndef OAIPutBotRequest_H
#define OAIPutBotRequest_H

#include <QJsonObject>

#include "OAILocale.h"
#include "OAIProcessBehavior.h"
#include "OAIPutBotRequest_abortStatement.h"
#include "OAIPutBotRequest_clarificationPrompt.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutBotRequest_clarificationPrompt;
class OAIPutBotRequest_abortStatement;

class OAIPutBotRequest : public OAIObject {
public:
    OAIPutBotRequest();
    OAIPutBotRequest(QString json);
    ~OAIPutBotRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getIntents() const;
    void setIntents(const QList &intents);
    bool is_intents_Set() const;
    bool is_intents_Valid() const;

    bool getEnableModelImprovements() const;
    void setEnableModelImprovements(const bool &enable_model_improvements);
    bool is_enable_model_improvements_Set() const;
    bool is_enable_model_improvements_Valid() const;

    double getNluIntentConfidenceThreshold() const;
    void setNluIntentConfidenceThreshold(const double &nlu_intent_confidence_threshold);
    bool is_nlu_intent_confidence_threshold_Set() const;
    bool is_nlu_intent_confidence_threshold_Valid() const;

    OAIPutBotRequest_clarificationPrompt getClarificationPrompt() const;
    void setClarificationPrompt(const OAIPutBotRequest_clarificationPrompt &clarification_prompt);
    bool is_clarification_prompt_Set() const;
    bool is_clarification_prompt_Valid() const;

    OAIPutBotRequest_abortStatement getAbortStatement() const;
    void setAbortStatement(const OAIPutBotRequest_abortStatement &abort_statement);
    bool is_abort_statement_Set() const;
    bool is_abort_statement_Valid() const;

    qint32 getIdleSessionTtlinSeconds() const;
    void setIdleSessionTtlinSeconds(const qint32 &idle_session_ttlin_seconds);
    bool is_idle_session_ttlin_seconds_Set() const;
    bool is_idle_session_ttlin_seconds_Valid() const;

    QString getVoiceId() const;
    void setVoiceId(const QString &voice_id);
    bool is_voice_id_Set() const;
    bool is_voice_id_Valid() const;

    QString getChecksum() const;
    void setChecksum(const QString &checksum);
    bool is_checksum_Set() const;
    bool is_checksum_Valid() const;

    OAIProcessBehavior getProcessBehavior() const;
    void setProcessBehavior(const OAIProcessBehavior &process_behavior);
    bool is_process_behavior_Set() const;
    bool is_process_behavior_Valid() const;

    OAILocale getLocale() const;
    void setLocale(const OAILocale &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    bool getChildDirected() const;
    void setChildDirected(const bool &child_directed);
    bool is_child_directed_Set() const;
    bool is_child_directed_Valid() const;

    bool getDetectSentiment() const;
    void setDetectSentiment(const bool &detect_sentiment);
    bool is_detect_sentiment_Set() const;
    bool is_detect_sentiment_Valid() const;

    bool getCreateVersion() const;
    void setCreateVersion(const bool &create_version);
    bool is_create_version_Set() const;
    bool is_create_version_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_intents;
    bool m_intents_isSet;
    bool m_intents_isValid;

    bool m_enable_model_improvements;
    bool m_enable_model_improvements_isSet;
    bool m_enable_model_improvements_isValid;

    double m_nlu_intent_confidence_threshold;
    bool m_nlu_intent_confidence_threshold_isSet;
    bool m_nlu_intent_confidence_threshold_isValid;

    OAIPutBotRequest_clarificationPrompt m_clarification_prompt;
    bool m_clarification_prompt_isSet;
    bool m_clarification_prompt_isValid;

    OAIPutBotRequest_abortStatement m_abort_statement;
    bool m_abort_statement_isSet;
    bool m_abort_statement_isValid;

    qint32 m_idle_session_ttlin_seconds;
    bool m_idle_session_ttlin_seconds_isSet;
    bool m_idle_session_ttlin_seconds_isValid;

    QString m_voice_id;
    bool m_voice_id_isSet;
    bool m_voice_id_isValid;

    QString m_checksum;
    bool m_checksum_isSet;
    bool m_checksum_isValid;

    OAIProcessBehavior m_process_behavior;
    bool m_process_behavior_isSet;
    bool m_process_behavior_isValid;

    OAILocale m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    bool m_child_directed;
    bool m_child_directed_isSet;
    bool m_child_directed_isValid;

    bool m_detect_sentiment;
    bool m_detect_sentiment_isSet;
    bool m_detect_sentiment_isValid;

    bool m_create_version;
    bool m_create_version_isSet;
    bool m_create_version_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutBotRequest)

#endif // OAIPutBotRequest_H
