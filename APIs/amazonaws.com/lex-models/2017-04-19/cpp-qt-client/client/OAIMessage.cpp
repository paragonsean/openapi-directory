/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_group_number_isSet = false;
    m_group_number_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_group_number_isValid = ::OpenAPI::fromJsonValue(m_group_number, json[QString("groupNumber")]);
    m_group_number_isSet = !json[QString("groupNumber")].isNull() && m_group_number_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type.isSet()) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_group_number_isSet) {
        obj.insert(QString("groupNumber"), ::OpenAPI::toJsonValue(m_group_number));
    }
    return obj;
}

OAIContentType OAIMessage::getContentType() const {
    return m_content_type;
}
void OAIMessage::setContentType(const OAIContentType &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIMessage::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIMessage::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIMessage::getContent() const {
    return m_content;
}
void OAIMessage::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIMessage::is_content_Set() const{
    return m_content_isSet;
}

bool OAIMessage::is_content_Valid() const{
    return m_content_isValid;
}

qint32 OAIMessage::getGroupNumber() const {
    return m_group_number;
}
void OAIMessage::setGroupNumber(const qint32 &group_number) {
    m_group_number = group_number;
    m_group_number_isSet = true;
}

bool OAIMessage::is_group_number_Set() const{
    return m_group_number_isSet;
}

bool OAIMessage::is_group_number_Valid() const{
    return m_group_number_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_type_isValid && m_content_isValid && true;
}

} // namespace OpenAPI
