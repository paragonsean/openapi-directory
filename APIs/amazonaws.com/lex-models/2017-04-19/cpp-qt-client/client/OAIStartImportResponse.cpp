/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartImportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartImportResponse::OAIStartImportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartImportResponse::OAIStartImportResponse() {
    this->initializeModel();
}

OAIStartImportResponse::~OAIStartImportResponse() {}

void OAIStartImportResponse::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_merge_strategy_isSet = false;
    m_merge_strategy_isValid = false;

    m_import_id_isSet = false;
    m_import_id_isValid = false;

    m_import_status_isSet = false;
    m_import_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;
}

void OAIStartImportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartImportResponse::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_merge_strategy_isValid = ::OpenAPI::fromJsonValue(m_merge_strategy, json[QString("mergeStrategy")]);
    m_merge_strategy_isSet = !json[QString("mergeStrategy")].isNull() && m_merge_strategy_isValid;

    m_import_id_isValid = ::OpenAPI::fromJsonValue(m_import_id, json[QString("importId")]);
    m_import_id_isSet = !json[QString("importId")].isNull() && m_import_id_isValid;

    m_import_status_isValid = ::OpenAPI::fromJsonValue(m_import_status, json[QString("importStatus")]);
    m_import_status_isSet = !json[QString("importStatus")].isNull() && m_import_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;
}

QString OAIStartImportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartImportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_merge_strategy.isSet()) {
        obj.insert(QString("mergeStrategy"), ::OpenAPI::toJsonValue(m_merge_strategy));
    }
    if (m_import_id_isSet) {
        obj.insert(QString("importId"), ::OpenAPI::toJsonValue(m_import_id));
    }
    if (m_import_status.isSet()) {
        obj.insert(QString("importStatus"), ::OpenAPI::toJsonValue(m_import_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    return obj;
}

QString OAIStartImportResponse::getName() const {
    return m_name;
}
void OAIStartImportResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartImportResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartImportResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIResourceType OAIStartImportResponse::getResourceType() const {
    return m_resource_type;
}
void OAIStartImportResponse::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStartImportResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStartImportResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIMergeStrategy OAIStartImportResponse::getMergeStrategy() const {
    return m_merge_strategy;
}
void OAIStartImportResponse::setMergeStrategy(const OAIMergeStrategy &merge_strategy) {
    m_merge_strategy = merge_strategy;
    m_merge_strategy_isSet = true;
}

bool OAIStartImportResponse::is_merge_strategy_Set() const{
    return m_merge_strategy_isSet;
}

bool OAIStartImportResponse::is_merge_strategy_Valid() const{
    return m_merge_strategy_isValid;
}

QString OAIStartImportResponse::getImportId() const {
    return m_import_id;
}
void OAIStartImportResponse::setImportId(const QString &import_id) {
    m_import_id = import_id;
    m_import_id_isSet = true;
}

bool OAIStartImportResponse::is_import_id_Set() const{
    return m_import_id_isSet;
}

bool OAIStartImportResponse::is_import_id_Valid() const{
    return m_import_id_isValid;
}

OAIImportStatus OAIStartImportResponse::getImportStatus() const {
    return m_import_status;
}
void OAIStartImportResponse::setImportStatus(const OAIImportStatus &import_status) {
    m_import_status = import_status;
    m_import_status_isSet = true;
}

bool OAIStartImportResponse::is_import_status_Set() const{
    return m_import_status_isSet;
}

bool OAIStartImportResponse::is_import_status_Valid() const{
    return m_import_status_isValid;
}

QList OAIStartImportResponse::getTags() const {
    return m_tags;
}
void OAIStartImportResponse::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartImportResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartImportResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIStartImportResponse::getCreatedDate() const {
    return m_created_date;
}
void OAIStartImportResponse::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIStartImportResponse::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIStartImportResponse::is_created_date_Valid() const{
    return m_created_date_isValid;
}

bool OAIStartImportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartImportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
