/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutSlotType_request.h
 *
 * 
 */

#ifndef OAIPutSlotType_request_H
#define OAIPutSlotType_request_H

#include <QJsonObject>

#include "OAIEnumerationValue.h"
#include "OAISlotTypeConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEnumerationValue;
class OAISlotTypeConfiguration;

class OAIPutSlotType_request : public OAIObject {
public:
    OAIPutSlotType_request();
    OAIPutSlotType_request(QString json);
    ~OAIPutSlotType_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAIEnumerationValue> getEnumerationValues() const;
    void setEnumerationValues(const QList<OAIEnumerationValue> &enumeration_values);
    bool is_enumeration_values_Set() const;
    bool is_enumeration_values_Valid() const;

    QString getChecksum() const;
    void setChecksum(const QString &checksum);
    bool is_checksum_Set() const;
    bool is_checksum_Valid() const;

    QString getValueSelectionStrategy() const;
    void setValueSelectionStrategy(const QString &value_selection_strategy);
    bool is_value_selection_strategy_Set() const;
    bool is_value_selection_strategy_Valid() const;

    bool isCreateVersion() const;
    void setCreateVersion(const bool &create_version);
    bool is_create_version_Set() const;
    bool is_create_version_Valid() const;

    QString getParentSlotTypeSignature() const;
    void setParentSlotTypeSignature(const QString &parent_slot_type_signature);
    bool is_parent_slot_type_signature_Set() const;
    bool is_parent_slot_type_signature_Valid() const;

    QList<OAISlotTypeConfiguration> getSlotTypeConfigurations() const;
    void setSlotTypeConfigurations(const QList<OAISlotTypeConfiguration> &slot_type_configurations);
    bool is_slot_type_configurations_Set() const;
    bool is_slot_type_configurations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAIEnumerationValue> m_enumeration_values;
    bool m_enumeration_values_isSet;
    bool m_enumeration_values_isValid;

    QString m_checksum;
    bool m_checksum_isSet;
    bool m_checksum_isValid;

    QString m_value_selection_strategy;
    bool m_value_selection_strategy_isSet;
    bool m_value_selection_strategy_isValid;

    bool m_create_version;
    bool m_create_version_isSet;
    bool m_create_version_isValid;

    QString m_parent_slot_type_signature;
    bool m_parent_slot_type_signature_isSet;
    bool m_parent_slot_type_signature_isValid;

    QList<OAISlotTypeConfiguration> m_slot_type_configurations;
    bool m_slot_type_configurations_isSet;
    bool m_slot_type_configurations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutSlotType_request)

#endif // OAIPutSlotType_request_H
