/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBuiltinIntentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBuiltinIntentResponse::OAIGetBuiltinIntentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBuiltinIntentResponse::OAIGetBuiltinIntentResponse() {
    this->initializeModel();
}

OAIGetBuiltinIntentResponse::~OAIGetBuiltinIntentResponse() {}

void OAIGetBuiltinIntentResponse::initializeModel() {

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_supported_locales_isSet = false;
    m_supported_locales_isValid = false;

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;
}

void OAIGetBuiltinIntentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBuiltinIntentResponse::fromJsonObject(QJsonObject json) {

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_supported_locales_isValid = ::OpenAPI::fromJsonValue(m_supported_locales, json[QString("supportedLocales")]);
    m_supported_locales_isSet = !json[QString("supportedLocales")].isNull() && m_supported_locales_isValid;

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("slots")]);
    m_r_slots_isSet = !json[QString("slots")].isNull() && m_r_slots_isValid;
}

QString OAIGetBuiltinIntentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBuiltinIntentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_supported_locales.isSet()) {
        obj.insert(QString("supportedLocales"), ::OpenAPI::toJsonValue(m_supported_locales));
    }
    if (m_r_slots.isSet()) {
        obj.insert(QString("slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    return obj;
}

QString OAIGetBuiltinIntentResponse::getSignature() const {
    return m_signature;
}
void OAIGetBuiltinIntentResponse::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIGetBuiltinIntentResponse::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIGetBuiltinIntentResponse::is_signature_Valid() const{
    return m_signature_isValid;
}

QList OAIGetBuiltinIntentResponse::getSupportedLocales() const {
    return m_supported_locales;
}
void OAIGetBuiltinIntentResponse::setSupportedLocales(const QList &supported_locales) {
    m_supported_locales = supported_locales;
    m_supported_locales_isSet = true;
}

bool OAIGetBuiltinIntentResponse::is_supported_locales_Set() const{
    return m_supported_locales_isSet;
}

bool OAIGetBuiltinIntentResponse::is_supported_locales_Valid() const{
    return m_supported_locales_isValid;
}

QList OAIGetBuiltinIntentResponse::getRSlots() const {
    return m_r_slots;
}
void OAIGetBuiltinIntentResponse::setRSlots(const QList &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIGetBuiltinIntentResponse::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIGetBuiltinIntentResponse::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

bool OAIGetBuiltinIntentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_locales.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_slots.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBuiltinIntentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
