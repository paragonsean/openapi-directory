/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetExportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetExportResponse::OAIGetExportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetExportResponse::OAIGetExportResponse() {
    this->initializeModel();
}

OAIGetExportResponse::~OAIGetExportResponse() {}

void OAIGetExportResponse::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_export_type_isSet = false;
    m_export_type_isValid = false;

    m_export_status_isSet = false;
    m_export_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGetExportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetExportResponse::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_export_type_isValid = ::OpenAPI::fromJsonValue(m_export_type, json[QString("exportType")]);
    m_export_type_isSet = !json[QString("exportType")].isNull() && m_export_type_isValid;

    m_export_status_isValid = ::OpenAPI::fromJsonValue(m_export_status, json[QString("exportStatus")]);
    m_export_status_isSet = !json[QString("exportStatus")].isNull() && m_export_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGetExportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetExportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_export_type.isSet()) {
        obj.insert(QString("exportType"), ::OpenAPI::toJsonValue(m_export_type));
    }
    if (m_export_status.isSet()) {
        obj.insert(QString("exportStatus"), ::OpenAPI::toJsonValue(m_export_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGetExportResponse::getName() const {
    return m_name;
}
void OAIGetExportResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetExportResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetExportResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetExportResponse::getVersion() const {
    return m_version;
}
void OAIGetExportResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetExportResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetExportResponse::is_version_Valid() const{
    return m_version_isValid;
}

OAIResourceType OAIGetExportResponse::getResourceType() const {
    return m_resource_type;
}
void OAIGetExportResponse::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIGetExportResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIGetExportResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIExportType OAIGetExportResponse::getExportType() const {
    return m_export_type;
}
void OAIGetExportResponse::setExportType(const OAIExportType &export_type) {
    m_export_type = export_type;
    m_export_type_isSet = true;
}

bool OAIGetExportResponse::is_export_type_Set() const{
    return m_export_type_isSet;
}

bool OAIGetExportResponse::is_export_type_Valid() const{
    return m_export_type_isValid;
}

OAIExportStatus OAIGetExportResponse::getExportStatus() const {
    return m_export_status;
}
void OAIGetExportResponse::setExportStatus(const OAIExportStatus &export_status) {
    m_export_status = export_status;
    m_export_status_isSet = true;
}

bool OAIGetExportResponse::is_export_status_Set() const{
    return m_export_status_isSet;
}

bool OAIGetExportResponse::is_export_status_Valid() const{
    return m_export_status_isValid;
}

QString OAIGetExportResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIGetExportResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIGetExportResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIGetExportResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIGetExportResponse::getUrl() const {
    return m_url;
}
void OAIGetExportResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGetExportResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGetExportResponse::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGetExportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetExportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
