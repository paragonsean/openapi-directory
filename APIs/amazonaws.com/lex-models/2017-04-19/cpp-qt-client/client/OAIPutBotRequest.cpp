/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutBotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutBotRequest::OAIPutBotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutBotRequest::OAIPutBotRequest() {
    this->initializeModel();
}

OAIPutBotRequest::~OAIPutBotRequest() {}

void OAIPutBotRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_intents_isSet = false;
    m_intents_isValid = false;

    m_enable_model_improvements_isSet = false;
    m_enable_model_improvements_isValid = false;

    m_nlu_intent_confidence_threshold_isSet = false;
    m_nlu_intent_confidence_threshold_isValid = false;

    m_clarification_prompt_isSet = false;
    m_clarification_prompt_isValid = false;

    m_abort_statement_isSet = false;
    m_abort_statement_isValid = false;

    m_idle_session_ttlin_seconds_isSet = false;
    m_idle_session_ttlin_seconds_isValid = false;

    m_voice_id_isSet = false;
    m_voice_id_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_process_behavior_isSet = false;
    m_process_behavior_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_child_directed_isSet = false;
    m_child_directed_isValid = false;

    m_detect_sentiment_isSet = false;
    m_detect_sentiment_isValid = false;

    m_create_version_isSet = false;
    m_create_version_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPutBotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutBotRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_intents_isValid = ::OpenAPI::fromJsonValue(m_intents, json[QString("intents")]);
    m_intents_isSet = !json[QString("intents")].isNull() && m_intents_isValid;

    m_enable_model_improvements_isValid = ::OpenAPI::fromJsonValue(m_enable_model_improvements, json[QString("enableModelImprovements")]);
    m_enable_model_improvements_isSet = !json[QString("enableModelImprovements")].isNull() && m_enable_model_improvements_isValid;

    m_nlu_intent_confidence_threshold_isValid = ::OpenAPI::fromJsonValue(m_nlu_intent_confidence_threshold, json[QString("nluIntentConfidenceThreshold")]);
    m_nlu_intent_confidence_threshold_isSet = !json[QString("nluIntentConfidenceThreshold")].isNull() && m_nlu_intent_confidence_threshold_isValid;

    m_clarification_prompt_isValid = ::OpenAPI::fromJsonValue(m_clarification_prompt, json[QString("clarificationPrompt")]);
    m_clarification_prompt_isSet = !json[QString("clarificationPrompt")].isNull() && m_clarification_prompt_isValid;

    m_abort_statement_isValid = ::OpenAPI::fromJsonValue(m_abort_statement, json[QString("abortStatement")]);
    m_abort_statement_isSet = !json[QString("abortStatement")].isNull() && m_abort_statement_isValid;

    m_idle_session_ttlin_seconds_isValid = ::OpenAPI::fromJsonValue(m_idle_session_ttlin_seconds, json[QString("idleSessionTTLInSeconds")]);
    m_idle_session_ttlin_seconds_isSet = !json[QString("idleSessionTTLInSeconds")].isNull() && m_idle_session_ttlin_seconds_isValid;

    m_voice_id_isValid = ::OpenAPI::fromJsonValue(m_voice_id, json[QString("voiceId")]);
    m_voice_id_isSet = !json[QString("voiceId")].isNull() && m_voice_id_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_process_behavior_isValid = ::OpenAPI::fromJsonValue(m_process_behavior, json[QString("processBehavior")]);
    m_process_behavior_isSet = !json[QString("processBehavior")].isNull() && m_process_behavior_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_child_directed_isValid = ::OpenAPI::fromJsonValue(m_child_directed, json[QString("childDirected")]);
    m_child_directed_isSet = !json[QString("childDirected")].isNull() && m_child_directed_isValid;

    m_detect_sentiment_isValid = ::OpenAPI::fromJsonValue(m_detect_sentiment, json[QString("detectSentiment")]);
    m_detect_sentiment_isSet = !json[QString("detectSentiment")].isNull() && m_detect_sentiment_isValid;

    m_create_version_isValid = ::OpenAPI::fromJsonValue(m_create_version, json[QString("createVersion")]);
    m_create_version_isSet = !json[QString("createVersion")].isNull() && m_create_version_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIPutBotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutBotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_intents.isSet()) {
        obj.insert(QString("intents"), ::OpenAPI::toJsonValue(m_intents));
    }
    if (m_enable_model_improvements_isSet) {
        obj.insert(QString("enableModelImprovements"), ::OpenAPI::toJsonValue(m_enable_model_improvements));
    }
    if (m_nlu_intent_confidence_threshold_isSet) {
        obj.insert(QString("nluIntentConfidenceThreshold"), ::OpenAPI::toJsonValue(m_nlu_intent_confidence_threshold));
    }
    if (m_clarification_prompt.isSet()) {
        obj.insert(QString("clarificationPrompt"), ::OpenAPI::toJsonValue(m_clarification_prompt));
    }
    if (m_abort_statement.isSet()) {
        obj.insert(QString("abortStatement"), ::OpenAPI::toJsonValue(m_abort_statement));
    }
    if (m_idle_session_ttlin_seconds_isSet) {
        obj.insert(QString("idleSessionTTLInSeconds"), ::OpenAPI::toJsonValue(m_idle_session_ttlin_seconds));
    }
    if (m_voice_id_isSet) {
        obj.insert(QString("voiceId"), ::OpenAPI::toJsonValue(m_voice_id));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_process_behavior.isSet()) {
        obj.insert(QString("processBehavior"), ::OpenAPI::toJsonValue(m_process_behavior));
    }
    if (m_locale.isSet()) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_child_directed_isSet) {
        obj.insert(QString("childDirected"), ::OpenAPI::toJsonValue(m_child_directed));
    }
    if (m_detect_sentiment_isSet) {
        obj.insert(QString("detectSentiment"), ::OpenAPI::toJsonValue(m_detect_sentiment));
    }
    if (m_create_version_isSet) {
        obj.insert(QString("createVersion"), ::OpenAPI::toJsonValue(m_create_version));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPutBotRequest::getDescription() const {
    return m_description;
}
void OAIPutBotRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutBotRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutBotRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIPutBotRequest::getIntents() const {
    return m_intents;
}
void OAIPutBotRequest::setIntents(const QList &intents) {
    m_intents = intents;
    m_intents_isSet = true;
}

bool OAIPutBotRequest::is_intents_Set() const{
    return m_intents_isSet;
}

bool OAIPutBotRequest::is_intents_Valid() const{
    return m_intents_isValid;
}

bool OAIPutBotRequest::getEnableModelImprovements() const {
    return m_enable_model_improvements;
}
void OAIPutBotRequest::setEnableModelImprovements(const bool &enable_model_improvements) {
    m_enable_model_improvements = enable_model_improvements;
    m_enable_model_improvements_isSet = true;
}

bool OAIPutBotRequest::is_enable_model_improvements_Set() const{
    return m_enable_model_improvements_isSet;
}

bool OAIPutBotRequest::is_enable_model_improvements_Valid() const{
    return m_enable_model_improvements_isValid;
}

double OAIPutBotRequest::getNluIntentConfidenceThreshold() const {
    return m_nlu_intent_confidence_threshold;
}
void OAIPutBotRequest::setNluIntentConfidenceThreshold(const double &nlu_intent_confidence_threshold) {
    m_nlu_intent_confidence_threshold = nlu_intent_confidence_threshold;
    m_nlu_intent_confidence_threshold_isSet = true;
}

bool OAIPutBotRequest::is_nlu_intent_confidence_threshold_Set() const{
    return m_nlu_intent_confidence_threshold_isSet;
}

bool OAIPutBotRequest::is_nlu_intent_confidence_threshold_Valid() const{
    return m_nlu_intent_confidence_threshold_isValid;
}

OAIPutBotRequest_clarificationPrompt OAIPutBotRequest::getClarificationPrompt() const {
    return m_clarification_prompt;
}
void OAIPutBotRequest::setClarificationPrompt(const OAIPutBotRequest_clarificationPrompt &clarification_prompt) {
    m_clarification_prompt = clarification_prompt;
    m_clarification_prompt_isSet = true;
}

bool OAIPutBotRequest::is_clarification_prompt_Set() const{
    return m_clarification_prompt_isSet;
}

bool OAIPutBotRequest::is_clarification_prompt_Valid() const{
    return m_clarification_prompt_isValid;
}

OAIPutBotRequest_abortStatement OAIPutBotRequest::getAbortStatement() const {
    return m_abort_statement;
}
void OAIPutBotRequest::setAbortStatement(const OAIPutBotRequest_abortStatement &abort_statement) {
    m_abort_statement = abort_statement;
    m_abort_statement_isSet = true;
}

bool OAIPutBotRequest::is_abort_statement_Set() const{
    return m_abort_statement_isSet;
}

bool OAIPutBotRequest::is_abort_statement_Valid() const{
    return m_abort_statement_isValid;
}

qint32 OAIPutBotRequest::getIdleSessionTtlinSeconds() const {
    return m_idle_session_ttlin_seconds;
}
void OAIPutBotRequest::setIdleSessionTtlinSeconds(const qint32 &idle_session_ttlin_seconds) {
    m_idle_session_ttlin_seconds = idle_session_ttlin_seconds;
    m_idle_session_ttlin_seconds_isSet = true;
}

bool OAIPutBotRequest::is_idle_session_ttlin_seconds_Set() const{
    return m_idle_session_ttlin_seconds_isSet;
}

bool OAIPutBotRequest::is_idle_session_ttlin_seconds_Valid() const{
    return m_idle_session_ttlin_seconds_isValid;
}

QString OAIPutBotRequest::getVoiceId() const {
    return m_voice_id;
}
void OAIPutBotRequest::setVoiceId(const QString &voice_id) {
    m_voice_id = voice_id;
    m_voice_id_isSet = true;
}

bool OAIPutBotRequest::is_voice_id_Set() const{
    return m_voice_id_isSet;
}

bool OAIPutBotRequest::is_voice_id_Valid() const{
    return m_voice_id_isValid;
}

QString OAIPutBotRequest::getChecksum() const {
    return m_checksum;
}
void OAIPutBotRequest::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIPutBotRequest::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIPutBotRequest::is_checksum_Valid() const{
    return m_checksum_isValid;
}

OAIProcessBehavior OAIPutBotRequest::getProcessBehavior() const {
    return m_process_behavior;
}
void OAIPutBotRequest::setProcessBehavior(const OAIProcessBehavior &process_behavior) {
    m_process_behavior = process_behavior;
    m_process_behavior_isSet = true;
}

bool OAIPutBotRequest::is_process_behavior_Set() const{
    return m_process_behavior_isSet;
}

bool OAIPutBotRequest::is_process_behavior_Valid() const{
    return m_process_behavior_isValid;
}

OAILocale OAIPutBotRequest::getLocale() const {
    return m_locale;
}
void OAIPutBotRequest::setLocale(const OAILocale &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIPutBotRequest::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIPutBotRequest::is_locale_Valid() const{
    return m_locale_isValid;
}

bool OAIPutBotRequest::getChildDirected() const {
    return m_child_directed;
}
void OAIPutBotRequest::setChildDirected(const bool &child_directed) {
    m_child_directed = child_directed;
    m_child_directed_isSet = true;
}

bool OAIPutBotRequest::is_child_directed_Set() const{
    return m_child_directed_isSet;
}

bool OAIPutBotRequest::is_child_directed_Valid() const{
    return m_child_directed_isValid;
}

bool OAIPutBotRequest::getDetectSentiment() const {
    return m_detect_sentiment;
}
void OAIPutBotRequest::setDetectSentiment(const bool &detect_sentiment) {
    m_detect_sentiment = detect_sentiment;
    m_detect_sentiment_isSet = true;
}

bool OAIPutBotRequest::is_detect_sentiment_Set() const{
    return m_detect_sentiment_isSet;
}

bool OAIPutBotRequest::is_detect_sentiment_Valid() const{
    return m_detect_sentiment_isValid;
}

bool OAIPutBotRequest::getCreateVersion() const {
    return m_create_version;
}
void OAIPutBotRequest::setCreateVersion(const bool &create_version) {
    m_create_version = create_version;
    m_create_version_isSet = true;
}

bool OAIPutBotRequest::is_create_version_Set() const{
    return m_create_version_isSet;
}

bool OAIPutBotRequest::is_create_version_Valid() const{
    return m_create_version_isValid;
}

QList OAIPutBotRequest::getTags() const {
    return m_tags;
}
void OAIPutBotRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutBotRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutBotRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPutBotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_model_improvements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nlu_intent_confidence_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clarification_prompt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_abort_statement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_session_ttlin_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_directed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutBotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_locale_isValid && m_child_directed_isValid && true;
}

} // namespace OpenAPI
