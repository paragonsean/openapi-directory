/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBuiltinSlotTypesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBuiltinSlotTypesResponse::OAIGetBuiltinSlotTypesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBuiltinSlotTypesResponse::OAIGetBuiltinSlotTypesResponse() {
    this->initializeModel();
}

OAIGetBuiltinSlotTypesResponse::~OAIGetBuiltinSlotTypesResponse() {}

void OAIGetBuiltinSlotTypesResponse::initializeModel() {

    m_slot_types_isSet = false;
    m_slot_types_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetBuiltinSlotTypesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBuiltinSlotTypesResponse::fromJsonObject(QJsonObject json) {

    m_slot_types_isValid = ::OpenAPI::fromJsonValue(m_slot_types, json[QString("slotTypes")]);
    m_slot_types_isSet = !json[QString("slotTypes")].isNull() && m_slot_types_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetBuiltinSlotTypesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBuiltinSlotTypesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_slot_types.isSet()) {
        obj.insert(QString("slotTypes"), ::OpenAPI::toJsonValue(m_slot_types));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIGetBuiltinSlotTypesResponse::getSlotTypes() const {
    return m_slot_types;
}
void OAIGetBuiltinSlotTypesResponse::setSlotTypes(const QList &slot_types) {
    m_slot_types = slot_types;
    m_slot_types_isSet = true;
}

bool OAIGetBuiltinSlotTypesResponse::is_slot_types_Set() const{
    return m_slot_types_isSet;
}

bool OAIGetBuiltinSlotTypesResponse::is_slot_types_Valid() const{
    return m_slot_types_isValid;
}

QString OAIGetBuiltinSlotTypesResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetBuiltinSlotTypesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetBuiltinSlotTypesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetBuiltinSlotTypesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetBuiltinSlotTypesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slot_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBuiltinSlotTypesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
