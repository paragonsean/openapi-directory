/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogSettingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogSettingsRequest::OAILogSettingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogSettingsRequest::OAILogSettingsRequest() {
    this->initializeModel();
}

OAILogSettingsRequest::~OAILogSettingsRequest() {}

void OAILogSettingsRequest::initializeModel() {

    m_log_type_isSet = false;
    m_log_type_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAILogSettingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogSettingsRequest::fromJsonObject(QJsonObject json) {

    m_log_type_isValid = ::OpenAPI::fromJsonValue(m_log_type, json[QString("logType")]);
    m_log_type_isSet = !json[QString("logType")].isNull() && m_log_type_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("kmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("kmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("resourceArn")]);
    m_resource_arn_isSet = !json[QString("resourceArn")].isNull() && m_resource_arn_isValid;
}

QString OAILogSettingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogSettingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_log_type.isSet()) {
        obj.insert(QString("logType"), ::OpenAPI::toJsonValue(m_log_type));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("kmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("resourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

OAILogType OAILogSettingsRequest::getLogType() const {
    return m_log_type;
}
void OAILogSettingsRequest::setLogType(const OAILogType &log_type) {
    m_log_type = log_type;
    m_log_type_isSet = true;
}

bool OAILogSettingsRequest::is_log_type_Set() const{
    return m_log_type_isSet;
}

bool OAILogSettingsRequest::is_log_type_Valid() const{
    return m_log_type_isValid;
}

OAIDestination OAILogSettingsRequest::getDestination() const {
    return m_destination;
}
void OAILogSettingsRequest::setDestination(const OAIDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAILogSettingsRequest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAILogSettingsRequest::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAILogSettingsRequest::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAILogSettingsRequest::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAILogSettingsRequest::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAILogSettingsRequest::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QString OAILogSettingsRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAILogSettingsRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAILogSettingsRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAILogSettingsRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAILogSettingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogSettingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_log_type_isValid && m_destination_isValid && m_resource_arn_isValid && true;
}

} // namespace OpenAPI
