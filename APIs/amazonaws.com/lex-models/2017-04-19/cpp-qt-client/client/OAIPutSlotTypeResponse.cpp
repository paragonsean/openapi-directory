/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutSlotTypeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutSlotTypeResponse::OAIPutSlotTypeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutSlotTypeResponse::OAIPutSlotTypeResponse() {
    this->initializeModel();
}

OAIPutSlotTypeResponse::~OAIPutSlotTypeResponse() {}

void OAIPutSlotTypeResponse::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enumeration_values_isSet = false;
    m_enumeration_values_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_value_selection_strategy_isSet = false;
    m_value_selection_strategy_isValid = false;

    m_create_version_isSet = false;
    m_create_version_isValid = false;

    m_parent_slot_type_signature_isSet = false;
    m_parent_slot_type_signature_isValid = false;

    m_slot_type_configurations_isSet = false;
    m_slot_type_configurations_isValid = false;
}

void OAIPutSlotTypeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutSlotTypeResponse::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enumeration_values_isValid = ::OpenAPI::fromJsonValue(m_enumeration_values, json[QString("enumerationValues")]);
    m_enumeration_values_isSet = !json[QString("enumerationValues")].isNull() && m_enumeration_values_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("lastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("lastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_value_selection_strategy_isValid = ::OpenAPI::fromJsonValue(m_value_selection_strategy, json[QString("valueSelectionStrategy")]);
    m_value_selection_strategy_isSet = !json[QString("valueSelectionStrategy")].isNull() && m_value_selection_strategy_isValid;

    m_create_version_isValid = ::OpenAPI::fromJsonValue(m_create_version, json[QString("createVersion")]);
    m_create_version_isSet = !json[QString("createVersion")].isNull() && m_create_version_isValid;

    m_parent_slot_type_signature_isValid = ::OpenAPI::fromJsonValue(m_parent_slot_type_signature, json[QString("parentSlotTypeSignature")]);
    m_parent_slot_type_signature_isSet = !json[QString("parentSlotTypeSignature")].isNull() && m_parent_slot_type_signature_isValid;

    m_slot_type_configurations_isValid = ::OpenAPI::fromJsonValue(m_slot_type_configurations, json[QString("slotTypeConfigurations")]);
    m_slot_type_configurations_isSet = !json[QString("slotTypeConfigurations")].isNull() && m_slot_type_configurations_isValid;
}

QString OAIPutSlotTypeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutSlotTypeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enumeration_values.isSet()) {
        obj.insert(QString("enumerationValues"), ::OpenAPI::toJsonValue(m_enumeration_values));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("lastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_value_selection_strategy.isSet()) {
        obj.insert(QString("valueSelectionStrategy"), ::OpenAPI::toJsonValue(m_value_selection_strategy));
    }
    if (m_create_version_isSet) {
        obj.insert(QString("createVersion"), ::OpenAPI::toJsonValue(m_create_version));
    }
    if (m_parent_slot_type_signature_isSet) {
        obj.insert(QString("parentSlotTypeSignature"), ::OpenAPI::toJsonValue(m_parent_slot_type_signature));
    }
    if (m_slot_type_configurations.isSet()) {
        obj.insert(QString("slotTypeConfigurations"), ::OpenAPI::toJsonValue(m_slot_type_configurations));
    }
    return obj;
}

QString OAIPutSlotTypeResponse::getName() const {
    return m_name;
}
void OAIPutSlotTypeResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPutSlotTypeResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPutSlotTypeResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPutSlotTypeResponse::getDescription() const {
    return m_description;
}
void OAIPutSlotTypeResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutSlotTypeResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutSlotTypeResponse::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIPutSlotTypeResponse::getEnumerationValues() const {
    return m_enumeration_values;
}
void OAIPutSlotTypeResponse::setEnumerationValues(const QList &enumeration_values) {
    m_enumeration_values = enumeration_values;
    m_enumeration_values_isSet = true;
}

bool OAIPutSlotTypeResponse::is_enumeration_values_Set() const{
    return m_enumeration_values_isSet;
}

bool OAIPutSlotTypeResponse::is_enumeration_values_Valid() const{
    return m_enumeration_values_isValid;
}

QDateTime OAIPutSlotTypeResponse::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAIPutSlotTypeResponse::setLastUpdatedDate(const QDateTime &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAIPutSlotTypeResponse::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAIPutSlotTypeResponse::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

QDateTime OAIPutSlotTypeResponse::getCreatedDate() const {
    return m_created_date;
}
void OAIPutSlotTypeResponse::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIPutSlotTypeResponse::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIPutSlotTypeResponse::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIPutSlotTypeResponse::getVersion() const {
    return m_version;
}
void OAIPutSlotTypeResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPutSlotTypeResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPutSlotTypeResponse::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIPutSlotTypeResponse::getChecksum() const {
    return m_checksum;
}
void OAIPutSlotTypeResponse::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIPutSlotTypeResponse::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIPutSlotTypeResponse::is_checksum_Valid() const{
    return m_checksum_isValid;
}

OAISlotValueSelectionStrategy OAIPutSlotTypeResponse::getValueSelectionStrategy() const {
    return m_value_selection_strategy;
}
void OAIPutSlotTypeResponse::setValueSelectionStrategy(const OAISlotValueSelectionStrategy &value_selection_strategy) {
    m_value_selection_strategy = value_selection_strategy;
    m_value_selection_strategy_isSet = true;
}

bool OAIPutSlotTypeResponse::is_value_selection_strategy_Set() const{
    return m_value_selection_strategy_isSet;
}

bool OAIPutSlotTypeResponse::is_value_selection_strategy_Valid() const{
    return m_value_selection_strategy_isValid;
}

bool OAIPutSlotTypeResponse::getCreateVersion() const {
    return m_create_version;
}
void OAIPutSlotTypeResponse::setCreateVersion(const bool &create_version) {
    m_create_version = create_version;
    m_create_version_isSet = true;
}

bool OAIPutSlotTypeResponse::is_create_version_Set() const{
    return m_create_version_isSet;
}

bool OAIPutSlotTypeResponse::is_create_version_Valid() const{
    return m_create_version_isValid;
}

QString OAIPutSlotTypeResponse::getParentSlotTypeSignature() const {
    return m_parent_slot_type_signature;
}
void OAIPutSlotTypeResponse::setParentSlotTypeSignature(const QString &parent_slot_type_signature) {
    m_parent_slot_type_signature = parent_slot_type_signature;
    m_parent_slot_type_signature_isSet = true;
}

bool OAIPutSlotTypeResponse::is_parent_slot_type_signature_Set() const{
    return m_parent_slot_type_signature_isSet;
}

bool OAIPutSlotTypeResponse::is_parent_slot_type_signature_Valid() const{
    return m_parent_slot_type_signature_isValid;
}

QList OAIPutSlotTypeResponse::getSlotTypeConfigurations() const {
    return m_slot_type_configurations;
}
void OAIPutSlotTypeResponse::setSlotTypeConfigurations(const QList &slot_type_configurations) {
    m_slot_type_configurations = slot_type_configurations;
    m_slot_type_configurations_isSet = true;
}

bool OAIPutSlotTypeResponse::is_slot_type_configurations_Set() const{
    return m_slot_type_configurations_isSet;
}

bool OAIPutSlotTypeResponse::is_slot_type_configurations_Valid() const{
    return m_slot_type_configurations_isValid;
}

bool OAIPutSlotTypeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enumeration_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_selection_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_slot_type_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutSlotTypeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
