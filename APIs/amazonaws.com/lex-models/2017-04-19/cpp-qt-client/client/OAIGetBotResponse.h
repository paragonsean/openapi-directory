/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetBotResponse.h
 *
 * 
 */

#ifndef OAIGetBotResponse_H
#define OAIGetBotResponse_H

#include <QJsonObject>

#include "OAIGetBotResponse_abortStatement.h"
#include "OAIGetBotResponse_clarificationPrompt.h"
#include "OAILocale.h"
#include "OAIStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetBotResponse_clarificationPrompt;
class OAIGetBotResponse_abortStatement;

class OAIGetBotResponse : public OAIObject {
public:
    OAIGetBotResponse();
    OAIGetBotResponse(QString json);
    ~OAIGetBotResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getIntents() const;
    void setIntents(const QList &intents);
    bool is_intents_Set() const;
    bool is_intents_Valid() const;

    bool getEnableModelImprovements() const;
    void setEnableModelImprovements(const bool &enable_model_improvements);
    bool is_enable_model_improvements_Set() const;
    bool is_enable_model_improvements_Valid() const;

    double getNluIntentConfidenceThreshold() const;
    void setNluIntentConfidenceThreshold(const double &nlu_intent_confidence_threshold);
    bool is_nlu_intent_confidence_threshold_Set() const;
    bool is_nlu_intent_confidence_threshold_Valid() const;

    OAIGetBotResponse_clarificationPrompt getClarificationPrompt() const;
    void setClarificationPrompt(const OAIGetBotResponse_clarificationPrompt &clarification_prompt);
    bool is_clarification_prompt_Set() const;
    bool is_clarification_prompt_Valid() const;

    OAIGetBotResponse_abortStatement getAbortStatement() const;
    void setAbortStatement(const OAIGetBotResponse_abortStatement &abort_statement);
    bool is_abort_statement_Set() const;
    bool is_abort_statement_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    QDateTime getLastUpdatedDate() const;
    void setLastUpdatedDate(const QDateTime &last_updated_date);
    bool is_last_updated_date_Set() const;
    bool is_last_updated_date_Valid() const;

    QDateTime getCreatedDate() const;
    void setCreatedDate(const QDateTime &created_date);
    bool is_created_date_Set() const;
    bool is_created_date_Valid() const;

    qint32 getIdleSessionTtlinSeconds() const;
    void setIdleSessionTtlinSeconds(const qint32 &idle_session_ttlin_seconds);
    bool is_idle_session_ttlin_seconds_Set() const;
    bool is_idle_session_ttlin_seconds_Valid() const;

    QString getVoiceId() const;
    void setVoiceId(const QString &voice_id);
    bool is_voice_id_Set() const;
    bool is_voice_id_Valid() const;

    QString getChecksum() const;
    void setChecksum(const QString &checksum);
    bool is_checksum_Set() const;
    bool is_checksum_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    OAILocale getLocale() const;
    void setLocale(const OAILocale &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    bool getChildDirected() const;
    void setChildDirected(const bool &child_directed);
    bool is_child_directed_Set() const;
    bool is_child_directed_Valid() const;

    bool getDetectSentiment() const;
    void setDetectSentiment(const bool &detect_sentiment);
    bool is_detect_sentiment_Set() const;
    bool is_detect_sentiment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_intents;
    bool m_intents_isSet;
    bool m_intents_isValid;

    bool m_enable_model_improvements;
    bool m_enable_model_improvements_isSet;
    bool m_enable_model_improvements_isValid;

    double m_nlu_intent_confidence_threshold;
    bool m_nlu_intent_confidence_threshold_isSet;
    bool m_nlu_intent_confidence_threshold_isValid;

    OAIGetBotResponse_clarificationPrompt m_clarification_prompt;
    bool m_clarification_prompt_isSet;
    bool m_clarification_prompt_isValid;

    OAIGetBotResponse_abortStatement m_abort_statement;
    bool m_abort_statement_isSet;
    bool m_abort_statement_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    QDateTime m_last_updated_date;
    bool m_last_updated_date_isSet;
    bool m_last_updated_date_isValid;

    QDateTime m_created_date;
    bool m_created_date_isSet;
    bool m_created_date_isValid;

    qint32 m_idle_session_ttlin_seconds;
    bool m_idle_session_ttlin_seconds_isSet;
    bool m_idle_session_ttlin_seconds_isValid;

    QString m_voice_id;
    bool m_voice_id_isSet;
    bool m_voice_id_isValid;

    QString m_checksum;
    bool m_checksum_isSet;
    bool m_checksum_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    OAILocale m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    bool m_child_directed;
    bool m_child_directed_isSet;
    bool m_child_directed_isValid;

    bool m_detect_sentiment;
    bool m_detect_sentiment_isSet;
    bool m_detect_sentiment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetBotResponse)

#endif // OAIGetBotResponse_H
