/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlotValueSelectionStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlotValueSelectionStrategy::OAISlotValueSelectionStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlotValueSelectionStrategy::OAISlotValueSelectionStrategy() {
    this->initializeModel();
}

OAISlotValueSelectionStrategy::~OAISlotValueSelectionStrategy() {}

void OAISlotValueSelectionStrategy::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISlotValueSelectionStrategy::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISlotValueSelectionStrategy::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ORIGINAL_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlotValueSelectionStrategy::ORIGINAL_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOP_RESOLUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAISlotValueSelectionStrategy::TOP_RESOLUTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISlotValueSelectionStrategy::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISlotValueSelectionStrategy::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISlotValueSelectionStrategy::ORIGINAL_VALUE:
            val = "ORIGINAL_VALUE";
            break;
        case eOAISlotValueSelectionStrategy::TOP_RESOLUTION:
            val = "TOP_RESOLUTION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISlotValueSelectionStrategy::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISlotValueSelectionStrategy::eOAISlotValueSelectionStrategy OAISlotValueSelectionStrategy::getValue() const {
    return m_value;
}

void OAISlotValueSelectionStrategy::setValue(const OAISlotValueSelectionStrategy::eOAISlotValueSelectionStrategy& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISlotValueSelectionStrategy::isSet() const {
    
    return m_value_isSet;
}

bool OAISlotValueSelectionStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
