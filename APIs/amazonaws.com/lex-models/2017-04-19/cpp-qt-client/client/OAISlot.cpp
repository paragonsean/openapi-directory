/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlot::OAISlot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlot::OAISlot() {
    this->initializeModel();
}

OAISlot::~OAISlot() {}

void OAISlot::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_slot_constraint_isSet = false;
    m_slot_constraint_isValid = false;

    m_slot_type_isSet = false;
    m_slot_type_isValid = false;

    m_slot_type_version_isSet = false;
    m_slot_type_version_isValid = false;

    m_value_elicitation_prompt_isSet = false;
    m_value_elicitation_prompt_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_sample_utterances_isSet = false;
    m_sample_utterances_isValid = false;

    m_response_card_isSet = false;
    m_response_card_isValid = false;

    m_obfuscation_setting_isSet = false;
    m_obfuscation_setting_isValid = false;

    m_default_value_spec_isSet = false;
    m_default_value_spec_isValid = false;
}

void OAISlot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlot::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_slot_constraint_isValid = ::OpenAPI::fromJsonValue(m_slot_constraint, json[QString("slotConstraint")]);
    m_slot_constraint_isSet = !json[QString("slotConstraint")].isNull() && m_slot_constraint_isValid;

    m_slot_type_isValid = ::OpenAPI::fromJsonValue(m_slot_type, json[QString("slotType")]);
    m_slot_type_isSet = !json[QString("slotType")].isNull() && m_slot_type_isValid;

    m_slot_type_version_isValid = ::OpenAPI::fromJsonValue(m_slot_type_version, json[QString("slotTypeVersion")]);
    m_slot_type_version_isSet = !json[QString("slotTypeVersion")].isNull() && m_slot_type_version_isValid;

    m_value_elicitation_prompt_isValid = ::OpenAPI::fromJsonValue(m_value_elicitation_prompt, json[QString("valueElicitationPrompt")]);
    m_value_elicitation_prompt_isSet = !json[QString("valueElicitationPrompt")].isNull() && m_value_elicitation_prompt_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_sample_utterances_isValid = ::OpenAPI::fromJsonValue(m_sample_utterances, json[QString("sampleUtterances")]);
    m_sample_utterances_isSet = !json[QString("sampleUtterances")].isNull() && m_sample_utterances_isValid;

    m_response_card_isValid = ::OpenAPI::fromJsonValue(m_response_card, json[QString("responseCard")]);
    m_response_card_isSet = !json[QString("responseCard")].isNull() && m_response_card_isValid;

    m_obfuscation_setting_isValid = ::OpenAPI::fromJsonValue(m_obfuscation_setting, json[QString("obfuscationSetting")]);
    m_obfuscation_setting_isSet = !json[QString("obfuscationSetting")].isNull() && m_obfuscation_setting_isValid;

    m_default_value_spec_isValid = ::OpenAPI::fromJsonValue(m_default_value_spec, json[QString("defaultValueSpec")]);
    m_default_value_spec_isSet = !json[QString("defaultValueSpec")].isNull() && m_default_value_spec_isValid;
}

QString OAISlot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlot::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_slot_constraint.isSet()) {
        obj.insert(QString("slotConstraint"), ::OpenAPI::toJsonValue(m_slot_constraint));
    }
    if (m_slot_type_isSet) {
        obj.insert(QString("slotType"), ::OpenAPI::toJsonValue(m_slot_type));
    }
    if (m_slot_type_version_isSet) {
        obj.insert(QString("slotTypeVersion"), ::OpenAPI::toJsonValue(m_slot_type_version));
    }
    if (m_value_elicitation_prompt.isSet()) {
        obj.insert(QString("valueElicitationPrompt"), ::OpenAPI::toJsonValue(m_value_elicitation_prompt));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_sample_utterances.isSet()) {
        obj.insert(QString("sampleUtterances"), ::OpenAPI::toJsonValue(m_sample_utterances));
    }
    if (m_response_card_isSet) {
        obj.insert(QString("responseCard"), ::OpenAPI::toJsonValue(m_response_card));
    }
    if (m_obfuscation_setting.isSet()) {
        obj.insert(QString("obfuscationSetting"), ::OpenAPI::toJsonValue(m_obfuscation_setting));
    }
    if (m_default_value_spec.isSet()) {
        obj.insert(QString("defaultValueSpec"), ::OpenAPI::toJsonValue(m_default_value_spec));
    }
    return obj;
}

QString OAISlot::getName() const {
    return m_name;
}
void OAISlot::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISlot::is_name_Set() const{
    return m_name_isSet;
}

bool OAISlot::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISlot::getDescription() const {
    return m_description;
}
void OAISlot::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISlot::is_description_Set() const{
    return m_description_isSet;
}

bool OAISlot::is_description_Valid() const{
    return m_description_isValid;
}

OAISlotConstraint OAISlot::getSlotConstraint() const {
    return m_slot_constraint;
}
void OAISlot::setSlotConstraint(const OAISlotConstraint &slot_constraint) {
    m_slot_constraint = slot_constraint;
    m_slot_constraint_isSet = true;
}

bool OAISlot::is_slot_constraint_Set() const{
    return m_slot_constraint_isSet;
}

bool OAISlot::is_slot_constraint_Valid() const{
    return m_slot_constraint_isValid;
}

QString OAISlot::getSlotType() const {
    return m_slot_type;
}
void OAISlot::setSlotType(const QString &slot_type) {
    m_slot_type = slot_type;
    m_slot_type_isSet = true;
}

bool OAISlot::is_slot_type_Set() const{
    return m_slot_type_isSet;
}

bool OAISlot::is_slot_type_Valid() const{
    return m_slot_type_isValid;
}

QString OAISlot::getSlotTypeVersion() const {
    return m_slot_type_version;
}
void OAISlot::setSlotTypeVersion(const QString &slot_type_version) {
    m_slot_type_version = slot_type_version;
    m_slot_type_version_isSet = true;
}

bool OAISlot::is_slot_type_version_Set() const{
    return m_slot_type_version_isSet;
}

bool OAISlot::is_slot_type_version_Valid() const{
    return m_slot_type_version_isValid;
}

OAISlot_valueElicitationPrompt OAISlot::getValueElicitationPrompt() const {
    return m_value_elicitation_prompt;
}
void OAISlot::setValueElicitationPrompt(const OAISlot_valueElicitationPrompt &value_elicitation_prompt) {
    m_value_elicitation_prompt = value_elicitation_prompt;
    m_value_elicitation_prompt_isSet = true;
}

bool OAISlot::is_value_elicitation_prompt_Set() const{
    return m_value_elicitation_prompt_isSet;
}

bool OAISlot::is_value_elicitation_prompt_Valid() const{
    return m_value_elicitation_prompt_isValid;
}

qint32 OAISlot::getPriority() const {
    return m_priority;
}
void OAISlot::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAISlot::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAISlot::is_priority_Valid() const{
    return m_priority_isValid;
}

QList OAISlot::getSampleUtterances() const {
    return m_sample_utterances;
}
void OAISlot::setSampleUtterances(const QList &sample_utterances) {
    m_sample_utterances = sample_utterances;
    m_sample_utterances_isSet = true;
}

bool OAISlot::is_sample_utterances_Set() const{
    return m_sample_utterances_isSet;
}

bool OAISlot::is_sample_utterances_Valid() const{
    return m_sample_utterances_isValid;
}

QString OAISlot::getResponseCard() const {
    return m_response_card;
}
void OAISlot::setResponseCard(const QString &response_card) {
    m_response_card = response_card;
    m_response_card_isSet = true;
}

bool OAISlot::is_response_card_Set() const{
    return m_response_card_isSet;
}

bool OAISlot::is_response_card_Valid() const{
    return m_response_card_isValid;
}

OAIObfuscationSetting OAISlot::getObfuscationSetting() const {
    return m_obfuscation_setting;
}
void OAISlot::setObfuscationSetting(const OAIObfuscationSetting &obfuscation_setting) {
    m_obfuscation_setting = obfuscation_setting;
    m_obfuscation_setting_isSet = true;
}

bool OAISlot::is_obfuscation_setting_Set() const{
    return m_obfuscation_setting_isSet;
}

bool OAISlot::is_obfuscation_setting_Valid() const{
    return m_obfuscation_setting_isValid;
}

OAISlot_defaultValueSpec OAISlot::getDefaultValueSpec() const {
    return m_default_value_spec;
}
void OAISlot::setDefaultValueSpec(const OAISlot_defaultValueSpec &default_value_spec) {
    m_default_value_spec = default_value_spec;
    m_default_value_spec_isSet = true;
}

bool OAISlot::is_default_value_spec_Set() const{
    return m_default_value_spec_isSet;
}

bool OAISlot::is_default_value_spec_Valid() const{
    return m_default_value_spec_isValid;
}

bool OAISlot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_elicitation_prompt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_utterances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obfuscation_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlot::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_slot_constraint_isValid && true;
}

} // namespace OpenAPI
