/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntentResponse_followUpPrompt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntentResponse_followUpPrompt::OAIPutIntentResponse_followUpPrompt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntentResponse_followUpPrompt::OAIPutIntentResponse_followUpPrompt() {
    this->initializeModel();
}

OAIPutIntentResponse_followUpPrompt::~OAIPutIntentResponse_followUpPrompt() {}

void OAIPutIntentResponse_followUpPrompt::initializeModel() {

    m_prompt_isSet = false;
    m_prompt_isValid = false;

    m_rejection_statement_isSet = false;
    m_rejection_statement_isValid = false;
}

void OAIPutIntentResponse_followUpPrompt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntentResponse_followUpPrompt::fromJsonObject(QJsonObject json) {

    m_prompt_isValid = ::OpenAPI::fromJsonValue(m_prompt, json[QString("prompt")]);
    m_prompt_isSet = !json[QString("prompt")].isNull() && m_prompt_isValid;

    m_rejection_statement_isValid = ::OpenAPI::fromJsonValue(m_rejection_statement, json[QString("rejectionStatement")]);
    m_rejection_statement_isSet = !json[QString("rejectionStatement")].isNull() && m_rejection_statement_isValid;
}

QString OAIPutIntentResponse_followUpPrompt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntentResponse_followUpPrompt::asJsonObject() const {
    QJsonObject obj;
    if (m_prompt.isSet()) {
        obj.insert(QString("prompt"), ::OpenAPI::toJsonValue(m_prompt));
    }
    if (m_rejection_statement.isSet()) {
        obj.insert(QString("rejectionStatement"), ::OpenAPI::toJsonValue(m_rejection_statement));
    }
    return obj;
}

OAIPutIntent_request_followUpPrompt_prompt OAIPutIntentResponse_followUpPrompt::getPrompt() const {
    return m_prompt;
}
void OAIPutIntentResponse_followUpPrompt::setPrompt(const OAIPutIntent_request_followUpPrompt_prompt &prompt) {
    m_prompt = prompt;
    m_prompt_isSet = true;
}

bool OAIPutIntentResponse_followUpPrompt::is_prompt_Set() const{
    return m_prompt_isSet;
}

bool OAIPutIntentResponse_followUpPrompt::is_prompt_Valid() const{
    return m_prompt_isValid;
}

OAIPutIntent_request_followUpPrompt_rejectionStatement OAIPutIntentResponse_followUpPrompt::getRejectionStatement() const {
    return m_rejection_statement;
}
void OAIPutIntentResponse_followUpPrompt::setRejectionStatement(const OAIPutIntent_request_followUpPrompt_rejectionStatement &rejection_statement) {
    m_rejection_statement = rejection_statement;
    m_rejection_statement_isSet = true;
}

bool OAIPutIntentResponse_followUpPrompt::is_rejection_statement_Set() const{
    return m_rejection_statement_isSet;
}

bool OAIPutIntentResponse_followUpPrompt::is_rejection_statement_Valid() const{
    return m_rejection_statement_isValid;
}

bool OAIPutIntentResponse_followUpPrompt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prompt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejection_statement.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntentResponse_followUpPrompt::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prompt_isValid && m_rejection_statement_isValid && true;
}

} // namespace OpenAPI
