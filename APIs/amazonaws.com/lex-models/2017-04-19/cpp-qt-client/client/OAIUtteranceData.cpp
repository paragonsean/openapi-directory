/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUtteranceData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUtteranceData::OAIUtteranceData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUtteranceData::OAIUtteranceData() {
    this->initializeModel();
}

OAIUtteranceData::~OAIUtteranceData() {}

void OAIUtteranceData::initializeModel() {

    m_utterance_string_isSet = false;
    m_utterance_string_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_distinct_users_isSet = false;
    m_distinct_users_isValid = false;

    m_first_uttered_date_isSet = false;
    m_first_uttered_date_isValid = false;

    m_last_uttered_date_isSet = false;
    m_last_uttered_date_isValid = false;
}

void OAIUtteranceData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUtteranceData::fromJsonObject(QJsonObject json) {

    m_utterance_string_isValid = ::OpenAPI::fromJsonValue(m_utterance_string, json[QString("utteranceString")]);
    m_utterance_string_isSet = !json[QString("utteranceString")].isNull() && m_utterance_string_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_distinct_users_isValid = ::OpenAPI::fromJsonValue(m_distinct_users, json[QString("distinctUsers")]);
    m_distinct_users_isSet = !json[QString("distinctUsers")].isNull() && m_distinct_users_isValid;

    m_first_uttered_date_isValid = ::OpenAPI::fromJsonValue(m_first_uttered_date, json[QString("firstUtteredDate")]);
    m_first_uttered_date_isSet = !json[QString("firstUtteredDate")].isNull() && m_first_uttered_date_isValid;

    m_last_uttered_date_isValid = ::OpenAPI::fromJsonValue(m_last_uttered_date, json[QString("lastUtteredDate")]);
    m_last_uttered_date_isSet = !json[QString("lastUtteredDate")].isNull() && m_last_uttered_date_isValid;
}

QString OAIUtteranceData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUtteranceData::asJsonObject() const {
    QJsonObject obj;
    if (m_utterance_string_isSet) {
        obj.insert(QString("utteranceString"), ::OpenAPI::toJsonValue(m_utterance_string));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_distinct_users_isSet) {
        obj.insert(QString("distinctUsers"), ::OpenAPI::toJsonValue(m_distinct_users));
    }
    if (m_first_uttered_date_isSet) {
        obj.insert(QString("firstUtteredDate"), ::OpenAPI::toJsonValue(m_first_uttered_date));
    }
    if (m_last_uttered_date_isSet) {
        obj.insert(QString("lastUtteredDate"), ::OpenAPI::toJsonValue(m_last_uttered_date));
    }
    return obj;
}

QString OAIUtteranceData::getUtteranceString() const {
    return m_utterance_string;
}
void OAIUtteranceData::setUtteranceString(const QString &utterance_string) {
    m_utterance_string = utterance_string;
    m_utterance_string_isSet = true;
}

bool OAIUtteranceData::is_utterance_string_Set() const{
    return m_utterance_string_isSet;
}

bool OAIUtteranceData::is_utterance_string_Valid() const{
    return m_utterance_string_isValid;
}

qint32 OAIUtteranceData::getCount() const {
    return m_count;
}
void OAIUtteranceData::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIUtteranceData::is_count_Set() const{
    return m_count_isSet;
}

bool OAIUtteranceData::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIUtteranceData::getDistinctUsers() const {
    return m_distinct_users;
}
void OAIUtteranceData::setDistinctUsers(const qint32 &distinct_users) {
    m_distinct_users = distinct_users;
    m_distinct_users_isSet = true;
}

bool OAIUtteranceData::is_distinct_users_Set() const{
    return m_distinct_users_isSet;
}

bool OAIUtteranceData::is_distinct_users_Valid() const{
    return m_distinct_users_isValid;
}

QDateTime OAIUtteranceData::getFirstUtteredDate() const {
    return m_first_uttered_date;
}
void OAIUtteranceData::setFirstUtteredDate(const QDateTime &first_uttered_date) {
    m_first_uttered_date = first_uttered_date;
    m_first_uttered_date_isSet = true;
}

bool OAIUtteranceData::is_first_uttered_date_Set() const{
    return m_first_uttered_date_isSet;
}

bool OAIUtteranceData::is_first_uttered_date_Valid() const{
    return m_first_uttered_date_isValid;
}

QDateTime OAIUtteranceData::getLastUtteredDate() const {
    return m_last_uttered_date;
}
void OAIUtteranceData::setLastUtteredDate(const QDateTime &last_uttered_date) {
    m_last_uttered_date = last_uttered_date;
    m_last_uttered_date_isSet = true;
}

bool OAIUtteranceData::is_last_uttered_date_Set() const{
    return m_last_uttered_date_isSet;
}

bool OAIUtteranceData::is_last_uttered_date_Valid() const{
    return m_last_uttered_date_isValid;
}

bool OAIUtteranceData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_utterance_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distinct_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_uttered_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_uttered_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUtteranceData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
