/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocale::OAILocale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocale::OAILocale() {
    this->initializeModel();
}

OAILocale::~OAILocale() {}

void OAILocale::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILocale::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILocale::fromJson(QString jsonString) {
    
    if ( jsonString.compare("de-DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::DE_DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-AU", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::EN_AU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::EN_GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::EN_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::EN_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-419", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::ES_419;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::ES_ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::ES_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::FR_FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-CA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::FR_CA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("it-IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::IT_IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ja-JP", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::JA_JP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ko-KR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocale::KO_KR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILocale::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILocale::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILocale::DE_DE:
            val = "de-DE";
            break;
        case eOAILocale::EN_AU:
            val = "en-AU";
            break;
        case eOAILocale::EN_GB:
            val = "en-GB";
            break;
        case eOAILocale::EN_IN:
            val = "en-IN";
            break;
        case eOAILocale::EN_US:
            val = "en-US";
            break;
        case eOAILocale::ES_419:
            val = "es-419";
            break;
        case eOAILocale::ES_ES:
            val = "es-ES";
            break;
        case eOAILocale::ES_US:
            val = "es-US";
            break;
        case eOAILocale::FR_FR:
            val = "fr-FR";
            break;
        case eOAILocale::FR_CA:
            val = "fr-CA";
            break;
        case eOAILocale::IT_IT:
            val = "it-IT";
            break;
        case eOAILocale::JA_JP:
            val = "ja-JP";
            break;
        case eOAILocale::KO_KR:
            val = "ko-KR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILocale::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILocale::eOAILocale OAILocale::getValue() const {
    return m_value;
}

void OAILocale::setValue(const OAILocale::eOAILocale& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILocale::isSet() const {
    
    return m_value_isSet;
}

bool OAILocale::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
