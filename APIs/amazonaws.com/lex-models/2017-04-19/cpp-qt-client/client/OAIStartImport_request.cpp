/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartImport_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartImport_request::OAIStartImport_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartImport_request::OAIStartImport_request() {
    this->initializeModel();
}

OAIStartImport_request::~OAIStartImport_request() {}

void OAIStartImport_request::initializeModel() {

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_merge_strategy_isSet = false;
    m_merge_strategy_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartImport_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartImport_request::fromJsonObject(QJsonObject json) {

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_merge_strategy_isValid = ::OpenAPI::fromJsonValue(m_merge_strategy, json[QString("mergeStrategy")]);
    m_merge_strategy_isSet = !json[QString("mergeStrategy")].isNull() && m_merge_strategy_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIStartImport_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartImport_request::asJsonObject() const {
    QJsonObject obj;
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_merge_strategy_isSet) {
        obj.insert(QString("mergeStrategy"), ::OpenAPI::toJsonValue(m_merge_strategy));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartImport_request::getPayload() const {
    return m_payload;
}
void OAIStartImport_request::setPayload(const QString &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIStartImport_request::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIStartImport_request::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIStartImport_request::getResourceType() const {
    return m_resource_type;
}
void OAIStartImport_request::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStartImport_request::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStartImport_request::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIStartImport_request::getMergeStrategy() const {
    return m_merge_strategy;
}
void OAIStartImport_request::setMergeStrategy(const QString &merge_strategy) {
    m_merge_strategy = merge_strategy;
    m_merge_strategy_isSet = true;
}

bool OAIStartImport_request::is_merge_strategy_Set() const{
    return m_merge_strategy_isSet;
}

bool OAIStartImport_request::is_merge_strategy_Valid() const{
    return m_merge_strategy_isValid;
}

QList<OAITag> OAIStartImport_request::getTags() const {
    return m_tags;
}
void OAIStartImport_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartImport_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartImport_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartImport_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartImport_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payload_isValid && m_resource_type_isValid && m_merge_strategy_isValid && true;
}

} // namespace OpenAPI
