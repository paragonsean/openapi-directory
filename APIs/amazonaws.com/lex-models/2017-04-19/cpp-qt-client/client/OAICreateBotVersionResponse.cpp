/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBotVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBotVersionResponse::OAICreateBotVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBotVersionResponse::OAICreateBotVersionResponse() {
    this->initializeModel();
}

OAICreateBotVersionResponse::~OAICreateBotVersionResponse() {}

void OAICreateBotVersionResponse::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_intents_isSet = false;
    m_intents_isValid = false;

    m_clarification_prompt_isSet = false;
    m_clarification_prompt_isValid = false;

    m_abort_statement_isSet = false;
    m_abort_statement_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_idle_session_ttlin_seconds_isSet = false;
    m_idle_session_ttlin_seconds_isValid = false;

    m_voice_id_isSet = false;
    m_voice_id_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_child_directed_isSet = false;
    m_child_directed_isValid = false;

    m_enable_model_improvements_isSet = false;
    m_enable_model_improvements_isValid = false;

    m_detect_sentiment_isSet = false;
    m_detect_sentiment_isValid = false;
}

void OAICreateBotVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBotVersionResponse::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_intents_isValid = ::OpenAPI::fromJsonValue(m_intents, json[QString("intents")]);
    m_intents_isSet = !json[QString("intents")].isNull() && m_intents_isValid;

    m_clarification_prompt_isValid = ::OpenAPI::fromJsonValue(m_clarification_prompt, json[QString("clarificationPrompt")]);
    m_clarification_prompt_isSet = !json[QString("clarificationPrompt")].isNull() && m_clarification_prompt_isValid;

    m_abort_statement_isValid = ::OpenAPI::fromJsonValue(m_abort_statement, json[QString("abortStatement")]);
    m_abort_statement_isSet = !json[QString("abortStatement")].isNull() && m_abort_statement_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("lastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("lastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_idle_session_ttlin_seconds_isValid = ::OpenAPI::fromJsonValue(m_idle_session_ttlin_seconds, json[QString("idleSessionTTLInSeconds")]);
    m_idle_session_ttlin_seconds_isSet = !json[QString("idleSessionTTLInSeconds")].isNull() && m_idle_session_ttlin_seconds_isValid;

    m_voice_id_isValid = ::OpenAPI::fromJsonValue(m_voice_id, json[QString("voiceId")]);
    m_voice_id_isSet = !json[QString("voiceId")].isNull() && m_voice_id_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_child_directed_isValid = ::OpenAPI::fromJsonValue(m_child_directed, json[QString("childDirected")]);
    m_child_directed_isSet = !json[QString("childDirected")].isNull() && m_child_directed_isValid;

    m_enable_model_improvements_isValid = ::OpenAPI::fromJsonValue(m_enable_model_improvements, json[QString("enableModelImprovements")]);
    m_enable_model_improvements_isSet = !json[QString("enableModelImprovements")].isNull() && m_enable_model_improvements_isValid;

    m_detect_sentiment_isValid = ::OpenAPI::fromJsonValue(m_detect_sentiment, json[QString("detectSentiment")]);
    m_detect_sentiment_isSet = !json[QString("detectSentiment")].isNull() && m_detect_sentiment_isValid;
}

QString OAICreateBotVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBotVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_intents.isSet()) {
        obj.insert(QString("intents"), ::OpenAPI::toJsonValue(m_intents));
    }
    if (m_clarification_prompt.isSet()) {
        obj.insert(QString("clarificationPrompt"), ::OpenAPI::toJsonValue(m_clarification_prompt));
    }
    if (m_abort_statement.isSet()) {
        obj.insert(QString("abortStatement"), ::OpenAPI::toJsonValue(m_abort_statement));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("lastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_idle_session_ttlin_seconds_isSet) {
        obj.insert(QString("idleSessionTTLInSeconds"), ::OpenAPI::toJsonValue(m_idle_session_ttlin_seconds));
    }
    if (m_voice_id_isSet) {
        obj.insert(QString("voiceId"), ::OpenAPI::toJsonValue(m_voice_id));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_locale.isSet()) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_child_directed_isSet) {
        obj.insert(QString("childDirected"), ::OpenAPI::toJsonValue(m_child_directed));
    }
    if (m_enable_model_improvements_isSet) {
        obj.insert(QString("enableModelImprovements"), ::OpenAPI::toJsonValue(m_enable_model_improvements));
    }
    if (m_detect_sentiment_isSet) {
        obj.insert(QString("detectSentiment"), ::OpenAPI::toJsonValue(m_detect_sentiment));
    }
    return obj;
}

QString OAICreateBotVersionResponse::getName() const {
    return m_name;
}
void OAICreateBotVersionResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateBotVersionResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateBotVersionResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateBotVersionResponse::getDescription() const {
    return m_description;
}
void OAICreateBotVersionResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateBotVersionResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateBotVersionResponse::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateBotVersionResponse::getIntents() const {
    return m_intents;
}
void OAICreateBotVersionResponse::setIntents(const QList &intents) {
    m_intents = intents;
    m_intents_isSet = true;
}

bool OAICreateBotVersionResponse::is_intents_Set() const{
    return m_intents_isSet;
}

bool OAICreateBotVersionResponse::is_intents_Valid() const{
    return m_intents_isValid;
}

OAICreateBotVersionResponse_clarificationPrompt OAICreateBotVersionResponse::getClarificationPrompt() const {
    return m_clarification_prompt;
}
void OAICreateBotVersionResponse::setClarificationPrompt(const OAICreateBotVersionResponse_clarificationPrompt &clarification_prompt) {
    m_clarification_prompt = clarification_prompt;
    m_clarification_prompt_isSet = true;
}

bool OAICreateBotVersionResponse::is_clarification_prompt_Set() const{
    return m_clarification_prompt_isSet;
}

bool OAICreateBotVersionResponse::is_clarification_prompt_Valid() const{
    return m_clarification_prompt_isValid;
}

OAICreateBotVersionResponse_abortStatement OAICreateBotVersionResponse::getAbortStatement() const {
    return m_abort_statement;
}
void OAICreateBotVersionResponse::setAbortStatement(const OAICreateBotVersionResponse_abortStatement &abort_statement) {
    m_abort_statement = abort_statement;
    m_abort_statement_isSet = true;
}

bool OAICreateBotVersionResponse::is_abort_statement_Set() const{
    return m_abort_statement_isSet;
}

bool OAICreateBotVersionResponse::is_abort_statement_Valid() const{
    return m_abort_statement_isValid;
}

OAIStatus OAICreateBotVersionResponse::getStatus() const {
    return m_status;
}
void OAICreateBotVersionResponse::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateBotVersionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateBotVersionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateBotVersionResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAICreateBotVersionResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAICreateBotVersionResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAICreateBotVersionResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QDateTime OAICreateBotVersionResponse::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAICreateBotVersionResponse::setLastUpdatedDate(const QDateTime &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAICreateBotVersionResponse::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAICreateBotVersionResponse::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

QDateTime OAICreateBotVersionResponse::getCreatedDate() const {
    return m_created_date;
}
void OAICreateBotVersionResponse::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICreateBotVersionResponse::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICreateBotVersionResponse::is_created_date_Valid() const{
    return m_created_date_isValid;
}

qint32 OAICreateBotVersionResponse::getIdleSessionTtlinSeconds() const {
    return m_idle_session_ttlin_seconds;
}
void OAICreateBotVersionResponse::setIdleSessionTtlinSeconds(const qint32 &idle_session_ttlin_seconds) {
    m_idle_session_ttlin_seconds = idle_session_ttlin_seconds;
    m_idle_session_ttlin_seconds_isSet = true;
}

bool OAICreateBotVersionResponse::is_idle_session_ttlin_seconds_Set() const{
    return m_idle_session_ttlin_seconds_isSet;
}

bool OAICreateBotVersionResponse::is_idle_session_ttlin_seconds_Valid() const{
    return m_idle_session_ttlin_seconds_isValid;
}

QString OAICreateBotVersionResponse::getVoiceId() const {
    return m_voice_id;
}
void OAICreateBotVersionResponse::setVoiceId(const QString &voice_id) {
    m_voice_id = voice_id;
    m_voice_id_isSet = true;
}

bool OAICreateBotVersionResponse::is_voice_id_Set() const{
    return m_voice_id_isSet;
}

bool OAICreateBotVersionResponse::is_voice_id_Valid() const{
    return m_voice_id_isValid;
}

QString OAICreateBotVersionResponse::getChecksum() const {
    return m_checksum;
}
void OAICreateBotVersionResponse::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAICreateBotVersionResponse::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAICreateBotVersionResponse::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAICreateBotVersionResponse::getVersion() const {
    return m_version;
}
void OAICreateBotVersionResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateBotVersionResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateBotVersionResponse::is_version_Valid() const{
    return m_version_isValid;
}

OAILocale OAICreateBotVersionResponse::getLocale() const {
    return m_locale;
}
void OAICreateBotVersionResponse::setLocale(const OAILocale &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAICreateBotVersionResponse::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAICreateBotVersionResponse::is_locale_Valid() const{
    return m_locale_isValid;
}

bool OAICreateBotVersionResponse::getChildDirected() const {
    return m_child_directed;
}
void OAICreateBotVersionResponse::setChildDirected(const bool &child_directed) {
    m_child_directed = child_directed;
    m_child_directed_isSet = true;
}

bool OAICreateBotVersionResponse::is_child_directed_Set() const{
    return m_child_directed_isSet;
}

bool OAICreateBotVersionResponse::is_child_directed_Valid() const{
    return m_child_directed_isValid;
}

bool OAICreateBotVersionResponse::getEnableModelImprovements() const {
    return m_enable_model_improvements;
}
void OAICreateBotVersionResponse::setEnableModelImprovements(const bool &enable_model_improvements) {
    m_enable_model_improvements = enable_model_improvements;
    m_enable_model_improvements_isSet = true;
}

bool OAICreateBotVersionResponse::is_enable_model_improvements_Set() const{
    return m_enable_model_improvements_isSet;
}

bool OAICreateBotVersionResponse::is_enable_model_improvements_Valid() const{
    return m_enable_model_improvements_isValid;
}

bool OAICreateBotVersionResponse::getDetectSentiment() const {
    return m_detect_sentiment;
}
void OAICreateBotVersionResponse::setDetectSentiment(const bool &detect_sentiment) {
    m_detect_sentiment = detect_sentiment;
    m_detect_sentiment_isSet = true;
}

bool OAICreateBotVersionResponse::is_detect_sentiment_Set() const{
    return m_detect_sentiment_isSet;
}

bool OAICreateBotVersionResponse::is_detect_sentiment_Valid() const{
    return m_detect_sentiment_isValid;
}

bool OAICreateBotVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clarification_prompt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_abort_statement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_session_ttlin_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_directed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_model_improvements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBotVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
