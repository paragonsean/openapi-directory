/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISlot.h
 *
 * Identifies the version of a specific slot.
 */

#ifndef OAISlot_H
#define OAISlot_H

#include <QJsonObject>

#include "OAIObfuscationSetting.h"
#include "OAISlotConstraint.h"
#include "OAISlot_defaultValueSpec.h"
#include "OAISlot_valueElicitationPrompt.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISlot_valueElicitationPrompt;
class OAISlot_defaultValueSpec;

class OAISlot : public OAIObject {
public:
    OAISlot();
    OAISlot(QString json);
    ~OAISlot() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAISlotConstraint getSlotConstraint() const;
    void setSlotConstraint(const OAISlotConstraint &slot_constraint);
    bool is_slot_constraint_Set() const;
    bool is_slot_constraint_Valid() const;

    QString getSlotType() const;
    void setSlotType(const QString &slot_type);
    bool is_slot_type_Set() const;
    bool is_slot_type_Valid() const;

    QString getSlotTypeVersion() const;
    void setSlotTypeVersion(const QString &slot_type_version);
    bool is_slot_type_version_Set() const;
    bool is_slot_type_version_Valid() const;

    OAISlot_valueElicitationPrompt getValueElicitationPrompt() const;
    void setValueElicitationPrompt(const OAISlot_valueElicitationPrompt &value_elicitation_prompt);
    bool is_value_elicitation_prompt_Set() const;
    bool is_value_elicitation_prompt_Valid() const;

    qint32 getPriority() const;
    void setPriority(const qint32 &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QList getSampleUtterances() const;
    void setSampleUtterances(const QList &sample_utterances);
    bool is_sample_utterances_Set() const;
    bool is_sample_utterances_Valid() const;

    QString getResponseCard() const;
    void setResponseCard(const QString &response_card);
    bool is_response_card_Set() const;
    bool is_response_card_Valid() const;

    OAIObfuscationSetting getObfuscationSetting() const;
    void setObfuscationSetting(const OAIObfuscationSetting &obfuscation_setting);
    bool is_obfuscation_setting_Set() const;
    bool is_obfuscation_setting_Valid() const;

    OAISlot_defaultValueSpec getDefaultValueSpec() const;
    void setDefaultValueSpec(const OAISlot_defaultValueSpec &default_value_spec);
    bool is_default_value_spec_Set() const;
    bool is_default_value_spec_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAISlotConstraint m_slot_constraint;
    bool m_slot_constraint_isSet;
    bool m_slot_constraint_isValid;

    QString m_slot_type;
    bool m_slot_type_isSet;
    bool m_slot_type_isValid;

    QString m_slot_type_version;
    bool m_slot_type_version_isSet;
    bool m_slot_type_version_isValid;

    OAISlot_valueElicitationPrompt m_value_elicitation_prompt;
    bool m_value_elicitation_prompt_isSet;
    bool m_value_elicitation_prompt_isValid;

    qint32 m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QList m_sample_utterances;
    bool m_sample_utterances_isSet;
    bool m_sample_utterances_isValid;

    QString m_response_card;
    bool m_response_card_isSet;
    bool m_response_card_isValid;

    OAIObfuscationSetting m_obfuscation_setting;
    bool m_obfuscation_setting_isSet;
    bool m_obfuscation_setting_isValid;

    OAISlot_defaultValueSpec m_default_value_spec;
    bool m_default_value_spec_isSet;
    bool m_default_value_spec_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISlot)

#endif // OAISlot_H
