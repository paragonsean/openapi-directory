/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntent_request_fulfillmentActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntent_request_fulfillmentActivity::OAIPutIntent_request_fulfillmentActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntent_request_fulfillmentActivity::OAIPutIntent_request_fulfillmentActivity() {
    this->initializeModel();
}

OAIPutIntent_request_fulfillmentActivity::~OAIPutIntent_request_fulfillmentActivity() {}

void OAIPutIntent_request_fulfillmentActivity::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_code_hook_isSet = false;
    m_code_hook_isValid = false;
}

void OAIPutIntent_request_fulfillmentActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntent_request_fulfillmentActivity::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_code_hook_isValid = ::OpenAPI::fromJsonValue(m_code_hook, json[QString("codeHook")]);
    m_code_hook_isSet = !json[QString("codeHook")].isNull() && m_code_hook_isValid;
}

QString OAIPutIntent_request_fulfillmentActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntent_request_fulfillmentActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_code_hook.isSet()) {
        obj.insert(QString("codeHook"), ::OpenAPI::toJsonValue(m_code_hook));
    }
    return obj;
}

OAIFulfillmentActivityType OAIPutIntent_request_fulfillmentActivity::getType() const {
    return m_type;
}
void OAIPutIntent_request_fulfillmentActivity::setType(const OAIFulfillmentActivityType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPutIntent_request_fulfillmentActivity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPutIntent_request_fulfillmentActivity::is_type_Valid() const{
    return m_type_isValid;
}

OAIPutIntent_request_fulfillmentActivity_codeHook OAIPutIntent_request_fulfillmentActivity::getCodeHook() const {
    return m_code_hook;
}
void OAIPutIntent_request_fulfillmentActivity::setCodeHook(const OAIPutIntent_request_fulfillmentActivity_codeHook &code_hook) {
    m_code_hook = code_hook;
    m_code_hook_isSet = true;
}

bool OAIPutIntent_request_fulfillmentActivity::is_code_hook_Set() const{
    return m_code_hook_isSet;
}

bool OAIPutIntent_request_fulfillmentActivity::is_code_hook_Valid() const{
    return m_code_hook_isValid;
}

bool OAIPutIntent_request_fulfillmentActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_hook.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntent_request_fulfillmentActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
