/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutBotAliasRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutBotAliasRequest::OAIPutBotAliasRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutBotAliasRequest::OAIPutBotAliasRequest() {
    this->initializeModel();
}

OAIPutBotAliasRequest::~OAIPutBotAliasRequest() {}

void OAIPutBotAliasRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_conversation_logs_isSet = false;
    m_conversation_logs_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPutBotAliasRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutBotAliasRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_conversation_logs_isValid = ::OpenAPI::fromJsonValue(m_conversation_logs, json[QString("conversationLogs")]);
    m_conversation_logs_isSet = !json[QString("conversationLogs")].isNull() && m_conversation_logs_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIPutBotAliasRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutBotAliasRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_conversation_logs.isSet()) {
        obj.insert(QString("conversationLogs"), ::OpenAPI::toJsonValue(m_conversation_logs));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPutBotAliasRequest::getDescription() const {
    return m_description;
}
void OAIPutBotAliasRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutBotAliasRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutBotAliasRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPutBotAliasRequest::getBotVersion() const {
    return m_bot_version;
}
void OAIPutBotAliasRequest::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIPutBotAliasRequest::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIPutBotAliasRequest::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QString OAIPutBotAliasRequest::getChecksum() const {
    return m_checksum;
}
void OAIPutBotAliasRequest::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIPutBotAliasRequest::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIPutBotAliasRequest::is_checksum_Valid() const{
    return m_checksum_isValid;
}

OAIPutBotAliasRequest_conversationLogs OAIPutBotAliasRequest::getConversationLogs() const {
    return m_conversation_logs;
}
void OAIPutBotAliasRequest::setConversationLogs(const OAIPutBotAliasRequest_conversationLogs &conversation_logs) {
    m_conversation_logs = conversation_logs;
    m_conversation_logs_isSet = true;
}

bool OAIPutBotAliasRequest::is_conversation_logs_Set() const{
    return m_conversation_logs_isSet;
}

bool OAIPutBotAliasRequest::is_conversation_logs_Valid() const{
    return m_conversation_logs_isValid;
}

QList OAIPutBotAliasRequest::getTags() const {
    return m_tags;
}
void OAIPutBotAliasRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutBotAliasRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutBotAliasRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPutBotAliasRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutBotAliasRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bot_version_isValid && true;
}

} // namespace OpenAPI
