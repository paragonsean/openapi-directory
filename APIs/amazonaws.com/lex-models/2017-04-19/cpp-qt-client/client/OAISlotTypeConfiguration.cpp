/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlotTypeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlotTypeConfiguration::OAISlotTypeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlotTypeConfiguration::OAISlotTypeConfiguration() {
    this->initializeModel();
}

OAISlotTypeConfiguration::~OAISlotTypeConfiguration() {}

void OAISlotTypeConfiguration::initializeModel() {

    m_regex_configuration_isSet = false;
    m_regex_configuration_isValid = false;
}

void OAISlotTypeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlotTypeConfiguration::fromJsonObject(QJsonObject json) {

    m_regex_configuration_isValid = ::OpenAPI::fromJsonValue(m_regex_configuration, json[QString("regexConfiguration")]);
    m_regex_configuration_isSet = !json[QString("regexConfiguration")].isNull() && m_regex_configuration_isValid;
}

QString OAISlotTypeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlotTypeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_regex_configuration.isSet()) {
        obj.insert(QString("regexConfiguration"), ::OpenAPI::toJsonValue(m_regex_configuration));
    }
    return obj;
}

OAISlotTypeConfiguration_regexConfiguration OAISlotTypeConfiguration::getRegexConfiguration() const {
    return m_regex_configuration;
}
void OAISlotTypeConfiguration::setRegexConfiguration(const OAISlotTypeConfiguration_regexConfiguration &regex_configuration) {
    m_regex_configuration = regex_configuration;
    m_regex_configuration_isSet = true;
}

bool OAISlotTypeConfiguration::is_regex_configuration_Set() const{
    return m_regex_configuration_isSet;
}

bool OAISlotTypeConfiguration::is_regex_configuration_Valid() const{
    return m_regex_configuration_isValid;
}

bool OAISlotTypeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_regex_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlotTypeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
