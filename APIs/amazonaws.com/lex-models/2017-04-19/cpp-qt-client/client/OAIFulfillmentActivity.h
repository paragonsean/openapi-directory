/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFulfillmentActivity.h
 *
 * &lt;p&gt; Describes how the intent is fulfilled after the user provides all of the information required for the intent. You can provide a Lambda function to process the intent, or you can return the intent information to the client application. We recommend that you use a Lambda function so that the relevant logic lives in the Cloud and limit the client-side code primarily to presentation. If you need to update the logic, you only update the Lambda function; you don&#39;t need to upgrade your client application. &lt;/p&gt; &lt;p&gt;Consider the following examples:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In a pizza ordering application, after the user provides all of the information for placing an order, you use a Lambda function to place an order with a pizzeria. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In a gaming application, when a user says \&quot;pick up a rock,\&quot; this information must go back to the client application so that it can perform the operation and update the graphics. In this case, you want Amazon Lex to return the intent data to the client. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIFulfillmentActivity_H
#define OAIFulfillmentActivity_H

#include <QJsonObject>

#include "OAIFulfillmentActivityType.h"
#include "OAIPutIntent_request_fulfillmentActivity_codeHook.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutIntent_request_fulfillmentActivity_codeHook;

class OAIFulfillmentActivity : public OAIObject {
public:
    OAIFulfillmentActivity();
    OAIFulfillmentActivity(QString json);
    ~OAIFulfillmentActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFulfillmentActivityType getType() const;
    void setType(const OAIFulfillmentActivityType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIPutIntent_request_fulfillmentActivity_codeHook getCodeHook() const;
    void setCodeHook(const OAIPutIntent_request_fulfillmentActivity_codeHook &code_hook);
    bool is_code_hook_Set() const;
    bool is_code_hook_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFulfillmentActivityType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIPutIntent_request_fulfillmentActivity_codeHook m_code_hook;
    bool m_code_hook_isSet;
    bool m_code_hook_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFulfillmentActivity)

#endif // OAIFulfillmentActivity_H
