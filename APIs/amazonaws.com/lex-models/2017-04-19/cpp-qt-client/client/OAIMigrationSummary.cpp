/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationSummary::OAIMigrationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationSummary::OAIMigrationSummary() {
    this->initializeModel();
}

OAIMigrationSummary::~OAIMigrationSummary() {}

void OAIMigrationSummary::initializeModel() {

    m_migration_id_isSet = false;
    m_migration_id_isValid = false;

    m_v1_bot_name_isSet = false;
    m_v1_bot_name_isValid = false;

    m_v1_bot_version_isSet = false;
    m_v1_bot_version_isValid = false;

    m_v1_bot_locale_isSet = false;
    m_v1_bot_locale_isValid = false;

    m_v2_bot_id_isSet = false;
    m_v2_bot_id_isValid = false;

    m_v2_bot_role_isSet = false;
    m_v2_bot_role_isValid = false;

    m_migration_status_isSet = false;
    m_migration_status_isValid = false;

    m_migration_strategy_isSet = false;
    m_migration_strategy_isValid = false;

    m_migration_timestamp_isSet = false;
    m_migration_timestamp_isValid = false;
}

void OAIMigrationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationSummary::fromJsonObject(QJsonObject json) {

    m_migration_id_isValid = ::OpenAPI::fromJsonValue(m_migration_id, json[QString("migrationId")]);
    m_migration_id_isSet = !json[QString("migrationId")].isNull() && m_migration_id_isValid;

    m_v1_bot_name_isValid = ::OpenAPI::fromJsonValue(m_v1_bot_name, json[QString("v1BotName")]);
    m_v1_bot_name_isSet = !json[QString("v1BotName")].isNull() && m_v1_bot_name_isValid;

    m_v1_bot_version_isValid = ::OpenAPI::fromJsonValue(m_v1_bot_version, json[QString("v1BotVersion")]);
    m_v1_bot_version_isSet = !json[QString("v1BotVersion")].isNull() && m_v1_bot_version_isValid;

    m_v1_bot_locale_isValid = ::OpenAPI::fromJsonValue(m_v1_bot_locale, json[QString("v1BotLocale")]);
    m_v1_bot_locale_isSet = !json[QString("v1BotLocale")].isNull() && m_v1_bot_locale_isValid;

    m_v2_bot_id_isValid = ::OpenAPI::fromJsonValue(m_v2_bot_id, json[QString("v2BotId")]);
    m_v2_bot_id_isSet = !json[QString("v2BotId")].isNull() && m_v2_bot_id_isValid;

    m_v2_bot_role_isValid = ::OpenAPI::fromJsonValue(m_v2_bot_role, json[QString("v2BotRole")]);
    m_v2_bot_role_isSet = !json[QString("v2BotRole")].isNull() && m_v2_bot_role_isValid;

    m_migration_status_isValid = ::OpenAPI::fromJsonValue(m_migration_status, json[QString("migrationStatus")]);
    m_migration_status_isSet = !json[QString("migrationStatus")].isNull() && m_migration_status_isValid;

    m_migration_strategy_isValid = ::OpenAPI::fromJsonValue(m_migration_strategy, json[QString("migrationStrategy")]);
    m_migration_strategy_isSet = !json[QString("migrationStrategy")].isNull() && m_migration_strategy_isValid;

    m_migration_timestamp_isValid = ::OpenAPI::fromJsonValue(m_migration_timestamp, json[QString("migrationTimestamp")]);
    m_migration_timestamp_isSet = !json[QString("migrationTimestamp")].isNull() && m_migration_timestamp_isValid;
}

QString OAIMigrationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_migration_id_isSet) {
        obj.insert(QString("migrationId"), ::OpenAPI::toJsonValue(m_migration_id));
    }
    if (m_v1_bot_name_isSet) {
        obj.insert(QString("v1BotName"), ::OpenAPI::toJsonValue(m_v1_bot_name));
    }
    if (m_v1_bot_version_isSet) {
        obj.insert(QString("v1BotVersion"), ::OpenAPI::toJsonValue(m_v1_bot_version));
    }
    if (m_v1_bot_locale.isSet()) {
        obj.insert(QString("v1BotLocale"), ::OpenAPI::toJsonValue(m_v1_bot_locale));
    }
    if (m_v2_bot_id_isSet) {
        obj.insert(QString("v2BotId"), ::OpenAPI::toJsonValue(m_v2_bot_id));
    }
    if (m_v2_bot_role_isSet) {
        obj.insert(QString("v2BotRole"), ::OpenAPI::toJsonValue(m_v2_bot_role));
    }
    if (m_migration_status.isSet()) {
        obj.insert(QString("migrationStatus"), ::OpenAPI::toJsonValue(m_migration_status));
    }
    if (m_migration_strategy.isSet()) {
        obj.insert(QString("migrationStrategy"), ::OpenAPI::toJsonValue(m_migration_strategy));
    }
    if (m_migration_timestamp_isSet) {
        obj.insert(QString("migrationTimestamp"), ::OpenAPI::toJsonValue(m_migration_timestamp));
    }
    return obj;
}

QString OAIMigrationSummary::getMigrationId() const {
    return m_migration_id;
}
void OAIMigrationSummary::setMigrationId(const QString &migration_id) {
    m_migration_id = migration_id;
    m_migration_id_isSet = true;
}

bool OAIMigrationSummary::is_migration_id_Set() const{
    return m_migration_id_isSet;
}

bool OAIMigrationSummary::is_migration_id_Valid() const{
    return m_migration_id_isValid;
}

QString OAIMigrationSummary::getV1BotName() const {
    return m_v1_bot_name;
}
void OAIMigrationSummary::setV1BotName(const QString &v1_bot_name) {
    m_v1_bot_name = v1_bot_name;
    m_v1_bot_name_isSet = true;
}

bool OAIMigrationSummary::is_v1_bot_name_Set() const{
    return m_v1_bot_name_isSet;
}

bool OAIMigrationSummary::is_v1_bot_name_Valid() const{
    return m_v1_bot_name_isValid;
}

QString OAIMigrationSummary::getV1BotVersion() const {
    return m_v1_bot_version;
}
void OAIMigrationSummary::setV1BotVersion(const QString &v1_bot_version) {
    m_v1_bot_version = v1_bot_version;
    m_v1_bot_version_isSet = true;
}

bool OAIMigrationSummary::is_v1_bot_version_Set() const{
    return m_v1_bot_version_isSet;
}

bool OAIMigrationSummary::is_v1_bot_version_Valid() const{
    return m_v1_bot_version_isValid;
}

OAILocale OAIMigrationSummary::getV1BotLocale() const {
    return m_v1_bot_locale;
}
void OAIMigrationSummary::setV1BotLocale(const OAILocale &v1_bot_locale) {
    m_v1_bot_locale = v1_bot_locale;
    m_v1_bot_locale_isSet = true;
}

bool OAIMigrationSummary::is_v1_bot_locale_Set() const{
    return m_v1_bot_locale_isSet;
}

bool OAIMigrationSummary::is_v1_bot_locale_Valid() const{
    return m_v1_bot_locale_isValid;
}

QString OAIMigrationSummary::getV2BotId() const {
    return m_v2_bot_id;
}
void OAIMigrationSummary::setV2BotId(const QString &v2_bot_id) {
    m_v2_bot_id = v2_bot_id;
    m_v2_bot_id_isSet = true;
}

bool OAIMigrationSummary::is_v2_bot_id_Set() const{
    return m_v2_bot_id_isSet;
}

bool OAIMigrationSummary::is_v2_bot_id_Valid() const{
    return m_v2_bot_id_isValid;
}

QString OAIMigrationSummary::getV2BotRole() const {
    return m_v2_bot_role;
}
void OAIMigrationSummary::setV2BotRole(const QString &v2_bot_role) {
    m_v2_bot_role = v2_bot_role;
    m_v2_bot_role_isSet = true;
}

bool OAIMigrationSummary::is_v2_bot_role_Set() const{
    return m_v2_bot_role_isSet;
}

bool OAIMigrationSummary::is_v2_bot_role_Valid() const{
    return m_v2_bot_role_isValid;
}

OAIMigrationStatus OAIMigrationSummary::getMigrationStatus() const {
    return m_migration_status;
}
void OAIMigrationSummary::setMigrationStatus(const OAIMigrationStatus &migration_status) {
    m_migration_status = migration_status;
    m_migration_status_isSet = true;
}

bool OAIMigrationSummary::is_migration_status_Set() const{
    return m_migration_status_isSet;
}

bool OAIMigrationSummary::is_migration_status_Valid() const{
    return m_migration_status_isValid;
}

OAIMigrationStrategy OAIMigrationSummary::getMigrationStrategy() const {
    return m_migration_strategy;
}
void OAIMigrationSummary::setMigrationStrategy(const OAIMigrationStrategy &migration_strategy) {
    m_migration_strategy = migration_strategy;
    m_migration_strategy_isSet = true;
}

bool OAIMigrationSummary::is_migration_strategy_Set() const{
    return m_migration_strategy_isSet;
}

bool OAIMigrationSummary::is_migration_strategy_Valid() const{
    return m_migration_strategy_isValid;
}

QDateTime OAIMigrationSummary::getMigrationTimestamp() const {
    return m_migration_timestamp;
}
void OAIMigrationSummary::setMigrationTimestamp(const QDateTime &migration_timestamp) {
    m_migration_timestamp = migration_timestamp;
    m_migration_timestamp_isSet = true;
}

bool OAIMigrationSummary::is_migration_timestamp_Set() const{
    return m_migration_timestamp_isSet;
}

bool OAIMigrationSummary::is_migration_timestamp_Valid() const{
    return m_migration_timestamp_isValid;
}

bool OAIMigrationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_migration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v1_bot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v1_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v1_bot_locale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_v2_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v2_bot_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
