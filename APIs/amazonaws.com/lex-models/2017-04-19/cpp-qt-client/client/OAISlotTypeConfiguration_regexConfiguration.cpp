/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlotTypeConfiguration_regexConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlotTypeConfiguration_regexConfiguration::OAISlotTypeConfiguration_regexConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlotTypeConfiguration_regexConfiguration::OAISlotTypeConfiguration_regexConfiguration() {
    this->initializeModel();
}

OAISlotTypeConfiguration_regexConfiguration::~OAISlotTypeConfiguration_regexConfiguration() {}

void OAISlotTypeConfiguration_regexConfiguration::initializeModel() {

    m_pattern_isSet = false;
    m_pattern_isValid = false;
}

void OAISlotTypeConfiguration_regexConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlotTypeConfiguration_regexConfiguration::fromJsonObject(QJsonObject json) {

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;
}

QString OAISlotTypeConfiguration_regexConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlotTypeConfiguration_regexConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    return obj;
}

QString OAISlotTypeConfiguration_regexConfiguration::getPattern() const {
    return m_pattern;
}
void OAISlotTypeConfiguration_regexConfiguration::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAISlotTypeConfiguration_regexConfiguration::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAISlotTypeConfiguration_regexConfiguration::is_pattern_Valid() const{
    return m_pattern_isValid;
}

bool OAISlotTypeConfiguration_regexConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlotTypeConfiguration_regexConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pattern_isValid && true;
}

} // namespace OpenAPI
