/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationAlert::OAIMigrationAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationAlert::OAIMigrationAlert() {
    this->initializeModel();
}

OAIMigrationAlert::~OAIMigrationAlert() {}

void OAIMigrationAlert::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_reference_urls_isSet = false;
    m_reference_urls_isValid = false;
}

void OAIMigrationAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationAlert::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_reference_urls_isValid = ::OpenAPI::fromJsonValue(m_reference_urls, json[QString("referenceURLs")]);
    m_reference_urls_isSet = !json[QString("referenceURLs")].isNull() && m_reference_urls_isValid;
}

QString OAIMigrationAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_reference_urls.isSet()) {
        obj.insert(QString("referenceURLs"), ::OpenAPI::toJsonValue(m_reference_urls));
    }
    return obj;
}

OAIMigrationAlertType OAIMigrationAlert::getType() const {
    return m_type;
}
void OAIMigrationAlert::setType(const OAIMigrationAlertType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMigrationAlert::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMigrationAlert::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMigrationAlert::getMessage() const {
    return m_message;
}
void OAIMigrationAlert::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMigrationAlert::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMigrationAlert::is_message_Valid() const{
    return m_message_isValid;
}

QList OAIMigrationAlert::getDetails() const {
    return m_details;
}
void OAIMigrationAlert::setDetails(const QList &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIMigrationAlert::is_details_Set() const{
    return m_details_isSet;
}

bool OAIMigrationAlert::is_details_Valid() const{
    return m_details_isValid;
}

QList OAIMigrationAlert::getReferenceUrls() const {
    return m_reference_urls;
}
void OAIMigrationAlert::setReferenceUrls(const QList &reference_urls) {
    m_reference_urls = reference_urls;
    m_reference_urls_isSet = true;
}

bool OAIMigrationAlert::is_reference_urls_Set() const{
    return m_reference_urls_isSet;
}

bool OAIMigrationAlert::is_reference_urls_Valid() const{
    return m_reference_urls_isValid;
}

bool OAIMigrationAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
