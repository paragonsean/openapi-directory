/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartMigrationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartMigrationRequest::OAIStartMigrationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartMigrationRequest::OAIStartMigrationRequest() {
    this->initializeModel();
}

OAIStartMigrationRequest::~OAIStartMigrationRequest() {}

void OAIStartMigrationRequest::initializeModel() {

    m_v1_bot_name_isSet = false;
    m_v1_bot_name_isValid = false;

    m_v1_bot_version_isSet = false;
    m_v1_bot_version_isValid = false;

    m_v2_bot_name_isSet = false;
    m_v2_bot_name_isValid = false;

    m_v2_bot_role_isSet = false;
    m_v2_bot_role_isValid = false;

    m_migration_strategy_isSet = false;
    m_migration_strategy_isValid = false;
}

void OAIStartMigrationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartMigrationRequest::fromJsonObject(QJsonObject json) {

    m_v1_bot_name_isValid = ::OpenAPI::fromJsonValue(m_v1_bot_name, json[QString("v1BotName")]);
    m_v1_bot_name_isSet = !json[QString("v1BotName")].isNull() && m_v1_bot_name_isValid;

    m_v1_bot_version_isValid = ::OpenAPI::fromJsonValue(m_v1_bot_version, json[QString("v1BotVersion")]);
    m_v1_bot_version_isSet = !json[QString("v1BotVersion")].isNull() && m_v1_bot_version_isValid;

    m_v2_bot_name_isValid = ::OpenAPI::fromJsonValue(m_v2_bot_name, json[QString("v2BotName")]);
    m_v2_bot_name_isSet = !json[QString("v2BotName")].isNull() && m_v2_bot_name_isValid;

    m_v2_bot_role_isValid = ::OpenAPI::fromJsonValue(m_v2_bot_role, json[QString("v2BotRole")]);
    m_v2_bot_role_isSet = !json[QString("v2BotRole")].isNull() && m_v2_bot_role_isValid;

    m_migration_strategy_isValid = ::OpenAPI::fromJsonValue(m_migration_strategy, json[QString("migrationStrategy")]);
    m_migration_strategy_isSet = !json[QString("migrationStrategy")].isNull() && m_migration_strategy_isValid;
}

QString OAIStartMigrationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartMigrationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_v1_bot_name_isSet) {
        obj.insert(QString("v1BotName"), ::OpenAPI::toJsonValue(m_v1_bot_name));
    }
    if (m_v1_bot_version_isSet) {
        obj.insert(QString("v1BotVersion"), ::OpenAPI::toJsonValue(m_v1_bot_version));
    }
    if (m_v2_bot_name_isSet) {
        obj.insert(QString("v2BotName"), ::OpenAPI::toJsonValue(m_v2_bot_name));
    }
    if (m_v2_bot_role_isSet) {
        obj.insert(QString("v2BotRole"), ::OpenAPI::toJsonValue(m_v2_bot_role));
    }
    if (m_migration_strategy.isSet()) {
        obj.insert(QString("migrationStrategy"), ::OpenAPI::toJsonValue(m_migration_strategy));
    }
    return obj;
}

QString OAIStartMigrationRequest::getV1BotName() const {
    return m_v1_bot_name;
}
void OAIStartMigrationRequest::setV1BotName(const QString &v1_bot_name) {
    m_v1_bot_name = v1_bot_name;
    m_v1_bot_name_isSet = true;
}

bool OAIStartMigrationRequest::is_v1_bot_name_Set() const{
    return m_v1_bot_name_isSet;
}

bool OAIStartMigrationRequest::is_v1_bot_name_Valid() const{
    return m_v1_bot_name_isValid;
}

QString OAIStartMigrationRequest::getV1BotVersion() const {
    return m_v1_bot_version;
}
void OAIStartMigrationRequest::setV1BotVersion(const QString &v1_bot_version) {
    m_v1_bot_version = v1_bot_version;
    m_v1_bot_version_isSet = true;
}

bool OAIStartMigrationRequest::is_v1_bot_version_Set() const{
    return m_v1_bot_version_isSet;
}

bool OAIStartMigrationRequest::is_v1_bot_version_Valid() const{
    return m_v1_bot_version_isValid;
}

QString OAIStartMigrationRequest::getV2BotName() const {
    return m_v2_bot_name;
}
void OAIStartMigrationRequest::setV2BotName(const QString &v2_bot_name) {
    m_v2_bot_name = v2_bot_name;
    m_v2_bot_name_isSet = true;
}

bool OAIStartMigrationRequest::is_v2_bot_name_Set() const{
    return m_v2_bot_name_isSet;
}

bool OAIStartMigrationRequest::is_v2_bot_name_Valid() const{
    return m_v2_bot_name_isValid;
}

QString OAIStartMigrationRequest::getV2BotRole() const {
    return m_v2_bot_role;
}
void OAIStartMigrationRequest::setV2BotRole(const QString &v2_bot_role) {
    m_v2_bot_role = v2_bot_role;
    m_v2_bot_role_isSet = true;
}

bool OAIStartMigrationRequest::is_v2_bot_role_Set() const{
    return m_v2_bot_role_isSet;
}

bool OAIStartMigrationRequest::is_v2_bot_role_Valid() const{
    return m_v2_bot_role_isValid;
}

OAIMigrationStrategy OAIStartMigrationRequest::getMigrationStrategy() const {
    return m_migration_strategy;
}
void OAIStartMigrationRequest::setMigrationStrategy(const OAIMigrationStrategy &migration_strategy) {
    m_migration_strategy = migration_strategy;
    m_migration_strategy_isSet = true;
}

bool OAIStartMigrationRequest::is_migration_strategy_Set() const{
    return m_migration_strategy_isSet;
}

bool OAIStartMigrationRequest::is_migration_strategy_Valid() const{
    return m_migration_strategy_isValid;
}

bool OAIStartMigrationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_v1_bot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v1_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v2_bot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v2_bot_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartMigrationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_v1_bot_name_isValid && m_v1_bot_version_isValid && m_v2_bot_name_isValid && m_v2_bot_role_isValid && m_migration_strategy_isValid && true;
}

} // namespace OpenAPI
