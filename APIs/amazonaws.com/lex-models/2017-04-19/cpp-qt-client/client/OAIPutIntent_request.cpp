/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntent_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntent_request::OAIPutIntent_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntent_request::OAIPutIntent_request() {
    this->initializeModel();
}

OAIPutIntent_request::~OAIPutIntent_request() {}

void OAIPutIntent_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;

    m_sample_utterances_isSet = false;
    m_sample_utterances_isValid = false;

    m_confirmation_prompt_isSet = false;
    m_confirmation_prompt_isValid = false;

    m_rejection_statement_isSet = false;
    m_rejection_statement_isValid = false;

    m_follow_up_prompt_isSet = false;
    m_follow_up_prompt_isValid = false;

    m_conclusion_statement_isSet = false;
    m_conclusion_statement_isValid = false;

    m_dialog_code_hook_isSet = false;
    m_dialog_code_hook_isValid = false;

    m_fulfillment_activity_isSet = false;
    m_fulfillment_activity_isValid = false;

    m_parent_intent_signature_isSet = false;
    m_parent_intent_signature_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_create_version_isSet = false;
    m_create_version_isValid = false;

    m_kendra_configuration_isSet = false;
    m_kendra_configuration_isValid = false;

    m_input_contexts_isSet = false;
    m_input_contexts_isValid = false;

    m_output_contexts_isSet = false;
    m_output_contexts_isValid = false;
}

void OAIPutIntent_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntent_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("slots")]);
    m_r_slots_isSet = !json[QString("slots")].isNull() && m_r_slots_isValid;

    m_sample_utterances_isValid = ::OpenAPI::fromJsonValue(m_sample_utterances, json[QString("sampleUtterances")]);
    m_sample_utterances_isSet = !json[QString("sampleUtterances")].isNull() && m_sample_utterances_isValid;

    m_confirmation_prompt_isValid = ::OpenAPI::fromJsonValue(m_confirmation_prompt, json[QString("confirmationPrompt")]);
    m_confirmation_prompt_isSet = !json[QString("confirmationPrompt")].isNull() && m_confirmation_prompt_isValid;

    m_rejection_statement_isValid = ::OpenAPI::fromJsonValue(m_rejection_statement, json[QString("rejectionStatement")]);
    m_rejection_statement_isSet = !json[QString("rejectionStatement")].isNull() && m_rejection_statement_isValid;

    m_follow_up_prompt_isValid = ::OpenAPI::fromJsonValue(m_follow_up_prompt, json[QString("followUpPrompt")]);
    m_follow_up_prompt_isSet = !json[QString("followUpPrompt")].isNull() && m_follow_up_prompt_isValid;

    m_conclusion_statement_isValid = ::OpenAPI::fromJsonValue(m_conclusion_statement, json[QString("conclusionStatement")]);
    m_conclusion_statement_isSet = !json[QString("conclusionStatement")].isNull() && m_conclusion_statement_isValid;

    m_dialog_code_hook_isValid = ::OpenAPI::fromJsonValue(m_dialog_code_hook, json[QString("dialogCodeHook")]);
    m_dialog_code_hook_isSet = !json[QString("dialogCodeHook")].isNull() && m_dialog_code_hook_isValid;

    m_fulfillment_activity_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_activity, json[QString("fulfillmentActivity")]);
    m_fulfillment_activity_isSet = !json[QString("fulfillmentActivity")].isNull() && m_fulfillment_activity_isValid;

    m_parent_intent_signature_isValid = ::OpenAPI::fromJsonValue(m_parent_intent_signature, json[QString("parentIntentSignature")]);
    m_parent_intent_signature_isSet = !json[QString("parentIntentSignature")].isNull() && m_parent_intent_signature_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_create_version_isValid = ::OpenAPI::fromJsonValue(m_create_version, json[QString("createVersion")]);
    m_create_version_isSet = !json[QString("createVersion")].isNull() && m_create_version_isValid;

    m_kendra_configuration_isValid = ::OpenAPI::fromJsonValue(m_kendra_configuration, json[QString("kendraConfiguration")]);
    m_kendra_configuration_isSet = !json[QString("kendraConfiguration")].isNull() && m_kendra_configuration_isValid;

    m_input_contexts_isValid = ::OpenAPI::fromJsonValue(m_input_contexts, json[QString("inputContexts")]);
    m_input_contexts_isSet = !json[QString("inputContexts")].isNull() && m_input_contexts_isValid;

    m_output_contexts_isValid = ::OpenAPI::fromJsonValue(m_output_contexts, json[QString("outputContexts")]);
    m_output_contexts_isSet = !json[QString("outputContexts")].isNull() && m_output_contexts_isValid;
}

QString OAIPutIntent_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntent_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_r_slots.size() > 0) {
        obj.insert(QString("slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    if (m_sample_utterances.size() > 0) {
        obj.insert(QString("sampleUtterances"), ::OpenAPI::toJsonValue(m_sample_utterances));
    }
    if (m_confirmation_prompt.isSet()) {
        obj.insert(QString("confirmationPrompt"), ::OpenAPI::toJsonValue(m_confirmation_prompt));
    }
    if (m_rejection_statement.isSet()) {
        obj.insert(QString("rejectionStatement"), ::OpenAPI::toJsonValue(m_rejection_statement));
    }
    if (m_follow_up_prompt.isSet()) {
        obj.insert(QString("followUpPrompt"), ::OpenAPI::toJsonValue(m_follow_up_prompt));
    }
    if (m_conclusion_statement.isSet()) {
        obj.insert(QString("conclusionStatement"), ::OpenAPI::toJsonValue(m_conclusion_statement));
    }
    if (m_dialog_code_hook.isSet()) {
        obj.insert(QString("dialogCodeHook"), ::OpenAPI::toJsonValue(m_dialog_code_hook));
    }
    if (m_fulfillment_activity.isSet()) {
        obj.insert(QString("fulfillmentActivity"), ::OpenAPI::toJsonValue(m_fulfillment_activity));
    }
    if (m_parent_intent_signature_isSet) {
        obj.insert(QString("parentIntentSignature"), ::OpenAPI::toJsonValue(m_parent_intent_signature));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_create_version_isSet) {
        obj.insert(QString("createVersion"), ::OpenAPI::toJsonValue(m_create_version));
    }
    if (m_kendra_configuration.isSet()) {
        obj.insert(QString("kendraConfiguration"), ::OpenAPI::toJsonValue(m_kendra_configuration));
    }
    if (m_input_contexts.size() > 0) {
        obj.insert(QString("inputContexts"), ::OpenAPI::toJsonValue(m_input_contexts));
    }
    if (m_output_contexts.size() > 0) {
        obj.insert(QString("outputContexts"), ::OpenAPI::toJsonValue(m_output_contexts));
    }
    return obj;
}

QString OAIPutIntent_request::getDescription() const {
    return m_description;
}
void OAIPutIntent_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutIntent_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutIntent_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAISlot> OAIPutIntent_request::getRSlots() const {
    return m_r_slots;
}
void OAIPutIntent_request::setRSlots(const QList<OAISlot> &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIPutIntent_request::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIPutIntent_request::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

QList<QString> OAIPutIntent_request::getSampleUtterances() const {
    return m_sample_utterances;
}
void OAIPutIntent_request::setSampleUtterances(const QList<QString> &sample_utterances) {
    m_sample_utterances = sample_utterances;
    m_sample_utterances_isSet = true;
}

bool OAIPutIntent_request::is_sample_utterances_Set() const{
    return m_sample_utterances_isSet;
}

bool OAIPutIntent_request::is_sample_utterances_Valid() const{
    return m_sample_utterances_isValid;
}

OAIPutBot_request_clarificationPrompt OAIPutIntent_request::getConfirmationPrompt() const {
    return m_confirmation_prompt;
}
void OAIPutIntent_request::setConfirmationPrompt(const OAIPutBot_request_clarificationPrompt &confirmation_prompt) {
    m_confirmation_prompt = confirmation_prompt;
    m_confirmation_prompt_isSet = true;
}

bool OAIPutIntent_request::is_confirmation_prompt_Set() const{
    return m_confirmation_prompt_isSet;
}

bool OAIPutIntent_request::is_confirmation_prompt_Valid() const{
    return m_confirmation_prompt_isValid;
}

OAIPutBot_request_abortStatement OAIPutIntent_request::getRejectionStatement() const {
    return m_rejection_statement;
}
void OAIPutIntent_request::setRejectionStatement(const OAIPutBot_request_abortStatement &rejection_statement) {
    m_rejection_statement = rejection_statement;
    m_rejection_statement_isSet = true;
}

bool OAIPutIntent_request::is_rejection_statement_Set() const{
    return m_rejection_statement_isSet;
}

bool OAIPutIntent_request::is_rejection_statement_Valid() const{
    return m_rejection_statement_isValid;
}

OAIPutIntent_request_followUpPrompt OAIPutIntent_request::getFollowUpPrompt() const {
    return m_follow_up_prompt;
}
void OAIPutIntent_request::setFollowUpPrompt(const OAIPutIntent_request_followUpPrompt &follow_up_prompt) {
    m_follow_up_prompt = follow_up_prompt;
    m_follow_up_prompt_isSet = true;
}

bool OAIPutIntent_request::is_follow_up_prompt_Set() const{
    return m_follow_up_prompt_isSet;
}

bool OAIPutIntent_request::is_follow_up_prompt_Valid() const{
    return m_follow_up_prompt_isValid;
}

OAIPutBot_request_abortStatement OAIPutIntent_request::getConclusionStatement() const {
    return m_conclusion_statement;
}
void OAIPutIntent_request::setConclusionStatement(const OAIPutBot_request_abortStatement &conclusion_statement) {
    m_conclusion_statement = conclusion_statement;
    m_conclusion_statement_isSet = true;
}

bool OAIPutIntent_request::is_conclusion_statement_Set() const{
    return m_conclusion_statement_isSet;
}

bool OAIPutIntent_request::is_conclusion_statement_Valid() const{
    return m_conclusion_statement_isValid;
}

OAIPutIntent_request_dialogCodeHook OAIPutIntent_request::getDialogCodeHook() const {
    return m_dialog_code_hook;
}
void OAIPutIntent_request::setDialogCodeHook(const OAIPutIntent_request_dialogCodeHook &dialog_code_hook) {
    m_dialog_code_hook = dialog_code_hook;
    m_dialog_code_hook_isSet = true;
}

bool OAIPutIntent_request::is_dialog_code_hook_Set() const{
    return m_dialog_code_hook_isSet;
}

bool OAIPutIntent_request::is_dialog_code_hook_Valid() const{
    return m_dialog_code_hook_isValid;
}

OAIPutIntent_request_fulfillmentActivity OAIPutIntent_request::getFulfillmentActivity() const {
    return m_fulfillment_activity;
}
void OAIPutIntent_request::setFulfillmentActivity(const OAIPutIntent_request_fulfillmentActivity &fulfillment_activity) {
    m_fulfillment_activity = fulfillment_activity;
    m_fulfillment_activity_isSet = true;
}

bool OAIPutIntent_request::is_fulfillment_activity_Set() const{
    return m_fulfillment_activity_isSet;
}

bool OAIPutIntent_request::is_fulfillment_activity_Valid() const{
    return m_fulfillment_activity_isValid;
}

QString OAIPutIntent_request::getParentIntentSignature() const {
    return m_parent_intent_signature;
}
void OAIPutIntent_request::setParentIntentSignature(const QString &parent_intent_signature) {
    m_parent_intent_signature = parent_intent_signature;
    m_parent_intent_signature_isSet = true;
}

bool OAIPutIntent_request::is_parent_intent_signature_Set() const{
    return m_parent_intent_signature_isSet;
}

bool OAIPutIntent_request::is_parent_intent_signature_Valid() const{
    return m_parent_intent_signature_isValid;
}

QString OAIPutIntent_request::getChecksum() const {
    return m_checksum;
}
void OAIPutIntent_request::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIPutIntent_request::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIPutIntent_request::is_checksum_Valid() const{
    return m_checksum_isValid;
}

bool OAIPutIntent_request::isCreateVersion() const {
    return m_create_version;
}
void OAIPutIntent_request::setCreateVersion(const bool &create_version) {
    m_create_version = create_version;
    m_create_version_isSet = true;
}

bool OAIPutIntent_request::is_create_version_Set() const{
    return m_create_version_isSet;
}

bool OAIPutIntent_request::is_create_version_Valid() const{
    return m_create_version_isValid;
}

OAIPutIntent_request_kendraConfiguration OAIPutIntent_request::getKendraConfiguration() const {
    return m_kendra_configuration;
}
void OAIPutIntent_request::setKendraConfiguration(const OAIPutIntent_request_kendraConfiguration &kendra_configuration) {
    m_kendra_configuration = kendra_configuration;
    m_kendra_configuration_isSet = true;
}

bool OAIPutIntent_request::is_kendra_configuration_Set() const{
    return m_kendra_configuration_isSet;
}

bool OAIPutIntent_request::is_kendra_configuration_Valid() const{
    return m_kendra_configuration_isValid;
}

QList<OAIInputContext> OAIPutIntent_request::getInputContexts() const {
    return m_input_contexts;
}
void OAIPutIntent_request::setInputContexts(const QList<OAIInputContext> &input_contexts) {
    m_input_contexts = input_contexts;
    m_input_contexts_isSet = true;
}

bool OAIPutIntent_request::is_input_contexts_Set() const{
    return m_input_contexts_isSet;
}

bool OAIPutIntent_request::is_input_contexts_Valid() const{
    return m_input_contexts_isValid;
}

QList<OAIOutputContext> OAIPutIntent_request::getOutputContexts() const {
    return m_output_contexts;
}
void OAIPutIntent_request::setOutputContexts(const QList<OAIOutputContext> &output_contexts) {
    m_output_contexts = output_contexts;
    m_output_contexts_isSet = true;
}

bool OAIPutIntent_request::is_output_contexts_Set() const{
    return m_output_contexts_isSet;
}

bool OAIPutIntent_request::is_output_contexts_Valid() const{
    return m_output_contexts_isValid;
}

bool OAIPutIntent_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_slots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_utterances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_prompt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejection_statement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_up_prompt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conclusion_statement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialog_code_hook.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_intent_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kendra_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntent_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
