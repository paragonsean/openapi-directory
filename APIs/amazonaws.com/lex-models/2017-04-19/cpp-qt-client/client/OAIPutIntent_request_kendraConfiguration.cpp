/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntent_request_kendraConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntent_request_kendraConfiguration::OAIPutIntent_request_kendraConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntent_request_kendraConfiguration::OAIPutIntent_request_kendraConfiguration() {
    this->initializeModel();
}

OAIPutIntent_request_kendraConfiguration::~OAIPutIntent_request_kendraConfiguration() {}

void OAIPutIntent_request_kendraConfiguration::initializeModel() {

    m_kendra_index_isSet = false;
    m_kendra_index_isValid = false;

    m_query_filter_string_isSet = false;
    m_query_filter_string_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIPutIntent_request_kendraConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntent_request_kendraConfiguration::fromJsonObject(QJsonObject json) {

    m_kendra_index_isValid = ::OpenAPI::fromJsonValue(m_kendra_index, json[QString("kendraIndex")]);
    m_kendra_index_isSet = !json[QString("kendraIndex")].isNull() && m_kendra_index_isValid;

    m_query_filter_string_isValid = ::OpenAPI::fromJsonValue(m_query_filter_string, json[QString("queryFilterString")]);
    m_query_filter_string_isSet = !json[QString("queryFilterString")].isNull() && m_query_filter_string_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIPutIntent_request_kendraConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntent_request_kendraConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_kendra_index_isSet) {
        obj.insert(QString("kendraIndex"), ::OpenAPI::toJsonValue(m_kendra_index));
    }
    if (m_query_filter_string_isSet) {
        obj.insert(QString("queryFilterString"), ::OpenAPI::toJsonValue(m_query_filter_string));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIPutIntent_request_kendraConfiguration::getKendraIndex() const {
    return m_kendra_index;
}
void OAIPutIntent_request_kendraConfiguration::setKendraIndex(const QString &kendra_index) {
    m_kendra_index = kendra_index;
    m_kendra_index_isSet = true;
}

bool OAIPutIntent_request_kendraConfiguration::is_kendra_index_Set() const{
    return m_kendra_index_isSet;
}

bool OAIPutIntent_request_kendraConfiguration::is_kendra_index_Valid() const{
    return m_kendra_index_isValid;
}

QString OAIPutIntent_request_kendraConfiguration::getQueryFilterString() const {
    return m_query_filter_string;
}
void OAIPutIntent_request_kendraConfiguration::setQueryFilterString(const QString &query_filter_string) {
    m_query_filter_string = query_filter_string;
    m_query_filter_string_isSet = true;
}

bool OAIPutIntent_request_kendraConfiguration::is_query_filter_string_Set() const{
    return m_query_filter_string_isSet;
}

bool OAIPutIntent_request_kendraConfiguration::is_query_filter_string_Valid() const{
    return m_query_filter_string_isValid;
}

QString OAIPutIntent_request_kendraConfiguration::getRole() const {
    return m_role;
}
void OAIPutIntent_request_kendraConfiguration::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPutIntent_request_kendraConfiguration::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPutIntent_request_kendraConfiguration::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIPutIntent_request_kendraConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kendra_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_filter_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntent_request_kendraConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
