/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntent_request_dialogCodeHook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntent_request_dialogCodeHook::OAIPutIntent_request_dialogCodeHook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntent_request_dialogCodeHook::OAIPutIntent_request_dialogCodeHook() {
    this->initializeModel();
}

OAIPutIntent_request_dialogCodeHook::~OAIPutIntent_request_dialogCodeHook() {}

void OAIPutIntent_request_dialogCodeHook::initializeModel() {

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_message_version_isSet = false;
    m_message_version_isValid = false;
}

void OAIPutIntent_request_dialogCodeHook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntent_request_dialogCodeHook::fromJsonObject(QJsonObject json) {

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_message_version_isValid = ::OpenAPI::fromJsonValue(m_message_version, json[QString("messageVersion")]);
    m_message_version_isSet = !json[QString("messageVersion")].isNull() && m_message_version_isValid;
}

QString OAIPutIntent_request_dialogCodeHook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntent_request_dialogCodeHook::asJsonObject() const {
    QJsonObject obj;
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_message_version_isSet) {
        obj.insert(QString("messageVersion"), ::OpenAPI::toJsonValue(m_message_version));
    }
    return obj;
}

QString OAIPutIntent_request_dialogCodeHook::getUri() const {
    return m_uri;
}
void OAIPutIntent_request_dialogCodeHook::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPutIntent_request_dialogCodeHook::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPutIntent_request_dialogCodeHook::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIPutIntent_request_dialogCodeHook::getMessageVersion() const {
    return m_message_version;
}
void OAIPutIntent_request_dialogCodeHook::setMessageVersion(const QString &message_version) {
    m_message_version = message_version;
    m_message_version_isSet = true;
}

bool OAIPutIntent_request_dialogCodeHook::is_message_version_Set() const{
    return m_message_version_isSet;
}

bool OAIPutIntent_request_dialogCodeHook::is_message_version_Valid() const{
    return m_message_version_isValid;
}

bool OAIPutIntent_request_dialogCodeHook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntent_request_dialogCodeHook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
