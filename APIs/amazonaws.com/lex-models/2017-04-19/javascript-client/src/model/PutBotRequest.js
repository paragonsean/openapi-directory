/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Intent from './Intent';
import PutBotRequestAbortStatement from './PutBotRequestAbortStatement';
import PutBotRequestClarificationPrompt from './PutBotRequestClarificationPrompt';
import Tag from './Tag';

/**
 * The PutBotRequest model module.
 * @module model/PutBotRequest
 * @version 2017-04-19
 */
class PutBotRequest {
    /**
     * Constructs a new <code>PutBotRequest</code>.
     * @alias module:model/PutBotRequest
     * @param locale {module:model/PutBotRequest.LocaleEnum} <p> Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. </p> <p>The default is <code>en-US</code>.</p>
     * @param childDirected {Boolean} <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a> </p>
     */
    constructor(locale, childDirected) { 
        
        PutBotRequest.initialize(this, locale, childDirected);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, locale, childDirected) { 
        obj['locale'] = locale;
        obj['childDirected'] = childDirected;
    }

    /**
     * Constructs a <code>PutBotRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutBotRequest} obj Optional instance to populate.
     * @return {module:model/PutBotRequest} The populated <code>PutBotRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutBotRequest();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('intents')) {
                obj['intents'] = ApiClient.convertToType(data['intents'], [Intent]);
            }
            if (data.hasOwnProperty('enableModelImprovements')) {
                obj['enableModelImprovements'] = ApiClient.convertToType(data['enableModelImprovements'], 'Boolean');
            }
            if (data.hasOwnProperty('nluIntentConfidenceThreshold')) {
                obj['nluIntentConfidenceThreshold'] = ApiClient.convertToType(data['nluIntentConfidenceThreshold'], 'Number');
            }
            if (data.hasOwnProperty('clarificationPrompt')) {
                obj['clarificationPrompt'] = PutBotRequestClarificationPrompt.constructFromObject(data['clarificationPrompt']);
            }
            if (data.hasOwnProperty('abortStatement')) {
                obj['abortStatement'] = PutBotRequestAbortStatement.constructFromObject(data['abortStatement']);
            }
            if (data.hasOwnProperty('idleSessionTTLInSeconds')) {
                obj['idleSessionTTLInSeconds'] = ApiClient.convertToType(data['idleSessionTTLInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('voiceId')) {
                obj['voiceId'] = ApiClient.convertToType(data['voiceId'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('processBehavior')) {
                obj['processBehavior'] = ApiClient.convertToType(data['processBehavior'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('childDirected')) {
                obj['childDirected'] = ApiClient.convertToType(data['childDirected'], 'Boolean');
            }
            if (data.hasOwnProperty('detectSentiment')) {
                obj['detectSentiment'] = ApiClient.convertToType(data['detectSentiment'], 'Boolean');
            }
            if (data.hasOwnProperty('createVersion')) {
                obj['createVersion'] = ApiClient.convertToType(data['createVersion'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutBotRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutBotRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutBotRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['intents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['intents'])) {
                throw new Error("Expected the field `intents` to be an array in the JSON data but got " + data['intents']);
            }
            // validate the optional field `intents` (array)
            for (const item of data['intents']) {
                Intent.validateJSON(item);
            };
        }
        // validate the optional field `clarificationPrompt`
        if (data['clarificationPrompt']) { // data not null
          PutBotRequestClarificationPrompt.validateJSON(data['clarificationPrompt']);
        }
        // validate the optional field `abortStatement`
        if (data['abortStatement']) { // data not null
          PutBotRequestAbortStatement.validateJSON(data['abortStatement']);
        }
        // ensure the json data is a string
        if (data['voiceId'] && !(typeof data['voiceId'] === 'string' || data['voiceId'] instanceof String)) {
            throw new Error("Expected the field `voiceId` to be a primitive type in the JSON string but got " + data['voiceId']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // ensure the json data is a string
        if (data['processBehavior'] && !(typeof data['processBehavior'] === 'string' || data['processBehavior'] instanceof String)) {
            throw new Error("Expected the field `processBehavior` to be a primitive type in the JSON string but got " + data['processBehavior']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }

        return true;
    }


}

PutBotRequest.RequiredProperties = ["locale", "childDirected"];

/**
 * A description of the bot.
 * @member {String} description
 */
PutBotRequest.prototype['description'] = undefined;

/**
 * An array of <code>Intent</code> objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see <a>how-it-works</a>.
 * @member {Array.<module:model/Intent>} intents
 */
PutBotRequest.prototype['intents'] = undefined;

/**
 * <p>Set to <code>true</code> to enable access to natural language understanding improvements. </p> <p>When you set the <code>enableModelImprovements</code> parameter to <code>true</code> you can use the <code>nluIntentConfidenceThreshold</code> parameter to configure confidence scores. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\">Confidence Scores</a>.</p> <p>You can only set the <code>enableModelImprovements</code> parameter in certain Regions. If you set the parameter to <code>true</code>, your bot has access to accuracy improvements.</p> <p>The Regions where you can set the <code>enableModelImprovements</code> parameter to <code>true</code> are:</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default. In these Regions setting the parameter to <code>false</code> throws a <code>ValidationException</code> exception.</p>
 * @member {Boolean} enableModelImprovements
 */
PutBotRequest.prototype['enableModelImprovements'] = undefined;

/**
 * <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\">PostContent</a> or <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a> response. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>You must set the <code>enableModelImprovements</code> parameter to <code>true</code> to use confidence scores in the following regions.</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>
 * @member {Number} nluIntentConfidenceThreshold
 */
PutBotRequest.prototype['nluIntentConfidenceThreshold'] = undefined;

/**
 * @member {module:model/PutBotRequestClarificationPrompt} clarificationPrompt
 */
PutBotRequest.prototype['clarificationPrompt'] = undefined;

/**
 * @member {module:model/PutBotRequestAbortStatement} abortStatement
 */
PutBotRequest.prototype['abortStatement'] = undefined;

/**
 * <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.</p> <p>A user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn't complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over.</p> <p>If you don't include the <code>idleSessionTTLInSeconds</code> element in a <code>PutBot</code> operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot.</p> <p>The default is 300 seconds (5 minutes).</p>
 * @member {Number} idleSessionTTLInSeconds
 */
PutBotRequest.prototype['idleSessionTTLInSeconds'] = undefined;

/**
 * The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Voices in Amazon Polly</a> in the <i>Amazon Polly Developer Guide</i>.
 * @member {String} voiceId
 */
PutBotRequest.prototype['voiceId'] = undefined;

/**
 * <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
 * @member {String} checksum
 */
PutBotRequest.prototype['checksum'] = undefined;

/**
 * <p>If you set the <code>processBehavior</code> element to <code>BUILD</code>, Amazon Lex builds the bot so that it can be run. If you set the element to <code>SAVE</code> Amazon Lex saves the bot, but doesn't build it. </p> <p>If you don't specify this value, the default value is <code>BUILD</code>.</p>
 * @member {module:model/PutBotRequest.ProcessBehaviorEnum} processBehavior
 */
PutBotRequest.prototype['processBehavior'] = undefined;

/**
 * <p> Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. </p> <p>The default is <code>en-US</code>.</p>
 * @member {module:model/PutBotRequest.LocaleEnum} locale
 */
PutBotRequest.prototype['locale'] = undefined;

/**
 * <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a> </p>
 * @member {Boolean} childDirected
 */
PutBotRequest.prototype['childDirected'] = undefined;

/**
 * When set to <code>true</code> user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify <code>detectSentiment</code>, the default is <code>false</code>.
 * @member {Boolean} detectSentiment
 */
PutBotRequest.prototype['detectSentiment'] = undefined;

/**
 * When set to <code>true</code> a new numbered version of the bot is created. This is the same as calling the <code>CreateBotVersion</code> operation. If you don't specify <code>createVersion</code>, the default is <code>false</code>.
 * @member {Boolean} createVersion
 */
PutBotRequest.prototype['createVersion'] = undefined;

/**
 * A list of tags to add to the bot. You can only add tags when you create a bot, you can't use the <code>PutBot</code> operation to update the tags on a bot. To update tags, use the <code>TagResource</code> operation.
 * @member {Array.<module:model/Tag>} tags
 */
PutBotRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>processBehavior</code> property.
 * @enum {String}
 * @readonly
 */
PutBotRequest['ProcessBehaviorEnum'] = {

    /**
     * value: "SAVE"
     * @const
     */
    "SAVE": "SAVE",

    /**
     * value: "BUILD"
     * @const
     */
    "BUILD": "BUILD"
};


/**
 * Allowed values for the <code>locale</code> property.
 * @enum {String}
 * @readonly
 */
PutBotRequest['LocaleEnum'] = {

    /**
     * value: "de-DE"
     * @const
     */
    "de-DE": "de-DE",

    /**
     * value: "en-AU"
     * @const
     */
    "en-AU": "en-AU",

    /**
     * value: "en-GB"
     * @const
     */
    "en-GB": "en-GB",

    /**
     * value: "en-IN"
     * @const
     */
    "en-IN": "en-IN",

    /**
     * value: "en-US"
     * @const
     */
    "en-US": "en-US",

    /**
     * value: "es-419"
     * @const
     */
    "es-419": "es-419",

    /**
     * value: "es-ES"
     * @const
     */
    "es-ES": "es-ES",

    /**
     * value: "es-US"
     * @const
     */
    "es-US": "es-US",

    /**
     * value: "fr-FR"
     * @const
     */
    "fr-FR": "fr-FR",

    /**
     * value: "fr-CA"
     * @const
     */
    "fr-CA": "fr-CA",

    /**
     * value: "it-IT"
     * @const
     */
    "it-IT": "it-IT",

    /**
     * value: "ja-JP"
     * @const
     */
    "ja-JP": "ja-JP",

    /**
     * value: "ko-KR"
     * @const
     */
    "ko-KR": "ko-KR"
};



export default PutBotRequest;

