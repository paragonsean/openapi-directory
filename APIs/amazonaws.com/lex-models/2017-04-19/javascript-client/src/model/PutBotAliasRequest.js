/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PutBotAliasRequestConversationLogs from './PutBotAliasRequestConversationLogs';
import Tag from './Tag';

/**
 * The PutBotAliasRequest model module.
 * @module model/PutBotAliasRequest
 * @version 2017-04-19
 */
class PutBotAliasRequest {
    /**
     * Constructs a new <code>PutBotAliasRequest</code>.
     * @alias module:model/PutBotAliasRequest
     * @param botVersion {String} The version of the bot.
     */
    constructor(botVersion) { 
        
        PutBotAliasRequest.initialize(this, botVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, botVersion) { 
        obj['botVersion'] = botVersion;
    }

    /**
     * Constructs a <code>PutBotAliasRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutBotAliasRequest} obj Optional instance to populate.
     * @return {module:model/PutBotAliasRequest} The populated <code>PutBotAliasRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutBotAliasRequest();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('botVersion')) {
                obj['botVersion'] = ApiClient.convertToType(data['botVersion'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('conversationLogs')) {
                obj['conversationLogs'] = PutBotAliasRequestConversationLogs.constructFromObject(data['conversationLogs']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutBotAliasRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutBotAliasRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutBotAliasRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['botVersion'] && !(typeof data['botVersion'] === 'string' || data['botVersion'] instanceof String)) {
            throw new Error("Expected the field `botVersion` to be a primitive type in the JSON string but got " + data['botVersion']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // validate the optional field `conversationLogs`
        if (data['conversationLogs']) { // data not null
          PutBotAliasRequestConversationLogs.validateJSON(data['conversationLogs']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }

        return true;
    }


}

PutBotAliasRequest.RequiredProperties = ["botVersion"];

/**
 * A description of the alias.
 * @member {String} description
 */
PutBotAliasRequest.prototype['description'] = undefined;

/**
 * The version of the bot.
 * @member {String} botVersion
 */
PutBotAliasRequest.prototype['botVersion'] = undefined;

/**
 * <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot alias, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot alias, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
 * @member {String} checksum
 */
PutBotAliasRequest.prototype['checksum'] = undefined;

/**
 * @member {module:model/PutBotAliasRequestConversationLogs} conversationLogs
 */
PutBotAliasRequest.prototype['conversationLogs'] = undefined;

/**
 * A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>PutBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.
 * @member {Array.<module:model/Tag>} tags
 */
PutBotAliasRequest.prototype['tags'] = undefined;






export default PutBotAliasRequest;

