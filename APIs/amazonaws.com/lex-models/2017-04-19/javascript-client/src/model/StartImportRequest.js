/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tag from './Tag';

/**
 * The StartImportRequest model module.
 * @module model/StartImportRequest
 * @version 2017-04-19
 */
class StartImportRequest {
    /**
     * Constructs a new <code>StartImportRequest</code>.
     * @alias module:model/StartImportRequest
     * @param payload {String} A zip archive in binary format. The archive should contain one file, a JSON file containing the resource to import. The resource should match the type specified in the <code>resourceType</code> field.
     * @param resourceType {module:model/StartImportRequest.ResourceTypeEnum} <p>Specifies the type of resource to export. Each resource also exports any resources that it depends on. </p> <ul> <li> <p>A bot exports dependent intents.</p> </li> <li> <p>An intent exports dependent slot types.</p> </li> </ul>
     * @param mergeStrategy {module:model/StartImportRequest.MergeStrategyEnum} <p>Specifies the action that the <code>StartImport</code> operation should take when there is an existing resource with the same name.</p> <ul> <li> <p>FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a resource in the import file and an existing resource. The name of the resource causing the conflict is in the <code>failureReason</code> field of the response to the <code>GetImport</code> operation.</p> <p>OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with an existing resource. The $LASTEST version of the existing resource is overwritten with the data from the import file.</p> </li> </ul>
     */
    constructor(payload, resourceType, mergeStrategy) { 
        
        StartImportRequest.initialize(this, payload, resourceType, mergeStrategy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, payload, resourceType, mergeStrategy) { 
        obj['payload'] = payload;
        obj['resourceType'] = resourceType;
        obj['mergeStrategy'] = mergeStrategy;
    }

    /**
     * Constructs a <code>StartImportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartImportRequest} obj Optional instance to populate.
     * @return {module:model/StartImportRequest} The populated <code>StartImportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartImportRequest();

            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('mergeStrategy')) {
                obj['mergeStrategy'] = ApiClient.convertToType(data['mergeStrategy'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartImportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartImportRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartImportRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['payload'] && !(typeof data['payload'] === 'string' || data['payload'] instanceof String)) {
            throw new Error("Expected the field `payload` to be a primitive type in the JSON string but got " + data['payload']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        // ensure the json data is a string
        if (data['mergeStrategy'] && !(typeof data['mergeStrategy'] === 'string' || data['mergeStrategy'] instanceof String)) {
            throw new Error("Expected the field `mergeStrategy` to be a primitive type in the JSON string but got " + data['mergeStrategy']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }

        return true;
    }


}

StartImportRequest.RequiredProperties = ["payload", "resourceType", "mergeStrategy"];

/**
 * A zip archive in binary format. The archive should contain one file, a JSON file containing the resource to import. The resource should match the type specified in the <code>resourceType</code> field.
 * @member {String} payload
 */
StartImportRequest.prototype['payload'] = undefined;

/**
 * <p>Specifies the type of resource to export. Each resource also exports any resources that it depends on. </p> <ul> <li> <p>A bot exports dependent intents.</p> </li> <li> <p>An intent exports dependent slot types.</p> </li> </ul>
 * @member {module:model/StartImportRequest.ResourceTypeEnum} resourceType
 */
StartImportRequest.prototype['resourceType'] = undefined;

/**
 * <p>Specifies the action that the <code>StartImport</code> operation should take when there is an existing resource with the same name.</p> <ul> <li> <p>FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a resource in the import file and an existing resource. The name of the resource causing the conflict is in the <code>failureReason</code> field of the response to the <code>GetImport</code> operation.</p> <p>OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with an existing resource. The $LASTEST version of the existing resource is overwritten with the data from the import file.</p> </li> </ul>
 * @member {module:model/StartImportRequest.MergeStrategyEnum} mergeStrategy
 */
StartImportRequest.prototype['mergeStrategy'] = undefined;

/**
 * A list of tags to add to the imported bot. You can only add tags when you import a bot, you can't add tags to an intent or slot type.
 * @member {Array.<module:model/Tag>} tags
 */
StartImportRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>resourceType</code> property.
 * @enum {String}
 * @readonly
 */
StartImportRequest['ResourceTypeEnum'] = {

    /**
     * value: "BOT"
     * @const
     */
    "BOT": "BOT",

    /**
     * value: "INTENT"
     * @const
     */
    "INTENT": "INTENT",

    /**
     * value: "SLOT_TYPE"
     * @const
     */
    "SLOT_TYPE": "SLOT_TYPE"
};


/**
 * Allowed values for the <code>mergeStrategy</code> property.
 * @enum {String}
 * @readonly
 */
StartImportRequest['MergeStrategyEnum'] = {

    /**
     * value: "OVERWRITE_LATEST"
     * @const
     */
    "OVERWRITE_LATEST": "OVERWRITE_LATEST",

    /**
     * value: "FAIL_ON_CONFLICT"
     * @const
     */
    "FAIL_ON_CONFLICT": "FAIL_ON_CONFLICT"
};



export default StartImportRequest;

