/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObfuscationSetting from './ObfuscationSetting';
import SlotConstraint from './SlotConstraint';
import SlotDefaultValueSpec from './SlotDefaultValueSpec';
import SlotValueElicitationPrompt from './SlotValueElicitationPrompt';

/**
 * The Slot model module.
 * @module model/Slot
 * @version 2017-04-19
 */
class Slot {
    /**
     * Constructs a new <code>Slot</code>.
     * Identifies the version of a specific slot.
     * @alias module:model/Slot
     * @param name {String} 
     * @param slotConstraint {module:model/SlotConstraint} 
     */
    constructor(name, slotConstraint) { 
        
        Slot.initialize(this, name, slotConstraint);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, slotConstraint) { 
        obj['name'] = name;
        obj['slotConstraint'] = slotConstraint;
    }

    /**
     * Constructs a <code>Slot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Slot} obj Optional instance to populate.
     * @return {module:model/Slot} The populated <code>Slot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Slot();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('slotConstraint')) {
                obj['slotConstraint'] = ApiClient.convertToType(data['slotConstraint'], SlotConstraint);
            }
            if (data.hasOwnProperty('slotType')) {
                obj['slotType'] = ApiClient.convertToType(data['slotType'], 'String');
            }
            if (data.hasOwnProperty('slotTypeVersion')) {
                obj['slotTypeVersion'] = ApiClient.convertToType(data['slotTypeVersion'], 'String');
            }
            if (data.hasOwnProperty('valueElicitationPrompt')) {
                obj['valueElicitationPrompt'] = SlotValueElicitationPrompt.constructFromObject(data['valueElicitationPrompt']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('sampleUtterances')) {
                obj['sampleUtterances'] = ApiClient.convertToType(data['sampleUtterances'], Array);
            }
            if (data.hasOwnProperty('responseCard')) {
                obj['responseCard'] = ApiClient.convertToType(data['responseCard'], 'String');
            }
            if (data.hasOwnProperty('obfuscationSetting')) {
                obj['obfuscationSetting'] = ApiClient.convertToType(data['obfuscationSetting'], ObfuscationSetting);
            }
            if (data.hasOwnProperty('defaultValueSpec')) {
                obj['defaultValueSpec'] = SlotDefaultValueSpec.constructFromObject(data['defaultValueSpec']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Slot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Slot</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Slot.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `slotConstraint`
        if (data['slotConstraint']) { // data not null
          SlotConstraint.validateJSON(data['slotConstraint']);
        }
        // validate the optional field `slotType`
        if (data['slotType']) { // data not null
          String.validateJSON(data['slotType']);
        }
        // validate the optional field `slotTypeVersion`
        if (data['slotTypeVersion']) { // data not null
          String.validateJSON(data['slotTypeVersion']);
        }
        // validate the optional field `valueElicitationPrompt`
        if (data['valueElicitationPrompt']) { // data not null
          SlotValueElicitationPrompt.validateJSON(data['valueElicitationPrompt']);
        }
        // validate the optional field `priority`
        if (data['priority']) { // data not null
          Number.validateJSON(data['priority']);
        }
        // validate the optional field `sampleUtterances`
        if (data['sampleUtterances']) { // data not null
          Array.validateJSON(data['sampleUtterances']);
        }
        // validate the optional field `responseCard`
        if (data['responseCard']) { // data not null
          String.validateJSON(data['responseCard']);
        }
        // validate the optional field `obfuscationSetting`
        if (data['obfuscationSetting']) { // data not null
          ObfuscationSetting.validateJSON(data['obfuscationSetting']);
        }
        // validate the optional field `defaultValueSpec`
        if (data['defaultValueSpec']) { // data not null
          SlotDefaultValueSpec.validateJSON(data['defaultValueSpec']);
        }

        return true;
    }


}

Slot.RequiredProperties = ["name", "slotConstraint"];

/**
 * @member {String} name
 */
Slot.prototype['name'] = undefined;

/**
 * @member {String} description
 */
Slot.prototype['description'] = undefined;

/**
 * @member {module:model/SlotConstraint} slotConstraint
 */
Slot.prototype['slotConstraint'] = undefined;

/**
 * @member {String} slotType
 */
Slot.prototype['slotType'] = undefined;

/**
 * @member {String} slotTypeVersion
 */
Slot.prototype['slotTypeVersion'] = undefined;

/**
 * @member {module:model/SlotValueElicitationPrompt} valueElicitationPrompt
 */
Slot.prototype['valueElicitationPrompt'] = undefined;

/**
 * @member {Number} priority
 */
Slot.prototype['priority'] = undefined;

/**
 * @member {Array} sampleUtterances
 */
Slot.prototype['sampleUtterances'] = undefined;

/**
 * @member {String} responseCard
 */
Slot.prototype['responseCard'] = undefined;

/**
 * @member {module:model/ObfuscationSetting} obfuscationSetting
 */
Slot.prototype['obfuscationSetting'] = undefined;

/**
 * @member {module:model/SlotDefaultValueSpec} defaultValueSpec
 */
Slot.prototype['defaultValueSpec'] = undefined;






export default Slot;

