/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StartMigrationRequest model module.
 * @module model/StartMigrationRequest
 * @version 2017-04-19
 */
class StartMigrationRequest {
    /**
     * Constructs a new <code>StartMigrationRequest</code>.
     * @alias module:model/StartMigrationRequest
     * @param v1BotName {String} The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.
     * @param v1BotVersion {String} The version of the bot to migrate to Amazon Lex V2. You can migrate the <code>$LATEST</code> version as well as any numbered version.
     * @param v2BotName {String} <p>The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to. </p> <ul> <li> <p>If the Amazon Lex V2 bot doesn't exist, you must use the <code>CREATE_NEW</code> migration strategy.</p> </li> <li> <p>If the Amazon Lex V2 bot exists, you must use the <code>UPDATE_EXISTING</code> migration strategy to change the contents of the Amazon Lex V2 bot.</p> </li> </ul>
     * @param v2BotRole {String} The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
     * @param migrationStrategy {module:model/StartMigrationRequest.MigrationStrategyEnum} <p>The strategy used to conduct the migration.</p> <ul> <li> <p> <code>CREATE_NEW</code> - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.</p> </li> <li> <p> <code>UPDATE_EXISTING</code> - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn't change any other locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale is created in the Amazon Lex V2 bot.</p> </li> </ul>
     */
    constructor(v1BotName, v1BotVersion, v2BotName, v2BotRole, migrationStrategy) { 
        
        StartMigrationRequest.initialize(this, v1BotName, v1BotVersion, v2BotName, v2BotRole, migrationStrategy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, v1BotName, v1BotVersion, v2BotName, v2BotRole, migrationStrategy) { 
        obj['v1BotName'] = v1BotName;
        obj['v1BotVersion'] = v1BotVersion;
        obj['v2BotName'] = v2BotName;
        obj['v2BotRole'] = v2BotRole;
        obj['migrationStrategy'] = migrationStrategy;
    }

    /**
     * Constructs a <code>StartMigrationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartMigrationRequest} obj Optional instance to populate.
     * @return {module:model/StartMigrationRequest} The populated <code>StartMigrationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartMigrationRequest();

            if (data.hasOwnProperty('v1BotName')) {
                obj['v1BotName'] = ApiClient.convertToType(data['v1BotName'], 'String');
            }
            if (data.hasOwnProperty('v1BotVersion')) {
                obj['v1BotVersion'] = ApiClient.convertToType(data['v1BotVersion'], 'String');
            }
            if (data.hasOwnProperty('v2BotName')) {
                obj['v2BotName'] = ApiClient.convertToType(data['v2BotName'], 'String');
            }
            if (data.hasOwnProperty('v2BotRole')) {
                obj['v2BotRole'] = ApiClient.convertToType(data['v2BotRole'], 'String');
            }
            if (data.hasOwnProperty('migrationStrategy')) {
                obj['migrationStrategy'] = ApiClient.convertToType(data['migrationStrategy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartMigrationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartMigrationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartMigrationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['v1BotName'] && !(typeof data['v1BotName'] === 'string' || data['v1BotName'] instanceof String)) {
            throw new Error("Expected the field `v1BotName` to be a primitive type in the JSON string but got " + data['v1BotName']);
        }
        // ensure the json data is a string
        if (data['v1BotVersion'] && !(typeof data['v1BotVersion'] === 'string' || data['v1BotVersion'] instanceof String)) {
            throw new Error("Expected the field `v1BotVersion` to be a primitive type in the JSON string but got " + data['v1BotVersion']);
        }
        // ensure the json data is a string
        if (data['v2BotName'] && !(typeof data['v2BotName'] === 'string' || data['v2BotName'] instanceof String)) {
            throw new Error("Expected the field `v2BotName` to be a primitive type in the JSON string but got " + data['v2BotName']);
        }
        // ensure the json data is a string
        if (data['v2BotRole'] && !(typeof data['v2BotRole'] === 'string' || data['v2BotRole'] instanceof String)) {
            throw new Error("Expected the field `v2BotRole` to be a primitive type in the JSON string but got " + data['v2BotRole']);
        }
        // ensure the json data is a string
        if (data['migrationStrategy'] && !(typeof data['migrationStrategy'] === 'string' || data['migrationStrategy'] instanceof String)) {
            throw new Error("Expected the field `migrationStrategy` to be a primitive type in the JSON string but got " + data['migrationStrategy']);
        }

        return true;
    }


}

StartMigrationRequest.RequiredProperties = ["v1BotName", "v1BotVersion", "v2BotName", "v2BotRole", "migrationStrategy"];

/**
 * The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.
 * @member {String} v1BotName
 */
StartMigrationRequest.prototype['v1BotName'] = undefined;

/**
 * The version of the bot to migrate to Amazon Lex V2. You can migrate the <code>$LATEST</code> version as well as any numbered version.
 * @member {String} v1BotVersion
 */
StartMigrationRequest.prototype['v1BotVersion'] = undefined;

/**
 * <p>The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to. </p> <ul> <li> <p>If the Amazon Lex V2 bot doesn't exist, you must use the <code>CREATE_NEW</code> migration strategy.</p> </li> <li> <p>If the Amazon Lex V2 bot exists, you must use the <code>UPDATE_EXISTING</code> migration strategy to change the contents of the Amazon Lex V2 bot.</p> </li> </ul>
 * @member {String} v2BotName
 */
StartMigrationRequest.prototype['v2BotName'] = undefined;

/**
 * The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
 * @member {String} v2BotRole
 */
StartMigrationRequest.prototype['v2BotRole'] = undefined;

/**
 * <p>The strategy used to conduct the migration.</p> <ul> <li> <p> <code>CREATE_NEW</code> - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.</p> </li> <li> <p> <code>UPDATE_EXISTING</code> - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn't change any other locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale is created in the Amazon Lex V2 bot.</p> </li> </ul>
 * @member {module:model/StartMigrationRequest.MigrationStrategyEnum} migrationStrategy
 */
StartMigrationRequest.prototype['migrationStrategy'] = undefined;





/**
 * Allowed values for the <code>migrationStrategy</code> property.
 * @enum {String}
 * @readonly
 */
StartMigrationRequest['MigrationStrategyEnum'] = {

    /**
     * value: "CREATE_NEW"
     * @const
     */
    "CREATE_NEW": "CREATE_NEW",

    /**
     * value: "UPDATE_EXISTING"
     * @const
     */
    "UPDATE_EXISTING": "UPDATE_EXISTING"
};



export default StartMigrationRequest;

