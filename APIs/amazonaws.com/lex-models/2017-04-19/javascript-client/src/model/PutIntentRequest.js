/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputContext from './InputContext';
import OutputContext from './OutputContext';
import PutBotRequestAbortStatement from './PutBotRequestAbortStatement';
import PutBotRequestClarificationPrompt from './PutBotRequestClarificationPrompt';
import PutIntentRequestDialogCodeHook from './PutIntentRequestDialogCodeHook';
import PutIntentRequestFollowUpPrompt from './PutIntentRequestFollowUpPrompt';
import PutIntentRequestFulfillmentActivity from './PutIntentRequestFulfillmentActivity';
import PutIntentRequestKendraConfiguration from './PutIntentRequestKendraConfiguration';
import Slot from './Slot';

/**
 * The PutIntentRequest model module.
 * @module model/PutIntentRequest
 * @version 2017-04-19
 */
class PutIntentRequest {
    /**
     * Constructs a new <code>PutIntentRequest</code>.
     * @alias module:model/PutIntentRequest
     */
    constructor() { 
        
        PutIntentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PutIntentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutIntentRequest} obj Optional instance to populate.
     * @return {module:model/PutIntentRequest} The populated <code>PutIntentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutIntentRequest();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('slots')) {
                obj['slots'] = ApiClient.convertToType(data['slots'], [Slot]);
            }
            if (data.hasOwnProperty('sampleUtterances')) {
                obj['sampleUtterances'] = ApiClient.convertToType(data['sampleUtterances'], ['String']);
            }
            if (data.hasOwnProperty('confirmationPrompt')) {
                obj['confirmationPrompt'] = PutBotRequestClarificationPrompt.constructFromObject(data['confirmationPrompt']);
            }
            if (data.hasOwnProperty('rejectionStatement')) {
                obj['rejectionStatement'] = PutBotRequestAbortStatement.constructFromObject(data['rejectionStatement']);
            }
            if (data.hasOwnProperty('followUpPrompt')) {
                obj['followUpPrompt'] = PutIntentRequestFollowUpPrompt.constructFromObject(data['followUpPrompt']);
            }
            if (data.hasOwnProperty('conclusionStatement')) {
                obj['conclusionStatement'] = PutBotRequestAbortStatement.constructFromObject(data['conclusionStatement']);
            }
            if (data.hasOwnProperty('dialogCodeHook')) {
                obj['dialogCodeHook'] = PutIntentRequestDialogCodeHook.constructFromObject(data['dialogCodeHook']);
            }
            if (data.hasOwnProperty('fulfillmentActivity')) {
                obj['fulfillmentActivity'] = PutIntentRequestFulfillmentActivity.constructFromObject(data['fulfillmentActivity']);
            }
            if (data.hasOwnProperty('parentIntentSignature')) {
                obj['parentIntentSignature'] = ApiClient.convertToType(data['parentIntentSignature'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('createVersion')) {
                obj['createVersion'] = ApiClient.convertToType(data['createVersion'], 'Boolean');
            }
            if (data.hasOwnProperty('kendraConfiguration')) {
                obj['kendraConfiguration'] = PutIntentRequestKendraConfiguration.constructFromObject(data['kendraConfiguration']);
            }
            if (data.hasOwnProperty('inputContexts')) {
                obj['inputContexts'] = ApiClient.convertToType(data['inputContexts'], [InputContext]);
            }
            if (data.hasOwnProperty('outputContexts')) {
                obj['outputContexts'] = ApiClient.convertToType(data['outputContexts'], [OutputContext]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutIntentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutIntentRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['slots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['slots'])) {
                throw new Error("Expected the field `slots` to be an array in the JSON data but got " + data['slots']);
            }
            // validate the optional field `slots` (array)
            for (const item of data['slots']) {
                Slot.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sampleUtterances'])) {
            throw new Error("Expected the field `sampleUtterances` to be an array in the JSON data but got " + data['sampleUtterances']);
        }
        // validate the optional field `confirmationPrompt`
        if (data['confirmationPrompt']) { // data not null
          PutBotRequestClarificationPrompt.validateJSON(data['confirmationPrompt']);
        }
        // validate the optional field `rejectionStatement`
        if (data['rejectionStatement']) { // data not null
          PutBotRequestAbortStatement.validateJSON(data['rejectionStatement']);
        }
        // validate the optional field `followUpPrompt`
        if (data['followUpPrompt']) { // data not null
          PutIntentRequestFollowUpPrompt.validateJSON(data['followUpPrompt']);
        }
        // validate the optional field `conclusionStatement`
        if (data['conclusionStatement']) { // data not null
          PutBotRequestAbortStatement.validateJSON(data['conclusionStatement']);
        }
        // validate the optional field `dialogCodeHook`
        if (data['dialogCodeHook']) { // data not null
          PutIntentRequestDialogCodeHook.validateJSON(data['dialogCodeHook']);
        }
        // validate the optional field `fulfillmentActivity`
        if (data['fulfillmentActivity']) { // data not null
          PutIntentRequestFulfillmentActivity.validateJSON(data['fulfillmentActivity']);
        }
        // ensure the json data is a string
        if (data['parentIntentSignature'] && !(typeof data['parentIntentSignature'] === 'string' || data['parentIntentSignature'] instanceof String)) {
            throw new Error("Expected the field `parentIntentSignature` to be a primitive type in the JSON string but got " + data['parentIntentSignature']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // validate the optional field `kendraConfiguration`
        if (data['kendraConfiguration']) { // data not null
          PutIntentRequestKendraConfiguration.validateJSON(data['kendraConfiguration']);
        }
        if (data['inputContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputContexts'])) {
                throw new Error("Expected the field `inputContexts` to be an array in the JSON data but got " + data['inputContexts']);
            }
            // validate the optional field `inputContexts` (array)
            for (const item of data['inputContexts']) {
                InputContext.validateJSON(item);
            };
        }
        if (data['outputContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputContexts'])) {
                throw new Error("Expected the field `outputContexts` to be an array in the JSON data but got " + data['outputContexts']);
            }
            // validate the optional field `outputContexts` (array)
            for (const item of data['outputContexts']) {
                OutputContext.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A description of the intent.
 * @member {String} description
 */
PutIntentRequest.prototype['description'] = undefined;

/**
 * An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see <a>how-it-works</a>. 
 * @member {Array.<module:model/Slot>} slots
 */
PutIntentRequest.prototype['slots'] = undefined;

/**
 * <p>An array of utterances (strings) that a user might say to signal the intent. For example, \"I want {PizzaSize} pizza\", \"Order {Quantity} {PizzaSize} pizzas\". </p> <p>In each utterance, a slot name is enclosed in curly braces. </p>
 * @member {Array.<String>} sampleUtterances
 */
PutIntentRequest.prototype['sampleUtterances'] = undefined;

/**
 * @member {module:model/PutBotRequestClarificationPrompt} confirmationPrompt
 */
PutIntentRequest.prototype['confirmationPrompt'] = undefined;

/**
 * @member {module:model/PutBotRequestAbortStatement} rejectionStatement
 */
PutIntentRequest.prototype['rejectionStatement'] = undefined;

/**
 * @member {module:model/PutIntentRequestFollowUpPrompt} followUpPrompt
 */
PutIntentRequest.prototype['followUpPrompt'] = undefined;

/**
 * @member {module:model/PutBotRequestAbortStatement} conclusionStatement
 */
PutIntentRequest.prototype['conclusionStatement'] = undefined;

/**
 * @member {module:model/PutIntentRequestDialogCodeHook} dialogCodeHook
 */
PutIntentRequest.prototype['dialogCodeHook'] = undefined;

/**
 * @member {module:model/PutIntentRequestFulfillmentActivity} fulfillmentActivity
 */
PutIntentRequest.prototype['fulfillmentActivity'] = undefined;

/**
 * A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.
 * @member {String} parentIntentSignature
 */
PutIntentRequest.prototype['parentIntentSignature'] = undefined;

/**
 * <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new intent, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a intent, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
 * @member {String} checksum
 */
PutIntentRequest.prototype['checksum'] = undefined;

/**
 * When set to <code>true</code> a new numbered version of the intent is created. This is the same as calling the <code>CreateIntentVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.
 * @member {Boolean} createVersion
 */
PutIntentRequest.prototype['createVersion'] = undefined;

/**
 * @member {module:model/PutIntentRequestKendraConfiguration} kendraConfiguration
 */
PutIntentRequest.prototype['kendraConfiguration'] = undefined;

/**
 * An array of <code>InputContext</code> objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.
 * @member {Array.<module:model/InputContext>} inputContexts
 */
PutIntentRequest.prototype['inputContexts'] = undefined;

/**
 * An array of <code>OutputContext</code> objects that lists the contexts that the intent activates when the intent is fulfilled.
 * @member {Array.<module:model/OutputContext>} outputContexts
 */
PutIntentRequest.prototype['outputContexts'] = undefined;






export default PutIntentRequest;

