/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelStatus from './ChannelStatus';
import ChannelType from './ChannelType';

/**
 * The BotChannelAssociation model module.
 * @module model/BotChannelAssociation
 * @version 2017-04-19
 */
class BotChannelAssociation {
    /**
     * Constructs a new <code>BotChannelAssociation</code>.
     * Represents an association between an Amazon Lex bot and an external messaging platform.
     * @alias module:model/BotChannelAssociation
     */
    constructor() { 
        
        BotChannelAssociation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BotChannelAssociation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BotChannelAssociation} obj Optional instance to populate.
     * @return {module:model/BotChannelAssociation} The populated <code>BotChannelAssociation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BotChannelAssociation();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('botAlias')) {
                obj['botAlias'] = ApiClient.convertToType(data['botAlias'], 'String');
            }
            if (data.hasOwnProperty('botName')) {
                obj['botName'] = ApiClient.convertToType(data['botName'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], ChannelType);
            }
            if (data.hasOwnProperty('botConfiguration')) {
                obj['botConfiguration'] = ApiClient.convertToType(data['botConfiguration'], Object);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], ChannelStatus);
            }
            if (data.hasOwnProperty('failureReason')) {
                obj['failureReason'] = ApiClient.convertToType(data['failureReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BotChannelAssociation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BotChannelAssociation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `botAlias`
        if (data['botAlias']) { // data not null
          String.validateJSON(data['botAlias']);
        }
        // validate the optional field `botName`
        if (data['botName']) { // data not null
          String.validateJSON(data['botName']);
        }
        // validate the optional field `createdDate`
        if (data['createdDate']) { // data not null
          Date.validateJSON(data['createdDate']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          ChannelType.validateJSON(data['type']);
        }
        // validate the optional field `botConfiguration`
        if (data['botConfiguration']) { // data not null
          Object.validateJSON(data['botConfiguration']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ChannelStatus.validateJSON(data['status']);
        }
        // validate the optional field `failureReason`
        if (data['failureReason']) { // data not null
          String.validateJSON(data['failureReason']);
        }

        return true;
    }


}



/**
 * @member {String} name
 */
BotChannelAssociation.prototype['name'] = undefined;

/**
 * @member {String} description
 */
BotChannelAssociation.prototype['description'] = undefined;

/**
 * @member {String} botAlias
 */
BotChannelAssociation.prototype['botAlias'] = undefined;

/**
 * @member {String} botName
 */
BotChannelAssociation.prototype['botName'] = undefined;

/**
 * @member {Date} createdDate
 */
BotChannelAssociation.prototype['createdDate'] = undefined;

/**
 * @member {module:model/ChannelType} type
 */
BotChannelAssociation.prototype['type'] = undefined;

/**
 * @member {Object} botConfiguration
 */
BotChannelAssociation.prototype['botConfiguration'] = undefined;

/**
 * @member {module:model/ChannelStatus} status
 */
BotChannelAssociation.prototype['status'] = undefined;

/**
 * @member {String} failureReason
 */
BotChannelAssociation.prototype['failureReason'] = undefined;






export default BotChannelAssociation;

