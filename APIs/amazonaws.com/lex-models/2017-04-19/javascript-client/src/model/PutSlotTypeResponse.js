/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SlotValueSelectionStrategy from './SlotValueSelectionStrategy';

/**
 * The PutSlotTypeResponse model module.
 * @module model/PutSlotTypeResponse
 * @version 2017-04-19
 */
class PutSlotTypeResponse {
    /**
     * Constructs a new <code>PutSlotTypeResponse</code>.
     * @alias module:model/PutSlotTypeResponse
     */
    constructor() { 
        
        PutSlotTypeResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PutSlotTypeResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutSlotTypeResponse} obj Optional instance to populate.
     * @return {module:model/PutSlotTypeResponse} The populated <code>PutSlotTypeResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutSlotTypeResponse();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enumerationValues')) {
                obj['enumerationValues'] = ApiClient.convertToType(data['enumerationValues'], Array);
            }
            if (data.hasOwnProperty('lastUpdatedDate')) {
                obj['lastUpdatedDate'] = ApiClient.convertToType(data['lastUpdatedDate'], 'Date');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('valueSelectionStrategy')) {
                obj['valueSelectionStrategy'] = ApiClient.convertToType(data['valueSelectionStrategy'], SlotValueSelectionStrategy);
            }
            if (data.hasOwnProperty('createVersion')) {
                obj['createVersion'] = ApiClient.convertToType(data['createVersion'], 'Boolean');
            }
            if (data.hasOwnProperty('parentSlotTypeSignature')) {
                obj['parentSlotTypeSignature'] = ApiClient.convertToType(data['parentSlotTypeSignature'], 'String');
            }
            if (data.hasOwnProperty('slotTypeConfigurations')) {
                obj['slotTypeConfigurations'] = ApiClient.convertToType(data['slotTypeConfigurations'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutSlotTypeResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutSlotTypeResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `enumerationValues`
        if (data['enumerationValues']) { // data not null
          Array.validateJSON(data['enumerationValues']);
        }
        // validate the optional field `lastUpdatedDate`
        if (data['lastUpdatedDate']) { // data not null
          Date.validateJSON(data['lastUpdatedDate']);
        }
        // validate the optional field `createdDate`
        if (data['createdDate']) { // data not null
          Date.validateJSON(data['createdDate']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          String.validateJSON(data['version']);
        }
        // validate the optional field `checksum`
        if (data['checksum']) { // data not null
          String.validateJSON(data['checksum']);
        }
        // validate the optional field `valueSelectionStrategy`
        if (data['valueSelectionStrategy']) { // data not null
          SlotValueSelectionStrategy.validateJSON(data['valueSelectionStrategy']);
        }
        // validate the optional field `createVersion`
        if (data['createVersion']) { // data not null
          Boolean.validateJSON(data['createVersion']);
        }
        // validate the optional field `parentSlotTypeSignature`
        if (data['parentSlotTypeSignature']) { // data not null
          String.validateJSON(data['parentSlotTypeSignature']);
        }
        // validate the optional field `slotTypeConfigurations`
        if (data['slotTypeConfigurations']) { // data not null
          Array.validateJSON(data['slotTypeConfigurations']);
        }

        return true;
    }


}



/**
 * @member {String} name
 */
PutSlotTypeResponse.prototype['name'] = undefined;

/**
 * @member {String} description
 */
PutSlotTypeResponse.prototype['description'] = undefined;

/**
 * @member {Array} enumerationValues
 */
PutSlotTypeResponse.prototype['enumerationValues'] = undefined;

/**
 * @member {Date} lastUpdatedDate
 */
PutSlotTypeResponse.prototype['lastUpdatedDate'] = undefined;

/**
 * @member {Date} createdDate
 */
PutSlotTypeResponse.prototype['createdDate'] = undefined;

/**
 * @member {String} version
 */
PutSlotTypeResponse.prototype['version'] = undefined;

/**
 * @member {String} checksum
 */
PutSlotTypeResponse.prototype['checksum'] = undefined;

/**
 * @member {module:model/SlotValueSelectionStrategy} valueSelectionStrategy
 */
PutSlotTypeResponse.prototype['valueSelectionStrategy'] = undefined;

/**
 * @member {Boolean} createVersion
 */
PutSlotTypeResponse.prototype['createVersion'] = undefined;

/**
 * @member {String} parentSlotTypeSignature
 */
PutSlotTypeResponse.prototype['parentSlotTypeSignature'] = undefined;

/**
 * @member {Array} slotTypeConfigurations
 */
PutSlotTypeResponse.prototype['slotTypeConfigurations'] = undefined;






export default PutSlotTypeResponse;

