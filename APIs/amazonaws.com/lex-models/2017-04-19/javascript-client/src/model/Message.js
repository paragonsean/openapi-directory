/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentType from './ContentType';

/**
 * The Message model module.
 * @module model/Message
 * @version 2017-04-19
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * The message object that provides the message text and its type.
     * @alias module:model/Message
     * @param contentType {module:model/ContentType} 
     * @param content {String} 
     */
    constructor(contentType, content) { 
        
        Message.initialize(this, contentType, content);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentType, content) { 
        obj['contentType'] = contentType;
        obj['content'] = content;
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], ContentType);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('groupNumber')) {
                obj['groupNumber'] = ApiClient.convertToType(data['groupNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Message.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contentType`
        if (data['contentType']) { // data not null
          ContentType.validateJSON(data['contentType']);
        }
        // validate the optional field `content`
        if (data['content']) { // data not null
          String.validateJSON(data['content']);
        }
        // validate the optional field `groupNumber`
        if (data['groupNumber']) { // data not null
          Number.validateJSON(data['groupNumber']);
        }

        return true;
    }


}

Message.RequiredProperties = ["contentType", "content"];

/**
 * @member {module:model/ContentType} contentType
 */
Message.prototype['contentType'] = undefined;

/**
 * @member {String} content
 */
Message.prototype['content'] = undefined;

/**
 * @member {Number} groupNumber
 */
Message.prototype['groupNumber'] = undefined;






export default Message;

