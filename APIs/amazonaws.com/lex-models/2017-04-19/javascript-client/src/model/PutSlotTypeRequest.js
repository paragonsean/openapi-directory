/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumerationValue from './EnumerationValue';
import SlotTypeConfiguration from './SlotTypeConfiguration';

/**
 * The PutSlotTypeRequest model module.
 * @module model/PutSlotTypeRequest
 * @version 2017-04-19
 */
class PutSlotTypeRequest {
    /**
     * Constructs a new <code>PutSlotTypeRequest</code>.
     * @alias module:model/PutSlotTypeRequest
     */
    constructor() { 
        
        PutSlotTypeRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PutSlotTypeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutSlotTypeRequest} obj Optional instance to populate.
     * @return {module:model/PutSlotTypeRequest} The populated <code>PutSlotTypeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutSlotTypeRequest();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enumerationValues')) {
                obj['enumerationValues'] = ApiClient.convertToType(data['enumerationValues'], [EnumerationValue]);
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('valueSelectionStrategy')) {
                obj['valueSelectionStrategy'] = ApiClient.convertToType(data['valueSelectionStrategy'], 'String');
            }
            if (data.hasOwnProperty('createVersion')) {
                obj['createVersion'] = ApiClient.convertToType(data['createVersion'], 'Boolean');
            }
            if (data.hasOwnProperty('parentSlotTypeSignature')) {
                obj['parentSlotTypeSignature'] = ApiClient.convertToType(data['parentSlotTypeSignature'], 'String');
            }
            if (data.hasOwnProperty('slotTypeConfigurations')) {
                obj['slotTypeConfigurations'] = ApiClient.convertToType(data['slotTypeConfigurations'], [SlotTypeConfiguration]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutSlotTypeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutSlotTypeRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['enumerationValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enumerationValues'])) {
                throw new Error("Expected the field `enumerationValues` to be an array in the JSON data but got " + data['enumerationValues']);
            }
            // validate the optional field `enumerationValues` (array)
            for (const item of data['enumerationValues']) {
                EnumerationValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // ensure the json data is a string
        if (data['valueSelectionStrategy'] && !(typeof data['valueSelectionStrategy'] === 'string' || data['valueSelectionStrategy'] instanceof String)) {
            throw new Error("Expected the field `valueSelectionStrategy` to be a primitive type in the JSON string but got " + data['valueSelectionStrategy']);
        }
        // ensure the json data is a string
        if (data['parentSlotTypeSignature'] && !(typeof data['parentSlotTypeSignature'] === 'string' || data['parentSlotTypeSignature'] instanceof String)) {
            throw new Error("Expected the field `parentSlotTypeSignature` to be a primitive type in the JSON string but got " + data['parentSlotTypeSignature']);
        }
        if (data['slotTypeConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['slotTypeConfigurations'])) {
                throw new Error("Expected the field `slotTypeConfigurations` to be an array in the JSON data but got " + data['slotTypeConfigurations']);
            }
            // validate the optional field `slotTypeConfigurations` (array)
            for (const item of data['slotTypeConfigurations']) {
                SlotTypeConfiguration.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A description of the slot type.
 * @member {String} description
 */
PutSlotTypeRequest.prototype['description'] = undefined;

/**
 * <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take. Each value can have a list of <code>synonyms</code>, which are additional values that help train the machine learning model about the values that it resolves for a slot. </p> <p>A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.</p> <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The <code>valueSelectionStrategy</code> field indicates the option to use. </p>
 * @member {Array.<module:model/EnumerationValue>} enumerationValues
 */
PutSlotTypeRequest.prototype['enumerationValues'] = undefined;

/**
 * <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a slot type, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
 * @member {String} checksum
 */
PutSlotTypeRequest.prototype['checksum'] = undefined;

/**
 * <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li> </ul> <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>
 * @member {module:model/PutSlotTypeRequest.ValueSelectionStrategyEnum} valueSelectionStrategy
 */
PutSlotTypeRequest.prototype['valueSelectionStrategy'] = undefined;

/**
 * When set to <code>true</code> a new numbered version of the slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.
 * @member {Boolean} createVersion
 */
PutSlotTypeRequest.prototype['createVersion'] = undefined;

/**
 * <p>The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.</p> <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
 * @member {String} parentSlotTypeSignature
 */
PutSlotTypeRequest.prototype['parentSlotTypeSignature'] = undefined;

/**
 * Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.
 * @member {Array.<module:model/SlotTypeConfiguration>} slotTypeConfigurations
 */
PutSlotTypeRequest.prototype['slotTypeConfigurations'] = undefined;





/**
 * Allowed values for the <code>valueSelectionStrategy</code> property.
 * @enum {String}
 * @readonly
 */
PutSlotTypeRequest['ValueSelectionStrategyEnum'] = {

    /**
     * value: "ORIGINAL_VALUE"
     * @const
     */
    "ORIGINAL_VALUE": "ORIGINAL_VALUE",

    /**
     * value: "TOP_RESOLUTION"
     * @const
     */
    "TOP_RESOLUTION": "TOP_RESOLUTION"
};



export default PutSlotTypeRequest;

