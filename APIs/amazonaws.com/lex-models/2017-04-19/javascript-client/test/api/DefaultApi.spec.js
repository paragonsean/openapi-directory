/**
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonLexModelBuildingService);
  }
}(this, function(expect, AmazonLexModelBuildingService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonLexModelBuildingService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createBotVersion', function() {
      it('should call createBotVersion successfully', function(done) {
        //uncomment below and update the code to test createBotVersion
        //instance.createBotVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIntentVersion', function() {
      it('should call createIntentVersion successfully', function(done) {
        //uncomment below and update the code to test createIntentVersion
        //instance.createIntentVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSlotTypeVersion', function() {
      it('should call createSlotTypeVersion successfully', function(done) {
        //uncomment below and update the code to test createSlotTypeVersion
        //instance.createSlotTypeVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBot', function() {
      it('should call deleteBot successfully', function(done) {
        //uncomment below and update the code to test deleteBot
        //instance.deleteBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBotAlias', function() {
      it('should call deleteBotAlias successfully', function(done) {
        //uncomment below and update the code to test deleteBotAlias
        //instance.deleteBotAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBotChannelAssociation', function() {
      it('should call deleteBotChannelAssociation successfully', function(done) {
        //uncomment below and update the code to test deleteBotChannelAssociation
        //instance.deleteBotChannelAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBotVersion', function() {
      it('should call deleteBotVersion successfully', function(done) {
        //uncomment below and update the code to test deleteBotVersion
        //instance.deleteBotVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIntent', function() {
      it('should call deleteIntent successfully', function(done) {
        //uncomment below and update the code to test deleteIntent
        //instance.deleteIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIntentVersion', function() {
      it('should call deleteIntentVersion successfully', function(done) {
        //uncomment below and update the code to test deleteIntentVersion
        //instance.deleteIntentVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSlotType', function() {
      it('should call deleteSlotType successfully', function(done) {
        //uncomment below and update the code to test deleteSlotType
        //instance.deleteSlotType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSlotTypeVersion', function() {
      it('should call deleteSlotTypeVersion successfully', function(done) {
        //uncomment below and update the code to test deleteSlotTypeVersion
        //instance.deleteSlotTypeVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUtterances', function() {
      it('should call deleteUtterances successfully', function(done) {
        //uncomment below and update the code to test deleteUtterances
        //instance.deleteUtterances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBot', function() {
      it('should call getBot successfully', function(done) {
        //uncomment below and update the code to test getBot
        //instance.getBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBotAlias', function() {
      it('should call getBotAlias successfully', function(done) {
        //uncomment below and update the code to test getBotAlias
        //instance.getBotAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBotAliases', function() {
      it('should call getBotAliases successfully', function(done) {
        //uncomment below and update the code to test getBotAliases
        //instance.getBotAliases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBotChannelAssociation', function() {
      it('should call getBotChannelAssociation successfully', function(done) {
        //uncomment below and update the code to test getBotChannelAssociation
        //instance.getBotChannelAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBotChannelAssociations', function() {
      it('should call getBotChannelAssociations successfully', function(done) {
        //uncomment below and update the code to test getBotChannelAssociations
        //instance.getBotChannelAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBotVersions', function() {
      it('should call getBotVersions successfully', function(done) {
        //uncomment below and update the code to test getBotVersions
        //instance.getBotVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBots', function() {
      it('should call getBots successfully', function(done) {
        //uncomment below and update the code to test getBots
        //instance.getBots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBuiltinIntent', function() {
      it('should call getBuiltinIntent successfully', function(done) {
        //uncomment below and update the code to test getBuiltinIntent
        //instance.getBuiltinIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBuiltinIntents', function() {
      it('should call getBuiltinIntents successfully', function(done) {
        //uncomment below and update the code to test getBuiltinIntents
        //instance.getBuiltinIntents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBuiltinSlotTypes', function() {
      it('should call getBuiltinSlotTypes successfully', function(done) {
        //uncomment below and update the code to test getBuiltinSlotTypes
        //instance.getBuiltinSlotTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExport', function() {
      it('should call getExport successfully', function(done) {
        //uncomment below and update the code to test getExport
        //instance.getExport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImport', function() {
      it('should call getImport successfully', function(done) {
        //uncomment below and update the code to test getImport
        //instance.getImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntent', function() {
      it('should call getIntent successfully', function(done) {
        //uncomment below and update the code to test getIntent
        //instance.getIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntentVersions', function() {
      it('should call getIntentVersions successfully', function(done) {
        //uncomment below and update the code to test getIntentVersions
        //instance.getIntentVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntents', function() {
      it('should call getIntents successfully', function(done) {
        //uncomment below and update the code to test getIntents
        //instance.getIntents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMigration', function() {
      it('should call getMigration successfully', function(done) {
        //uncomment below and update the code to test getMigration
        //instance.getMigration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMigrations', function() {
      it('should call getMigrations successfully', function(done) {
        //uncomment below and update the code to test getMigrations
        //instance.getMigrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSlotType', function() {
      it('should call getSlotType successfully', function(done) {
        //uncomment below and update the code to test getSlotType
        //instance.getSlotType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSlotTypeVersions', function() {
      it('should call getSlotTypeVersions successfully', function(done) {
        //uncomment below and update the code to test getSlotTypeVersions
        //instance.getSlotTypeVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSlotTypes', function() {
      it('should call getSlotTypes successfully', function(done) {
        //uncomment below and update the code to test getSlotTypes
        //instance.getSlotTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUtterancesView', function() {
      it('should call getUtterancesView successfully', function(done) {
        //uncomment below and update the code to test getUtterancesView
        //instance.getUtterancesView(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putBot', function() {
      it('should call putBot successfully', function(done) {
        //uncomment below and update the code to test putBot
        //instance.putBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putBotAlias', function() {
      it('should call putBotAlias successfully', function(done) {
        //uncomment below and update the code to test putBotAlias
        //instance.putBotAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putIntent', function() {
      it('should call putIntent successfully', function(done) {
        //uncomment below and update the code to test putIntent
        //instance.putIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSlotType', function() {
      it('should call putSlotType successfully', function(done) {
        //uncomment below and update the code to test putSlotType
        //instance.putSlotType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startImport', function() {
      it('should call startImport successfully', function(done) {
        //uncomment below and update the code to test startImport
        //instance.startImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startMigration', function() {
      it('should call startMigration successfully', function(done) {
        //uncomment below and update the code to test startMigration
        //instance.startMigration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
