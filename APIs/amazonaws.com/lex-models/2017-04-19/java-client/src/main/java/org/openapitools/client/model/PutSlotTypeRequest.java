/*
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnumerationValue;
import org.openapitools.client.model.SlotTypeConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutSlotTypeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:37.850486-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutSlotTypeRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENUMERATION_VALUES = "enumerationValues";
  @SerializedName(SERIALIZED_NAME_ENUMERATION_VALUES)
  private List<EnumerationValue> enumerationValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private String checksum;

  /**
   * &lt;p&gt;Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ORIGINAL_VALUE&lt;/code&gt; - Returns the value entered by the user, if the user value is similar to the slot value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TOP_RESOLUTION&lt;/code&gt; - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;valueSelectionStrategy&lt;/code&gt;, the default is &lt;code&gt;ORIGINAL_VALUE&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(ValueSelectionStrategyEnum.Adapter.class)
  public enum ValueSelectionStrategyEnum {
    ORIGINAL_VALUE("ORIGINAL_VALUE"),
    
    TOP_RESOLUTION("TOP_RESOLUTION");

    private String value;

    ValueSelectionStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueSelectionStrategyEnum fromValue(String value) {
      for (ValueSelectionStrategyEnum b : ValueSelectionStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueSelectionStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueSelectionStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueSelectionStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueSelectionStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValueSelectionStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALUE_SELECTION_STRATEGY = "valueSelectionStrategy";
  @SerializedName(SERIALIZED_NAME_VALUE_SELECTION_STRATEGY)
  private ValueSelectionStrategyEnum valueSelectionStrategy;

  public static final String SERIALIZED_NAME_CREATE_VERSION = "createVersion";
  @SerializedName(SERIALIZED_NAME_CREATE_VERSION)
  private Boolean createVersion;

  public static final String SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE = "parentSlotTypeSignature";
  @SerializedName(SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE)
  private String parentSlotTypeSignature;

  public static final String SERIALIZED_NAME_SLOT_TYPE_CONFIGURATIONS = "slotTypeConfigurations";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_CONFIGURATIONS)
  private List<SlotTypeConfiguration> slotTypeConfigurations = new ArrayList<>();

  public PutSlotTypeRequest() {
  }

  public PutSlotTypeRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the slot type.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PutSlotTypeRequest enumerationValues(List<EnumerationValue> enumerationValues) {
    this.enumerationValues = enumerationValues;
    return this;
  }

  public PutSlotTypeRequest addEnumerationValuesItem(EnumerationValue enumerationValuesItem) {
    if (this.enumerationValues == null) {
      this.enumerationValues = new ArrayList<>();
    }
    this.enumerationValues.add(enumerationValuesItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of &lt;code&gt;EnumerationValue&lt;/code&gt; objects that defines the values that the slot type can take. Each value can have a list of &lt;code&gt;synonyms&lt;/code&gt;, which are additional values that help train the machine learning model about the values that it resolves for a slot. &lt;/p&gt; &lt;p&gt;A regular expression slot type doesn&#39;t require enumeration values. All other slot types require a list of enumeration values.&lt;/p&gt; &lt;p&gt;When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The &lt;code&gt;valueSelectionStrategy&lt;/code&gt; field indicates the option to use. &lt;/p&gt;
   * @return enumerationValues
   */
  @javax.annotation.Nullable
  public List<EnumerationValue> getEnumerationValues() {
    return enumerationValues;
  }

  public void setEnumerationValues(List<EnumerationValue> enumerationValues) {
    this.enumerationValues = enumerationValues;
  }


  public PutSlotTypeRequest checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * &lt;p&gt;Identifies a specific revision of the &lt;code&gt;$LATEST&lt;/code&gt; version.&lt;/p&gt; &lt;p&gt;When you create a new slot type, leave the &lt;code&gt;checksum&lt;/code&gt; field blank. If you specify a checksum you get a &lt;code&gt;BadRequestException&lt;/code&gt; exception.&lt;/p&gt; &lt;p&gt;When you want to update a slot type, set the &lt;code&gt;checksum&lt;/code&gt; field to the checksum of the most recent revision of the &lt;code&gt;$LATEST&lt;/code&gt; version. If you don&#39;t specify the &lt;code&gt; checksum&lt;/code&gt; field, or if the checksum does not match the &lt;code&gt;$LATEST&lt;/code&gt; version, you get a &lt;code&gt;PreconditionFailedException&lt;/code&gt; exception.&lt;/p&gt;
   * @return checksum
   */
  @javax.annotation.Nullable
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }


  public PutSlotTypeRequest valueSelectionStrategy(ValueSelectionStrategyEnum valueSelectionStrategy) {
    this.valueSelectionStrategy = valueSelectionStrategy;
    return this;
  }

  /**
   * &lt;p&gt;Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ORIGINAL_VALUE&lt;/code&gt; - Returns the value entered by the user, if the user value is similar to the slot value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TOP_RESOLUTION&lt;/code&gt; - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;valueSelectionStrategy&lt;/code&gt;, the default is &lt;code&gt;ORIGINAL_VALUE&lt;/code&gt;.&lt;/p&gt;
   * @return valueSelectionStrategy
   */
  @javax.annotation.Nullable
  public ValueSelectionStrategyEnum getValueSelectionStrategy() {
    return valueSelectionStrategy;
  }

  public void setValueSelectionStrategy(ValueSelectionStrategyEnum valueSelectionStrategy) {
    this.valueSelectionStrategy = valueSelectionStrategy;
  }


  public PutSlotTypeRequest createVersion(Boolean createVersion) {
    this.createVersion = createVersion;
    return this;
  }

  /**
   * When set to &lt;code&gt;true&lt;/code&gt; a new numbered version of the slot type is created. This is the same as calling the &lt;code&gt;CreateSlotTypeVersion&lt;/code&gt; operation. If you do not specify &lt;code&gt;createVersion&lt;/code&gt;, the default is &lt;code&gt;false&lt;/code&gt;.
   * @return createVersion
   */
  @javax.annotation.Nullable
  public Boolean getCreateVersion() {
    return createVersion;
  }

  public void setCreateVersion(Boolean createVersion) {
    this.createVersion = createVersion;
  }


  public PutSlotTypeRequest parentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
    return this;
  }

  /**
   * &lt;p&gt;The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.&lt;/p&gt; &lt;p&gt;Only &lt;code&gt;AMAZON.AlphaNumeric&lt;/code&gt; is supported.&lt;/p&gt;
   * @return parentSlotTypeSignature
   */
  @javax.annotation.Nullable
  public String getParentSlotTypeSignature() {
    return parentSlotTypeSignature;
  }

  public void setParentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
  }


  public PutSlotTypeRequest slotTypeConfigurations(List<SlotTypeConfiguration> slotTypeConfigurations) {
    this.slotTypeConfigurations = slotTypeConfigurations;
    return this;
  }

  public PutSlotTypeRequest addSlotTypeConfigurationsItem(SlotTypeConfiguration slotTypeConfigurationsItem) {
    if (this.slotTypeConfigurations == null) {
      this.slotTypeConfigurations = new ArrayList<>();
    }
    this.slotTypeConfigurations.add(slotTypeConfigurationsItem);
    return this;
  }

  /**
   * Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.
   * @return slotTypeConfigurations
   */
  @javax.annotation.Nullable
  public List<SlotTypeConfiguration> getSlotTypeConfigurations() {
    return slotTypeConfigurations;
  }

  public void setSlotTypeConfigurations(List<SlotTypeConfiguration> slotTypeConfigurations) {
    this.slotTypeConfigurations = slotTypeConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutSlotTypeRequest putSlotTypeRequest = (PutSlotTypeRequest) o;
    return Objects.equals(this.description, putSlotTypeRequest.description) &&
        Objects.equals(this.enumerationValues, putSlotTypeRequest.enumerationValues) &&
        Objects.equals(this.checksum, putSlotTypeRequest.checksum) &&
        Objects.equals(this.valueSelectionStrategy, putSlotTypeRequest.valueSelectionStrategy) &&
        Objects.equals(this.createVersion, putSlotTypeRequest.createVersion) &&
        Objects.equals(this.parentSlotTypeSignature, putSlotTypeRequest.parentSlotTypeSignature) &&
        Objects.equals(this.slotTypeConfigurations, putSlotTypeRequest.slotTypeConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, enumerationValues, checksum, valueSelectionStrategy, createVersion, parentSlotTypeSignature, slotTypeConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutSlotTypeRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enumerationValues: ").append(toIndentedString(enumerationValues)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    valueSelectionStrategy: ").append(toIndentedString(valueSelectionStrategy)).append("\n");
    sb.append("    createVersion: ").append(toIndentedString(createVersion)).append("\n");
    sb.append("    parentSlotTypeSignature: ").append(toIndentedString(parentSlotTypeSignature)).append("\n");
    sb.append("    slotTypeConfigurations: ").append(toIndentedString(slotTypeConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("enumerationValues");
    openapiFields.add("checksum");
    openapiFields.add("valueSelectionStrategy");
    openapiFields.add("createVersion");
    openapiFields.add("parentSlotTypeSignature");
    openapiFields.add("slotTypeConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutSlotTypeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutSlotTypeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutSlotTypeRequest is not found in the empty JSON string", PutSlotTypeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutSlotTypeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutSlotTypeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("enumerationValues") != null && !jsonObj.get("enumerationValues").isJsonNull()) {
        JsonArray jsonArrayenumerationValues = jsonObj.getAsJsonArray("enumerationValues");
        if (jsonArrayenumerationValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enumerationValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enumerationValues` to be an array in the JSON string but got `%s`", jsonObj.get("enumerationValues").toString()));
          }

          // validate the optional field `enumerationValues` (array)
          for (int i = 0; i < jsonArrayenumerationValues.size(); i++) {
            EnumerationValue.validateJsonElement(jsonArrayenumerationValues.get(i));
          };
        }
      }
      if ((jsonObj.get("checksum") != null && !jsonObj.get("checksum").isJsonNull()) && !jsonObj.get("checksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checksum").toString()));
      }
      if ((jsonObj.get("valueSelectionStrategy") != null && !jsonObj.get("valueSelectionStrategy").isJsonNull()) && !jsonObj.get("valueSelectionStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueSelectionStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueSelectionStrategy").toString()));
      }
      // validate the optional field `valueSelectionStrategy`
      if (jsonObj.get("valueSelectionStrategy") != null && !jsonObj.get("valueSelectionStrategy").isJsonNull()) {
        ValueSelectionStrategyEnum.validateJsonElement(jsonObj.get("valueSelectionStrategy"));
      }
      if ((jsonObj.get("parentSlotTypeSignature") != null && !jsonObj.get("parentSlotTypeSignature").isJsonNull()) && !jsonObj.get("parentSlotTypeSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentSlotTypeSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentSlotTypeSignature").toString()));
      }
      if (jsonObj.get("slotTypeConfigurations") != null && !jsonObj.get("slotTypeConfigurations").isJsonNull()) {
        JsonArray jsonArrayslotTypeConfigurations = jsonObj.getAsJsonArray("slotTypeConfigurations");
        if (jsonArrayslotTypeConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("slotTypeConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `slotTypeConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("slotTypeConfigurations").toString()));
          }

          // validate the optional field `slotTypeConfigurations` (array)
          for (int i = 0; i < jsonArrayslotTypeConfigurations.size(); i++) {
            SlotTypeConfiguration.validateJsonElement(jsonArrayslotTypeConfigurations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutSlotTypeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutSlotTypeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutSlotTypeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutSlotTypeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutSlotTypeRequest>() {
           @Override
           public void write(JsonWriter out, PutSlotTypeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutSlotTypeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutSlotTypeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutSlotTypeRequest
   * @throws IOException if the JSON string is invalid with respect to PutSlotTypeRequest
   */
  public static PutSlotTypeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutSlotTypeRequest.class);
  }

  /**
   * Convert an instance of PutSlotTypeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

