/*
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputContext;
import org.openapitools.client.model.OutputContext;
import org.openapitools.client.model.PutBotRequestAbortStatement;
import org.openapitools.client.model.PutBotRequestClarificationPrompt;
import org.openapitools.client.model.PutIntentRequestDialogCodeHook;
import org.openapitools.client.model.PutIntentRequestFollowUpPrompt;
import org.openapitools.client.model.PutIntentRequestFulfillmentActivity;
import org.openapitools.client.model.PutIntentRequestKendraConfiguration;
import org.openapitools.client.model.Slot;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutIntentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:37.850486-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutIntentRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SLOTS = "slots";
  @SerializedName(SERIALIZED_NAME_SLOTS)
  private List<Slot> slots = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAMPLE_UTTERANCES = "sampleUtterances";
  @SerializedName(SERIALIZED_NAME_SAMPLE_UTTERANCES)
  private List<String> sampleUtterances = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIRMATION_PROMPT = "confirmationPrompt";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_PROMPT)
  private PutBotRequestClarificationPrompt confirmationPrompt;

  public static final String SERIALIZED_NAME_REJECTION_STATEMENT = "rejectionStatement";
  @SerializedName(SERIALIZED_NAME_REJECTION_STATEMENT)
  private PutBotRequestAbortStatement rejectionStatement;

  public static final String SERIALIZED_NAME_FOLLOW_UP_PROMPT = "followUpPrompt";
  @SerializedName(SERIALIZED_NAME_FOLLOW_UP_PROMPT)
  private PutIntentRequestFollowUpPrompt followUpPrompt;

  public static final String SERIALIZED_NAME_CONCLUSION_STATEMENT = "conclusionStatement";
  @SerializedName(SERIALIZED_NAME_CONCLUSION_STATEMENT)
  private PutBotRequestAbortStatement conclusionStatement;

  public static final String SERIALIZED_NAME_DIALOG_CODE_HOOK = "dialogCodeHook";
  @SerializedName(SERIALIZED_NAME_DIALOG_CODE_HOOK)
  private PutIntentRequestDialogCodeHook dialogCodeHook;

  public static final String SERIALIZED_NAME_FULFILLMENT_ACTIVITY = "fulfillmentActivity";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_ACTIVITY)
  private PutIntentRequestFulfillmentActivity fulfillmentActivity;

  public static final String SERIALIZED_NAME_PARENT_INTENT_SIGNATURE = "parentIntentSignature";
  @SerializedName(SERIALIZED_NAME_PARENT_INTENT_SIGNATURE)
  private String parentIntentSignature;

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private String checksum;

  public static final String SERIALIZED_NAME_CREATE_VERSION = "createVersion";
  @SerializedName(SERIALIZED_NAME_CREATE_VERSION)
  private Boolean createVersion;

  public static final String SERIALIZED_NAME_KENDRA_CONFIGURATION = "kendraConfiguration";
  @SerializedName(SERIALIZED_NAME_KENDRA_CONFIGURATION)
  private PutIntentRequestKendraConfiguration kendraConfiguration;

  public static final String SERIALIZED_NAME_INPUT_CONTEXTS = "inputContexts";
  @SerializedName(SERIALIZED_NAME_INPUT_CONTEXTS)
  private List<InputContext> inputContexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_CONTEXTS = "outputContexts";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONTEXTS)
  private List<OutputContext> outputContexts = new ArrayList<>();

  public PutIntentRequest() {
  }

  public PutIntentRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the intent.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PutIntentRequest slots(List<Slot> slots) {
    this.slots = slots;
    return this;
  }

  public PutIntentRequest addSlotsItem(Slot slotsItem) {
    if (this.slots == null) {
      this.slots = new ArrayList<>();
    }
    this.slots.add(slotsItem);
    return this;
  }

  /**
   * An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see &lt;a&gt;how-it-works&lt;/a&gt;. 
   * @return slots
   */
  @javax.annotation.Nullable
  public List<Slot> getSlots() {
    return slots;
  }

  public void setSlots(List<Slot> slots) {
    this.slots = slots;
  }


  public PutIntentRequest sampleUtterances(List<String> sampleUtterances) {
    this.sampleUtterances = sampleUtterances;
    return this;
  }

  public PutIntentRequest addSampleUtterancesItem(String sampleUtterancesItem) {
    if (this.sampleUtterances == null) {
      this.sampleUtterances = new ArrayList<>();
    }
    this.sampleUtterances.add(sampleUtterancesItem);
    return this;
  }

  /**
   * &lt;p&gt;An array of utterances (strings) that a user might say to signal the intent. For example, \&quot;I want {PizzaSize} pizza\&quot;, \&quot;Order {Quantity} {PizzaSize} pizzas\&quot;. &lt;/p&gt; &lt;p&gt;In each utterance, a slot name is enclosed in curly braces. &lt;/p&gt;
   * @return sampleUtterances
   */
  @javax.annotation.Nullable
  public List<String> getSampleUtterances() {
    return sampleUtterances;
  }

  public void setSampleUtterances(List<String> sampleUtterances) {
    this.sampleUtterances = sampleUtterances;
  }


  public PutIntentRequest confirmationPrompt(PutBotRequestClarificationPrompt confirmationPrompt) {
    this.confirmationPrompt = confirmationPrompt;
    return this;
  }

  /**
   * Get confirmationPrompt
   * @return confirmationPrompt
   */
  @javax.annotation.Nullable
  public PutBotRequestClarificationPrompt getConfirmationPrompt() {
    return confirmationPrompt;
  }

  public void setConfirmationPrompt(PutBotRequestClarificationPrompt confirmationPrompt) {
    this.confirmationPrompt = confirmationPrompt;
  }


  public PutIntentRequest rejectionStatement(PutBotRequestAbortStatement rejectionStatement) {
    this.rejectionStatement = rejectionStatement;
    return this;
  }

  /**
   * Get rejectionStatement
   * @return rejectionStatement
   */
  @javax.annotation.Nullable
  public PutBotRequestAbortStatement getRejectionStatement() {
    return rejectionStatement;
  }

  public void setRejectionStatement(PutBotRequestAbortStatement rejectionStatement) {
    this.rejectionStatement = rejectionStatement;
  }


  public PutIntentRequest followUpPrompt(PutIntentRequestFollowUpPrompt followUpPrompt) {
    this.followUpPrompt = followUpPrompt;
    return this;
  }

  /**
   * Get followUpPrompt
   * @return followUpPrompt
   */
  @javax.annotation.Nullable
  public PutIntentRequestFollowUpPrompt getFollowUpPrompt() {
    return followUpPrompt;
  }

  public void setFollowUpPrompt(PutIntentRequestFollowUpPrompt followUpPrompt) {
    this.followUpPrompt = followUpPrompt;
  }


  public PutIntentRequest conclusionStatement(PutBotRequestAbortStatement conclusionStatement) {
    this.conclusionStatement = conclusionStatement;
    return this;
  }

  /**
   * Get conclusionStatement
   * @return conclusionStatement
   */
  @javax.annotation.Nullable
  public PutBotRequestAbortStatement getConclusionStatement() {
    return conclusionStatement;
  }

  public void setConclusionStatement(PutBotRequestAbortStatement conclusionStatement) {
    this.conclusionStatement = conclusionStatement;
  }


  public PutIntentRequest dialogCodeHook(PutIntentRequestDialogCodeHook dialogCodeHook) {
    this.dialogCodeHook = dialogCodeHook;
    return this;
  }

  /**
   * Get dialogCodeHook
   * @return dialogCodeHook
   */
  @javax.annotation.Nullable
  public PutIntentRequestDialogCodeHook getDialogCodeHook() {
    return dialogCodeHook;
  }

  public void setDialogCodeHook(PutIntentRequestDialogCodeHook dialogCodeHook) {
    this.dialogCodeHook = dialogCodeHook;
  }


  public PutIntentRequest fulfillmentActivity(PutIntentRequestFulfillmentActivity fulfillmentActivity) {
    this.fulfillmentActivity = fulfillmentActivity;
    return this;
  }

  /**
   * Get fulfillmentActivity
   * @return fulfillmentActivity
   */
  @javax.annotation.Nullable
  public PutIntentRequestFulfillmentActivity getFulfillmentActivity() {
    return fulfillmentActivity;
  }

  public void setFulfillmentActivity(PutIntentRequestFulfillmentActivity fulfillmentActivity) {
    this.fulfillmentActivity = fulfillmentActivity;
  }


  public PutIntentRequest parentIntentSignature(String parentIntentSignature) {
    this.parentIntentSignature = parentIntentSignature;
    return this;
  }

  /**
   * A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see &lt;a href&#x3D;\&quot;https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\&quot;&gt;Standard Built-in Intents&lt;/a&gt; in the &lt;i&gt;Alexa Skills Kit&lt;/i&gt;.
   * @return parentIntentSignature
   */
  @javax.annotation.Nullable
  public String getParentIntentSignature() {
    return parentIntentSignature;
  }

  public void setParentIntentSignature(String parentIntentSignature) {
    this.parentIntentSignature = parentIntentSignature;
  }


  public PutIntentRequest checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * &lt;p&gt;Identifies a specific revision of the &lt;code&gt;$LATEST&lt;/code&gt; version.&lt;/p&gt; &lt;p&gt;When you create a new intent, leave the &lt;code&gt;checksum&lt;/code&gt; field blank. If you specify a checksum you get a &lt;code&gt;BadRequestException&lt;/code&gt; exception.&lt;/p&gt; &lt;p&gt;When you want to update a intent, set the &lt;code&gt;checksum&lt;/code&gt; field to the checksum of the most recent revision of the &lt;code&gt;$LATEST&lt;/code&gt; version. If you don&#39;t specify the &lt;code&gt; checksum&lt;/code&gt; field, or if the checksum does not match the &lt;code&gt;$LATEST&lt;/code&gt; version, you get a &lt;code&gt;PreconditionFailedException&lt;/code&gt; exception.&lt;/p&gt;
   * @return checksum
   */
  @javax.annotation.Nullable
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }


  public PutIntentRequest createVersion(Boolean createVersion) {
    this.createVersion = createVersion;
    return this;
  }

  /**
   * When set to &lt;code&gt;true&lt;/code&gt; a new numbered version of the intent is created. This is the same as calling the &lt;code&gt;CreateIntentVersion&lt;/code&gt; operation. If you do not specify &lt;code&gt;createVersion&lt;/code&gt;, the default is &lt;code&gt;false&lt;/code&gt;.
   * @return createVersion
   */
  @javax.annotation.Nullable
  public Boolean getCreateVersion() {
    return createVersion;
  }

  public void setCreateVersion(Boolean createVersion) {
    this.createVersion = createVersion;
  }


  public PutIntentRequest kendraConfiguration(PutIntentRequestKendraConfiguration kendraConfiguration) {
    this.kendraConfiguration = kendraConfiguration;
    return this;
  }

  /**
   * Get kendraConfiguration
   * @return kendraConfiguration
   */
  @javax.annotation.Nullable
  public PutIntentRequestKendraConfiguration getKendraConfiguration() {
    return kendraConfiguration;
  }

  public void setKendraConfiguration(PutIntentRequestKendraConfiguration kendraConfiguration) {
    this.kendraConfiguration = kendraConfiguration;
  }


  public PutIntentRequest inputContexts(List<InputContext> inputContexts) {
    this.inputContexts = inputContexts;
    return this;
  }

  public PutIntentRequest addInputContextsItem(InputContext inputContextsItem) {
    if (this.inputContexts == null) {
      this.inputContexts = new ArrayList<>();
    }
    this.inputContexts.add(inputContextsItem);
    return this;
  }

  /**
   * An array of &lt;code&gt;InputContext&lt;/code&gt; objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.
   * @return inputContexts
   */
  @javax.annotation.Nullable
  public List<InputContext> getInputContexts() {
    return inputContexts;
  }

  public void setInputContexts(List<InputContext> inputContexts) {
    this.inputContexts = inputContexts;
  }


  public PutIntentRequest outputContexts(List<OutputContext> outputContexts) {
    this.outputContexts = outputContexts;
    return this;
  }

  public PutIntentRequest addOutputContextsItem(OutputContext outputContextsItem) {
    if (this.outputContexts == null) {
      this.outputContexts = new ArrayList<>();
    }
    this.outputContexts.add(outputContextsItem);
    return this;
  }

  /**
   * An array of &lt;code&gt;OutputContext&lt;/code&gt; objects that lists the contexts that the intent activates when the intent is fulfilled.
   * @return outputContexts
   */
  @javax.annotation.Nullable
  public List<OutputContext> getOutputContexts() {
    return outputContexts;
  }

  public void setOutputContexts(List<OutputContext> outputContexts) {
    this.outputContexts = outputContexts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutIntentRequest putIntentRequest = (PutIntentRequest) o;
    return Objects.equals(this.description, putIntentRequest.description) &&
        Objects.equals(this.slots, putIntentRequest.slots) &&
        Objects.equals(this.sampleUtterances, putIntentRequest.sampleUtterances) &&
        Objects.equals(this.confirmationPrompt, putIntentRequest.confirmationPrompt) &&
        Objects.equals(this.rejectionStatement, putIntentRequest.rejectionStatement) &&
        Objects.equals(this.followUpPrompt, putIntentRequest.followUpPrompt) &&
        Objects.equals(this.conclusionStatement, putIntentRequest.conclusionStatement) &&
        Objects.equals(this.dialogCodeHook, putIntentRequest.dialogCodeHook) &&
        Objects.equals(this.fulfillmentActivity, putIntentRequest.fulfillmentActivity) &&
        Objects.equals(this.parentIntentSignature, putIntentRequest.parentIntentSignature) &&
        Objects.equals(this.checksum, putIntentRequest.checksum) &&
        Objects.equals(this.createVersion, putIntentRequest.createVersion) &&
        Objects.equals(this.kendraConfiguration, putIntentRequest.kendraConfiguration) &&
        Objects.equals(this.inputContexts, putIntentRequest.inputContexts) &&
        Objects.equals(this.outputContexts, putIntentRequest.outputContexts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, slots, sampleUtterances, confirmationPrompt, rejectionStatement, followUpPrompt, conclusionStatement, dialogCodeHook, fulfillmentActivity, parentIntentSignature, checksum, createVersion, kendraConfiguration, inputContexts, outputContexts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutIntentRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("    sampleUtterances: ").append(toIndentedString(sampleUtterances)).append("\n");
    sb.append("    confirmationPrompt: ").append(toIndentedString(confirmationPrompt)).append("\n");
    sb.append("    rejectionStatement: ").append(toIndentedString(rejectionStatement)).append("\n");
    sb.append("    followUpPrompt: ").append(toIndentedString(followUpPrompt)).append("\n");
    sb.append("    conclusionStatement: ").append(toIndentedString(conclusionStatement)).append("\n");
    sb.append("    dialogCodeHook: ").append(toIndentedString(dialogCodeHook)).append("\n");
    sb.append("    fulfillmentActivity: ").append(toIndentedString(fulfillmentActivity)).append("\n");
    sb.append("    parentIntentSignature: ").append(toIndentedString(parentIntentSignature)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    createVersion: ").append(toIndentedString(createVersion)).append("\n");
    sb.append("    kendraConfiguration: ").append(toIndentedString(kendraConfiguration)).append("\n");
    sb.append("    inputContexts: ").append(toIndentedString(inputContexts)).append("\n");
    sb.append("    outputContexts: ").append(toIndentedString(outputContexts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("slots");
    openapiFields.add("sampleUtterances");
    openapiFields.add("confirmationPrompt");
    openapiFields.add("rejectionStatement");
    openapiFields.add("followUpPrompt");
    openapiFields.add("conclusionStatement");
    openapiFields.add("dialogCodeHook");
    openapiFields.add("fulfillmentActivity");
    openapiFields.add("parentIntentSignature");
    openapiFields.add("checksum");
    openapiFields.add("createVersion");
    openapiFields.add("kendraConfiguration");
    openapiFields.add("inputContexts");
    openapiFields.add("outputContexts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutIntentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutIntentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutIntentRequest is not found in the empty JSON string", PutIntentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutIntentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutIntentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("slots") != null && !jsonObj.get("slots").isJsonNull()) {
        JsonArray jsonArrayslots = jsonObj.getAsJsonArray("slots");
        if (jsonArrayslots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("slots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `slots` to be an array in the JSON string but got `%s`", jsonObj.get("slots").toString()));
          }

          // validate the optional field `slots` (array)
          for (int i = 0; i < jsonArrayslots.size(); i++) {
            Slot.validateJsonElement(jsonArrayslots.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sampleUtterances") != null && !jsonObj.get("sampleUtterances").isJsonNull() && !jsonObj.get("sampleUtterances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleUtterances` to be an array in the JSON string but got `%s`", jsonObj.get("sampleUtterances").toString()));
      }
      // validate the optional field `confirmationPrompt`
      if (jsonObj.get("confirmationPrompt") != null && !jsonObj.get("confirmationPrompt").isJsonNull()) {
        PutBotRequestClarificationPrompt.validateJsonElement(jsonObj.get("confirmationPrompt"));
      }
      // validate the optional field `rejectionStatement`
      if (jsonObj.get("rejectionStatement") != null && !jsonObj.get("rejectionStatement").isJsonNull()) {
        PutBotRequestAbortStatement.validateJsonElement(jsonObj.get("rejectionStatement"));
      }
      // validate the optional field `followUpPrompt`
      if (jsonObj.get("followUpPrompt") != null && !jsonObj.get("followUpPrompt").isJsonNull()) {
        PutIntentRequestFollowUpPrompt.validateJsonElement(jsonObj.get("followUpPrompt"));
      }
      // validate the optional field `conclusionStatement`
      if (jsonObj.get("conclusionStatement") != null && !jsonObj.get("conclusionStatement").isJsonNull()) {
        PutBotRequestAbortStatement.validateJsonElement(jsonObj.get("conclusionStatement"));
      }
      // validate the optional field `dialogCodeHook`
      if (jsonObj.get("dialogCodeHook") != null && !jsonObj.get("dialogCodeHook").isJsonNull()) {
        PutIntentRequestDialogCodeHook.validateJsonElement(jsonObj.get("dialogCodeHook"));
      }
      // validate the optional field `fulfillmentActivity`
      if (jsonObj.get("fulfillmentActivity") != null && !jsonObj.get("fulfillmentActivity").isJsonNull()) {
        PutIntentRequestFulfillmentActivity.validateJsonElement(jsonObj.get("fulfillmentActivity"));
      }
      if ((jsonObj.get("parentIntentSignature") != null && !jsonObj.get("parentIntentSignature").isJsonNull()) && !jsonObj.get("parentIntentSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentIntentSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentIntentSignature").toString()));
      }
      if ((jsonObj.get("checksum") != null && !jsonObj.get("checksum").isJsonNull()) && !jsonObj.get("checksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checksum").toString()));
      }
      // validate the optional field `kendraConfiguration`
      if (jsonObj.get("kendraConfiguration") != null && !jsonObj.get("kendraConfiguration").isJsonNull()) {
        PutIntentRequestKendraConfiguration.validateJsonElement(jsonObj.get("kendraConfiguration"));
      }
      if (jsonObj.get("inputContexts") != null && !jsonObj.get("inputContexts").isJsonNull()) {
        JsonArray jsonArrayinputContexts = jsonObj.getAsJsonArray("inputContexts");
        if (jsonArrayinputContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputContexts` to be an array in the JSON string but got `%s`", jsonObj.get("inputContexts").toString()));
          }

          // validate the optional field `inputContexts` (array)
          for (int i = 0; i < jsonArrayinputContexts.size(); i++) {
            InputContext.validateJsonElement(jsonArrayinputContexts.get(i));
          };
        }
      }
      if (jsonObj.get("outputContexts") != null && !jsonObj.get("outputContexts").isJsonNull()) {
        JsonArray jsonArrayoutputContexts = jsonObj.getAsJsonArray("outputContexts");
        if (jsonArrayoutputContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputContexts` to be an array in the JSON string but got `%s`", jsonObj.get("outputContexts").toString()));
          }

          // validate the optional field `outputContexts` (array)
          for (int i = 0; i < jsonArrayoutputContexts.size(); i++) {
            OutputContext.validateJsonElement(jsonArrayoutputContexts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutIntentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutIntentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutIntentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutIntentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutIntentRequest>() {
           @Override
           public void write(JsonWriter out, PutIntentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutIntentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutIntentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutIntentRequest
   * @throws IOException if the JSON string is invalid with respect to PutIntentRequest
   */
  public static PutIntentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutIntentRequest.class);
  }

  /**
   * Convert an instance of PutIntentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

