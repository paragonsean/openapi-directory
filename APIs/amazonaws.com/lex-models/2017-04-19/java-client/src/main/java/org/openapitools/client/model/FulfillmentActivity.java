/*
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FulfillmentActivityType;
import org.openapitools.client.model.PutIntentRequestFulfillmentActivityCodeHook;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt; Describes how the intent is fulfilled after the user provides all of the information required for the intent. You can provide a Lambda function to process the intent, or you can return the intent information to the client application. We recommend that you use a Lambda function so that the relevant logic lives in the Cloud and limit the client-side code primarily to presentation. If you need to update the logic, you only update the Lambda function; you don&#39;t need to upgrade your client application. &lt;/p&gt; &lt;p&gt;Consider the following examples:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In a pizza ordering application, after the user provides all of the information for placing an order, you use a Lambda function to place an order with a pizzeria. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In a gaming application, when a user says \&quot;pick up a rock,\&quot; this information must go back to the client application so that it can perform the operation and update the graphics. In this case, you want Amazon Lex to return the intent data to the client. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:37.850486-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FulfillmentActivity {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private FulfillmentActivityType type;

  public static final String SERIALIZED_NAME_CODE_HOOK = "codeHook";
  @SerializedName(SERIALIZED_NAME_CODE_HOOK)
  private PutIntentRequestFulfillmentActivityCodeHook codeHook;

  public FulfillmentActivity() {
  }

  public FulfillmentActivity type(FulfillmentActivityType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public FulfillmentActivityType getType() {
    return type;
  }

  public void setType(FulfillmentActivityType type) {
    this.type = type;
  }


  public FulfillmentActivity codeHook(PutIntentRequestFulfillmentActivityCodeHook codeHook) {
    this.codeHook = codeHook;
    return this;
  }

  /**
   * Get codeHook
   * @return codeHook
   */
  @javax.annotation.Nullable
  public PutIntentRequestFulfillmentActivityCodeHook getCodeHook() {
    return codeHook;
  }

  public void setCodeHook(PutIntentRequestFulfillmentActivityCodeHook codeHook) {
    this.codeHook = codeHook;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FulfillmentActivity fulfillmentActivity = (FulfillmentActivity) o;
    return Objects.equals(this.type, fulfillmentActivity.type) &&
        Objects.equals(this.codeHook, fulfillmentActivity.codeHook);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, codeHook);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FulfillmentActivity {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    codeHook: ").append(toIndentedString(codeHook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("codeHook");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FulfillmentActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FulfillmentActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FulfillmentActivity is not found in the empty JSON string", FulfillmentActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FulfillmentActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FulfillmentActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FulfillmentActivity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      FulfillmentActivityType.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `codeHook`
      if (jsonObj.get("codeHook") != null && !jsonObj.get("codeHook").isJsonNull()) {
        PutIntentRequestFulfillmentActivityCodeHook.validateJsonElement(jsonObj.get("codeHook"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FulfillmentActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FulfillmentActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FulfillmentActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FulfillmentActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<FulfillmentActivity>() {
           @Override
           public void write(JsonWriter out, FulfillmentActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FulfillmentActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FulfillmentActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FulfillmentActivity
   * @throws IOException if the JSON string is invalid with respect to FulfillmentActivity
   */
  public static FulfillmentActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FulfillmentActivity.class);
  }

  /**
   * Convert an instance of FulfillmentActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

