/*
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Intent;
import org.openapitools.client.model.PutBotRequestAbortStatement;
import org.openapitools.client.model.PutBotRequestClarificationPrompt;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutBotRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:37.850486-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutBotRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INTENTS = "intents";
  @SerializedName(SERIALIZED_NAME_INTENTS)
  private List<Intent> intents = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLE_MODEL_IMPROVEMENTS = "enableModelImprovements";
  @SerializedName(SERIALIZED_NAME_ENABLE_MODEL_IMPROVEMENTS)
  private Boolean enableModelImprovements;

  public static final String SERIALIZED_NAME_NLU_INTENT_CONFIDENCE_THRESHOLD = "nluIntentConfidenceThreshold";
  @SerializedName(SERIALIZED_NAME_NLU_INTENT_CONFIDENCE_THRESHOLD)
  private Double nluIntentConfidenceThreshold;

  public static final String SERIALIZED_NAME_CLARIFICATION_PROMPT = "clarificationPrompt";
  @SerializedName(SERIALIZED_NAME_CLARIFICATION_PROMPT)
  private PutBotRequestClarificationPrompt clarificationPrompt;

  public static final String SERIALIZED_NAME_ABORT_STATEMENT = "abortStatement";
  @SerializedName(SERIALIZED_NAME_ABORT_STATEMENT)
  private PutBotRequestAbortStatement abortStatement;

  public static final String SERIALIZED_NAME_IDLE_SESSION_T_T_L_IN_SECONDS = "idleSessionTTLInSeconds";
  @SerializedName(SERIALIZED_NAME_IDLE_SESSION_T_T_L_IN_SECONDS)
  private Integer idleSessionTTLInSeconds;

  public static final String SERIALIZED_NAME_VOICE_ID = "voiceId";
  @SerializedName(SERIALIZED_NAME_VOICE_ID)
  private String voiceId;

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private String checksum;

  /**
   * &lt;p&gt;If you set the &lt;code&gt;processBehavior&lt;/code&gt; element to &lt;code&gt;BUILD&lt;/code&gt;, Amazon Lex builds the bot so that it can be run. If you set the element to &lt;code&gt;SAVE&lt;/code&gt; Amazon Lex saves the bot, but doesn&#39;t build it. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify this value, the default value is &lt;code&gt;BUILD&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(ProcessBehaviorEnum.Adapter.class)
  public enum ProcessBehaviorEnum {
    SAVE("SAVE"),
    
    BUILD("BUILD");

    private String value;

    ProcessBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessBehaviorEnum fromValue(String value) {
      for (ProcessBehaviorEnum b : ProcessBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESS_BEHAVIOR = "processBehavior";
  @SerializedName(SERIALIZED_NAME_PROCESS_BEHAVIOR)
  private ProcessBehaviorEnum processBehavior;

  /**
   * &lt;p&gt; Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. &lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;en-US&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    DE_DE("de-DE"),
    
    EN_AU("en-AU"),
    
    EN_GB("en-GB"),
    
    EN_IN("en-IN"),
    
    EN_US("en-US"),
    
    ES_419("es-419"),
    
    ES_ES("es-ES"),
    
    ES_US("es-US"),
    
    FR_FR("fr-FR"),
    
    FR_CA("fr-CA"),
    
    IT_IT("it-IT"),
    
    JA_JP("ja-JP"),
    
    KO_KR("ko-KR");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocaleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private LocaleEnum locale;

  public static final String SERIALIZED_NAME_CHILD_DIRECTED = "childDirected";
  @SerializedName(SERIALIZED_NAME_CHILD_DIRECTED)
  private Boolean childDirected;

  public static final String SERIALIZED_NAME_DETECT_SENTIMENT = "detectSentiment";
  @SerializedName(SERIALIZED_NAME_DETECT_SENTIMENT)
  private Boolean detectSentiment;

  public static final String SERIALIZED_NAME_CREATE_VERSION = "createVersion";
  @SerializedName(SERIALIZED_NAME_CREATE_VERSION)
  private Boolean createVersion;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public PutBotRequest() {
  }

  public PutBotRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the bot.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PutBotRequest intents(List<Intent> intents) {
    this.intents = intents;
    return this;
  }

  public PutBotRequest addIntentsItem(Intent intentsItem) {
    if (this.intents == null) {
      this.intents = new ArrayList<>();
    }
    this.intents.add(intentsItem);
    return this;
  }

  /**
   * An array of &lt;code&gt;Intent&lt;/code&gt; objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see &lt;a&gt;how-it-works&lt;/a&gt;.
   * @return intents
   */
  @javax.annotation.Nullable
  public List<Intent> getIntents() {
    return intents;
  }

  public void setIntents(List<Intent> intents) {
    this.intents = intents;
  }


  public PutBotRequest enableModelImprovements(Boolean enableModelImprovements) {
    this.enableModelImprovements = enableModelImprovements;
    return this;
  }

  /**
   * &lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to enable access to natural language understanding improvements. &lt;/p&gt; &lt;p&gt;When you set the &lt;code&gt;enableModelImprovements&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; you can use the &lt;code&gt;nluIntentConfidenceThreshold&lt;/code&gt; parameter to configure confidence scores. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\&quot;&gt;Confidence Scores&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can only set the &lt;code&gt;enableModelImprovements&lt;/code&gt; parameter in certain Regions. If you set the parameter to &lt;code&gt;true&lt;/code&gt;, your bot has access to accuracy improvements.&lt;/p&gt; &lt;p&gt;The Regions where you can set the &lt;code&gt;enableModelImprovements&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;US East (N. Virginia) (us-east-1)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;US West (Oregon) (us-west-2)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Asia Pacific (Sydney) (ap-southeast-2)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;EU (Ireland) (eu-west-1)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In other Regions, the &lt;code&gt;enableModelImprovements&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; by default. In these Regions setting the parameter to &lt;code&gt;false&lt;/code&gt; throws a &lt;code&gt;ValidationException&lt;/code&gt; exception.&lt;/p&gt;
   * @return enableModelImprovements
   */
  @javax.annotation.Nullable
  public Boolean getEnableModelImprovements() {
    return enableModelImprovements;
  }

  public void setEnableModelImprovements(Boolean enableModelImprovements) {
    this.enableModelImprovements = enableModelImprovements;
  }


  public PutBotRequest nluIntentConfidenceThreshold(Double nluIntentConfidenceThreshold) {
    this.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold;
    return this;
  }

  /**
   * &lt;p&gt;Determines the threshold where Amazon Lex will insert the &lt;code&gt;AMAZON.FallbackIntent&lt;/code&gt;, &lt;code&gt;AMAZON.KendraSearchIntent&lt;/code&gt;, or both when returning alternative intents in a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\&quot;&gt;PostContent&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\&quot;&gt;PostText&lt;/a&gt; response. &lt;code&gt;AMAZON.FallbackIntent&lt;/code&gt; and &lt;code&gt;AMAZON.KendraSearchIntent&lt;/code&gt; are only inserted if they are configured for the bot.&lt;/p&gt; &lt;p&gt;You must set the &lt;code&gt;enableModelImprovements&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; to use confidence scores in the following regions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;US East (N. Virginia) (us-east-1)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;US West (Oregon) (us-west-2)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Asia Pacific (Sydney) (ap-southeast-2)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;EU (Ireland) (eu-west-1)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In other Regions, the &lt;code&gt;enableModelImprovements&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; by default.&lt;/p&gt; &lt;p&gt;For example, suppose a bot is configured with the confidence threshold of 0.80 and the &lt;code&gt;AMAZON.FallbackIntent&lt;/code&gt;. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the &lt;code&gt;PostText&lt;/code&gt; operation would be:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;AMAZON.FallbackIntent&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IntentA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IntentB&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IntentC&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * minimum: 0
   * maximum: 1
   * @return nluIntentConfidenceThreshold
   */
  @javax.annotation.Nullable
  public Double getNluIntentConfidenceThreshold() {
    return nluIntentConfidenceThreshold;
  }

  public void setNluIntentConfidenceThreshold(Double nluIntentConfidenceThreshold) {
    this.nluIntentConfidenceThreshold = nluIntentConfidenceThreshold;
  }


  public PutBotRequest clarificationPrompt(PutBotRequestClarificationPrompt clarificationPrompt) {
    this.clarificationPrompt = clarificationPrompt;
    return this;
  }

  /**
   * Get clarificationPrompt
   * @return clarificationPrompt
   */
  @javax.annotation.Nullable
  public PutBotRequestClarificationPrompt getClarificationPrompt() {
    return clarificationPrompt;
  }

  public void setClarificationPrompt(PutBotRequestClarificationPrompt clarificationPrompt) {
    this.clarificationPrompt = clarificationPrompt;
  }


  public PutBotRequest abortStatement(PutBotRequestAbortStatement abortStatement) {
    this.abortStatement = abortStatement;
    return this;
  }

  /**
   * Get abortStatement
   * @return abortStatement
   */
  @javax.annotation.Nullable
  public PutBotRequestAbortStatement getAbortStatement() {
    return abortStatement;
  }

  public void setAbortStatement(PutBotRequestAbortStatement abortStatement) {
    this.abortStatement = abortStatement;
  }


  public PutBotRequest idleSessionTTLInSeconds(Integer idleSessionTTLInSeconds) {
    this.idleSessionTTLInSeconds = idleSessionTTLInSeconds;
    return this;
  }

  /**
   * &lt;p&gt;The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.&lt;/p&gt; &lt;p&gt;A user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.&lt;/p&gt; &lt;p&gt;For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn&#39;t complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over.&lt;/p&gt; &lt;p&gt;If you don&#39;t include the &lt;code&gt;idleSessionTTLInSeconds&lt;/code&gt; element in a &lt;code&gt;PutBot&lt;/code&gt; operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot.&lt;/p&gt; &lt;p&gt;The default is 300 seconds (5 minutes).&lt;/p&gt;
   * minimum: 60
   * maximum: 86400
   * @return idleSessionTTLInSeconds
   */
  @javax.annotation.Nullable
  public Integer getIdleSessionTTLInSeconds() {
    return idleSessionTTLInSeconds;
  }

  public void setIdleSessionTTLInSeconds(Integer idleSessionTTLInSeconds) {
    this.idleSessionTTLInSeconds = idleSessionTTLInSeconds;
  }


  public PutBotRequest voiceId(String voiceId) {
    this.voiceId = voiceId;
    return this;
  }

  /**
   * The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\&quot;&gt;Voices in Amazon Polly&lt;/a&gt; in the &lt;i&gt;Amazon Polly Developer Guide&lt;/i&gt;.
   * @return voiceId
   */
  @javax.annotation.Nullable
  public String getVoiceId() {
    return voiceId;
  }

  public void setVoiceId(String voiceId) {
    this.voiceId = voiceId;
  }


  public PutBotRequest checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * &lt;p&gt;Identifies a specific revision of the &lt;code&gt;$LATEST&lt;/code&gt; version.&lt;/p&gt; &lt;p&gt;When you create a new bot, leave the &lt;code&gt;checksum&lt;/code&gt; field blank. If you specify a checksum you get a &lt;code&gt;BadRequestException&lt;/code&gt; exception.&lt;/p&gt; &lt;p&gt;When you want to update a bot, set the &lt;code&gt;checksum&lt;/code&gt; field to the checksum of the most recent revision of the &lt;code&gt;$LATEST&lt;/code&gt; version. If you don&#39;t specify the &lt;code&gt; checksum&lt;/code&gt; field, or if the checksum does not match the &lt;code&gt;$LATEST&lt;/code&gt; version, you get a &lt;code&gt;PreconditionFailedException&lt;/code&gt; exception.&lt;/p&gt;
   * @return checksum
   */
  @javax.annotation.Nullable
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }


  public PutBotRequest processBehavior(ProcessBehaviorEnum processBehavior) {
    this.processBehavior = processBehavior;
    return this;
  }

  /**
   * &lt;p&gt;If you set the &lt;code&gt;processBehavior&lt;/code&gt; element to &lt;code&gt;BUILD&lt;/code&gt;, Amazon Lex builds the bot so that it can be run. If you set the element to &lt;code&gt;SAVE&lt;/code&gt; Amazon Lex saves the bot, but doesn&#39;t build it. &lt;/p&gt; &lt;p&gt;If you don&#39;t specify this value, the default value is &lt;code&gt;BUILD&lt;/code&gt;.&lt;/p&gt;
   * @return processBehavior
   */
  @javax.annotation.Nullable
  public ProcessBehaviorEnum getProcessBehavior() {
    return processBehavior;
  }

  public void setProcessBehavior(ProcessBehaviorEnum processBehavior) {
    this.processBehavior = processBehavior;
  }


  public PutBotRequest locale(LocaleEnum locale) {
    this.locale = locale;
    return this;
  }

  /**
   * &lt;p&gt; Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. &lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;en-US&lt;/code&gt;.&lt;/p&gt;
   * @return locale
   */
  @javax.annotation.Nonnull
  public LocaleEnum getLocale() {
    return locale;
  }

  public void setLocale(LocaleEnum locale) {
    this.locale = locale;
  }


  public PutBotRequest childDirected(Boolean childDirected) {
    this.childDirected = childDirected;
    return this;
  }

  /**
   * &lt;p&gt;For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children&#39;s Online Privacy Protection Act (COPPA) by specifying &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;childDirected&lt;/code&gt; field. By specifying &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;childDirected&lt;/code&gt; field, you confirm that your use of Amazon Lex &lt;b&gt;is&lt;/b&gt; related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;childDirected&lt;/code&gt; field, you confirm that your use of Amazon Lex &lt;b&gt;is not&lt;/b&gt; related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the &lt;code&gt;childDirected&lt;/code&gt; field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.&lt;/p&gt; &lt;p&gt;If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the &lt;a href&#x3D;\&quot;https://aws.amazon.com/lex/faqs#data-security\&quot;&gt;Amazon Lex FAQ.&lt;/a&gt; &lt;/p&gt;
   * @return childDirected
   */
  @javax.annotation.Nonnull
  public Boolean getChildDirected() {
    return childDirected;
  }

  public void setChildDirected(Boolean childDirected) {
    this.childDirected = childDirected;
  }


  public PutBotRequest detectSentiment(Boolean detectSentiment) {
    this.detectSentiment = detectSentiment;
    return this;
  }

  /**
   * When set to &lt;code&gt;true&lt;/code&gt; user utterances are sent to Amazon Comprehend for sentiment analysis. If you don&#39;t specify &lt;code&gt;detectSentiment&lt;/code&gt;, the default is &lt;code&gt;false&lt;/code&gt;.
   * @return detectSentiment
   */
  @javax.annotation.Nullable
  public Boolean getDetectSentiment() {
    return detectSentiment;
  }

  public void setDetectSentiment(Boolean detectSentiment) {
    this.detectSentiment = detectSentiment;
  }


  public PutBotRequest createVersion(Boolean createVersion) {
    this.createVersion = createVersion;
    return this;
  }

  /**
   * When set to &lt;code&gt;true&lt;/code&gt; a new numbered version of the bot is created. This is the same as calling the &lt;code&gt;CreateBotVersion&lt;/code&gt; operation. If you don&#39;t specify &lt;code&gt;createVersion&lt;/code&gt;, the default is &lt;code&gt;false&lt;/code&gt;.
   * @return createVersion
   */
  @javax.annotation.Nullable
  public Boolean getCreateVersion() {
    return createVersion;
  }

  public void setCreateVersion(Boolean createVersion) {
    this.createVersion = createVersion;
  }


  public PutBotRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public PutBotRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags to add to the bot. You can only add tags when you create a bot, you can&#39;t use the &lt;code&gt;PutBot&lt;/code&gt; operation to update the tags on a bot. To update tags, use the &lt;code&gt;TagResource&lt;/code&gt; operation.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutBotRequest putBotRequest = (PutBotRequest) o;
    return Objects.equals(this.description, putBotRequest.description) &&
        Objects.equals(this.intents, putBotRequest.intents) &&
        Objects.equals(this.enableModelImprovements, putBotRequest.enableModelImprovements) &&
        Objects.equals(this.nluIntentConfidenceThreshold, putBotRequest.nluIntentConfidenceThreshold) &&
        Objects.equals(this.clarificationPrompt, putBotRequest.clarificationPrompt) &&
        Objects.equals(this.abortStatement, putBotRequest.abortStatement) &&
        Objects.equals(this.idleSessionTTLInSeconds, putBotRequest.idleSessionTTLInSeconds) &&
        Objects.equals(this.voiceId, putBotRequest.voiceId) &&
        Objects.equals(this.checksum, putBotRequest.checksum) &&
        Objects.equals(this.processBehavior, putBotRequest.processBehavior) &&
        Objects.equals(this.locale, putBotRequest.locale) &&
        Objects.equals(this.childDirected, putBotRequest.childDirected) &&
        Objects.equals(this.detectSentiment, putBotRequest.detectSentiment) &&
        Objects.equals(this.createVersion, putBotRequest.createVersion) &&
        Objects.equals(this.tags, putBotRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, intents, enableModelImprovements, nluIntentConfidenceThreshold, clarificationPrompt, abortStatement, idleSessionTTLInSeconds, voiceId, checksum, processBehavior, locale, childDirected, detectSentiment, createVersion, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutBotRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    intents: ").append(toIndentedString(intents)).append("\n");
    sb.append("    enableModelImprovements: ").append(toIndentedString(enableModelImprovements)).append("\n");
    sb.append("    nluIntentConfidenceThreshold: ").append(toIndentedString(nluIntentConfidenceThreshold)).append("\n");
    sb.append("    clarificationPrompt: ").append(toIndentedString(clarificationPrompt)).append("\n");
    sb.append("    abortStatement: ").append(toIndentedString(abortStatement)).append("\n");
    sb.append("    idleSessionTTLInSeconds: ").append(toIndentedString(idleSessionTTLInSeconds)).append("\n");
    sb.append("    voiceId: ").append(toIndentedString(voiceId)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    processBehavior: ").append(toIndentedString(processBehavior)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    childDirected: ").append(toIndentedString(childDirected)).append("\n");
    sb.append("    detectSentiment: ").append(toIndentedString(detectSentiment)).append("\n");
    sb.append("    createVersion: ").append(toIndentedString(createVersion)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("intents");
    openapiFields.add("enableModelImprovements");
    openapiFields.add("nluIntentConfidenceThreshold");
    openapiFields.add("clarificationPrompt");
    openapiFields.add("abortStatement");
    openapiFields.add("idleSessionTTLInSeconds");
    openapiFields.add("voiceId");
    openapiFields.add("checksum");
    openapiFields.add("processBehavior");
    openapiFields.add("locale");
    openapiFields.add("childDirected");
    openapiFields.add("detectSentiment");
    openapiFields.add("createVersion");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("childDirected");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutBotRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutBotRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutBotRequest is not found in the empty JSON string", PutBotRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutBotRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutBotRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutBotRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("intents") != null && !jsonObj.get("intents").isJsonNull()) {
        JsonArray jsonArrayintents = jsonObj.getAsJsonArray("intents");
        if (jsonArrayintents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intents` to be an array in the JSON string but got `%s`", jsonObj.get("intents").toString()));
          }

          // validate the optional field `intents` (array)
          for (int i = 0; i < jsonArrayintents.size(); i++) {
            Intent.validateJsonElement(jsonArrayintents.get(i));
          };
        }
      }
      // validate the optional field `clarificationPrompt`
      if (jsonObj.get("clarificationPrompt") != null && !jsonObj.get("clarificationPrompt").isJsonNull()) {
        PutBotRequestClarificationPrompt.validateJsonElement(jsonObj.get("clarificationPrompt"));
      }
      // validate the optional field `abortStatement`
      if (jsonObj.get("abortStatement") != null && !jsonObj.get("abortStatement").isJsonNull()) {
        PutBotRequestAbortStatement.validateJsonElement(jsonObj.get("abortStatement"));
      }
      if ((jsonObj.get("voiceId") != null && !jsonObj.get("voiceId").isJsonNull()) && !jsonObj.get("voiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voiceId").toString()));
      }
      if ((jsonObj.get("checksum") != null && !jsonObj.get("checksum").isJsonNull()) && !jsonObj.get("checksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checksum").toString()));
      }
      if ((jsonObj.get("processBehavior") != null && !jsonObj.get("processBehavior").isJsonNull()) && !jsonObj.get("processBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processBehavior").toString()));
      }
      // validate the optional field `processBehavior`
      if (jsonObj.get("processBehavior") != null && !jsonObj.get("processBehavior").isJsonNull()) {
        ProcessBehaviorEnum.validateJsonElement(jsonObj.get("processBehavior"));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the required field `locale`
      LocaleEnum.validateJsonElement(jsonObj.get("locale"));
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutBotRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutBotRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutBotRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutBotRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutBotRequest>() {
           @Override
           public void write(JsonWriter out, PutBotRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutBotRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutBotRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutBotRequest
   * @throws IOException if the JSON string is invalid with respect to PutBotRequest
   */
  public static PutBotRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutBotRequest.class);
  }

  /**
   * Convert an instance of PutBotRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

