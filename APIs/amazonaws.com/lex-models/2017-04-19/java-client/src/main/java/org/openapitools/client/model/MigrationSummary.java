/*
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Locale;
import org.openapitools.client.model.MigrationStatus;
import org.openapitools.client.model.MigrationStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about migrating a bot from Amazon Lex V1 to Amazon Lex V2.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:37.850486-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrationSummary {
  public static final String SERIALIZED_NAME_MIGRATION_ID = "migrationId";
  @SerializedName(SERIALIZED_NAME_MIGRATION_ID)
  private String migrationId;

  public static final String SERIALIZED_NAME_V1_BOT_NAME = "v1BotName";
  @SerializedName(SERIALIZED_NAME_V1_BOT_NAME)
  private String v1BotName;

  public static final String SERIALIZED_NAME_V1_BOT_VERSION = "v1BotVersion";
  @SerializedName(SERIALIZED_NAME_V1_BOT_VERSION)
  private String v1BotVersion;

  public static final String SERIALIZED_NAME_V1_BOT_LOCALE = "v1BotLocale";
  @SerializedName(SERIALIZED_NAME_V1_BOT_LOCALE)
  private Locale v1BotLocale;

  public static final String SERIALIZED_NAME_V2_BOT_ID = "v2BotId";
  @SerializedName(SERIALIZED_NAME_V2_BOT_ID)
  private String v2BotId;

  public static final String SERIALIZED_NAME_V2_BOT_ROLE = "v2BotRole";
  @SerializedName(SERIALIZED_NAME_V2_BOT_ROLE)
  private String v2BotRole;

  public static final String SERIALIZED_NAME_MIGRATION_STATUS = "migrationStatus";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATUS)
  private MigrationStatus migrationStatus;

  public static final String SERIALIZED_NAME_MIGRATION_STRATEGY = "migrationStrategy";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STRATEGY)
  private MigrationStrategy migrationStrategy;

  public static final String SERIALIZED_NAME_MIGRATION_TIMESTAMP = "migrationTimestamp";
  @SerializedName(SERIALIZED_NAME_MIGRATION_TIMESTAMP)
  private OffsetDateTime migrationTimestamp;

  public MigrationSummary() {
  }

  public MigrationSummary migrationId(String migrationId) {
    this.migrationId = migrationId;
    return this;
  }

  /**
   * Get migrationId
   * @return migrationId
   */
  @javax.annotation.Nullable
  public String getMigrationId() {
    return migrationId;
  }

  public void setMigrationId(String migrationId) {
    this.migrationId = migrationId;
  }


  public MigrationSummary v1BotName(String v1BotName) {
    this.v1BotName = v1BotName;
    return this;
  }

  /**
   * Get v1BotName
   * @return v1BotName
   */
  @javax.annotation.Nullable
  public String getV1BotName() {
    return v1BotName;
  }

  public void setV1BotName(String v1BotName) {
    this.v1BotName = v1BotName;
  }


  public MigrationSummary v1BotVersion(String v1BotVersion) {
    this.v1BotVersion = v1BotVersion;
    return this;
  }

  /**
   * Get v1BotVersion
   * @return v1BotVersion
   */
  @javax.annotation.Nullable
  public String getV1BotVersion() {
    return v1BotVersion;
  }

  public void setV1BotVersion(String v1BotVersion) {
    this.v1BotVersion = v1BotVersion;
  }


  public MigrationSummary v1BotLocale(Locale v1BotLocale) {
    this.v1BotLocale = v1BotLocale;
    return this;
  }

  /**
   * Get v1BotLocale
   * @return v1BotLocale
   */
  @javax.annotation.Nullable
  public Locale getV1BotLocale() {
    return v1BotLocale;
  }

  public void setV1BotLocale(Locale v1BotLocale) {
    this.v1BotLocale = v1BotLocale;
  }


  public MigrationSummary v2BotId(String v2BotId) {
    this.v2BotId = v2BotId;
    return this;
  }

  /**
   * Get v2BotId
   * @return v2BotId
   */
  @javax.annotation.Nullable
  public String getV2BotId() {
    return v2BotId;
  }

  public void setV2BotId(String v2BotId) {
    this.v2BotId = v2BotId;
  }


  public MigrationSummary v2BotRole(String v2BotRole) {
    this.v2BotRole = v2BotRole;
    return this;
  }

  /**
   * Get v2BotRole
   * @return v2BotRole
   */
  @javax.annotation.Nullable
  public String getV2BotRole() {
    return v2BotRole;
  }

  public void setV2BotRole(String v2BotRole) {
    this.v2BotRole = v2BotRole;
  }


  public MigrationSummary migrationStatus(MigrationStatus migrationStatus) {
    this.migrationStatus = migrationStatus;
    return this;
  }

  /**
   * Get migrationStatus
   * @return migrationStatus
   */
  @javax.annotation.Nullable
  public MigrationStatus getMigrationStatus() {
    return migrationStatus;
  }

  public void setMigrationStatus(MigrationStatus migrationStatus) {
    this.migrationStatus = migrationStatus;
  }


  public MigrationSummary migrationStrategy(MigrationStrategy migrationStrategy) {
    this.migrationStrategy = migrationStrategy;
    return this;
  }

  /**
   * Get migrationStrategy
   * @return migrationStrategy
   */
  @javax.annotation.Nullable
  public MigrationStrategy getMigrationStrategy() {
    return migrationStrategy;
  }

  public void setMigrationStrategy(MigrationStrategy migrationStrategy) {
    this.migrationStrategy = migrationStrategy;
  }


  public MigrationSummary migrationTimestamp(OffsetDateTime migrationTimestamp) {
    this.migrationTimestamp = migrationTimestamp;
    return this;
  }

  /**
   * Get migrationTimestamp
   * @return migrationTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMigrationTimestamp() {
    return migrationTimestamp;
  }

  public void setMigrationTimestamp(OffsetDateTime migrationTimestamp) {
    this.migrationTimestamp = migrationTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationSummary migrationSummary = (MigrationSummary) o;
    return Objects.equals(this.migrationId, migrationSummary.migrationId) &&
        Objects.equals(this.v1BotName, migrationSummary.v1BotName) &&
        Objects.equals(this.v1BotVersion, migrationSummary.v1BotVersion) &&
        Objects.equals(this.v1BotLocale, migrationSummary.v1BotLocale) &&
        Objects.equals(this.v2BotId, migrationSummary.v2BotId) &&
        Objects.equals(this.v2BotRole, migrationSummary.v2BotRole) &&
        Objects.equals(this.migrationStatus, migrationSummary.migrationStatus) &&
        Objects.equals(this.migrationStrategy, migrationSummary.migrationStrategy) &&
        Objects.equals(this.migrationTimestamp, migrationSummary.migrationTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(migrationId, v1BotName, v1BotVersion, v1BotLocale, v2BotId, v2BotRole, migrationStatus, migrationStrategy, migrationTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationSummary {\n");
    sb.append("    migrationId: ").append(toIndentedString(migrationId)).append("\n");
    sb.append("    v1BotName: ").append(toIndentedString(v1BotName)).append("\n");
    sb.append("    v1BotVersion: ").append(toIndentedString(v1BotVersion)).append("\n");
    sb.append("    v1BotLocale: ").append(toIndentedString(v1BotLocale)).append("\n");
    sb.append("    v2BotId: ").append(toIndentedString(v2BotId)).append("\n");
    sb.append("    v2BotRole: ").append(toIndentedString(v2BotRole)).append("\n");
    sb.append("    migrationStatus: ").append(toIndentedString(migrationStatus)).append("\n");
    sb.append("    migrationStrategy: ").append(toIndentedString(migrationStrategy)).append("\n");
    sb.append("    migrationTimestamp: ").append(toIndentedString(migrationTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("migrationId");
    openapiFields.add("v1BotName");
    openapiFields.add("v1BotVersion");
    openapiFields.add("v1BotLocale");
    openapiFields.add("v2BotId");
    openapiFields.add("v2BotRole");
    openapiFields.add("migrationStatus");
    openapiFields.add("migrationStrategy");
    openapiFields.add("migrationTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationSummary is not found in the empty JSON string", MigrationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `migrationId`
      if (jsonObj.get("migrationId") != null && !jsonObj.get("migrationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("migrationId"));
      }
      // validate the optional field `v1BotName`
      if (jsonObj.get("v1BotName") != null && !jsonObj.get("v1BotName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("v1BotName"));
      }
      // validate the optional field `v1BotVersion`
      if (jsonObj.get("v1BotVersion") != null && !jsonObj.get("v1BotVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("v1BotVersion"));
      }
      // validate the optional field `v1BotLocale`
      if (jsonObj.get("v1BotLocale") != null && !jsonObj.get("v1BotLocale").isJsonNull()) {
        Locale.validateJsonElement(jsonObj.get("v1BotLocale"));
      }
      // validate the optional field `v2BotId`
      if (jsonObj.get("v2BotId") != null && !jsonObj.get("v2BotId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("v2BotId"));
      }
      // validate the optional field `v2BotRole`
      if (jsonObj.get("v2BotRole") != null && !jsonObj.get("v2BotRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("v2BotRole"));
      }
      // validate the optional field `migrationStatus`
      if (jsonObj.get("migrationStatus") != null && !jsonObj.get("migrationStatus").isJsonNull()) {
        MigrationStatus.validateJsonElement(jsonObj.get("migrationStatus"));
      }
      // validate the optional field `migrationStrategy`
      if (jsonObj.get("migrationStrategy") != null && !jsonObj.get("migrationStrategy").isJsonNull()) {
        MigrationStrategy.validateJsonElement(jsonObj.get("migrationStrategy"));
      }
      // validate the optional field `migrationTimestamp`
      if (jsonObj.get("migrationTimestamp") != null && !jsonObj.get("migrationTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("migrationTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationSummary>() {
           @Override
           public void write(JsonWriter out, MigrationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrationSummary
   * @throws IOException if the JSON string is invalid with respect to MigrationSummary
   */
  public static MigrationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationSummary.class);
  }

  /**
   * Convert an instance of MigrationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

