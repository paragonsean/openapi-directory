/*
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObfuscationSetting;
import org.openapitools.client.model.SlotConstraint;
import org.openapitools.client.model.SlotDefaultValueSpec;
import org.openapitools.client.model.SlotValueElicitationPrompt;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies the version of a specific slot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:37.850486-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Slot {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SLOT_CONSTRAINT = "slotConstraint";
  @SerializedName(SERIALIZED_NAME_SLOT_CONSTRAINT)
  private SlotConstraint slotConstraint;

  public static final String SERIALIZED_NAME_SLOT_TYPE = "slotType";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE)
  private String slotType;

  public static final String SERIALIZED_NAME_SLOT_TYPE_VERSION = "slotTypeVersion";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_VERSION)
  private String slotTypeVersion;

  public static final String SERIALIZED_NAME_VALUE_ELICITATION_PROMPT = "valueElicitationPrompt";
  @SerializedName(SERIALIZED_NAME_VALUE_ELICITATION_PROMPT)
  private SlotValueElicitationPrompt valueElicitationPrompt;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_SAMPLE_UTTERANCES = "sampleUtterances";
  @SerializedName(SERIALIZED_NAME_SAMPLE_UTTERANCES)
  private List sampleUtterances;

  public static final String SERIALIZED_NAME_RESPONSE_CARD = "responseCard";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CARD)
  private String responseCard;

  public static final String SERIALIZED_NAME_OBFUSCATION_SETTING = "obfuscationSetting";
  @SerializedName(SERIALIZED_NAME_OBFUSCATION_SETTING)
  private ObfuscationSetting obfuscationSetting;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE_SPEC = "defaultValueSpec";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE_SPEC)
  private SlotDefaultValueSpec defaultValueSpec;

  public Slot() {
  }

  public Slot name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Slot description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Slot slotConstraint(SlotConstraint slotConstraint) {
    this.slotConstraint = slotConstraint;
    return this;
  }

  /**
   * Get slotConstraint
   * @return slotConstraint
   */
  @javax.annotation.Nonnull
  public SlotConstraint getSlotConstraint() {
    return slotConstraint;
  }

  public void setSlotConstraint(SlotConstraint slotConstraint) {
    this.slotConstraint = slotConstraint;
  }


  public Slot slotType(String slotType) {
    this.slotType = slotType;
    return this;
  }

  /**
   * Get slotType
   * @return slotType
   */
  @javax.annotation.Nullable
  public String getSlotType() {
    return slotType;
  }

  public void setSlotType(String slotType) {
    this.slotType = slotType;
  }


  public Slot slotTypeVersion(String slotTypeVersion) {
    this.slotTypeVersion = slotTypeVersion;
    return this;
  }

  /**
   * Get slotTypeVersion
   * @return slotTypeVersion
   */
  @javax.annotation.Nullable
  public String getSlotTypeVersion() {
    return slotTypeVersion;
  }

  public void setSlotTypeVersion(String slotTypeVersion) {
    this.slotTypeVersion = slotTypeVersion;
  }


  public Slot valueElicitationPrompt(SlotValueElicitationPrompt valueElicitationPrompt) {
    this.valueElicitationPrompt = valueElicitationPrompt;
    return this;
  }

  /**
   * Get valueElicitationPrompt
   * @return valueElicitationPrompt
   */
  @javax.annotation.Nullable
  public SlotValueElicitationPrompt getValueElicitationPrompt() {
    return valueElicitationPrompt;
  }

  public void setValueElicitationPrompt(SlotValueElicitationPrompt valueElicitationPrompt) {
    this.valueElicitationPrompt = valueElicitationPrompt;
  }


  public Slot priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public Slot sampleUtterances(List sampleUtterances) {
    this.sampleUtterances = sampleUtterances;
    return this;
  }

  /**
   * Get sampleUtterances
   * @return sampleUtterances
   */
  @javax.annotation.Nullable
  public List getSampleUtterances() {
    return sampleUtterances;
  }

  public void setSampleUtterances(List sampleUtterances) {
    this.sampleUtterances = sampleUtterances;
  }


  public Slot responseCard(String responseCard) {
    this.responseCard = responseCard;
    return this;
  }

  /**
   * Get responseCard
   * @return responseCard
   */
  @javax.annotation.Nullable
  public String getResponseCard() {
    return responseCard;
  }

  public void setResponseCard(String responseCard) {
    this.responseCard = responseCard;
  }


  public Slot obfuscationSetting(ObfuscationSetting obfuscationSetting) {
    this.obfuscationSetting = obfuscationSetting;
    return this;
  }

  /**
   * Get obfuscationSetting
   * @return obfuscationSetting
   */
  @javax.annotation.Nullable
  public ObfuscationSetting getObfuscationSetting() {
    return obfuscationSetting;
  }

  public void setObfuscationSetting(ObfuscationSetting obfuscationSetting) {
    this.obfuscationSetting = obfuscationSetting;
  }


  public Slot defaultValueSpec(SlotDefaultValueSpec defaultValueSpec) {
    this.defaultValueSpec = defaultValueSpec;
    return this;
  }

  /**
   * Get defaultValueSpec
   * @return defaultValueSpec
   */
  @javax.annotation.Nullable
  public SlotDefaultValueSpec getDefaultValueSpec() {
    return defaultValueSpec;
  }

  public void setDefaultValueSpec(SlotDefaultValueSpec defaultValueSpec) {
    this.defaultValueSpec = defaultValueSpec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Slot slot = (Slot) o;
    return Objects.equals(this.name, slot.name) &&
        Objects.equals(this.description, slot.description) &&
        Objects.equals(this.slotConstraint, slot.slotConstraint) &&
        Objects.equals(this.slotType, slot.slotType) &&
        Objects.equals(this.slotTypeVersion, slot.slotTypeVersion) &&
        Objects.equals(this.valueElicitationPrompt, slot.valueElicitationPrompt) &&
        Objects.equals(this.priority, slot.priority) &&
        Objects.equals(this.sampleUtterances, slot.sampleUtterances) &&
        Objects.equals(this.responseCard, slot.responseCard) &&
        Objects.equals(this.obfuscationSetting, slot.obfuscationSetting) &&
        Objects.equals(this.defaultValueSpec, slot.defaultValueSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, slotConstraint, slotType, slotTypeVersion, valueElicitationPrompt, priority, sampleUtterances, responseCard, obfuscationSetting, defaultValueSpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Slot {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    slotConstraint: ").append(toIndentedString(slotConstraint)).append("\n");
    sb.append("    slotType: ").append(toIndentedString(slotType)).append("\n");
    sb.append("    slotTypeVersion: ").append(toIndentedString(slotTypeVersion)).append("\n");
    sb.append("    valueElicitationPrompt: ").append(toIndentedString(valueElicitationPrompt)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    sampleUtterances: ").append(toIndentedString(sampleUtterances)).append("\n");
    sb.append("    responseCard: ").append(toIndentedString(responseCard)).append("\n");
    sb.append("    obfuscationSetting: ").append(toIndentedString(obfuscationSetting)).append("\n");
    sb.append("    defaultValueSpec: ").append(toIndentedString(defaultValueSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("slotConstraint");
    openapiFields.add("slotType");
    openapiFields.add("slotTypeVersion");
    openapiFields.add("valueElicitationPrompt");
    openapiFields.add("priority");
    openapiFields.add("sampleUtterances");
    openapiFields.add("responseCard");
    openapiFields.add("obfuscationSetting");
    openapiFields.add("defaultValueSpec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slotConstraint");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Slot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Slot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Slot is not found in the empty JSON string", Slot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Slot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Slot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Slot.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the required field `slotConstraint`
      SlotConstraint.validateJsonElement(jsonObj.get("slotConstraint"));
      // validate the optional field `slotType`
      if (jsonObj.get("slotType") != null && !jsonObj.get("slotType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotType"));
      }
      // validate the optional field `slotTypeVersion`
      if (jsonObj.get("slotTypeVersion") != null && !jsonObj.get("slotTypeVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotTypeVersion"));
      }
      // validate the optional field `valueElicitationPrompt`
      if (jsonObj.get("valueElicitationPrompt") != null && !jsonObj.get("valueElicitationPrompt").isJsonNull()) {
        SlotValueElicitationPrompt.validateJsonElement(jsonObj.get("valueElicitationPrompt"));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("priority"));
      }
      // validate the optional field `sampleUtterances`
      if (jsonObj.get("sampleUtterances") != null && !jsonObj.get("sampleUtterances").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("sampleUtterances"));
      }
      // validate the optional field `responseCard`
      if (jsonObj.get("responseCard") != null && !jsonObj.get("responseCard").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("responseCard"));
      }
      // validate the optional field `obfuscationSetting`
      if (jsonObj.get("obfuscationSetting") != null && !jsonObj.get("obfuscationSetting").isJsonNull()) {
        ObfuscationSetting.validateJsonElement(jsonObj.get("obfuscationSetting"));
      }
      // validate the optional field `defaultValueSpec`
      if (jsonObj.get("defaultValueSpec") != null && !jsonObj.get("defaultValueSpec").isJsonNull()) {
        SlotDefaultValueSpec.validateJsonElement(jsonObj.get("defaultValueSpec"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Slot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Slot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Slot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Slot.class));

       return (TypeAdapter<T>) new TypeAdapter<Slot>() {
           @Override
           public void write(JsonWriter out, Slot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Slot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Slot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Slot
   * @throws IOException if the JSON string is invalid with respect to Slot
   */
  public static Slot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Slot.class);
  }

  /**
   * Convert an instance of Slot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

