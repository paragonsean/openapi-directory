/*
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SlotValueSelectionStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutSlotTypeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:37.850486-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutSlotTypeResponse {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENUMERATION_VALUES = "enumerationValues";
  @SerializedName(SERIALIZED_NAME_ENUMERATION_VALUES)
  private List enumerationValues;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "lastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  private OffsetDateTime lastUpdatedDate;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private String checksum;

  public static final String SERIALIZED_NAME_VALUE_SELECTION_STRATEGY = "valueSelectionStrategy";
  @SerializedName(SERIALIZED_NAME_VALUE_SELECTION_STRATEGY)
  private SlotValueSelectionStrategy valueSelectionStrategy;

  public static final String SERIALIZED_NAME_CREATE_VERSION = "createVersion";
  @SerializedName(SERIALIZED_NAME_CREATE_VERSION)
  private Boolean createVersion;

  public static final String SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE = "parentSlotTypeSignature";
  @SerializedName(SERIALIZED_NAME_PARENT_SLOT_TYPE_SIGNATURE)
  private String parentSlotTypeSignature;

  public static final String SERIALIZED_NAME_SLOT_TYPE_CONFIGURATIONS = "slotTypeConfigurations";
  @SerializedName(SERIALIZED_NAME_SLOT_TYPE_CONFIGURATIONS)
  private List slotTypeConfigurations;

  public PutSlotTypeResponse() {
  }

  public PutSlotTypeResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PutSlotTypeResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PutSlotTypeResponse enumerationValues(List enumerationValues) {
    this.enumerationValues = enumerationValues;
    return this;
  }

  /**
   * Get enumerationValues
   * @return enumerationValues
   */
  @javax.annotation.Nullable
  public List getEnumerationValues() {
    return enumerationValues;
  }

  public void setEnumerationValues(List enumerationValues) {
    this.enumerationValues = enumerationValues;
  }


  public PutSlotTypeResponse lastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

  /**
   * Get lastUpdatedDate
   * @return lastUpdatedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDate() {
    return lastUpdatedDate;
  }

  public void setLastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
  }


  public PutSlotTypeResponse createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public PutSlotTypeResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public PutSlotTypeResponse checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * Get checksum
   * @return checksum
   */
  @javax.annotation.Nullable
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }


  public PutSlotTypeResponse valueSelectionStrategy(SlotValueSelectionStrategy valueSelectionStrategy) {
    this.valueSelectionStrategy = valueSelectionStrategy;
    return this;
  }

  /**
   * Get valueSelectionStrategy
   * @return valueSelectionStrategy
   */
  @javax.annotation.Nullable
  public SlotValueSelectionStrategy getValueSelectionStrategy() {
    return valueSelectionStrategy;
  }

  public void setValueSelectionStrategy(SlotValueSelectionStrategy valueSelectionStrategy) {
    this.valueSelectionStrategy = valueSelectionStrategy;
  }


  public PutSlotTypeResponse createVersion(Boolean createVersion) {
    this.createVersion = createVersion;
    return this;
  }

  /**
   * Get createVersion
   * @return createVersion
   */
  @javax.annotation.Nullable
  public Boolean getCreateVersion() {
    return createVersion;
  }

  public void setCreateVersion(Boolean createVersion) {
    this.createVersion = createVersion;
  }


  public PutSlotTypeResponse parentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
    return this;
  }

  /**
   * Get parentSlotTypeSignature
   * @return parentSlotTypeSignature
   */
  @javax.annotation.Nullable
  public String getParentSlotTypeSignature() {
    return parentSlotTypeSignature;
  }

  public void setParentSlotTypeSignature(String parentSlotTypeSignature) {
    this.parentSlotTypeSignature = parentSlotTypeSignature;
  }


  public PutSlotTypeResponse slotTypeConfigurations(List slotTypeConfigurations) {
    this.slotTypeConfigurations = slotTypeConfigurations;
    return this;
  }

  /**
   * Get slotTypeConfigurations
   * @return slotTypeConfigurations
   */
  @javax.annotation.Nullable
  public List getSlotTypeConfigurations() {
    return slotTypeConfigurations;
  }

  public void setSlotTypeConfigurations(List slotTypeConfigurations) {
    this.slotTypeConfigurations = slotTypeConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutSlotTypeResponse putSlotTypeResponse = (PutSlotTypeResponse) o;
    return Objects.equals(this.name, putSlotTypeResponse.name) &&
        Objects.equals(this.description, putSlotTypeResponse.description) &&
        Objects.equals(this.enumerationValues, putSlotTypeResponse.enumerationValues) &&
        Objects.equals(this.lastUpdatedDate, putSlotTypeResponse.lastUpdatedDate) &&
        Objects.equals(this.createdDate, putSlotTypeResponse.createdDate) &&
        Objects.equals(this.version, putSlotTypeResponse.version) &&
        Objects.equals(this.checksum, putSlotTypeResponse.checksum) &&
        Objects.equals(this.valueSelectionStrategy, putSlotTypeResponse.valueSelectionStrategy) &&
        Objects.equals(this.createVersion, putSlotTypeResponse.createVersion) &&
        Objects.equals(this.parentSlotTypeSignature, putSlotTypeResponse.parentSlotTypeSignature) &&
        Objects.equals(this.slotTypeConfigurations, putSlotTypeResponse.slotTypeConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, enumerationValues, lastUpdatedDate, createdDate, version, checksum, valueSelectionStrategy, createVersion, parentSlotTypeSignature, slotTypeConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutSlotTypeResponse {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enumerationValues: ").append(toIndentedString(enumerationValues)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    valueSelectionStrategy: ").append(toIndentedString(valueSelectionStrategy)).append("\n");
    sb.append("    createVersion: ").append(toIndentedString(createVersion)).append("\n");
    sb.append("    parentSlotTypeSignature: ").append(toIndentedString(parentSlotTypeSignature)).append("\n");
    sb.append("    slotTypeConfigurations: ").append(toIndentedString(slotTypeConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("enumerationValues");
    openapiFields.add("lastUpdatedDate");
    openapiFields.add("createdDate");
    openapiFields.add("version");
    openapiFields.add("checksum");
    openapiFields.add("valueSelectionStrategy");
    openapiFields.add("createVersion");
    openapiFields.add("parentSlotTypeSignature");
    openapiFields.add("slotTypeConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutSlotTypeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutSlotTypeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutSlotTypeResponse is not found in the empty JSON string", PutSlotTypeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutSlotTypeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutSlotTypeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `enumerationValues`
      if (jsonObj.get("enumerationValues") != null && !jsonObj.get("enumerationValues").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("enumerationValues"));
      }
      // validate the optional field `lastUpdatedDate`
      if (jsonObj.get("lastUpdatedDate") != null && !jsonObj.get("lastUpdatedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedDate"));
      }
      // validate the optional field `createdDate`
      if (jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdDate"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("version"));
      }
      // validate the optional field `checksum`
      if (jsonObj.get("checksum") != null && !jsonObj.get("checksum").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("checksum"));
      }
      // validate the optional field `valueSelectionStrategy`
      if (jsonObj.get("valueSelectionStrategy") != null && !jsonObj.get("valueSelectionStrategy").isJsonNull()) {
        SlotValueSelectionStrategy.validateJsonElement(jsonObj.get("valueSelectionStrategy"));
      }
      // validate the optional field `createVersion`
      if (jsonObj.get("createVersion") != null && !jsonObj.get("createVersion").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("createVersion"));
      }
      // validate the optional field `parentSlotTypeSignature`
      if (jsonObj.get("parentSlotTypeSignature") != null && !jsonObj.get("parentSlotTypeSignature").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("parentSlotTypeSignature"));
      }
      // validate the optional field `slotTypeConfigurations`
      if (jsonObj.get("slotTypeConfigurations") != null && !jsonObj.get("slotTypeConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("slotTypeConfigurations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutSlotTypeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutSlotTypeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutSlotTypeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutSlotTypeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PutSlotTypeResponse>() {
           @Override
           public void write(JsonWriter out, PutSlotTypeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutSlotTypeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutSlotTypeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutSlotTypeResponse
   * @throws IOException if the JSON string is invalid with respect to PutSlotTypeResponse
   */
  public static PutSlotTypeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutSlotTypeResponse.class);
  }

  /**
   * Convert an instance of PutSlotTypeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

