/*
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartImportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:37.850486-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartImportRequest {
  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  /**
   * &lt;p&gt;Specifies the type of resource to export. Each resource also exports any resources that it depends on. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A bot exports dependent intents.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An intent exports dependent slot types.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    BOT("BOT"),
    
    INTENT("INTENT"),
    
    SLOT_TYPE("SLOT_TYPE");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  /**
   * &lt;p&gt;Specifies the action that the &lt;code&gt;StartImport&lt;/code&gt; operation should take when there is an existing resource with the same name.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a resource in the import file and an existing resource. The name of the resource causing the conflict is in the &lt;code&gt;failureReason&lt;/code&gt; field of the response to the &lt;code&gt;GetImport&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with an existing resource. The $LASTEST version of the existing resource is overwritten with the data from the import file.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(MergeStrategyEnum.Adapter.class)
  public enum MergeStrategyEnum {
    OVERWRITE_LATEST("OVERWRITE_LATEST"),
    
    FAIL_ON_CONFLICT("FAIL_ON_CONFLICT");

    private String value;

    MergeStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeStrategyEnum fromValue(String value) {
      for (MergeStrategyEnum b : MergeStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MergeStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MERGE_STRATEGY = "mergeStrategy";
  @SerializedName(SERIALIZED_NAME_MERGE_STRATEGY)
  private MergeStrategyEnum mergeStrategy;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public StartImportRequest() {
  }

  public StartImportRequest payload(String payload) {
    this.payload = payload;
    return this;
  }

  /**
   * A zip archive in binary format. The archive should contain one file, a JSON file containing the resource to import. The resource should match the type specified in the &lt;code&gt;resourceType&lt;/code&gt; field.
   * @return payload
   */
  @javax.annotation.Nonnull
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }


  public StartImportRequest resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the type of resource to export. Each resource also exports any resources that it depends on. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A bot exports dependent intents.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An intent exports dependent slot types.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public StartImportRequest mergeStrategy(MergeStrategyEnum mergeStrategy) {
    this.mergeStrategy = mergeStrategy;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the action that the &lt;code&gt;StartImport&lt;/code&gt; operation should take when there is an existing resource with the same name.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a resource in the import file and an existing resource. The name of the resource causing the conflict is in the &lt;code&gt;failureReason&lt;/code&gt; field of the response to the &lt;code&gt;GetImport&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with an existing resource. The $LASTEST version of the existing resource is overwritten with the data from the import file.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return mergeStrategy
   */
  @javax.annotation.Nonnull
  public MergeStrategyEnum getMergeStrategy() {
    return mergeStrategy;
  }

  public void setMergeStrategy(MergeStrategyEnum mergeStrategy) {
    this.mergeStrategy = mergeStrategy;
  }


  public StartImportRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public StartImportRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags to add to the imported bot. You can only add tags when you import a bot, you can&#39;t add tags to an intent or slot type.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartImportRequest startImportRequest = (StartImportRequest) o;
    return Objects.equals(this.payload, startImportRequest.payload) &&
        Objects.equals(this.resourceType, startImportRequest.resourceType) &&
        Objects.equals(this.mergeStrategy, startImportRequest.mergeStrategy) &&
        Objects.equals(this.tags, startImportRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payload, resourceType, mergeStrategy, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartImportRequest {\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    mergeStrategy: ").append(toIndentedString(mergeStrategy)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payload");
    openapiFields.add("resourceType");
    openapiFields.add("mergeStrategy");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("payload");
    openapiRequiredFields.add("resourceType");
    openapiRequiredFields.add("mergeStrategy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartImportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartImportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartImportRequest is not found in the empty JSON string", StartImportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartImportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartImportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartImportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload").toString()));
      }
      if (!jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      // validate the required field `resourceType`
      ResourceTypeEnum.validateJsonElement(jsonObj.get("resourceType"));
      if (!jsonObj.get("mergeStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeStrategy").toString()));
      }
      // validate the required field `mergeStrategy`
      MergeStrategyEnum.validateJsonElement(jsonObj.get("mergeStrategy"));
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartImportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartImportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartImportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartImportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartImportRequest>() {
           @Override
           public void write(JsonWriter out, StartImportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartImportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartImportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartImportRequest
   * @throws IOException if the JSON string is invalid with respect to StartImportRequest
   */
  public static StartImportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartImportRequest.class);
  }

  /**
   * Convert an instance of StartImportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

