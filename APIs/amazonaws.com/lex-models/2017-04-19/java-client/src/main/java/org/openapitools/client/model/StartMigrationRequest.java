/*
 * Amazon Lex Model Building Service
 * <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications. </p>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartMigrationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:37.850486-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartMigrationRequest {
  public static final String SERIALIZED_NAME_V1_BOT_NAME = "v1BotName";
  @SerializedName(SERIALIZED_NAME_V1_BOT_NAME)
  private String v1BotName;

  public static final String SERIALIZED_NAME_V1_BOT_VERSION = "v1BotVersion";
  @SerializedName(SERIALIZED_NAME_V1_BOT_VERSION)
  private String v1BotVersion;

  public static final String SERIALIZED_NAME_V2_BOT_NAME = "v2BotName";
  @SerializedName(SERIALIZED_NAME_V2_BOT_NAME)
  private String v2BotName;

  public static final String SERIALIZED_NAME_V2_BOT_ROLE = "v2BotRole";
  @SerializedName(SERIALIZED_NAME_V2_BOT_ROLE)
  private String v2BotRole;

  /**
   * &lt;p&gt;The strategy used to conduct the migration.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE_NEW&lt;/code&gt; - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_EXISTING&lt;/code&gt; - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn&#39;t change any other locales in the Amazon Lex V2 bot. If the locale doesn&#39;t exist, a new locale is created in the Amazon Lex V2 bot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(MigrationStrategyEnum.Adapter.class)
  public enum MigrationStrategyEnum {
    CREATE_NEW("CREATE_NEW"),
    
    UPDATE_EXISTING("UPDATE_EXISTING");

    private String value;

    MigrationStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigrationStrategyEnum fromValue(String value) {
      for (MigrationStrategyEnum b : MigrationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigrationStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigrationStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigrationStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigrationStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MigrationStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIGRATION_STRATEGY = "migrationStrategy";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STRATEGY)
  private MigrationStrategyEnum migrationStrategy;

  public StartMigrationRequest() {
  }

  public StartMigrationRequest v1BotName(String v1BotName) {
    this.v1BotName = v1BotName;
    return this;
  }

  /**
   * The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.
   * @return v1BotName
   */
  @javax.annotation.Nonnull
  public String getV1BotName() {
    return v1BotName;
  }

  public void setV1BotName(String v1BotName) {
    this.v1BotName = v1BotName;
  }


  public StartMigrationRequest v1BotVersion(String v1BotVersion) {
    this.v1BotVersion = v1BotVersion;
    return this;
  }

  /**
   * The version of the bot to migrate to Amazon Lex V2. You can migrate the &lt;code&gt;$LATEST&lt;/code&gt; version as well as any numbered version.
   * @return v1BotVersion
   */
  @javax.annotation.Nonnull
  public String getV1BotVersion() {
    return v1BotVersion;
  }

  public void setV1BotVersion(String v1BotVersion) {
    this.v1BotVersion = v1BotVersion;
  }


  public StartMigrationRequest v2BotName(String v2BotName) {
    this.v2BotName = v2BotName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the Amazon Lex V2 bot doesn&#39;t exist, you must use the &lt;code&gt;CREATE_NEW&lt;/code&gt; migration strategy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the Amazon Lex V2 bot exists, you must use the &lt;code&gt;UPDATE_EXISTING&lt;/code&gt; migration strategy to change the contents of the Amazon Lex V2 bot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return v2BotName
   */
  @javax.annotation.Nonnull
  public String getV2BotName() {
    return v2BotName;
  }

  public void setV2BotName(String v2BotName) {
    this.v2BotName = v2BotName;
  }


  public StartMigrationRequest v2BotRole(String v2BotRole) {
    this.v2BotRole = v2BotRole;
    return this;
  }

  /**
   * The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.
   * @return v2BotRole
   */
  @javax.annotation.Nonnull
  public String getV2BotRole() {
    return v2BotRole;
  }

  public void setV2BotRole(String v2BotRole) {
    this.v2BotRole = v2BotRole;
  }


  public StartMigrationRequest migrationStrategy(MigrationStrategyEnum migrationStrategy) {
    this.migrationStrategy = migrationStrategy;
    return this;
  }

  /**
   * &lt;p&gt;The strategy used to conduct the migration.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE_NEW&lt;/code&gt; - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_EXISTING&lt;/code&gt; - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn&#39;t change any other locales in the Amazon Lex V2 bot. If the locale doesn&#39;t exist, a new locale is created in the Amazon Lex V2 bot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return migrationStrategy
   */
  @javax.annotation.Nonnull
  public MigrationStrategyEnum getMigrationStrategy() {
    return migrationStrategy;
  }

  public void setMigrationStrategy(MigrationStrategyEnum migrationStrategy) {
    this.migrationStrategy = migrationStrategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartMigrationRequest startMigrationRequest = (StartMigrationRequest) o;
    return Objects.equals(this.v1BotName, startMigrationRequest.v1BotName) &&
        Objects.equals(this.v1BotVersion, startMigrationRequest.v1BotVersion) &&
        Objects.equals(this.v2BotName, startMigrationRequest.v2BotName) &&
        Objects.equals(this.v2BotRole, startMigrationRequest.v2BotRole) &&
        Objects.equals(this.migrationStrategy, startMigrationRequest.migrationStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(v1BotName, v1BotVersion, v2BotName, v2BotRole, migrationStrategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartMigrationRequest {\n");
    sb.append("    v1BotName: ").append(toIndentedString(v1BotName)).append("\n");
    sb.append("    v1BotVersion: ").append(toIndentedString(v1BotVersion)).append("\n");
    sb.append("    v2BotName: ").append(toIndentedString(v2BotName)).append("\n");
    sb.append("    v2BotRole: ").append(toIndentedString(v2BotRole)).append("\n");
    sb.append("    migrationStrategy: ").append(toIndentedString(migrationStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("v1BotName");
    openapiFields.add("v1BotVersion");
    openapiFields.add("v2BotName");
    openapiFields.add("v2BotRole");
    openapiFields.add("migrationStrategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("v1BotName");
    openapiRequiredFields.add("v1BotVersion");
    openapiRequiredFields.add("v2BotName");
    openapiRequiredFields.add("v2BotRole");
    openapiRequiredFields.add("migrationStrategy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartMigrationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartMigrationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartMigrationRequest is not found in the empty JSON string", StartMigrationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartMigrationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartMigrationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartMigrationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("v1BotName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v1BotName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v1BotName").toString()));
      }
      if (!jsonObj.get("v1BotVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v1BotVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v1BotVersion").toString()));
      }
      if (!jsonObj.get("v2BotName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v2BotName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v2BotName").toString()));
      }
      if (!jsonObj.get("v2BotRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `v2BotRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("v2BotRole").toString()));
      }
      if (!jsonObj.get("migrationStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationStrategy").toString()));
      }
      // validate the required field `migrationStrategy`
      MigrationStrategyEnum.validateJsonElement(jsonObj.get("migrationStrategy"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartMigrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartMigrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartMigrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartMigrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartMigrationRequest>() {
           @Override
           public void write(JsonWriter out, StartMigrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartMigrationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartMigrationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartMigrationRequest
   * @throws IOException if the JSON string is invalid with respect to StartMigrationRequest
   */
  public static StartMigrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartMigrationRequest.class);
  }

  /**
   * Convert an instance of StartMigrationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

