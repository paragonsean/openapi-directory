openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex\
    \ is an AWS service for building conversational voice and text interfaces. Use\
    \ these actions to create, update, and delete conversational bots for new and\
    \ existing client applications. </p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Lex Model Building Service
  version: 2017-04-19
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: lex-models
  x-aws-signingName: lex
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lex-models-2017-04-19.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/lex/
servers:
- description: The Amazon Lex Model Building Service multi-region endpoint
  url: "http://models.lex.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Lex Model Building Service multi-region endpoint
  url: "https://models.lex.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Lex Model Building Service endpoint for China (Beijing)
    and China (Ningxia)
  url: "http://models.lex.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon Lex Model Building Service endpoint for China (Beijing)
    and China (Ningxia)
  url: "https://models.lex.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /bots/{name}/versions:
    post:
      description: "<p>Creates a new version of the bot based on the <code>$LATEST</code>\
        \ version. If the <code>$LATEST</code> version of this resource hasn't changed\
        \ since you created the last version, Amazon Lex doesn't create a new version.\
        \ It returns the last created version.</p> <note> <p>You can update only the\
        \ <code>$LATEST</code> version of the bot. You can't update the numbered versions\
        \ that you create with the <code>CreateBotVersion</code> operation.</p> </note>\
        \ <p> When you create the first version of a bot, Amazon Lex sets the version\
        \ to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>.\
        \ </p> <p> This operation requires permission for the <code>lex:CreateBotVersion</code>\
        \ action. </p>"
      operationId: CreateBotVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the bot that you want to create a new version of.
          The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBotVersion_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBotVersionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /intents/{name}/versions:
    post:
      description: "<p>Creates a new version of an intent based on the <code>$LATEST</code>\
        \ version of the intent. If the <code>$LATEST</code> version of this intent\
        \ hasn't changed since you last updated it, Amazon Lex doesn't create a new\
        \ version. It returns the last version you created.</p> <note> <p>You can\
        \ update only the <code>$LATEST</code> version of the intent. You can't update\
        \ the numbered versions that you create with the <code>CreateIntentVersion</code>\
        \ operation.</p> </note> <p> When you create a version of an intent, Amazon\
        \ Lex sets the version to 1. Subsequent versions increment by 1. For more\
        \ information, see <a>versioning-intro</a>. </p> <p>This operation requires\
        \ permissions to perform the <code>lex:CreateIntentVersion</code> action.\
        \ </p>"
      operationId: CreateIntentVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the intent that you want to create a new version
          of. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntentVersion_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntentVersionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /slottypes/{name}/versions:
    post:
      description: "<p>Creates a new version of a slot type based on the <code>$LATEST</code>\
        \ version of the specified slot type. If the <code>$LATEST</code> version\
        \ of this resource has not changed since the last version that you created,\
        \ Amazon Lex doesn't create a new version. It returns the last version that\
        \ you created. </p> <note> <p>You can update only the <code>$LATEST</code>\
        \ version of a slot type. You can't update the numbered versions that you\
        \ create with the <code>CreateSlotTypeVersion</code> operation.</p> </note>\
        \ <p>When you create a version of a slot type, Amazon Lex sets the version\
        \ to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>.\
        \ </p> <p>This operation requires permissions for the <code>lex:CreateSlotTypeVersion</code>\
        \ action.</p>"
      operationId: CreateSlotTypeVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the slot type that you want to create a new version
          for. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSlotTypeVersion_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSlotTypeVersionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{name}:
    delete:
      description: "<p>Deletes all versions of the bot, including the <code>$LATEST</code>\
        \ version. To delete a specific version of the bot, use the <a>DeleteBotVersion</a>\
        \ operation. The <code>DeleteBot</code> operation doesn't immediately remove\
        \ the bot schema. Instead, it is marked for deletion and removed later.</p>\
        \ <p>Amazon Lex stores utterances indefinitely for improving the ability of\
        \ your bot to respond to user inputs. These utterances are not removed when\
        \ the bot is deleted. To remove the utterances, use the <a>DeleteUtterances</a>\
        \ operation.</p> <p>If a bot has an alias, you can't delete it. Instead, the\
        \ <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code>\
        \ exception that includes a reference to the alias that refers to the bot.\
        \ To remove the reference to the bot, delete the alias. If you get the same\
        \ exception again, delete the referring alias until the <code>DeleteBot</code>\
        \ operation is successful.</p> <p>This operation requires permissions for\
        \ the <code>lex:DeleteBot</code> action.</p>"
      operationId: DeleteBot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the bot. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
      x-accepts:
      - application/json
  /bots/{botName}/aliases/{name}:
    delete:
      description: "<p>Deletes an alias for the specified bot. </p> <p>You can't delete\
        \ an alias that is used in the association between a bot and a messaging channel.\
        \ If an alias is used in a channel association, the <code>DeleteBot</code>\
        \ operation returns a <code>ResourceInUseException</code> exception that includes\
        \ a reference to the channel association that refers to the bot. You can remove\
        \ the reference to the alias by deleting the channel association. If you get\
        \ the same exception again, delete the referring association until the <code>DeleteBotAlias</code>\
        \ operation is successful.</p>"
      operationId: DeleteBotAlias
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the alias to delete. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: The name of the bot that the alias points to.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
      x-accepts:
      - application/json
    get:
      description: "<p>Returns information about an Amazon Lex bot alias. For more\
        \ information about aliases, see <a>versioning-aliases</a>.</p> <p>This operation\
        \ requires permissions for the <code>lex:GetBotAlias</code> action.</p>"
      operationId: GetBotAlias
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot alias. The name is case sensitive.
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: The name of the bot.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBotAliasResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    put:
      description: "<p>Creates an alias for the specified version of the bot or replaces\
        \ an alias for the specified bot. To change the version of the bot that the\
        \ alias points to, replace the alias. For more information about aliases,\
        \ see <a>versioning-aliases</a>.</p> <p>This operation requires permissions\
        \ for the <code>lex:PutBotAlias</code> action. </p>"
      operationId: PutBotAlias
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the alias. The name is <i>not</i> case sensitive.
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: The name of the bot.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutBotAlias_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutBotAliasResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{botName}/aliases/{aliasName}/channels/{name}:
    delete:
      description: <p>Deletes the association between an Amazon Lex bot and a messaging
        platform.</p> <p>This operation requires permission for the <code>lex:DeleteBotChannelAssociation</code>
        action.</p>
      operationId: DeleteBotChannelAssociation
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the association. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: The name of the Amazon Lex bot.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: An alias that points to the specific version of the Amazon Lex
          bot to which this association is being made.
        explode: false
        in: path
        name: aliasName
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    get:
      description: <p>Returns information about the association between an Amazon
        Lex bot and a messaging platform.</p> <p>This operation requires permissions
        for the <code>lex:GetBotChannelAssociation</code> action.</p>
      operationId: GetBotChannelAssociation
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the association between the bot and the channel.
          The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: The name of the Amazon Lex bot.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: An alias pointing to the specific version of the Amazon Lex bot
          to which this association is being made.
        explode: false
        in: path
        name: aliasName
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBotChannelAssociationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /bots/{name}/versions/{version}:
    delete:
      description: "<p>Deletes a specific version of a bot. To delete all versions\
        \ of a bot, use the <a>DeleteBot</a> operation. </p> <p>This operation requires\
        \ permissions for the <code>lex:DeleteBotVersion</code> action.</p>"
      operationId: DeleteBotVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot.
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: "The version of the bot to delete. You cannot delete the <code>$LATEST</code>\
          \ version of the bot. To delete the <code>$LATEST</code> version, use the\
          \ <a>DeleteBot</a> operation."
        explode: false
        in: path
        name: version
        required: true
        schema:
          maxLength: 64
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
      x-accepts:
      - application/json
  /intents/{name}:
    delete:
      description: "<p>Deletes all versions of the intent, including the <code>$LATEST</code>\
        \ version. To delete a specific version of the intent, use the <a>DeleteIntentVersion</a>\
        \ operation.</p> <p> You can delete a version of an intent only if it is not\
        \ referenced. To delete an intent that is referred to in one or more bots\
        \ (see <a>how-it-works</a>), you must remove those references first. </p>\
        \ <note> <p> If you get the <code>ResourceInUseException</code> exception,\
        \ it provides an example reference that shows where the intent is referenced.\
        \ To remove the reference to the intent, either update the bot or delete it.\
        \ If you get the same exception when you attempt to delete the intent again,\
        \ repeat until the intent has no references and the call to <code>DeleteIntent</code>\
        \ is successful. </p> </note> <p> This operation requires permission for the\
        \ <code>lex:DeleteIntent</code> action. </p>"
      operationId: DeleteIntent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the intent. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
      x-accepts:
      - application/json
  /intents/{name}/versions/{version}:
    delete:
      description: "<p>Deletes a specific version of an intent. To delete all versions\
        \ of a intent, use the <a>DeleteIntent</a> operation. </p> <p>This operation\
        \ requires permissions for the <code>lex:DeleteIntentVersion</code> action.</p>"
      operationId: DeleteIntentVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the intent.
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: "The version of the intent to delete. You cannot delete the <code>$LATEST</code>\
          \ version of the intent. To delete the <code>$LATEST</code> version, use\
          \ the <a>DeleteIntent</a> operation."
        explode: false
        in: path
        name: version
        required: true
        schema:
          maxLength: 64
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
      x-accepts:
      - application/json
    get:
      description: "<p> Returns information about an intent. In addition to the intent\
        \ name, you must specify the intent version. </p> <p> This operation requires\
        \ permissions to perform the <code>lex:GetIntent</code> action. </p>"
      operationId: GetIntent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the intent. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: The version of the intent.
        explode: false
        in: path
        name: version
        required: true
        schema:
          maxLength: 64
          minLength: 1
          pattern: "\\$LATEST|[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /slottypes/{name}:
    delete:
      description: "<p>Deletes all versions of the slot type, including the <code>$LATEST</code>\
        \ version. To delete a specific version of the slot type, use the <a>DeleteSlotTypeVersion</a>\
        \ operation.</p> <p> You can delete a version of a slot type only if it is\
        \ not referenced. To delete a slot type that is referred to in one or more\
        \ intents, you must remove those references first. </p> <note> <p> If you\
        \ get the <code>ResourceInUseException</code> exception, the exception provides\
        \ an example reference that shows the intent where the slot type is referenced.\
        \ To remove the reference to the slot type, either update the intent or delete\
        \ it. If you get the same exception when you attempt to delete the slot type\
        \ again, repeat until the slot type has no references and the <code>DeleteSlotType</code>\
        \ call is successful. </p> </note> <p>This operation requires permission for\
        \ the <code>lex:DeleteSlotType</code> action.</p>"
      operationId: DeleteSlotType
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the slot type. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
      x-accepts:
      - application/json
  /slottypes/{name}/version/{version}:
    delete:
      description: "<p>Deletes a specific version of a slot type. To delete all versions\
        \ of a slot type, use the <a>DeleteSlotType</a> operation. </p> <p>This operation\
        \ requires permissions for the <code>lex:DeleteSlotTypeVersion</code> action.</p>"
      operationId: DeleteSlotTypeVersion
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the slot type.
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: "The version of the slot type to delete. You cannot delete the\
          \ <code>$LATEST</code> version of the slot type. To delete the <code>$LATEST</code>\
          \ version, use the <a>DeleteSlotType</a> operation."
        explode: false
        in: path
        name: version
        required: true
        schema:
          maxLength: 64
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
      x-accepts:
      - application/json
  /bots/{botName}/utterances/{userId}:
    delete:
      description: "<p>Deletes stored utterances.</p> <p>Amazon Lex stores the utterances\
        \ that users send to your bot. Utterances are stored for 15 days for use with\
        \ the <a>GetUtterancesView</a> operation, and then stored indefinitely for\
        \ use in improving the ability of your bot to respond to user input.</p> <p>Use\
        \ the <code>DeleteUtterances</code> operation to manually delete stored utterances\
        \ for a specific user. When you use the <code>DeleteUtterances</code> operation,\
        \ utterances stored for improving your bot's ability to respond to user input\
        \ are deleted immediately. Utterances stored for use with the <code>GetUtterancesView</code>\
        \ operation are deleted after 15 days.</p> <p>This operation requires permissions\
        \ for the <code>lex:DeleteUtterances</code> action.</p>"
      operationId: DeleteUtterances
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot that stored the utterances.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: ' The unique identifier for the user that made the utterances.
          This is the user ID that was sent in the <a href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent</a>
          or <a href="http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a>
          operation request that contained the utterance.'
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 100
          minLength: 2
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /bots/{name}/versions/{versionoralias}:
    get:
      description: <p>Returns metadata information for a specific bot. You must provide
        the bot name and the bot version or alias. </p> <p> This operation requires
        permissions for the <code>lex:GetBot</code> action. </p>
      operationId: GetBot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the bot. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: The version or alias of the bot.
        explode: false
        in: path
        name: versionoralias
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBotResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /bots/{botName}/aliases/:
    get:
      description: <p>Returns a list of aliases for a specified Amazon Lex bot.</p>
        <p>This operation requires permissions for the <code>lex:GetBotAliases</code>
        action.</p>
      operationId: GetBotAliases
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: "A pagination token for fetching the next page of aliases. If\
          \ the response to this call is truncated, Amazon Lex returns a pagination\
          \ token in the response. To fetch the next page of aliases, specify the\
          \ pagination token in the next request. "
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: 'The maximum number of aliases to return in the response. The
          default is 50. . '
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: "Substring to match in bot alias names. An alias will be returned\
          \ if any part of its name matches the substring. For example, \"xyz\" matches\
          \ both \"xyzabc\" and \"abcxyz.\""
        explode: true
        in: query
        name: nameContains
        required: false
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBotAliasesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /bots/{botName}/aliases/{aliasName}/channels/:
    get:
      description: <p> Returns a list of all of the channels associated with the specified
        bot. </p> <p>The <code>GetBotChannelAssociations</code> operation requires
        permissions for the <code>lex:GetBotChannelAssociations</code> action.</p>
      operationId: GetBotChannelAssociations
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the Amazon Lex bot in the association.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: An alias pointing to the specific version of the Amazon Lex bot
          to which this association is being made.
        explode: false
        in: path
        name: aliasName
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^(-|^([A-Za-z]_?)+$)$"
          type: string
        style: simple
      - description: "A pagination token for fetching the next page of associations.\
          \ If the response to this call is truncated, Amazon Lex returns a pagination\
          \ token in the response. To fetch the next page of associations, specify\
          \ the pagination token in the next request. "
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: 'The maximum number of associations to return in the response.
          The default is 50. '
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: "Substring to match in channel association names. An association\
          \ will be returned if any part of its name matches the substring. For example,\
          \ \"xyz\" matches both \"xyzabc\" and \"abcxyz.\" To return all bot channel\
          \ associations, use a hyphen (\"-\") as the <code>nameContains</code> parameter."
        explode: true
        in: query
        name: nameContains
        required: false
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBotChannelAssociationsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /bots/{name}/versions/:
    get:
      description: "<p>Gets information about all of the versions of a bot.</p> <p>The\
        \ <code>GetBotVersions</code> operation returns a <code>BotMetadata</code>\
        \ object for each version of a bot. For example, if a bot has three numbered\
        \ versions, the <code>GetBotVersions</code> operation returns four <code>BotMetadata</code>\
        \ objects in the response, one for each numbered version and one for the <code>$LATEST</code>\
        \ version. </p> <p>The <code>GetBotVersions</code> operation always returns\
        \ at least one version, the <code>$LATEST</code> version.</p> <p>This operation\
        \ requires permissions for the <code>lex:GetBotVersions</code> action.</p>"
      operationId: GetBotVersions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot for which versions should be returned.
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: "A pagination token for fetching the next page of bot versions.\
          \ If the response to this call is truncated, Amazon Lex returns a pagination\
          \ token in the response. To fetch the next page of versions, specify the\
          \ pagination token in the next request. "
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of bot versions to return in the response.
          The default is 10.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBotVersionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /bots/:
    get:
      description: "<p>Returns bot information as follows: </p> <ul> <li> <p>If you\
        \ provide the <code>nameContains</code> field, the response includes information\
        \ for the <code>$LATEST</code> version of all bots whose name contains the\
        \ specified string.</p> </li> <li> <p>If you don't specify the <code>nameContains</code>\
        \ field, the operation returns information about the <code>$LATEST</code>\
        \ version of all of your bots.</p> </li> </ul> <p>This operation requires\
        \ permission for the <code>lex:GetBots</code> action.</p>"
      operationId: GetBots
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "A pagination token that fetches the next page of bots. If the\
          \ response to this call is truncated, Amazon Lex returns a pagination token\
          \ in the response. To fetch the next page of bots, specify the pagination\
          \ token in the next request. "
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of bots to return in the response that the
          request will return. The default is 10.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: "Substring to match in bot names. A bot will be returned if any\
          \ part of its name matches the substring. For example, \"xyz\" matches both\
          \ \"xyzabc\" and \"abcxyz.\""
        explode: true
        in: query
        name: nameContains
        required: false
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBotsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /builtins/intents/{signature}:
    get:
      description: <p>Returns information about a built-in intent.</p> <p>This operation
        requires permission for the <code>lex:GetBuiltinIntent</code> action.</p>
      operationId: GetBuiltinIntent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The unique identifier for a built-in intent. To find the signature\
          \ for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\"\
          >Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>."
        explode: false
        in: path
        name: signature
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBuiltinIntentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /builtins/intents/:
    get:
      description: <p>Gets a list of built-in intents that meet the specified criteria.</p>
        <p>This operation requires permission for the <code>lex:GetBuiltinIntents</code>
        action.</p>
      operationId: GetBuiltinIntents
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: A list of locales that the intent supports.
        explode: true
        in: query
        name: locale
        required: false
        schema:
          enum:
          - de-DE
          - en-AU
          - en-GB
          - en-IN
          - en-US
          - es-419
          - es-ES
          - es-US
          - fr-FR
          - fr-CA
          - it-IT
          - ja-JP
          - ko-KR
          type: string
        style: form
      - description: "Substring to match in built-in intent signatures. An intent\
          \ will be returned if any part of its signature matches the substring. For\
          \ example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\" To find the signature\
          \ for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\"\
          >Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>."
        explode: true
        in: query
        name: signatureContains
        required: false
        schema:
          type: string
        style: form
      - description: "A pagination token that fetches the next page of intents. If\
          \ this API call is truncated, Amazon Lex returns a pagination token in the\
          \ response. To fetch the next page of intents, use the pagination token\
          \ in the next request."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of intents to return in the response. The
          default is 10.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBuiltinIntentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /builtins/slottypes/:
    get:
      description: "<p>Gets a list of built-in slot types that meet the specified\
        \ criteria.</p> <p>For a list of built-in slot types, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\"\
        >Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p> <p>This operation\
        \ requires permission for the <code>lex:GetBuiltInSlotTypes</code> action.</p>"
      operationId: GetBuiltinSlotTypes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: A list of locales that the slot type supports.
        explode: true
        in: query
        name: locale
        required: false
        schema:
          enum:
          - de-DE
          - en-AU
          - en-GB
          - en-IN
          - en-US
          - es-419
          - es-ES
          - es-US
          - fr-FR
          - fr-CA
          - it-IT
          - ja-JP
          - ko-KR
          type: string
        style: form
      - description: "Substring to match in built-in slot type signatures. A slot\
          \ type will be returned if any part of its signature matches the substring.\
          \ For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\""
        explode: true
        in: query
        name: signatureContains
        required: false
        schema:
          type: string
        style: form
      - description: "A pagination token that fetches the next page of slot types.\
          \ If the response to this API call is truncated, Amazon Lex returns a pagination\
          \ token in the response. To fetch the next page of slot types, specify the\
          \ pagination token in the next request."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of slot types to return in the response. The
          default is 10.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBuiltinSlotTypesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /exports/#name&version&resourceType&exportType:
    get:
      description: 'Exports the contents of a Amazon Lex resource in a specified format. '
      operationId: GetExport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot to export.
        explode: true
        in: query
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "[a-zA-Z_]+"
          type: string
        style: form
      - description: The version of the bot to export.
        explode: true
        in: query
        name: version
        required: true
        schema:
          maxLength: 64
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: form
      - description: 'The type of resource to export. '
        explode: true
        in: query
        name: resourceType
        required: true
        schema:
          enum:
          - BOT
          - INTENT
          - SLOT_TYPE
          type: string
        style: form
      - description: The format of the exported data.
        explode: true
        in: query
        name: exportType
        required: true
        schema:
          enum:
          - ALEXA_SKILLS_KIT
          - LEX
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /imports/{importId}:
    get:
      description: Gets information about an import job started with the <code>StartImport</code>
        operation.
      operationId: GetImport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The identifier of the import job information to return.
        explode: false
        in: path
        name: importId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /intents/{name}/versions/:
    get:
      description: "<p>Gets information about all of the versions of an intent.</p>\
        \ <p>The <code>GetIntentVersions</code> operation returns an <code>IntentMetadata</code>\
        \ object for each version of an intent. For example, if an intent has three\
        \ numbered versions, the <code>GetIntentVersions</code> operation returns\
        \ four <code>IntentMetadata</code> objects in the response, one for each numbered\
        \ version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetIntentVersions</code>\
        \ operation always returns at least one version, the <code>$LATEST</code>\
        \ version.</p> <p>This operation requires permissions for the <code>lex:GetIntentVersions</code>\
        \ action.</p>"
      operationId: GetIntentVersions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the intent for which versions should be returned.
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: "A pagination token for fetching the next page of intent versions.\
          \ If the response to this call is truncated, Amazon Lex returns a pagination\
          \ token in the response. To fetch the next page of versions, specify the\
          \ pagination token in the next request. "
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of intent versions to return in the response.
          The default is 10.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntentVersionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /intents/:
    get:
      description: "<p>Returns intent information as follows: </p> <ul> <li> <p>If\
        \ you specify the <code>nameContains</code> field, returns the <code>$LATEST</code>\
        \ version of all intents that contain the specified string.</p> </li> <li>\
        \ <p> If you don't specify the <code>nameContains</code> field, returns information\
        \ about the <code>$LATEST</code> version of all intents. </p> </li> </ul>\
        \ <p> The operation requires permission for the <code>lex:GetIntents</code>\
        \ action. </p>"
      operationId: GetIntents
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "A pagination token that fetches the next page of intents. If\
          \ the response to this API call is truncated, Amazon Lex returns a pagination\
          \ token in the response. To fetch the next page of intents, specify the\
          \ pagination token in the next request. "
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of intents to return in the response. The
          default is 10.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: "Substring to match in intent names. An intent will be returned\
          \ if any part of its name matches the substring. For example, \"xyz\" matches\
          \ both \"xyzabc\" and \"abcxyz.\""
        explode: true
        in: query
        name: nameContains
        required: false
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /migrations/{migrationId}:
    get:
      description: Provides details about an ongoing or complete migration from an
        Amazon Lex V1 bot to an Amazon Lex V2 bot. Use this operation to view the
        migration alerts and warnings related to the migration.
      operationId: GetMigration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier of the migration to view. The <code>migrationID</code>
          is returned by the operation.
        explode: false
        in: path
        name: migrationId
        required: true
        schema:
          maxLength: 10
          minLength: 10
          pattern: "^[0-9a-zA-Z]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMigrationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
      x-accepts:
      - application/json
  /migrations:
    get:
      description: Gets a list of migrations between Amazon Lex V1 and Amazon Lex
        V2.
      operationId: GetMigrations
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The field to sort the list of migrations by. You can sort by
          the Amazon Lex V1 bot name or the date and time that the migration was started.
        explode: true
        in: query
        name: sortByAttribute
        required: false
        schema:
          enum:
          - V1_BOT_NAME
          - MIGRATION_DATE_TIME
          type: string
        style: form
      - description: The order so sort the list.
        explode: true
        in: query
        name: sortByOrder
        required: false
        schema:
          enum:
          - ASCENDING
          - DESCENDING
          type: string
        style: form
      - description: Filters the list to contain only bots whose name contains the
          specified string. The string is matched anywhere in bot name.
        explode: true
        in: query
        name: v1BotNameContains
        required: false
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: form
      - description: Filters the list to contain only migrations in the specified
          state.
        explode: true
        in: query
        name: migrationStatusEquals
        required: false
        schema:
          enum:
          - IN_PROGRESS
          - COMPLETED
          - FAILED
          type: string
        style: form
      - description: The maximum number of migrations to return in the response. The
          default is 10.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: "A pagination token that fetches the next page of migrations.\
          \ If the response to this operation is truncated, Amazon Lex returns a pagination\
          \ token in the response. To fetch the next page of migrations, specify the\
          \ pagination token in the request."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMigrationsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
    post:
      description: "<p>Starts migrating a bot from Amazon Lex V1 to Amazon Lex V2.\
        \ Migrate your bot when you want to take advantage of the new features of\
        \ Amazon Lex V2.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/migrate.html\"\
        >Migrating a bot</a> in the <i>Amazon Lex developer guide</i>.</p>"
      operationId: StartMigration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartMigration_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartMigrationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
      x-content-type: application/json
      x-accepts:
      - application/json
  /slottypes/{name}/versions/{version}:
    get:
      description: "<p>Returns information about a specific version of a slot type.\
        \ In addition to specifying the slot type name, you must specify the slot\
        \ type version.</p> <p>This operation requires permissions for the <code>lex:GetSlotType</code>\
        \ action.</p>"
      operationId: GetSlotType
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the slot type. The name is case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: 'The version of the slot type. '
        explode: false
        in: path
        name: version
        required: true
        schema:
          maxLength: 64
          minLength: 1
          pattern: "\\$LATEST|[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSlotTypeResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /slottypes/{name}/versions/:
    get:
      description: "<p>Gets information about all versions of a slot type.</p> <p>The\
        \ <code>GetSlotTypeVersions</code> operation returns a <code>SlotTypeMetadata</code>\
        \ object for each version of a slot type. For example, if a slot type has\
        \ three numbered versions, the <code>GetSlotTypeVersions</code> operation\
        \ returns four <code>SlotTypeMetadata</code> objects in the response, one\
        \ for each numbered version and one for the <code>$LATEST</code> version.\
        \ </p> <p>The <code>GetSlotTypeVersions</code> operation always returns at\
        \ least one version, the <code>$LATEST</code> version.</p> <p>This operation\
        \ requires permissions for the <code>lex:GetSlotTypeVersions</code> action.</p>"
      operationId: GetSlotTypeVersions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the slot type for which versions should be returned.
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: "A pagination token for fetching the next page of slot type versions.\
          \ If the response to this call is truncated, Amazon Lex returns a pagination\
          \ token in the response. To fetch the next page of versions, specify the\
          \ pagination token in the next request. "
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of slot type versions to return in the response.
          The default is 10.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSlotTypeVersionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /slottypes/:
    get:
      description: "<p>Returns slot type information as follows: </p> <ul> <li> <p>If\
        \ you specify the <code>nameContains</code> field, returns the <code>$LATEST</code>\
        \ version of all slot types that contain the specified string.</p> </li> <li>\
        \ <p> If you don't specify the <code>nameContains</code> field, returns information\
        \ about the <code>$LATEST</code> version of all slot types. </p> </li> </ul>\
        \ <p> The operation requires permission for the <code>lex:GetSlotTypes</code>\
        \ action. </p>"
      operationId: GetSlotTypes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "A pagination token that fetches the next page of slot types.\
          \ If the response to this API call is truncated, Amazon Lex returns a pagination\
          \ token in the response. To fetch next page of slot types, specify the pagination\
          \ token in the next request."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of slot types to return in the response. The
          default is 10.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: "Substring to match in slot type names. A slot type will be returned\
          \ if any part of its name matches the substring. For example, \"xyz\" matches\
          \ both \"xyzabc\" and \"abcxyz.\""
        explode: true
        in: query
        name: nameContains
        required: false
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSlotTypesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /bots/{botname}/utterances#view=aggregation&bot_versions&status_type:
    get:
      description: "<p>Use the <code>GetUtterancesView</code> operation to get information\
        \ about the utterances that your users have made to your bot. You can use\
        \ this list to tune the utterances that your bot responds to.</p> <p>For example,\
        \ say that you have created a bot to order flowers. After your users have\
        \ used your bot for a while, use the <code>GetUtterancesView</code> operation\
        \ to see the requests that they have made and whether they have been successful.\
        \ You might find that the utterance \"I want flowers\" is not being recognized.\
        \ You could add this utterance to the <code>OrderFlowers</code> intent so\
        \ that your bot recognizes that utterance.</p> <p>After you publish a new\
        \ version of a bot, you can get information about the old version and the\
        \ new so that you can compare the performance across the two versions. </p>\
        \ <p>Utterance statistics are generated once a day. Data is available for\
        \ the last 15 days. You can request information for up to 5 versions of your\
        \ bot in each request. Amazon Lex returns the most frequent utterances received\
        \ by the bot in the last 15 days. The response contains information about\
        \ a maximum of 100 utterances for each version.</p> <p>If you set <code>childDirected</code>\
        \ field to true when you created your bot, if you are using slot obfuscation\
        \ with one or more slots, or if you opted out of participating in improving\
        \ Amazon Lex, utterances are not available.</p> <p>This operation requires\
        \ permissions for the <code>lex:GetUtterancesView</code> action.</p>"
      operationId: GetUtterancesView
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot for which utterance information should be
          returned.
        explode: false
        in: path
        name: botname
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      - description: An array of bot versions for which utterance information should
          be returned. The limit is 5 versions per request.
        explode: true
        in: query
        name: bot_versions
        required: true
        schema:
          items:
            $ref: '#/components/schemas/Version'
          maxItems: 5
          minItems: 1
          type: array
        style: form
      - description: "To return utterances that were recognized and handled, use <code>Detected</code>.\
          \ To return utterances that were not recognized, use <code>Missed</code>."
        explode: true
        in: query
        name: status_type
        required: true
        schema:
          enum:
          - Detected
          - Missed
          type: string
        style: form
      - explode: true
        in: query
        name: view
        required: true
        schema:
          enum:
          - aggregation
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUtterancesViewResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-accepts:
      - application/json
  /tags/{resourceArn}:
    get:
      description: "Gets a list of tags associated with the specified resource. Only\
        \ bots, bot aliases, and bot channels can have tags associated with them."
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the resource to get a list
          of tags for.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-accepts:
      - application/json
    post:
      description: "Adds the specified tags to the specified resource. If a tag key\
        \ already exists, the existing value is replaced with the new value."
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The Amazon Resource Name (ARN) of the bot, bot alias, or bot\
          \ channel to tag."
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bots/{name}/versions/$LATEST:
    put:
      description: "<p>Creates an Amazon Lex conversational bot or replaces an existing\
        \ bot. When you create or update a bot you are only required to specify a\
        \ name, a locale, and whether the bot is directed toward children under age\
        \ 13. You can use this to add intents later, or to remove intents from an\
        \ existing bot. When you create a bot with the minimum information, the bot\
        \ is created or updated but Amazon Lex returns the <code/> response <code>FAILED</code>.\
        \ You can build the bot after you add one or more intents. For more information\
        \ about Amazon Lex bots, see <a>how-it-works</a>. </p> <p>If you specify the\
        \ name of an existing bot, the fields in the request replace the existing\
        \ values in the <code>$LATEST</code> version of the bot. Amazon Lex removes\
        \ any fields that you don't provide values for in the request, except for\
        \ the <code>idleTTLInSeconds</code> and <code>privacySettings</code> fields,\
        \ which are set to their default values. If you don't specify values for required\
        \ fields, Amazon Lex throws an exception.</p> <p>This operation requires permissions\
        \ for the <code>lex:PutBot</code> action. For more information, see <a>security-iam</a>.</p>"
      operationId: PutBot
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the bot. The name is <i>not</i> case sensitive. '
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutBot_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutBotResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /intents/{name}/versions/$LATEST:
    put:
      description: "<p>Creates an intent or replaces an existing intent.</p> <p>To\
        \ define the interaction between the user and your bot, you use one or more\
        \ intents. For a pizza ordering bot, for example, you would create an <code>OrderPizza</code>\
        \ intent. </p> <p>To create an intent or replace an existing intent, you must\
        \ provide the following:</p> <ul> <li> <p>Intent name. For example, <code>OrderPizza</code>.</p>\
        \ </li> <li> <p>Sample utterances. For example, \"Can I order a pizza, please.\"\
        \ and \"I want to order a pizza.\"</p> </li> <li> <p>Information to be gathered.\
        \ You specify slot types for the information that your bot will request from\
        \ the user. You can specify standard slot types, such as a date or a time,\
        \ or custom slot types such as the size and crust of a pizza.</p> </li> <li>\
        \ <p>How the intent will be fulfilled. You can provide a Lambda function or\
        \ configure the intent to return the intent information to the client application.\
        \ If you use a Lambda function, when all of the intent information is available,\
        \ Amazon Lex invokes your Lambda function. If you configure your intent to\
        \ return the intent information to the client application. </p> </li> </ul>\
        \ <p>You can specify other optional information in the request, such as:</p>\
        \ <ul> <li> <p>A confirmation prompt to ask the user to confirm an intent.\
        \ For example, \"Shall I order your pizza?\"</p> </li> <li> <p>A conclusion\
        \ statement to send to the user after the intent has been fulfilled. For example,\
        \ \"I placed your pizza order.\"</p> </li> <li> <p>A follow-up prompt that\
        \ asks the user for additional activity. For example, asking \"Do you want\
        \ to order a drink with your pizza?\"</p> </li> </ul> <p>If you specify an\
        \ existing intent name to update the intent, Amazon Lex replaces the values\
        \ in the <code>$LATEST</code> version of the intent with the values in the\
        \ request. Amazon Lex removes fields that you don't provide in the request.\
        \ If you don't specify the required fields, Amazon Lex throws an exception.\
        \ When you update the <code>$LATEST</code> version of an intent, the <code>status</code>\
        \ field of any bot that uses the <code>$LATEST</code> version of the intent\
        \ is set to <code>NOT_BUILT</code>.</p> <p>For more information, see <a>how-it-works</a>.</p>\
        \ <p>This operation requires permissions for the <code>lex:PutIntent</code>\
        \ action.</p>"
      operationId: PutIntent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The name of the intent. The name is <i>not</i> case sensitive.\
          \ </p> <p>The name can't match a built-in intent name, or a built-in intent\
          \ name with \"AMAZON.\" removed. For example, because there is a built-in\
          \ intent called <code>AMAZON.HelpIntent</code>, you can't create a custom\
          \ intent called <code>HelpIntent</code>.</p> <p>For a list of built-in intents,\
          \ see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\"\
          >Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</p>"
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIntent_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutIntentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /slottypes/{name}/versions/$LATEST:
    put:
      description: "<p>Creates a custom slot type or replaces an existing custom slot\
        \ type.</p> <p>To create a custom slot type, specify a name for the slot type\
        \ and a set of enumeration values, which are the values that a slot of this\
        \ type can assume. For more information, see <a>how-it-works</a>.</p> <p>If\
        \ you specify the name of an existing slot type, the fields in the request\
        \ replace the existing values in the <code>$LATEST</code> version of the slot\
        \ type. Amazon Lex removes the fields that you don't provide in the request.\
        \ If you don't specify required fields, Amazon Lex throws an exception. When\
        \ you update the <code>$LATEST</code> version of a slot type, if a bot uses\
        \ the <code>$LATEST</code> version of an intent that contains the slot type,\
        \ the bot's <code>status</code> field is set to <code>NOT_BUILT</code>.</p>\
        \ <p>This operation requires permissions for the <code>lex:PutSlotType</code>\
        \ action.</p>"
      operationId: PutSlotType
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The name of the slot type. The name is <i>not</i> case sensitive.\
          \ </p> <p>The name can't match a built-in slot type name, or a built-in\
          \ slot type name with \"AMAZON.\" removed. For example, because there is\
          \ a built-in slot type called <code>AMAZON.DATE</code>, you can't create\
          \ a custom slot type called <code>DATE</code>.</p> <p>For a list of built-in\
          \ slot types, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\"\
          >Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>"
        explode: false
        in: path
        name: name
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^([A-Za-z]_?)+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSlotType_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSlotTypeResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
          description: PreconditionFailedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /imports/:
    post:
      description: Starts a job to import a resource to Amazon Lex.
      operationId: StartImport
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartImport_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
      x-content-type: application/json
      x-accepts:
      - application/json
  /tags/{resourceArn}#tagKeys:
    delete:
      description: "Removes tags from a bot, bot alias or bot channel."
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the resource to remove the
          tags from.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      - description: "A list of tag keys to remove from the resource. If a tag key\
          \ does not exist on the resource, it is ignored."
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/TagKey'
          maxItems: 200
          minItems: 0
          type: array
        style: form
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    CreateBotVersionResponse:
      example:
        intents: ""
        enableModelImprovements: ""
        detectSentiment: ""
        description: ""
        idleSessionTTLInSeconds: ""
        locale: ""
        version: ""
        lastUpdatedDate: ""
        voiceId: ""
        createdDate: ""
        clarificationPrompt:
          maxAttempts: ""
          responseCard: ""
          messages: ""
        failureReason: ""
        name: ""
        checksum: ""
        childDirected: ""
        abortStatement:
          responseCard: ""
          messages: ""
        status: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot.
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          - description: "An array of <code>Intent</code> objects. For more information,\
              \ see <a>PutBot</a>."
        clarificationPrompt:
          $ref: '#/components/schemas/CreateBotVersionResponse_clarificationPrompt'
        abortStatement:
          $ref: '#/components/schemas/CreateBotVersionResponse_abortStatement'
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          - description: " When you send a request to create or update a bot, Amazon\
              \ Lex sets the <code>status</code> response element to <code>BUILDING</code>.\
              \ After Amazon Lex builds the bot, it sets <code>status</code> to <code>READY</code>.\
              \ If Amazon Lex can't build the bot, it sets <code>status</code> to\
              \ <code>FAILED</code>. Amazon Lex returns the reason for the failure\
              \ in the <code>failureReason</code> response element. "
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "If <code>status</code> is <code>FAILED</code>, Amazon Lex\
              \ provides the reason that it failed to build the bot."
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: 'The date when the <code>$LATEST</code> version of this bot
              was updated. '
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date when the bot version was created.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: "The maximum time in seconds that Amazon Lex retains the\
              \ data gathered in a conversation. For more information, see <a>PutBot</a>."
        voiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The Amazon Polly voice ID that Amazon Lex uses for voice
              interactions with the user.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum identifying the version of the bot that was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: 'The version of the bot. '
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          - description: ' Specifies the target locale for the bot. '
        childDirected:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "<p>For each Amazon Lex bot created with the Amazon Lex Model\
              \ Building Service, you must specify whether your use of Amazon Lex\
              \ is related to a website, program, or other application that is directed\
              \ or targeted, in whole or in part, to children under age 13 and subject\
              \ to the Children's Online Privacy Protection Act (COPPA) by specifying\
              \ <code>true</code> or <code>false</code> in the <code>childDirected</code>\
              \ field. By specifying <code>true</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is</b> related to\
              \ a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ By specifying <code>false</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is not</b> related\
              \ to a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ You may not specify a default value for the <code>childDirected</code>\
              \ field that does not accurately reflect whether your use of Amazon\
              \ Lex is related to a website, program, or other application that is\
              \ directed or targeted, in whole or in part, to children under age 13\
              \ and subject to COPPA.</p> <p>If your use of Amazon Lex relates to\
              \ a website, program, or other application that is directed in whole\
              \ or in part, to children under age 13, you must obtain any required\
              \ verifiable parental consent under COPPA. For information regarding\
              \ the use of Amazon Lex in connection with websites, programs, or other\
              \ applications that are directed or targeted, in whole or in part, to\
              \ children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\"\
              >Amazon Lex FAQ.</a> </p>"
        enableModelImprovements:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Indicates whether the bot uses accuracy improvements. <code>true</code>\
              \ indicates that the bot is using the improvements, otherwise, <code>false</code>."
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Indicates whether utterances entered by the user should be
              sent to Amazon Comprehend for sentiment analysis.
      type: object
    NotFoundException: {}
    ConflictException: {}
    LimitExceededException: {}
    InternalFailureException: {}
    BadRequestException: {}
    PreconditionFailedException: {}
    CreateIntentVersionResponse:
      example:
        sampleUtterances: ""
        parentIntentSignature: ""
        conclusionStatement:
          responseCard: ""
          messages: ""
        description: ""
        version: ""
        followUpPrompt:
          rejectionStatement:
            responseCard: ""
            messages: ""
          prompt:
            maxAttempts: ""
            responseCard: ""
            messages: ""
        fulfillmentActivity:
          type: ""
          codeHook:
            messageVersion: ""
            uri: ""
        slots: ""
        rejectionStatement:
          responseCard: ""
          messages: ""
        lastUpdatedDate: ""
        createdDate: ""
        inputContexts: ""
        outputContexts: ""
        confirmationPrompt:
          maxAttempts: ""
          responseCard: ""
          messages: ""
        name: ""
        checksum: ""
        kendraConfiguration:
          kendraIndex: ""
          role: ""
          queryFilterString: ""
        dialogCodeHook:
          messageVersion: ""
          uri: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotList'
          - description: An array of slot types that defines the information required
              to fulfill the intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/IntentUtteranceList'
          - description: 'An array of sample utterances configured for the intent. '
        confirmationPrompt:
          $ref: '#/components/schemas/CreateIntentVersionResponse_confirmationPrompt'
        rejectionStatement:
          $ref: '#/components/schemas/CreateIntentVersionResponse_rejectionStatement'
        followUpPrompt:
          $ref: '#/components/schemas/CreateIntentVersionResponse_followUpPrompt'
        conclusionStatement:
          $ref: '#/components/schemas/CreateIntentVersionResponse_conclusionStatement'
        dialogCodeHook:
          $ref: '#/components/schemas/CreateIntentVersionResponse_dialogCodeHook'
        fulfillmentActivity:
          $ref: '#/components/schemas/CreateIntentVersionResponse_fulfillmentActivity'
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          - description: A unique identifier for a built-in intent.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: 'The date that the intent was updated. '
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the intent was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version number assigned to the new version of the intent.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the intent version created.
        kendraConfiguration:
          $ref: '#/components/schemas/CreateIntentVersionResponse_kendraConfiguration'
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextList'
          - description: An array of <code>InputContext</code> objects that lists
              the contexts that must be active for Amazon Lex to choose the intent
              in a conversation with the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextList'
          - description: An array of <code>OutputContext</code> objects that lists
              the contexts that the intent activates when the intent is fulfilled.
      type: object
    CreateSlotTypeVersionResponse:
      example:
        valueSelectionStrategy: ""
        lastUpdatedDate: ""
        createdDate: ""
        slotTypeConfigurations: ""
        parentSlotTypeSignature: ""
        name: ""
        checksum: ""
        description: ""
        enumerationValues: ""
        version: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          - description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the slot type.
        enumerationValues:
          allOf:
          - $ref: '#/components/schemas/EnumerationValues'
          - description: A list of <code>EnumerationValue</code> objects that defines
              the values that the slot type can take.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the slot type was updated. When you create\
              \ a resource, the creation date and last update date are the same."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the slot type was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: 'The version assigned to the new slot type version. '
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the <code>$LATEST</code> version of the slot
              type.
        valueSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionStrategy'
          - description: "The strategy that Amazon Lex uses to determine the value\
              \ of the slot. For more information, see <a>PutSlotType</a>."
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          - description: The built-in slot type used a the parent of the slot type.
        slotTypeConfigurations:
          allOf:
          - $ref: '#/components/schemas/SlotTypeConfigurations'
          - description: Configuration information that extends the parent built-in
              slot type.
      type: object
    ResourceInUseException: {}
    GetBotResponse:
      example:
        version: $LATEST
        name: DocOrderPizzaBot
        abortStatement:
          messages:
          - content: I don't understand. Can you try again?
            contentType: PlainText
          - content: "I'm sorry, I don't understand."
            contentType: PlainText
        checksum: 20172ee3-fa06-49b2-bbc5-667c090303e9
        childDirected: true
        clarificationPrompt:
          maxAttempts: 1
          messages:
          - content: "I'm sorry, I didn't hear that. Can you repeate what you just\
              \ said?"
            contentType: PlainText
          - content: Can you say that again?
            contentType: PlainText
        createdDate: 1.494360160133E9
        description: Orders a pizza from a local pizzeria.
        idleSessionTTLInSeconds: 300
        intents:
        - intentName: DocOrderPizza
          intentVersion: $LATEST
        lastUpdatedDate: 1.494360160133E9
        locale: en-US
        status: NOT_BUILT
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot.
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          - description: "An array of <code>intent</code> objects. For more information,\
              \ see <a>PutBot</a>."
        enableModelImprovements:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Indicates whether the bot uses accuracy improvements. <code>true</code>\
              \ indicates that the bot is using the improvements, otherwise, <code>false</code>."
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          - description: "The score that determines where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code>,\
              \ <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative\
              \ intents in a <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\"\
              >PostContent</a> or <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\"\
              >PostText</a> response. <code>AMAZON.FallbackIntent</code> is inserted\
              \ if the confidence score for all intents is below this value. <code>AMAZON.KendraSearchIntent</code>\
              \ is only inserted if it is configured for the bot."
        clarificationPrompt:
          $ref: '#/components/schemas/GetBotResponse_clarificationPrompt'
        abortStatement:
          $ref: '#/components/schemas/GetBotResponse_abortStatement'
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          - description: "<p>The status of the bot. </p> <p>When the status is <code>BUILDING</code>\
              \ Amazon Lex is building the bot for testing and use.</p> <p>If the\
              \ status of the bot is <code>READY_BASIC_TESTING</code>, you can test\
              \ the bot using the exact utterances specified in the bot's intents.\
              \ When the bot is ready for full testing or to run, the status is <code>READY</code>.</p>\
              \ <p>If there was a problem with building the bot, the status is <code>FAILED</code>\
              \ and the <code>failureReason</code> field explains why the bot did\
              \ not build.</p> <p>If the bot was saved but not built, the status is\
              \ <code>NOT_BUILT</code>.</p>"
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "If <code>status</code> is <code>FAILED</code>, Amazon Lex\
              \ explains why it failed to build the bot."
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the bot was updated. When you create a resource,\
              \ the creation date and last updated date are the same. "
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the bot was created.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: "The maximum time in seconds that Amazon Lex retains the\
              \ data gathered in a conversation. For more information, see <a>PutBot</a>."
        voiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The Amazon Polly voice ID that Amazon Lex uses for voice\
              \ interaction with the user. For more information, see <a>PutBot</a>."
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the bot used to identify a specific revision
              of the bot's <code>$LATEST</code> version.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: "The version of the bot. For a new bot, the version is always\
              \ <code>$LATEST</code>."
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          - description: ' The target locale for the bot. '
        childDirected:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "<p>For each Amazon Lex bot created with the Amazon Lex Model\
              \ Building Service, you must specify whether your use of Amazon Lex\
              \ is related to a website, program, or other application that is directed\
              \ or targeted, in whole or in part, to children under age 13 and subject\
              \ to the Children's Online Privacy Protection Act (COPPA) by specifying\
              \ <code>true</code> or <code>false</code> in the <code>childDirected</code>\
              \ field. By specifying <code>true</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is</b> related to\
              \ a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ By specifying <code>false</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is not</b> related\
              \ to a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ You may not specify a default value for the <code>childDirected</code>\
              \ field that does not accurately reflect whether your use of Amazon\
              \ Lex is related to a website, program, or other application that is\
              \ directed or targeted, in whole or in part, to children under age 13\
              \ and subject to COPPA.</p> <p>If your use of Amazon Lex relates to\
              \ a website, program, or other application that is directed in whole\
              \ or in part, to children under age 13, you must obtain any required\
              \ verifiable parental consent under COPPA. For information regarding\
              \ the use of Amazon Lex in connection with websites, programs, or other\
              \ applications that are directed or targeted, in whole or in part, to\
              \ children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\"\
              >Amazon Lex FAQ.</a> </p>"
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Indicates whether user utterances should be sent to Amazon
              Comprehend for sentiment analysis.
      type: object
    GetBotAliasResponse:
      example:
        lastUpdatedDate: ""
        createdDate: ""
        botName: ""
        name: ""
        checksum: ""
        conversationLogs:
          iamRoleArn: ""
          logSettings: ""
        description: ""
        botVersion: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          - description: The name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the bot that the alias points to.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the bot that the alias points to.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the bot alias was updated. When you create\
              \ a resource, the creation date and the last updated date are the same."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the bot alias was created.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the bot alias.
        conversationLogs:
          $ref: '#/components/schemas/GetBotAliasResponse_conversationLogs'
      type: object
    GetBotAliasesResponse:
      example:
        nextToken: ""
        BotAliases: ""
      properties:
        BotAliases:
          allOf:
          - $ref: '#/components/schemas/BotAliasMetadataList'
          - description: "An array of <code>BotAliasMetadata</code> objects, each\
              \ describing a bot alias."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A pagination token for fetching next page of aliases. If\
              \ the response to this call is truncated, Amazon Lex returns a pagination\
              \ token in the response. To fetch the next page of aliases, specify\
              \ the pagination token in the next request. "
      type: object
    GetBotChannelAssociationResponse:
      example:
        createdDate: ""
        botConfiguration: ""
        botAlias: ""
        botName: ""
        failureReason: ""
        name: ""
        description: ""
        type: ""
        status: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotChannelName'
          - description: The name of the association between the bot and the channel.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the association between the bot and the
              channel.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          - description: An alias pointing to the specific version of the Amazon Lex
              bot to which this association is being made.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the Amazon Lex bot.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the association between the bot and the channel
              was created.
        type:
          allOf:
          - $ref: '#/components/schemas/ChannelType'
          - description: The type of the messaging platform.
        botConfiguration:
          allOf:
          - $ref: '#/components/schemas/ChannelConfigurationMap'
          - description: Provides information that the messaging platform needs to
              communicate with the Amazon Lex bot.
        status:
          allOf:
          - $ref: '#/components/schemas/ChannelStatus'
          - description: "<p>The status of the bot channel. </p> <ul> <li> <p> <code>CREATED</code>\
              \ - The channel has been created and is ready for use.</p> </li> <li>\
              \ <p> <code>IN_PROGRESS</code> - Channel creation is in progress.</p>\
              \ </li> <li> <p> <code>FAILED</code> - There was an error creating the\
              \ channel. For information about the reason for the failure, see the\
              \ <code>failureReason</code> field.</p> </li> </ul>"
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "If <code>status</code> is <code>FAILED</code>, Amazon Lex\
              \ provides the reason that it failed to create the association."
      type: object
    GetBotChannelAssociationsResponse:
      example:
        botChannelAssociations: ""
        nextToken: ""
      properties:
        botChannelAssociations:
          allOf:
          - $ref: '#/components/schemas/BotChannelAssociationList'
          - description: "An array of objects, one for each association, that provides\
              \ information about the Amazon Lex bot and its association with the\
              \ channel. "
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A pagination token that fetches the next page of associations.\
              \ If the response to this call is truncated, Amazon Lex returns a pagination\
              \ token in the response. To fetch the next page of associations, specify\
              \ the pagination token in the next request. "
      type: object
    GetBotVersionsResponse:
      example:
        bots: ""
        nextToken: ""
      properties:
        bots:
          allOf:
          - $ref: '#/components/schemas/BotMetadataList'
          - description: "An array of <code>BotMetadata</code> objects, one for each\
              \ numbered version of the bot plus one for the <code>$LATEST</code>\
              \ version."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A pagination token for fetching the next page of bot versions.\
              \ If the response to this call is truncated, Amazon Lex returns a pagination\
              \ token in the response. To fetch the next page of versions, specify\
              \ the pagination token in the next request. "
      type: object
    GetBotsResponse:
      example:
        bots:
        - version: $LATEST
          name: DocOrderPizzaBot
          createdDate: 1.494360160133E9
          description: Orders a pizza from a local pizzeria.
          lastUpdatedDate: 1.494360160133E9
          status: NOT_BUILT
      properties:
        bots:
          allOf:
          - $ref: '#/components/schemas/BotMetadataList'
          - description: "An array of <code>botMetadata</code> objects, with one entry\
              \ for each bot. "
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response is truncated, it includes a pagination token\
              \ that you can specify in your next request to fetch the next page of\
              \ bots. "
      type: object
    GetBuiltinIntentResponse:
      example:
        slots: ""
        supportedLocales: ""
        signature: ""
      properties:
        signature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          - description: The unique identifier for a built-in intent.
        supportedLocales:
          allOf:
          - $ref: '#/components/schemas/LocaleList'
          - description: A list of locales that the intent supports.
        slots:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSlotList'
          - description: "An array of <code>BuiltinIntentSlot</code> objects, one\
              \ entry for each slot type in the intent."
      type: object
    GetBuiltinIntentsResponse:
      example:
        intents: ""
        nextToken: ""
      properties:
        intents:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentMetadataList'
          - description: "An array of <code>builtinIntentMetadata</code> objects,\
              \ one for each intent in the response."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A pagination token that fetches the next page of intents.\
              \ If the response to this API call is truncated, Amazon Lex returns\
              \ a pagination token in the response. To fetch the next page of intents,\
              \ specify the pagination token in the next request."
      type: object
    GetBuiltinSlotTypesResponse:
      example:
        slotTypes: ""
        nextToken: ""
      properties:
        slotTypes:
          allOf:
          - $ref: '#/components/schemas/BuiltinSlotTypeMetadataList'
          - description: "An array of <code>BuiltInSlotTypeMetadata</code> objects,\
              \ one entry for each slot type returned."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response is truncated, the response includes a pagination\
              \ token that you can use in your next request to fetch the next page\
              \ of slot types."
      type: object
    GetExportResponse:
      example:
        exportStatus: ""
        exportType: ""
        failureReason: ""
        name: ""
        version: ""
        url: ""
        resourceType: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the bot being exported.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          - description: The version of the bot being exported.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          - description: The type of the exported resource.
        exportType:
          allOf:
          - $ref: '#/components/schemas/ExportType'
          - description: The format of the exported data.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          - description: <p>The status of the export. </p> <ul> <li> <p> <code>IN_PROGRESS</code>
              - The export is in progress.</p> </li> <li> <p> <code>READY</code> -
              The export is complete.</p> </li> <li> <p> <code>FAILED</code> - The
              export could not be completed.</p> </li> </ul>
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "If <code>status</code> is <code>FAILED</code>, Amazon Lex\
              \ provides the reason that it failed to export the resource."
        url:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: An S3 pre-signed URL that provides the location of the exported
              resource. The exported resource is a ZIP archive that contains the exported
              resource in JSON format. The structure of the archive may change. Your
              code should not rely on the archive structure.
      type: object
    GetImportResponse:
      example:
        importStatus: ""
        importId: ""
        createdDate: ""
        mergeStrategy: ""
        failureReason: ""
        name: ""
        resourceType: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name given to the import job.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          - description: The type of resource imported.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          - description: The action taken when there was a conflict between an existing
              resource and a resource in the import file.
        importId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier for the specific import job.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          - description: "The status of the import job. If the status is <code>FAILED</code>,\
              \ you can get the reason for the failure from the <code>failureReason</code>\
              \ field."
        failureReason:
          allOf:
          - $ref: '#/components/schemas/StringList'
          - description: A string that describes why an import job failed to complete.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp for the date and time that the import job was
              created.
      type: object
    GetIntentResponse:
      example:
        version: $LATEST
        name: DocOrderPizza
        checksum: ca9bc13d-afc8-4706-bbaf-091f7a5935d6
        conclusionStatement:
          messages:
          - content: "All right, I ordered  you a {Crust} crust {Type} pizza with\
              \ {Sauce} sauce."
            contentType: PlainText
          - content: "OK, your {Crust} crust {Type} pizza with {Sauce} sauce is on\
              \ the way."
            contentType: PlainText
          responseCard: foo
        confirmationPrompt:
          maxAttempts: 1
          messages:
          - content: "Should I order  your {Crust} crust {Type} pizza with {Sauce}\
              \ sauce?"
            contentType: PlainText
        createdDate: 1.494359783453E9
        description: Order a pizza from a local pizzeria.
        fulfillmentActivity:
          type: ReturnIntent
        lastUpdatedDate: 1.494359783453E9
        rejectionStatement:
          messages:
          - content: "Ok, I'll cancel your order."
            contentType: PlainText
          - content: I cancelled your order.
            contentType: PlainText
        sampleUtterances:
        - Order me a pizza.
        - "Order me a {Type} pizza."
        - "I want a {Crust} crust {Type} pizza"
        - "I want a {Crust} crust {Type} pizza with {Sauce} sauce."
        slots:
        - name: Type
          description: The type of pizza to order.
          priority: 1
          sampleUtterances:
          - "Get me a {Type} pizza."
          - "A {Type} pizza please."
          - "I'd like a {Type} pizza."
          slotConstraint: Required
          slotType: DocPizzaType
          slotTypeVersion: $LATEST
          valueElicitationPrompt:
            maxAttempts: 1
            messages:
            - content: What type of pizza would you like?
              contentType: PlainText
            - content: Vegie or cheese pizza?
              contentType: PlainText
            - content: I can get you a vegie or a cheese pizza.
              contentType: PlainText
        - name: Crust
          description: The type of pizza crust to order.
          priority: 2
          sampleUtterances:
          - "Make it a {Crust} crust."
          - "I'd like a {Crust} crust."
          slotConstraint: Required
          slotType: DocPizzaCrustType
          slotTypeVersion: $LATEST
          valueElicitationPrompt:
            maxAttempts: 1
            messages:
            - content: What type of crust would you like?
              contentType: PlainText
            - content: Thick or thin crust?
              contentType: PlainText
        - name: Sauce
          description: The type of sauce to use on the pizza.
          priority: 3
          sampleUtterances:
          - "Make it {Sauce} sauce."
          - "I'd like {Sauce} sauce."
          slotConstraint: Required
          slotType: DocPizzaSauceType
          slotTypeVersion: $LATEST
          valueElicitationPrompt:
            maxAttempts: 1
            messages:
            - content: White or red sauce?
              contentType: PlainText
            - content: Garlic or tomato sauce?
              contentType: PlainText
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotList'
          - description: An array of intent slots configured for the intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/IntentUtteranceList'
          - description: An array of sample utterances configured for the intent.
        confirmationPrompt:
          $ref: '#/components/schemas/GetIntentResponse_confirmationPrompt'
        rejectionStatement:
          $ref: '#/components/schemas/CreateIntentVersionResponse_rejectionStatement'
        followUpPrompt:
          $ref: '#/components/schemas/GetIntentResponse_followUpPrompt'
        conclusionStatement:
          $ref: '#/components/schemas/GetIntentResponse_conclusionStatement'
        dialogCodeHook:
          $ref: '#/components/schemas/GetIntentResponse_dialogCodeHook'
        fulfillmentActivity:
          $ref: '#/components/schemas/GetIntentResponse_fulfillmentActivity'
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          - description: A unique identifier for a built-in intent.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the intent was updated. When you create a\
              \ resource, the creation date and the last updated date are the same. "
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the intent was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the intent.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the intent.
        kendraConfiguration:
          $ref: '#/components/schemas/GetIntentResponse_kendraConfiguration'
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextList'
          - description: An array of <code>InputContext</code> objects that lists
              the contexts that must be active for Amazon Lex to choose the intent
              in a conversation with the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextList'
          - description: An array of <code>OutputContext</code> objects that lists
              the contexts that the intent activates when the intent is fulfilled.
      type: object
    GetIntentVersionsResponse:
      example:
        intents: ""
        nextToken: ""
      properties:
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentMetadataList'
          - description: "An array of <code>IntentMetadata</code> objects, one for\
              \ each numbered version of the intent plus one for the <code>$LATEST</code>\
              \ version."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A pagination token for fetching the next page of intent\
              \ versions. If the response to this call is truncated, Amazon Lex returns\
              \ a pagination token in the response. To fetch the next page of versions,\
              \ specify the pagination token in the next request. "
      type: object
    GetIntentsResponse:
      example:
        intents:
        - version: $LATEST
          name: DocOrderPizza
          createdDate: 1.494359783453E9
          description: Order a pizza from a local pizzeria.
          lastUpdatedDate: 1.494359783453E9
      properties:
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentMetadataList'
          - description: "An array of <code>Intent</code> objects. For more information,\
              \ see <a>PutBot</a>."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response is truncated, the response includes a pagination\
              \ token that you can specify in your next request to fetch the next\
              \ page of intents. "
      type: object
    GetMigrationResponse:
      example:
        alerts: ""
        migrationId: ""
        v2BotId: ""
        v1BotVersion: ""
        v2BotRole: ""
        v1BotName: ""
        migrationStatus: ""
        v1BotLocale: ""
        migrationStrategy: ""
        migrationTimestamp: ""
      properties:
        migrationId:
          allOf:
          - $ref: '#/components/schemas/MigrationId'
          - description: The unique identifier of the migration. This is the same
              as the identifier used when calling the <code>GetMigration</code> operation.
        v1BotName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the Amazon Lex V1 bot migrated to Amazon Lex
              V2.
        v1BotVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the Amazon Lex V1 bot migrated to Amazon Lex
              V2.
        v1BotLocale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          - description: The locale of the Amazon Lex V1 bot migrated to Amazon Lex
              V2.
        v2BotId:
          allOf:
          - $ref: '#/components/schemas/V2BotId'
          - description: The unique identifier of the Amazon Lex V2 bot that the Amazon
              Lex V1 is being migrated to.
        v2BotRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          - description: The IAM role that Amazon Lex uses to run the Amazon Lex V2
              bot.
        migrationStatus:
          allOf:
          - $ref: '#/components/schemas/MigrationStatus'
          - description: Indicates the status of the migration. When the status is
              <code>COMPLETE</code> the migration is finished and the bot is available
              in Amazon Lex V2. There may be alerts and warnings that need to be resolved
              to complete the migration.
        migrationStrategy:
          allOf:
          - $ref: '#/components/schemas/MigrationStrategy'
          - description: "<p>The strategy used to conduct the migration.</p> <ul>\
              \ <li> <p> <code>CREATE_NEW</code> - Creates a new Amazon Lex V2 bot\
              \ and migrates the Amazon Lex V1 bot to the new bot.</p> </li> <li>\
              \ <p> <code>UPDATE_EXISTING</code> - Overwrites the existing Amazon\
              \ Lex V2 bot metadata and the locale being migrated. It doesn't change\
              \ any other locales in the Amazon Lex V2 bot. If the locale doesn't\
              \ exist, a new locale is created in the Amazon Lex V2 bot.</p> </li>\
              \ </ul>"
        migrationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the migration started.
        alerts:
          allOf:
          - $ref: '#/components/schemas/MigrationAlerts'
          - description: "<p>A list of alerts and warnings that indicate issues with\
              \ the migration for the Amazon Lex V1 bot to Amazon Lex V2. You receive\
              \ a warning when an Amazon Lex V1 feature has a different implementation\
              \ if Amazon Lex V2.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/migrate.html\"\
              >Migrating a bot</a> in the <i>Amazon Lex V2 developer guide</i>.</p>"
      type: object
    GetMigrationsResponse:
      example:
        nextToken: ""
        migrationSummaries: ""
      properties:
        migrationSummaries:
          allOf:
          - $ref: '#/components/schemas/MigrationSummaryList'
          - description: "An array of summaries for migrations from Amazon Lex V1\
              \ to Amazon Lex V2. To see details of the migration, use the <code>migrationId</code>\
              \ from the summary in a call to the operation."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response is truncated, it includes a pagination token\
              \ that you can specify in your next request to fetch the next page of\
              \ migrations."
      type: object
    GetSlotTypeResponse:
      example:
        version: $LATEST
        name: DocPizzaCrustType
        checksum: 210b3d5a-90a3-4b22-ac7e-f50c2c71095f
        createdDate: 1.494359274403E9
        description: Available crust types
        enumerationValues:
        - value: thick
        - value: thin
        lastUpdatedDate: 1.494359274403E9
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          - description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the slot type.
        enumerationValues:
          allOf:
          - $ref: '#/components/schemas/EnumerationValues'
          - description: A list of <code>EnumerationValue</code> objects that defines
              the values that the slot type can take.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the slot type was updated. When you create\
              \ a resource, the creation date and last update date are the same."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the slot type was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the slot type.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the <code>$LATEST</code> version of the slot
              type.
        valueSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionStrategy'
          - description: "The strategy that Amazon Lex uses to determine the value\
              \ of the slot. For more information, see <a>PutSlotType</a>."
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          - description: The built-in slot type used as a parent for the slot type.
        slotTypeConfigurations:
          allOf:
          - $ref: '#/components/schemas/SlotTypeConfigurations'
          - description: Configuration information that extends the parent built-in
              slot type.
      type: object
    GetSlotTypeVersionsResponse:
      example:
        slotTypes: ""
        nextToken: ""
      properties:
        slotTypes:
          allOf:
          - $ref: '#/components/schemas/SlotTypeMetadataList'
          - description: "An array of <code>SlotTypeMetadata</code> objects, one for\
              \ each numbered version of the slot type plus one for the <code>$LATEST</code>\
              \ version."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "A pagination token for fetching the next page of slot type\
              \ versions. If the response to this call is truncated, Amazon Lex returns\
              \ a pagination token in the response. To fetch the next page of versions,\
              \ specify the pagination token in the next request. "
      type: object
    GetSlotTypesResponse:
      example:
        slotTypes:
        - version: $LATEST
          name: DocPizzaCrustType
          createdDate: 1.494359274403E9
          description: Available crust types
          lastUpdatedDate: 1.494359274403E9
        - version: $LATEST
          name: DocPizzaSauceType
          createdDate: 1.49435644223E9
          description: Available pizza sauces
          lastUpdatedDate: 1.49435644223E9
        - version: $LATEST
          name: DocPizzaType
          createdDate: 1.494359198656E9
          description: Available pizzas
          lastUpdatedDate: 1.494359198656E9
      properties:
        slotTypes:
          allOf:
          - $ref: '#/components/schemas/SlotTypeMetadataList'
          - description: "An array of objects, one for each slot type, that provides\
              \ information such as the name of the slot type, the version, and a\
              \ description."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the response is truncated, it includes a pagination token\
              \ that you can specify in your next request to fetch the next page of\
              \ slot types."
      type: object
    GetUtterancesViewResponse:
      example:
        utterances: ""
        botName: ""
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the bot for which utterance information was returned.
        utterances:
          allOf:
          - $ref: '#/components/schemas/ListsOfUtterances'
          - description: "An array of <a>UtteranceList</a> objects, each containing\
              \ a list of <a>UtteranceData</a> objects describing the utterances that\
              \ were processed by your bot. The response contains a maximum of 100\
              \ <code>UtteranceData</code> objects for each version. Amazon Lex returns\
              \ the most frequent utterances received by the bot in the last 15 days."
      type: object
    Version:
      maxLength: 64
      minLength: 1
      pattern: "\\$LATEST|[0-9]+"
      type: string
    ListTagsForResourceResponse:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: The tags associated with a resource.
      type: object
    PutBotResponse:
      example:
        version: $LATEST
        name: DocOrderPizzaBot
        abortStatement:
          messages:
          - content: I don't understand. Can you try again?
            contentType: PlainText
          - content: "I'm sorry, I don't understand."
            contentType: PlainText
        checksum: 20172ee3-fa06-49b2-bbc5-667c090303e9
        childDirected: true
        clarificationPrompt:
          maxAttempts: 1
          messages:
          - content: "I'm sorry, I didn't hear that. Can you repeate what you just\
              \ said?"
            contentType: PlainText
          - content: Can you say that again?
            contentType: PlainText
        createdDate: 1.494360160133E9
        description: Orders a pizza from a local pizzeria.
        idleSessionTTLInSeconds: 300
        intents:
        - intentName: DocOrderPizza
          intentVersion: $LATEST
        lastUpdatedDate: 1.494360160133E9
        locale: en-US
        status: NOT_BUILT
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot.
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          - description: "An array of <code>Intent</code> objects. For more information,\
              \ see <a>PutBot</a>."
        enableModelImprovements:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Indicates whether the bot uses accuracy improvements. <code>true</code>\
              \ indicates that the bot is using the improvements, otherwise, <code>false</code>."
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          - description: "The score that determines where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code>,\
              \ <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative\
              \ intents in a <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\"\
              >PostContent</a> or <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\"\
              >PostText</a> response. <code>AMAZON.FallbackIntent</code> is inserted\
              \ if the confidence score for all intents is below this value. <code>AMAZON.KendraSearchIntent</code>\
              \ is only inserted if it is configured for the bot."
        clarificationPrompt:
          $ref: '#/components/schemas/PutBotResponse_clarificationPrompt'
        abortStatement:
          $ref: '#/components/schemas/CreateBotVersionResponse_abortStatement'
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          - description: "<p> When you send a request to create a bot with <code>processBehavior</code>\
              \ set to <code>BUILD</code>, Amazon Lex sets the <code>status</code>\
              \ response element to <code>BUILDING</code>.</p> <p>In the <code>READY_BASIC_TESTING</code>\
              \ state you can test the bot with user inputs that exactly match the\
              \ utterances configured for the bot's intents and values in the slot\
              \ types.</p> <p>If Amazon Lex can't build the bot, Amazon Lex sets <code>status</code>\
              \ to <code>FAILED</code>. Amazon Lex returns the reason for the failure\
              \ in the <code>failureReason</code> response element. </p> <p>When you\
              \ set <code>processBehavior</code> to <code>SAVE</code>, Amazon Lex\
              \ sets the status code to <code>NOT BUILT</code>.</p> <p>When the bot\
              \ is in the <code>READY</code> state you can test and publish the bot.</p>"
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "If <code>status</code> is <code>FAILED</code>, Amazon Lex\
              \ provides the reason that it failed to build the bot."
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the bot was updated. When you create a resource,\
              \ the creation date and last updated date are the same."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the bot was created.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: "The maximum length of time that Amazon Lex retains the data\
              \ gathered in a conversation. For more information, see <a>PutBot</a>."
        voiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The Amazon Polly voice ID that Amazon Lex uses for voice\
              \ interaction with the user. For more information, see <a>PutBot</a>."
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the bot that you created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: "The version of the bot. For a new bot, the version is always\
              \ <code>$LATEST</code>."
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          - description: ' The target locale for the bot. '
        childDirected:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "<p>For each Amazon Lex bot created with the Amazon Lex Model\
              \ Building Service, you must specify whether your use of Amazon Lex\
              \ is related to a website, program, or other application that is directed\
              \ or targeted, in whole or in part, to children under age 13 and subject\
              \ to the Children's Online Privacy Protection Act (COPPA) by specifying\
              \ <code>true</code> or <code>false</code> in the <code>childDirected</code>\
              \ field. By specifying <code>true</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is</b> related to\
              \ a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ By specifying <code>false</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is not</b> related\
              \ to a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ You may not specify a default value for the <code>childDirected</code>\
              \ field that does not accurately reflect whether your use of Amazon\
              \ Lex is related to a website, program, or other application that is\
              \ directed or targeted, in whole or in part, to children under age 13\
              \ and subject to COPPA.</p> <p>If your use of Amazon Lex relates to\
              \ a website, program, or other application that is directed in whole\
              \ or in part, to children under age 13, you must obtain any required\
              \ verifiable parental consent under COPPA. For information regarding\
              \ the use of Amazon Lex in connection with websites, programs, or other\
              \ applications that are directed or targeted, in whole or in part, to\
              \ children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\"\
              >Amazon Lex FAQ.</a> </p>"
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: " <code>True</code> if a new version of the bot was created.\
              \ If the <code>createVersion</code> field was not specified in the request,\
              \ the <code>createVersion</code> field is set to false in the response."
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: " <code>true</code> if the bot is configured to send user\
              \ utterances to Amazon Comprehend for sentiment analysis. If the <code>detectSentiment</code>\
              \ field was not specified in the request, the <code>detectSentiment</code>\
              \ field is <code>false</code> in the response."
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: A list of tags associated with the bot.
      type: object
    Intent:
      description: Identifies the specific version of an intent.
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The name of the intent.
        intentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the intent.
      required:
      - intentName
      - intentVersion
      type: object
    MessageList:
      items:
        $ref: '#/components/schemas/Message'
      maxItems: 15
      minItems: 1
      type: array
    PromptMaxAttempts:
      maximum: 5
      minimum: 1
      type: integer
    ResponseCard:
      maxLength: 50000
      minLength: 1
      type: string
    Tag:
      description: "A list of key/value pairs that identify a bot, bot alias, or bot\
        \ channel. Tag keys and values can consist of Unicode letters, digits, white\
        \ space, and any of the following symbols: _ . : / = + - @. "
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          - description: The key for the tag. Keys are not case-sensitive and must
              be unique.
        value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          - description: The value associated with a key. The value may be an empty
              string but it can't be null.
      required:
      - key
      - value
      type: object
    PutBotAliasResponse:
      example:
        lastUpdatedDate: ""
        createdDate: ""
        botName: ""
        name: ""
        checksum: ""
        conversationLogs:
          iamRoleArn: ""
          logSettings: ""
        description: ""
        botVersion: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          - description: The name of the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the bot that the alias points to.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the bot that the alias points to.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the bot alias was updated. When you create\
              \ a resource, the creation date and the last updated date are the same."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the bot alias was created.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The checksum for the current version of the alias.
        conversationLogs:
          $ref: '#/components/schemas/GetBotAliasResponse_conversationLogs'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: A list of tags associated with a bot.
      type: object
    LogSettingsRequestList:
      items:
        $ref: '#/components/schemas/LogSettingsRequest'
      type: array
    IamRoleArn:
      maxLength: 2048
      minLength: 20
      pattern: "^arn:[\\w\\-]+:iam::[\\d]{12}:role/.+$"
      type: string
    PutIntentResponse:
      example:
        version: $LATEST
        name: DocOrderPizza
        checksum: ca9bc13d-afc8-4706-bbaf-091f7a5935d6
        conclusionStatement:
          messages:
          - content: "All right, I ordered  you a {Crust} crust {Type} pizza with\
              \ {Sauce} sauce."
            contentType: PlainText
          - content: "OK, your {Crust} crust {Type} pizza with {Sauce} sauce is on\
              \ the way."
            contentType: PlainText
          responseCard: foo
        confirmationPrompt:
          maxAttempts: 1
          messages:
          - content: "Should I order  your {Crust} crust {Type} pizza with {Sauce}\
              \ sauce?"
            contentType: PlainText
        createdDate: 1.494359783453E9
        description: Order a pizza from a local pizzeria.
        fulfillmentActivity:
          type: ReturnIntent
        lastUpdatedDate: 1.494359783453E9
        rejectionStatement:
          messages:
          - content: "Ok, I'll cancel your order."
            contentType: PlainText
          - content: I cancelled your order.
            contentType: PlainText
        sampleUtterances:
        - Order me a pizza.
        - "Order me a {Type} pizza."
        - "I want a {Crust} crust {Type} pizza"
        - "I want a {Crust} crust {Type} pizza with {Sauce} sauce."
        slots:
        - name: Sauce
          description: The type of sauce to use on the pizza.
          priority: 3
          sampleUtterances:
          - "Make it {Sauce} sauce."
          - "I'd like {Sauce} sauce."
          slotConstraint: Required
          slotType: DocPizzaSauceType
          slotTypeVersion: $LATEST
          valueElicitationPrompt:
            maxAttempts: 1
            messages:
            - content: White or red sauce?
              contentType: PlainText
            - content: Garlic or tomato sauce?
              contentType: PlainText
        - name: Type
          description: The type of pizza to order.
          priority: 1
          sampleUtterances:
          - "Get me a {Type} pizza."
          - "A {Type} pizza please."
          - "I'd like a {Type} pizza."
          slotConstraint: Required
          slotType: DocPizzaType
          slotTypeVersion: $LATEST
          valueElicitationPrompt:
            maxAttempts: 1
            messages:
            - content: What type of pizza would you like?
              contentType: PlainText
            - content: Vegie or cheese pizza?
              contentType: PlainText
            - content: I can get you a vegie or a cheese pizza.
              contentType: PlainText
        - name: Crust
          description: The type of pizza crust to order.
          priority: 2
          sampleUtterances:
          - "Make it a {Crust} crust."
          - "I'd like a {Crust} crust."
          slotConstraint: Required
          slotType: DocPizzaCrustType
          slotTypeVersion: $LATEST
          valueElicitationPrompt:
            maxAttempts: 1
            messages:
            - content: What type of crust would you like?
              contentType: PlainText
            - content: Thick or thin crust?
              contentType: PlainText
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotList'
          - description: An array of intent slots that are configured for the intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/IntentUtteranceList'
          - description: ' An array of sample utterances that are configured for the
              intent. '
        confirmationPrompt:
          $ref: '#/components/schemas/PutIntentResponse_confirmationPrompt'
        rejectionStatement:
          $ref: '#/components/schemas/PutIntentResponse_rejectionStatement'
        followUpPrompt:
          $ref: '#/components/schemas/PutIntentResponse_followUpPrompt'
        conclusionStatement:
          $ref: '#/components/schemas/PutIntentResponse_conclusionStatement'
        dialogCodeHook:
          $ref: '#/components/schemas/PutIntentResponse_dialogCodeHook'
        fulfillmentActivity:
          $ref: '#/components/schemas/PutIntentResponse_fulfillmentActivity'
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          - description: A unique identifier for the built-in intent that this intent
              is based on.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the intent was updated. When you create a\
              \ resource, the creation date and last update dates are the same."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the intent was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: "The version of the intent. For a new intent, the version\
              \ is always <code>$LATEST</code>."
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the <code>$LATEST</code>version of the intent
              created or updated.
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: " <code>True</code> if a new version of the intent was created.\
              \ If the <code>createVersion</code> field was not specified in the request,\
              \ the <code>createVersion</code> field is set to false in the response."
        kendraConfiguration:
          $ref: '#/components/schemas/PutIntentResponse_kendraConfiguration'
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextList'
          - description: An array of <code>InputContext</code> objects that lists
              the contexts that must be active for Amazon Lex to choose the intent
              in a conversation with the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextList'
          - description: An array of <code>OutputContext</code> objects that lists
              the contexts that the intent activates when the intent is fulfilled.
      type: object
    Slot:
      description: Identifies the version of a specific slot.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotName'
          - description: The name of the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the slot.
        slotConstraint:
          allOf:
          - $ref: '#/components/schemas/SlotConstraint'
          - description: 'Specifies whether the slot is required or optional. '
        slotType:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          - description: "The type of the slot, either a custom slot type that you\
              \ defined or one of the built-in slot types."
        slotTypeVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the slot type.
        valueElicitationPrompt:
          $ref: '#/components/schemas/Slot_valueElicitationPrompt'
        priority:
          allOf:
          - $ref: '#/components/schemas/Priority'
          - description: "<p> Directs Amazon Lex the order in which to elicit this\
              \ slot value from the user. For example, if the intent has two slots\
              \ with priorities 1 and 2, AWS Amazon Lex first elicits a value for\
              \ the slot with priority 1.</p> <p>If multiple slots share the same\
              \ priority, the order in which Amazon Lex elicits values is arbitrary.</p>"
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SlotUtteranceList'
          - description: " If you know a specific pattern with which users might respond\
              \ to an Amazon Lex request for a slot value, you can provide those utterances\
              \ to improve accuracy. This is optional. In most cases, Amazon Lex is\
              \ capable of understanding user utterances. "
        responseCard:
          allOf:
          - $ref: '#/components/schemas/ResponseCard'
          - description: " A set of possible responses for the slot type used by text-based\
              \ clients. A user chooses an option from the response card, instead\
              \ of using text to reply. "
        obfuscationSetting:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSetting'
          - description: "Determines whether a slot is obfuscated in conversation\
              \ logs and stored utterances. When you obfuscate a slot, the value is\
              \ replaced by the slot name in curly braces ({}). For example, if the\
              \ slot name is \"full_name\", obfuscated values are replaced with \"\
              {full_name}\". For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/how-obfuscate.html\"\
              > Slot Obfuscation </a>. "
        defaultValueSpec:
          $ref: '#/components/schemas/Slot_defaultValueSpec'
      required:
      - name
      - slotConstraint
      type: object
    Utterance:
      maxLength: 200
      minLength: 1
      type: string
    Prompt:
      description: "Obtains information from the user. To define a prompt, provide\
        \ one or more messages and specify the number of attempts to get information\
        \ from the user. If you provide more than one message, Amazon Lex chooses\
        \ one of the messages to use to prompt the user. For more information, see\
        \ <a>how-it-works</a>."
      properties:
        messages:
          allOf:
          - $ref: '#/components/schemas/MessageList'
          - description: "An array of objects, each of which provides a message string\
              \ and its type. You can specify the message string in plain text or\
              \ in Speech Synthesis Markup Language (SSML)."
        maxAttempts:
          allOf:
          - $ref: '#/components/schemas/PromptMaxAttempts'
          - description: The number of times to prompt the user for information.
        responseCard:
          allOf:
          - $ref: '#/components/schemas/ResponseCard'
          - description: "A response card. Amazon Lex uses this prompt at runtime,\
              \ in the <code>PostText</code> API response. It substitutes session\
              \ attributes and slot values for placeholders in the response card.\
              \ For more information, see <a>ex-resp-card</a>. "
      required:
      - maxAttempts
      - messages
      type: object
    Statement:
      description: "A collection of messages that convey information to the user.\
        \ At runtime, Amazon Lex selects the message to convey. "
      properties:
        messages:
          allOf:
          - $ref: '#/components/schemas/MessageList'
          - description: A collection of message objects.
        responseCard:
          allOf:
          - $ref: '#/components/schemas/ResponseCard'
          - description: " At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\"\
              >PostText</a> API, Amazon Lex includes the response card in the response.\
              \ It substitutes all of the session attributes and slot values for placeholders\
              \ in the response card. "
      required:
      - messages
      type: object
    LambdaARN:
      maxLength: 2048
      minLength: 20
      pattern: "arn:aws[a-zA-Z-]*:lambda:[a-z]+-[a-z]+(-[a-z]+)*-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(\\\
        /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?"
      type: string
    MessageVersion:
      maxLength: 5
      minLength: 1
      type: string
    FulfillmentActivityType:
      enum:
      - ReturnIntent
      - CodeHook
      type: string
    CodeHook:
      description: Specifies a Lambda function that verifies requests to a bot or
        fulfills the user's request to a bot..
      properties:
        uri:
          allOf:
          - $ref: '#/components/schemas/LambdaARN'
          - description: The Amazon Resource Name (ARN) of the Lambda function.
        messageVersion:
          allOf:
          - $ref: '#/components/schemas/MessageVersion'
          - description: "The version of the request-response that you want Amazon\
              \ Lex to use to invoke your Lambda function. For more information, see\
              \ <a>using-lambda</a>."
      required:
      - messageVersion
      - uri
      type: object
    KendraIndexArn:
      maxLength: 2048
      minLength: 20
      pattern: "arn:aws:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index\\/[a-zA-Z0-9][a-zA-Z0-9_-]*"
      type: string
    QueryFilterString:
      minLength: 0
      type: string
    roleArn:
      maxLength: 2048
      minLength: 20
      pattern: "arn:aws:iam::[0-9]{12}:role/.*"
      type: string
    InputContext:
      description: The name of a context that must be active for an intent to be selected
        by Amazon Lex.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/InputContextName'
          - description: The name of the context.
      required:
      - name
      type: object
    OutputContext:
      description: The specification of an output context that is set when an intent
        is fulfilled.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/OutputContextName'
          - description: The name of the context.
        timeToLiveInSeconds:
          allOf:
          - $ref: '#/components/schemas/ContextTimeToLiveInSeconds'
          - description: "The number of seconds that the context should be active\
              \ after it is first sent in a <code>PostContent</code> or <code>PostText</code>\
              \ response. You can set the value between 5 and 86,400 seconds (24 hours)."
        turnsToLive:
          allOf:
          - $ref: '#/components/schemas/ContextTurnsToLive'
          - description: The number of conversation turns that the context should
              be active. A conversation turn is one <code>PostContent</code> or <code>PostText</code>
              request and the corresponding response from Amazon Lex.
      required:
      - name
      - timeToLiveInSeconds
      - turnsToLive
      type: object
    PutSlotTypeResponse:
      example:
        version: $LATEST
        name: DocPizzaSauceType
        checksum: cfd00ed1-775d-4357-947c-aca7e73b44ba
        createdDate: 1.49435644223E9
        description: Available pizza sauces
        enumerationValues:
        - value: red
        - value: white
        lastUpdatedDate: 1.49435644223E9
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          - description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the slot type.
        enumerationValues:
          allOf:
          - $ref: '#/components/schemas/EnumerationValues'
          - description: A list of <code>EnumerationValue</code> objects that defines
              the values that the slot type can take.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the slot type was updated. When you create\
              \ a slot type, the creation date and last update date are the same."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the slot type was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: "The version of the slot type. For a new slot type, the version\
              \ is always <code>$LATEST</code>. "
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the <code>$LATEST</code> version of the slot
              type.
        valueSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionStrategy'
          - description: "The slot resolution strategy that Amazon Lex uses to determine\
              \ the value of the slot. For more information, see <a>PutSlotType</a>."
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: " <code>True</code> if a new version of the slot type was\
              \ created. If the <code>createVersion</code> field was not specified\
              \ in the request, the <code>createVersion</code> field is set to false\
              \ in the response."
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          - description: The built-in slot type used as the parent of the slot type.
        slotTypeConfigurations:
          allOf:
          - $ref: '#/components/schemas/SlotTypeConfigurations'
          - description: Configuration information that extends the parent built-in
              slot type.
      type: object
    EnumerationValue:
      description: "<p>Each slot type can have a set of values. Each enumeration value\
        \ represents a value the slot type can take. </p> <p>For example, a pizza\
        \ ordering bot could have a slot type that specifies the type of crust that\
        \ the pizza should have. The slot type could include the values </p> <ul>\
        \ <li> <p>thick</p> </li> <li> <p>thin</p> </li> <li> <p>stuffed</p> </li>\
        \ </ul>"
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/Value'
          - description: The value of the slot type.
        synonyms:
          allOf:
          - $ref: '#/components/schemas/SynonymList'
          - description: Additional values related to the slot type value.
      required:
      - value
      type: object
    SlotTypeConfiguration:
      description: Provides configuration information for a slot type.
      properties:
        regexConfiguration:
          $ref: '#/components/schemas/SlotTypeConfiguration_regexConfiguration'
      type: object
    StartImportResponse:
      example:
        importStatus: ""
        importId: ""
        createdDate: ""
        mergeStrategy: ""
        name: ""
        resourceType: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name given to the import job.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          - description: The type of resource to import.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          - description: The action to take when there is a merge conflict.
        importId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The identifier for the specific import job.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          - description: "The status of the import job. If the status is <code>FAILED</code>,\
              \ you can get the reason for the failure using the <code>GetImport</code>\
              \ operation."
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: A list of tags added to the imported bot.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: A timestamp for the date and time that the import job was
              requested.
      type: object
    StartMigrationResponse:
      example:
        v2BotId: ""
        migrationId: ""
        v1BotVersion: ""
        v2BotRole: ""
        v1BotName: ""
        v1BotLocale: ""
        migrationStrategy: ""
        migrationTimestamp: ""
      properties:
        v1BotName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the Amazon Lex V1 bot that you are migrating
              to Amazon Lex V2.
        v1BotVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: 'The version of the bot to migrate to Amazon Lex V2. '
        v1BotLocale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          - description: 'The locale used for the Amazon Lex V1 bot. '
        v2BotId:
          allOf:
          - $ref: '#/components/schemas/V2BotId'
          - description: 'The unique identifier for the Amazon Lex V2 bot. '
        v2BotRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          - description: The IAM role that Amazon Lex uses to run the Amazon Lex V2
              bot.
        migrationId:
          allOf:
          - $ref: '#/components/schemas/MigrationId'
          - description: The unique identifier that Amazon Lex assigned to the migration.
        migrationStrategy:
          allOf:
          - $ref: '#/components/schemas/MigrationStrategy'
          - description: The strategy used to conduct the migration.
        migrationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the migration started.
      type: object
    AccessDeniedException: {}
    TagResourceResponse:
      properties: {}
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      type: string
    AliasName:
      maxLength: 100
      minLength: 1
      pattern: "^([A-Za-z]_?)+$"
      type: string
    AliasNameOrListAll:
      maxLength: 100
      minLength: 1
      pattern: "^(-|^([A-Za-z]_?)+$)$"
      type: string
    AmazonResourceName:
      maxLength: 1011
      minLength: 1
      type: string
    Blob:
      type: string
    Boolean:
      type: boolean
    Description:
      maxLength: 200
      minLength: 0
      type: string
    BotName:
      maxLength: 50
      minLength: 2
      pattern: "^([A-Za-z]_?)+$"
      type: string
    Timestamp:
      format: date-time
      type: string
    String:
      type: string
    ConversationLogsResponse:
      description: Contains information about conversation log settings.
      properties:
        logSettings:
          allOf:
          - $ref: '#/components/schemas/LogSettingsResponseList'
          - description: "The settings for your conversation logs. You can log text,\
              \ audio, or both."
        iamRoleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          - description: The Amazon Resource Name (ARN) of the IAM role used to write
              your logs to CloudWatch Logs or an S3 bucket.
      type: object
    BotAliasMetadata:
      description: Provides information about a bot alias.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          - description: The name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the Amazon Lex bot to which the alias points.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the bot to which the alias points.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the bot alias was updated. When you create\
              \ a resource, the creation date and last updated date are the same."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the bot alias was created.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Checksum of the bot alias.
        conversationLogs:
          $ref: '#/components/schemas/BotAliasMetadata_conversationLogs'
      type: object
    BotAliasMetadataList:
      items:
        $ref: '#/components/schemas/BotAliasMetadata'
      type: array
    BotChannelName:
      maxLength: 100
      minLength: 1
      pattern: "^([A-Za-z]_?)+$"
      type: string
    ChannelType:
      enum:
      - Facebook
      - Slack
      - Twilio-Sms
      - Kik
      type: string
    ChannelConfigurationMap:
      additionalProperties:
        $ref: '#/components/schemas/String'
      maxProperties: 10
      minProperties: 1
      type: object
    ChannelStatus:
      enum:
      - IN_PROGRESS
      - CREATED
      - FAILED
      type: string
    BotChannelAssociation:
      description: Represents an association between an Amazon Lex bot and an external
        messaging platform.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotChannelName'
          - description: 'The name of the association between the bot and the channel. '
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: 'A text description of the association you are creating. '
        botAlias:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          - description: 'An alias pointing to the specific version of the Amazon
              Lex bot to which this association is being made. '
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: "<p>The name of the Amazon Lex bot to which this association\
              \ is being made. </p> <note> <p>Currently, Amazon Lex supports associations\
              \ with Facebook and Slack, and Twilio.</p> </note>"
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: 'The date that the association between the Amazon Lex bot
              and the channel was created. '
        type:
          allOf:
          - $ref: '#/components/schemas/ChannelType'
          - description: Specifies the type of association by indicating the type
              of channel being established between the Amazon Lex bot and the external
              messaging platform.
        botConfiguration:
          allOf:
          - $ref: '#/components/schemas/ChannelConfigurationMap'
          - description: 'Provides information necessary to communicate with the messaging
              platform. '
        status:
          allOf:
          - $ref: '#/components/schemas/ChannelStatus'
          - description: "<p>The status of the bot channel. </p> <ul> <li> <p> <code>CREATED</code>\
              \ - The channel has been created and is ready for use.</p> </li> <li>\
              \ <p> <code>IN_PROGRESS</code> - Channel creation is in progress.</p>\
              \ </li> <li> <p> <code>FAILED</code> - There was an error creating the\
              \ channel. For information about the reason for the failure, see the\
              \ <code>failureReason</code> field.</p> </li> </ul>"
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "If <code>status</code> is <code>FAILED</code>, Amazon Lex\
              \ provides the reason that it failed to create the association."
      type: object
    BotChannelAssociationList:
      items:
        $ref: '#/components/schemas/BotChannelAssociation'
      type: array
    Status:
      enum:
      - BUILDING
      - READY
      - READY_BASIC_TESTING
      - FAILED
      - NOT_BUILT
      type: string
    BotMetadata:
      description: Provides information about a bot. .
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: 'The name of the bot. '
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          - description: The status of the bot.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the bot was updated. When you create a bot,\
              \ the creation date and last updated date are the same. "
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the bot was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: "The version of the bot. For a new bot, the version is always\
              \ <code>$LATEST</code>."
      type: object
    BotMetadataList:
      items:
        $ref: '#/components/schemas/BotMetadata'
      type: array
    BotVersions:
      items:
        $ref: '#/components/schemas/Version'
      maxItems: 5
      minItems: 1
      type: array
    BuiltinIntentSignature:
      type: string
    LocaleList:
      items:
        $ref: '#/components/schemas/Locale'
      type: array
    BuiltinIntentMetadata:
      description: Provides metadata for a built-in intent.
      properties:
        signature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          - description: "A unique identifier for the built-in intent. To find the\
              \ signature for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\"\
              >Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>."
        supportedLocales:
          allOf:
          - $ref: '#/components/schemas/LocaleList'
          - description: A list of identifiers for the locales that the intent supports.
      type: object
    BuiltinIntentMetadataList:
      items:
        $ref: '#/components/schemas/BuiltinIntentMetadata'
      type: array
    BuiltinIntentSlot:
      description: Provides information about a slot used in a built-in intent.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A list of the slots defined for the intent.
      type: object
    BuiltinIntentSlotList:
      items:
        $ref: '#/components/schemas/BuiltinIntentSlot'
      type: array
    BuiltinSlotTypeSignature:
      type: string
    BuiltinSlotTypeMetadata:
      description: Provides information about a built in slot type.
      properties:
        signature:
          allOf:
          - $ref: '#/components/schemas/BuiltinSlotTypeSignature'
          - description: "A unique identifier for the built-in slot type. To find\
              \ the signature for a slot type, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\"\
              >Slot Type Reference</a> in the <i>Alexa Skills Kit</i>."
        supportedLocales:
          allOf:
          - $ref: '#/components/schemas/LocaleList'
          - description: 'A list of target locales for the slot. '
      type: object
    BuiltinSlotTypeMetadataList:
      items:
        $ref: '#/components/schemas/BuiltinSlotTypeMetadata'
      type: array
    ConfidenceThreshold:
      format: double
      maximum: 1
      minimum: 0
      type: number
    ContentString:
      maxLength: 1000
      minLength: 1
      type: string
    ContentType:
      enum:
      - PlainText
      - SSML
      - CustomPayload
      type: string
    ContextTimeToLiveInSeconds:
      maximum: 86400
      minimum: 5
      type: integer
    ContextTurnsToLive:
      maximum: 20
      minimum: 1
      type: integer
    ConversationLogsRequest:
      description: Provides the settings needed for conversation logs.
      properties:
        logSettings:
          allOf:
          - $ref: '#/components/schemas/LogSettingsRequestList'
          - description: "The settings for your conversation logs. You can log the\
              \ conversation text, conversation audio, or both."
        iamRoleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          - description: "The Amazon Resource Name (ARN) of an IAM role with permission\
              \ to write to your CloudWatch Logs for text logs and your S3 bucket\
              \ for audio logs. If audio encryption is enabled, this role also provides\
              \ access permission for the AWS KMS key used for encrypting audio logs.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/conversation-logs-role-and-policy.html\"\
              >Creating an IAM Role and Policy for Conversation Logs</a>."
      required:
      - iamRoleArn
      - logSettings
      type: object
    LogSettingsResponseList:
      items:
        $ref: '#/components/schemas/LogSettingsResponse'
      type: array
    Count:
      type: integer
    CreateBotVersionRequest:
      example:
        checksum: ""
      properties:
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Identifies a specific revision of the <code>$LATEST</code>\
              \ version of the bot. If you specify a checksum and the <code>$LATEST</code>\
              \ version of the bot has a different checksum, a <code>PreconditionFailedException</code>\
              \ exception is returned and Amazon Lex doesn't publish a new version.\
              \ If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code>\
              \ version."
      title: CreateBotVersionRequest
      type: object
    IntentList:
      items:
        $ref: '#/components/schemas/Intent'
      type: array
    SessionTTL:
      maximum: 86400
      minimum: 60
      type: integer
    Locale:
      enum:
      - de-DE
      - en-AU
      - en-GB
      - en-IN
      - en-US
      - es-419
      - es-ES
      - es-US
      - fr-FR
      - fr-CA
      - it-IT
      - ja-JP
      - ko-KR
      type: string
    IntentName:
      maxLength: 100
      minLength: 1
      pattern: "^([A-Za-z]_?)+$"
      type: string
    CreateIntentVersionRequest:
      example:
        checksum: ""
      properties:
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Checksum of the <code>$LATEST</code> version of the intent\
              \ that should be used to create the new version. If you specify a checksum\
              \ and the <code>$LATEST</code> version of the intent has a different\
              \ checksum, Amazon Lex returns a <code>PreconditionFailedException</code>\
              \ exception and doesn't publish a new version. If you don't specify\
              \ a checksum, Amazon Lex publishes the <code>$LATEST</code> version."
      title: CreateIntentVersionRequest
      type: object
    SlotList:
      items:
        $ref: '#/components/schemas/Slot'
      maxItems: 100
      minItems: 0
      type: array
    IntentUtteranceList:
      items:
        $ref: '#/components/schemas/Utterance'
      maxItems: 1500
      minItems: 0
      type: array
    FollowUpPrompt:
      description: "A prompt for additional activity after an intent is fulfilled.\
        \ For example, after the <code>OrderPizza</code> intent is fulfilled, you\
        \ might prompt the user to find out whether the user wants to order drinks."
      properties:
        prompt:
          $ref: '#/components/schemas/PutIntent_request_followUpPrompt_prompt'
        rejectionStatement:
          $ref: '#/components/schemas/PutIntent_request_followUpPrompt_rejectionStatement'
      required:
      - prompt
      - rejectionStatement
      type: object
    FulfillmentActivity:
      description: "<p> Describes how the intent is fulfilled after the user provides\
        \ all of the information required for the intent. You can provide a Lambda\
        \ function to process the intent, or you can return the intent information\
        \ to the client application. We recommend that you use a Lambda function so\
        \ that the relevant logic lives in the Cloud and limit the client-side code\
        \ primarily to presentation. If you need to update the logic, you only update\
        \ the Lambda function; you don't need to upgrade your client application.\
        \ </p> <p>Consider the following examples:</p> <ul> <li> <p>In a pizza ordering\
        \ application, after the user provides all of the information for placing\
        \ an order, you use a Lambda function to place an order with a pizzeria. </p>\
        \ </li> <li> <p>In a gaming application, when a user says \"pick up a rock,\"\
        \ this information must go back to the client application so that it can perform\
        \ the operation and update the graphics. In this case, you want Amazon Lex\
        \ to return the intent data to the client. </p> </li> </ul>"
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/FulfillmentActivityType'
          - description: " How the intent should be fulfilled, either by running a\
              \ Lambda function or by returning the slot data to the client application. "
        codeHook:
          $ref: '#/components/schemas/PutIntent_request_fulfillmentActivity_codeHook'
      required:
      - type
      type: object
    KendraConfiguration:
      description: "Provides configuration information for the AMAZON.KendraSearchIntent\
        \ intent. When you use this intent, Amazon Lex searches the specified Amazon\
        \ Kendra index and returns documents from the index that match the user's\
        \ utterance. For more information, see <a href=\"http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html\"\
        > AMAZON.KendraSearchIntent</a>."
      properties:
        kendraIndex:
          allOf:
          - $ref: '#/components/schemas/KendraIndexArn'
          - description: "The Amazon Resource Name (ARN) of the Amazon Kendra index\
              \ that you want the AMAZON.KendraSearchIntent intent to search. The\
              \ index must be in the same account and Region as the Amazon Lex bot.\
              \ If the Amazon Kendra index does not exist, you get an exception when\
              \ you call the <code>PutIntent</code> operation."
        queryFilterString:
          allOf:
          - $ref: '#/components/schemas/QueryFilterString'
          - description: "<p>A query filter that Amazon Lex sends to Amazon Kendra\
              \ to filter the response from the query. The filter is in the format\
              \ defined by Amazon Kendra. For more information, see <a href=\"http://docs.aws.amazon.com/kendra/latest/dg/filtering.html\"\
              >Filtering queries</a>.</p> <p>You can override this filter string with\
              \ a new filter string at runtime.</p>"
        role:
          allOf:
          - $ref: '#/components/schemas/roleArn'
          - description: "The Amazon Resource Name (ARN) of an IAM role that has permission\
              \ to search the Amazon Kendra index. The role must be in the same account\
              \ and Region as the Amazon Lex bot. If the role does not exist, you\
              \ get an exception when you call the <code>PutIntent</code> operation."
      required:
      - kendraIndex
      - role
      type: object
    InputContextList:
      items:
        $ref: '#/components/schemas/InputContext'
      maxItems: 5
      minItems: 0
      type: array
    OutputContextList:
      items:
        $ref: '#/components/schemas/OutputContext'
      maxItems: 10
      minItems: 0
      type: array
    SlotTypeName:
      maxLength: 100
      minLength: 1
      pattern: "^([A-Za-z]_?)+$"
      type: string
    CreateSlotTypeVersionRequest:
      example:
        checksum: ""
      properties:
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Checksum for the <code>$LATEST</code> version of the slot\
              \ type that you want to publish. If you specify a checksum and the <code>$LATEST</code>\
              \ version of the slot type has a different checksum, Amazon Lex returns\
              \ a <code>PreconditionFailedException</code> exception and doesn't publish\
              \ the new version. If you don't specify a checksum, Amazon Lex publishes\
              \ the <code>$LATEST</code> version."
      title: CreateSlotTypeVersionRequest
      type: object
    EnumerationValues:
      items:
        $ref: '#/components/schemas/EnumerationValue'
      maxItems: 10000
      minItems: 0
      type: array
    SlotValueSelectionStrategy:
      enum:
      - ORIGINAL_VALUE
      - TOP_RESOLUTION
      type: string
    CustomOrBuiltinSlotTypeName:
      maxLength: 100
      minLength: 1
      pattern: "^((AMAZON\\.)_?|[A-Za-z]_?)+"
      type: string
    SlotTypeConfigurations:
      items:
        $ref: '#/components/schemas/SlotTypeConfiguration'
      maxItems: 10
      minItems: 0
      type: array
    DeleteBotAliasRequest:
      properties: {}
      title: DeleteBotAliasRequest
      type: object
    DeleteBotChannelAssociationRequest:
      properties: {}
      title: DeleteBotChannelAssociationRequest
      type: object
    DeleteBotRequest:
      properties: {}
      title: DeleteBotRequest
      type: object
    NumericalVersion:
      maxLength: 64
      minLength: 1
      pattern: "[0-9]+"
      type: string
    DeleteBotVersionRequest:
      properties: {}
      title: DeleteBotVersionRequest
      type: object
    DeleteIntentRequest:
      properties: {}
      title: DeleteIntentRequest
      type: object
    DeleteIntentVersionRequest:
      properties: {}
      title: DeleteIntentVersionRequest
      type: object
    DeleteSlotTypeRequest:
      properties: {}
      title: DeleteSlotTypeRequest
      type: object
    DeleteSlotTypeVersionRequest:
      properties: {}
      title: DeleteSlotTypeVersionRequest
      type: object
    UserId:
      maxLength: 100
      minLength: 2
      type: string
    DeleteUtterancesRequest:
      properties: {}
      title: DeleteUtterancesRequest
      type: object
    Destination:
      enum:
      - CLOUDWATCH_LOGS
      - S3
      type: string
    Value:
      maxLength: 140
      minLength: 1
      type: string
    SynonymList:
      items:
        $ref: '#/components/schemas/Value'
      type: array
    ExportStatus:
      enum:
      - IN_PROGRESS
      - READY
      - FAILED
      type: string
    ExportType:
      enum:
      - ALEXA_SKILLS_KIT
      - LEX
      type: string
    GetBotAliasRequest:
      properties: {}
      title: GetBotAliasRequest
      type: object
    NextToken:
      type: string
    MaxResults:
      maximum: 50
      minimum: 1
      type: integer
    GetBotAliasesRequest:
      properties: {}
      title: GetBotAliasesRequest
      type: object
    GetBotChannelAssociationRequest:
      properties: {}
      title: GetBotChannelAssociationRequest
      type: object
    GetBotChannelAssociationsRequest:
      properties: {}
      title: GetBotChannelAssociationsRequest
      type: object
    GetBotRequest:
      properties: {}
      title: GetBotRequest
      type: object
    GetBotVersionsRequest:
      properties: {}
      title: GetBotVersionsRequest
      type: object
    GetBotsRequest:
      properties: {}
      title: GetBotsRequest
      type: object
    GetBuiltinIntentRequest:
      properties: {}
      title: GetBuiltinIntentRequest
      type: object
    GetBuiltinIntentsRequest:
      properties: {}
      title: GetBuiltinIntentsRequest
      type: object
    GetBuiltinSlotTypesRequest:
      properties: {}
      title: GetBuiltinSlotTypesRequest
      type: object
    Name:
      maxLength: 100
      minLength: 1
      pattern: "[a-zA-Z_]+"
      type: string
    ResourceType:
      enum:
      - BOT
      - INTENT
      - SLOT_TYPE
      type: string
    GetExportRequest:
      properties: {}
      title: GetExportRequest
      type: object
    GetImportRequest:
      properties: {}
      title: GetImportRequest
      type: object
    MergeStrategy:
      enum:
      - OVERWRITE_LATEST
      - FAIL_ON_CONFLICT
      type: string
    ImportStatus:
      enum:
      - IN_PROGRESS
      - COMPLETE
      - FAILED
      type: string
    StringList:
      items:
        $ref: '#/components/schemas/String'
      type: array
    GetIntentRequest:
      properties: {}
      title: GetIntentRequest
      type: object
    GetIntentVersionsRequest:
      properties: {}
      title: GetIntentVersionsRequest
      type: object
    IntentMetadataList:
      items:
        $ref: '#/components/schemas/IntentMetadata'
      type: array
    GetIntentsRequest:
      properties: {}
      title: GetIntentsRequest
      type: object
    MigrationId:
      maxLength: 10
      minLength: 10
      pattern: "^[0-9a-zA-Z]+$"
      type: string
    GetMigrationRequest:
      properties: {}
      title: GetMigrationRequest
      type: object
    V2BotId:
      maxLength: 10
      minLength: 10
      pattern: "^[0-9a-zA-Z]+$"
      type: string
    MigrationStatus:
      enum:
      - IN_PROGRESS
      - COMPLETED
      - FAILED
      type: string
    MigrationStrategy:
      enum:
      - CREATE_NEW
      - UPDATE_EXISTING
      type: string
    MigrationAlerts:
      items:
        $ref: '#/components/schemas/MigrationAlert'
      type: array
    MigrationSortAttribute:
      enum:
      - V1_BOT_NAME
      - MIGRATION_DATE_TIME
      type: string
    SortOrder:
      enum:
      - ASCENDING
      - DESCENDING
      type: string
    GetMigrationsRequest:
      properties: {}
      title: GetMigrationsRequest
      type: object
    MigrationSummaryList:
      items:
        $ref: '#/components/schemas/MigrationSummary'
      type: array
    GetSlotTypeRequest:
      properties: {}
      title: GetSlotTypeRequest
      type: object
    GetSlotTypeVersionsRequest:
      properties: {}
      title: GetSlotTypeVersionsRequest
      type: object
    SlotTypeMetadataList:
      items:
        $ref: '#/components/schemas/SlotTypeMetadata'
      type: array
    GetSlotTypesRequest:
      properties: {}
      title: GetSlotTypesRequest
      type: object
    StatusType:
      enum:
      - Detected
      - Missed
      type: string
    GetUtterancesViewRequest:
      properties: {}
      title: GetUtterancesViewRequest
      type: object
    ListsOfUtterances:
      items:
        $ref: '#/components/schemas/UtteranceList'
      type: array
    GroupNumber:
      maximum: 5
      minimum: 1
      type: integer
    InputContextName:
      maxLength: 100
      minLength: 1
      pattern: "^([A-Za-z]_?)+$"
      type: string
    IntentMetadata:
      description: Provides information about an intent.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the intent.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the intent was updated. When you create an\
              \ intent, the creation date and last updated date are the same."
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the intent was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the intent.
      type: object
    KmsKeyArn:
      maxLength: 2048
      minLength: 20
      pattern: "^arn:[\\w\\-]+:kms:[\\w\\-]+:[\\d]{12}:(?:key\\/[\\w\\-]+|alias\\\
        /[a-zA-Z0-9:\\/_\\-]{1,256})$"
      type: string
    UtteranceData:
      description: 'Provides information about a single utterance that was made to
        your bot. '
      properties:
        utteranceString:
          allOf:
          - $ref: '#/components/schemas/UtteranceString'
          - description: The text that was entered by the user or the text representation
              of an audio clip.
        count:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The number of times that the utterance was processed.
        distinctUsers:
          allOf:
          - $ref: '#/components/schemas/Count'
          - description: The total number of individuals that used the utterance.
        firstUtteredDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the utterance was first recorded.
        lastUtteredDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the utterance was last recorded.
      type: object
    ListOfUtterance:
      items:
        $ref: '#/components/schemas/UtteranceData'
      type: array
    ListTagsForResourceRequest:
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    TagList:
      items:
        $ref: '#/components/schemas/Tag'
      maxItems: 200
      minItems: 0
      type: array
    UtteranceList:
      description: Provides a list of utterances that have been made to a specific
        version of your bot. The list contains a maximum of 100 utterances.
      properties:
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the bot that processed the list.
        utterances:
          allOf:
          - $ref: '#/components/schemas/ListOfUtterance'
          - description: One or more <a>UtteranceData</a> objects that contain information
              about the utterances that have been made to a bot. The maximum number
              of object is 100.
      type: object
    LogType:
      enum:
      - AUDIO
      - TEXT
      type: string
    ResourceArn:
      maxLength: 2048
      minLength: 1
      pattern: "^arn:[\\w\\-]+:(?:logs:[\\w\\-]+:[\\d]{12}:log-group:[\\.\\-_/#A-Za-z0-9]{1,512}(?::\\\
        *)?|s3:::[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9])$"
      type: string
    LogSettingsRequest:
      description: Settings used to configure delivery mode and destination for conversation
        logs.
      properties:
        logType:
          allOf:
          - $ref: '#/components/schemas/LogType'
          - description: The type of logging to enable. Text logs are delivered to
              a CloudWatch Logs log group. Audio logs are delivered to an S3 bucket.
        destination:
          allOf:
          - $ref: '#/components/schemas/Destination'
          - description: Where the logs will be delivered. Text logs are delivered
              to a CloudWatch Logs log group. Audio logs are delivered to an S3 bucket.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: The Amazon Resource Name (ARN) of the AWS KMS customer managed
              key for encrypting audio logs delivered to an S3 bucket. The key does
              not apply to CloudWatch Logs and is optional for S3 buckets.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          - description: The Amazon Resource Name (ARN) of the CloudWatch Logs log
              group or S3 bucket where the logs should be delivered.
      required:
      - destination
      - logType
      - resourceArn
      type: object
    ResourcePrefix:
      maxLength: 1024
      type: string
    LogSettingsResponse:
      description: The settings for conversation logs.
      properties:
        logType:
          allOf:
          - $ref: '#/components/schemas/LogType'
          - description: The type of logging that is enabled.
        destination:
          allOf:
          - $ref: '#/components/schemas/Destination'
          - description: The destination where logs are delivered.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: The Amazon Resource Name (ARN) of the key used to encrypt
              audio logs in an S3 bucket.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          - description: The Amazon Resource Name (ARN) of the CloudWatch Logs log
              group or S3 bucket where the logs are delivered.
        resourcePrefix:
          allOf:
          - $ref: '#/components/schemas/ResourcePrefix'
          - description: 'The resource prefix is the first part of the S3 object key
              within the S3 bucket that you specified to contain audio logs. For CloudWatch
              Logs it is the prefix of the log stream name within the log group that
              you specified. '
      type: object
    Message:
      description: The message object that provides the message text and its type.
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          - description: The content type of the message string.
        content:
          allOf:
          - $ref: '#/components/schemas/ContentString'
          - description: The text of the message.
        groupNumber:
          allOf:
          - $ref: '#/components/schemas/GroupNumber'
          - description: "Identifies the message group that the message belongs to.\
              \ When a group is assigned to a message, Amazon Lex returns one message\
              \ from each group in the response."
      required:
      - content
      - contentType
      type: object
    MigrationAlertType:
      enum:
      - ERROR
      - WARN
      type: string
    MigrationAlertMessage:
      type: string
    MigrationAlertDetails:
      items:
        $ref: '#/components/schemas/MigrationAlertDetail'
      type: array
    MigrationAlertReferenceURLs:
      items:
        $ref: '#/components/schemas/MigrationAlertReferenceURL'
      type: array
    MigrationAlert:
      description: Provides information about alerts and warnings that Amazon Lex
        sends during a migration. The alerts include information about how to resolve
        the issue.
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/MigrationAlertType'
          - description: <p>The type of alert. There are two kinds of alerts:</p>
              <ul> <li> <p> <code>ERROR</code> - There was an issue with the migration
              that can't be resolved. The migration stops.</p> </li> <li> <p> <code>WARN</code>
              - There was an issue with the migration that requires manual changes
              to the new Amazon Lex V2 bot. The migration continues.</p> </li> </ul>
        message:
          allOf:
          - $ref: '#/components/schemas/MigrationAlertMessage'
          - description: A message that describes why the alert was issued.
        details:
          allOf:
          - $ref: '#/components/schemas/MigrationAlertDetails'
          - description: Additional details about the alert.
        referenceURLs:
          allOf:
          - $ref: '#/components/schemas/MigrationAlertReferenceURLs'
          - description: A link to the Amazon Lex documentation that describes how
              to resolve the alert.
      type: object
    MigrationAlertDetail:
      type: string
    MigrationAlertReferenceURL:
      type: string
    MigrationSummary:
      description: Provides information about migrating a bot from Amazon Lex V1 to
        Amazon Lex V2.
      properties:
        migrationId:
          allOf:
          - $ref: '#/components/schemas/MigrationId'
          - description: The unique identifier that Amazon Lex assigned to the migration.
        v1BotName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the Amazon Lex V1 bot that is the source of the
              migration.
        v1BotVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the Amazon Lex V1 bot that is the source of
              the migration.
        v1BotLocale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          - description: The locale of the Amazon Lex V1 bot that is the source of
              the migration.
        v2BotId:
          allOf:
          - $ref: '#/components/schemas/V2BotId'
          - description: The unique identifier of the Amazon Lex V2 that is the destination
              of the migration.
        v2BotRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          - description: The IAM role that Amazon Lex uses to run the Amazon Lex V2
              bot.
        migrationStatus:
          allOf:
          - $ref: '#/components/schemas/MigrationStatus'
          - description: The status of the operation. When the status is <code>COMPLETE</code>
              the bot is available in Amazon Lex V2. There may be alerts and warnings
              that need to be resolved to complete the migration.
        migrationStrategy:
          allOf:
          - $ref: '#/components/schemas/MigrationStrategy'
          - description: The strategy used to conduct the migration.
        migrationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date and time that the migration started.
      type: object
    ObfuscationSetting:
      enum:
      - NONE
      - DEFAULT_OBFUSCATION
      type: string
    OutputContextName:
      maxLength: 100
      minLength: 1
      pattern: "^([A-Za-z]_?)+$"
      type: string
    Priority:
      maximum: 100
      minimum: 0
      type: integer
    ProcessBehavior:
      enum:
      - SAVE
      - BUILD
      type: string
    PutBotAliasRequest:
      example:
        checksum: ""
        conversationLogs:
          iamRoleArn: ""
          logSettings: ""
        description: ""
        botVersion: ""
        tags: ""
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the bot.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "<p>Identifies a specific revision of the <code>$LATEST</code>\
              \ version.</p> <p>When you create a new bot alias, leave the <code>checksum</code>\
              \ field blank. If you specify a checksum you get a <code>BadRequestException</code>\
              \ exception.</p> <p>When you want to update a bot alias, set the <code>checksum</code>\
              \ field to the checksum of the most recent revision of the <code>$LATEST</code>\
              \ version. If you don't specify the <code> checksum</code> field, or\
              \ if the checksum does not match the <code>$LATEST</code> version, you\
              \ get a <code>PreconditionFailedException</code> exception.</p>"
        conversationLogs:
          $ref: '#/components/schemas/PutBotAliasRequest_conversationLogs'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "A list of tags to add to the bot alias. You can only add\
              \ tags when you create an alias, you can't use the <code>PutBotAlias</code>\
              \ operation to update the tags on a bot alias. To update tags, use the\
              \ <code>TagResource</code> operation."
      required:
      - botVersion
      title: PutBotAliasRequest
      type: object
    PutBotRequest:
      example:
        nluIntentConfidenceThreshold: ""
        createVersion: ""
        intents: ""
        enableModelImprovements: ""
        processBehavior: ""
        detectSentiment: ""
        description: ""
        idleSessionTTLInSeconds: ""
        locale: ""
        tags: ""
        voiceId: ""
        clarificationPrompt:
          maxAttempts: ""
          responseCard: ""
          messages: ""
        checksum: ""
        childDirected: ""
        abortStatement:
          responseCard: ""
          messages: ""
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the bot.
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          - description: "An array of <code>Intent</code> objects. Each intent represents\
              \ a command that a user can express. For example, a pizza ordering bot\
              \ might support an OrderPizza intent. For more information, see <a>how-it-works</a>."
        enableModelImprovements:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "<p>Set to <code>true</code> to enable access to natural\
              \ language understanding improvements. </p> <p>When you set the <code>enableModelImprovements</code>\
              \ parameter to <code>true</code> you can use the <code>nluIntentConfidenceThreshold</code>\
              \ parameter to configure confidence scores. For more information, see\
              \ <a href=\"https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\"\
              >Confidence Scores</a>.</p> <p>You can only set the <code>enableModelImprovements</code>\
              \ parameter in certain Regions. If you set the parameter to <code>true</code>,\
              \ your bot has access to accuracy improvements.</p> <p>The Regions where\
              \ you can set the <code>enableModelImprovements</code> parameter to\
              \ <code>true</code> are:</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p>\
              \ </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia\
              \ Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p>\
              \ </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code>\
              \ parameter is set to <code>true</code> by default. In these Regions\
              \ setting the parameter to <code>false</code> throws a <code>ValidationException</code>\
              \ exception.</p>"
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          - description: "<p>Determines the threshold where Amazon Lex will insert\
              \ the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>,\
              \ or both when returning alternative intents in a <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\"\
              >PostContent</a> or <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\"\
              >PostText</a> response. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code>\
              \ are only inserted if they are configured for the bot.</p> <p>You must\
              \ set the <code>enableModelImprovements</code> parameter to <code>true</code>\
              \ to use confidence scores in the following regions.</p> <ul> <li> <p>US\
              \ East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon)\
              \ (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p>\
              \ </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other\
              \ Regions, the <code>enableModelImprovements</code> parameter is set\
              \ to <code>true</code> by default.</p> <p>For example, suppose a bot\
              \ is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>.\
              \ Amazon Lex returns three alternative intents with the following confidence\
              \ scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response\
              \ from the <code>PostText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p>\
              \ </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p>\
              \ </li> </ul>"
        clarificationPrompt:
          $ref: '#/components/schemas/PutBotRequest_clarificationPrompt'
        abortStatement:
          $ref: '#/components/schemas/PutBotRequest_abortStatement'
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          - description: "<p>The maximum time in seconds that Amazon Lex retains the\
              \ data gathered in a conversation.</p> <p>A user interaction session\
              \ remains active for the amount of time specified. If no conversation\
              \ occurs during this time, the session expires and Amazon Lex deletes\
              \ any data provided before the timeout.</p> <p>For example, suppose\
              \ that a user chooses the OrderPizza intent, but gets sidetracked halfway\
              \ through placing an order. If the user doesn't complete the order within\
              \ the specified time, Amazon Lex discards the slot information that\
              \ it gathered, and the user must start over.</p> <p>If you don't include\
              \ the <code>idleSessionTTLInSeconds</code> element in a <code>PutBot</code>\
              \ operation request, Amazon Lex uses the default value. This is also\
              \ true if the request replaces an existing bot.</p> <p>The default is\
              \ 300 seconds (5 minutes).</p>"
        voiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The Amazon Polly voice ID that you want Amazon Lex to use\
              \ for voice interactions with the user. The locale configured for the\
              \ voice must match the locale of the bot. For more information, see\
              \ <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\"\
              >Voices in Amazon Polly</a> in the <i>Amazon Polly Developer Guide</i>."
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "<p>Identifies a specific revision of the <code>$LATEST</code>\
              \ version.</p> <p>When you create a new bot, leave the <code>checksum</code>\
              \ field blank. If you specify a checksum you get a <code>BadRequestException</code>\
              \ exception.</p> <p>When you want to update a bot, set the <code>checksum</code>\
              \ field to the checksum of the most recent revision of the <code>$LATEST</code>\
              \ version. If you don't specify the <code> checksum</code> field, or\
              \ if the checksum does not match the <code>$LATEST</code> version, you\
              \ get a <code>PreconditionFailedException</code> exception.</p>"
        processBehavior:
          allOf:
          - $ref: '#/components/schemas/ProcessBehavior'
          - description: "<p>If you set the <code>processBehavior</code> element to\
              \ <code>BUILD</code>, Amazon Lex builds the bot so that it can be run.\
              \ If you set the element to <code>SAVE</code> Amazon Lex saves the bot,\
              \ but doesn't build it. </p> <p>If you don't specify this value, the\
              \ default value is <code>BUILD</code>.</p>"
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          - description: <p> Specifies the target locale for the bot. Any intent used
              in the bot must be compatible with the locale of the bot. </p> <p>The
              default is <code>en-US</code>.</p>
        childDirected:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "<p>For each Amazon Lex bot created with the Amazon Lex Model\
              \ Building Service, you must specify whether your use of Amazon Lex\
              \ is related to a website, program, or other application that is directed\
              \ or targeted, in whole or in part, to children under age 13 and subject\
              \ to the Children's Online Privacy Protection Act (COPPA) by specifying\
              \ <code>true</code> or <code>false</code> in the <code>childDirected</code>\
              \ field. By specifying <code>true</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is</b> related to\
              \ a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ By specifying <code>false</code> in the <code>childDirected</code>\
              \ field, you confirm that your use of Amazon Lex <b>is not</b> related\
              \ to a website, program, or other application that is directed or targeted,\
              \ in whole or in part, to children under age 13 and subject to COPPA.\
              \ You may not specify a default value for the <code>childDirected</code>\
              \ field that does not accurately reflect whether your use of Amazon\
              \ Lex is related to a website, program, or other application that is\
              \ directed or targeted, in whole or in part, to children under age 13\
              \ and subject to COPPA.</p> <p>If your use of Amazon Lex relates to\
              \ a website, program, or other application that is directed in whole\
              \ or in part, to children under age 13, you must obtain any required\
              \ verifiable parental consent under COPPA. For information regarding\
              \ the use of Amazon Lex in connection with websites, programs, or other\
              \ applications that are directed or targeted, in whole or in part, to\
              \ children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\"\
              >Amazon Lex FAQ.</a> </p>"
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "When set to <code>true</code> user utterances are sent to\
              \ Amazon Comprehend for sentiment analysis. If you don't specify <code>detectSentiment</code>,\
              \ the default is <code>false</code>."
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "When set to <code>true</code> a new numbered version of\
              \ the bot is created. This is the same as calling the <code>CreateBotVersion</code>\
              \ operation. If you don't specify <code>createVersion</code>, the default\
              \ is <code>false</code>."
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "A list of tags to add to the bot. You can only add tags\
              \ when you create a bot, you can't use the <code>PutBot</code> operation\
              \ to update the tags on a bot. To update tags, use the <code>TagResource</code>\
              \ operation."
      required:
      - childDirected
      - locale
      title: PutBotRequest
      type: object
    PutIntentRequest:
      example:
        createVersion: ""
        sampleUtterances: ""
        parentIntentSignature: ""
        conclusionStatement:
          responseCard: ""
          messages: ""
        description: ""
        followUpPrompt:
          rejectionStatement:
            responseCard: ""
            messages: ""
          prompt:
            maxAttempts: ""
            responseCard: ""
            messages: ""
        fulfillmentActivity:
          type: ""
          codeHook:
            messageVersion: ""
            uri: ""
        slots: ""
        rejectionStatement:
          responseCard: ""
          messages: ""
        inputContexts: ""
        outputContexts: ""
        confirmationPrompt:
          maxAttempts: ""
          responseCard: ""
          messages: ""
        checksum: ""
        kendraConfiguration:
          kendraIndex: ""
          role: ""
          queryFilterString: ""
        dialogCodeHook:
          messageVersion: ""
          uri: ""
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotList'
          - description: "An array of intent slots. At runtime, Amazon Lex elicits\
              \ required slot values from the user using prompts defined in the slots.\
              \ For more information, see <a>how-it-works</a>. "
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/IntentUtteranceList'
          - description: "<p>An array of utterances (strings) that a user might say\
              \ to signal the intent. For example, \"I want {PizzaSize} pizza\", \"\
              Order {Quantity} {PizzaSize} pizzas\". </p> <p>In each utterance, a\
              \ slot name is enclosed in curly braces. </p>"
        confirmationPrompt:
          $ref: '#/components/schemas/PutIntentRequest_confirmationPrompt'
        rejectionStatement:
          $ref: '#/components/schemas/PutIntentRequest_rejectionStatement'
        followUpPrompt:
          $ref: '#/components/schemas/PutIntentRequest_followUpPrompt'
        conclusionStatement:
          $ref: '#/components/schemas/PutIntentRequest_conclusionStatement'
        dialogCodeHook:
          $ref: '#/components/schemas/PutIntentRequest_dialogCodeHook'
        fulfillmentActivity:
          $ref: '#/components/schemas/PutIntentRequest_fulfillmentActivity'
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          - description: "A unique identifier for the built-in intent to base this\
              \ intent on. To find the signature for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\"\
              >Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>."
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "<p>Identifies a specific revision of the <code>$LATEST</code>\
              \ version.</p> <p>When you create a new intent, leave the <code>checksum</code>\
              \ field blank. If you specify a checksum you get a <code>BadRequestException</code>\
              \ exception.</p> <p>When you want to update a intent, set the <code>checksum</code>\
              \ field to the checksum of the most recent revision of the <code>$LATEST</code>\
              \ version. If you don't specify the <code> checksum</code> field, or\
              \ if the checksum does not match the <code>$LATEST</code> version, you\
              \ get a <code>PreconditionFailedException</code> exception.</p>"
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "When set to <code>true</code> a new numbered version of\
              \ the intent is created. This is the same as calling the <code>CreateIntentVersion</code>\
              \ operation. If you do not specify <code>createVersion</code>, the default\
              \ is <code>false</code>."
        kendraConfiguration:
          $ref: '#/components/schemas/PutIntentRequest_kendraConfiguration'
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextList'
          - description: An array of <code>InputContext</code> objects that lists
              the contexts that must be active for Amazon Lex to choose the intent
              in a conversation with the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextList'
          - description: An array of <code>OutputContext</code> objects that lists
              the contexts that the intent activates when the intent is fulfilled.
      title: PutIntentRequest
      type: object
    PutSlotTypeRequest:
      example:
        valueSelectionStrategy: ""
        createVersion: ""
        slotTypeConfigurations: ""
        parentSlotTypeSignature: ""
        checksum: ""
        description: ""
        enumerationValues: ""
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the slot type.
        enumerationValues:
          allOf:
          - $ref: '#/components/schemas/EnumerationValues'
          - description: "<p>A list of <code>EnumerationValue</code> objects that\
              \ defines the values that the slot type can take. Each value can have\
              \ a list of <code>synonyms</code>, which are additional values that\
              \ help train the machine learning model about the values that it resolves\
              \ for a slot. </p> <p>A regular expression slot type doesn't require\
              \ enumeration values. All other slot types require a list of enumeration\
              \ values.</p> <p>When Amazon Lex resolves a slot value, it generates\
              \ a resolution list that contains up to five possible values for the\
              \ slot. If you are using a Lambda function, this resolution list is\
              \ passed to the function. If you are not using a Lambda function you\
              \ can choose to return the value that the user entered or the first\
              \ value in the resolution list as the slot value. The <code>valueSelectionStrategy</code>\
              \ field indicates the option to use. </p>"
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "<p>Identifies a specific revision of the <code>$LATEST</code>\
              \ version.</p> <p>When you create a new slot type, leave the <code>checksum</code>\
              \ field blank. If you specify a checksum you get a <code>BadRequestException</code>\
              \ exception.</p> <p>When you want to update a slot type, set the <code>checksum</code>\
              \ field to the checksum of the most recent revision of the <code>$LATEST</code>\
              \ version. If you don't specify the <code> checksum</code> field, or\
              \ if the checksum does not match the <code>$LATEST</code> version, you\
              \ get a <code>PreconditionFailedException</code> exception.</p>"
        valueSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionStrategy'
          - description: "<p>Determines the slot resolution strategy that Amazon Lex\
              \ uses to return slot type values. The field can be set to one of the\
              \ following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> -\
              \ Returns the value entered by the user, if the user value is similar\
              \ to the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code>\
              \ - If there is a resolution list for the slot, return the first value\
              \ in the resolution list as the slot type value. If there is no resolution\
              \ list, null is returned.</p> </li> </ul> <p>If you don't specify the\
              \ <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>"
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "When set to <code>true</code> a new numbered version of\
              \ the slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code>\
              \ operation. If you do not specify <code>createVersion</code>, the default\
              \ is <code>false</code>."
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          - description: "<p>The built-in slot type used as the parent of the slot\
              \ type. When you define a parent slot type, the new slot type has all\
              \ of the same configuration as the parent.</p> <p>Only <code>AMAZON.AlphaNumeric</code>\
              \ is supported.</p>"
        slotTypeConfigurations:
          allOf:
          - $ref: '#/components/schemas/SlotTypeConfigurations'
          - description: Configuration information that extends the parent built-in
              slot type. The configuration is added to the settings for the parent
              slot type.
      title: PutSlotTypeRequest
      type: object
    RegexPattern:
      maxLength: 100
      minLength: 1
      type: string
    SlotName:
      maxLength: 100
      minLength: 1
      pattern: "^([A-Za-z](-|_|.)?)+$"
      type: string
    SlotConstraint:
      enum:
      - Required
      - Optional
      type: string
    SlotUtteranceList:
      items:
        $ref: '#/components/schemas/Utterance'
      maxItems: 10
      minItems: 0
      type: array
    SlotDefaultValueSpec:
      description: Contains the default values for a slot. Default values are used
        when Amazon Lex hasn't determined a value for a slot.
      properties:
        defaultValueList:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueList'
          - description: "<p>The default values for a slot. You can specify more than\
              \ one default. For example, you can specify a default value to use from\
              \ a matching context variable, a session attribute, or a fixed value.</p>\
              \ <p>The default value chosen is selected based on the order that you\
              \ specify them in the list. For example, if you specify a context variable\
              \ and a fixed value in that order, Amazon Lex uses the context variable\
              \ if it is available, else it uses the fixed value.</p>"
      required:
      - defaultValueList
      type: object
    SlotDefaultValueString:
      maxLength: 202
      minLength: 1
      type: string
    SlotDefaultValue:
      description: A default value for a slot.
      properties:
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueString'
          - description: "<p>The default value for the slot. You can specify one of\
              \ the following:</p> <ul> <li> <p> <code>#context-name.slot-name</code>\
              \ - The slot value \"slot-name\" in the context \"context-name.\"</p>\
              \ </li> <li> <p> <code>{attribute}</code> - The slot value of the session\
              \ attribute \"attribute.\"</p> </li> <li> <p> <code>'value'</code> -\
              \ The discrete value \"value.\"</p> </li> </ul>"
      required:
      - defaultValue
      type: object
    SlotDefaultValueList:
      items:
        $ref: '#/components/schemas/SlotDefaultValue'
      maxItems: 10
      minItems: 0
      type: array
    SlotTypeRegexConfiguration:
      description: Provides a regular expression used to validate the value of a slot.
      properties:
        pattern:
          allOf:
          - $ref: '#/components/schemas/RegexPattern'
          - description: "<p>A regular expression used to validate the value of a\
              \ slot. </p> <p>Use a standard regular expression. Amazon Lex supports\
              \ the following characters in the regular expression:</p> <ul> <li>\
              \ <p>A-Z, a-z</p> </li> <li> <p>0-9</p> </li> <li> <p>Unicode characters\
              \ (\"\\ u&lt;Unicode&gt;\")</p> </li> </ul> <p>Represent Unicode characters\
              \ with four digits, for example \"\\u0041\" or \"\\u005A\".</p> <p>The\
              \ following regular expression operators are not supported:</p> <ul>\
              \ <li> <p>Infinite repeaters: *, +, or {x,} with no upper bound.</p>\
              \ </li> <li> <p>Wild card (.)</p> </li> </ul>"
      required:
      - pattern
      type: object
    SlotTypeMetadata:
      description: Provides information about a slot type..
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          - description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: A description of the slot type.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date that the slot type was updated. When you create\
              \ a resource, the creation date and last updated date are the same. "
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The date that the slot type was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the slot type.
      type: object
    StartImportRequest:
      example:
        payload: ""
        mergeStrategy: ""
        resourceType: ""
        tags: ""
      properties:
        payload:
          allOf:
          - $ref: '#/components/schemas/Blob'
          - description: "A zip archive in binary format. The archive should contain\
              \ one file, a JSON file containing the resource to import. The resource\
              \ should match the type specified in the <code>resourceType</code> field."
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          - description: <p>Specifies the type of resource to export. Each resource
              also exports any resources that it depends on. </p> <ul> <li> <p>A bot
              exports dependent intents.</p> </li> <li> <p>An intent exports dependent
              slot types.</p> </li> </ul>
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          - description: <p>Specifies the action that the <code>StartImport</code>
              operation should take when there is an existing resource with the same
              name.</p> <ul> <li> <p>FAIL_ON_CONFLICT - The import operation is stopped
              on the first conflict between a resource in the import file and an existing
              resource. The name of the resource causing the conflict is in the <code>failureReason</code>
              field of the response to the <code>GetImport</code> operation.</p> <p>OVERWRITE_LATEST
              - The import operation proceeds even if there is a conflict with an
              existing resource. The $LASTEST version of the existing resource is
              overwritten with the data from the import file.</p> </li> </ul>
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "A list of tags to add to the imported bot. You can only\
              \ add tags when you import a bot, you can't add tags to an intent or\
              \ slot type."
      required:
      - mergeStrategy
      - payload
      - resourceType
      title: StartImportRequest
      type: object
    V2BotName:
      maxLength: 100
      minLength: 1
      pattern: "^([0-9a-zA-Z][_-]?)+$"
      type: string
    StartMigrationRequest:
      example:
        v2BotName: ""
        v1BotVersion: ""
        v2BotRole: ""
        v1BotName: ""
        migrationStrategy: ""
      properties:
        v1BotName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the Amazon Lex V1 bot that you are migrating
              to Amazon Lex V2.
        v1BotVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          - description: The version of the bot to migrate to Amazon Lex V2. You can
              migrate the <code>$LATEST</code> version as well as any numbered version.
        v2BotName:
          allOf:
          - $ref: '#/components/schemas/V2BotName'
          - description: "<p>The name of the Amazon Lex V2 bot that you are migrating\
              \ the Amazon Lex V1 bot to. </p> <ul> <li> <p>If the Amazon Lex V2 bot\
              \ doesn't exist, you must use the <code>CREATE_NEW</code> migration\
              \ strategy.</p> </li> <li> <p>If the Amazon Lex V2 bot exists, you must\
              \ use the <code>UPDATE_EXISTING</code> migration strategy to change\
              \ the contents of the Amazon Lex V2 bot.</p> </li> </ul>"
        v2BotRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          - description: The IAM role that Amazon Lex uses to run the Amazon Lex V2
              bot.
        migrationStrategy:
          allOf:
          - $ref: '#/components/schemas/MigrationStrategy'
          - description: "<p>The strategy used to conduct the migration.</p> <ul>\
              \ <li> <p> <code>CREATE_NEW</code> - Creates a new Amazon Lex V2 bot\
              \ and migrates the Amazon Lex V1 bot to the new bot.</p> </li> <li>\
              \ <p> <code>UPDATE_EXISTING</code> - Overwrites the existing Amazon\
              \ Lex V2 bot metadata and the locale being migrated. It doesn't change\
              \ any other locales in the Amazon Lex V2 bot. If the locale doesn't\
              \ exist, a new locale is created in the Amazon Lex V2 bot.</p> </li>\
              \ </ul>"
      required:
      - migrationStrategy
      - v1BotName
      - v1BotVersion
      - v2BotName
      - v2BotRole
      title: StartMigrationRequest
      type: object
    TagValue:
      maxLength: 256
      minLength: 0
      type: string
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 200
      minItems: 0
      type: array
    TagResourceRequest:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "A list of tag keys to add to the resource. If a tag key\
              \ already exists, the existing value is replaced with the new value."
      required:
      - tags
      title: TagResourceRequest
      type: object
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UtteranceString:
      maxLength: 2000
      minLength: 1
      type: string
    CreateBotVersion_request:
      properties:
        checksum:
          description: "Identifies a specific revision of the <code>$LATEST</code>\
            \ version of the bot. If you specify a checksum and the <code>$LATEST</code>\
            \ version of the bot has a different checksum, a <code>PreconditionFailedException</code>\
            \ exception is returned and Amazon Lex doesn't publish a new version.\
            \ If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code>\
            \ version."
          type: string
      type: object
    CreateIntentVersion_request:
      properties:
        checksum:
          description: "Checksum of the <code>$LATEST</code> version of the intent\
            \ that should be used to create the new version. If you specify a checksum\
            \ and the <code>$LATEST</code> version of the intent has a different checksum,\
            \ Amazon Lex returns a <code>PreconditionFailedException</code> exception\
            \ and doesn't publish a new version. If you don't specify a checksum,\
            \ Amazon Lex publishes the <code>$LATEST</code> version."
          type: string
      type: object
    CreateSlotTypeVersion_request:
      properties:
        checksum:
          description: "Checksum for the <code>$LATEST</code> version of the slot\
            \ type that you want to publish. If you specify a checksum and the <code>$LATEST</code>\
            \ version of the slot type has a different checksum, Amazon Lex returns\
            \ a <code>PreconditionFailedException</code> exception and doesn't publish\
            \ the new version. If you don't specify a checksum, Amazon Lex publishes\
            \ the <code>$LATEST</code> version."
          type: string
      type: object
    PutBotAlias_request_conversationLogs:
      description: Provides the settings needed for conversation logs.
      properties:
        logSettings:
          allOf:
          - $ref: '#/components/schemas/LogSettingsRequestList'
          - description: "The settings for your conversation logs. You can log the\
              \ conversation text, conversation audio, or both."
        iamRoleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          - description: "The Amazon Resource Name (ARN) of an IAM role with permission\
              \ to write to your CloudWatch Logs for text logs and your S3 bucket\
              \ for audio logs. If audio encryption is enabled, this role also provides\
              \ access permission for the AWS KMS key used for encrypting audio logs.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/conversation-logs-role-and-policy.html\"\
              >Creating an IAM Role and Policy for Conversation Logs</a>."
      type: object
    PutBotAlias_request:
      properties:
        description:
          description: A description of the alias.
          maxLength: 200
          minLength: 0
          type: string
        botVersion:
          description: The version of the bot.
          maxLength: 64
          minLength: 1
          pattern: "\\$LATEST|[0-9]+"
          type: string
        checksum:
          description: "<p>Identifies a specific revision of the <code>$LATEST</code>\
            \ version.</p> <p>When you create a new bot alias, leave the <code>checksum</code>\
            \ field blank. If you specify a checksum you get a <code>BadRequestException</code>\
            \ exception.</p> <p>When you want to update a bot alias, set the <code>checksum</code>\
            \ field to the checksum of the most recent revision of the <code>$LATEST</code>\
            \ version. If you don't specify the <code> checksum</code> field, or if\
            \ the checksum does not match the <code>$LATEST</code> version, you get\
            \ a <code>PreconditionFailedException</code> exception.</p>"
          type: string
        conversationLogs:
          $ref: '#/components/schemas/PutBotAlias_request_conversationLogs'
        tags:
          description: "A list of tags to add to the bot alias. You can only add tags\
            \ when you create an alias, you can't use the <code>PutBotAlias</code>\
            \ operation to update the tags on a bot alias. To update tags, use the\
            \ <code>TagResource</code> operation."
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
          type: array
      required:
      - botVersion
      type: object
    StartMigration_request:
      properties:
        v1BotName:
          description: The name of the Amazon Lex V1 bot that you are migrating to
            Amazon Lex V2.
          maxLength: 50
          minLength: 2
          pattern: "^([A-Za-z]_?)+$"
          type: string
        v1BotVersion:
          description: The version of the bot to migrate to Amazon Lex V2. You can
            migrate the <code>$LATEST</code> version as well as any numbered version.
          maxLength: 64
          minLength: 1
          pattern: "\\$LATEST|[0-9]+"
          type: string
        v2BotName:
          description: "<p>The name of the Amazon Lex V2 bot that you are migrating\
            \ the Amazon Lex V1 bot to. </p> <ul> <li> <p>If the Amazon Lex V2 bot\
            \ doesn't exist, you must use the <code>CREATE_NEW</code> migration strategy.</p>\
            \ </li> <li> <p>If the Amazon Lex V2 bot exists, you must use the <code>UPDATE_EXISTING</code>\
            \ migration strategy to change the contents of the Amazon Lex V2 bot.</p>\
            \ </li> </ul>"
          maxLength: 100
          minLength: 1
          pattern: "^([0-9a-zA-Z][_-]?)+$"
          type: string
        v2BotRole:
          description: The IAM role that Amazon Lex uses to run the Amazon Lex V2
            bot.
          maxLength: 2048
          minLength: 20
          pattern: "^arn:[\\w\\-]+:iam::[\\d]{12}:role/.+$"
          type: string
        migrationStrategy:
          description: "<p>The strategy used to conduct the migration.</p> <ul> <li>\
            \ <p> <code>CREATE_NEW</code> - Creates a new Amazon Lex V2 bot and migrates\
            \ the Amazon Lex V1 bot to the new bot.</p> </li> <li> <p> <code>UPDATE_EXISTING</code>\
            \ - Overwrites the existing Amazon Lex V2 bot metadata and the locale\
            \ being migrated. It doesn't change any other locales in the Amazon Lex\
            \ V2 bot. If the locale doesn't exist, a new locale is created in the\
            \ Amazon Lex V2 bot.</p> </li> </ul>"
          enum:
          - CREATE_NEW
          - UPDATE_EXISTING
          type: string
      required:
      - migrationStrategy
      - v1BotName
      - v1BotVersion
      - v2BotName
      - v2BotRole
      type: object
    TagResource_request:
      properties:
        tags:
          description: "A list of tag keys to add to the resource. If a tag key already\
            \ exists, the existing value is replaced with the new value."
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
          type: array
      required:
      - tags
      type: object
    PutBot_request_clarificationPrompt:
      description: "Obtains information from the user. To define a prompt, provide\
        \ one or more messages and specify the number of attempts to get information\
        \ from the user. If you provide more than one message, Amazon Lex chooses\
        \ one of the messages to use to prompt the user. For more information, see\
        \ <a>how-it-works</a>."
      properties:
        messages:
          allOf:
          - $ref: '#/components/schemas/MessageList'
          - description: "An array of objects, each of which provides a message string\
              \ and its type. You can specify the message string in plain text or\
              \ in Speech Synthesis Markup Language (SSML)."
        maxAttempts:
          allOf:
          - $ref: '#/components/schemas/PromptMaxAttempts'
          - description: The number of times to prompt the user for information.
        responseCard:
          allOf:
          - $ref: '#/components/schemas/ResponseCard'
          - description: "A response card. Amazon Lex uses this prompt at runtime,\
              \ in the <code>PostText</code> API response. It substitutes session\
              \ attributes and slot values for placeholders in the response card.\
              \ For more information, see <a>ex-resp-card</a>. "
      type: object
    PutBot_request_abortStatement:
      description: "A collection of messages that convey information to the user.\
        \ At runtime, Amazon Lex selects the message to convey. "
      properties:
        messages:
          allOf:
          - $ref: '#/components/schemas/MessageList'
          - description: A collection of message objects.
        responseCard:
          allOf:
          - $ref: '#/components/schemas/ResponseCard'
          - description: " At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\"\
              >PostText</a> API, Amazon Lex includes the response card in the response.\
              \ It substitutes all of the session attributes and slot values for placeholders\
              \ in the response card. "
      type: object
    PutBot_request:
      properties:
        description:
          description: A description of the bot.
          maxLength: 200
          minLength: 0
          type: string
        intents:
          description: "An array of <code>Intent</code> objects. Each intent represents\
            \ a command that a user can express. For example, a pizza ordering bot\
            \ might support an OrderPizza intent. For more information, see <a>how-it-works</a>."
          items:
            $ref: '#/components/schemas/Intent'
          type: array
        enableModelImprovements:
          description: "<p>Set to <code>true</code> to enable access to natural language\
            \ understanding improvements. </p> <p>When you set the <code>enableModelImprovements</code>\
            \ parameter to <code>true</code> you can use the <code>nluIntentConfidenceThreshold</code>\
            \ parameter to configure confidence scores. For more information, see\
            \ <a href=\"https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\"\
            >Confidence Scores</a>.</p> <p>You can only set the <code>enableModelImprovements</code>\
            \ parameter in certain Regions. If you set the parameter to <code>true</code>,\
            \ your bot has access to accuracy improvements.</p> <p>The Regions where\
            \ you can set the <code>enableModelImprovements</code> parameter to <code>true</code>\
            \ are:</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li>\
            \ <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney)\
            \ (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li>\
            \ </ul> <p>In other Regions, the <code>enableModelImprovements</code>\
            \ parameter is set to <code>true</code> by default. In these Regions setting\
            \ the parameter to <code>false</code> throws a <code>ValidationException</code>\
            \ exception.</p>"
          type: boolean
        nluIntentConfidenceThreshold:
          description: "<p>Determines the threshold where Amazon Lex will insert the\
            \ <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>,\
            \ or both when returning alternative intents in a <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\"\
            >PostContent</a> or <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\"\
            >PostText</a> response. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code>\
            \ are only inserted if they are configured for the bot.</p> <p>You must\
            \ set the <code>enableModelImprovements</code> parameter to <code>true</code>\
            \ to use confidence scores in the following regions.</p> <ul> <li> <p>US\
            \ East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p>\
            \ </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li>\
            \ <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the\
            \ <code>enableModelImprovements</code> parameter is set to <code>true</code>\
            \ by default.</p> <p>For example, suppose a bot is configured with the\
            \ confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>.\
            \ Amazon Lex returns three alternative intents with the following confidence\
            \ scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response\
            \ from the <code>PostText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p>\
            \ </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p>\
            \ </li> </ul>"
          format: double
          maximum: 1
          minimum: 0
          type: number
        clarificationPrompt:
          $ref: '#/components/schemas/PutBot_request_clarificationPrompt'
        abortStatement:
          $ref: '#/components/schemas/PutBot_request_abortStatement'
        idleSessionTTLInSeconds:
          description: "<p>The maximum time in seconds that Amazon Lex retains the\
            \ data gathered in a conversation.</p> <p>A user interaction session remains\
            \ active for the amount of time specified. If no conversation occurs during\
            \ this time, the session expires and Amazon Lex deletes any data provided\
            \ before the timeout.</p> <p>For example, suppose that a user chooses\
            \ the OrderPizza intent, but gets sidetracked halfway through placing\
            \ an order. If the user doesn't complete the order within the specified\
            \ time, Amazon Lex discards the slot information that it gathered, and\
            \ the user must start over.</p> <p>If you don't include the <code>idleSessionTTLInSeconds</code>\
            \ element in a <code>PutBot</code> operation request, Amazon Lex uses\
            \ the default value. This is also true if the request replaces an existing\
            \ bot.</p> <p>The default is 300 seconds (5 minutes).</p>"
          maximum: 86400
          minimum: 60
          type: integer
        voiceId:
          description: "The Amazon Polly voice ID that you want Amazon Lex to use\
            \ for voice interactions with the user. The locale configured for the\
            \ voice must match the locale of the bot. For more information, see <a\
            \ href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\"\
            >Voices in Amazon Polly</a> in the <i>Amazon Polly Developer Guide</i>."
          type: string
        checksum:
          description: "<p>Identifies a specific revision of the <code>$LATEST</code>\
            \ version.</p> <p>When you create a new bot, leave the <code>checksum</code>\
            \ field blank. If you specify a checksum you get a <code>BadRequestException</code>\
            \ exception.</p> <p>When you want to update a bot, set the <code>checksum</code>\
            \ field to the checksum of the most recent revision of the <code>$LATEST</code>\
            \ version. If you don't specify the <code> checksum</code> field, or if\
            \ the checksum does not match the <code>$LATEST</code> version, you get\
            \ a <code>PreconditionFailedException</code> exception.</p>"
          type: string
        processBehavior:
          description: "<p>If you set the <code>processBehavior</code> element to\
            \ <code>BUILD</code>, Amazon Lex builds the bot so that it can be run.\
            \ If you set the element to <code>SAVE</code> Amazon Lex saves the bot,\
            \ but doesn't build it. </p> <p>If you don't specify this value, the default\
            \ value is <code>BUILD</code>.</p>"
          enum:
          - SAVE
          - BUILD
          type: string
        locale:
          description: <p> Specifies the target locale for the bot. Any intent used
            in the bot must be compatible with the locale of the bot. </p> <p>The
            default is <code>en-US</code>.</p>
          enum:
          - de-DE
          - en-AU
          - en-GB
          - en-IN
          - en-US
          - es-419
          - es-ES
          - es-US
          - fr-FR
          - fr-CA
          - it-IT
          - ja-JP
          - ko-KR
          type: string
        childDirected:
          description: "<p>For each Amazon Lex bot created with the Amazon Lex Model\
            \ Building Service, you must specify whether your use of Amazon Lex is\
            \ related to a website, program, or other application that is directed\
            \ or targeted, in whole or in part, to children under age 13 and subject\
            \ to the Children's Online Privacy Protection Act (COPPA) by specifying\
            \ <code>true</code> or <code>false</code> in the <code>childDirected</code>\
            \ field. By specifying <code>true</code> in the <code>childDirected</code>\
            \ field, you confirm that your use of Amazon Lex <b>is</b> related to\
            \ a website, program, or other application that is directed or targeted,\
            \ in whole or in part, to children under age 13 and subject to COPPA.\
            \ By specifying <code>false</code> in the <code>childDirected</code> field,\
            \ you confirm that your use of Amazon Lex <b>is not</b> related to a website,\
            \ program, or other application that is directed or targeted, in whole\
            \ or in part, to children under age 13 and subject to COPPA. You may not\
            \ specify a default value for the <code>childDirected</code> field that\
            \ does not accurately reflect whether your use of Amazon Lex is related\
            \ to a website, program, or other application that is directed or targeted,\
            \ in whole or in part, to children under age 13 and subject to COPPA.</p>\
            \ <p>If your use of Amazon Lex relates to a website, program, or other\
            \ application that is directed in whole or in part, to children under\
            \ age 13, you must obtain any required verifiable parental consent under\
            \ COPPA. For information regarding the use of Amazon Lex in connection\
            \ with websites, programs, or other applications that are directed or\
            \ targeted, in whole or in part, to children under age 13, see the <a\
            \ href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a>\
            \ </p>"
          type: boolean
        detectSentiment:
          description: "When set to <code>true</code> user utterances are sent to\
            \ Amazon Comprehend for sentiment analysis. If you don't specify <code>detectSentiment</code>,\
            \ the default is <code>false</code>."
          type: boolean
        createVersion:
          description: "When set to <code>true</code> a new numbered version of the\
            \ bot is created. This is the same as calling the <code>CreateBotVersion</code>\
            \ operation. If you don't specify <code>createVersion</code>, the default\
            \ is <code>false</code>."
          type: boolean
        tags:
          description: "A list of tags to add to the bot. You can only add tags when\
            \ you create a bot, you can't use the <code>PutBot</code> operation to\
            \ update the tags on a bot. To update tags, use the <code>TagResource</code>\
            \ operation."
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
          type: array
      required:
      - childDirected
      - locale
      type: object
    PutIntent_request_followUpPrompt_prompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: 'Prompts for information from the user. '
      example:
        maxAttempts: ""
        responseCard: ""
        messages: ""
    PutIntent_request_followUpPrompt_rejectionStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "If the user answers \"no\" to the question defined in the <code>prompt</code>\
          \ field, Amazon Lex responds with this statement to acknowledge that the\
          \ intent was canceled. "
      example:
        responseCard: ""
        messages: ""
    PutIntent_request_followUpPrompt:
      description: "A prompt for additional activity after an intent is fulfilled.\
        \ For example, after the <code>OrderPizza</code> intent is fulfilled, you\
        \ might prompt the user to find out whether the user wants to order drinks."
      properties:
        prompt:
          $ref: '#/components/schemas/PutIntent_request_followUpPrompt_prompt'
        rejectionStatement:
          $ref: '#/components/schemas/PutIntent_request_followUpPrompt_rejectionStatement'
      type: object
    PutIntent_request_dialogCodeHook:
      description: Specifies a Lambda function that verifies requests to a bot or
        fulfills the user's request to a bot..
      properties:
        uri:
          allOf:
          - $ref: '#/components/schemas/LambdaARN'
          - description: The Amazon Resource Name (ARN) of the Lambda function.
        messageVersion:
          allOf:
          - $ref: '#/components/schemas/MessageVersion'
          - description: "The version of the request-response that you want Amazon\
              \ Lex to use to invoke your Lambda function. For more information, see\
              \ <a>using-lambda</a>."
      type: object
    PutIntent_request_fulfillmentActivity_codeHook:
      allOf:
      - $ref: '#/components/schemas/CodeHook'
      - description: ' A description of the Lambda function that is run to fulfill
          the intent. '
      example:
        messageVersion: ""
        uri: ""
    PutIntent_request_fulfillmentActivity:
      description: "<p> Describes how the intent is fulfilled after the user provides\
        \ all of the information required for the intent. You can provide a Lambda\
        \ function to process the intent, or you can return the intent information\
        \ to the client application. We recommend that you use a Lambda function so\
        \ that the relevant logic lives in the Cloud and limit the client-side code\
        \ primarily to presentation. If you need to update the logic, you only update\
        \ the Lambda function; you don't need to upgrade your client application.\
        \ </p> <p>Consider the following examples:</p> <ul> <li> <p>In a pizza ordering\
        \ application, after the user provides all of the information for placing\
        \ an order, you use a Lambda function to place an order with a pizzeria. </p>\
        \ </li> <li> <p>In a gaming application, when a user says \"pick up a rock,\"\
        \ this information must go back to the client application so that it can perform\
        \ the operation and update the graphics. In this case, you want Amazon Lex\
        \ to return the intent data to the client. </p> </li> </ul>"
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/FulfillmentActivityType'
          - description: " How the intent should be fulfilled, either by running a\
              \ Lambda function or by returning the slot data to the client application. "
        codeHook:
          $ref: '#/components/schemas/PutIntent_request_fulfillmentActivity_codeHook'
      type: object
    PutIntent_request_kendraConfiguration:
      description: "Provides configuration information for the AMAZON.KendraSearchIntent\
        \ intent. When you use this intent, Amazon Lex searches the specified Amazon\
        \ Kendra index and returns documents from the index that match the user's\
        \ utterance. For more information, see <a href=\"http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html\"\
        > AMAZON.KendraSearchIntent</a>."
      properties:
        kendraIndex:
          allOf:
          - $ref: '#/components/schemas/KendraIndexArn'
          - description: "The Amazon Resource Name (ARN) of the Amazon Kendra index\
              \ that you want the AMAZON.KendraSearchIntent intent to search. The\
              \ index must be in the same account and Region as the Amazon Lex bot.\
              \ If the Amazon Kendra index does not exist, you get an exception when\
              \ you call the <code>PutIntent</code> operation."
        queryFilterString:
          allOf:
          - $ref: '#/components/schemas/QueryFilterString'
          - description: "<p>A query filter that Amazon Lex sends to Amazon Kendra\
              \ to filter the response from the query. The filter is in the format\
              \ defined by Amazon Kendra. For more information, see <a href=\"http://docs.aws.amazon.com/kendra/latest/dg/filtering.html\"\
              >Filtering queries</a>.</p> <p>You can override this filter string with\
              \ a new filter string at runtime.</p>"
        role:
          allOf:
          - $ref: '#/components/schemas/roleArn'
          - description: "The Amazon Resource Name (ARN) of an IAM role that has permission\
              \ to search the Amazon Kendra index. The role must be in the same account\
              \ and Region as the Amazon Lex bot. If the role does not exist, you\
              \ get an exception when you call the <code>PutIntent</code> operation."
      type: object
    PutIntent_request:
      properties:
        description:
          description: A description of the intent.
          maxLength: 200
          minLength: 0
          type: string
        slots:
          description: "An array of intent slots. At runtime, Amazon Lex elicits required\
            \ slot values from the user using prompts defined in the slots. For more\
            \ information, see <a>how-it-works</a>. "
          items:
            $ref: '#/components/schemas/Slot'
          maxItems: 100
          minItems: 0
          type: array
        sampleUtterances:
          description: "<p>An array of utterances (strings) that a user might say\
            \ to signal the intent. For example, \"I want {PizzaSize} pizza\", \"\
            Order {Quantity} {PizzaSize} pizzas\". </p> <p>In each utterance, a slot\
            \ name is enclosed in curly braces. </p>"
          items:
            $ref: '#/components/schemas/Utterance'
          maxItems: 1500
          minItems: 0
          type: array
        confirmationPrompt:
          $ref: '#/components/schemas/PutBot_request_clarificationPrompt'
        rejectionStatement:
          $ref: '#/components/schemas/PutBot_request_abortStatement'
        followUpPrompt:
          $ref: '#/components/schemas/PutIntent_request_followUpPrompt'
        conclusionStatement:
          $ref: '#/components/schemas/PutBot_request_abortStatement'
        dialogCodeHook:
          $ref: '#/components/schemas/PutIntent_request_dialogCodeHook'
        fulfillmentActivity:
          $ref: '#/components/schemas/PutIntent_request_fulfillmentActivity'
        parentIntentSignature:
          description: "A unique identifier for the built-in intent to base this intent\
            \ on. To find the signature for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\"\
            >Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>."
          type: string
        checksum:
          description: "<p>Identifies a specific revision of the <code>$LATEST</code>\
            \ version.</p> <p>When you create a new intent, leave the <code>checksum</code>\
            \ field blank. If you specify a checksum you get a <code>BadRequestException</code>\
            \ exception.</p> <p>When you want to update a intent, set the <code>checksum</code>\
            \ field to the checksum of the most recent revision of the <code>$LATEST</code>\
            \ version. If you don't specify the <code> checksum</code> field, or if\
            \ the checksum does not match the <code>$LATEST</code> version, you get\
            \ a <code>PreconditionFailedException</code> exception.</p>"
          type: string
        createVersion:
          description: "When set to <code>true</code> a new numbered version of the\
            \ intent is created. This is the same as calling the <code>CreateIntentVersion</code>\
            \ operation. If you do not specify <code>createVersion</code>, the default\
            \ is <code>false</code>."
          type: boolean
        kendraConfiguration:
          $ref: '#/components/schemas/PutIntent_request_kendraConfiguration'
        inputContexts:
          description: An array of <code>InputContext</code> objects that lists the
            contexts that must be active for Amazon Lex to choose the intent in a
            conversation with the user.
          items:
            $ref: '#/components/schemas/InputContext'
          maxItems: 5
          minItems: 0
          type: array
        outputContexts:
          description: An array of <code>OutputContext</code> objects that lists the
            contexts that the intent activates when the intent is fulfilled.
          items:
            $ref: '#/components/schemas/OutputContext'
          maxItems: 10
          minItems: 0
          type: array
      type: object
    PutSlotType_request:
      properties:
        description:
          description: A description of the slot type.
          maxLength: 200
          minLength: 0
          type: string
        enumerationValues:
          description: "<p>A list of <code>EnumerationValue</code> objects that defines\
            \ the values that the slot type can take. Each value can have a list of\
            \ <code>synonyms</code>, which are additional values that help train the\
            \ machine learning model about the values that it resolves for a slot.\
            \ </p> <p>A regular expression slot type doesn't require enumeration values.\
            \ All other slot types require a list of enumeration values.</p> <p>When\
            \ Amazon Lex resolves a slot value, it generates a resolution list that\
            \ contains up to five possible values for the slot. If you are using a\
            \ Lambda function, this resolution list is passed to the function. If\
            \ you are not using a Lambda function you can choose to return the value\
            \ that the user entered or the first value in the resolution list as the\
            \ slot value. The <code>valueSelectionStrategy</code> field indicates\
            \ the option to use. </p>"
          items:
            $ref: '#/components/schemas/EnumerationValue'
          maxItems: 10000
          minItems: 0
          type: array
        checksum:
          description: "<p>Identifies a specific revision of the <code>$LATEST</code>\
            \ version.</p> <p>When you create a new slot type, leave the <code>checksum</code>\
            \ field blank. If you specify a checksum you get a <code>BadRequestException</code>\
            \ exception.</p> <p>When you want to update a slot type, set the <code>checksum</code>\
            \ field to the checksum of the most recent revision of the <code>$LATEST</code>\
            \ version. If you don't specify the <code> checksum</code> field, or if\
            \ the checksum does not match the <code>$LATEST</code> version, you get\
            \ a <code>PreconditionFailedException</code> exception.</p>"
          type: string
        valueSelectionStrategy:
          description: "<p>Determines the slot resolution strategy that Amazon Lex\
            \ uses to return slot type values. The field can be set to one of the\
            \ following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> - Returns\
            \ the value entered by the user, if the user value is similar to the slot\
            \ value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code> - If there is\
            \ a resolution list for the slot, return the first value in the resolution\
            \ list as the slot type value. If there is no resolution list, null is\
            \ returned.</p> </li> </ul> <p>If you don't specify the <code>valueSelectionStrategy</code>,\
            \ the default is <code>ORIGINAL_VALUE</code>.</p>"
          enum:
          - ORIGINAL_VALUE
          - TOP_RESOLUTION
          type: string
        createVersion:
          description: "When set to <code>true</code> a new numbered version of the\
            \ slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code>\
            \ operation. If you do not specify <code>createVersion</code>, the default\
            \ is <code>false</code>."
          type: boolean
        parentSlotTypeSignature:
          description: "<p>The built-in slot type used as the parent of the slot type.\
            \ When you define a parent slot type, the new slot type has all of the\
            \ same configuration as the parent.</p> <p>Only <code>AMAZON.AlphaNumeric</code>\
            \ is supported.</p>"
          maxLength: 100
          minLength: 1
          pattern: "^((AMAZON\\.)_?|[A-Za-z]_?)+"
          type: string
        slotTypeConfigurations:
          description: Configuration information that extends the parent built-in
            slot type. The configuration is added to the settings for the parent slot
            type.
          items:
            $ref: '#/components/schemas/SlotTypeConfiguration'
          maxItems: 10
          minItems: 0
          type: array
      type: object
    StartImport_request:
      properties:
        payload:
          description: "A zip archive in binary format. The archive should contain\
            \ one file, a JSON file containing the resource to import. The resource\
            \ should match the type specified in the <code>resourceType</code> field."
          type: string
        resourceType:
          description: <p>Specifies the type of resource to export. Each resource
            also exports any resources that it depends on. </p> <ul> <li> <p>A bot
            exports dependent intents.</p> </li> <li> <p>An intent exports dependent
            slot types.</p> </li> </ul>
          enum:
          - BOT
          - INTENT
          - SLOT_TYPE
          type: string
        mergeStrategy:
          description: <p>Specifies the action that the <code>StartImport</code> operation
            should take when there is an existing resource with the same name.</p>
            <ul> <li> <p>FAIL_ON_CONFLICT - The import operation is stopped on the
            first conflict between a resource in the import file and an existing resource.
            The name of the resource causing the conflict is in the <code>failureReason</code>
            field of the response to the <code>GetImport</code> operation.</p> <p>OVERWRITE_LATEST
            - The import operation proceeds even if there is a conflict with an existing
            resource. The $LASTEST version of the existing resource is overwritten
            with the data from the import file.</p> </li> </ul>
          enum:
          - OVERWRITE_LATEST
          - FAIL_ON_CONFLICT
          type: string
        tags:
          description: "A list of tags to add to the imported bot. You can only add\
            \ tags when you import a bot, you can't add tags to an intent or slot\
            \ type."
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
          type: array
      required:
      - mergeStrategy
      - payload
      - resourceType
      type: object
    CreateBotVersionResponse_clarificationPrompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: "The message that Amazon Lex uses when it doesn't understand\
          \ the user's request. For more information, see <a>PutBot</a>. "
      example:
        maxAttempts: ""
        responseCard: ""
        messages: ""
    CreateBotVersionResponse_abortStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "The message that Amazon Lex uses to cancel a conversation. For\
          \ more information, see <a>PutBot</a>."
      example:
        responseCard: ""
        messages: ""
    CreateIntentVersionResponse_confirmationPrompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: "If defined, the prompt that Amazon Lex uses to confirm the user's\
          \ intent before fulfilling it. "
      example:
        maxAttempts: ""
        responseCard: ""
        messages: ""
    CreateIntentVersionResponse_rejectionStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "If the user answers \"no\" to the question defined in <code>confirmationPrompt</code>,\
          \ Amazon Lex responds with this statement to acknowledge that the intent\
          \ was canceled. "
      example:
        responseCard: ""
        messages: ""
    CreateIntentVersionResponse_followUpPrompt:
      allOf:
      - $ref: '#/components/schemas/FollowUpPrompt'
      - description: "If defined, Amazon Lex uses this prompt to solicit additional\
          \ user activity after the intent is fulfilled. "
      example:
        rejectionStatement:
          responseCard: ""
          messages: ""
        prompt:
          maxAttempts: ""
          responseCard: ""
          messages: ""
    CreateIntentVersionResponse_conclusionStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "After the Lambda function specified in the <code>fulfillmentActivity</code>\
          \ field fulfills the intent, Amazon Lex conveys this statement to the user. "
      example:
        responseCard: ""
        messages: ""
    CreateIntentVersionResponse_dialogCodeHook:
      allOf:
      - $ref: '#/components/schemas/CodeHook'
      - description: "If defined, Amazon Lex invokes this Lambda function for each\
          \ user input."
      example:
        messageVersion: ""
        uri: ""
    CreateIntentVersionResponse_fulfillmentActivity:
      allOf:
      - $ref: '#/components/schemas/FulfillmentActivity'
      - description: ' Describes how the intent is fulfilled. '
      example:
        type: ""
        codeHook:
          messageVersion: ""
          uri: ""
    CreateIntentVersionResponse_kendraConfiguration:
      allOf:
      - $ref: '#/components/schemas/KendraConfiguration'
      - description: "Configuration information, if any, for connecting an Amazon\
          \ Kendra index with the <code>AMAZON.KendraSearchIntent</code> intent."
      example:
        kendraIndex: ""
        role: ""
        queryFilterString: ""
    GetBotResponse_clarificationPrompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: "The message Amazon Lex uses when it doesn't understand the user's\
          \ request. For more information, see <a>PutBot</a>. "
    GetBotResponse_abortStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "The message that Amazon Lex returns when the user elects to\
          \ end the conversation without completing it. For more information, see\
          \ <a>PutBot</a>."
    GetBotAliasResponse_conversationLogs:
      allOf:
      - $ref: '#/components/schemas/ConversationLogsResponse'
      - description: The settings that determine how Amazon Lex uses conversation
          logs for the alias.
      example:
        iamRoleArn: ""
        logSettings: ""
    GetIntentResponse_confirmationPrompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: "If defined in the bot, Amazon Lex uses prompt to confirm the\
          \ intent before fulfilling the user's request. For more information, see\
          \ <a>PutIntent</a>. "
    GetIntentResponse_followUpPrompt:
      allOf:
      - $ref: '#/components/schemas/FollowUpPrompt'
      - description: "If defined in the bot, Amazon Lex uses this prompt to solicit\
          \ additional user activity after the intent is fulfilled. For more information,\
          \ see <a>PutIntent</a>."
    GetIntentResponse_conclusionStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "After the Lambda function specified in the <code>fulfillmentActivity</code>\
          \ element fulfills the intent, Amazon Lex conveys this statement to the\
          \ user."
    GetIntentResponse_dialogCodeHook:
      allOf:
      - $ref: '#/components/schemas/CodeHook'
      - description: "If defined in the bot, Amazon Amazon Lex invokes this Lambda\
          \ function for each user input. For more information, see <a>PutIntent</a>. "
    GetIntentResponse_fulfillmentActivity:
      allOf:
      - $ref: '#/components/schemas/FulfillmentActivity'
      - description: "Describes how the intent is fulfilled. For more information,\
          \ see <a>PutIntent</a>. "
    GetIntentResponse_kendraConfiguration:
      allOf:
      - $ref: '#/components/schemas/KendraConfiguration'
      - description: "Configuration information, if any, to connect to an Amazon Kendra\
          \ index with the <code>AMAZON.KendraSearchIntent</code> intent."
    PutBotResponse_clarificationPrompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: " The prompts that Amazon Lex uses when it doesn't understand\
          \ the user's intent. For more information, see <a>PutBot</a>. "
    PutIntentResponse_confirmationPrompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: "If defined in the intent, Amazon Lex prompts the user to confirm\
          \ the intent before fulfilling it."
    PutIntentResponse_rejectionStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: 'If the user answers "no" to the question defined in <code>confirmationPrompt</code>
          Amazon Lex responds with this statement to acknowledge that the intent was
          canceled. '
    PutIntentResponse_followUpPrompt:
      allOf:
      - $ref: '#/components/schemas/FollowUpPrompt'
      - description: "If defined in the intent, Amazon Lex uses this prompt to solicit\
          \ additional user activity after the intent is fulfilled."
    PutIntentResponse_conclusionStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "After the Lambda function specified in the<code>fulfillmentActivity</code>intent\
          \ fulfills the intent, Amazon Lex conveys this statement to the user."
    PutIntentResponse_dialogCodeHook:
      allOf:
      - $ref: '#/components/schemas/CodeHook'
      - description: "If defined in the intent, Amazon Lex invokes this Lambda function\
          \ for each user input."
    PutIntentResponse_fulfillmentActivity:
      allOf:
      - $ref: '#/components/schemas/FulfillmentActivity'
      - description: "If defined in the intent, Amazon Lex invokes this Lambda function\
          \ to fulfill the intent after the user provides all of the information required\
          \ by the intent."
    PutIntentResponse_kendraConfiguration:
      allOf:
      - $ref: '#/components/schemas/KendraConfiguration'
      - description: "Configuration information, if any, required to connect to an\
          \ Amazon Kendra index and use the <code>AMAZON.KendraSearchIntent</code>\
          \ intent."
    Slot_valueElicitationPrompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: The prompt that Amazon Lex uses to elicit the slot value from
          the user.
    Slot_defaultValueSpec:
      allOf:
      - $ref: '#/components/schemas/SlotDefaultValueSpec'
      - description: "A list of default values for the slot. Default values are used\
          \ when Amazon Lex hasn't determined a value for a slot. You can specify\
          \ default values from context variables, session attributes, and defined\
          \ values."
    SlotTypeConfiguration_regexConfiguration:
      allOf:
      - $ref: '#/components/schemas/SlotTypeRegexConfiguration'
      - description: A regular expression used to validate the value of a slot.
    BotAliasMetadata_conversationLogs:
      allOf:
      - $ref: '#/components/schemas/ConversationLogsResponse'
      - description: Settings that determine how Amazon Lex uses conversation logs
          for the alias.
    PutBotAliasRequest_conversationLogs:
      allOf:
      - $ref: '#/components/schemas/ConversationLogsRequest'
      - description: Settings for conversation logs for the alias.
      example:
        iamRoleArn: ""
        logSettings: ""
    PutBotRequest_clarificationPrompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: "<p>When Amazon Lex doesn't understand the user's intent, it\
          \ uses this message to get clarification. To specify how many times Amazon\
          \ Lex should repeat the clarification prompt, use the <code>maxAttempts</code>\
          \ field. If Amazon Lex still doesn't understand, it sends the message in\
          \ the <code>abortStatement</code> field. </p> <p>When you create a clarification\
          \ prompt, make sure that it suggests the correct response from the user.\
          \ for example, for a bot that orders pizza and drinks, you might create\
          \ this clarification prompt: \"What would you like to do? You can say 'Order\
          \ a pizza' or 'Order a drink.'\"</p> <p>If you have defined a fallback intent,\
          \ it will be invoked if the clarification prompt is repeated the number\
          \ of times defined in the <code>maxAttempts</code> field. For more information,\
          \ see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/built-in-intent-fallback.html\"\
          > AMAZON.FallbackIntent</a>.</p> <p>If you don't define a clarification\
          \ prompt, at runtime Amazon Lex will return a 400 Bad Request exception\
          \ in three cases: </p> <ul> <li> <p>Follow-up prompt - When the user responds\
          \ to a follow-up prompt but does not provide an intent. For example, in\
          \ response to a follow-up prompt that says \"Would you like anything else\
          \ today?\" the user says \"Yes.\" Amazon Lex will return a 400 Bad Request\
          \ exception because it does not have a clarification prompt to send to the\
          \ user to get an intent.</p> </li> <li> <p>Lambda function - When using\
          \ a Lambda function, you return an <code>ElicitIntent</code> dialog type.\
          \ Since Amazon Lex does not have a clarification prompt to get an intent\
          \ from the user, it returns a 400 Bad Request exception.</p> </li> <li>\
          \ <p>PutSession operation - When using the <code>PutSession</code> operation,\
          \ you send an <code>ElicitIntent</code> dialog type. Since Amazon Lex does\
          \ not have a clarification prompt to get an intent from the user, it returns\
          \ a 400 Bad Request exception.</p> </li> </ul>"
      example:
        maxAttempts: ""
        responseCard: ""
        messages: ""
    PutBotRequest_abortStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "<p>When Amazon Lex can't understand the user's input in context,\
          \ it tries to elicit the information a few times. After that, Amazon Lex\
          \ sends the message defined in <code>abortStatement</code> to the user,\
          \ and then cancels the conversation. To set the number of retries, use the\
          \ <code>valueElicitationPrompt</code> field for the slot type. </p> <p>For\
          \ example, in a pizza ordering bot, Amazon Lex might ask a user \"What type\
          \ of crust would you like?\" If the user's response is not one of the expected\
          \ responses (for example, \"thin crust, \"deep dish,\" etc.), Amazon Lex\
          \ tries to elicit a correct response a few more times. </p> <p>For example,\
          \ in a pizza ordering application, <code>OrderPizza</code> might be one\
          \ of the intents. This intent might require the <code>CrustType</code> slot.\
          \ You specify the <code>valueElicitationPrompt</code> field when you create\
          \ the <code>CrustType</code> slot.</p> <p>If you have defined a fallback\
          \ intent the cancel statement will not be sent to the user, the fallback\
          \ intent is used instead. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/built-in-intent-fallback.html\"\
          > AMAZON.FallbackIntent</a>.</p>"
      example:
        responseCard: ""
        messages: ""
    PutIntentRequest_confirmationPrompt:
      allOf:
      - $ref: '#/components/schemas/Prompt'
      - description: "<p>Prompts the user to confirm the intent. This question should\
          \ have a yes or no answer.</p> <p>Amazon Lex uses this prompt to ensure\
          \ that the user acknowledges that the intent is ready for fulfillment. For\
          \ example, with the <code>OrderPizza</code> intent, you might want to confirm\
          \ that the order is correct before placing it. For other intents, such as\
          \ intents that simply respond to user questions, you might not need to ask\
          \ the user for confirmation before providing the information. </p> <note>\
          \ <p>You you must provide both the <code>rejectionStatement</code> and the\
          \ <code>confirmationPrompt</code>, or neither.</p> </note>"
      example:
        maxAttempts: ""
        responseCard: ""
        messages: ""
    PutIntentRequest_rejectionStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "<p>When the user answers \"no\" to the question defined in <code>confirmationPrompt</code>,\
          \ Amazon Lex responds with this statement to acknowledge that the intent\
          \ was canceled. </p> <note> <p>You must provide both the <code>rejectionStatement</code>\
          \ and the <code>confirmationPrompt</code>, or neither.</p> </note>"
      example:
        responseCard: ""
        messages: ""
    PutIntentRequest_followUpPrompt:
      allOf:
      - $ref: '#/components/schemas/FollowUpPrompt'
      - description: "<p>Amazon Lex uses this prompt to solicit additional activity\
          \ after fulfilling an intent. For example, after the <code>OrderPizza</code>\
          \ intent is fulfilled, you might prompt the user to order a drink.</p> <p>The\
          \ action that Amazon Lex takes depends on the user's response, as follows:</p>\
          \ <ul> <li> <p>If the user says \"Yes\" it responds with the clarification\
          \ prompt that is configured for the bot.</p> </li> <li> <p>if the user says\
          \ \"Yes\" and continues with an utterance that triggers an intent it starts\
          \ a conversation for the intent.</p> </li> <li> <p>If the user says \"No\"\
          \ it responds with the rejection statement configured for the the follow-up\
          \ prompt.</p> </li> <li> <p>If it doesn't recognize the utterance it repeats\
          \ the follow-up prompt again.</p> </li> </ul> <p>The <code>followUpPrompt</code>\
          \ field and the <code>conclusionStatement</code> field are mutually exclusive.\
          \ You can specify only one. </p>"
      example:
        rejectionStatement:
          responseCard: ""
          messages: ""
        prompt:
          maxAttempts: ""
          responseCard: ""
          messages: ""
    PutIntentRequest_conclusionStatement:
      allOf:
      - $ref: '#/components/schemas/Statement'
      - description: "<p> The statement that you want Amazon Lex to convey to the\
          \ user after the intent is successfully fulfilled by the Lambda function.\
          \ </p> <p>This element is relevant only if you provide a Lambda function\
          \ in the <code>fulfillmentActivity</code>. If you return the intent to the\
          \ client application, you can't specify this element.</p> <note> <p>The\
          \ <code>followUpPrompt</code> and <code>conclusionStatement</code> are mutually\
          \ exclusive. You can specify only one.</p> </note>"
      example:
        responseCard: ""
        messages: ""
    PutIntentRequest_dialogCodeHook:
      allOf:
      - $ref: '#/components/schemas/CodeHook'
      - description: "<p> Specifies a Lambda function to invoke for each user input.\
          \ You can invoke this Lambda function to personalize user interaction. </p>\
          \ <p>For example, suppose your bot determines that the user is John. Your\
          \ Lambda function might retrieve John's information from a backend database\
          \ and prepopulate some of the values. For example, if you find that John\
          \ is gluten intolerant, you might set the corresponding intent slot, <code>GlutenIntolerant</code>,\
          \ to true. You might find John's phone number and set the corresponding\
          \ session attribute. </p>"
      example:
        messageVersion: ""
        uri: ""
    PutIntentRequest_fulfillmentActivity:
      allOf:
      - $ref: '#/components/schemas/FulfillmentActivity'
      - description: "<p>Required. Describes how the intent is fulfilled. For example,\
          \ after a user provides all of the information for a pizza order, <code>fulfillmentActivity</code>\
          \ defines how the bot places an order with a local pizza store. </p> <p>\
          \ You might configure Amazon Lex to return all of the intent information\
          \ to the client application, or direct it to invoke a Lambda function that\
          \ can process the intent (for example, place an order with a pizzeria).\
          \ </p>"
      example:
        type: ""
        codeHook:
          messageVersion: ""
          uri: ""
    PutIntentRequest_kendraConfiguration:
      allOf:
      - $ref: '#/components/schemas/KendraConfiguration'
      - description: "Configuration information required to use the <code>AMAZON.KendraSearchIntent</code>\
          \ intent to connect to an Amazon Kendra index. For more information, see\
          \ <a href=\"http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html\"\
          > AMAZON.KendraSearchIntent</a>."
      example:
        kendraIndex: ""
        role: ""
        queryFilterString: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

