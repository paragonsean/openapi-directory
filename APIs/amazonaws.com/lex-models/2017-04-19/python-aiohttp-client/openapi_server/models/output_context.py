# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, time_to_live_in_seconds: int=None, turns_to_live: int=None):
        """OutputContext - a model defined in OpenAPI

        :param name: The name of this OutputContext.
        :param time_to_live_in_seconds: The time_to_live_in_seconds of this OutputContext.
        :param turns_to_live: The turns_to_live of this OutputContext.
        """
        self.openapi_types = {
            'name': str,
            'time_to_live_in_seconds': int,
            'turns_to_live': int
        }

        self.attribute_map = {
            'name': 'name',
            'time_to_live_in_seconds': 'timeToLiveInSeconds',
            'turns_to_live': 'turnsToLive'
        }

        self._name = name
        self._time_to_live_in_seconds = time_to_live_in_seconds
        self._turns_to_live = turns_to_live

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputContext of this OutputContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this OutputContext.


        :return: The name of this OutputContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OutputContext.


        :param name: The name of this OutputContext.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def time_to_live_in_seconds(self):
        """Gets the time_to_live_in_seconds of this OutputContext.


        :return: The time_to_live_in_seconds of this OutputContext.
        :rtype: int
        """
        return self._time_to_live_in_seconds

    @time_to_live_in_seconds.setter
    def time_to_live_in_seconds(self, time_to_live_in_seconds):
        """Sets the time_to_live_in_seconds of this OutputContext.


        :param time_to_live_in_seconds: The time_to_live_in_seconds of this OutputContext.
        :type time_to_live_in_seconds: int
        """
        if time_to_live_in_seconds is None:
            raise ValueError("Invalid value for `time_to_live_in_seconds`, must not be `None`")

        self._time_to_live_in_seconds = time_to_live_in_seconds

    @property
    def turns_to_live(self):
        """Gets the turns_to_live of this OutputContext.


        :return: The turns_to_live of this OutputContext.
        :rtype: int
        """
        return self._turns_to_live

    @turns_to_live.setter
    def turns_to_live(self, turns_to_live):
        """Sets the turns_to_live of this OutputContext.


        :param turns_to_live: The turns_to_live of this OutputContext.
        :type turns_to_live: int
        """
        if turns_to_live is None:
            raise ValueError("Invalid value for `turns_to_live`, must not be `None`")

        self._turns_to_live = turns_to_live
