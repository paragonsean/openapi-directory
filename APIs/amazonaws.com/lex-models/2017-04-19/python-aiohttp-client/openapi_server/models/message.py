# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_type import ContentType
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: ContentType=None, content: str=None, group_number: int=None):
        """Message - a model defined in OpenAPI

        :param content_type: The content_type of this Message.
        :param content: The content of this Message.
        :param group_number: The group_number of this Message.
        """
        self.openapi_types = {
            'content_type': ContentType,
            'content': str,
            'group_number': int
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'content': 'content',
            'group_number': 'groupNumber'
        }

        self._content_type = content_type
        self._content = content
        self._group_number = group_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this Message.


        :return: The content_type of this Message.
        :rtype: ContentType
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Message.


        :param content_type: The content_type of this Message.
        :type content_type: ContentType
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def content(self):
        """Gets the content of this Message.


        :return: The content of this Message.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Message.


        :param content: The content of this Message.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def group_number(self):
        """Gets the group_number of this Message.


        :return: The group_number of this Message.
        :rtype: int
        """
        return self._group_number

    @group_number.setter
    def group_number(self, group_number):
        """Sets the group_number of this Message.


        :param group_number: The group_number of this Message.
        :type group_number: int
        """

        self._group_number = group_number
