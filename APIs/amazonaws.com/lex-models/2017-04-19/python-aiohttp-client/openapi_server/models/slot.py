# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.obfuscation_setting import ObfuscationSetting
from openapi_server.models.slot_constraint import SlotConstraint
from openapi_server.models.slot_default_value_spec import SlotDefaultValueSpec
from openapi_server.models.slot_value_elicitation_prompt import SlotValueElicitationPrompt
from openapi_server import util


class Slot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, slot_constraint: SlotConstraint=None, slot_type: str=None, slot_type_version: str=None, value_elicitation_prompt: SlotValueElicitationPrompt=None, priority: int=None, sample_utterances: List=None, response_card: str=None, obfuscation_setting: ObfuscationSetting=None, default_value_spec: SlotDefaultValueSpec=None):
        """Slot - a model defined in OpenAPI

        :param name: The name of this Slot.
        :param description: The description of this Slot.
        :param slot_constraint: The slot_constraint of this Slot.
        :param slot_type: The slot_type of this Slot.
        :param slot_type_version: The slot_type_version of this Slot.
        :param value_elicitation_prompt: The value_elicitation_prompt of this Slot.
        :param priority: The priority of this Slot.
        :param sample_utterances: The sample_utterances of this Slot.
        :param response_card: The response_card of this Slot.
        :param obfuscation_setting: The obfuscation_setting of this Slot.
        :param default_value_spec: The default_value_spec of this Slot.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'slot_constraint': SlotConstraint,
            'slot_type': str,
            'slot_type_version': str,
            'value_elicitation_prompt': SlotValueElicitationPrompt,
            'priority': int,
            'sample_utterances': List,
            'response_card': str,
            'obfuscation_setting': ObfuscationSetting,
            'default_value_spec': SlotDefaultValueSpec
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'slot_constraint': 'slotConstraint',
            'slot_type': 'slotType',
            'slot_type_version': 'slotTypeVersion',
            'value_elicitation_prompt': 'valueElicitationPrompt',
            'priority': 'priority',
            'sample_utterances': 'sampleUtterances',
            'response_card': 'responseCard',
            'obfuscation_setting': 'obfuscationSetting',
            'default_value_spec': 'defaultValueSpec'
        }

        self._name = name
        self._description = description
        self._slot_constraint = slot_constraint
        self._slot_type = slot_type
        self._slot_type_version = slot_type_version
        self._value_elicitation_prompt = value_elicitation_prompt
        self._priority = priority
        self._sample_utterances = sample_utterances
        self._response_card = response_card
        self._obfuscation_setting = obfuscation_setting
        self._default_value_spec = default_value_spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Slot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Slot of this Slot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Slot.


        :return: The name of this Slot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Slot.


        :param name: The name of this Slot.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this Slot.


        :return: The description of this Slot.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Slot.


        :param description: The description of this Slot.
        :type description: str
        """

        self._description = description

    @property
    def slot_constraint(self):
        """Gets the slot_constraint of this Slot.


        :return: The slot_constraint of this Slot.
        :rtype: SlotConstraint
        """
        return self._slot_constraint

    @slot_constraint.setter
    def slot_constraint(self, slot_constraint):
        """Sets the slot_constraint of this Slot.


        :param slot_constraint: The slot_constraint of this Slot.
        :type slot_constraint: SlotConstraint
        """
        if slot_constraint is None:
            raise ValueError("Invalid value for `slot_constraint`, must not be `None`")

        self._slot_constraint = slot_constraint

    @property
    def slot_type(self):
        """Gets the slot_type of this Slot.


        :return: The slot_type of this Slot.
        :rtype: str
        """
        return self._slot_type

    @slot_type.setter
    def slot_type(self, slot_type):
        """Sets the slot_type of this Slot.


        :param slot_type: The slot_type of this Slot.
        :type slot_type: str
        """

        self._slot_type = slot_type

    @property
    def slot_type_version(self):
        """Gets the slot_type_version of this Slot.


        :return: The slot_type_version of this Slot.
        :rtype: str
        """
        return self._slot_type_version

    @slot_type_version.setter
    def slot_type_version(self, slot_type_version):
        """Sets the slot_type_version of this Slot.


        :param slot_type_version: The slot_type_version of this Slot.
        :type slot_type_version: str
        """

        self._slot_type_version = slot_type_version

    @property
    def value_elicitation_prompt(self):
        """Gets the value_elicitation_prompt of this Slot.


        :return: The value_elicitation_prompt of this Slot.
        :rtype: SlotValueElicitationPrompt
        """
        return self._value_elicitation_prompt

    @value_elicitation_prompt.setter
    def value_elicitation_prompt(self, value_elicitation_prompt):
        """Sets the value_elicitation_prompt of this Slot.


        :param value_elicitation_prompt: The value_elicitation_prompt of this Slot.
        :type value_elicitation_prompt: SlotValueElicitationPrompt
        """

        self._value_elicitation_prompt = value_elicitation_prompt

    @property
    def priority(self):
        """Gets the priority of this Slot.


        :return: The priority of this Slot.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Slot.


        :param priority: The priority of this Slot.
        :type priority: int
        """

        self._priority = priority

    @property
    def sample_utterances(self):
        """Gets the sample_utterances of this Slot.


        :return: The sample_utterances of this Slot.
        :rtype: List
        """
        return self._sample_utterances

    @sample_utterances.setter
    def sample_utterances(self, sample_utterances):
        """Sets the sample_utterances of this Slot.


        :param sample_utterances: The sample_utterances of this Slot.
        :type sample_utterances: List
        """

        self._sample_utterances = sample_utterances

    @property
    def response_card(self):
        """Gets the response_card of this Slot.


        :return: The response_card of this Slot.
        :rtype: str
        """
        return self._response_card

    @response_card.setter
    def response_card(self, response_card):
        """Sets the response_card of this Slot.


        :param response_card: The response_card of this Slot.
        :type response_card: str
        """

        self._response_card = response_card

    @property
    def obfuscation_setting(self):
        """Gets the obfuscation_setting of this Slot.


        :return: The obfuscation_setting of this Slot.
        :rtype: ObfuscationSetting
        """
        return self._obfuscation_setting

    @obfuscation_setting.setter
    def obfuscation_setting(self, obfuscation_setting):
        """Sets the obfuscation_setting of this Slot.


        :param obfuscation_setting: The obfuscation_setting of this Slot.
        :type obfuscation_setting: ObfuscationSetting
        """

        self._obfuscation_setting = obfuscation_setting

    @property
    def default_value_spec(self):
        """Gets the default_value_spec of this Slot.


        :return: The default_value_spec of this Slot.
        :rtype: SlotDefaultValueSpec
        """
        return self._default_value_spec

    @default_value_spec.setter
    def default_value_spec(self, default_value_spec):
        """Sets the default_value_spec of this Slot.


        :param default_value_spec: The default_value_spec of this Slot.
        :type default_value_spec: SlotDefaultValueSpec
        """

        self._default_value_spec = default_value_spec
