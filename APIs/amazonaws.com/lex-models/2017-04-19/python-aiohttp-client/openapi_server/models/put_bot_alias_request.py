# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_bot_alias_request_conversation_logs import PutBotAliasRequestConversationLogs
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class PutBotAliasRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, bot_version: str=None, checksum: str=None, conversation_logs: PutBotAliasRequestConversationLogs=None, tags: List[Tag]=None):
        """PutBotAliasRequest - a model defined in OpenAPI

        :param description: The description of this PutBotAliasRequest.
        :param bot_version: The bot_version of this PutBotAliasRequest.
        :param checksum: The checksum of this PutBotAliasRequest.
        :param conversation_logs: The conversation_logs of this PutBotAliasRequest.
        :param tags: The tags of this PutBotAliasRequest.
        """
        self.openapi_types = {
            'description': str,
            'bot_version': str,
            'checksum': str,
            'conversation_logs': PutBotAliasRequestConversationLogs,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'description': 'description',
            'bot_version': 'botVersion',
            'checksum': 'checksum',
            'conversation_logs': 'conversationLogs',
            'tags': 'tags'
        }

        self._description = description
        self._bot_version = bot_version
        self._checksum = checksum
        self._conversation_logs = conversation_logs
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutBotAliasRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutBotAlias_request of this PutBotAliasRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PutBotAliasRequest.

        A description of the alias.

        :return: The description of this PutBotAliasRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutBotAliasRequest.

        A description of the alias.

        :param description: The description of this PutBotAliasRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def bot_version(self):
        """Gets the bot_version of this PutBotAliasRequest.

        The version of the bot.

        :return: The bot_version of this PutBotAliasRequest.
        :rtype: str
        """
        return self._bot_version

    @bot_version.setter
    def bot_version(self, bot_version):
        """Sets the bot_version of this PutBotAliasRequest.

        The version of the bot.

        :param bot_version: The bot_version of this PutBotAliasRequest.
        :type bot_version: str
        """
        if bot_version is None:
            raise ValueError("Invalid value for `bot_version`, must not be `None`")
        if bot_version is not None and len(bot_version) > 64:
            raise ValueError("Invalid value for `bot_version`, length must be less than or equal to `64`")
        if bot_version is not None and len(bot_version) < 1:
            raise ValueError("Invalid value for `bot_version`, length must be greater than or equal to `1`")
        if bot_version is not None and not re.search(r'\$LATEST|[0-9]+', bot_version):
            raise ValueError("Invalid value for `bot_version`, must be a follow pattern or equal to `/\$LATEST|[0-9]+/`")

        self._bot_version = bot_version

    @property
    def checksum(self):
        """Gets the checksum of this PutBotAliasRequest.

        <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot alias, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot alias, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>

        :return: The checksum of this PutBotAliasRequest.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this PutBotAliasRequest.

        <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot alias, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot alias, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>

        :param checksum: The checksum of this PutBotAliasRequest.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def conversation_logs(self):
        """Gets the conversation_logs of this PutBotAliasRequest.


        :return: The conversation_logs of this PutBotAliasRequest.
        :rtype: PutBotAliasRequestConversationLogs
        """
        return self._conversation_logs

    @conversation_logs.setter
    def conversation_logs(self, conversation_logs):
        """Sets the conversation_logs of this PutBotAliasRequest.


        :param conversation_logs: The conversation_logs of this PutBotAliasRequest.
        :type conversation_logs: PutBotAliasRequestConversationLogs
        """

        self._conversation_logs = conversation_logs

    @property
    def tags(self):
        """Gets the tags of this PutBotAliasRequest.

        A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>PutBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.

        :return: The tags of this PutBotAliasRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutBotAliasRequest.

        A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>PutBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.

        :param tags: The tags of this PutBotAliasRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
