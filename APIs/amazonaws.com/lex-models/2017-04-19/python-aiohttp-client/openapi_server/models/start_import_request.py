# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
from openapi_server import util


class StartImportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payload: str=None, resource_type: str=None, merge_strategy: str=None, tags: List[Tag]=None):
        """StartImportRequest - a model defined in OpenAPI

        :param payload: The payload of this StartImportRequest.
        :param resource_type: The resource_type of this StartImportRequest.
        :param merge_strategy: The merge_strategy of this StartImportRequest.
        :param tags: The tags of this StartImportRequest.
        """
        self.openapi_types = {
            'payload': str,
            'resource_type': str,
            'merge_strategy': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'payload': 'payload',
            'resource_type': 'resourceType',
            'merge_strategy': 'mergeStrategy',
            'tags': 'tags'
        }

        self._payload = payload
        self._resource_type = resource_type
        self._merge_strategy = merge_strategy
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartImportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartImport_request of this StartImportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payload(self):
        """Gets the payload of this StartImportRequest.

        A zip archive in binary format. The archive should contain one file, a JSON file containing the resource to import. The resource should match the type specified in the <code>resourceType</code> field.

        :return: The payload of this StartImportRequest.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this StartImportRequest.

        A zip archive in binary format. The archive should contain one file, a JSON file containing the resource to import. The resource should match the type specified in the <code>resourceType</code> field.

        :param payload: The payload of this StartImportRequest.
        :type payload: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    @property
    def resource_type(self):
        """Gets the resource_type of this StartImportRequest.

        <p>Specifies the type of resource to export. Each resource also exports any resources that it depends on. </p> <ul> <li> <p>A bot exports dependent intents.</p> </li> <li> <p>An intent exports dependent slot types.</p> </li> </ul>

        :return: The resource_type of this StartImportRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this StartImportRequest.

        <p>Specifies the type of resource to export. Each resource also exports any resources that it depends on. </p> <ul> <li> <p>A bot exports dependent intents.</p> </li> <li> <p>An intent exports dependent slot types.</p> </li> </ul>

        :param resource_type: The resource_type of this StartImportRequest.
        :type resource_type: str
        """
        allowed_values = ["BOT", "INTENT", "SLOT_TYPE"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def merge_strategy(self):
        """Gets the merge_strategy of this StartImportRequest.

        <p>Specifies the action that the <code>StartImport</code> operation should take when there is an existing resource with the same name.</p> <ul> <li> <p>FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a resource in the import file and an existing resource. The name of the resource causing the conflict is in the <code>failureReason</code> field of the response to the <code>GetImport</code> operation.</p> <p>OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with an existing resource. The $LASTEST version of the existing resource is overwritten with the data from the import file.</p> </li> </ul>

        :return: The merge_strategy of this StartImportRequest.
        :rtype: str
        """
        return self._merge_strategy

    @merge_strategy.setter
    def merge_strategy(self, merge_strategy):
        """Sets the merge_strategy of this StartImportRequest.

        <p>Specifies the action that the <code>StartImport</code> operation should take when there is an existing resource with the same name.</p> <ul> <li> <p>FAIL_ON_CONFLICT - The import operation is stopped on the first conflict between a resource in the import file and an existing resource. The name of the resource causing the conflict is in the <code>failureReason</code> field of the response to the <code>GetImport</code> operation.</p> <p>OVERWRITE_LATEST - The import operation proceeds even if there is a conflict with an existing resource. The $LASTEST version of the existing resource is overwritten with the data from the import file.</p> </li> </ul>

        :param merge_strategy: The merge_strategy of this StartImportRequest.
        :type merge_strategy: str
        """
        allowed_values = ["OVERWRITE_LATEST", "FAIL_ON_CONFLICT"]  # noqa: E501
        if merge_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `merge_strategy` ({0}), must be one of {1}"
                .format(merge_strategy, allowed_values)
            )

        self._merge_strategy = merge_strategy

    @property
    def tags(self):
        """Gets the tags of this StartImportRequest.

        A list of tags to add to the imported bot. You can only add tags when you import a bot, you can't add tags to an intent or slot type.

        :return: The tags of this StartImportRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartImportRequest.

        A list of tags to add to the imported bot. You can only add tags when you import a bot, you can't add tags to an intent or slot type.

        :param tags: The tags of this StartImportRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
