# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.intent import Intent
from openapi_server.models.put_bot_request_abort_statement import PutBotRequestAbortStatement
from openapi_server.models.put_bot_request_clarification_prompt import PutBotRequestClarificationPrompt
from openapi_server.models.tag import Tag
from openapi_server import util


class PutBotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, intents: List[Intent]=None, enable_model_improvements: bool=None, nlu_intent_confidence_threshold: float=None, clarification_prompt: PutBotRequestClarificationPrompt=None, abort_statement: PutBotRequestAbortStatement=None, idle_session_ttlin_seconds: int=None, voice_id: str=None, checksum: str=None, process_behavior: str=None, locale: str=None, child_directed: bool=None, detect_sentiment: bool=None, create_version: bool=None, tags: List[Tag]=None):
        """PutBotRequest - a model defined in OpenAPI

        :param description: The description of this PutBotRequest.
        :param intents: The intents of this PutBotRequest.
        :param enable_model_improvements: The enable_model_improvements of this PutBotRequest.
        :param nlu_intent_confidence_threshold: The nlu_intent_confidence_threshold of this PutBotRequest.
        :param clarification_prompt: The clarification_prompt of this PutBotRequest.
        :param abort_statement: The abort_statement of this PutBotRequest.
        :param idle_session_ttlin_seconds: The idle_session_ttlin_seconds of this PutBotRequest.
        :param voice_id: The voice_id of this PutBotRequest.
        :param checksum: The checksum of this PutBotRequest.
        :param process_behavior: The process_behavior of this PutBotRequest.
        :param locale: The locale of this PutBotRequest.
        :param child_directed: The child_directed of this PutBotRequest.
        :param detect_sentiment: The detect_sentiment of this PutBotRequest.
        :param create_version: The create_version of this PutBotRequest.
        :param tags: The tags of this PutBotRequest.
        """
        self.openapi_types = {
            'description': str,
            'intents': List[Intent],
            'enable_model_improvements': bool,
            'nlu_intent_confidence_threshold': float,
            'clarification_prompt': PutBotRequestClarificationPrompt,
            'abort_statement': PutBotRequestAbortStatement,
            'idle_session_ttlin_seconds': int,
            'voice_id': str,
            'checksum': str,
            'process_behavior': str,
            'locale': str,
            'child_directed': bool,
            'detect_sentiment': bool,
            'create_version': bool,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'description': 'description',
            'intents': 'intents',
            'enable_model_improvements': 'enableModelImprovements',
            'nlu_intent_confidence_threshold': 'nluIntentConfidenceThreshold',
            'clarification_prompt': 'clarificationPrompt',
            'abort_statement': 'abortStatement',
            'idle_session_ttlin_seconds': 'idleSessionTTLInSeconds',
            'voice_id': 'voiceId',
            'checksum': 'checksum',
            'process_behavior': 'processBehavior',
            'locale': 'locale',
            'child_directed': 'childDirected',
            'detect_sentiment': 'detectSentiment',
            'create_version': 'createVersion',
            'tags': 'tags'
        }

        self._description = description
        self._intents = intents
        self._enable_model_improvements = enable_model_improvements
        self._nlu_intent_confidence_threshold = nlu_intent_confidence_threshold
        self._clarification_prompt = clarification_prompt
        self._abort_statement = abort_statement
        self._idle_session_ttlin_seconds = idle_session_ttlin_seconds
        self._voice_id = voice_id
        self._checksum = checksum
        self._process_behavior = process_behavior
        self._locale = locale
        self._child_directed = child_directed
        self._detect_sentiment = detect_sentiment
        self._create_version = create_version
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutBotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutBot_request of this PutBotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PutBotRequest.

        A description of the bot.

        :return: The description of this PutBotRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutBotRequest.

        A description of the bot.

        :param description: The description of this PutBotRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def intents(self):
        """Gets the intents of this PutBotRequest.

        An array of <code>Intent</code> objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see <a>how-it-works</a>.

        :return: The intents of this PutBotRequest.
        :rtype: List[Intent]
        """
        return self._intents

    @intents.setter
    def intents(self, intents):
        """Sets the intents of this PutBotRequest.

        An array of <code>Intent</code> objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see <a>how-it-works</a>.

        :param intents: The intents of this PutBotRequest.
        :type intents: List[Intent]
        """

        self._intents = intents

    @property
    def enable_model_improvements(self):
        """Gets the enable_model_improvements of this PutBotRequest.

        <p>Set to <code>true</code> to enable access to natural language understanding improvements. </p> <p>When you set the <code>enableModelImprovements</code> parameter to <code>true</code> you can use the <code>nluIntentConfidenceThreshold</code> parameter to configure confidence scores. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\">Confidence Scores</a>.</p> <p>You can only set the <code>enableModelImprovements</code> parameter in certain Regions. If you set the parameter to <code>true</code>, your bot has access to accuracy improvements.</p> <p>The Regions where you can set the <code>enableModelImprovements</code> parameter to <code>true</code> are:</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default. In these Regions setting the parameter to <code>false</code> throws a <code>ValidationException</code> exception.</p>

        :return: The enable_model_improvements of this PutBotRequest.
        :rtype: bool
        """
        return self._enable_model_improvements

    @enable_model_improvements.setter
    def enable_model_improvements(self, enable_model_improvements):
        """Sets the enable_model_improvements of this PutBotRequest.

        <p>Set to <code>true</code> to enable access to natural language understanding improvements. </p> <p>When you set the <code>enableModelImprovements</code> parameter to <code>true</code> you can use the <code>nluIntentConfidenceThreshold</code> parameter to configure confidence scores. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\">Confidence Scores</a>.</p> <p>You can only set the <code>enableModelImprovements</code> parameter in certain Regions. If you set the parameter to <code>true</code>, your bot has access to accuracy improvements.</p> <p>The Regions where you can set the <code>enableModelImprovements</code> parameter to <code>true</code> are:</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default. In these Regions setting the parameter to <code>false</code> throws a <code>ValidationException</code> exception.</p>

        :param enable_model_improvements: The enable_model_improvements of this PutBotRequest.
        :type enable_model_improvements: bool
        """

        self._enable_model_improvements = enable_model_improvements

    @property
    def nlu_intent_confidence_threshold(self):
        """Gets the nlu_intent_confidence_threshold of this PutBotRequest.

        <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\">PostContent</a> or <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a> response. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>You must set the <code>enableModelImprovements</code> parameter to <code>true</code> to use confidence scores in the following regions.</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>

        :return: The nlu_intent_confidence_threshold of this PutBotRequest.
        :rtype: float
        """
        return self._nlu_intent_confidence_threshold

    @nlu_intent_confidence_threshold.setter
    def nlu_intent_confidence_threshold(self, nlu_intent_confidence_threshold):
        """Sets the nlu_intent_confidence_threshold of this PutBotRequest.

        <p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\">PostContent</a> or <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a> response. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>You must set the <code>enableModelImprovements</code> parameter to <code>true</code> to use confidence scores in the following regions.</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>

        :param nlu_intent_confidence_threshold: The nlu_intent_confidence_threshold of this PutBotRequest.
        :type nlu_intent_confidence_threshold: float
        """
        if nlu_intent_confidence_threshold is not None and nlu_intent_confidence_threshold > 1:
            raise ValueError("Invalid value for `nlu_intent_confidence_threshold`, must be a value less than or equal to `1`")
        if nlu_intent_confidence_threshold is not None and nlu_intent_confidence_threshold < 0:
            raise ValueError("Invalid value for `nlu_intent_confidence_threshold`, must be a value greater than or equal to `0`")

        self._nlu_intent_confidence_threshold = nlu_intent_confidence_threshold

    @property
    def clarification_prompt(self):
        """Gets the clarification_prompt of this PutBotRequest.


        :return: The clarification_prompt of this PutBotRequest.
        :rtype: PutBotRequestClarificationPrompt
        """
        return self._clarification_prompt

    @clarification_prompt.setter
    def clarification_prompt(self, clarification_prompt):
        """Sets the clarification_prompt of this PutBotRequest.


        :param clarification_prompt: The clarification_prompt of this PutBotRequest.
        :type clarification_prompt: PutBotRequestClarificationPrompt
        """

        self._clarification_prompt = clarification_prompt

    @property
    def abort_statement(self):
        """Gets the abort_statement of this PutBotRequest.


        :return: The abort_statement of this PutBotRequest.
        :rtype: PutBotRequestAbortStatement
        """
        return self._abort_statement

    @abort_statement.setter
    def abort_statement(self, abort_statement):
        """Sets the abort_statement of this PutBotRequest.


        :param abort_statement: The abort_statement of this PutBotRequest.
        :type abort_statement: PutBotRequestAbortStatement
        """

        self._abort_statement = abort_statement

    @property
    def idle_session_ttlin_seconds(self):
        """Gets the idle_session_ttlin_seconds of this PutBotRequest.

        <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.</p> <p>A user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn't complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over.</p> <p>If you don't include the <code>idleSessionTTLInSeconds</code> element in a <code>PutBot</code> operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot.</p> <p>The default is 300 seconds (5 minutes).</p>

        :return: The idle_session_ttlin_seconds of this PutBotRequest.
        :rtype: int
        """
        return self._idle_session_ttlin_seconds

    @idle_session_ttlin_seconds.setter
    def idle_session_ttlin_seconds(self, idle_session_ttlin_seconds):
        """Sets the idle_session_ttlin_seconds of this PutBotRequest.

        <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.</p> <p>A user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn't complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over.</p> <p>If you don't include the <code>idleSessionTTLInSeconds</code> element in a <code>PutBot</code> operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot.</p> <p>The default is 300 seconds (5 minutes).</p>

        :param idle_session_ttlin_seconds: The idle_session_ttlin_seconds of this PutBotRequest.
        :type idle_session_ttlin_seconds: int
        """
        if idle_session_ttlin_seconds is not None and idle_session_ttlin_seconds > 86400:
            raise ValueError("Invalid value for `idle_session_ttlin_seconds`, must be a value less than or equal to `86400`")
        if idle_session_ttlin_seconds is not None and idle_session_ttlin_seconds < 60:
            raise ValueError("Invalid value for `idle_session_ttlin_seconds`, must be a value greater than or equal to `60`")

        self._idle_session_ttlin_seconds = idle_session_ttlin_seconds

    @property
    def voice_id(self):
        """Gets the voice_id of this PutBotRequest.

        The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Voices in Amazon Polly</a> in the <i>Amazon Polly Developer Guide</i>.

        :return: The voice_id of this PutBotRequest.
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this PutBotRequest.

        The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Voices in Amazon Polly</a> in the <i>Amazon Polly Developer Guide</i>.

        :param voice_id: The voice_id of this PutBotRequest.
        :type voice_id: str
        """

        self._voice_id = voice_id

    @property
    def checksum(self):
        """Gets the checksum of this PutBotRequest.

        <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>

        :return: The checksum of this PutBotRequest.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this PutBotRequest.

        <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>

        :param checksum: The checksum of this PutBotRequest.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def process_behavior(self):
        """Gets the process_behavior of this PutBotRequest.

        <p>If you set the <code>processBehavior</code> element to <code>BUILD</code>, Amazon Lex builds the bot so that it can be run. If you set the element to <code>SAVE</code> Amazon Lex saves the bot, but doesn't build it. </p> <p>If you don't specify this value, the default value is <code>BUILD</code>.</p>

        :return: The process_behavior of this PutBotRequest.
        :rtype: str
        """
        return self._process_behavior

    @process_behavior.setter
    def process_behavior(self, process_behavior):
        """Sets the process_behavior of this PutBotRequest.

        <p>If you set the <code>processBehavior</code> element to <code>BUILD</code>, Amazon Lex builds the bot so that it can be run. If you set the element to <code>SAVE</code> Amazon Lex saves the bot, but doesn't build it. </p> <p>If you don't specify this value, the default value is <code>BUILD</code>.</p>

        :param process_behavior: The process_behavior of this PutBotRequest.
        :type process_behavior: str
        """
        allowed_values = ["SAVE", "BUILD"]  # noqa: E501
        if process_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `process_behavior` ({0}), must be one of {1}"
                .format(process_behavior, allowed_values)
            )

        self._process_behavior = process_behavior

    @property
    def locale(self):
        """Gets the locale of this PutBotRequest.

        <p> Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. </p> <p>The default is <code>en-US</code>.</p>

        :return: The locale of this PutBotRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PutBotRequest.

        <p> Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. </p> <p>The default is <code>en-US</code>.</p>

        :param locale: The locale of this PutBotRequest.
        :type locale: str
        """
        allowed_values = ["de-DE", "en-AU", "en-GB", "en-IN", "en-US", "es-419", "es-ES", "es-US", "fr-FR", "fr-CA", "it-IT", "ja-JP", "ko-KR"]  # noqa: E501
        if locale not in allowed_values:
            raise ValueError(
                "Invalid value for `locale` ({0}), must be one of {1}"
                .format(locale, allowed_values)
            )

        self._locale = locale

    @property
    def child_directed(self):
        """Gets the child_directed of this PutBotRequest.

        <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a> </p>

        :return: The child_directed of this PutBotRequest.
        :rtype: bool
        """
        return self._child_directed

    @child_directed.setter
    def child_directed(self, child_directed):
        """Sets the child_directed of this PutBotRequest.

        <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a> </p>

        :param child_directed: The child_directed of this PutBotRequest.
        :type child_directed: bool
        """
        if child_directed is None:
            raise ValueError("Invalid value for `child_directed`, must not be `None`")

        self._child_directed = child_directed

    @property
    def detect_sentiment(self):
        """Gets the detect_sentiment of this PutBotRequest.

        When set to <code>true</code> user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify <code>detectSentiment</code>, the default is <code>false</code>.

        :return: The detect_sentiment of this PutBotRequest.
        :rtype: bool
        """
        return self._detect_sentiment

    @detect_sentiment.setter
    def detect_sentiment(self, detect_sentiment):
        """Sets the detect_sentiment of this PutBotRequest.

        When set to <code>true</code> user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify <code>detectSentiment</code>, the default is <code>false</code>.

        :param detect_sentiment: The detect_sentiment of this PutBotRequest.
        :type detect_sentiment: bool
        """

        self._detect_sentiment = detect_sentiment

    @property
    def create_version(self):
        """Gets the create_version of this PutBotRequest.

        When set to <code>true</code> a new numbered version of the bot is created. This is the same as calling the <code>CreateBotVersion</code> operation. If you don't specify <code>createVersion</code>, the default is <code>false</code>.

        :return: The create_version of this PutBotRequest.
        :rtype: bool
        """
        return self._create_version

    @create_version.setter
    def create_version(self, create_version):
        """Sets the create_version of this PutBotRequest.

        When set to <code>true</code> a new numbered version of the bot is created. This is the same as calling the <code>CreateBotVersion</code> operation. If you don't specify <code>createVersion</code>, the default is <code>false</code>.

        :param create_version: The create_version of this PutBotRequest.
        :type create_version: bool
        """

        self._create_version = create_version

    @property
    def tags(self):
        """Gets the tags of this PutBotRequest.

        A list of tags to add to the bot. You can only add tags when you create a bot, you can't use the <code>PutBot</code> operation to update the tags on a bot. To update tags, use the <code>TagResource</code> operation.

        :return: The tags of this PutBotRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutBotRequest.

        A list of tags to add to the bot. You can only add tags when you create a bot, you can't use the <code>PutBot</code> operation to update the tags on a bot. To update tags, use the <code>TagResource</code> operation.

        :param tags: The tags of this PutBotRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
