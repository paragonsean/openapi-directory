# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_context import InputContext
from openapi_server.models.output_context import OutputContext
from openapi_server.models.put_bot_request_abort_statement import PutBotRequestAbortStatement
from openapi_server.models.put_bot_request_clarification_prompt import PutBotRequestClarificationPrompt
from openapi_server.models.put_intent_request_dialog_code_hook import PutIntentRequestDialogCodeHook
from openapi_server.models.put_intent_request_follow_up_prompt import PutIntentRequestFollowUpPrompt
from openapi_server.models.put_intent_request_fulfillment_activity import PutIntentRequestFulfillmentActivity
from openapi_server.models.put_intent_request_kendra_configuration import PutIntentRequestKendraConfiguration
from openapi_server.models.slot import Slot
from openapi_server import util


class PutIntentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, slots: List[Slot]=None, sample_utterances: List[str]=None, confirmation_prompt: PutBotRequestClarificationPrompt=None, rejection_statement: PutBotRequestAbortStatement=None, follow_up_prompt: PutIntentRequestFollowUpPrompt=None, conclusion_statement: PutBotRequestAbortStatement=None, dialog_code_hook: PutIntentRequestDialogCodeHook=None, fulfillment_activity: PutIntentRequestFulfillmentActivity=None, parent_intent_signature: str=None, checksum: str=None, create_version: bool=None, kendra_configuration: PutIntentRequestKendraConfiguration=None, input_contexts: List[InputContext]=None, output_contexts: List[OutputContext]=None):
        """PutIntentRequest - a model defined in OpenAPI

        :param description: The description of this PutIntentRequest.
        :param slots: The slots of this PutIntentRequest.
        :param sample_utterances: The sample_utterances of this PutIntentRequest.
        :param confirmation_prompt: The confirmation_prompt of this PutIntentRequest.
        :param rejection_statement: The rejection_statement of this PutIntentRequest.
        :param follow_up_prompt: The follow_up_prompt of this PutIntentRequest.
        :param conclusion_statement: The conclusion_statement of this PutIntentRequest.
        :param dialog_code_hook: The dialog_code_hook of this PutIntentRequest.
        :param fulfillment_activity: The fulfillment_activity of this PutIntentRequest.
        :param parent_intent_signature: The parent_intent_signature of this PutIntentRequest.
        :param checksum: The checksum of this PutIntentRequest.
        :param create_version: The create_version of this PutIntentRequest.
        :param kendra_configuration: The kendra_configuration of this PutIntentRequest.
        :param input_contexts: The input_contexts of this PutIntentRequest.
        :param output_contexts: The output_contexts of this PutIntentRequest.
        """
        self.openapi_types = {
            'description': str,
            'slots': List[Slot],
            'sample_utterances': List[str],
            'confirmation_prompt': PutBotRequestClarificationPrompt,
            'rejection_statement': PutBotRequestAbortStatement,
            'follow_up_prompt': PutIntentRequestFollowUpPrompt,
            'conclusion_statement': PutBotRequestAbortStatement,
            'dialog_code_hook': PutIntentRequestDialogCodeHook,
            'fulfillment_activity': PutIntentRequestFulfillmentActivity,
            'parent_intent_signature': str,
            'checksum': str,
            'create_version': bool,
            'kendra_configuration': PutIntentRequestKendraConfiguration,
            'input_contexts': List[InputContext],
            'output_contexts': List[OutputContext]
        }

        self.attribute_map = {
            'description': 'description',
            'slots': 'slots',
            'sample_utterances': 'sampleUtterances',
            'confirmation_prompt': 'confirmationPrompt',
            'rejection_statement': 'rejectionStatement',
            'follow_up_prompt': 'followUpPrompt',
            'conclusion_statement': 'conclusionStatement',
            'dialog_code_hook': 'dialogCodeHook',
            'fulfillment_activity': 'fulfillmentActivity',
            'parent_intent_signature': 'parentIntentSignature',
            'checksum': 'checksum',
            'create_version': 'createVersion',
            'kendra_configuration': 'kendraConfiguration',
            'input_contexts': 'inputContexts',
            'output_contexts': 'outputContexts'
        }

        self._description = description
        self._slots = slots
        self._sample_utterances = sample_utterances
        self._confirmation_prompt = confirmation_prompt
        self._rejection_statement = rejection_statement
        self._follow_up_prompt = follow_up_prompt
        self._conclusion_statement = conclusion_statement
        self._dialog_code_hook = dialog_code_hook
        self._fulfillment_activity = fulfillment_activity
        self._parent_intent_signature = parent_intent_signature
        self._checksum = checksum
        self._create_version = create_version
        self._kendra_configuration = kendra_configuration
        self._input_contexts = input_contexts
        self._output_contexts = output_contexts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutIntentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutIntent_request of this PutIntentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PutIntentRequest.

        A description of the intent.

        :return: The description of this PutIntentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutIntentRequest.

        A description of the intent.

        :param description: The description of this PutIntentRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def slots(self):
        """Gets the slots of this PutIntentRequest.

        An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see <a>how-it-works</a>. 

        :return: The slots of this PutIntentRequest.
        :rtype: List[Slot]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this PutIntentRequest.

        An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see <a>how-it-works</a>. 

        :param slots: The slots of this PutIntentRequest.
        :type slots: List[Slot]
        """
        if slots is not None and len(slots) > 100:
            raise ValueError("Invalid value for `slots`, number of items must be less than or equal to `100`")
        if slots is not None and len(slots) < 0:
            raise ValueError("Invalid value for `slots`, number of items must be greater than or equal to `0`")

        self._slots = slots

    @property
    def sample_utterances(self):
        """Gets the sample_utterances of this PutIntentRequest.

        <p>An array of utterances (strings) that a user might say to signal the intent. For example, \"I want {PizzaSize} pizza\", \"Order {Quantity} {PizzaSize} pizzas\". </p> <p>In each utterance, a slot name is enclosed in curly braces. </p>

        :return: The sample_utterances of this PutIntentRequest.
        :rtype: List[str]
        """
        return self._sample_utterances

    @sample_utterances.setter
    def sample_utterances(self, sample_utterances):
        """Sets the sample_utterances of this PutIntentRequest.

        <p>An array of utterances (strings) that a user might say to signal the intent. For example, \"I want {PizzaSize} pizza\", \"Order {Quantity} {PizzaSize} pizzas\". </p> <p>In each utterance, a slot name is enclosed in curly braces. </p>

        :param sample_utterances: The sample_utterances of this PutIntentRequest.
        :type sample_utterances: List[str]
        """
        if sample_utterances is not None and len(sample_utterances) > 1500:
            raise ValueError("Invalid value for `sample_utterances`, number of items must be less than or equal to `1500`")
        if sample_utterances is not None and len(sample_utterances) < 0:
            raise ValueError("Invalid value for `sample_utterances`, number of items must be greater than or equal to `0`")

        self._sample_utterances = sample_utterances

    @property
    def confirmation_prompt(self):
        """Gets the confirmation_prompt of this PutIntentRequest.


        :return: The confirmation_prompt of this PutIntentRequest.
        :rtype: PutBotRequestClarificationPrompt
        """
        return self._confirmation_prompt

    @confirmation_prompt.setter
    def confirmation_prompt(self, confirmation_prompt):
        """Sets the confirmation_prompt of this PutIntentRequest.


        :param confirmation_prompt: The confirmation_prompt of this PutIntentRequest.
        :type confirmation_prompt: PutBotRequestClarificationPrompt
        """

        self._confirmation_prompt = confirmation_prompt

    @property
    def rejection_statement(self):
        """Gets the rejection_statement of this PutIntentRequest.


        :return: The rejection_statement of this PutIntentRequest.
        :rtype: PutBotRequestAbortStatement
        """
        return self._rejection_statement

    @rejection_statement.setter
    def rejection_statement(self, rejection_statement):
        """Sets the rejection_statement of this PutIntentRequest.


        :param rejection_statement: The rejection_statement of this PutIntentRequest.
        :type rejection_statement: PutBotRequestAbortStatement
        """

        self._rejection_statement = rejection_statement

    @property
    def follow_up_prompt(self):
        """Gets the follow_up_prompt of this PutIntentRequest.


        :return: The follow_up_prompt of this PutIntentRequest.
        :rtype: PutIntentRequestFollowUpPrompt
        """
        return self._follow_up_prompt

    @follow_up_prompt.setter
    def follow_up_prompt(self, follow_up_prompt):
        """Sets the follow_up_prompt of this PutIntentRequest.


        :param follow_up_prompt: The follow_up_prompt of this PutIntentRequest.
        :type follow_up_prompt: PutIntentRequestFollowUpPrompt
        """

        self._follow_up_prompt = follow_up_prompt

    @property
    def conclusion_statement(self):
        """Gets the conclusion_statement of this PutIntentRequest.


        :return: The conclusion_statement of this PutIntentRequest.
        :rtype: PutBotRequestAbortStatement
        """
        return self._conclusion_statement

    @conclusion_statement.setter
    def conclusion_statement(self, conclusion_statement):
        """Sets the conclusion_statement of this PutIntentRequest.


        :param conclusion_statement: The conclusion_statement of this PutIntentRequest.
        :type conclusion_statement: PutBotRequestAbortStatement
        """

        self._conclusion_statement = conclusion_statement

    @property
    def dialog_code_hook(self):
        """Gets the dialog_code_hook of this PutIntentRequest.


        :return: The dialog_code_hook of this PutIntentRequest.
        :rtype: PutIntentRequestDialogCodeHook
        """
        return self._dialog_code_hook

    @dialog_code_hook.setter
    def dialog_code_hook(self, dialog_code_hook):
        """Sets the dialog_code_hook of this PutIntentRequest.


        :param dialog_code_hook: The dialog_code_hook of this PutIntentRequest.
        :type dialog_code_hook: PutIntentRequestDialogCodeHook
        """

        self._dialog_code_hook = dialog_code_hook

    @property
    def fulfillment_activity(self):
        """Gets the fulfillment_activity of this PutIntentRequest.


        :return: The fulfillment_activity of this PutIntentRequest.
        :rtype: PutIntentRequestFulfillmentActivity
        """
        return self._fulfillment_activity

    @fulfillment_activity.setter
    def fulfillment_activity(self, fulfillment_activity):
        """Sets the fulfillment_activity of this PutIntentRequest.


        :param fulfillment_activity: The fulfillment_activity of this PutIntentRequest.
        :type fulfillment_activity: PutIntentRequestFulfillmentActivity
        """

        self._fulfillment_activity = fulfillment_activity

    @property
    def parent_intent_signature(self):
        """Gets the parent_intent_signature of this PutIntentRequest.

        A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.

        :return: The parent_intent_signature of this PutIntentRequest.
        :rtype: str
        """
        return self._parent_intent_signature

    @parent_intent_signature.setter
    def parent_intent_signature(self, parent_intent_signature):
        """Sets the parent_intent_signature of this PutIntentRequest.

        A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.

        :param parent_intent_signature: The parent_intent_signature of this PutIntentRequest.
        :type parent_intent_signature: str
        """

        self._parent_intent_signature = parent_intent_signature

    @property
    def checksum(self):
        """Gets the checksum of this PutIntentRequest.

        <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new intent, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a intent, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>

        :return: The checksum of this PutIntentRequest.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this PutIntentRequest.

        <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new intent, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a intent, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>

        :param checksum: The checksum of this PutIntentRequest.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def create_version(self):
        """Gets the create_version of this PutIntentRequest.

        When set to <code>true</code> a new numbered version of the intent is created. This is the same as calling the <code>CreateIntentVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.

        :return: The create_version of this PutIntentRequest.
        :rtype: bool
        """
        return self._create_version

    @create_version.setter
    def create_version(self, create_version):
        """Sets the create_version of this PutIntentRequest.

        When set to <code>true</code> a new numbered version of the intent is created. This is the same as calling the <code>CreateIntentVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.

        :param create_version: The create_version of this PutIntentRequest.
        :type create_version: bool
        """

        self._create_version = create_version

    @property
    def kendra_configuration(self):
        """Gets the kendra_configuration of this PutIntentRequest.


        :return: The kendra_configuration of this PutIntentRequest.
        :rtype: PutIntentRequestKendraConfiguration
        """
        return self._kendra_configuration

    @kendra_configuration.setter
    def kendra_configuration(self, kendra_configuration):
        """Sets the kendra_configuration of this PutIntentRequest.


        :param kendra_configuration: The kendra_configuration of this PutIntentRequest.
        :type kendra_configuration: PutIntentRequestKendraConfiguration
        """

        self._kendra_configuration = kendra_configuration

    @property
    def input_contexts(self):
        """Gets the input_contexts of this PutIntentRequest.

        An array of <code>InputContext</code> objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.

        :return: The input_contexts of this PutIntentRequest.
        :rtype: List[InputContext]
        """
        return self._input_contexts

    @input_contexts.setter
    def input_contexts(self, input_contexts):
        """Sets the input_contexts of this PutIntentRequest.

        An array of <code>InputContext</code> objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.

        :param input_contexts: The input_contexts of this PutIntentRequest.
        :type input_contexts: List[InputContext]
        """
        if input_contexts is not None and len(input_contexts) > 5:
            raise ValueError("Invalid value for `input_contexts`, number of items must be less than or equal to `5`")
        if input_contexts is not None and len(input_contexts) < 0:
            raise ValueError("Invalid value for `input_contexts`, number of items must be greater than or equal to `0`")

        self._input_contexts = input_contexts

    @property
    def output_contexts(self):
        """Gets the output_contexts of this PutIntentRequest.

        An array of <code>OutputContext</code> objects that lists the contexts that the intent activates when the intent is fulfilled.

        :return: The output_contexts of this PutIntentRequest.
        :rtype: List[OutputContext]
        """
        return self._output_contexts

    @output_contexts.setter
    def output_contexts(self, output_contexts):
        """Sets the output_contexts of this PutIntentRequest.

        An array of <code>OutputContext</code> objects that lists the contexts that the intent activates when the intent is fulfilled.

        :param output_contexts: The output_contexts of this PutIntentRequest.
        :type output_contexts: List[OutputContext]
        """
        if output_contexts is not None and len(output_contexts) > 10:
            raise ValueError("Invalid value for `output_contexts`, number of items must be less than or equal to `10`")
        if output_contexts is not None and len(output_contexts) < 0:
            raise ValueError("Invalid value for `output_contexts`, number of items must be greater than or equal to `0`")

        self._output_contexts = output_contexts
