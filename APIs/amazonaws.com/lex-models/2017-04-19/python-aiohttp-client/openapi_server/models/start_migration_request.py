# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartMigrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, v1_bot_name: str=None, v1_bot_version: str=None, v2_bot_name: str=None, v2_bot_role: str=None, migration_strategy: str=None):
        """StartMigrationRequest - a model defined in OpenAPI

        :param v1_bot_name: The v1_bot_name of this StartMigrationRequest.
        :param v1_bot_version: The v1_bot_version of this StartMigrationRequest.
        :param v2_bot_name: The v2_bot_name of this StartMigrationRequest.
        :param v2_bot_role: The v2_bot_role of this StartMigrationRequest.
        :param migration_strategy: The migration_strategy of this StartMigrationRequest.
        """
        self.openapi_types = {
            'v1_bot_name': str,
            'v1_bot_version': str,
            'v2_bot_name': str,
            'v2_bot_role': str,
            'migration_strategy': str
        }

        self.attribute_map = {
            'v1_bot_name': 'v1BotName',
            'v1_bot_version': 'v1BotVersion',
            'v2_bot_name': 'v2BotName',
            'v2_bot_role': 'v2BotRole',
            'migration_strategy': 'migrationStrategy'
        }

        self._v1_bot_name = v1_bot_name
        self._v1_bot_version = v1_bot_version
        self._v2_bot_name = v2_bot_name
        self._v2_bot_role = v2_bot_role
        self._migration_strategy = migration_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartMigrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartMigration_request of this StartMigrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def v1_bot_name(self):
        """Gets the v1_bot_name of this StartMigrationRequest.

        The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.

        :return: The v1_bot_name of this StartMigrationRequest.
        :rtype: str
        """
        return self._v1_bot_name

    @v1_bot_name.setter
    def v1_bot_name(self, v1_bot_name):
        """Sets the v1_bot_name of this StartMigrationRequest.

        The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.

        :param v1_bot_name: The v1_bot_name of this StartMigrationRequest.
        :type v1_bot_name: str
        """
        if v1_bot_name is None:
            raise ValueError("Invalid value for `v1_bot_name`, must not be `None`")
        if v1_bot_name is not None and len(v1_bot_name) > 50:
            raise ValueError("Invalid value for `v1_bot_name`, length must be less than or equal to `50`")
        if v1_bot_name is not None and len(v1_bot_name) < 2:
            raise ValueError("Invalid value for `v1_bot_name`, length must be greater than or equal to `2`")
        if v1_bot_name is not None and not re.search(r'^([A-Za-z]_?)+$', v1_bot_name):
            raise ValueError("Invalid value for `v1_bot_name`, must be a follow pattern or equal to `/^([A-Za-z]_?)+$/`")

        self._v1_bot_name = v1_bot_name

    @property
    def v1_bot_version(self):
        """Gets the v1_bot_version of this StartMigrationRequest.

        The version of the bot to migrate to Amazon Lex V2. You can migrate the <code>$LATEST</code> version as well as any numbered version.

        :return: The v1_bot_version of this StartMigrationRequest.
        :rtype: str
        """
        return self._v1_bot_version

    @v1_bot_version.setter
    def v1_bot_version(self, v1_bot_version):
        """Sets the v1_bot_version of this StartMigrationRequest.

        The version of the bot to migrate to Amazon Lex V2. You can migrate the <code>$LATEST</code> version as well as any numbered version.

        :param v1_bot_version: The v1_bot_version of this StartMigrationRequest.
        :type v1_bot_version: str
        """
        if v1_bot_version is None:
            raise ValueError("Invalid value for `v1_bot_version`, must not be `None`")
        if v1_bot_version is not None and len(v1_bot_version) > 64:
            raise ValueError("Invalid value for `v1_bot_version`, length must be less than or equal to `64`")
        if v1_bot_version is not None and len(v1_bot_version) < 1:
            raise ValueError("Invalid value for `v1_bot_version`, length must be greater than or equal to `1`")
        if v1_bot_version is not None and not re.search(r'\$LATEST|[0-9]+', v1_bot_version):
            raise ValueError("Invalid value for `v1_bot_version`, must be a follow pattern or equal to `/\$LATEST|[0-9]+/`")

        self._v1_bot_version = v1_bot_version

    @property
    def v2_bot_name(self):
        """Gets the v2_bot_name of this StartMigrationRequest.

        <p>The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to. </p> <ul> <li> <p>If the Amazon Lex V2 bot doesn't exist, you must use the <code>CREATE_NEW</code> migration strategy.</p> </li> <li> <p>If the Amazon Lex V2 bot exists, you must use the <code>UPDATE_EXISTING</code> migration strategy to change the contents of the Amazon Lex V2 bot.</p> </li> </ul>

        :return: The v2_bot_name of this StartMigrationRequest.
        :rtype: str
        """
        return self._v2_bot_name

    @v2_bot_name.setter
    def v2_bot_name(self, v2_bot_name):
        """Sets the v2_bot_name of this StartMigrationRequest.

        <p>The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to. </p> <ul> <li> <p>If the Amazon Lex V2 bot doesn't exist, you must use the <code>CREATE_NEW</code> migration strategy.</p> </li> <li> <p>If the Amazon Lex V2 bot exists, you must use the <code>UPDATE_EXISTING</code> migration strategy to change the contents of the Amazon Lex V2 bot.</p> </li> </ul>

        :param v2_bot_name: The v2_bot_name of this StartMigrationRequest.
        :type v2_bot_name: str
        """
        if v2_bot_name is None:
            raise ValueError("Invalid value for `v2_bot_name`, must not be `None`")
        if v2_bot_name is not None and len(v2_bot_name) > 100:
            raise ValueError("Invalid value for `v2_bot_name`, length must be less than or equal to `100`")
        if v2_bot_name is not None and len(v2_bot_name) < 1:
            raise ValueError("Invalid value for `v2_bot_name`, length must be greater than or equal to `1`")
        if v2_bot_name is not None and not re.search(r'^([0-9a-zA-Z][_-]?)+$', v2_bot_name):
            raise ValueError("Invalid value for `v2_bot_name`, must be a follow pattern or equal to `/^([0-9a-zA-Z][_-]?)+$/`")

        self._v2_bot_name = v2_bot_name

    @property
    def v2_bot_role(self):
        """Gets the v2_bot_role of this StartMigrationRequest.

        The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.

        :return: The v2_bot_role of this StartMigrationRequest.
        :rtype: str
        """
        return self._v2_bot_role

    @v2_bot_role.setter
    def v2_bot_role(self, v2_bot_role):
        """Sets the v2_bot_role of this StartMigrationRequest.

        The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.

        :param v2_bot_role: The v2_bot_role of this StartMigrationRequest.
        :type v2_bot_role: str
        """
        if v2_bot_role is None:
            raise ValueError("Invalid value for `v2_bot_role`, must not be `None`")
        if v2_bot_role is not None and len(v2_bot_role) > 2048:
            raise ValueError("Invalid value for `v2_bot_role`, length must be less than or equal to `2048`")
        if v2_bot_role is not None and len(v2_bot_role) < 20:
            raise ValueError("Invalid value for `v2_bot_role`, length must be greater than or equal to `20`")
        if v2_bot_role is not None and not re.search(r'^arn:[\w\-]+:iam::[\d]{12}:role\/.+$', v2_bot_role):
            raise ValueError("Invalid value for `v2_bot_role`, must be a follow pattern or equal to `/^arn:[\w\-]+:iam::[\d]{12}:role\/.+$/`")

        self._v2_bot_role = v2_bot_role

    @property
    def migration_strategy(self):
        """Gets the migration_strategy of this StartMigrationRequest.

        <p>The strategy used to conduct the migration.</p> <ul> <li> <p> <code>CREATE_NEW</code> - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.</p> </li> <li> <p> <code>UPDATE_EXISTING</code> - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn't change any other locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale is created in the Amazon Lex V2 bot.</p> </li> </ul>

        :return: The migration_strategy of this StartMigrationRequest.
        :rtype: str
        """
        return self._migration_strategy

    @migration_strategy.setter
    def migration_strategy(self, migration_strategy):
        """Sets the migration_strategy of this StartMigrationRequest.

        <p>The strategy used to conduct the migration.</p> <ul> <li> <p> <code>CREATE_NEW</code> - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.</p> </li> <li> <p> <code>UPDATE_EXISTING</code> - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn't change any other locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale is created in the Amazon Lex V2 bot.</p> </li> </ul>

        :param migration_strategy: The migration_strategy of this StartMigrationRequest.
        :type migration_strategy: str
        """
        allowed_values = ["CREATE_NEW", "UPDATE_EXISTING"]  # noqa: E501
        if migration_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_strategy` ({0}), must be one of {1}"
                .format(migration_strategy, allowed_values)
            )

        self._migration_strategy = migration_strategy
