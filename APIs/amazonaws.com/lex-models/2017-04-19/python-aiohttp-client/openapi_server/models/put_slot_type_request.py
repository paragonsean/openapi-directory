# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enumeration_value import EnumerationValue
from openapi_server.models.slot_type_configuration import SlotTypeConfiguration
import re
from openapi_server import util


class PutSlotTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, enumeration_values: List[EnumerationValue]=None, checksum: str=None, value_selection_strategy: str=None, create_version: bool=None, parent_slot_type_signature: str=None, slot_type_configurations: List[SlotTypeConfiguration]=None):
        """PutSlotTypeRequest - a model defined in OpenAPI

        :param description: The description of this PutSlotTypeRequest.
        :param enumeration_values: The enumeration_values of this PutSlotTypeRequest.
        :param checksum: The checksum of this PutSlotTypeRequest.
        :param value_selection_strategy: The value_selection_strategy of this PutSlotTypeRequest.
        :param create_version: The create_version of this PutSlotTypeRequest.
        :param parent_slot_type_signature: The parent_slot_type_signature of this PutSlotTypeRequest.
        :param slot_type_configurations: The slot_type_configurations of this PutSlotTypeRequest.
        """
        self.openapi_types = {
            'description': str,
            'enumeration_values': List[EnumerationValue],
            'checksum': str,
            'value_selection_strategy': str,
            'create_version': bool,
            'parent_slot_type_signature': str,
            'slot_type_configurations': List[SlotTypeConfiguration]
        }

        self.attribute_map = {
            'description': 'description',
            'enumeration_values': 'enumerationValues',
            'checksum': 'checksum',
            'value_selection_strategy': 'valueSelectionStrategy',
            'create_version': 'createVersion',
            'parent_slot_type_signature': 'parentSlotTypeSignature',
            'slot_type_configurations': 'slotTypeConfigurations'
        }

        self._description = description
        self._enumeration_values = enumeration_values
        self._checksum = checksum
        self._value_selection_strategy = value_selection_strategy
        self._create_version = create_version
        self._parent_slot_type_signature = parent_slot_type_signature
        self._slot_type_configurations = slot_type_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutSlotTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutSlotType_request of this PutSlotTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PutSlotTypeRequest.

        A description of the slot type.

        :return: The description of this PutSlotTypeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutSlotTypeRequest.

        A description of the slot type.

        :param description: The description of this PutSlotTypeRequest.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def enumeration_values(self):
        """Gets the enumeration_values of this PutSlotTypeRequest.

        <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take. Each value can have a list of <code>synonyms</code>, which are additional values that help train the machine learning model about the values that it resolves for a slot. </p> <p>A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.</p> <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The <code>valueSelectionStrategy</code> field indicates the option to use. </p>

        :return: The enumeration_values of this PutSlotTypeRequest.
        :rtype: List[EnumerationValue]
        """
        return self._enumeration_values

    @enumeration_values.setter
    def enumeration_values(self, enumeration_values):
        """Sets the enumeration_values of this PutSlotTypeRequest.

        <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take. Each value can have a list of <code>synonyms</code>, which are additional values that help train the machine learning model about the values that it resolves for a slot. </p> <p>A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.</p> <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The <code>valueSelectionStrategy</code> field indicates the option to use. </p>

        :param enumeration_values: The enumeration_values of this PutSlotTypeRequest.
        :type enumeration_values: List[EnumerationValue]
        """
        if enumeration_values is not None and len(enumeration_values) > 10000:
            raise ValueError("Invalid value for `enumeration_values`, number of items must be less than or equal to `10000`")
        if enumeration_values is not None and len(enumeration_values) < 0:
            raise ValueError("Invalid value for `enumeration_values`, number of items must be greater than or equal to `0`")

        self._enumeration_values = enumeration_values

    @property
    def checksum(self):
        """Gets the checksum of this PutSlotTypeRequest.

        <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a slot type, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>

        :return: The checksum of this PutSlotTypeRequest.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this PutSlotTypeRequest.

        <p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a slot type, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>

        :param checksum: The checksum of this PutSlotTypeRequest.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def value_selection_strategy(self):
        """Gets the value_selection_strategy of this PutSlotTypeRequest.

        <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li> </ul> <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>

        :return: The value_selection_strategy of this PutSlotTypeRequest.
        :rtype: str
        """
        return self._value_selection_strategy

    @value_selection_strategy.setter
    def value_selection_strategy(self, value_selection_strategy):
        """Sets the value_selection_strategy of this PutSlotTypeRequest.

        <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li> </ul> <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>

        :param value_selection_strategy: The value_selection_strategy of this PutSlotTypeRequest.
        :type value_selection_strategy: str
        """
        allowed_values = ["ORIGINAL_VALUE", "TOP_RESOLUTION"]  # noqa: E501
        if value_selection_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `value_selection_strategy` ({0}), must be one of {1}"
                .format(value_selection_strategy, allowed_values)
            )

        self._value_selection_strategy = value_selection_strategy

    @property
    def create_version(self):
        """Gets the create_version of this PutSlotTypeRequest.

        When set to <code>true</code> a new numbered version of the slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.

        :return: The create_version of this PutSlotTypeRequest.
        :rtype: bool
        """
        return self._create_version

    @create_version.setter
    def create_version(self, create_version):
        """Sets the create_version of this PutSlotTypeRequest.

        When set to <code>true</code> a new numbered version of the slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.

        :param create_version: The create_version of this PutSlotTypeRequest.
        :type create_version: bool
        """

        self._create_version = create_version

    @property
    def parent_slot_type_signature(self):
        """Gets the parent_slot_type_signature of this PutSlotTypeRequest.

        <p>The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.</p> <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>

        :return: The parent_slot_type_signature of this PutSlotTypeRequest.
        :rtype: str
        """
        return self._parent_slot_type_signature

    @parent_slot_type_signature.setter
    def parent_slot_type_signature(self, parent_slot_type_signature):
        """Sets the parent_slot_type_signature of this PutSlotTypeRequest.

        <p>The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.</p> <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>

        :param parent_slot_type_signature: The parent_slot_type_signature of this PutSlotTypeRequest.
        :type parent_slot_type_signature: str
        """
        if parent_slot_type_signature is not None and len(parent_slot_type_signature) > 100:
            raise ValueError("Invalid value for `parent_slot_type_signature`, length must be less than or equal to `100`")
        if parent_slot_type_signature is not None and len(parent_slot_type_signature) < 1:
            raise ValueError("Invalid value for `parent_slot_type_signature`, length must be greater than or equal to `1`")
        if parent_slot_type_signature is not None and not re.search(r'^((AMAZON\.)_?|[A-Za-z]_?)+', parent_slot_type_signature):
            raise ValueError("Invalid value for `parent_slot_type_signature`, must be a follow pattern or equal to `/^((AMAZON\.)_?|[A-Za-z]_?)+/`")

        self._parent_slot_type_signature = parent_slot_type_signature

    @property
    def slot_type_configurations(self):
        """Gets the slot_type_configurations of this PutSlotTypeRequest.

        Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.

        :return: The slot_type_configurations of this PutSlotTypeRequest.
        :rtype: List[SlotTypeConfiguration]
        """
        return self._slot_type_configurations

    @slot_type_configurations.setter
    def slot_type_configurations(self, slot_type_configurations):
        """Sets the slot_type_configurations of this PutSlotTypeRequest.

        Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.

        :param slot_type_configurations: The slot_type_configurations of this PutSlotTypeRequest.
        :type slot_type_configurations: List[SlotTypeConfiguration]
        """
        if slot_type_configurations is not None and len(slot_type_configurations) > 10:
            raise ValueError("Invalid value for `slot_type_configurations`, number of items must be less than or equal to `10`")
        if slot_type_configurations is not None and len(slot_type_configurations) < 0:
            raise ValueError("Invalid value for `slot_type_configurations`, number of items must be greater than or equal to `0`")

        self._slot_type_configurations = slot_type_configurations
