/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsEntityResolution);
  }
}(this, function(expect, AwsEntityResolution) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsEntityResolution.UpdateMatchingWorkflowRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateMatchingWorkflowRequest', function() {
    it('should create an instance of UpdateMatchingWorkflowRequest', function() {
      // uncomment below and update the code to test UpdateMatchingWorkflowRequest
      //var instance = new AwsEntityResolution.UpdateMatchingWorkflowRequest();
      //expect(instance).to.be.a(AwsEntityResolution.UpdateMatchingWorkflowRequest);
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AwsEntityResolution.UpdateMatchingWorkflowRequest();
      //expect(instance).to.be();
    });

    it('should have the property incrementalRunConfig (base name: "incrementalRunConfig")', function() {
      // uncomment below and update the code to test the property incrementalRunConfig
      //var instance = new AwsEntityResolution.UpdateMatchingWorkflowRequest();
      //expect(instance).to.be();
    });

    it('should have the property inputSourceConfig (base name: "inputSourceConfig")', function() {
      // uncomment below and update the code to test the property inputSourceConfig
      //var instance = new AwsEntityResolution.UpdateMatchingWorkflowRequest();
      //expect(instance).to.be();
    });

    it('should have the property outputSourceConfig (base name: "outputSourceConfig")', function() {
      // uncomment below and update the code to test the property outputSourceConfig
      //var instance = new AwsEntityResolution.UpdateMatchingWorkflowRequest();
      //expect(instance).to.be();
    });

    it('should have the property resolutionTechniques (base name: "resolutionTechniques")', function() {
      // uncomment below and update the code to test the property resolutionTechniques
      //var instance = new AwsEntityResolution.UpdateMatchingWorkflowRequest();
      //expect(instance).to.be();
    });

    it('should have the property roleArn (base name: "roleArn")', function() {
      // uncomment below and update the code to test the property roleArn
      //var instance = new AwsEntityResolution.UpdateMatchingWorkflowRequest();
      //expect(instance).to.be();
    });

  });

}));
