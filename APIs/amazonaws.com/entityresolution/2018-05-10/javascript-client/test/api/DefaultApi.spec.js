/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsEntityResolution);
  }
}(this, function(expect, AwsEntityResolution) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsEntityResolution.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createMatchingWorkflow', function() {
      it('should call createMatchingWorkflow successfully', function(done) {
        //uncomment below and update the code to test createMatchingWorkflow
        //instance.createMatchingWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSchemaMapping', function() {
      it('should call createSchemaMapping successfully', function(done) {
        //uncomment below and update the code to test createSchemaMapping
        //instance.createSchemaMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMatchingWorkflow', function() {
      it('should call deleteMatchingWorkflow successfully', function(done) {
        //uncomment below and update the code to test deleteMatchingWorkflow
        //instance.deleteMatchingWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSchemaMapping', function() {
      it('should call deleteSchemaMapping successfully', function(done) {
        //uncomment below and update the code to test deleteSchemaMapping
        //instance.deleteSchemaMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMatchId', function() {
      it('should call getMatchId successfully', function(done) {
        //uncomment below and update the code to test getMatchId
        //instance.getMatchId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMatchingJob', function() {
      it('should call getMatchingJob successfully', function(done) {
        //uncomment below and update the code to test getMatchingJob
        //instance.getMatchingJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMatchingWorkflow', function() {
      it('should call getMatchingWorkflow successfully', function(done) {
        //uncomment below and update the code to test getMatchingWorkflow
        //instance.getMatchingWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSchemaMapping', function() {
      it('should call getSchemaMapping successfully', function(done) {
        //uncomment below and update the code to test getSchemaMapping
        //instance.getSchemaMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMatchingJobs', function() {
      it('should call listMatchingJobs successfully', function(done) {
        //uncomment below and update the code to test listMatchingJobs
        //instance.listMatchingJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMatchingWorkflows', function() {
      it('should call listMatchingWorkflows successfully', function(done) {
        //uncomment below and update the code to test listMatchingWorkflows
        //instance.listMatchingWorkflows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSchemaMappings', function() {
      it('should call listSchemaMappings successfully', function(done) {
        //uncomment below and update the code to test listSchemaMappings
        //instance.listSchemaMappings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startMatchingJob', function() {
      it('should call startMatchingJob successfully', function(done) {
        //uncomment below and update the code to test startMatchingJob
        //instance.startMatchingJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMatchingWorkflow', function() {
      it('should call updateMatchingWorkflow successfully', function(done) {
        //uncomment below and update the code to test updateMatchingWorkflow
        //instance.updateMatchingWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
