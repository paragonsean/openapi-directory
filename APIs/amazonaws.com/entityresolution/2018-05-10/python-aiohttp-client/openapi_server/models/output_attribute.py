# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hashed: bool=None, name: str=None):
        """OutputAttribute - a model defined in OpenAPI

        :param hashed: The hashed of this OutputAttribute.
        :param name: The name of this OutputAttribute.
        """
        self.openapi_types = {
            'hashed': bool,
            'name': str
        }

        self.attribute_map = {
            'hashed': 'hashed',
            'name': 'name'
        }

        self._hashed = hashed
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputAttribute of this OutputAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hashed(self):
        """Gets the hashed of this OutputAttribute.


        :return: The hashed of this OutputAttribute.
        :rtype: bool
        """
        return self._hashed

    @hashed.setter
    def hashed(self, hashed):
        """Sets the hashed of this OutputAttribute.


        :param hashed: The hashed of this OutputAttribute.
        :type hashed: bool
        """

        self._hashed = hashed

    @property
    def name(self):
        """Gets the name of this OutputAttribute.


        :return: The name of this OutputAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OutputAttribute.


        :param name: The name of this OutputAttribute.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
