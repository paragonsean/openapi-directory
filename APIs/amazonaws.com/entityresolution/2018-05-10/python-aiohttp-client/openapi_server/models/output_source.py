# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kms_arn: str=None, apply_normalization: bool=None, output: List=None, output_s3_path: str=None):
        """OutputSource - a model defined in OpenAPI

        :param kms_arn: The kms_arn of this OutputSource.
        :param apply_normalization: The apply_normalization of this OutputSource.
        :param output: The output of this OutputSource.
        :param output_s3_path: The output_s3_path of this OutputSource.
        """
        self.openapi_types = {
            'kms_arn': str,
            'apply_normalization': bool,
            'output': List,
            'output_s3_path': str
        }

        self.attribute_map = {
            'kms_arn': 'KMSArn',
            'apply_normalization': 'applyNormalization',
            'output': 'output',
            'output_s3_path': 'outputS3Path'
        }

        self._kms_arn = kms_arn
        self._apply_normalization = apply_normalization
        self._output = output
        self._output_s3_path = output_s3_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputSource of this OutputSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kms_arn(self):
        """Gets the kms_arn of this OutputSource.


        :return: The kms_arn of this OutputSource.
        :rtype: str
        """
        return self._kms_arn

    @kms_arn.setter
    def kms_arn(self, kms_arn):
        """Sets the kms_arn of this OutputSource.


        :param kms_arn: The kms_arn of this OutputSource.
        :type kms_arn: str
        """

        self._kms_arn = kms_arn

    @property
    def apply_normalization(self):
        """Gets the apply_normalization of this OutputSource.


        :return: The apply_normalization of this OutputSource.
        :rtype: bool
        """
        return self._apply_normalization

    @apply_normalization.setter
    def apply_normalization(self, apply_normalization):
        """Sets the apply_normalization of this OutputSource.


        :param apply_normalization: The apply_normalization of this OutputSource.
        :type apply_normalization: bool
        """

        self._apply_normalization = apply_normalization

    @property
    def output(self):
        """Gets the output of this OutputSource.


        :return: The output of this OutputSource.
        :rtype: List
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this OutputSource.


        :param output: The output of this OutputSource.
        :type output: List
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")

        self._output = output

    @property
    def output_s3_path(self):
        """Gets the output_s3_path of this OutputSource.


        :return: The output_s3_path of this OutputSource.
        :rtype: str
        """
        return self._output_s3_path

    @output_s3_path.setter
    def output_s3_path(self, output_s3_path):
        """Sets the output_s3_path of this OutputSource.


        :param output_s3_path: The output_s3_path of this OutputSource.
        :type output_s3_path: str
        """
        if output_s3_path is None:
            raise ValueError("Invalid value for `output_s3_path`, must not be `None`")

        self._output_s3_path = output_s3_path
