# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_matching_model import AttributeMatchingModel
from openapi_server import util


class RuleBasedProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_matching_model: AttributeMatchingModel=None, rules: List=None):
        """RuleBasedProperties - a model defined in OpenAPI

        :param attribute_matching_model: The attribute_matching_model of this RuleBasedProperties.
        :param rules: The rules of this RuleBasedProperties.
        """
        self.openapi_types = {
            'attribute_matching_model': AttributeMatchingModel,
            'rules': List
        }

        self.attribute_map = {
            'attribute_matching_model': 'attributeMatchingModel',
            'rules': 'rules'
        }

        self._attribute_matching_model = attribute_matching_model
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleBasedProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleBasedProperties of this RuleBasedProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_matching_model(self):
        """Gets the attribute_matching_model of this RuleBasedProperties.


        :return: The attribute_matching_model of this RuleBasedProperties.
        :rtype: AttributeMatchingModel
        """
        return self._attribute_matching_model

    @attribute_matching_model.setter
    def attribute_matching_model(self, attribute_matching_model):
        """Sets the attribute_matching_model of this RuleBasedProperties.


        :param attribute_matching_model: The attribute_matching_model of this RuleBasedProperties.
        :type attribute_matching_model: AttributeMatchingModel
        """
        if attribute_matching_model is None:
            raise ValueError("Invalid value for `attribute_matching_model`, must not be `None`")

        self._attribute_matching_model = attribute_matching_model

    @property
    def rules(self):
        """Gets the rules of this RuleBasedProperties.


        :return: The rules of this RuleBasedProperties.
        :rtype: List
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this RuleBasedProperties.


        :param rules: The rules of this RuleBasedProperties.
        :type rules: List
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules
