# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_normalization: bool=None, input_source_arn: str=None, schema_name: str=None):
        """InputSource - a model defined in OpenAPI

        :param apply_normalization: The apply_normalization of this InputSource.
        :param input_source_arn: The input_source_arn of this InputSource.
        :param schema_name: The schema_name of this InputSource.
        """
        self.openapi_types = {
            'apply_normalization': bool,
            'input_source_arn': str,
            'schema_name': str
        }

        self.attribute_map = {
            'apply_normalization': 'applyNormalization',
            'input_source_arn': 'inputSourceARN',
            'schema_name': 'schemaName'
        }

        self._apply_normalization = apply_normalization
        self._input_source_arn = input_source_arn
        self._schema_name = schema_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputSource of this InputSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_normalization(self):
        """Gets the apply_normalization of this InputSource.


        :return: The apply_normalization of this InputSource.
        :rtype: bool
        """
        return self._apply_normalization

    @apply_normalization.setter
    def apply_normalization(self, apply_normalization):
        """Sets the apply_normalization of this InputSource.


        :param apply_normalization: The apply_normalization of this InputSource.
        :type apply_normalization: bool
        """

        self._apply_normalization = apply_normalization

    @property
    def input_source_arn(self):
        """Gets the input_source_arn of this InputSource.


        :return: The input_source_arn of this InputSource.
        :rtype: str
        """
        return self._input_source_arn

    @input_source_arn.setter
    def input_source_arn(self, input_source_arn):
        """Sets the input_source_arn of this InputSource.


        :param input_source_arn: The input_source_arn of this InputSource.
        :type input_source_arn: str
        """
        if input_source_arn is None:
            raise ValueError("Invalid value for `input_source_arn`, must not be `None`")

        self._input_source_arn = input_source_arn

    @property
    def schema_name(self):
        """Gets the schema_name of this InputSource.


        :return: The schema_name of this InputSource.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this InputSource.


        :param schema_name: The schema_name of this InputSource.
        :type schema_name: str
        """
        if schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")

        self._schema_name = schema_name
