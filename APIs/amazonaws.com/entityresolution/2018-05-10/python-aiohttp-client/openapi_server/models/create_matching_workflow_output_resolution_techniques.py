# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_matching_workflow_request_resolution_techniques_rule_based_properties import CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties
from openapi_server.models.resolution_type import ResolutionType
from openapi_server import util


class CreateMatchingWorkflowOutputResolutionTechniques(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resolution_type: ResolutionType=None, rule_based_properties: CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties=None):
        """CreateMatchingWorkflowOutputResolutionTechniques - a model defined in OpenAPI

        :param resolution_type: The resolution_type of this CreateMatchingWorkflowOutputResolutionTechniques.
        :param rule_based_properties: The rule_based_properties of this CreateMatchingWorkflowOutputResolutionTechniques.
        """
        self.openapi_types = {
            'resolution_type': ResolutionType,
            'rule_based_properties': CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties
        }

        self.attribute_map = {
            'resolution_type': 'resolutionType',
            'rule_based_properties': 'ruleBasedProperties'
        }

        self._resolution_type = resolution_type
        self._rule_based_properties = rule_based_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMatchingWorkflowOutputResolutionTechniques':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMatchingWorkflowOutput_resolutionTechniques of this CreateMatchingWorkflowOutputResolutionTechniques.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resolution_type(self):
        """Gets the resolution_type of this CreateMatchingWorkflowOutputResolutionTechniques.


        :return: The resolution_type of this CreateMatchingWorkflowOutputResolutionTechniques.
        :rtype: ResolutionType
        """
        return self._resolution_type

    @resolution_type.setter
    def resolution_type(self, resolution_type):
        """Sets the resolution_type of this CreateMatchingWorkflowOutputResolutionTechniques.


        :param resolution_type: The resolution_type of this CreateMatchingWorkflowOutputResolutionTechniques.
        :type resolution_type: ResolutionType
        """

        self._resolution_type = resolution_type

    @property
    def rule_based_properties(self):
        """Gets the rule_based_properties of this CreateMatchingWorkflowOutputResolutionTechniques.


        :return: The rule_based_properties of this CreateMatchingWorkflowOutputResolutionTechniques.
        :rtype: CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties
        """
        return self._rule_based_properties

    @rule_based_properties.setter
    def rule_based_properties(self, rule_based_properties):
        """Sets the rule_based_properties of this CreateMatchingWorkflowOutputResolutionTechniques.


        :param rule_based_properties: The rule_based_properties of this CreateMatchingWorkflowOutputResolutionTechniques.
        :type rule_based_properties: CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties
        """

        self._rule_based_properties = rule_based_properties
