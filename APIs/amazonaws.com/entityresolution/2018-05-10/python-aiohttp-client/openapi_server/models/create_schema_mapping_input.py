# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSchemaMappingInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, mapped_input_fields: List=None, schema_name: str=None, tags: Dict=None):
        """CreateSchemaMappingInput - a model defined in OpenAPI

        :param description: The description of this CreateSchemaMappingInput.
        :param mapped_input_fields: The mapped_input_fields of this CreateSchemaMappingInput.
        :param schema_name: The schema_name of this CreateSchemaMappingInput.
        :param tags: The tags of this CreateSchemaMappingInput.
        """
        self.openapi_types = {
            'description': str,
            'mapped_input_fields': List,
            'schema_name': str,
            'tags': Dict
        }

        self.attribute_map = {
            'description': 'description',
            'mapped_input_fields': 'mappedInputFields',
            'schema_name': 'schemaName',
            'tags': 'tags'
        }

        self._description = description
        self._mapped_input_fields = mapped_input_fields
        self._schema_name = schema_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSchemaMappingInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSchemaMappingInput of this CreateSchemaMappingInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateSchemaMappingInput.


        :return: The description of this CreateSchemaMappingInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSchemaMappingInput.


        :param description: The description of this CreateSchemaMappingInput.
        :type description: str
        """

        self._description = description

    @property
    def mapped_input_fields(self):
        """Gets the mapped_input_fields of this CreateSchemaMappingInput.


        :return: The mapped_input_fields of this CreateSchemaMappingInput.
        :rtype: List
        """
        return self._mapped_input_fields

    @mapped_input_fields.setter
    def mapped_input_fields(self, mapped_input_fields):
        """Sets the mapped_input_fields of this CreateSchemaMappingInput.


        :param mapped_input_fields: The mapped_input_fields of this CreateSchemaMappingInput.
        :type mapped_input_fields: List
        """

        self._mapped_input_fields = mapped_input_fields

    @property
    def schema_name(self):
        """Gets the schema_name of this CreateSchemaMappingInput.


        :return: The schema_name of this CreateSchemaMappingInput.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this CreateSchemaMappingInput.


        :param schema_name: The schema_name of this CreateSchemaMappingInput.
        :type schema_name: str
        """
        if schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")

        self._schema_name = schema_name

    @property
    def tags(self):
        """Gets the tags of this CreateSchemaMappingInput.


        :return: The tags of this CreateSchemaMappingInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSchemaMappingInput.


        :param tags: The tags of this CreateSchemaMappingInput.
        :type tags: Dict
        """

        self._tags = tags
