# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schema_input_attribute import SchemaInputAttribute
import re
from openapi_server import util


class CreateSchemaMappingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, mapped_input_fields: List[SchemaInputAttribute]=None, schema_name: str=None, tags: Dict[str, str]=None):
        """CreateSchemaMappingRequest - a model defined in OpenAPI

        :param description: The description of this CreateSchemaMappingRequest.
        :param mapped_input_fields: The mapped_input_fields of this CreateSchemaMappingRequest.
        :param schema_name: The schema_name of this CreateSchemaMappingRequest.
        :param tags: The tags of this CreateSchemaMappingRequest.
        """
        self.openapi_types = {
            'description': str,
            'mapped_input_fields': List[SchemaInputAttribute],
            'schema_name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'description',
            'mapped_input_fields': 'mappedInputFields',
            'schema_name': 'schemaName',
            'tags': 'tags'
        }

        self._description = description
        self._mapped_input_fields = mapped_input_fields
        self._schema_name = schema_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSchemaMappingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSchemaMapping_request of this CreateSchemaMappingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateSchemaMappingRequest.

        A description of the schema.

        :return: The description of this CreateSchemaMappingRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSchemaMappingRequest.

        A description of the schema.

        :param description: The description of this CreateSchemaMappingRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def mapped_input_fields(self):
        """Gets the mapped_input_fields of this CreateSchemaMappingRequest.

        A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.

        :return: The mapped_input_fields of this CreateSchemaMappingRequest.
        :rtype: List[SchemaInputAttribute]
        """
        return self._mapped_input_fields

    @mapped_input_fields.setter
    def mapped_input_fields(self, mapped_input_fields):
        """Sets the mapped_input_fields of this CreateSchemaMappingRequest.

        A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.

        :param mapped_input_fields: The mapped_input_fields of this CreateSchemaMappingRequest.
        :type mapped_input_fields: List[SchemaInputAttribute]
        """
        if mapped_input_fields is not None and len(mapped_input_fields) > 25:
            raise ValueError("Invalid value for `mapped_input_fields`, number of items must be less than or equal to `25`")
        if mapped_input_fields is not None and len(mapped_input_fields) < 2:
            raise ValueError("Invalid value for `mapped_input_fields`, number of items must be greater than or equal to `2`")

        self._mapped_input_fields = mapped_input_fields

    @property
    def schema_name(self):
        """Gets the schema_name of this CreateSchemaMappingRequest.

        The name of the schema. There cannot be multiple <code>SchemaMappings</code> with the same name.

        :return: The schema_name of this CreateSchemaMappingRequest.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this CreateSchemaMappingRequest.

        The name of the schema. There cannot be multiple <code>SchemaMappings</code> with the same name.

        :param schema_name: The schema_name of this CreateSchemaMappingRequest.
        :type schema_name: str
        """
        if schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")
        if schema_name is not None and len(schema_name) > 255:
            raise ValueError("Invalid value for `schema_name`, length must be less than or equal to `255`")
        if schema_name is not None and len(schema_name) < 0:
            raise ValueError("Invalid value for `schema_name`, length must be greater than or equal to `0`")
        if schema_name is not None and not re.search(r'^[a-zA-Z_0-9-]*$', schema_name):
            raise ValueError("Invalid value for `schema_name`, must be a follow pattern or equal to `/^[a-zA-Z_0-9-]*$/`")

        self._schema_name = schema_name

    @property
    def tags(self):
        """Gets the tags of this CreateSchemaMappingRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this CreateSchemaMappingRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSchemaMappingRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this CreateSchemaMappingRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
