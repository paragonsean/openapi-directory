# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class JobSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, job_id: str=None, start_time: datetime=None, status: JobStatus=None):
        """JobSummary - a model defined in OpenAPI

        :param end_time: The end_time of this JobSummary.
        :param job_id: The job_id of this JobSummary.
        :param start_time: The start_time of this JobSummary.
        :param status: The status of this JobSummary.
        """
        self.openapi_types = {
            'end_time': datetime,
            'job_id': str,
            'start_time': datetime,
            'status': JobStatus
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'job_id': 'jobId',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._end_time = end_time
        self._job_id = job_id
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobSummary of this JobSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this JobSummary.


        :return: The end_time of this JobSummary.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobSummary.


        :param end_time: The end_time of this JobSummary.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def job_id(self):
        """Gets the job_id of this JobSummary.


        :return: The job_id of this JobSummary.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobSummary.


        :param job_id: The job_id of this JobSummary.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def start_time(self):
        """Gets the start_time of this JobSummary.


        :return: The start_time of this JobSummary.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobSummary.


        :param start_time: The start_time of this JobSummary.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this JobSummary.


        :return: The status of this JobSummary.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobSummary.


        :param status: The status of this JobSummary.
        :type status: JobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
