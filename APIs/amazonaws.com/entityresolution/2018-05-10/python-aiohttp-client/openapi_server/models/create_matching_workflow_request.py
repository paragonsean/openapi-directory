# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_matching_workflow_request_incremental_run_config import CreateMatchingWorkflowRequestIncrementalRunConfig
from openapi_server.models.create_matching_workflow_request_resolution_techniques import CreateMatchingWorkflowRequestResolutionTechniques
from openapi_server.models.input_source import InputSource
from openapi_server.models.output_source import OutputSource
import re
from openapi_server import util


class CreateMatchingWorkflowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, incremental_run_config: CreateMatchingWorkflowRequestIncrementalRunConfig=None, input_source_config: List[InputSource]=None, output_source_config: List[OutputSource]=None, resolution_techniques: CreateMatchingWorkflowRequestResolutionTechniques=None, role_arn: str=None, tags: Dict[str, str]=None, workflow_name: str=None):
        """CreateMatchingWorkflowRequest - a model defined in OpenAPI

        :param description: The description of this CreateMatchingWorkflowRequest.
        :param incremental_run_config: The incremental_run_config of this CreateMatchingWorkflowRequest.
        :param input_source_config: The input_source_config of this CreateMatchingWorkflowRequest.
        :param output_source_config: The output_source_config of this CreateMatchingWorkflowRequest.
        :param resolution_techniques: The resolution_techniques of this CreateMatchingWorkflowRequest.
        :param role_arn: The role_arn of this CreateMatchingWorkflowRequest.
        :param tags: The tags of this CreateMatchingWorkflowRequest.
        :param workflow_name: The workflow_name of this CreateMatchingWorkflowRequest.
        """
        self.openapi_types = {
            'description': str,
            'incremental_run_config': CreateMatchingWorkflowRequestIncrementalRunConfig,
            'input_source_config': List[InputSource],
            'output_source_config': List[OutputSource],
            'resolution_techniques': CreateMatchingWorkflowRequestResolutionTechniques,
            'role_arn': str,
            'tags': Dict[str, str],
            'workflow_name': str
        }

        self.attribute_map = {
            'description': 'description',
            'incremental_run_config': 'incrementalRunConfig',
            'input_source_config': 'inputSourceConfig',
            'output_source_config': 'outputSourceConfig',
            'resolution_techniques': 'resolutionTechniques',
            'role_arn': 'roleArn',
            'tags': 'tags',
            'workflow_name': 'workflowName'
        }

        self._description = description
        self._incremental_run_config = incremental_run_config
        self._input_source_config = input_source_config
        self._output_source_config = output_source_config
        self._resolution_techniques = resolution_techniques
        self._role_arn = role_arn
        self._tags = tags
        self._workflow_name = workflow_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMatchingWorkflowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMatchingWorkflow_request of this CreateMatchingWorkflowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateMatchingWorkflowRequest.

        A description of the workflow.

        :return: The description of this CreateMatchingWorkflowRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateMatchingWorkflowRequest.

        A description of the workflow.

        :param description: The description of this CreateMatchingWorkflowRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def incremental_run_config(self):
        """Gets the incremental_run_config of this CreateMatchingWorkflowRequest.


        :return: The incremental_run_config of this CreateMatchingWorkflowRequest.
        :rtype: CreateMatchingWorkflowRequestIncrementalRunConfig
        """
        return self._incremental_run_config

    @incremental_run_config.setter
    def incremental_run_config(self, incremental_run_config):
        """Sets the incremental_run_config of this CreateMatchingWorkflowRequest.


        :param incremental_run_config: The incremental_run_config of this CreateMatchingWorkflowRequest.
        :type incremental_run_config: CreateMatchingWorkflowRequestIncrementalRunConfig
        """

        self._incremental_run_config = incremental_run_config

    @property
    def input_source_config(self):
        """Gets the input_source_config of this CreateMatchingWorkflowRequest.

        A list of <code>InputSource</code> objects, which have the fields <code>InputSourceARN</code> and <code>SchemaName</code>.

        :return: The input_source_config of this CreateMatchingWorkflowRequest.
        :rtype: List[InputSource]
        """
        return self._input_source_config

    @input_source_config.setter
    def input_source_config(self, input_source_config):
        """Sets the input_source_config of this CreateMatchingWorkflowRequest.

        A list of <code>InputSource</code> objects, which have the fields <code>InputSourceARN</code> and <code>SchemaName</code>.

        :param input_source_config: The input_source_config of this CreateMatchingWorkflowRequest.
        :type input_source_config: List[InputSource]
        """
        if input_source_config is None:
            raise ValueError("Invalid value for `input_source_config`, must not be `None`")
        if input_source_config is not None and len(input_source_config) > 20:
            raise ValueError("Invalid value for `input_source_config`, number of items must be less than or equal to `20`")
        if input_source_config is not None and len(input_source_config) < 1:
            raise ValueError("Invalid value for `input_source_config`, number of items must be greater than or equal to `1`")

        self._input_source_config = input_source_config

    @property
    def output_source_config(self):
        """Gets the output_source_config of this CreateMatchingWorkflowRequest.

        A list of <code>OutputSource</code> objects, each of which contains fields <code>OutputS3Path</code>, <code>ApplyNormalization</code>, and <code>Output</code>.

        :return: The output_source_config of this CreateMatchingWorkflowRequest.
        :rtype: List[OutputSource]
        """
        return self._output_source_config

    @output_source_config.setter
    def output_source_config(self, output_source_config):
        """Sets the output_source_config of this CreateMatchingWorkflowRequest.

        A list of <code>OutputSource</code> objects, each of which contains fields <code>OutputS3Path</code>, <code>ApplyNormalization</code>, and <code>Output</code>.

        :param output_source_config: The output_source_config of this CreateMatchingWorkflowRequest.
        :type output_source_config: List[OutputSource]
        """
        if output_source_config is None:
            raise ValueError("Invalid value for `output_source_config`, must not be `None`")
        if output_source_config is not None and len(output_source_config) > 1:
            raise ValueError("Invalid value for `output_source_config`, number of items must be less than or equal to `1`")
        if output_source_config is not None and len(output_source_config) < 1:
            raise ValueError("Invalid value for `output_source_config`, number of items must be greater than or equal to `1`")

        self._output_source_config = output_source_config

    @property
    def resolution_techniques(self):
        """Gets the resolution_techniques of this CreateMatchingWorkflowRequest.


        :return: The resolution_techniques of this CreateMatchingWorkflowRequest.
        :rtype: CreateMatchingWorkflowRequestResolutionTechniques
        """
        return self._resolution_techniques

    @resolution_techniques.setter
    def resolution_techniques(self, resolution_techniques):
        """Sets the resolution_techniques of this CreateMatchingWorkflowRequest.


        :param resolution_techniques: The resolution_techniques of this CreateMatchingWorkflowRequest.
        :type resolution_techniques: CreateMatchingWorkflowRequestResolutionTechniques
        """
        if resolution_techniques is None:
            raise ValueError("Invalid value for `resolution_techniques`, must not be `None`")

        self._resolution_techniques = resolution_techniques

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateMatchingWorkflowRequest.

        The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to create resources on your behalf as part of workflow execution.

        :return: The role_arn of this CreateMatchingWorkflowRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateMatchingWorkflowRequest.

        The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to create resources on your behalf as part of workflow execution.

        :param role_arn: The role_arn of this CreateMatchingWorkflowRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateMatchingWorkflowRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this CreateMatchingWorkflowRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMatchingWorkflowRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this CreateMatchingWorkflowRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def workflow_name(self):
        """Gets the workflow_name of this CreateMatchingWorkflowRequest.

        The name of the workflow. There cannot be multiple <code>DataIntegrationWorkflows</code> with the same name.

        :return: The workflow_name of this CreateMatchingWorkflowRequest.
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this CreateMatchingWorkflowRequest.

        The name of the workflow. There cannot be multiple <code>DataIntegrationWorkflows</code> with the same name.

        :param workflow_name: The workflow_name of this CreateMatchingWorkflowRequest.
        :type workflow_name: str
        """
        if workflow_name is None:
            raise ValueError("Invalid value for `workflow_name`, must not be `None`")
        if workflow_name is not None and len(workflow_name) > 255:
            raise ValueError("Invalid value for `workflow_name`, length must be less than or equal to `255`")
        if workflow_name is not None and len(workflow_name) < 0:
            raise ValueError("Invalid value for `workflow_name`, length must be greater than or equal to `0`")
        if workflow_name is not None and not re.search(r'^[a-zA-Z_0-9-]*$', workflow_name):
            raise ValueError("Invalid value for `workflow_name`, must be a follow pattern or equal to `/^[a-zA-Z_0-9-]*$/`")

        self._workflow_name = workflow_name
