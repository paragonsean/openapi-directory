# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetMatchIdInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record: Dict=None):
        """GetMatchIdInput - a model defined in OpenAPI

        :param record: The record of this GetMatchIdInput.
        """
        self.openapi_types = {
            'record': Dict
        }

        self.attribute_map = {
            'record': 'record'
        }

        self._record = record

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMatchIdInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetMatchIdInput of this GetMatchIdInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record(self):
        """Gets the record of this GetMatchIdInput.


        :return: The record of this GetMatchIdInput.
        :rtype: Dict
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this GetMatchIdInput.


        :param record: The record of this GetMatchIdInput.
        :type record: Dict
        """
        if record is None:
            raise ValueError("Invalid value for `record`, must not be `None`")

        self._record = record
