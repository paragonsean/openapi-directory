# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schema_attribute_type import SchemaAttributeType
from openapi_server import util


class SchemaInputAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_name: str=None, group_name: str=None, match_key: str=None, type: SchemaAttributeType=None):
        """SchemaInputAttribute - a model defined in OpenAPI

        :param field_name: The field_name of this SchemaInputAttribute.
        :param group_name: The group_name of this SchemaInputAttribute.
        :param match_key: The match_key of this SchemaInputAttribute.
        :param type: The type of this SchemaInputAttribute.
        """
        self.openapi_types = {
            'field_name': str,
            'group_name': str,
            'match_key': str,
            'type': SchemaAttributeType
        }

        self.attribute_map = {
            'field_name': 'fieldName',
            'group_name': 'groupName',
            'match_key': 'matchKey',
            'type': 'type'
        }

        self._field_name = field_name
        self._group_name = group_name
        self._match_key = match_key
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaInputAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaInputAttribute of this SchemaInputAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_name(self):
        """Gets the field_name of this SchemaInputAttribute.


        :return: The field_name of this SchemaInputAttribute.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this SchemaInputAttribute.


        :param field_name: The field_name of this SchemaInputAttribute.
        :type field_name: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")

        self._field_name = field_name

    @property
    def group_name(self):
        """Gets the group_name of this SchemaInputAttribute.


        :return: The group_name of this SchemaInputAttribute.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this SchemaInputAttribute.


        :param group_name: The group_name of this SchemaInputAttribute.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def match_key(self):
        """Gets the match_key of this SchemaInputAttribute.


        :return: The match_key of this SchemaInputAttribute.
        :rtype: str
        """
        return self._match_key

    @match_key.setter
    def match_key(self, match_key):
        """Sets the match_key of this SchemaInputAttribute.


        :param match_key: The match_key of this SchemaInputAttribute.
        :type match_key: str
        """

        self._match_key = match_key

    @property
    def type(self):
        """Gets the type of this SchemaInputAttribute.


        :return: The type of this SchemaInputAttribute.
        :rtype: SchemaAttributeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SchemaInputAttribute.


        :param type: The type of this SchemaInputAttribute.
        :type type: SchemaAttributeType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
