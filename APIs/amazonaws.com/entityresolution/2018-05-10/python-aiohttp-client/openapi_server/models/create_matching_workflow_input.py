# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_matching_workflow_output_incremental_run_config import CreateMatchingWorkflowOutputIncrementalRunConfig
from openapi_server.models.create_matching_workflow_output_resolution_techniques import CreateMatchingWorkflowOutputResolutionTechniques
from openapi_server import util


class CreateMatchingWorkflowInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, incremental_run_config: CreateMatchingWorkflowOutputIncrementalRunConfig=None, input_source_config: List=None, output_source_config: List=None, resolution_techniques: CreateMatchingWorkflowOutputResolutionTechniques=None, role_arn: str=None, tags: Dict=None, workflow_name: str=None):
        """CreateMatchingWorkflowInput - a model defined in OpenAPI

        :param description: The description of this CreateMatchingWorkflowInput.
        :param incremental_run_config: The incremental_run_config of this CreateMatchingWorkflowInput.
        :param input_source_config: The input_source_config of this CreateMatchingWorkflowInput.
        :param output_source_config: The output_source_config of this CreateMatchingWorkflowInput.
        :param resolution_techniques: The resolution_techniques of this CreateMatchingWorkflowInput.
        :param role_arn: The role_arn of this CreateMatchingWorkflowInput.
        :param tags: The tags of this CreateMatchingWorkflowInput.
        :param workflow_name: The workflow_name of this CreateMatchingWorkflowInput.
        """
        self.openapi_types = {
            'description': str,
            'incremental_run_config': CreateMatchingWorkflowOutputIncrementalRunConfig,
            'input_source_config': List,
            'output_source_config': List,
            'resolution_techniques': CreateMatchingWorkflowOutputResolutionTechniques,
            'role_arn': str,
            'tags': Dict,
            'workflow_name': str
        }

        self.attribute_map = {
            'description': 'description',
            'incremental_run_config': 'incrementalRunConfig',
            'input_source_config': 'inputSourceConfig',
            'output_source_config': 'outputSourceConfig',
            'resolution_techniques': 'resolutionTechniques',
            'role_arn': 'roleArn',
            'tags': 'tags',
            'workflow_name': 'workflowName'
        }

        self._description = description
        self._incremental_run_config = incremental_run_config
        self._input_source_config = input_source_config
        self._output_source_config = output_source_config
        self._resolution_techniques = resolution_techniques
        self._role_arn = role_arn
        self._tags = tags
        self._workflow_name = workflow_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMatchingWorkflowInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMatchingWorkflowInput of this CreateMatchingWorkflowInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateMatchingWorkflowInput.


        :return: The description of this CreateMatchingWorkflowInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateMatchingWorkflowInput.


        :param description: The description of this CreateMatchingWorkflowInput.
        :type description: str
        """

        self._description = description

    @property
    def incremental_run_config(self):
        """Gets the incremental_run_config of this CreateMatchingWorkflowInput.


        :return: The incremental_run_config of this CreateMatchingWorkflowInput.
        :rtype: CreateMatchingWorkflowOutputIncrementalRunConfig
        """
        return self._incremental_run_config

    @incremental_run_config.setter
    def incremental_run_config(self, incremental_run_config):
        """Sets the incremental_run_config of this CreateMatchingWorkflowInput.


        :param incremental_run_config: The incremental_run_config of this CreateMatchingWorkflowInput.
        :type incremental_run_config: CreateMatchingWorkflowOutputIncrementalRunConfig
        """

        self._incremental_run_config = incremental_run_config

    @property
    def input_source_config(self):
        """Gets the input_source_config of this CreateMatchingWorkflowInput.


        :return: The input_source_config of this CreateMatchingWorkflowInput.
        :rtype: List
        """
        return self._input_source_config

    @input_source_config.setter
    def input_source_config(self, input_source_config):
        """Sets the input_source_config of this CreateMatchingWorkflowInput.


        :param input_source_config: The input_source_config of this CreateMatchingWorkflowInput.
        :type input_source_config: List
        """
        if input_source_config is None:
            raise ValueError("Invalid value for `input_source_config`, must not be `None`")

        self._input_source_config = input_source_config

    @property
    def output_source_config(self):
        """Gets the output_source_config of this CreateMatchingWorkflowInput.


        :return: The output_source_config of this CreateMatchingWorkflowInput.
        :rtype: List
        """
        return self._output_source_config

    @output_source_config.setter
    def output_source_config(self, output_source_config):
        """Sets the output_source_config of this CreateMatchingWorkflowInput.


        :param output_source_config: The output_source_config of this CreateMatchingWorkflowInput.
        :type output_source_config: List
        """
        if output_source_config is None:
            raise ValueError("Invalid value for `output_source_config`, must not be `None`")

        self._output_source_config = output_source_config

    @property
    def resolution_techniques(self):
        """Gets the resolution_techniques of this CreateMatchingWorkflowInput.


        :return: The resolution_techniques of this CreateMatchingWorkflowInput.
        :rtype: CreateMatchingWorkflowOutputResolutionTechniques
        """
        return self._resolution_techniques

    @resolution_techniques.setter
    def resolution_techniques(self, resolution_techniques):
        """Sets the resolution_techniques of this CreateMatchingWorkflowInput.


        :param resolution_techniques: The resolution_techniques of this CreateMatchingWorkflowInput.
        :type resolution_techniques: CreateMatchingWorkflowOutputResolutionTechniques
        """
        if resolution_techniques is None:
            raise ValueError("Invalid value for `resolution_techniques`, must not be `None`")

        self._resolution_techniques = resolution_techniques

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateMatchingWorkflowInput.


        :return: The role_arn of this CreateMatchingWorkflowInput.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateMatchingWorkflowInput.


        :param role_arn: The role_arn of this CreateMatchingWorkflowInput.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateMatchingWorkflowInput.


        :return: The tags of this CreateMatchingWorkflowInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMatchingWorkflowInput.


        :param tags: The tags of this CreateMatchingWorkflowInput.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def workflow_name(self):
        """Gets the workflow_name of this CreateMatchingWorkflowInput.


        :return: The workflow_name of this CreateMatchingWorkflowInput.
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this CreateMatchingWorkflowInput.


        :param workflow_name: The workflow_name of this CreateMatchingWorkflowInput.
        :type workflow_name: str
        """
        if workflow_name is None:
            raise ValueError("Invalid value for `workflow_name`, must not be `None`")

        self._workflow_name = workflow_name
