# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SchemaMappingSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, schema_arn: str=None, schema_name: str=None, updated_at: datetime=None):
        """SchemaMappingSummary - a model defined in OpenAPI

        :param created_at: The created_at of this SchemaMappingSummary.
        :param schema_arn: The schema_arn of this SchemaMappingSummary.
        :param schema_name: The schema_name of this SchemaMappingSummary.
        :param updated_at: The updated_at of this SchemaMappingSummary.
        """
        self.openapi_types = {
            'created_at': datetime,
            'schema_arn': str,
            'schema_name': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'schema_arn': 'schemaArn',
            'schema_name': 'schemaName',
            'updated_at': 'updatedAt'
        }

        self._created_at = created_at
        self._schema_arn = schema_arn
        self._schema_name = schema_name
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaMappingSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaMappingSummary of this SchemaMappingSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this SchemaMappingSummary.


        :return: The created_at of this SchemaMappingSummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SchemaMappingSummary.


        :param created_at: The created_at of this SchemaMappingSummary.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def schema_arn(self):
        """Gets the schema_arn of this SchemaMappingSummary.


        :return: The schema_arn of this SchemaMappingSummary.
        :rtype: str
        """
        return self._schema_arn

    @schema_arn.setter
    def schema_arn(self, schema_arn):
        """Sets the schema_arn of this SchemaMappingSummary.


        :param schema_arn: The schema_arn of this SchemaMappingSummary.
        :type schema_arn: str
        """
        if schema_arn is None:
            raise ValueError("Invalid value for `schema_arn`, must not be `None`")

        self._schema_arn = schema_arn

    @property
    def schema_name(self):
        """Gets the schema_name of this SchemaMappingSummary.


        :return: The schema_name of this SchemaMappingSummary.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this SchemaMappingSummary.


        :param schema_name: The schema_name of this SchemaMappingSummary.
        :type schema_name: str
        """
        if schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")

        self._schema_name = schema_name

    @property
    def updated_at(self):
        """Gets the updated_at of this SchemaMappingSummary.


        :return: The updated_at of this SchemaMappingSummary.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SchemaMappingSummary.


        :param updated_at: The updated_at of this SchemaMappingSummary.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
