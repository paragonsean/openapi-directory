/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMatchingJobOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMatchingJobOutput::OAIGetMatchingJobOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMatchingJobOutput::OAIGetMatchingJobOutput() {
    this->initializeModel();
}

OAIGetMatchingJobOutput::~OAIGetMatchingJobOutput() {}

void OAIGetMatchingJobOutput::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetMatchingJobOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMatchingJobOutput::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("errorDetails")]);
    m_error_details_isSet = !json[QString("errorDetails")].isNull() && m_error_details_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGetMatchingJobOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMatchingJobOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_details.isSet()) {
        obj.insert(QString("errorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIGetMatchingJobOutput::getEndTime() const {
    return m_end_time;
}
void OAIGetMatchingJobOutput::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetMatchingJobOutput::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetMatchingJobOutput::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIGetMatchingJobOutput_errorDetails OAIGetMatchingJobOutput::getErrorDetails() const {
    return m_error_details;
}
void OAIGetMatchingJobOutput::setErrorDetails(const OAIGetMatchingJobOutput_errorDetails &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIGetMatchingJobOutput::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIGetMatchingJobOutput::is_error_details_Valid() const{
    return m_error_details_isValid;
}

QString OAIGetMatchingJobOutput::getJobId() const {
    return m_job_id;
}
void OAIGetMatchingJobOutput::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIGetMatchingJobOutput::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIGetMatchingJobOutput::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIGetMatchingJobOutput_metrics OAIGetMatchingJobOutput::getMetrics() const {
    return m_metrics;
}
void OAIGetMatchingJobOutput::setMetrics(const OAIGetMatchingJobOutput_metrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIGetMatchingJobOutput::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIGetMatchingJobOutput::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QDateTime OAIGetMatchingJobOutput::getStartTime() const {
    return m_start_time;
}
void OAIGetMatchingJobOutput::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetMatchingJobOutput::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetMatchingJobOutput::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIJobStatus OAIGetMatchingJobOutput::getStatus() const {
    return m_status;
}
void OAIGetMatchingJobOutput::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetMatchingJobOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetMatchingJobOutput::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetMatchingJobOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMatchingJobOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_id_isValid && m_start_time_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
