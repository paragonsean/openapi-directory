/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSchemaMappingOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSchemaMappingOutput::OAIGetSchemaMappingOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSchemaMappingOutput::OAIGetSchemaMappingOutput() {
    this->initializeModel();
}

OAIGetSchemaMappingOutput::~OAIGetSchemaMappingOutput() {}

void OAIGetSchemaMappingOutput::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_mapped_input_fields_isSet = false;
    m_mapped_input_fields_isValid = false;

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIGetSchemaMappingOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSchemaMappingOutput::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_mapped_input_fields_isValid = ::OpenAPI::fromJsonValue(m_mapped_input_fields, json[QString("mappedInputFields")]);
    m_mapped_input_fields_isSet = !json[QString("mappedInputFields")].isNull() && m_mapped_input_fields_isValid;

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("schemaArn")]);
    m_schema_arn_isSet = !json[QString("schemaArn")].isNull() && m_schema_arn_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIGetSchemaMappingOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSchemaMappingOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_mapped_input_fields.isSet()) {
        obj.insert(QString("mappedInputFields"), ::OpenAPI::toJsonValue(m_mapped_input_fields));
    }
    if (m_schema_arn_isSet) {
        obj.insert(QString("schemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIGetSchemaMappingOutput::getCreatedAt() const {
    return m_created_at;
}
void OAIGetSchemaMappingOutput::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetSchemaMappingOutput::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetSchemaMappingOutput::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGetSchemaMappingOutput::getDescription() const {
    return m_description;
}
void OAIGetSchemaMappingOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetSchemaMappingOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetSchemaMappingOutput::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIGetSchemaMappingOutput::getMappedInputFields() const {
    return m_mapped_input_fields;
}
void OAIGetSchemaMappingOutput::setMappedInputFields(const QList &mapped_input_fields) {
    m_mapped_input_fields = mapped_input_fields;
    m_mapped_input_fields_isSet = true;
}

bool OAIGetSchemaMappingOutput::is_mapped_input_fields_Set() const{
    return m_mapped_input_fields_isSet;
}

bool OAIGetSchemaMappingOutput::is_mapped_input_fields_Valid() const{
    return m_mapped_input_fields_isValid;
}

QString OAIGetSchemaMappingOutput::getSchemaArn() const {
    return m_schema_arn;
}
void OAIGetSchemaMappingOutput::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAIGetSchemaMappingOutput::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAIGetSchemaMappingOutput::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

QString OAIGetSchemaMappingOutput::getSchemaName() const {
    return m_schema_name;
}
void OAIGetSchemaMappingOutput::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIGetSchemaMappingOutput::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIGetSchemaMappingOutput::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QMap OAIGetSchemaMappingOutput::getTags() const {
    return m_tags;
}
void OAIGetSchemaMappingOutput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetSchemaMappingOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetSchemaMappingOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIGetSchemaMappingOutput::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetSchemaMappingOutput::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetSchemaMappingOutput::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetSchemaMappingOutput::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIGetSchemaMappingOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapped_input_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSchemaMappingOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_mapped_input_fields_isValid && m_schema_arn_isValid && m_schema_name_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
