/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchingWorkflowSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchingWorkflowSummary::OAIMatchingWorkflowSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchingWorkflowSummary::OAIMatchingWorkflowSummary() {
    this->initializeModel();
}

OAIMatchingWorkflowSummary::~OAIMatchingWorkflowSummary() {}

void OAIMatchingWorkflowSummary::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_workflow_arn_isSet = false;
    m_workflow_arn_isValid = false;

    m_workflow_name_isSet = false;
    m_workflow_name_isValid = false;
}

void OAIMatchingWorkflowSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchingWorkflowSummary::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_workflow_arn_isValid = ::OpenAPI::fromJsonValue(m_workflow_arn, json[QString("workflowArn")]);
    m_workflow_arn_isSet = !json[QString("workflowArn")].isNull() && m_workflow_arn_isValid;

    m_workflow_name_isValid = ::OpenAPI::fromJsonValue(m_workflow_name, json[QString("workflowName")]);
    m_workflow_name_isSet = !json[QString("workflowName")].isNull() && m_workflow_name_isValid;
}

QString OAIMatchingWorkflowSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchingWorkflowSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_workflow_arn_isSet) {
        obj.insert(QString("workflowArn"), ::OpenAPI::toJsonValue(m_workflow_arn));
    }
    if (m_workflow_name_isSet) {
        obj.insert(QString("workflowName"), ::OpenAPI::toJsonValue(m_workflow_name));
    }
    return obj;
}

QDateTime OAIMatchingWorkflowSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIMatchingWorkflowSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMatchingWorkflowSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMatchingWorkflowSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIMatchingWorkflowSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMatchingWorkflowSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMatchingWorkflowSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMatchingWorkflowSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIMatchingWorkflowSummary::getWorkflowArn() const {
    return m_workflow_arn;
}
void OAIMatchingWorkflowSummary::setWorkflowArn(const QString &workflow_arn) {
    m_workflow_arn = workflow_arn;
    m_workflow_arn_isSet = true;
}

bool OAIMatchingWorkflowSummary::is_workflow_arn_Set() const{
    return m_workflow_arn_isSet;
}

bool OAIMatchingWorkflowSummary::is_workflow_arn_Valid() const{
    return m_workflow_arn_isValid;
}

QString OAIMatchingWorkflowSummary::getWorkflowName() const {
    return m_workflow_name;
}
void OAIMatchingWorkflowSummary::setWorkflowName(const QString &workflow_name) {
    m_workflow_name = workflow_name;
    m_workflow_name_isSet = true;
}

bool OAIMatchingWorkflowSummary::is_workflow_name_Set() const{
    return m_workflow_name_isSet;
}

bool OAIMatchingWorkflowSummary::is_workflow_name_Valid() const{
    return m_workflow_name_isValid;
}

bool OAIMatchingWorkflowSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchingWorkflowSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_updated_at_isValid && m_workflow_arn_isValid && m_workflow_name_isValid && true;
}

} // namespace OpenAPI
