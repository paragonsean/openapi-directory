/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMatchingWorkflowOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMatchingWorkflowOutput::OAIGetMatchingWorkflowOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMatchingWorkflowOutput::OAIGetMatchingWorkflowOutput() {
    this->initializeModel();
}

OAIGetMatchingWorkflowOutput::~OAIGetMatchingWorkflowOutput() {}

void OAIGetMatchingWorkflowOutput::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_incremental_run_config_isSet = false;
    m_incremental_run_config_isValid = false;

    m_input_source_config_isSet = false;
    m_input_source_config_isValid = false;

    m_output_source_config_isSet = false;
    m_output_source_config_isValid = false;

    m_resolution_techniques_isSet = false;
    m_resolution_techniques_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_workflow_arn_isSet = false;
    m_workflow_arn_isValid = false;

    m_workflow_name_isSet = false;
    m_workflow_name_isValid = false;
}

void OAIGetMatchingWorkflowOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMatchingWorkflowOutput::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_incremental_run_config_isValid = ::OpenAPI::fromJsonValue(m_incremental_run_config, json[QString("incrementalRunConfig")]);
    m_incremental_run_config_isSet = !json[QString("incrementalRunConfig")].isNull() && m_incremental_run_config_isValid;

    m_input_source_config_isValid = ::OpenAPI::fromJsonValue(m_input_source_config, json[QString("inputSourceConfig")]);
    m_input_source_config_isSet = !json[QString("inputSourceConfig")].isNull() && m_input_source_config_isValid;

    m_output_source_config_isValid = ::OpenAPI::fromJsonValue(m_output_source_config, json[QString("outputSourceConfig")]);
    m_output_source_config_isSet = !json[QString("outputSourceConfig")].isNull() && m_output_source_config_isValid;

    m_resolution_techniques_isValid = ::OpenAPI::fromJsonValue(m_resolution_techniques, json[QString("resolutionTechniques")]);
    m_resolution_techniques_isSet = !json[QString("resolutionTechniques")].isNull() && m_resolution_techniques_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_workflow_arn_isValid = ::OpenAPI::fromJsonValue(m_workflow_arn, json[QString("workflowArn")]);
    m_workflow_arn_isSet = !json[QString("workflowArn")].isNull() && m_workflow_arn_isValid;

    m_workflow_name_isValid = ::OpenAPI::fromJsonValue(m_workflow_name, json[QString("workflowName")]);
    m_workflow_name_isSet = !json[QString("workflowName")].isNull() && m_workflow_name_isValid;
}

QString OAIGetMatchingWorkflowOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMatchingWorkflowOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_incremental_run_config.isSet()) {
        obj.insert(QString("incrementalRunConfig"), ::OpenAPI::toJsonValue(m_incremental_run_config));
    }
    if (m_input_source_config.isSet()) {
        obj.insert(QString("inputSourceConfig"), ::OpenAPI::toJsonValue(m_input_source_config));
    }
    if (m_output_source_config.isSet()) {
        obj.insert(QString("outputSourceConfig"), ::OpenAPI::toJsonValue(m_output_source_config));
    }
    if (m_resolution_techniques.isSet()) {
        obj.insert(QString("resolutionTechniques"), ::OpenAPI::toJsonValue(m_resolution_techniques));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_workflow_arn_isSet) {
        obj.insert(QString("workflowArn"), ::OpenAPI::toJsonValue(m_workflow_arn));
    }
    if (m_workflow_name_isSet) {
        obj.insert(QString("workflowName"), ::OpenAPI::toJsonValue(m_workflow_name));
    }
    return obj;
}

QDateTime OAIGetMatchingWorkflowOutput::getCreatedAt() const {
    return m_created_at;
}
void OAIGetMatchingWorkflowOutput::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGetMatchingWorkflowOutput::getDescription() const {
    return m_description;
}
void OAIGetMatchingWorkflowOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateMatchingWorkflowOutput_incrementalRunConfig OAIGetMatchingWorkflowOutput::getIncrementalRunConfig() const {
    return m_incremental_run_config;
}
void OAIGetMatchingWorkflowOutput::setIncrementalRunConfig(const OAICreateMatchingWorkflowOutput_incrementalRunConfig &incremental_run_config) {
    m_incremental_run_config = incremental_run_config;
    m_incremental_run_config_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_incremental_run_config_Set() const{
    return m_incremental_run_config_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_incremental_run_config_Valid() const{
    return m_incremental_run_config_isValid;
}

QList OAIGetMatchingWorkflowOutput::getInputSourceConfig() const {
    return m_input_source_config;
}
void OAIGetMatchingWorkflowOutput::setInputSourceConfig(const QList &input_source_config) {
    m_input_source_config = input_source_config;
    m_input_source_config_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_input_source_config_Set() const{
    return m_input_source_config_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_input_source_config_Valid() const{
    return m_input_source_config_isValid;
}

QList OAIGetMatchingWorkflowOutput::getOutputSourceConfig() const {
    return m_output_source_config;
}
void OAIGetMatchingWorkflowOutput::setOutputSourceConfig(const QList &output_source_config) {
    m_output_source_config = output_source_config;
    m_output_source_config_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_output_source_config_Set() const{
    return m_output_source_config_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_output_source_config_Valid() const{
    return m_output_source_config_isValid;
}

OAICreateMatchingWorkflowOutput_resolutionTechniques OAIGetMatchingWorkflowOutput::getResolutionTechniques() const {
    return m_resolution_techniques;
}
void OAIGetMatchingWorkflowOutput::setResolutionTechniques(const OAICreateMatchingWorkflowOutput_resolutionTechniques &resolution_techniques) {
    m_resolution_techniques = resolution_techniques;
    m_resolution_techniques_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_resolution_techniques_Set() const{
    return m_resolution_techniques_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_resolution_techniques_Valid() const{
    return m_resolution_techniques_isValid;
}

QString OAIGetMatchingWorkflowOutput::getRoleArn() const {
    return m_role_arn;
}
void OAIGetMatchingWorkflowOutput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QMap OAIGetMatchingWorkflowOutput::getTags() const {
    return m_tags;
}
void OAIGetMatchingWorkflowOutput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIGetMatchingWorkflowOutput::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetMatchingWorkflowOutput::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIGetMatchingWorkflowOutput::getWorkflowArn() const {
    return m_workflow_arn;
}
void OAIGetMatchingWorkflowOutput::setWorkflowArn(const QString &workflow_arn) {
    m_workflow_arn = workflow_arn;
    m_workflow_arn_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_workflow_arn_Set() const{
    return m_workflow_arn_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_workflow_arn_Valid() const{
    return m_workflow_arn_isValid;
}

QString OAIGetMatchingWorkflowOutput::getWorkflowName() const {
    return m_workflow_name;
}
void OAIGetMatchingWorkflowOutput::setWorkflowName(const QString &workflow_name) {
    m_workflow_name = workflow_name;
    m_workflow_name_isSet = true;
}

bool OAIGetMatchingWorkflowOutput::is_workflow_name_Set() const{
    return m_workflow_name_isSet;
}

bool OAIGetMatchingWorkflowOutput::is_workflow_name_Valid() const{
    return m_workflow_name_isValid;
}

bool OAIGetMatchingWorkflowOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incremental_run_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_source_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_source_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_techniques.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMatchingWorkflowOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_input_source_config_isValid && m_output_source_config_isValid && m_resolution_techniques_isValid && m_role_arn_isValid && m_updated_at_isValid && m_workflow_arn_isValid && m_workflow_name_isValid && true;
}

} // namespace OpenAPI
