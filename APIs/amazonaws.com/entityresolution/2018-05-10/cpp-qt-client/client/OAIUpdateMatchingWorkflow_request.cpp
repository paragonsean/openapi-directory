/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateMatchingWorkflow_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateMatchingWorkflow_request::OAIUpdateMatchingWorkflow_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateMatchingWorkflow_request::OAIUpdateMatchingWorkflow_request() {
    this->initializeModel();
}

OAIUpdateMatchingWorkflow_request::~OAIUpdateMatchingWorkflow_request() {}

void OAIUpdateMatchingWorkflow_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_incremental_run_config_isSet = false;
    m_incremental_run_config_isValid = false;

    m_input_source_config_isSet = false;
    m_input_source_config_isValid = false;

    m_output_source_config_isSet = false;
    m_output_source_config_isValid = false;

    m_resolution_techniques_isSet = false;
    m_resolution_techniques_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIUpdateMatchingWorkflow_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateMatchingWorkflow_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_incremental_run_config_isValid = ::OpenAPI::fromJsonValue(m_incremental_run_config, json[QString("incrementalRunConfig")]);
    m_incremental_run_config_isSet = !json[QString("incrementalRunConfig")].isNull() && m_incremental_run_config_isValid;

    m_input_source_config_isValid = ::OpenAPI::fromJsonValue(m_input_source_config, json[QString("inputSourceConfig")]);
    m_input_source_config_isSet = !json[QString("inputSourceConfig")].isNull() && m_input_source_config_isValid;

    m_output_source_config_isValid = ::OpenAPI::fromJsonValue(m_output_source_config, json[QString("outputSourceConfig")]);
    m_output_source_config_isSet = !json[QString("outputSourceConfig")].isNull() && m_output_source_config_isValid;

    m_resolution_techniques_isValid = ::OpenAPI::fromJsonValue(m_resolution_techniques, json[QString("resolutionTechniques")]);
    m_resolution_techniques_isSet = !json[QString("resolutionTechniques")].isNull() && m_resolution_techniques_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;
}

QString OAIUpdateMatchingWorkflow_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateMatchingWorkflow_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_incremental_run_config.isSet()) {
        obj.insert(QString("incrementalRunConfig"), ::OpenAPI::toJsonValue(m_incremental_run_config));
    }
    if (m_input_source_config.size() > 0) {
        obj.insert(QString("inputSourceConfig"), ::OpenAPI::toJsonValue(m_input_source_config));
    }
    if (m_output_source_config.size() > 0) {
        obj.insert(QString("outputSourceConfig"), ::OpenAPI::toJsonValue(m_output_source_config));
    }
    if (m_resolution_techniques.isSet()) {
        obj.insert(QString("resolutionTechniques"), ::OpenAPI::toJsonValue(m_resolution_techniques));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIUpdateMatchingWorkflow_request::getDescription() const {
    return m_description;
}
void OAIUpdateMatchingWorkflow_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateMatchingWorkflow_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateMatchingWorkflow_request::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateMatchingWorkflow_request_incrementalRunConfig OAIUpdateMatchingWorkflow_request::getIncrementalRunConfig() const {
    return m_incremental_run_config;
}
void OAIUpdateMatchingWorkflow_request::setIncrementalRunConfig(const OAICreateMatchingWorkflow_request_incrementalRunConfig &incremental_run_config) {
    m_incremental_run_config = incremental_run_config;
    m_incremental_run_config_isSet = true;
}

bool OAIUpdateMatchingWorkflow_request::is_incremental_run_config_Set() const{
    return m_incremental_run_config_isSet;
}

bool OAIUpdateMatchingWorkflow_request::is_incremental_run_config_Valid() const{
    return m_incremental_run_config_isValid;
}

QList<OAIInputSource> OAIUpdateMatchingWorkflow_request::getInputSourceConfig() const {
    return m_input_source_config;
}
void OAIUpdateMatchingWorkflow_request::setInputSourceConfig(const QList<OAIInputSource> &input_source_config) {
    m_input_source_config = input_source_config;
    m_input_source_config_isSet = true;
}

bool OAIUpdateMatchingWorkflow_request::is_input_source_config_Set() const{
    return m_input_source_config_isSet;
}

bool OAIUpdateMatchingWorkflow_request::is_input_source_config_Valid() const{
    return m_input_source_config_isValid;
}

QList<OAIOutputSource> OAIUpdateMatchingWorkflow_request::getOutputSourceConfig() const {
    return m_output_source_config;
}
void OAIUpdateMatchingWorkflow_request::setOutputSourceConfig(const QList<OAIOutputSource> &output_source_config) {
    m_output_source_config = output_source_config;
    m_output_source_config_isSet = true;
}

bool OAIUpdateMatchingWorkflow_request::is_output_source_config_Set() const{
    return m_output_source_config_isSet;
}

bool OAIUpdateMatchingWorkflow_request::is_output_source_config_Valid() const{
    return m_output_source_config_isValid;
}

OAICreateMatchingWorkflow_request_resolutionTechniques OAIUpdateMatchingWorkflow_request::getResolutionTechniques() const {
    return m_resolution_techniques;
}
void OAIUpdateMatchingWorkflow_request::setResolutionTechniques(const OAICreateMatchingWorkflow_request_resolutionTechniques &resolution_techniques) {
    m_resolution_techniques = resolution_techniques;
    m_resolution_techniques_isSet = true;
}

bool OAIUpdateMatchingWorkflow_request::is_resolution_techniques_Set() const{
    return m_resolution_techniques_isSet;
}

bool OAIUpdateMatchingWorkflow_request::is_resolution_techniques_Valid() const{
    return m_resolution_techniques_isValid;
}

QString OAIUpdateMatchingWorkflow_request::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateMatchingWorkflow_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateMatchingWorkflow_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateMatchingWorkflow_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIUpdateMatchingWorkflow_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incremental_run_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_source_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_source_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_techniques.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateMatchingWorkflow_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_source_config_isValid && m_output_source_config_isValid && m_resolution_techniques_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
