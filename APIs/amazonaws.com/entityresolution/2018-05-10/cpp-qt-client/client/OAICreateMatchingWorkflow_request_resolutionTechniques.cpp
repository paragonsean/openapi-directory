/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMatchingWorkflow_request_resolutionTechniques.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMatchingWorkflow_request_resolutionTechniques::OAICreateMatchingWorkflow_request_resolutionTechniques(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMatchingWorkflow_request_resolutionTechniques::OAICreateMatchingWorkflow_request_resolutionTechniques() {
    this->initializeModel();
}

OAICreateMatchingWorkflow_request_resolutionTechniques::~OAICreateMatchingWorkflow_request_resolutionTechniques() {}

void OAICreateMatchingWorkflow_request_resolutionTechniques::initializeModel() {

    m_resolution_type_isSet = false;
    m_resolution_type_isValid = false;

    m_rule_based_properties_isSet = false;
    m_rule_based_properties_isValid = false;
}

void OAICreateMatchingWorkflow_request_resolutionTechniques::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMatchingWorkflow_request_resolutionTechniques::fromJsonObject(QJsonObject json) {

    m_resolution_type_isValid = ::OpenAPI::fromJsonValue(m_resolution_type, json[QString("resolutionType")]);
    m_resolution_type_isSet = !json[QString("resolutionType")].isNull() && m_resolution_type_isValid;

    m_rule_based_properties_isValid = ::OpenAPI::fromJsonValue(m_rule_based_properties, json[QString("ruleBasedProperties")]);
    m_rule_based_properties_isSet = !json[QString("ruleBasedProperties")].isNull() && m_rule_based_properties_isValid;
}

QString OAICreateMatchingWorkflow_request_resolutionTechniques::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMatchingWorkflow_request_resolutionTechniques::asJsonObject() const {
    QJsonObject obj;
    if (m_resolution_type.isSet()) {
        obj.insert(QString("resolutionType"), ::OpenAPI::toJsonValue(m_resolution_type));
    }
    if (m_rule_based_properties.isSet()) {
        obj.insert(QString("ruleBasedProperties"), ::OpenAPI::toJsonValue(m_rule_based_properties));
    }
    return obj;
}

OAIResolutionType OAICreateMatchingWorkflow_request_resolutionTechniques::getResolutionType() const {
    return m_resolution_type;
}
void OAICreateMatchingWorkflow_request_resolutionTechniques::setResolutionType(const OAIResolutionType &resolution_type) {
    m_resolution_type = resolution_type;
    m_resolution_type_isSet = true;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques::is_resolution_type_Set() const{
    return m_resolution_type_isSet;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques::is_resolution_type_Valid() const{
    return m_resolution_type_isValid;
}

OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties OAICreateMatchingWorkflow_request_resolutionTechniques::getRuleBasedProperties() const {
    return m_rule_based_properties;
}
void OAICreateMatchingWorkflow_request_resolutionTechniques::setRuleBasedProperties(const OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties &rule_based_properties) {
    m_rule_based_properties = rule_based_properties;
    m_rule_based_properties_isSet = true;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques::is_rule_based_properties_Set() const{
    return m_rule_based_properties_isSet;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques::is_rule_based_properties_Valid() const{
    return m_rule_based_properties_isValid;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resolution_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_based_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
