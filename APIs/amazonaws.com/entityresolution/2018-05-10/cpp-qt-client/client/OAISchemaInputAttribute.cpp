/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaInputAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaInputAttribute::OAISchemaInputAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaInputAttribute::OAISchemaInputAttribute() {
    this->initializeModel();
}

OAISchemaInputAttribute::~OAISchemaInputAttribute() {}

void OAISchemaInputAttribute::initializeModel() {

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_match_key_isSet = false;
    m_match_key_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISchemaInputAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaInputAttribute::fromJsonObject(QJsonObject json) {

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("fieldName")]);
    m_field_name_isSet = !json[QString("fieldName")].isNull() && m_field_name_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_match_key_isValid = ::OpenAPI::fromJsonValue(m_match_key, json[QString("matchKey")]);
    m_match_key_isSet = !json[QString("matchKey")].isNull() && m_match_key_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISchemaInputAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaInputAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_field_name_isSet) {
        obj.insert(QString("fieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_match_key_isSet) {
        obj.insert(QString("matchKey"), ::OpenAPI::toJsonValue(m_match_key));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISchemaInputAttribute::getFieldName() const {
    return m_field_name;
}
void OAISchemaInputAttribute::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAISchemaInputAttribute::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAISchemaInputAttribute::is_field_name_Valid() const{
    return m_field_name_isValid;
}

QString OAISchemaInputAttribute::getGroupName() const {
    return m_group_name;
}
void OAISchemaInputAttribute::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAISchemaInputAttribute::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAISchemaInputAttribute::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAISchemaInputAttribute::getMatchKey() const {
    return m_match_key;
}
void OAISchemaInputAttribute::setMatchKey(const QString &match_key) {
    m_match_key = match_key;
    m_match_key_isSet = true;
}

bool OAISchemaInputAttribute::is_match_key_Set() const{
    return m_match_key_isSet;
}

bool OAISchemaInputAttribute::is_match_key_Valid() const{
    return m_match_key_isValid;
}

OAISchemaAttributeType OAISchemaInputAttribute::getType() const {
    return m_type;
}
void OAISchemaInputAttribute::setType(const OAISchemaAttributeType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISchemaInputAttribute::is_type_Set() const{
    return m_type_isSet;
}

bool OAISchemaInputAttribute::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISchemaInputAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaInputAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
