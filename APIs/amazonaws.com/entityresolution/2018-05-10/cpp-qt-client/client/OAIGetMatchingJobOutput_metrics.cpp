/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMatchingJobOutput_metrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMatchingJobOutput_metrics::OAIGetMatchingJobOutput_metrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMatchingJobOutput_metrics::OAIGetMatchingJobOutput_metrics() {
    this->initializeModel();
}

OAIGetMatchingJobOutput_metrics::~OAIGetMatchingJobOutput_metrics() {}

void OAIGetMatchingJobOutput_metrics::initializeModel() {

    m_input_records_isSet = false;
    m_input_records_isValid = false;

    m_match_ids_isSet = false;
    m_match_ids_isValid = false;

    m_records_not_processed_isSet = false;
    m_records_not_processed_isValid = false;

    m_total_records_processed_isSet = false;
    m_total_records_processed_isValid = false;
}

void OAIGetMatchingJobOutput_metrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMatchingJobOutput_metrics::fromJsonObject(QJsonObject json) {

    m_input_records_isValid = ::OpenAPI::fromJsonValue(m_input_records, json[QString("inputRecords")]);
    m_input_records_isSet = !json[QString("inputRecords")].isNull() && m_input_records_isValid;

    m_match_ids_isValid = ::OpenAPI::fromJsonValue(m_match_ids, json[QString("matchIDs")]);
    m_match_ids_isSet = !json[QString("matchIDs")].isNull() && m_match_ids_isValid;

    m_records_not_processed_isValid = ::OpenAPI::fromJsonValue(m_records_not_processed, json[QString("recordsNotProcessed")]);
    m_records_not_processed_isSet = !json[QString("recordsNotProcessed")].isNull() && m_records_not_processed_isValid;

    m_total_records_processed_isValid = ::OpenAPI::fromJsonValue(m_total_records_processed, json[QString("totalRecordsProcessed")]);
    m_total_records_processed_isSet = !json[QString("totalRecordsProcessed")].isNull() && m_total_records_processed_isValid;
}

QString OAIGetMatchingJobOutput_metrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMatchingJobOutput_metrics::asJsonObject() const {
    QJsonObject obj;
    if (m_input_records_isSet) {
        obj.insert(QString("inputRecords"), ::OpenAPI::toJsonValue(m_input_records));
    }
    if (m_match_ids_isSet) {
        obj.insert(QString("matchIDs"), ::OpenAPI::toJsonValue(m_match_ids));
    }
    if (m_records_not_processed_isSet) {
        obj.insert(QString("recordsNotProcessed"), ::OpenAPI::toJsonValue(m_records_not_processed));
    }
    if (m_total_records_processed_isSet) {
        obj.insert(QString("totalRecordsProcessed"), ::OpenAPI::toJsonValue(m_total_records_processed));
    }
    return obj;
}

qint32 OAIGetMatchingJobOutput_metrics::getInputRecords() const {
    return m_input_records;
}
void OAIGetMatchingJobOutput_metrics::setInputRecords(const qint32 &input_records) {
    m_input_records = input_records;
    m_input_records_isSet = true;
}

bool OAIGetMatchingJobOutput_metrics::is_input_records_Set() const{
    return m_input_records_isSet;
}

bool OAIGetMatchingJobOutput_metrics::is_input_records_Valid() const{
    return m_input_records_isValid;
}

qint32 OAIGetMatchingJobOutput_metrics::getMatchIds() const {
    return m_match_ids;
}
void OAIGetMatchingJobOutput_metrics::setMatchIds(const qint32 &match_ids) {
    m_match_ids = match_ids;
    m_match_ids_isSet = true;
}

bool OAIGetMatchingJobOutput_metrics::is_match_ids_Set() const{
    return m_match_ids_isSet;
}

bool OAIGetMatchingJobOutput_metrics::is_match_ids_Valid() const{
    return m_match_ids_isValid;
}

qint32 OAIGetMatchingJobOutput_metrics::getRecordsNotProcessed() const {
    return m_records_not_processed;
}
void OAIGetMatchingJobOutput_metrics::setRecordsNotProcessed(const qint32 &records_not_processed) {
    m_records_not_processed = records_not_processed;
    m_records_not_processed_isSet = true;
}

bool OAIGetMatchingJobOutput_metrics::is_records_not_processed_Set() const{
    return m_records_not_processed_isSet;
}

bool OAIGetMatchingJobOutput_metrics::is_records_not_processed_Valid() const{
    return m_records_not_processed_isValid;
}

qint32 OAIGetMatchingJobOutput_metrics::getTotalRecordsProcessed() const {
    return m_total_records_processed;
}
void OAIGetMatchingJobOutput_metrics::setTotalRecordsProcessed(const qint32 &total_records_processed) {
    m_total_records_processed = total_records_processed;
    m_total_records_processed_isSet = true;
}

bool OAIGetMatchingJobOutput_metrics::is_total_records_processed_Set() const{
    return m_total_records_processed_isSet;
}

bool OAIGetMatchingJobOutput_metrics::is_total_records_processed_Valid() const{
    return m_total_records_processed_isValid;
}

bool OAIGetMatchingJobOutput_metrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_not_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_records_processed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMatchingJobOutput_metrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
