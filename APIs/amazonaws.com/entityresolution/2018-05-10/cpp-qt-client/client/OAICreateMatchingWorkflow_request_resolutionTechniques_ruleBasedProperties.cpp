/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties() {
    this->initializeModel();
}

OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::~OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties() {}

void OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::initializeModel() {

    m_attribute_matching_model_isSet = false;
    m_attribute_matching_model_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::fromJsonObject(QJsonObject json) {

    m_attribute_matching_model_isValid = ::OpenAPI::fromJsonValue(m_attribute_matching_model, json[QString("attributeMatchingModel")]);
    m_attribute_matching_model_isSet = !json[QString("attributeMatchingModel")].isNull() && m_attribute_matching_model_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_matching_model.isSet()) {
        obj.insert(QString("attributeMatchingModel"), ::OpenAPI::toJsonValue(m_attribute_matching_model));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

OAIAttributeMatchingModel OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::getAttributeMatchingModel() const {
    return m_attribute_matching_model;
}
void OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::setAttributeMatchingModel(const OAIAttributeMatchingModel &attribute_matching_model) {
    m_attribute_matching_model = attribute_matching_model;
    m_attribute_matching_model_isSet = true;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::is_attribute_matching_model_Set() const{
    return m_attribute_matching_model_isSet;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::is_attribute_matching_model_Valid() const{
    return m_attribute_matching_model_isValid;
}

QList OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::getRules() const {
    return m_rules;
}
void OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::setRules(const QList &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_matching_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMatchingWorkflow_request_resolutionTechniques_ruleBasedProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_matching_model_isValid && m_rules_isValid && true;
}

} // namespace OpenAPI
