/**
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSchemaMapping_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSchemaMapping_request::OAICreateSchemaMapping_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSchemaMapping_request::OAICreateSchemaMapping_request() {
    this->initializeModel();
}

OAICreateSchemaMapping_request::~OAICreateSchemaMapping_request() {}

void OAICreateSchemaMapping_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_mapped_input_fields_isSet = false;
    m_mapped_input_fields_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSchemaMapping_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSchemaMapping_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_mapped_input_fields_isValid = ::OpenAPI::fromJsonValue(m_mapped_input_fields, json[QString("mappedInputFields")]);
    m_mapped_input_fields_isSet = !json[QString("mappedInputFields")].isNull() && m_mapped_input_fields_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateSchemaMapping_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSchemaMapping_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_mapped_input_fields.size() > 0) {
        obj.insert(QString("mappedInputFields"), ::OpenAPI::toJsonValue(m_mapped_input_fields));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateSchemaMapping_request::getDescription() const {
    return m_description;
}
void OAICreateSchemaMapping_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSchemaMapping_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSchemaMapping_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAISchemaInputAttribute> OAICreateSchemaMapping_request::getMappedInputFields() const {
    return m_mapped_input_fields;
}
void OAICreateSchemaMapping_request::setMappedInputFields(const QList<OAISchemaInputAttribute> &mapped_input_fields) {
    m_mapped_input_fields = mapped_input_fields;
    m_mapped_input_fields_isSet = true;
}

bool OAICreateSchemaMapping_request::is_mapped_input_fields_Set() const{
    return m_mapped_input_fields_isSet;
}

bool OAICreateSchemaMapping_request::is_mapped_input_fields_Valid() const{
    return m_mapped_input_fields_isValid;
}

QString OAICreateSchemaMapping_request::getSchemaName() const {
    return m_schema_name;
}
void OAICreateSchemaMapping_request::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAICreateSchemaMapping_request::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAICreateSchemaMapping_request::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QMap<QString, QString> OAICreateSchemaMapping_request::getTags() const {
    return m_tags;
}
void OAICreateSchemaMapping_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSchemaMapping_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSchemaMapping_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSchemaMapping_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapped_input_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSchemaMapping_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_name_isValid && true;
}

} // namespace OpenAPI
