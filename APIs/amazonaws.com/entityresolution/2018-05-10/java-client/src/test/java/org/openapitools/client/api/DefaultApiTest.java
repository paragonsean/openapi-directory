/*
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateMatchingWorkflowOutput;
import org.openapitools.client.model.CreateMatchingWorkflowRequest;
import org.openapitools.client.model.CreateSchemaMappingOutput;
import org.openapitools.client.model.CreateSchemaMappingRequest;
import org.openapitools.client.model.DeleteMatchingWorkflowOutput;
import org.openapitools.client.model.DeleteSchemaMappingOutput;
import org.openapitools.client.model.GetMatchIdOutput;
import org.openapitools.client.model.GetMatchIdRequest;
import org.openapitools.client.model.GetMatchingJobOutput;
import org.openapitools.client.model.GetMatchingWorkflowOutput;
import org.openapitools.client.model.GetSchemaMappingOutput;
import org.openapitools.client.model.ListMatchingJobsOutput;
import org.openapitools.client.model.ListMatchingWorkflowsOutput;
import org.openapitools.client.model.ListSchemaMappingsOutput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.StartMatchingJobOutput;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateMatchingWorkflowOutput;
import org.openapitools.client.model.UpdateMatchingWorkflowRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a &lt;code&gt;MatchingWorkflow&lt;/code&gt; object which stores the configuration of the data processing job to be run. It is important to note that there should not be a pre-existing &lt;code&gt;MatchingWorkflow&lt;/code&gt; with the same name. To modify an existing workflow, utilize the &lt;code&gt;UpdateMatchingWorkflow&lt;/code&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMatchingWorkflowTest() throws ApiException {
        CreateMatchingWorkflowRequest createMatchingWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMatchingWorkflowOutput response = api.createMatchingWorkflow(createMatchingWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a schema mapping, which defines the schema of the input customer records table. The &lt;code&gt;SchemaMapping&lt;/code&gt; also provides Entity Resolution with some metadata about the table, such as the attribute types of the columns and which columns to match on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSchemaMappingTest() throws ApiException {
        CreateSchemaMappingRequest createSchemaMappingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSchemaMappingOutput response = api.createSchemaMapping(createSchemaMappingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the &lt;code&gt;MatchingWorkflow&lt;/code&gt; with a given name. This operation will succeed even if a workflow with the given name does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMatchingWorkflowTest() throws ApiException {
        String workflowName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteMatchingWorkflowOutput response = api.deleteMatchingWorkflow(workflowName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the &lt;code&gt;SchemaMapping&lt;/code&gt; with a given name. This operation will succeed even if a schema with the given name does not exist. This operation will fail if there is a &lt;code&gt;DataIntegrationWorkflow&lt;/code&gt; object that references the &lt;code&gt;SchemaMapping&lt;/code&gt; in the workflow&#39;s &lt;code&gt;InputSourceConfig&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemaMappingTest() throws ApiException {
        String schemaName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSchemaMappingOutput response = api.deleteSchemaMapping(schemaName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the corresponding Match ID of a customer record if the record has been processed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatchIdTest() throws ApiException {
        String workflowName = null;
        GetMatchIdRequest getMatchIdRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMatchIdOutput response = api.getMatchId(workflowName, getMatchIdRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the status, metrics, and errors (if there are any) that are associated with a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatchingJobTest() throws ApiException {
        String jobId = null;
        String workflowName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMatchingJobOutput response = api.getMatchingJob(jobId, workflowName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the &lt;code&gt;MatchingWorkflow&lt;/code&gt; with a given name, if it exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatchingWorkflowTest() throws ApiException {
        String workflowName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMatchingWorkflowOutput response = api.getMatchingWorkflow(workflowName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the SchemaMapping of a given name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaMappingTest() throws ApiException {
        String schemaName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSchemaMappingOutput response = api.getSchemaMapping(schemaName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all jobs for a given workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMatchingJobsTest() throws ApiException {
        String workflowName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListMatchingJobsOutput response = api.listMatchingJobs(workflowName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of all the &lt;code&gt;MatchingWorkflows&lt;/code&gt; that have been created for an AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMatchingWorkflowsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListMatchingWorkflowsOutput response = api.listMatchingWorkflows(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of all the &lt;code&gt;SchemaMappings&lt;/code&gt; that have been created for an AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSchemaMappingsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListSchemaMappingsOutput response = api.listSchemaMappings(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Displays the tags associated with an AWS Entity Resolution resource. In Entity Resolution, &lt;code&gt;SchemaMapping&lt;/code&gt;, and &lt;code&gt;MatchingWorkflow&lt;/code&gt; can be tagged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceOutput response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the &lt;code&gt;MatchingJob&lt;/code&gt; of a workflow. The workflow must have previously been created using the &lt;code&gt;CreateMatchingWorkflow&lt;/code&gt; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMatchingJobTest() throws ApiException {
        String workflowName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartMatchingJobOutput response = api.startMatchingJob(workflowName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Assigns one or more tags (key-value pairs) to the specified AWS Entity Resolution resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Entity Resolution, &lt;code&gt;SchemaMapping&lt;/code&gt;, and &lt;code&gt;MatchingWorkflow&lt;/code&gt; can be tagged. Tags don&#39;t have any semantic meaning to AWS and are interpreted strictly as strings of characters. You can use the &lt;code&gt;TagResource&lt;/code&gt; action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from the specified AWS Entity Resolution resource. In Entity Resolution, &lt;code&gt;SchemaMapping&lt;/code&gt;, and &lt;code&gt;MatchingWorkflow&lt;/code&gt; can be tagged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing &lt;code&gt;MatchingWorkflow&lt;/code&gt;. This method is identical to &lt;code&gt;CreateMatchingWorkflow&lt;/code&gt;, except it uses an HTTP &lt;code&gt;PUT&lt;/code&gt; request instead of a &lt;code&gt;POST&lt;/code&gt; request, and the &lt;code&gt;MatchingWorkflow&lt;/code&gt; must already exist for the method to succeed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMatchingWorkflowTest() throws ApiException {
        String workflowName = null;
        UpdateMatchingWorkflowRequest updateMatchingWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMatchingWorkflowOutput response = api.updateMatchingWorkflow(workflowName, updateMatchingWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
