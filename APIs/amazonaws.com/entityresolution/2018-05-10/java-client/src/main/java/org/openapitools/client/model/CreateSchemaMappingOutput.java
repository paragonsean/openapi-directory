/*
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSchemaMappingOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:35.797886-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSchemaMappingOutput {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MAPPED_INPUT_FIELDS = "mappedInputFields";
  @SerializedName(SERIALIZED_NAME_MAPPED_INPUT_FIELDS)
  private List mappedInputFields;

  public static final String SERIALIZED_NAME_SCHEMA_ARN = "schemaArn";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ARN)
  private String schemaArn;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public CreateSchemaMappingOutput() {
  }

  public CreateSchemaMappingOutput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateSchemaMappingOutput mappedInputFields(List mappedInputFields) {
    this.mappedInputFields = mappedInputFields;
    return this;
  }

  /**
   * Get mappedInputFields
   * @return mappedInputFields
   */
  @javax.annotation.Nonnull
  public List getMappedInputFields() {
    return mappedInputFields;
  }

  public void setMappedInputFields(List mappedInputFields) {
    this.mappedInputFields = mappedInputFields;
  }


  public CreateSchemaMappingOutput schemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
    return this;
  }

  /**
   * Get schemaArn
   * @return schemaArn
   */
  @javax.annotation.Nonnull
  public String getSchemaArn() {
    return schemaArn;
  }

  public void setSchemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
  }


  public CreateSchemaMappingOutput schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * Get schemaName
   * @return schemaName
   */
  @javax.annotation.Nonnull
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSchemaMappingOutput createSchemaMappingOutput = (CreateSchemaMappingOutput) o;
    return Objects.equals(this.description, createSchemaMappingOutput.description) &&
        Objects.equals(this.mappedInputFields, createSchemaMappingOutput.mappedInputFields) &&
        Objects.equals(this.schemaArn, createSchemaMappingOutput.schemaArn) &&
        Objects.equals(this.schemaName, createSchemaMappingOutput.schemaName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, mappedInputFields, schemaArn, schemaName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSchemaMappingOutput {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mappedInputFields: ").append(toIndentedString(mappedInputFields)).append("\n");
    sb.append("    schemaArn: ").append(toIndentedString(schemaArn)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("mappedInputFields");
    openapiFields.add("schemaArn");
    openapiFields.add("schemaName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("mappedInputFields");
    openapiRequiredFields.add("schemaArn");
    openapiRequiredFields.add("schemaName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSchemaMappingOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSchemaMappingOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSchemaMappingOutput is not found in the empty JSON string", CreateSchemaMappingOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSchemaMappingOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSchemaMappingOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSchemaMappingOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `description`
      String.validateJsonElement(jsonObj.get("description"));
      // validate the required field `mappedInputFields`
      List.validateJsonElement(jsonObj.get("mappedInputFields"));
      // validate the required field `schemaArn`
      String.validateJsonElement(jsonObj.get("schemaArn"));
      // validate the required field `schemaName`
      String.validateJsonElement(jsonObj.get("schemaName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSchemaMappingOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSchemaMappingOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSchemaMappingOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSchemaMappingOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSchemaMappingOutput>() {
           @Override
           public void write(JsonWriter out, CreateSchemaMappingOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSchemaMappingOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSchemaMappingOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSchemaMappingOutput
   * @throws IOException if the JSON string is invalid with respect to CreateSchemaMappingOutput
   */
  public static CreateSchemaMappingOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSchemaMappingOutput.class);
  }

  /**
   * Convert an instance of CreateSchemaMappingOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

