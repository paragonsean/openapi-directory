/*
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object containing &lt;code&gt;InputRecords&lt;/code&gt;, &lt;code&gt;TotalRecordsProcessed&lt;/code&gt;, &lt;code&gt;MatchIDs&lt;/code&gt;, and &lt;code&gt;RecordsNotProcessed&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:35.797886-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobMetrics {
  public static final String SERIALIZED_NAME_INPUT_RECORDS = "inputRecords";
  @SerializedName(SERIALIZED_NAME_INPUT_RECORDS)
  private Integer inputRecords;

  public static final String SERIALIZED_NAME_MATCH_I_DS = "matchIDs";
  @SerializedName(SERIALIZED_NAME_MATCH_I_DS)
  private Integer matchIDs;

  public static final String SERIALIZED_NAME_RECORDS_NOT_PROCESSED = "recordsNotProcessed";
  @SerializedName(SERIALIZED_NAME_RECORDS_NOT_PROCESSED)
  private Integer recordsNotProcessed;

  public static final String SERIALIZED_NAME_TOTAL_RECORDS_PROCESSED = "totalRecordsProcessed";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECORDS_PROCESSED)
  private Integer totalRecordsProcessed;

  public JobMetrics() {
  }

  public JobMetrics inputRecords(Integer inputRecords) {
    this.inputRecords = inputRecords;
    return this;
  }

  /**
   * Get inputRecords
   * @return inputRecords
   */
  @javax.annotation.Nullable
  public Integer getInputRecords() {
    return inputRecords;
  }

  public void setInputRecords(Integer inputRecords) {
    this.inputRecords = inputRecords;
  }


  public JobMetrics matchIDs(Integer matchIDs) {
    this.matchIDs = matchIDs;
    return this;
  }

  /**
   * Get matchIDs
   * @return matchIDs
   */
  @javax.annotation.Nullable
  public Integer getMatchIDs() {
    return matchIDs;
  }

  public void setMatchIDs(Integer matchIDs) {
    this.matchIDs = matchIDs;
  }


  public JobMetrics recordsNotProcessed(Integer recordsNotProcessed) {
    this.recordsNotProcessed = recordsNotProcessed;
    return this;
  }

  /**
   * Get recordsNotProcessed
   * @return recordsNotProcessed
   */
  @javax.annotation.Nullable
  public Integer getRecordsNotProcessed() {
    return recordsNotProcessed;
  }

  public void setRecordsNotProcessed(Integer recordsNotProcessed) {
    this.recordsNotProcessed = recordsNotProcessed;
  }


  public JobMetrics totalRecordsProcessed(Integer totalRecordsProcessed) {
    this.totalRecordsProcessed = totalRecordsProcessed;
    return this;
  }

  /**
   * Get totalRecordsProcessed
   * @return totalRecordsProcessed
   */
  @javax.annotation.Nullable
  public Integer getTotalRecordsProcessed() {
    return totalRecordsProcessed;
  }

  public void setTotalRecordsProcessed(Integer totalRecordsProcessed) {
    this.totalRecordsProcessed = totalRecordsProcessed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobMetrics jobMetrics = (JobMetrics) o;
    return Objects.equals(this.inputRecords, jobMetrics.inputRecords) &&
        Objects.equals(this.matchIDs, jobMetrics.matchIDs) &&
        Objects.equals(this.recordsNotProcessed, jobMetrics.recordsNotProcessed) &&
        Objects.equals(this.totalRecordsProcessed, jobMetrics.totalRecordsProcessed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputRecords, matchIDs, recordsNotProcessed, totalRecordsProcessed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobMetrics {\n");
    sb.append("    inputRecords: ").append(toIndentedString(inputRecords)).append("\n");
    sb.append("    matchIDs: ").append(toIndentedString(matchIDs)).append("\n");
    sb.append("    recordsNotProcessed: ").append(toIndentedString(recordsNotProcessed)).append("\n");
    sb.append("    totalRecordsProcessed: ").append(toIndentedString(totalRecordsProcessed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputRecords");
    openapiFields.add("matchIDs");
    openapiFields.add("recordsNotProcessed");
    openapiFields.add("totalRecordsProcessed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobMetrics is not found in the empty JSON string", JobMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `inputRecords`
      if (jsonObj.get("inputRecords") != null && !jsonObj.get("inputRecords").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("inputRecords"));
      }
      // validate the optional field `matchIDs`
      if (jsonObj.get("matchIDs") != null && !jsonObj.get("matchIDs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("matchIDs"));
      }
      // validate the optional field `recordsNotProcessed`
      if (jsonObj.get("recordsNotProcessed") != null && !jsonObj.get("recordsNotProcessed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("recordsNotProcessed"));
      }
      // validate the optional field `totalRecordsProcessed`
      if (jsonObj.get("totalRecordsProcessed") != null && !jsonObj.get("totalRecordsProcessed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("totalRecordsProcessed"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<JobMetrics>() {
           @Override
           public void write(JsonWriter out, JobMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobMetrics
   * @throws IOException if the JSON string is invalid with respect to JobMetrics
   */
  public static JobMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobMetrics.class);
  }

  /**
   * Convert an instance of JobMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

