/*
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties;
import org.openapitools.client.model.ResolutionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMatchingWorkflowOutputResolutionTechniques
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:35.797886-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMatchingWorkflowOutputResolutionTechniques {
  public static final String SERIALIZED_NAME_RESOLUTION_TYPE = "resolutionType";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_TYPE)
  private ResolutionType resolutionType;

  public static final String SERIALIZED_NAME_RULE_BASED_PROPERTIES = "ruleBasedProperties";
  @SerializedName(SERIALIZED_NAME_RULE_BASED_PROPERTIES)
  private CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties ruleBasedProperties;

  public CreateMatchingWorkflowOutputResolutionTechniques() {
  }

  public CreateMatchingWorkflowOutputResolutionTechniques resolutionType(ResolutionType resolutionType) {
    this.resolutionType = resolutionType;
    return this;
  }

  /**
   * Get resolutionType
   * @return resolutionType
   */
  @javax.annotation.Nullable
  public ResolutionType getResolutionType() {
    return resolutionType;
  }

  public void setResolutionType(ResolutionType resolutionType) {
    this.resolutionType = resolutionType;
  }


  public CreateMatchingWorkflowOutputResolutionTechniques ruleBasedProperties(CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties ruleBasedProperties) {
    this.ruleBasedProperties = ruleBasedProperties;
    return this;
  }

  /**
   * Get ruleBasedProperties
   * @return ruleBasedProperties
   */
  @javax.annotation.Nullable
  public CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties getRuleBasedProperties() {
    return ruleBasedProperties;
  }

  public void setRuleBasedProperties(CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties ruleBasedProperties) {
    this.ruleBasedProperties = ruleBasedProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMatchingWorkflowOutputResolutionTechniques createMatchingWorkflowOutputResolutionTechniques = (CreateMatchingWorkflowOutputResolutionTechniques) o;
    return Objects.equals(this.resolutionType, createMatchingWorkflowOutputResolutionTechniques.resolutionType) &&
        Objects.equals(this.ruleBasedProperties, createMatchingWorkflowOutputResolutionTechniques.ruleBasedProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resolutionType, ruleBasedProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMatchingWorkflowOutputResolutionTechniques {\n");
    sb.append("    resolutionType: ").append(toIndentedString(resolutionType)).append("\n");
    sb.append("    ruleBasedProperties: ").append(toIndentedString(ruleBasedProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resolutionType");
    openapiFields.add("ruleBasedProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMatchingWorkflowOutputResolutionTechniques
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMatchingWorkflowOutputResolutionTechniques.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMatchingWorkflowOutputResolutionTechniques is not found in the empty JSON string", CreateMatchingWorkflowOutputResolutionTechniques.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMatchingWorkflowOutputResolutionTechniques.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMatchingWorkflowOutputResolutionTechniques` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `resolutionType`
      if (jsonObj.get("resolutionType") != null && !jsonObj.get("resolutionType").isJsonNull()) {
        ResolutionType.validateJsonElement(jsonObj.get("resolutionType"));
      }
      // validate the optional field `ruleBasedProperties`
      if (jsonObj.get("ruleBasedProperties") != null && !jsonObj.get("ruleBasedProperties").isJsonNull()) {
        CreateMatchingWorkflowRequestResolutionTechniquesRuleBasedProperties.validateJsonElement(jsonObj.get("ruleBasedProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMatchingWorkflowOutputResolutionTechniques.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMatchingWorkflowOutputResolutionTechniques' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMatchingWorkflowOutputResolutionTechniques> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMatchingWorkflowOutputResolutionTechniques.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMatchingWorkflowOutputResolutionTechniques>() {
           @Override
           public void write(JsonWriter out, CreateMatchingWorkflowOutputResolutionTechniques value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMatchingWorkflowOutputResolutionTechniques read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMatchingWorkflowOutputResolutionTechniques given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMatchingWorkflowOutputResolutionTechniques
   * @throws IOException if the JSON string is invalid with respect to CreateMatchingWorkflowOutputResolutionTechniques
   */
  public static CreateMatchingWorkflowOutputResolutionTechniques fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMatchingWorkflowOutputResolutionTechniques.class);
  }

  /**
   * Convert an instance of CreateMatchingWorkflowOutputResolutionTechniques to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

