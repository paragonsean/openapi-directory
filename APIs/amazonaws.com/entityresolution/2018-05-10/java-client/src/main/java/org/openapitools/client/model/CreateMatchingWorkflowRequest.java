/*
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateMatchingWorkflowRequestIncrementalRunConfig;
import org.openapitools.client.model.CreateMatchingWorkflowRequestResolutionTechniques;
import org.openapitools.client.model.InputSource;
import org.openapitools.client.model.OutputSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMatchingWorkflowRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:35.797886-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMatchingWorkflowRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INCREMENTAL_RUN_CONFIG = "incrementalRunConfig";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL_RUN_CONFIG)
  private CreateMatchingWorkflowRequestIncrementalRunConfig incrementalRunConfig;

  public static final String SERIALIZED_NAME_INPUT_SOURCE_CONFIG = "inputSourceConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_SOURCE_CONFIG)
  private List<InputSource> inputSourceConfig = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_SOURCE_CONFIG = "outputSourceConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SOURCE_CONFIG)
  private List<OutputSource> outputSourceConfig = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOLUTION_TECHNIQUES = "resolutionTechniques";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_TECHNIQUES)
  private CreateMatchingWorkflowRequestResolutionTechniques resolutionTechniques;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_WORKFLOW_NAME = "workflowName";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_NAME)
  private String workflowName;

  public CreateMatchingWorkflowRequest() {
  }

  public CreateMatchingWorkflowRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the workflow.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateMatchingWorkflowRequest incrementalRunConfig(CreateMatchingWorkflowRequestIncrementalRunConfig incrementalRunConfig) {
    this.incrementalRunConfig = incrementalRunConfig;
    return this;
  }

  /**
   * Get incrementalRunConfig
   * @return incrementalRunConfig
   */
  @javax.annotation.Nullable
  public CreateMatchingWorkflowRequestIncrementalRunConfig getIncrementalRunConfig() {
    return incrementalRunConfig;
  }

  public void setIncrementalRunConfig(CreateMatchingWorkflowRequestIncrementalRunConfig incrementalRunConfig) {
    this.incrementalRunConfig = incrementalRunConfig;
  }


  public CreateMatchingWorkflowRequest inputSourceConfig(List<InputSource> inputSourceConfig) {
    this.inputSourceConfig = inputSourceConfig;
    return this;
  }

  public CreateMatchingWorkflowRequest addInputSourceConfigItem(InputSource inputSourceConfigItem) {
    if (this.inputSourceConfig == null) {
      this.inputSourceConfig = new ArrayList<>();
    }
    this.inputSourceConfig.add(inputSourceConfigItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;InputSource&lt;/code&gt; objects, which have the fields &lt;code&gt;InputSourceARN&lt;/code&gt; and &lt;code&gt;SchemaName&lt;/code&gt;.
   * @return inputSourceConfig
   */
  @javax.annotation.Nonnull
  public List<InputSource> getInputSourceConfig() {
    return inputSourceConfig;
  }

  public void setInputSourceConfig(List<InputSource> inputSourceConfig) {
    this.inputSourceConfig = inputSourceConfig;
  }


  public CreateMatchingWorkflowRequest outputSourceConfig(List<OutputSource> outputSourceConfig) {
    this.outputSourceConfig = outputSourceConfig;
    return this;
  }

  public CreateMatchingWorkflowRequest addOutputSourceConfigItem(OutputSource outputSourceConfigItem) {
    if (this.outputSourceConfig == null) {
      this.outputSourceConfig = new ArrayList<>();
    }
    this.outputSourceConfig.add(outputSourceConfigItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;OutputSource&lt;/code&gt; objects, each of which contains fields &lt;code&gt;OutputS3Path&lt;/code&gt;, &lt;code&gt;ApplyNormalization&lt;/code&gt;, and &lt;code&gt;Output&lt;/code&gt;.
   * @return outputSourceConfig
   */
  @javax.annotation.Nonnull
  public List<OutputSource> getOutputSourceConfig() {
    return outputSourceConfig;
  }

  public void setOutputSourceConfig(List<OutputSource> outputSourceConfig) {
    this.outputSourceConfig = outputSourceConfig;
  }


  public CreateMatchingWorkflowRequest resolutionTechniques(CreateMatchingWorkflowRequestResolutionTechniques resolutionTechniques) {
    this.resolutionTechniques = resolutionTechniques;
    return this;
  }

  /**
   * Get resolutionTechniques
   * @return resolutionTechniques
   */
  @javax.annotation.Nonnull
  public CreateMatchingWorkflowRequestResolutionTechniques getResolutionTechniques() {
    return resolutionTechniques;
  }

  public void setResolutionTechniques(CreateMatchingWorkflowRequestResolutionTechniques resolutionTechniques) {
    this.resolutionTechniques = resolutionTechniques;
  }


  public CreateMatchingWorkflowRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to create resources on your behalf as part of workflow execution.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateMatchingWorkflowRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateMatchingWorkflowRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags used to organize, track, or control access for this resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateMatchingWorkflowRequest workflowName(String workflowName) {
    this.workflowName = workflowName;
    return this;
  }

  /**
   * The name of the workflow. There cannot be multiple &lt;code&gt;DataIntegrationWorkflows&lt;/code&gt; with the same name.
   * @return workflowName
   */
  @javax.annotation.Nonnull
  public String getWorkflowName() {
    return workflowName;
  }

  public void setWorkflowName(String workflowName) {
    this.workflowName = workflowName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMatchingWorkflowRequest createMatchingWorkflowRequest = (CreateMatchingWorkflowRequest) o;
    return Objects.equals(this.description, createMatchingWorkflowRequest.description) &&
        Objects.equals(this.incrementalRunConfig, createMatchingWorkflowRequest.incrementalRunConfig) &&
        Objects.equals(this.inputSourceConfig, createMatchingWorkflowRequest.inputSourceConfig) &&
        Objects.equals(this.outputSourceConfig, createMatchingWorkflowRequest.outputSourceConfig) &&
        Objects.equals(this.resolutionTechniques, createMatchingWorkflowRequest.resolutionTechniques) &&
        Objects.equals(this.roleArn, createMatchingWorkflowRequest.roleArn) &&
        Objects.equals(this.tags, createMatchingWorkflowRequest.tags) &&
        Objects.equals(this.workflowName, createMatchingWorkflowRequest.workflowName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, incrementalRunConfig, inputSourceConfig, outputSourceConfig, resolutionTechniques, roleArn, tags, workflowName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMatchingWorkflowRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    incrementalRunConfig: ").append(toIndentedString(incrementalRunConfig)).append("\n");
    sb.append("    inputSourceConfig: ").append(toIndentedString(inputSourceConfig)).append("\n");
    sb.append("    outputSourceConfig: ").append(toIndentedString(outputSourceConfig)).append("\n");
    sb.append("    resolutionTechniques: ").append(toIndentedString(resolutionTechniques)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    workflowName: ").append(toIndentedString(workflowName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("incrementalRunConfig");
    openapiFields.add("inputSourceConfig");
    openapiFields.add("outputSourceConfig");
    openapiFields.add("resolutionTechniques");
    openapiFields.add("roleArn");
    openapiFields.add("tags");
    openapiFields.add("workflowName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inputSourceConfig");
    openapiRequiredFields.add("outputSourceConfig");
    openapiRequiredFields.add("resolutionTechniques");
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("workflowName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMatchingWorkflowRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMatchingWorkflowRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMatchingWorkflowRequest is not found in the empty JSON string", CreateMatchingWorkflowRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMatchingWorkflowRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMatchingWorkflowRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMatchingWorkflowRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `incrementalRunConfig`
      if (jsonObj.get("incrementalRunConfig") != null && !jsonObj.get("incrementalRunConfig").isJsonNull()) {
        CreateMatchingWorkflowRequestIncrementalRunConfig.validateJsonElement(jsonObj.get("incrementalRunConfig"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("inputSourceConfig").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputSourceConfig` to be an array in the JSON string but got `%s`", jsonObj.get("inputSourceConfig").toString()));
      }

      JsonArray jsonArrayinputSourceConfig = jsonObj.getAsJsonArray("inputSourceConfig");
      // validate the required field `inputSourceConfig` (array)
      for (int i = 0; i < jsonArrayinputSourceConfig.size(); i++) {
        InputSource.validateJsonElement(jsonArrayinputSourceConfig.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("outputSourceConfig").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputSourceConfig` to be an array in the JSON string but got `%s`", jsonObj.get("outputSourceConfig").toString()));
      }

      JsonArray jsonArrayoutputSourceConfig = jsonObj.getAsJsonArray("outputSourceConfig");
      // validate the required field `outputSourceConfig` (array)
      for (int i = 0; i < jsonArrayoutputSourceConfig.size(); i++) {
        OutputSource.validateJsonElement(jsonArrayoutputSourceConfig.get(i));
      };
      // validate the required field `resolutionTechniques`
      CreateMatchingWorkflowRequestResolutionTechniques.validateJsonElement(jsonObj.get("resolutionTechniques"));
      if (!jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
      if (!jsonObj.get("workflowName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflowName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMatchingWorkflowRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMatchingWorkflowRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMatchingWorkflowRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMatchingWorkflowRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMatchingWorkflowRequest>() {
           @Override
           public void write(JsonWriter out, CreateMatchingWorkflowRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMatchingWorkflowRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMatchingWorkflowRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMatchingWorkflowRequest
   * @throws IOException if the JSON string is invalid with respect to CreateMatchingWorkflowRequest
   */
  public static CreateMatchingWorkflowRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMatchingWorkflowRequest.class);
  }

  /**
   * Convert an instance of CreateMatchingWorkflowRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

