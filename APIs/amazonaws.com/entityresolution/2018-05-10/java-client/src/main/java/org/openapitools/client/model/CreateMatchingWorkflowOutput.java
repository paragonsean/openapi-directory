/*
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateMatchingWorkflowOutputIncrementalRunConfig;
import org.openapitools.client.model.CreateMatchingWorkflowOutputResolutionTechniques;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMatchingWorkflowOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:35.797886-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMatchingWorkflowOutput {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INCREMENTAL_RUN_CONFIG = "incrementalRunConfig";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL_RUN_CONFIG)
  private CreateMatchingWorkflowOutputIncrementalRunConfig incrementalRunConfig;

  public static final String SERIALIZED_NAME_INPUT_SOURCE_CONFIG = "inputSourceConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_SOURCE_CONFIG)
  private List inputSourceConfig;

  public static final String SERIALIZED_NAME_OUTPUT_SOURCE_CONFIG = "outputSourceConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SOURCE_CONFIG)
  private List outputSourceConfig;

  public static final String SERIALIZED_NAME_RESOLUTION_TECHNIQUES = "resolutionTechniques";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_TECHNIQUES)
  private CreateMatchingWorkflowOutputResolutionTechniques resolutionTechniques;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_WORKFLOW_ARN = "workflowArn";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ARN)
  private String workflowArn;

  public static final String SERIALIZED_NAME_WORKFLOW_NAME = "workflowName";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_NAME)
  private String workflowName;

  public CreateMatchingWorkflowOutput() {
  }

  public CreateMatchingWorkflowOutput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateMatchingWorkflowOutput incrementalRunConfig(CreateMatchingWorkflowOutputIncrementalRunConfig incrementalRunConfig) {
    this.incrementalRunConfig = incrementalRunConfig;
    return this;
  }

  /**
   * Get incrementalRunConfig
   * @return incrementalRunConfig
   */
  @javax.annotation.Nullable
  public CreateMatchingWorkflowOutputIncrementalRunConfig getIncrementalRunConfig() {
    return incrementalRunConfig;
  }

  public void setIncrementalRunConfig(CreateMatchingWorkflowOutputIncrementalRunConfig incrementalRunConfig) {
    this.incrementalRunConfig = incrementalRunConfig;
  }


  public CreateMatchingWorkflowOutput inputSourceConfig(List inputSourceConfig) {
    this.inputSourceConfig = inputSourceConfig;
    return this;
  }

  /**
   * Get inputSourceConfig
   * @return inputSourceConfig
   */
  @javax.annotation.Nonnull
  public List getInputSourceConfig() {
    return inputSourceConfig;
  }

  public void setInputSourceConfig(List inputSourceConfig) {
    this.inputSourceConfig = inputSourceConfig;
  }


  public CreateMatchingWorkflowOutput outputSourceConfig(List outputSourceConfig) {
    this.outputSourceConfig = outputSourceConfig;
    return this;
  }

  /**
   * Get outputSourceConfig
   * @return outputSourceConfig
   */
  @javax.annotation.Nonnull
  public List getOutputSourceConfig() {
    return outputSourceConfig;
  }

  public void setOutputSourceConfig(List outputSourceConfig) {
    this.outputSourceConfig = outputSourceConfig;
  }


  public CreateMatchingWorkflowOutput resolutionTechniques(CreateMatchingWorkflowOutputResolutionTechniques resolutionTechniques) {
    this.resolutionTechniques = resolutionTechniques;
    return this;
  }

  /**
   * Get resolutionTechniques
   * @return resolutionTechniques
   */
  @javax.annotation.Nonnull
  public CreateMatchingWorkflowOutputResolutionTechniques getResolutionTechniques() {
    return resolutionTechniques;
  }

  public void setResolutionTechniques(CreateMatchingWorkflowOutputResolutionTechniques resolutionTechniques) {
    this.resolutionTechniques = resolutionTechniques;
  }


  public CreateMatchingWorkflowOutput roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateMatchingWorkflowOutput workflowArn(String workflowArn) {
    this.workflowArn = workflowArn;
    return this;
  }

  /**
   * Get workflowArn
   * @return workflowArn
   */
  @javax.annotation.Nonnull
  public String getWorkflowArn() {
    return workflowArn;
  }

  public void setWorkflowArn(String workflowArn) {
    this.workflowArn = workflowArn;
  }


  public CreateMatchingWorkflowOutput workflowName(String workflowName) {
    this.workflowName = workflowName;
    return this;
  }

  /**
   * Get workflowName
   * @return workflowName
   */
  @javax.annotation.Nonnull
  public String getWorkflowName() {
    return workflowName;
  }

  public void setWorkflowName(String workflowName) {
    this.workflowName = workflowName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMatchingWorkflowOutput createMatchingWorkflowOutput = (CreateMatchingWorkflowOutput) o;
    return Objects.equals(this.description, createMatchingWorkflowOutput.description) &&
        Objects.equals(this.incrementalRunConfig, createMatchingWorkflowOutput.incrementalRunConfig) &&
        Objects.equals(this.inputSourceConfig, createMatchingWorkflowOutput.inputSourceConfig) &&
        Objects.equals(this.outputSourceConfig, createMatchingWorkflowOutput.outputSourceConfig) &&
        Objects.equals(this.resolutionTechniques, createMatchingWorkflowOutput.resolutionTechniques) &&
        Objects.equals(this.roleArn, createMatchingWorkflowOutput.roleArn) &&
        Objects.equals(this.workflowArn, createMatchingWorkflowOutput.workflowArn) &&
        Objects.equals(this.workflowName, createMatchingWorkflowOutput.workflowName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, incrementalRunConfig, inputSourceConfig, outputSourceConfig, resolutionTechniques, roleArn, workflowArn, workflowName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMatchingWorkflowOutput {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    incrementalRunConfig: ").append(toIndentedString(incrementalRunConfig)).append("\n");
    sb.append("    inputSourceConfig: ").append(toIndentedString(inputSourceConfig)).append("\n");
    sb.append("    outputSourceConfig: ").append(toIndentedString(outputSourceConfig)).append("\n");
    sb.append("    resolutionTechniques: ").append(toIndentedString(resolutionTechniques)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    workflowArn: ").append(toIndentedString(workflowArn)).append("\n");
    sb.append("    workflowName: ").append(toIndentedString(workflowName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("incrementalRunConfig");
    openapiFields.add("inputSourceConfig");
    openapiFields.add("outputSourceConfig");
    openapiFields.add("resolutionTechniques");
    openapiFields.add("roleArn");
    openapiFields.add("workflowArn");
    openapiFields.add("workflowName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inputSourceConfig");
    openapiRequiredFields.add("outputSourceConfig");
    openapiRequiredFields.add("resolutionTechniques");
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("workflowArn");
    openapiRequiredFields.add("workflowName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMatchingWorkflowOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMatchingWorkflowOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMatchingWorkflowOutput is not found in the empty JSON string", CreateMatchingWorkflowOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMatchingWorkflowOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMatchingWorkflowOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMatchingWorkflowOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `incrementalRunConfig`
      if (jsonObj.get("incrementalRunConfig") != null && !jsonObj.get("incrementalRunConfig").isJsonNull()) {
        CreateMatchingWorkflowOutputIncrementalRunConfig.validateJsonElement(jsonObj.get("incrementalRunConfig"));
      }
      // validate the required field `inputSourceConfig`
      List.validateJsonElement(jsonObj.get("inputSourceConfig"));
      // validate the required field `outputSourceConfig`
      List.validateJsonElement(jsonObj.get("outputSourceConfig"));
      // validate the required field `resolutionTechniques`
      CreateMatchingWorkflowOutputResolutionTechniques.validateJsonElement(jsonObj.get("resolutionTechniques"));
      // validate the required field `roleArn`
      String.validateJsonElement(jsonObj.get("roleArn"));
      // validate the required field `workflowArn`
      String.validateJsonElement(jsonObj.get("workflowArn"));
      // validate the required field `workflowName`
      String.validateJsonElement(jsonObj.get("workflowName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMatchingWorkflowOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMatchingWorkflowOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMatchingWorkflowOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMatchingWorkflowOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMatchingWorkflowOutput>() {
           @Override
           public void write(JsonWriter out, CreateMatchingWorkflowOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMatchingWorkflowOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMatchingWorkflowOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMatchingWorkflowOutput
   * @throws IOException if the JSON string is invalid with respect to CreateMatchingWorkflowOutput
   */
  public static CreateMatchingWorkflowOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMatchingWorkflowOutput.class);
  }

  /**
   * Convert an instance of CreateMatchingWorkflowOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

