/*
 * AWS EntityResolution
 * <p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html\">AWS Entity Resolution User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of &lt;code&gt;OutputAttribute&lt;/code&gt; objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:35.797886-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutputSource {
  public static final String SERIALIZED_NAME_KM_S_ARN = "KMSArn";
  @SerializedName(SERIALIZED_NAME_KM_S_ARN)
  private String kmSArn;

  public static final String SERIALIZED_NAME_APPLY_NORMALIZATION = "applyNormalization";
  @SerializedName(SERIALIZED_NAME_APPLY_NORMALIZATION)
  private Boolean applyNormalization;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private List output;

  public static final String SERIALIZED_NAME_OUTPUT_S3_PATH = "outputS3Path";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_PATH)
  private String outputS3Path;

  public OutputSource() {
  }

  public OutputSource kmSArn(String kmSArn) {
    this.kmSArn = kmSArn;
    return this;
  }

  /**
   * Get kmSArn
   * @return kmSArn
   */
  @javax.annotation.Nullable
  public String getKmSArn() {
    return kmSArn;
  }

  public void setKmSArn(String kmSArn) {
    this.kmSArn = kmSArn;
  }


  public OutputSource applyNormalization(Boolean applyNormalization) {
    this.applyNormalization = applyNormalization;
    return this;
  }

  /**
   * Get applyNormalization
   * @return applyNormalization
   */
  @javax.annotation.Nullable
  public Boolean getApplyNormalization() {
    return applyNormalization;
  }

  public void setApplyNormalization(Boolean applyNormalization) {
    this.applyNormalization = applyNormalization;
  }


  public OutputSource output(List output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nonnull
  public List getOutput() {
    return output;
  }

  public void setOutput(List output) {
    this.output = output;
  }


  public OutputSource outputS3Path(String outputS3Path) {
    this.outputS3Path = outputS3Path;
    return this;
  }

  /**
   * Get outputS3Path
   * @return outputS3Path
   */
  @javax.annotation.Nonnull
  public String getOutputS3Path() {
    return outputS3Path;
  }

  public void setOutputS3Path(String outputS3Path) {
    this.outputS3Path = outputS3Path;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputSource outputSource = (OutputSource) o;
    return Objects.equals(this.kmSArn, outputSource.kmSArn) &&
        Objects.equals(this.applyNormalization, outputSource.applyNormalization) &&
        Objects.equals(this.output, outputSource.output) &&
        Objects.equals(this.outputS3Path, outputSource.outputS3Path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kmSArn, applyNormalization, output, outputS3Path);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputSource {\n");
    sb.append("    kmSArn: ").append(toIndentedString(kmSArn)).append("\n");
    sb.append("    applyNormalization: ").append(toIndentedString(applyNormalization)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    outputS3Path: ").append(toIndentedString(outputS3Path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("KMSArn");
    openapiFields.add("applyNormalization");
    openapiFields.add("output");
    openapiFields.add("outputS3Path");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("output");
    openapiRequiredFields.add("outputS3Path");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutputSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutputSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutputSource is not found in the empty JSON string", OutputSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutputSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutputSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutputSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `KMSArn`
      if (jsonObj.get("KMSArn") != null && !jsonObj.get("KMSArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KMSArn"));
      }
      // validate the optional field `applyNormalization`
      if (jsonObj.get("applyNormalization") != null && !jsonObj.get("applyNormalization").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("applyNormalization"));
      }
      // validate the required field `output`
      List.validateJsonElement(jsonObj.get("output"));
      // validate the required field `outputS3Path`
      String.validateJsonElement(jsonObj.get("outputS3Path"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutputSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutputSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutputSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutputSource.class));

       return (TypeAdapter<T>) new TypeAdapter<OutputSource>() {
           @Override
           public void write(JsonWriter out, OutputSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutputSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutputSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutputSource
   * @throws IOException if the JSON string is invalid with respect to OutputSource
   */
  public static OutputSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutputSource.class);
  }

  /**
   * Convert an instance of OutputSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

