/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdditionalInferenceSpecificationDefinition model module.
 * @module model/AdditionalInferenceSpecificationDefinition
 * @version 2017-07-24
 */
class AdditionalInferenceSpecificationDefinition {
    /**
     * Constructs a new <code>AdditionalInferenceSpecificationDefinition</code>.
     * A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package
     * @alias module:model/AdditionalInferenceSpecificationDefinition
     * @param name {String} 
     * @param containers {Array} 
     */
    constructor(name, containers) { 
        
        AdditionalInferenceSpecificationDefinition.initialize(this, name, containers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, containers) { 
        obj['Name'] = name;
        obj['Containers'] = containers;
    }

    /**
     * Constructs a <code>AdditionalInferenceSpecificationDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalInferenceSpecificationDefinition} obj Optional instance to populate.
     * @return {module:model/AdditionalInferenceSpecificationDefinition} The populated <code>AdditionalInferenceSpecificationDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalInferenceSpecificationDefinition();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Containers')) {
                obj['Containers'] = ApiClient.convertToType(data['Containers'], Array);
            }
            if (data.hasOwnProperty('SupportedTransformInstanceTypes')) {
                obj['SupportedTransformInstanceTypes'] = ApiClient.convertToType(data['SupportedTransformInstanceTypes'], Array);
            }
            if (data.hasOwnProperty('SupportedRealtimeInferenceInstanceTypes')) {
                obj['SupportedRealtimeInferenceInstanceTypes'] = ApiClient.convertToType(data['SupportedRealtimeInferenceInstanceTypes'], Array);
            }
            if (data.hasOwnProperty('SupportedContentTypes')) {
                obj['SupportedContentTypes'] = ApiClient.convertToType(data['SupportedContentTypes'], Array);
            }
            if (data.hasOwnProperty('SupportedResponseMIMETypes')) {
                obj['SupportedResponseMIMETypes'] = ApiClient.convertToType(data['SupportedResponseMIMETypes'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalInferenceSpecificationDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalInferenceSpecificationDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AdditionalInferenceSpecificationDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `Containers`
        if (data['Containers']) { // data not null
          Array.validateJSON(data['Containers']);
        }
        // validate the optional field `SupportedTransformInstanceTypes`
        if (data['SupportedTransformInstanceTypes']) { // data not null
          Array.validateJSON(data['SupportedTransformInstanceTypes']);
        }
        // validate the optional field `SupportedRealtimeInferenceInstanceTypes`
        if (data['SupportedRealtimeInferenceInstanceTypes']) { // data not null
          Array.validateJSON(data['SupportedRealtimeInferenceInstanceTypes']);
        }
        // validate the optional field `SupportedContentTypes`
        if (data['SupportedContentTypes']) { // data not null
          Array.validateJSON(data['SupportedContentTypes']);
        }
        // validate the optional field `SupportedResponseMIMETypes`
        if (data['SupportedResponseMIMETypes']) { // data not null
          Array.validateJSON(data['SupportedResponseMIMETypes']);
        }

        return true;
    }


}

AdditionalInferenceSpecificationDefinition.RequiredProperties = ["Name", "Containers"];

/**
 * @member {String} Name
 */
AdditionalInferenceSpecificationDefinition.prototype['Name'] = undefined;

/**
 * @member {String} Description
 */
AdditionalInferenceSpecificationDefinition.prototype['Description'] = undefined;

/**
 * @member {Array} Containers
 */
AdditionalInferenceSpecificationDefinition.prototype['Containers'] = undefined;

/**
 * @member {Array} SupportedTransformInstanceTypes
 */
AdditionalInferenceSpecificationDefinition.prototype['SupportedTransformInstanceTypes'] = undefined;

/**
 * @member {Array} SupportedRealtimeInferenceInstanceTypes
 */
AdditionalInferenceSpecificationDefinition.prototype['SupportedRealtimeInferenceInstanceTypes'] = undefined;

/**
 * @member {Array} SupportedContentTypes
 */
AdditionalInferenceSpecificationDefinition.prototype['SupportedContentTypes'] = undefined;

/**
 * @member {Array} SupportedResponseMIMETypes
 */
AdditionalInferenceSpecificationDefinition.prototype['SupportedResponseMIMETypes'] = undefined;






export default AdditionalInferenceSpecificationDefinition;

