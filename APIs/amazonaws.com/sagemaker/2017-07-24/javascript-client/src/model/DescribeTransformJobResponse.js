/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchStrategy from './BatchStrategy';
import CreateTransformJobRequestDataCaptureConfig from './CreateTransformJobRequestDataCaptureConfig';
import CreateTransformJobRequestTransformResources from './CreateTransformJobRequestTransformResources';
import DataProcessing from './DataProcessing';
import DescribeTransformJobResponseModelClientConfig from './DescribeTransformJobResponseModelClientConfig';
import DescribeTransformJobResponseTransformInput from './DescribeTransformJobResponseTransformInput';
import DescribeTransformJobResponseTransformOutput from './DescribeTransformJobResponseTransformOutput';
import ExperimentConfig from './ExperimentConfig';
import TransformJobStatus from './TransformJobStatus';

/**
 * The DescribeTransformJobResponse model module.
 * @module model/DescribeTransformJobResponse
 * @version 2017-07-24
 */
class DescribeTransformJobResponse {
    /**
     * Constructs a new <code>DescribeTransformJobResponse</code>.
     * @alias module:model/DescribeTransformJobResponse
     * @param transformJobName {String} 
     * @param transformJobArn {String} 
     * @param transformJobStatus {module:model/TransformJobStatus} 
     * @param modelName {String} 
     * @param transformInput {module:model/DescribeTransformJobResponseTransformInput} 
     * @param transformResources {module:model/CreateTransformJobRequestTransformResources} 
     * @param creationTime {Date} 
     */
    constructor(transformJobName, transformJobArn, transformJobStatus, modelName, transformInput, transformResources, creationTime) { 
        
        DescribeTransformJobResponse.initialize(this, transformJobName, transformJobArn, transformJobStatus, modelName, transformInput, transformResources, creationTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transformJobName, transformJobArn, transformJobStatus, modelName, transformInput, transformResources, creationTime) { 
        obj['TransformJobName'] = transformJobName;
        obj['TransformJobArn'] = transformJobArn;
        obj['TransformJobStatus'] = transformJobStatus;
        obj['ModelName'] = modelName;
        obj['TransformInput'] = transformInput;
        obj['TransformResources'] = transformResources;
        obj['CreationTime'] = creationTime;
    }

    /**
     * Constructs a <code>DescribeTransformJobResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeTransformJobResponse} obj Optional instance to populate.
     * @return {module:model/DescribeTransformJobResponse} The populated <code>DescribeTransformJobResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeTransformJobResponse();

            if (data.hasOwnProperty('TransformJobName')) {
                obj['TransformJobName'] = ApiClient.convertToType(data['TransformJobName'], 'String');
            }
            if (data.hasOwnProperty('TransformJobArn')) {
                obj['TransformJobArn'] = ApiClient.convertToType(data['TransformJobArn'], 'String');
            }
            if (data.hasOwnProperty('TransformJobStatus')) {
                obj['TransformJobStatus'] = ApiClient.convertToType(data['TransformJobStatus'], TransformJobStatus);
            }
            if (data.hasOwnProperty('FailureReason')) {
                obj['FailureReason'] = ApiClient.convertToType(data['FailureReason'], 'String');
            }
            if (data.hasOwnProperty('ModelName')) {
                obj['ModelName'] = ApiClient.convertToType(data['ModelName'], 'String');
            }
            if (data.hasOwnProperty('MaxConcurrentTransforms')) {
                obj['MaxConcurrentTransforms'] = ApiClient.convertToType(data['MaxConcurrentTransforms'], 'Number');
            }
            if (data.hasOwnProperty('ModelClientConfig')) {
                obj['ModelClientConfig'] = DescribeTransformJobResponseModelClientConfig.constructFromObject(data['ModelClientConfig']);
            }
            if (data.hasOwnProperty('MaxPayloadInMB')) {
                obj['MaxPayloadInMB'] = ApiClient.convertToType(data['MaxPayloadInMB'], 'Number');
            }
            if (data.hasOwnProperty('BatchStrategy')) {
                obj['BatchStrategy'] = ApiClient.convertToType(data['BatchStrategy'], BatchStrategy);
            }
            if (data.hasOwnProperty('Environment')) {
                obj['Environment'] = ApiClient.convertToType(data['Environment'], Object);
            }
            if (data.hasOwnProperty('TransformInput')) {
                obj['TransformInput'] = DescribeTransformJobResponseTransformInput.constructFromObject(data['TransformInput']);
            }
            if (data.hasOwnProperty('TransformOutput')) {
                obj['TransformOutput'] = DescribeTransformJobResponseTransformOutput.constructFromObject(data['TransformOutput']);
            }
            if (data.hasOwnProperty('DataCaptureConfig')) {
                obj['DataCaptureConfig'] = CreateTransformJobRequestDataCaptureConfig.constructFromObject(data['DataCaptureConfig']);
            }
            if (data.hasOwnProperty('TransformResources')) {
                obj['TransformResources'] = CreateTransformJobRequestTransformResources.constructFromObject(data['TransformResources']);
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('TransformStartTime')) {
                obj['TransformStartTime'] = ApiClient.convertToType(data['TransformStartTime'], 'Date');
            }
            if (data.hasOwnProperty('TransformEndTime')) {
                obj['TransformEndTime'] = ApiClient.convertToType(data['TransformEndTime'], 'Date');
            }
            if (data.hasOwnProperty('LabelingJobArn')) {
                obj['LabelingJobArn'] = ApiClient.convertToType(data['LabelingJobArn'], 'String');
            }
            if (data.hasOwnProperty('AutoMLJobArn')) {
                obj['AutoMLJobArn'] = ApiClient.convertToType(data['AutoMLJobArn'], 'String');
            }
            if (data.hasOwnProperty('DataProcessing')) {
                obj['DataProcessing'] = DataProcessing.constructFromObject(data['DataProcessing']);
            }
            if (data.hasOwnProperty('ExperimentConfig')) {
                obj['ExperimentConfig'] = ExperimentConfig.constructFromObject(data['ExperimentConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeTransformJobResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeTransformJobResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribeTransformJobResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `TransformJobName`
        if (data['TransformJobName']) { // data not null
          String.validateJSON(data['TransformJobName']);
        }
        // validate the optional field `TransformJobArn`
        if (data['TransformJobArn']) { // data not null
          String.validateJSON(data['TransformJobArn']);
        }
        // validate the optional field `TransformJobStatus`
        if (data['TransformJobStatus']) { // data not null
          TransformJobStatus.validateJSON(data['TransformJobStatus']);
        }
        // validate the optional field `FailureReason`
        if (data['FailureReason']) { // data not null
          String.validateJSON(data['FailureReason']);
        }
        // validate the optional field `ModelName`
        if (data['ModelName']) { // data not null
          String.validateJSON(data['ModelName']);
        }
        // validate the optional field `MaxConcurrentTransforms`
        if (data['MaxConcurrentTransforms']) { // data not null
          Number.validateJSON(data['MaxConcurrentTransforms']);
        }
        // validate the optional field `ModelClientConfig`
        if (data['ModelClientConfig']) { // data not null
          DescribeTransformJobResponseModelClientConfig.validateJSON(data['ModelClientConfig']);
        }
        // validate the optional field `MaxPayloadInMB`
        if (data['MaxPayloadInMB']) { // data not null
          Number.validateJSON(data['MaxPayloadInMB']);
        }
        // validate the optional field `BatchStrategy`
        if (data['BatchStrategy']) { // data not null
          BatchStrategy.validateJSON(data['BatchStrategy']);
        }
        // validate the optional field `Environment`
        if (data['Environment']) { // data not null
          Object.validateJSON(data['Environment']);
        }
        // validate the optional field `TransformInput`
        if (data['TransformInput']) { // data not null
          DescribeTransformJobResponseTransformInput.validateJSON(data['TransformInput']);
        }
        // validate the optional field `TransformOutput`
        if (data['TransformOutput']) { // data not null
          DescribeTransformJobResponseTransformOutput.validateJSON(data['TransformOutput']);
        }
        // validate the optional field `DataCaptureConfig`
        if (data['DataCaptureConfig']) { // data not null
          CreateTransformJobRequestDataCaptureConfig.validateJSON(data['DataCaptureConfig']);
        }
        // validate the optional field `TransformResources`
        if (data['TransformResources']) { // data not null
          CreateTransformJobRequestTransformResources.validateJSON(data['TransformResources']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `TransformStartTime`
        if (data['TransformStartTime']) { // data not null
          Date.validateJSON(data['TransformStartTime']);
        }
        // validate the optional field `TransformEndTime`
        if (data['TransformEndTime']) { // data not null
          Date.validateJSON(data['TransformEndTime']);
        }
        // validate the optional field `LabelingJobArn`
        if (data['LabelingJobArn']) { // data not null
          String.validateJSON(data['LabelingJobArn']);
        }
        // validate the optional field `AutoMLJobArn`
        if (data['AutoMLJobArn']) { // data not null
          String.validateJSON(data['AutoMLJobArn']);
        }
        // validate the optional field `DataProcessing`
        if (data['DataProcessing']) { // data not null
          DataProcessing.validateJSON(data['DataProcessing']);
        }
        // validate the optional field `ExperimentConfig`
        if (data['ExperimentConfig']) { // data not null
          ExperimentConfig.validateJSON(data['ExperimentConfig']);
        }

        return true;
    }


}

DescribeTransformJobResponse.RequiredProperties = ["TransformJobName", "TransformJobArn", "TransformJobStatus", "ModelName", "TransformInput", "TransformResources", "CreationTime"];

/**
 * @member {String} TransformJobName
 */
DescribeTransformJobResponse.prototype['TransformJobName'] = undefined;

/**
 * @member {String} TransformJobArn
 */
DescribeTransformJobResponse.prototype['TransformJobArn'] = undefined;

/**
 * @member {module:model/TransformJobStatus} TransformJobStatus
 */
DescribeTransformJobResponse.prototype['TransformJobStatus'] = undefined;

/**
 * @member {String} FailureReason
 */
DescribeTransformJobResponse.prototype['FailureReason'] = undefined;

/**
 * @member {String} ModelName
 */
DescribeTransformJobResponse.prototype['ModelName'] = undefined;

/**
 * @member {Number} MaxConcurrentTransforms
 */
DescribeTransformJobResponse.prototype['MaxConcurrentTransforms'] = undefined;

/**
 * @member {module:model/DescribeTransformJobResponseModelClientConfig} ModelClientConfig
 */
DescribeTransformJobResponse.prototype['ModelClientConfig'] = undefined;

/**
 * @member {Number} MaxPayloadInMB
 */
DescribeTransformJobResponse.prototype['MaxPayloadInMB'] = undefined;

/**
 * @member {module:model/BatchStrategy} BatchStrategy
 */
DescribeTransformJobResponse.prototype['BatchStrategy'] = undefined;

/**
 * @member {Object} Environment
 */
DescribeTransformJobResponse.prototype['Environment'] = undefined;

/**
 * @member {module:model/DescribeTransformJobResponseTransformInput} TransformInput
 */
DescribeTransformJobResponse.prototype['TransformInput'] = undefined;

/**
 * @member {module:model/DescribeTransformJobResponseTransformOutput} TransformOutput
 */
DescribeTransformJobResponse.prototype['TransformOutput'] = undefined;

/**
 * @member {module:model/CreateTransformJobRequestDataCaptureConfig} DataCaptureConfig
 */
DescribeTransformJobResponse.prototype['DataCaptureConfig'] = undefined;

/**
 * @member {module:model/CreateTransformJobRequestTransformResources} TransformResources
 */
DescribeTransformJobResponse.prototype['TransformResources'] = undefined;

/**
 * @member {Date} CreationTime
 */
DescribeTransformJobResponse.prototype['CreationTime'] = undefined;

/**
 * @member {Date} TransformStartTime
 */
DescribeTransformJobResponse.prototype['TransformStartTime'] = undefined;

/**
 * @member {Date} TransformEndTime
 */
DescribeTransformJobResponse.prototype['TransformEndTime'] = undefined;

/**
 * @member {String} LabelingJobArn
 */
DescribeTransformJobResponse.prototype['LabelingJobArn'] = undefined;

/**
 * @member {String} AutoMLJobArn
 */
DescribeTransformJobResponse.prototype['AutoMLJobArn'] = undefined;

/**
 * @member {module:model/DataProcessing} DataProcessing
 */
DescribeTransformJobResponse.prototype['DataProcessing'] = undefined;

/**
 * @member {module:model/ExperimentConfig} ExperimentConfig
 */
DescribeTransformJobResponse.prototype['ExperimentConfig'] = undefined;






export default DescribeTransformJobResponse;

