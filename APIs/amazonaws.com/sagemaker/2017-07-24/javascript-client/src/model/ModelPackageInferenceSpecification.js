/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InferenceSpecification from './InferenceSpecification';

/**
 * The ModelPackageInferenceSpecification model module.
 * @module model/ModelPackageInferenceSpecification
 * @version 2017-07-24
 */
class ModelPackageInferenceSpecification {
    /**
     * Constructs a new <code>ModelPackageInferenceSpecification</code>.
     * @alias module:model/ModelPackageInferenceSpecification
     * @implements module:model/InferenceSpecification
     * @param containers {Array} 
     * @param supportedContentTypes {Array} 
     * @param supportedResponseMIMETypes {Array} 
     */
    constructor(containers, supportedContentTypes, supportedResponseMIMETypes) { 
        InferenceSpecification.initialize(this, containers, supportedContentTypes, supportedResponseMIMETypes);
        ModelPackageInferenceSpecification.initialize(this, containers, supportedContentTypes, supportedResponseMIMETypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, containers, supportedContentTypes, supportedResponseMIMETypes) { 
        obj['Containers'] = containers;
        obj['SupportedContentTypes'] = supportedContentTypes;
        obj['SupportedResponseMIMETypes'] = supportedResponseMIMETypes;
    }

    /**
     * Constructs a <code>ModelPackageInferenceSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelPackageInferenceSpecification} obj Optional instance to populate.
     * @return {module:model/ModelPackageInferenceSpecification} The populated <code>ModelPackageInferenceSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelPackageInferenceSpecification();
            InferenceSpecification.constructFromObject(data, obj);

            if (data.hasOwnProperty('Containers')) {
                obj['Containers'] = ApiClient.convertToType(data['Containers'], Array);
            }
            if (data.hasOwnProperty('SupportedTransformInstanceTypes')) {
                obj['SupportedTransformInstanceTypes'] = ApiClient.convertToType(data['SupportedTransformInstanceTypes'], Array);
            }
            if (data.hasOwnProperty('SupportedRealtimeInferenceInstanceTypes')) {
                obj['SupportedRealtimeInferenceInstanceTypes'] = ApiClient.convertToType(data['SupportedRealtimeInferenceInstanceTypes'], Array);
            }
            if (data.hasOwnProperty('SupportedContentTypes')) {
                obj['SupportedContentTypes'] = ApiClient.convertToType(data['SupportedContentTypes'], Array);
            }
            if (data.hasOwnProperty('SupportedResponseMIMETypes')) {
                obj['SupportedResponseMIMETypes'] = ApiClient.convertToType(data['SupportedResponseMIMETypes'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelPackageInferenceSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelPackageInferenceSpecification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModelPackageInferenceSpecification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Containers`
        if (data['Containers']) { // data not null
          Array.validateJSON(data['Containers']);
        }
        // validate the optional field `SupportedTransformInstanceTypes`
        if (data['SupportedTransformInstanceTypes']) { // data not null
          Array.validateJSON(data['SupportedTransformInstanceTypes']);
        }
        // validate the optional field `SupportedRealtimeInferenceInstanceTypes`
        if (data['SupportedRealtimeInferenceInstanceTypes']) { // data not null
          Array.validateJSON(data['SupportedRealtimeInferenceInstanceTypes']);
        }
        // validate the optional field `SupportedContentTypes`
        if (data['SupportedContentTypes']) { // data not null
          Array.validateJSON(data['SupportedContentTypes']);
        }
        // validate the optional field `SupportedResponseMIMETypes`
        if (data['SupportedResponseMIMETypes']) { // data not null
          Array.validateJSON(data['SupportedResponseMIMETypes']);
        }

        return true;
    }


}

ModelPackageInferenceSpecification.RequiredProperties = ["Containers", "SupportedContentTypes", "SupportedResponseMIMETypes"];

/**
 * @member {Array} Containers
 */
ModelPackageInferenceSpecification.prototype['Containers'] = undefined;

/**
 * @member {Array} SupportedTransformInstanceTypes
 */
ModelPackageInferenceSpecification.prototype['SupportedTransformInstanceTypes'] = undefined;

/**
 * @member {Array} SupportedRealtimeInferenceInstanceTypes
 */
ModelPackageInferenceSpecification.prototype['SupportedRealtimeInferenceInstanceTypes'] = undefined;

/**
 * @member {Array} SupportedContentTypes
 */
ModelPackageInferenceSpecification.prototype['SupportedContentTypes'] = undefined;

/**
 * @member {Array} SupportedResponseMIMETypes
 */
ModelPackageInferenceSpecification.prototype['SupportedResponseMIMETypes'] = undefined;


// Implement InferenceSpecification interface:
/**
 * @member {Array} Containers
 */
InferenceSpecification.prototype['Containers'] = undefined;
/**
 * @member {Array} SupportedTransformInstanceTypes
 */
InferenceSpecification.prototype['SupportedTransformInstanceTypes'] = undefined;
/**
 * @member {Array} SupportedRealtimeInferenceInstanceTypes
 */
InferenceSpecification.prototype['SupportedRealtimeInferenceInstanceTypes'] = undefined;
/**
 * @member {Array} SupportedContentTypes
 */
InferenceSpecification.prototype['SupportedContentTypes'] = undefined;
/**
 * @member {Array} SupportedResponseMIMETypes
 */
InferenceSpecification.prototype['SupportedResponseMIMETypes'] = undefined;




export default ModelPackageInferenceSpecification;

