/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HyperParameterSpecificationRange from './HyperParameterSpecificationRange';
import ParameterType from './ParameterType';

/**
 * The HyperParameterSpecification model module.
 * @module model/HyperParameterSpecification
 * @version 2017-07-24
 */
class HyperParameterSpecification {
    /**
     * Constructs a new <code>HyperParameterSpecification</code>.
     * Defines a hyperparameter to be used by an algorithm.
     * @alias module:model/HyperParameterSpecification
     * @param name {String} 
     * @param type {module:model/ParameterType} 
     */
    constructor(name, type) { 
        
        HyperParameterSpecification.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['Name'] = name;
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>HyperParameterSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HyperParameterSpecification} obj Optional instance to populate.
     * @return {module:model/HyperParameterSpecification} The populated <code>HyperParameterSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HyperParameterSpecification();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], ParameterType);
            }
            if (data.hasOwnProperty('Range')) {
                obj['Range'] = HyperParameterSpecificationRange.constructFromObject(data['Range']);
            }
            if (data.hasOwnProperty('IsTunable')) {
                obj['IsTunable'] = ApiClient.convertToType(data['IsTunable'], 'Boolean');
            }
            if (data.hasOwnProperty('IsRequired')) {
                obj['IsRequired'] = ApiClient.convertToType(data['IsRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('DefaultValue')) {
                obj['DefaultValue'] = ApiClient.convertToType(data['DefaultValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HyperParameterSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HyperParameterSpecification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HyperParameterSpecification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          ParameterType.validateJSON(data['Type']);
        }
        // validate the optional field `Range`
        if (data['Range']) { // data not null
          HyperParameterSpecificationRange.validateJSON(data['Range']);
        }
        // validate the optional field `IsTunable`
        if (data['IsTunable']) { // data not null
          Boolean.validateJSON(data['IsTunable']);
        }
        // validate the optional field `IsRequired`
        if (data['IsRequired']) { // data not null
          Boolean.validateJSON(data['IsRequired']);
        }
        // validate the optional field `DefaultValue`
        if (data['DefaultValue']) { // data not null
          String.validateJSON(data['DefaultValue']);
        }

        return true;
    }


}

HyperParameterSpecification.RequiredProperties = ["Name", "Type"];

/**
 * @member {String} Name
 */
HyperParameterSpecification.prototype['Name'] = undefined;

/**
 * @member {String} Description
 */
HyperParameterSpecification.prototype['Description'] = undefined;

/**
 * @member {module:model/ParameterType} Type
 */
HyperParameterSpecification.prototype['Type'] = undefined;

/**
 * @member {module:model/HyperParameterSpecificationRange} Range
 */
HyperParameterSpecification.prototype['Range'] = undefined;

/**
 * @member {Boolean} IsTunable
 */
HyperParameterSpecification.prototype['IsTunable'] = undefined;

/**
 * @member {Boolean} IsRequired
 */
HyperParameterSpecification.prototype['IsRequired'] = undefined;

/**
 * @member {String} DefaultValue
 */
HyperParameterSpecification.prototype['DefaultValue'] = undefined;






export default HyperParameterSpecification;

