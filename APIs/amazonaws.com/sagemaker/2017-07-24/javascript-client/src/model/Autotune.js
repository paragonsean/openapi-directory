/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutotuneMode from './AutotuneMode';

/**
 * The Autotune model module.
 * @module model/Autotune
 * @version 2017-07-24
 */
class Autotune {
    /**
     * Constructs a new <code>Autotune</code>.
     * &lt;p&gt;A flag to indicate if you want to use Autotune to automatically find optimal values for the following fields:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-ParameterRanges\&quot;&gt;ParameterRanges&lt;/a&gt;: The names and ranges of parameters that a hyperparameter tuning job can optimize.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html\&quot;&gt;ResourceLimits&lt;/a&gt;: The maximum resources that can be used for a training job. These resources include the maximum number of training jobs, the maximum runtime of a tuning job, and the maximum number of training jobs to run at the same time.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-TrainingJobEarlyStoppingType\&quot;&gt;TrainingJobEarlyStoppingType&lt;/a&gt;: A flag that specifies whether or not to use early stopping for training jobs launched by a hyperparameter tuning job.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-RetryStrategy\&quot;&gt;RetryStrategy&lt;/a&gt;: The number of times to retry a training job.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html\&quot;&gt;Strategy&lt;/a&gt;: Specifies how hyperparameter tuning chooses the combinations of hyperparameter values to use for the training jobs that it launches.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ConvergenceDetected.html\&quot;&gt;ConvergenceDetected&lt;/a&gt;: A flag to indicate that Automatic model tuning (AMT) has detected model convergence.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @alias module:model/Autotune
     * @param mode {module:model/AutotuneMode} 
     */
    constructor(mode) { 
        
        Autotune.initialize(this, mode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mode) { 
        obj['Mode'] = mode;
    }

    /**
     * Constructs a <code>Autotune</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Autotune} obj Optional instance to populate.
     * @return {module:model/Autotune} The populated <code>Autotune</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Autotune();

            if (data.hasOwnProperty('Mode')) {
                obj['Mode'] = ApiClient.convertToType(data['Mode'], AutotuneMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Autotune</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Autotune</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Autotune.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Mode`
        if (data['Mode']) { // data not null
          AutotuneMode.validateJSON(data['Mode']);
        }

        return true;
    }


}

Autotune.RequiredProperties = ["Mode"];

/**
 * @member {module:model/AutotuneMode} Mode
 */
Autotune.prototype['Mode'] = undefined;






export default Autotune;

