/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JoinSource from './JoinSource';

/**
 * The DataProcessing model module.
 * @module model/DataProcessing
 * @version 2017-07-24
 */
class DataProcessing {
    /**
     * Constructs a new <code>DataProcessing</code>.
     * The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html\&quot;&gt;Associate Prediction Results with their Corresponding Input Records&lt;/a&gt;.
     * @alias module:model/DataProcessing
     */
    constructor() { 
        
        DataProcessing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataProcessing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataProcessing} obj Optional instance to populate.
     * @return {module:model/DataProcessing} The populated <code>DataProcessing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataProcessing();

            if (data.hasOwnProperty('InputFilter')) {
                obj['InputFilter'] = ApiClient.convertToType(data['InputFilter'], 'String');
            }
            if (data.hasOwnProperty('OutputFilter')) {
                obj['OutputFilter'] = ApiClient.convertToType(data['OutputFilter'], 'String');
            }
            if (data.hasOwnProperty('JoinSource')) {
                obj['JoinSource'] = ApiClient.convertToType(data['JoinSource'], JoinSource);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataProcessing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataProcessing</code>.
     */
    static validateJSON(data) {
        // validate the optional field `InputFilter`
        if (data['InputFilter']) { // data not null
          String.validateJSON(data['InputFilter']);
        }
        // validate the optional field `OutputFilter`
        if (data['OutputFilter']) { // data not null
          String.validateJSON(data['OutputFilter']);
        }
        // validate the optional field `JoinSource`
        if (data['JoinSource']) { // data not null
          JoinSource.validateJSON(data['JoinSource']);
        }

        return true;
    }


}



/**
 * @member {String} InputFilter
 */
DataProcessing.prototype['InputFilter'] = undefined;

/**
 * @member {String} OutputFilter
 */
DataProcessing.prototype['OutputFilter'] = undefined;

/**
 * @member {module:model/JoinSource} JoinSource
 */
DataProcessing.prototype['JoinSource'] = undefined;






export default DataProcessing;

