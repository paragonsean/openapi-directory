/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BooleanOperator from './BooleanOperator';

/**
 * The SearchExpression model module.
 * @module model/SearchExpression
 * @version 2017-07-24
 */
class SearchExpression {
    /**
     * Constructs a new <code>SearchExpression</code>.
     * &lt;p&gt;A multi-expression that searches for the specified resource or resources in a search. All resource objects that satisfy the expression&#39;s condition are included in the search results. You must specify at least one subexpression, filter, or nested filter. A &lt;code&gt;SearchExpression&lt;/code&gt; can contain up to twenty elements.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;SearchExpression&lt;/code&gt; contains the following components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A list of &lt;code&gt;Filter&lt;/code&gt; objects. Each filter defines a simple Boolean expression comprised of a resource property name, Boolean operator, and value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A list of &lt;code&gt;NestedFilter&lt;/code&gt; objects. Each nested filter defines a list of Boolean expressions using a list of resource properties. A nested filter is satisfied if a single object in the list satisfies all Boolean expressions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A list of &lt;code&gt;SearchExpression&lt;/code&gt; objects. A search expression object can be nested in a list of search expression objects.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A Boolean operator: &lt;code&gt;And&lt;/code&gt; or &lt;code&gt;Or&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @alias module:model/SearchExpression
     */
    constructor() { 
        
        SearchExpression.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchExpression} obj Optional instance to populate.
     * @return {module:model/SearchExpression} The populated <code>SearchExpression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchExpression();

            if (data.hasOwnProperty('Filters')) {
                obj['Filters'] = ApiClient.convertToType(data['Filters'], Array);
            }
            if (data.hasOwnProperty('NestedFilters')) {
                obj['NestedFilters'] = ApiClient.convertToType(data['NestedFilters'], Array);
            }
            if (data.hasOwnProperty('SubExpressions')) {
                obj['SubExpressions'] = ApiClient.convertToType(data['SubExpressions'], Array);
            }
            if (data.hasOwnProperty('Operator')) {
                obj['Operator'] = ApiClient.convertToType(data['Operator'], BooleanOperator);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchExpression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchExpression</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Filters`
        if (data['Filters']) { // data not null
          Array.validateJSON(data['Filters']);
        }
        // validate the optional field `NestedFilters`
        if (data['NestedFilters']) { // data not null
          Array.validateJSON(data['NestedFilters']);
        }
        // validate the optional field `SubExpressions`
        if (data['SubExpressions']) { // data not null
          Array.validateJSON(data['SubExpressions']);
        }
        // validate the optional field `Operator`
        if (data['Operator']) { // data not null
          BooleanOperator.validateJSON(data['Operator']);
        }

        return true;
    }


}



/**
 * @member {Array} Filters
 */
SearchExpression.prototype['Filters'] = undefined;

/**
 * @member {Array} NestedFilters
 */
SearchExpression.prototype['NestedFilters'] = undefined;

/**
 * @member {Array} SubExpressions
 */
SearchExpression.prototype['SubExpressions'] = undefined;

/**
 * @member {module:model/BooleanOperator} Operator
 */
SearchExpression.prototype['Operator'] = undefined;






export default SearchExpression;

