/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataCatalogConfig model module.
 * @module model/DataCatalogConfig
 * @version 2017-07-24
 */
class DataCatalogConfig {
    /**
     * Constructs a new <code>DataCatalogConfig</code>.
     * The meta data of the Glue table which serves as data catalog for the &lt;code&gt;OfflineStore&lt;/code&gt;. 
     * @alias module:model/DataCatalogConfig
     * @param tableName {String} 
     * @param catalog {String} 
     * @param database {String} 
     */
    constructor(tableName, catalog, database) { 
        
        DataCatalogConfig.initialize(this, tableName, catalog, database);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tableName, catalog, database) { 
        obj['TableName'] = tableName;
        obj['Catalog'] = catalog;
        obj['Database'] = database;
    }

    /**
     * Constructs a <code>DataCatalogConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataCatalogConfig} obj Optional instance to populate.
     * @return {module:model/DataCatalogConfig} The populated <code>DataCatalogConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataCatalogConfig();

            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('Catalog')) {
                obj['Catalog'] = ApiClient.convertToType(data['Catalog'], 'String');
            }
            if (data.hasOwnProperty('Database')) {
                obj['Database'] = ApiClient.convertToType(data['Database'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataCatalogConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataCatalogConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataCatalogConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `TableName`
        if (data['TableName']) { // data not null
          String.validateJSON(data['TableName']);
        }
        // validate the optional field `Catalog`
        if (data['Catalog']) { // data not null
          String.validateJSON(data['Catalog']);
        }
        // validate the optional field `Database`
        if (data['Database']) { // data not null
          String.validateJSON(data['Database']);
        }

        return true;
    }


}

DataCatalogConfig.RequiredProperties = ["TableName", "Catalog", "Database"];

/**
 * @member {String} TableName
 */
DataCatalogConfig.prototype['TableName'] = undefined;

/**
 * @member {String} Catalog
 */
DataCatalogConfig.prototype['Catalog'] = undefined;

/**
 * @member {String} Database
 */
DataCatalogConfig.prototype['Database'] = undefined;






export default DataCatalogConfig;

