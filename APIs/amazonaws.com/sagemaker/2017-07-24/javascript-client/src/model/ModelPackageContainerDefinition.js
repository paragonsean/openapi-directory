/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelPackageContainerDefinitionModelInput from './ModelPackageContainerDefinitionModelInput';

/**
 * The ModelPackageContainerDefinition model module.
 * @module model/ModelPackageContainerDefinition
 * @version 2017-07-24
 */
class ModelPackageContainerDefinition {
    /**
     * Constructs a new <code>ModelPackageContainerDefinition</code>.
     * Describes the Docker container for the model package.
     * @alias module:model/ModelPackageContainerDefinition
     * @param image {String} 
     */
    constructor(image) { 
        
        ModelPackageContainerDefinition.initialize(this, image);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, image) { 
        obj['Image'] = image;
    }

    /**
     * Constructs a <code>ModelPackageContainerDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelPackageContainerDefinition} obj Optional instance to populate.
     * @return {module:model/ModelPackageContainerDefinition} The populated <code>ModelPackageContainerDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelPackageContainerDefinition();

            if (data.hasOwnProperty('ContainerHostname')) {
                obj['ContainerHostname'] = ApiClient.convertToType(data['ContainerHostname'], 'String');
            }
            if (data.hasOwnProperty('Image')) {
                obj['Image'] = ApiClient.convertToType(data['Image'], 'String');
            }
            if (data.hasOwnProperty('ImageDigest')) {
                obj['ImageDigest'] = ApiClient.convertToType(data['ImageDigest'], 'String');
            }
            if (data.hasOwnProperty('ModelDataUrl')) {
                obj['ModelDataUrl'] = ApiClient.convertToType(data['ModelDataUrl'], 'String');
            }
            if (data.hasOwnProperty('ProductId')) {
                obj['ProductId'] = ApiClient.convertToType(data['ProductId'], 'String');
            }
            if (data.hasOwnProperty('Environment')) {
                obj['Environment'] = ApiClient.convertToType(data['Environment'], Object);
            }
            if (data.hasOwnProperty('ModelInput')) {
                obj['ModelInput'] = ModelPackageContainerDefinitionModelInput.constructFromObject(data['ModelInput']);
            }
            if (data.hasOwnProperty('Framework')) {
                obj['Framework'] = ApiClient.convertToType(data['Framework'], 'String');
            }
            if (data.hasOwnProperty('FrameworkVersion')) {
                obj['FrameworkVersion'] = ApiClient.convertToType(data['FrameworkVersion'], 'String');
            }
            if (data.hasOwnProperty('NearestModelName')) {
                obj['NearestModelName'] = ApiClient.convertToType(data['NearestModelName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelPackageContainerDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelPackageContainerDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModelPackageContainerDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ContainerHostname`
        if (data['ContainerHostname']) { // data not null
          String.validateJSON(data['ContainerHostname']);
        }
        // validate the optional field `Image`
        if (data['Image']) { // data not null
          String.validateJSON(data['Image']);
        }
        // validate the optional field `ImageDigest`
        if (data['ImageDigest']) { // data not null
          String.validateJSON(data['ImageDigest']);
        }
        // validate the optional field `ModelDataUrl`
        if (data['ModelDataUrl']) { // data not null
          String.validateJSON(data['ModelDataUrl']);
        }
        // validate the optional field `ProductId`
        if (data['ProductId']) { // data not null
          String.validateJSON(data['ProductId']);
        }
        // validate the optional field `Environment`
        if (data['Environment']) { // data not null
          Object.validateJSON(data['Environment']);
        }
        // validate the optional field `ModelInput`
        if (data['ModelInput']) { // data not null
          ModelPackageContainerDefinitionModelInput.validateJSON(data['ModelInput']);
        }
        // validate the optional field `Framework`
        if (data['Framework']) { // data not null
          String.validateJSON(data['Framework']);
        }
        // validate the optional field `FrameworkVersion`
        if (data['FrameworkVersion']) { // data not null
          String.validateJSON(data['FrameworkVersion']);
        }
        // validate the optional field `NearestModelName`
        if (data['NearestModelName']) { // data not null
          String.validateJSON(data['NearestModelName']);
        }

        return true;
    }


}

ModelPackageContainerDefinition.RequiredProperties = ["Image"];

/**
 * @member {String} ContainerHostname
 */
ModelPackageContainerDefinition.prototype['ContainerHostname'] = undefined;

/**
 * @member {String} Image
 */
ModelPackageContainerDefinition.prototype['Image'] = undefined;

/**
 * @member {String} ImageDigest
 */
ModelPackageContainerDefinition.prototype['ImageDigest'] = undefined;

/**
 * @member {String} ModelDataUrl
 */
ModelPackageContainerDefinition.prototype['ModelDataUrl'] = undefined;

/**
 * @member {String} ProductId
 */
ModelPackageContainerDefinition.prototype['ProductId'] = undefined;

/**
 * @member {Object} Environment
 */
ModelPackageContainerDefinition.prototype['Environment'] = undefined;

/**
 * @member {module:model/ModelPackageContainerDefinitionModelInput} ModelInput
 */
ModelPackageContainerDefinition.prototype['ModelInput'] = undefined;

/**
 * @member {String} Framework
 */
ModelPackageContainerDefinition.prototype['Framework'] = undefined;

/**
 * @member {String} FrameworkVersion
 */
ModelPackageContainerDefinition.prototype['FrameworkVersion'] = undefined;

/**
 * @member {String} NearestModelName
 */
ModelPackageContainerDefinition.prototype['NearestModelName'] = undefined;






export default ModelPackageContainerDefinition;

