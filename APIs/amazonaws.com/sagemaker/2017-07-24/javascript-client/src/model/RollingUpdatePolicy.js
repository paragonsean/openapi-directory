/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RollingUpdatePolicyMaximumBatchSize from './RollingUpdatePolicyMaximumBatchSize';
import RollingUpdatePolicyRollbackMaximumBatchSize from './RollingUpdatePolicyRollbackMaximumBatchSize';

/**
 * The RollingUpdatePolicy model module.
 * @module model/RollingUpdatePolicy
 * @version 2017-07-24
 */
class RollingUpdatePolicy {
    /**
     * Constructs a new <code>RollingUpdatePolicy</code>.
     * Specifies a rolling deployment strategy for updating a SageMaker endpoint.
     * @alias module:model/RollingUpdatePolicy
     * @param maximumBatchSize {module:model/RollingUpdatePolicyMaximumBatchSize} 
     * @param waitIntervalInSeconds {Number} 
     */
    constructor(maximumBatchSize, waitIntervalInSeconds) { 
        
        RollingUpdatePolicy.initialize(this, maximumBatchSize, waitIntervalInSeconds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, maximumBatchSize, waitIntervalInSeconds) { 
        obj['MaximumBatchSize'] = maximumBatchSize;
        obj['WaitIntervalInSeconds'] = waitIntervalInSeconds;
    }

    /**
     * Constructs a <code>RollingUpdatePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RollingUpdatePolicy} obj Optional instance to populate.
     * @return {module:model/RollingUpdatePolicy} The populated <code>RollingUpdatePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RollingUpdatePolicy();

            if (data.hasOwnProperty('MaximumBatchSize')) {
                obj['MaximumBatchSize'] = RollingUpdatePolicyMaximumBatchSize.constructFromObject(data['MaximumBatchSize']);
            }
            if (data.hasOwnProperty('WaitIntervalInSeconds')) {
                obj['WaitIntervalInSeconds'] = ApiClient.convertToType(data['WaitIntervalInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('MaximumExecutionTimeoutInSeconds')) {
                obj['MaximumExecutionTimeoutInSeconds'] = ApiClient.convertToType(data['MaximumExecutionTimeoutInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('RollbackMaximumBatchSize')) {
                obj['RollbackMaximumBatchSize'] = RollingUpdatePolicyRollbackMaximumBatchSize.constructFromObject(data['RollbackMaximumBatchSize']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RollingUpdatePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RollingUpdatePolicy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RollingUpdatePolicy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `MaximumBatchSize`
        if (data['MaximumBatchSize']) { // data not null
          RollingUpdatePolicyMaximumBatchSize.validateJSON(data['MaximumBatchSize']);
        }
        // validate the optional field `WaitIntervalInSeconds`
        if (data['WaitIntervalInSeconds']) { // data not null
          Number.validateJSON(data['WaitIntervalInSeconds']);
        }
        // validate the optional field `MaximumExecutionTimeoutInSeconds`
        if (data['MaximumExecutionTimeoutInSeconds']) { // data not null
          Number.validateJSON(data['MaximumExecutionTimeoutInSeconds']);
        }
        // validate the optional field `RollbackMaximumBatchSize`
        if (data['RollbackMaximumBatchSize']) { // data not null
          RollingUpdatePolicyRollbackMaximumBatchSize.validateJSON(data['RollbackMaximumBatchSize']);
        }

        return true;
    }


}

RollingUpdatePolicy.RequiredProperties = ["MaximumBatchSize", "WaitIntervalInSeconds"];

/**
 * @member {module:model/RollingUpdatePolicyMaximumBatchSize} MaximumBatchSize
 */
RollingUpdatePolicy.prototype['MaximumBatchSize'] = undefined;

/**
 * @member {Number} WaitIntervalInSeconds
 */
RollingUpdatePolicy.prototype['WaitIntervalInSeconds'] = undefined;

/**
 * @member {Number} MaximumExecutionTimeoutInSeconds
 */
RollingUpdatePolicy.prototype['MaximumExecutionTimeoutInSeconds'] = undefined;

/**
 * @member {module:model/RollingUpdatePolicyRollbackMaximumBatchSize} RollbackMaximumBatchSize
 */
RollingUpdatePolicy.prototype['RollbackMaximumBatchSize'] = undefined;






export default RollingUpdatePolicy;

