/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerDefinition from './ContainerDefinition';
import ContainerDefinitionImageConfig from './ContainerDefinitionImageConfig';
import ContainerDefinitionModelDataSource from './ContainerDefinitionModelDataSource';
import ContainerDefinitionMultiModelConfig from './ContainerDefinitionMultiModelConfig';
import ContainerMode from './ContainerMode';

/**
 * The DescribeModelOutputPrimaryContainer model module.
 * @module model/DescribeModelOutputPrimaryContainer
 * @version 2017-07-24
 */
class DescribeModelOutputPrimaryContainer {
    /**
     * Constructs a new <code>DescribeModelOutputPrimaryContainer</code>.
     * @alias module:model/DescribeModelOutputPrimaryContainer
     * @implements module:model/ContainerDefinition
     */
    constructor() { 
        ContainerDefinition.initialize(this);
        DescribeModelOutputPrimaryContainer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeModelOutputPrimaryContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeModelOutputPrimaryContainer} obj Optional instance to populate.
     * @return {module:model/DescribeModelOutputPrimaryContainer} The populated <code>DescribeModelOutputPrimaryContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeModelOutputPrimaryContainer();
            ContainerDefinition.constructFromObject(data, obj);

            if (data.hasOwnProperty('ContainerHostname')) {
                obj['ContainerHostname'] = ApiClient.convertToType(data['ContainerHostname'], 'String');
            }
            if (data.hasOwnProperty('Image')) {
                obj['Image'] = ApiClient.convertToType(data['Image'], 'String');
            }
            if (data.hasOwnProperty('ImageConfig')) {
                obj['ImageConfig'] = ContainerDefinitionImageConfig.constructFromObject(data['ImageConfig']);
            }
            if (data.hasOwnProperty('Mode')) {
                obj['Mode'] = ApiClient.convertToType(data['Mode'], ContainerMode);
            }
            if (data.hasOwnProperty('ModelDataUrl')) {
                obj['ModelDataUrl'] = ApiClient.convertToType(data['ModelDataUrl'], 'String');
            }
            if (data.hasOwnProperty('Environment')) {
                obj['Environment'] = ApiClient.convertToType(data['Environment'], Object);
            }
            if (data.hasOwnProperty('ModelPackageName')) {
                obj['ModelPackageName'] = ApiClient.convertToType(data['ModelPackageName'], 'String');
            }
            if (data.hasOwnProperty('InferenceSpecificationName')) {
                obj['InferenceSpecificationName'] = ApiClient.convertToType(data['InferenceSpecificationName'], 'String');
            }
            if (data.hasOwnProperty('MultiModelConfig')) {
                obj['MultiModelConfig'] = ContainerDefinitionMultiModelConfig.constructFromObject(data['MultiModelConfig']);
            }
            if (data.hasOwnProperty('ModelDataSource')) {
                obj['ModelDataSource'] = ContainerDefinitionModelDataSource.constructFromObject(data['ModelDataSource']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeModelOutputPrimaryContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeModelOutputPrimaryContainer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ContainerHostname`
        if (data['ContainerHostname']) { // data not null
          String.validateJSON(data['ContainerHostname']);
        }
        // validate the optional field `Image`
        if (data['Image']) { // data not null
          String.validateJSON(data['Image']);
        }
        // validate the optional field `ImageConfig`
        if (data['ImageConfig']) { // data not null
          ContainerDefinitionImageConfig.validateJSON(data['ImageConfig']);
        }
        // validate the optional field `Mode`
        if (data['Mode']) { // data not null
          ContainerMode.validateJSON(data['Mode']);
        }
        // validate the optional field `ModelDataUrl`
        if (data['ModelDataUrl']) { // data not null
          String.validateJSON(data['ModelDataUrl']);
        }
        // validate the optional field `Environment`
        if (data['Environment']) { // data not null
          Object.validateJSON(data['Environment']);
        }
        // validate the optional field `ModelPackageName`
        if (data['ModelPackageName']) { // data not null
          String.validateJSON(data['ModelPackageName']);
        }
        // validate the optional field `InferenceSpecificationName`
        if (data['InferenceSpecificationName']) { // data not null
          String.validateJSON(data['InferenceSpecificationName']);
        }
        // validate the optional field `MultiModelConfig`
        if (data['MultiModelConfig']) { // data not null
          ContainerDefinitionMultiModelConfig.validateJSON(data['MultiModelConfig']);
        }
        // validate the optional field `ModelDataSource`
        if (data['ModelDataSource']) { // data not null
          ContainerDefinitionModelDataSource.validateJSON(data['ModelDataSource']);
        }

        return true;
    }


}



/**
 * @member {String} ContainerHostname
 */
DescribeModelOutputPrimaryContainer.prototype['ContainerHostname'] = undefined;

/**
 * @member {String} Image
 */
DescribeModelOutputPrimaryContainer.prototype['Image'] = undefined;

/**
 * @member {module:model/ContainerDefinitionImageConfig} ImageConfig
 */
DescribeModelOutputPrimaryContainer.prototype['ImageConfig'] = undefined;

/**
 * @member {module:model/ContainerMode} Mode
 */
DescribeModelOutputPrimaryContainer.prototype['Mode'] = undefined;

/**
 * @member {String} ModelDataUrl
 */
DescribeModelOutputPrimaryContainer.prototype['ModelDataUrl'] = undefined;

/**
 * @member {Object} Environment
 */
DescribeModelOutputPrimaryContainer.prototype['Environment'] = undefined;

/**
 * @member {String} ModelPackageName
 */
DescribeModelOutputPrimaryContainer.prototype['ModelPackageName'] = undefined;

/**
 * @member {String} InferenceSpecificationName
 */
DescribeModelOutputPrimaryContainer.prototype['InferenceSpecificationName'] = undefined;

/**
 * @member {module:model/ContainerDefinitionMultiModelConfig} MultiModelConfig
 */
DescribeModelOutputPrimaryContainer.prototype['MultiModelConfig'] = undefined;

/**
 * @member {module:model/ContainerDefinitionModelDataSource} ModelDataSource
 */
DescribeModelOutputPrimaryContainer.prototype['ModelDataSource'] = undefined;


// Implement ContainerDefinition interface:
/**
 * @member {String} ContainerHostname
 */
ContainerDefinition.prototype['ContainerHostname'] = undefined;
/**
 * @member {String} Image
 */
ContainerDefinition.prototype['Image'] = undefined;
/**
 * @member {module:model/ContainerDefinitionImageConfig} ImageConfig
 */
ContainerDefinition.prototype['ImageConfig'] = undefined;
/**
 * @member {module:model/ContainerMode} Mode
 */
ContainerDefinition.prototype['Mode'] = undefined;
/**
 * @member {String} ModelDataUrl
 */
ContainerDefinition.prototype['ModelDataUrl'] = undefined;
/**
 * @member {Object} Environment
 */
ContainerDefinition.prototype['Environment'] = undefined;
/**
 * @member {String} ModelPackageName
 */
ContainerDefinition.prototype['ModelPackageName'] = undefined;
/**
 * @member {String} InferenceSpecificationName
 */
ContainerDefinition.prototype['InferenceSpecificationName'] = undefined;
/**
 * @member {module:model/ContainerDefinitionMultiModelConfig} MultiModelConfig
 */
ContainerDefinition.prototype['MultiModelConfig'] = undefined;
/**
 * @member {module:model/ContainerDefinitionModelDataSource} ModelDataSource
 */
ContainerDefinition.prototype['ModelDataSource'] = undefined;




export default DescribeModelOutputPrimaryContainer;

