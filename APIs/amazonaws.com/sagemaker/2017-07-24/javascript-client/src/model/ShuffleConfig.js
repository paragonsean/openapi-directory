/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShuffleConfig model module.
 * @module model/ShuffleConfig
 * @version 2017-07-24
 */
class ShuffleConfig {
    /**
     * Constructs a new <code>ShuffleConfig</code>.
     * &lt;p&gt;A configuration for a shuffle option for input data in a channel. If you use &lt;code&gt;S3Prefix&lt;/code&gt; for &lt;code&gt;S3DataType&lt;/code&gt;, the results of the S3 key prefix matches are shuffled. If you use &lt;code&gt;ManifestFile&lt;/code&gt;, the order of the S3 object references in the &lt;code&gt;ManifestFile&lt;/code&gt; is shuffled. If you use &lt;code&gt;AugmentedManifestFile&lt;/code&gt;, the order of the JSON lines in the &lt;code&gt;AugmentedManifestFile&lt;/code&gt; is shuffled. The shuffling order is determined using the &lt;code&gt;Seed&lt;/code&gt; value.&lt;/p&gt; &lt;p&gt;For Pipe input mode, when &lt;code&gt;ShuffleConfig&lt;/code&gt; is specified shuffling is done at the start of every epoch. With large datasets, this ensures that the order of the training data is different for each epoch, and it helps reduce bias and possible overfitting. In a multi-node training job when &lt;code&gt;ShuffleConfig&lt;/code&gt; is combined with &lt;code&gt;S3DataDistributionType&lt;/code&gt; of &lt;code&gt;ShardedByS3Key&lt;/code&gt;, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.&lt;/p&gt;
     * @alias module:model/ShuffleConfig
     * @param seed {Number} 
     */
    constructor(seed) { 
        
        ShuffleConfig.initialize(this, seed);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, seed) { 
        obj['Seed'] = seed;
    }

    /**
     * Constructs a <code>ShuffleConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShuffleConfig} obj Optional instance to populate.
     * @return {module:model/ShuffleConfig} The populated <code>ShuffleConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShuffleConfig();

            if (data.hasOwnProperty('Seed')) {
                obj['Seed'] = ApiClient.convertToType(data['Seed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShuffleConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShuffleConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShuffleConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Seed`
        if (data['Seed']) { // data not null
          Number.validateJSON(data['Seed']);
        }

        return true;
    }


}

ShuffleConfig.RequiredProperties = ["Seed"];

/**
 * @member {Number} Seed
 */
ShuffleConfig.prototype['Seed'] = undefined;






export default ShuffleConfig;

