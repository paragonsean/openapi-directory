/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ParameterRanges model module.
 * @module model/ParameterRanges
 * @version 2017-07-24
 */
class ParameterRanges {
    /**
     * Constructs a new <code>ParameterRanges</code>.
     * &lt;p&gt;Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The maximum number of items specified for &lt;code&gt;Array Members&lt;/code&gt; refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can&#39;t exceed the maximum number specified.&lt;/p&gt; &lt;/note&gt;
     * @alias module:model/ParameterRanges
     */
    constructor() { 
        
        ParameterRanges.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParameterRanges</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParameterRanges} obj Optional instance to populate.
     * @return {module:model/ParameterRanges} The populated <code>ParameterRanges</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParameterRanges();

            if (data.hasOwnProperty('IntegerParameterRanges')) {
                obj['IntegerParameterRanges'] = ApiClient.convertToType(data['IntegerParameterRanges'], Array);
            }
            if (data.hasOwnProperty('ContinuousParameterRanges')) {
                obj['ContinuousParameterRanges'] = ApiClient.convertToType(data['ContinuousParameterRanges'], Array);
            }
            if (data.hasOwnProperty('CategoricalParameterRanges')) {
                obj['CategoricalParameterRanges'] = ApiClient.convertToType(data['CategoricalParameterRanges'], Array);
            }
            if (data.hasOwnProperty('AutoParameters')) {
                obj['AutoParameters'] = ApiClient.convertToType(data['AutoParameters'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParameterRanges</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParameterRanges</code>.
     */
    static validateJSON(data) {
        // validate the optional field `IntegerParameterRanges`
        if (data['IntegerParameterRanges']) { // data not null
          Array.validateJSON(data['IntegerParameterRanges']);
        }
        // validate the optional field `ContinuousParameterRanges`
        if (data['ContinuousParameterRanges']) { // data not null
          Array.validateJSON(data['ContinuousParameterRanges']);
        }
        // validate the optional field `CategoricalParameterRanges`
        if (data['CategoricalParameterRanges']) { // data not null
          Array.validateJSON(data['CategoricalParameterRanges']);
        }
        // validate the optional field `AutoParameters`
        if (data['AutoParameters']) { // data not null
          Array.validateJSON(data['AutoParameters']);
        }

        return true;
    }


}



/**
 * @member {Array} IntegerParameterRanges
 */
ParameterRanges.prototype['IntegerParameterRanges'] = undefined;

/**
 * @member {Array} ContinuousParameterRanges
 */
ParameterRanges.prototype['ContinuousParameterRanges'] = undefined;

/**
 * @member {Array} CategoricalParameterRanges
 */
ParameterRanges.prototype['CategoricalParameterRanges'] = undefined;

/**
 * @member {Array} AutoParameters
 */
ParameterRanges.prototype['AutoParameters'] = undefined;






export default ParameterRanges;

