/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelDataSource from './ChannelDataSource';
import ChannelShuffleConfig from './ChannelShuffleConfig';
import CompressionType from './CompressionType';
import RecordWrapper from './RecordWrapper';
import TrainingInputMode from './TrainingInputMode';

/**
 * The Channel model module.
 * @module model/Channel
 * @version 2017-07-24
 */
class Channel {
    /**
     * Constructs a new <code>Channel</code>.
     * A channel is a named input source that training algorithms can consume. 
     * @alias module:model/Channel
     * @param channelName {String} 
     * @param dataSource {module:model/ChannelDataSource} 
     */
    constructor(channelName, dataSource) { 
        
        Channel.initialize(this, channelName, dataSource);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channelName, dataSource) { 
        obj['ChannelName'] = channelName;
        obj['DataSource'] = dataSource;
    }

    /**
     * Constructs a <code>Channel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Channel} obj Optional instance to populate.
     * @return {module:model/Channel} The populated <code>Channel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Channel();

            if (data.hasOwnProperty('ChannelName')) {
                obj['ChannelName'] = ApiClient.convertToType(data['ChannelName'], 'String');
            }
            if (data.hasOwnProperty('DataSource')) {
                obj['DataSource'] = ChannelDataSource.constructFromObject(data['DataSource']);
            }
            if (data.hasOwnProperty('ContentType')) {
                obj['ContentType'] = ApiClient.convertToType(data['ContentType'], 'String');
            }
            if (data.hasOwnProperty('CompressionType')) {
                obj['CompressionType'] = ApiClient.convertToType(data['CompressionType'], CompressionType);
            }
            if (data.hasOwnProperty('RecordWrapperType')) {
                obj['RecordWrapperType'] = ApiClient.convertToType(data['RecordWrapperType'], RecordWrapper);
            }
            if (data.hasOwnProperty('InputMode')) {
                obj['InputMode'] = ApiClient.convertToType(data['InputMode'], TrainingInputMode);
            }
            if (data.hasOwnProperty('ShuffleConfig')) {
                obj['ShuffleConfig'] = ChannelShuffleConfig.constructFromObject(data['ShuffleConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Channel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Channel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Channel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ChannelName`
        if (data['ChannelName']) { // data not null
          String.validateJSON(data['ChannelName']);
        }
        // validate the optional field `DataSource`
        if (data['DataSource']) { // data not null
          ChannelDataSource.validateJSON(data['DataSource']);
        }
        // validate the optional field `ContentType`
        if (data['ContentType']) { // data not null
          String.validateJSON(data['ContentType']);
        }
        // validate the optional field `CompressionType`
        if (data['CompressionType']) { // data not null
          CompressionType.validateJSON(data['CompressionType']);
        }
        // validate the optional field `RecordWrapperType`
        if (data['RecordWrapperType']) { // data not null
          RecordWrapper.validateJSON(data['RecordWrapperType']);
        }
        // validate the optional field `InputMode`
        if (data['InputMode']) { // data not null
          TrainingInputMode.validateJSON(data['InputMode']);
        }
        // validate the optional field `ShuffleConfig`
        if (data['ShuffleConfig']) { // data not null
          ChannelShuffleConfig.validateJSON(data['ShuffleConfig']);
        }

        return true;
    }


}

Channel.RequiredProperties = ["ChannelName", "DataSource"];

/**
 * @member {String} ChannelName
 */
Channel.prototype['ChannelName'] = undefined;

/**
 * @member {module:model/ChannelDataSource} DataSource
 */
Channel.prototype['DataSource'] = undefined;

/**
 * @member {String} ContentType
 */
Channel.prototype['ContentType'] = undefined;

/**
 * @member {module:model/CompressionType} CompressionType
 */
Channel.prototype['CompressionType'] = undefined;

/**
 * @member {module:model/RecordWrapper} RecordWrapperType
 */
Channel.prototype['RecordWrapperType'] = undefined;

/**
 * @member {module:model/TrainingInputMode} InputMode
 */
Channel.prototype['InputMode'] = undefined;

/**
 * @member {module:model/ChannelShuffleConfig} ShuffleConfig
 */
Channel.prototype['ShuffleConfig'] = undefined;






export default Channel;

