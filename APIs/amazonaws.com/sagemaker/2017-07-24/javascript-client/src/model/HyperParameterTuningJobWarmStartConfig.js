/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HyperParameterTuningJobWarmStartType from './HyperParameterTuningJobWarmStartType';

/**
 * The HyperParameterTuningJobWarmStartConfig model module.
 * @module model/HyperParameterTuningJobWarmStartConfig
 * @version 2017-07-24
 */
class HyperParameterTuningJobWarmStartConfig {
    /**
     * Constructs a new <code>HyperParameterTuningJobWarmStartConfig</code>.
     * &lt;p&gt;Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.&lt;/p&gt; &lt;p&gt;All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.&lt;/p&gt; &lt;/note&gt;
     * @alias module:model/HyperParameterTuningJobWarmStartConfig
     * @param parentHyperParameterTuningJobs {Array} 
     * @param warmStartType {module:model/HyperParameterTuningJobWarmStartType} 
     */
    constructor(parentHyperParameterTuningJobs, warmStartType) { 
        
        HyperParameterTuningJobWarmStartConfig.initialize(this, parentHyperParameterTuningJobs, warmStartType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, parentHyperParameterTuningJobs, warmStartType) { 
        obj['ParentHyperParameterTuningJobs'] = parentHyperParameterTuningJobs;
        obj['WarmStartType'] = warmStartType;
    }

    /**
     * Constructs a <code>HyperParameterTuningJobWarmStartConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HyperParameterTuningJobWarmStartConfig} obj Optional instance to populate.
     * @return {module:model/HyperParameterTuningJobWarmStartConfig} The populated <code>HyperParameterTuningJobWarmStartConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HyperParameterTuningJobWarmStartConfig();

            if (data.hasOwnProperty('ParentHyperParameterTuningJobs')) {
                obj['ParentHyperParameterTuningJobs'] = ApiClient.convertToType(data['ParentHyperParameterTuningJobs'], Array);
            }
            if (data.hasOwnProperty('WarmStartType')) {
                obj['WarmStartType'] = ApiClient.convertToType(data['WarmStartType'], HyperParameterTuningJobWarmStartType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HyperParameterTuningJobWarmStartConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HyperParameterTuningJobWarmStartConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HyperParameterTuningJobWarmStartConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ParentHyperParameterTuningJobs`
        if (data['ParentHyperParameterTuningJobs']) { // data not null
          Array.validateJSON(data['ParentHyperParameterTuningJobs']);
        }
        // validate the optional field `WarmStartType`
        if (data['WarmStartType']) { // data not null
          HyperParameterTuningJobWarmStartType.validateJSON(data['WarmStartType']);
        }

        return true;
    }


}

HyperParameterTuningJobWarmStartConfig.RequiredProperties = ["ParentHyperParameterTuningJobs", "WarmStartType"];

/**
 * @member {Array} ParentHyperParameterTuningJobs
 */
HyperParameterTuningJobWarmStartConfig.prototype['ParentHyperParameterTuningJobs'] = undefined;

/**
 * @member {module:model/HyperParameterTuningJobWarmStartType} WarmStartType
 */
HyperParameterTuningJobWarmStartConfig.prototype['WarmStartType'] = undefined;






export default HyperParameterTuningJobWarmStartConfig;

