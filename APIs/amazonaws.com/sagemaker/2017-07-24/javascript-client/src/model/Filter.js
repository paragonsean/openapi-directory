/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Operator from './Operator';

/**
 * The Filter model module.
 * @module model/Filter
 * @version 2017-07-24
 */
class Filter {
    /**
     * Constructs a new <code>Filter</code>.
     * &lt;p&gt;A conditional statement for a search expression that includes a resource property, a Boolean operator, and a value. Resources that match the statement are returned in the results from the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;Value&lt;/code&gt;, but not an &lt;code&gt;Operator&lt;/code&gt;, SageMaker uses the equals operator.&lt;/p&gt; &lt;p&gt;In search, there are several property types:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;Metrics&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;To define a metric filter, enter a value using the form &lt;code&gt;\&quot;Metrics.&amp;lt;name&amp;gt;\&quot;&lt;/code&gt;, where &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is a metric name. For example, the following filter searches for training jobs with an &lt;code&gt;\&quot;accuracy\&quot;&lt;/code&gt; metric greater than &lt;code&gt;\&quot;0.9\&quot;&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Name\&quot;: \&quot;Metrics.accuracy\&quot;,&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Operator\&quot;: \&quot;GreaterThan\&quot;,&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Value\&quot;: \&quot;0.9\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;}&lt;/code&gt; &lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;HyperParameters&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;To define a hyperparameter filter, enter a value with the form &lt;code&gt;\&quot;HyperParameters.&amp;lt;name&amp;gt;\&quot;&lt;/code&gt;. Decimal hyperparameter values are treated as a decimal in a comparison if the specified &lt;code&gt;Value&lt;/code&gt; is also a decimal value. If the specified &lt;code&gt;Value&lt;/code&gt; is an integer, the decimal hyperparameter values are treated as integers. For example, the following filter is satisfied by training jobs with a &lt;code&gt;\&quot;learning_rate\&quot;&lt;/code&gt; hyperparameter that is less than &lt;code&gt;\&quot;0.5\&quot;&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt; {&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; \&quot;Name\&quot;: \&quot;HyperParameters.learning_rate\&quot;,&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; \&quot;Operator\&quot;: \&quot;LessThan\&quot;,&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; \&quot;Value\&quot;: \&quot;0.5\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; }&lt;/code&gt; &lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Tags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;To define a tag filter, enter a value with the form &lt;code&gt;Tags.&amp;lt;key&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
     * @alias module:model/Filter
     * @param name {String} 
     */
    constructor(name) { 
        
        Filter.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>Filter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filter} obj Optional instance to populate.
     * @return {module:model/Filter} The populated <code>Filter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filter();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Operator')) {
                obj['Operator'] = ApiClient.convertToType(data['Operator'], Operator);
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Filter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Operator`
        if (data['Operator']) { // data not null
          Operator.validateJSON(data['Operator']);
        }
        // validate the optional field `Value`
        if (data['Value']) { // data not null
          String.validateJSON(data['Value']);
        }

        return true;
    }


}

Filter.RequiredProperties = ["Name"];

/**
 * @member {String} Name
 */
Filter.prototype['Name'] = undefined;

/**
 * @member {module:model/Operator} Operator
 */
Filter.prototype['Operator'] = undefined;

/**
 * @member {String} Value
 */
Filter.prototype['Value'] = undefined;






export default Filter;

