/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NestedFilters model module.
 * @module model/NestedFilters
 * @version 2017-07-24
 */
class NestedFilters {
    /**
     * Constructs a new <code>NestedFilters</code>.
     * &lt;p&gt;A list of nested &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Filter.html\&quot;&gt;Filter&lt;/a&gt; objects. A resource must satisfy the conditions of all filters to be included in the results returned from the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;For example, to filter on a training job&#39;s &lt;code&gt;InputDataConfig&lt;/code&gt; property with a specific channel name and &lt;code&gt;S3Uri&lt;/code&gt; prefix, define the following filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&#39;{Name:\&quot;InputDataConfig.ChannelName\&quot;, \&quot;Operator\&quot;:\&quot;Equals\&quot;, \&quot;Value\&quot;:\&quot;train\&quot;}&#39;,&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&#39;{Name:\&quot;InputDataConfig.DataSource.S3DataSource.S3Uri\&quot;, \&quot;Operator\&quot;:\&quot;Contains\&quot;, \&quot;Value\&quot;:\&quot;mybucket/catdata\&quot;}&#39;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @alias module:model/NestedFilters
     * @param nestedPropertyName {String} 
     * @param filters {Array} 
     */
    constructor(nestedPropertyName, filters) { 
        
        NestedFilters.initialize(this, nestedPropertyName, filters);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nestedPropertyName, filters) { 
        obj['NestedPropertyName'] = nestedPropertyName;
        obj['Filters'] = filters;
    }

    /**
     * Constructs a <code>NestedFilters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NestedFilters} obj Optional instance to populate.
     * @return {module:model/NestedFilters} The populated <code>NestedFilters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NestedFilters();

            if (data.hasOwnProperty('NestedPropertyName')) {
                obj['NestedPropertyName'] = ApiClient.convertToType(data['NestedPropertyName'], 'String');
            }
            if (data.hasOwnProperty('Filters')) {
                obj['Filters'] = ApiClient.convertToType(data['Filters'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NestedFilters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NestedFilters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NestedFilters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `NestedPropertyName`
        if (data['NestedPropertyName']) { // data not null
          String.validateJSON(data['NestedPropertyName']);
        }
        // validate the optional field `Filters`
        if (data['Filters']) { // data not null
          Array.validateJSON(data['Filters']);
        }

        return true;
    }


}

NestedFilters.RequiredProperties = ["NestedPropertyName", "Filters"];

/**
 * @member {String} NestedPropertyName
 */
NestedFilters.prototype['NestedPropertyName'] = undefined;

/**
 * @member {Array} Filters
 */
NestedFilters.prototype['Filters'] = undefined;






export default NestedFilters;

