/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoMLJobCompletionCriteria from './AutoMLJobCompletionCriteria';
import AutoMLMode from './AutoMLMode';
import ProblemType from './ProblemType';
import TabularJobConfig from './TabularJobConfig';
import TabularJobConfigCandidateGenerationConfig from './TabularJobConfigCandidateGenerationConfig';

/**
 * The AutoMLProblemTypeConfigTabularJobConfig model module.
 * @module model/AutoMLProblemTypeConfigTabularJobConfig
 * @version 2017-07-24
 */
class AutoMLProblemTypeConfigTabularJobConfig {
    /**
     * Constructs a new <code>AutoMLProblemTypeConfigTabularJobConfig</code>.
     * @alias module:model/AutoMLProblemTypeConfigTabularJobConfig
     * @implements module:model/TabularJobConfig
     * @param targetAttributeName {String} 
     */
    constructor(targetAttributeName) { 
        TabularJobConfig.initialize(this, targetAttributeName);
        AutoMLProblemTypeConfigTabularJobConfig.initialize(this, targetAttributeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, targetAttributeName) { 
        obj['TargetAttributeName'] = targetAttributeName;
    }

    /**
     * Constructs a <code>AutoMLProblemTypeConfigTabularJobConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutoMLProblemTypeConfigTabularJobConfig} obj Optional instance to populate.
     * @return {module:model/AutoMLProblemTypeConfigTabularJobConfig} The populated <code>AutoMLProblemTypeConfigTabularJobConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutoMLProblemTypeConfigTabularJobConfig();
            TabularJobConfig.constructFromObject(data, obj);

            if (data.hasOwnProperty('CandidateGenerationConfig')) {
                obj['CandidateGenerationConfig'] = TabularJobConfigCandidateGenerationConfig.constructFromObject(data['CandidateGenerationConfig']);
            }
            if (data.hasOwnProperty('CompletionCriteria')) {
                obj['CompletionCriteria'] = AutoMLJobCompletionCriteria.constructFromObject(data['CompletionCriteria']);
            }
            if (data.hasOwnProperty('FeatureSpecificationS3Uri')) {
                obj['FeatureSpecificationS3Uri'] = ApiClient.convertToType(data['FeatureSpecificationS3Uri'], 'String');
            }
            if (data.hasOwnProperty('Mode')) {
                obj['Mode'] = ApiClient.convertToType(data['Mode'], AutoMLMode);
            }
            if (data.hasOwnProperty('GenerateCandidateDefinitionsOnly')) {
                obj['GenerateCandidateDefinitionsOnly'] = ApiClient.convertToType(data['GenerateCandidateDefinitionsOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('ProblemType')) {
                obj['ProblemType'] = ApiClient.convertToType(data['ProblemType'], ProblemType);
            }
            if (data.hasOwnProperty('TargetAttributeName')) {
                obj['TargetAttributeName'] = ApiClient.convertToType(data['TargetAttributeName'], 'String');
            }
            if (data.hasOwnProperty('SampleWeightAttributeName')) {
                obj['SampleWeightAttributeName'] = ApiClient.convertToType(data['SampleWeightAttributeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutoMLProblemTypeConfigTabularJobConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutoMLProblemTypeConfigTabularJobConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AutoMLProblemTypeConfigTabularJobConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CandidateGenerationConfig`
        if (data['CandidateGenerationConfig']) { // data not null
          TabularJobConfigCandidateGenerationConfig.validateJSON(data['CandidateGenerationConfig']);
        }
        // validate the optional field `CompletionCriteria`
        if (data['CompletionCriteria']) { // data not null
          AutoMLJobCompletionCriteria.validateJSON(data['CompletionCriteria']);
        }
        // validate the optional field `FeatureSpecificationS3Uri`
        if (data['FeatureSpecificationS3Uri']) { // data not null
          String.validateJSON(data['FeatureSpecificationS3Uri']);
        }
        // validate the optional field `Mode`
        if (data['Mode']) { // data not null
          AutoMLMode.validateJSON(data['Mode']);
        }
        // validate the optional field `GenerateCandidateDefinitionsOnly`
        if (data['GenerateCandidateDefinitionsOnly']) { // data not null
          Boolean.validateJSON(data['GenerateCandidateDefinitionsOnly']);
        }
        // validate the optional field `ProblemType`
        if (data['ProblemType']) { // data not null
          ProblemType.validateJSON(data['ProblemType']);
        }
        // validate the optional field `TargetAttributeName`
        if (data['TargetAttributeName']) { // data not null
          String.validateJSON(data['TargetAttributeName']);
        }
        // validate the optional field `SampleWeightAttributeName`
        if (data['SampleWeightAttributeName']) { // data not null
          String.validateJSON(data['SampleWeightAttributeName']);
        }

        return true;
    }


}

AutoMLProblemTypeConfigTabularJobConfig.RequiredProperties = ["TargetAttributeName"];

/**
 * @member {module:model/TabularJobConfigCandidateGenerationConfig} CandidateGenerationConfig
 */
AutoMLProblemTypeConfigTabularJobConfig.prototype['CandidateGenerationConfig'] = undefined;

/**
 * @member {module:model/AutoMLJobCompletionCriteria} CompletionCriteria
 */
AutoMLProblemTypeConfigTabularJobConfig.prototype['CompletionCriteria'] = undefined;

/**
 * @member {String} FeatureSpecificationS3Uri
 */
AutoMLProblemTypeConfigTabularJobConfig.prototype['FeatureSpecificationS3Uri'] = undefined;

/**
 * @member {module:model/AutoMLMode} Mode
 */
AutoMLProblemTypeConfigTabularJobConfig.prototype['Mode'] = undefined;

/**
 * @member {Boolean} GenerateCandidateDefinitionsOnly
 */
AutoMLProblemTypeConfigTabularJobConfig.prototype['GenerateCandidateDefinitionsOnly'] = undefined;

/**
 * @member {module:model/ProblemType} ProblemType
 */
AutoMLProblemTypeConfigTabularJobConfig.prototype['ProblemType'] = undefined;

/**
 * @member {String} TargetAttributeName
 */
AutoMLProblemTypeConfigTabularJobConfig.prototype['TargetAttributeName'] = undefined;

/**
 * @member {String} SampleWeightAttributeName
 */
AutoMLProblemTypeConfigTabularJobConfig.prototype['SampleWeightAttributeName'] = undefined;


// Implement TabularJobConfig interface:
/**
 * @member {module:model/TabularJobConfigCandidateGenerationConfig} CandidateGenerationConfig
 */
TabularJobConfig.prototype['CandidateGenerationConfig'] = undefined;
/**
 * @member {module:model/AutoMLJobCompletionCriteria} CompletionCriteria
 */
TabularJobConfig.prototype['CompletionCriteria'] = undefined;
/**
 * @member {String} FeatureSpecificationS3Uri
 */
TabularJobConfig.prototype['FeatureSpecificationS3Uri'] = undefined;
/**
 * @member {module:model/AutoMLMode} Mode
 */
TabularJobConfig.prototype['Mode'] = undefined;
/**
 * @member {Boolean} GenerateCandidateDefinitionsOnly
 */
TabularJobConfig.prototype['GenerateCandidateDefinitionsOnly'] = undefined;
/**
 * @member {module:model/ProblemType} ProblemType
 */
TabularJobConfig.prototype['ProblemType'] = undefined;
/**
 * @member {String} TargetAttributeName
 */
TabularJobConfig.prototype['TargetAttributeName'] = undefined;
/**
 * @member {String} SampleWeightAttributeName
 */
TabularJobConfig.prototype['SampleWeightAttributeName'] = undefined;




export default AutoMLProblemTypeConfigTabularJobConfig;

