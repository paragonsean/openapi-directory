/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeatureType from './FeatureType';

/**
 * The FeatureMetadata model module.
 * @module model/FeatureMetadata
 * @version 2017-07-24
 */
class FeatureMetadata {
    /**
     * Constructs a new <code>FeatureMetadata</code>.
     * The metadata for a feature. It can either be metadata that you specify, or metadata that is updated automatically.
     * @alias module:model/FeatureMetadata
     */
    constructor() { 
        
        FeatureMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeatureMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureMetadata} obj Optional instance to populate.
     * @return {module:model/FeatureMetadata} The populated <code>FeatureMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureMetadata();

            if (data.hasOwnProperty('FeatureGroupArn')) {
                obj['FeatureGroupArn'] = ApiClient.convertToType(data['FeatureGroupArn'], 'String');
            }
            if (data.hasOwnProperty('FeatureGroupName')) {
                obj['FeatureGroupName'] = ApiClient.convertToType(data['FeatureGroupName'], 'String');
            }
            if (data.hasOwnProperty('FeatureName')) {
                obj['FeatureName'] = ApiClient.convertToType(data['FeatureName'], 'String');
            }
            if (data.hasOwnProperty('FeatureType')) {
                obj['FeatureType'] = ApiClient.convertToType(data['FeatureType'], FeatureType);
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('LastModifiedTime')) {
                obj['LastModifiedTime'] = ApiClient.convertToType(data['LastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Parameters')) {
                obj['Parameters'] = ApiClient.convertToType(data['Parameters'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `FeatureGroupArn`
        if (data['FeatureGroupArn']) { // data not null
          String.validateJSON(data['FeatureGroupArn']);
        }
        // validate the optional field `FeatureGroupName`
        if (data['FeatureGroupName']) { // data not null
          String.validateJSON(data['FeatureGroupName']);
        }
        // validate the optional field `FeatureName`
        if (data['FeatureName']) { // data not null
          String.validateJSON(data['FeatureName']);
        }
        // validate the optional field `FeatureType`
        if (data['FeatureType']) { // data not null
          FeatureType.validateJSON(data['FeatureType']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `LastModifiedTime`
        if (data['LastModifiedTime']) { // data not null
          Date.validateJSON(data['LastModifiedTime']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `Parameters`
        if (data['Parameters']) { // data not null
          Array.validateJSON(data['Parameters']);
        }

        return true;
    }


}



/**
 * @member {String} FeatureGroupArn
 */
FeatureMetadata.prototype['FeatureGroupArn'] = undefined;

/**
 * @member {String} FeatureGroupName
 */
FeatureMetadata.prototype['FeatureGroupName'] = undefined;

/**
 * @member {String} FeatureName
 */
FeatureMetadata.prototype['FeatureName'] = undefined;

/**
 * @member {module:model/FeatureType} FeatureType
 */
FeatureMetadata.prototype['FeatureType'] = undefined;

/**
 * @member {Date} CreationTime
 */
FeatureMetadata.prototype['CreationTime'] = undefined;

/**
 * @member {Date} LastModifiedTime
 */
FeatureMetadata.prototype['LastModifiedTime'] = undefined;

/**
 * @member {String} Description
 */
FeatureMetadata.prototype['Description'] = undefined;

/**
 * @member {Array} Parameters
 */
FeatureMetadata.prototype['Parameters'] = undefined;






export default FeatureMetadata;

