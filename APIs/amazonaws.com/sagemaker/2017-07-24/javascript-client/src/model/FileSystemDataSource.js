/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileSystemAccessMode from './FileSystemAccessMode';
import FileSystemType from './FileSystemType';

/**
 * The FileSystemDataSource model module.
 * @module model/FileSystemDataSource
 * @version 2017-07-24
 */
class FileSystemDataSource {
    /**
     * Constructs a new <code>FileSystemDataSource</code>.
     * Specifies a file system data source for a channel.
     * @alias module:model/FileSystemDataSource
     * @param fileSystemId {String} 
     * @param fileSystemAccessMode {module:model/FileSystemAccessMode} 
     * @param fileSystemType {module:model/FileSystemType} 
     * @param directoryPath {String} 
     */
    constructor(fileSystemId, fileSystemAccessMode, fileSystemType, directoryPath) { 
        
        FileSystemDataSource.initialize(this, fileSystemId, fileSystemAccessMode, fileSystemType, directoryPath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileSystemId, fileSystemAccessMode, fileSystemType, directoryPath) { 
        obj['FileSystemId'] = fileSystemId;
        obj['FileSystemAccessMode'] = fileSystemAccessMode;
        obj['FileSystemType'] = fileSystemType;
        obj['DirectoryPath'] = directoryPath;
    }

    /**
     * Constructs a <code>FileSystemDataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileSystemDataSource} obj Optional instance to populate.
     * @return {module:model/FileSystemDataSource} The populated <code>FileSystemDataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileSystemDataSource();

            if (data.hasOwnProperty('FileSystemId')) {
                obj['FileSystemId'] = ApiClient.convertToType(data['FileSystemId'], 'String');
            }
            if (data.hasOwnProperty('FileSystemAccessMode')) {
                obj['FileSystemAccessMode'] = ApiClient.convertToType(data['FileSystemAccessMode'], FileSystemAccessMode);
            }
            if (data.hasOwnProperty('FileSystemType')) {
                obj['FileSystemType'] = ApiClient.convertToType(data['FileSystemType'], FileSystemType);
            }
            if (data.hasOwnProperty('DirectoryPath')) {
                obj['DirectoryPath'] = ApiClient.convertToType(data['DirectoryPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileSystemDataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileSystemDataSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FileSystemDataSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `FileSystemId`
        if (data['FileSystemId']) { // data not null
          String.validateJSON(data['FileSystemId']);
        }
        // validate the optional field `FileSystemAccessMode`
        if (data['FileSystemAccessMode']) { // data not null
          FileSystemAccessMode.validateJSON(data['FileSystemAccessMode']);
        }
        // validate the optional field `FileSystemType`
        if (data['FileSystemType']) { // data not null
          FileSystemType.validateJSON(data['FileSystemType']);
        }
        // validate the optional field `DirectoryPath`
        if (data['DirectoryPath']) { // data not null
          String.validateJSON(data['DirectoryPath']);
        }

        return true;
    }


}

FileSystemDataSource.RequiredProperties = ["FileSystemId", "FileSystemAccessMode", "FileSystemType", "DirectoryPath"];

/**
 * @member {String} FileSystemId
 */
FileSystemDataSource.prototype['FileSystemId'] = undefined;

/**
 * @member {module:model/FileSystemAccessMode} FileSystemAccessMode
 */
FileSystemDataSource.prototype['FileSystemAccessMode'] = undefined;

/**
 * @member {module:model/FileSystemType} FileSystemType
 */
FileSystemDataSource.prototype['FileSystemType'] = undefined;

/**
 * @member {String} DirectoryPath
 */
FileSystemDataSource.prototype['DirectoryPath'] = undefined;






export default FileSystemDataSource;

