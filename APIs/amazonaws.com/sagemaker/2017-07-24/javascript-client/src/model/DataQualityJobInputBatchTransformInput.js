/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchTransformInput from './BatchTransformInput';
import BatchTransformInputDatasetFormat from './BatchTransformInputDatasetFormat';
import ProcessingS3DataDistributionType from './ProcessingS3DataDistributionType';
import ProcessingS3InputMode from './ProcessingS3InputMode';

/**
 * The DataQualityJobInputBatchTransformInput model module.
 * @module model/DataQualityJobInputBatchTransformInput
 * @version 2017-07-24
 */
class DataQualityJobInputBatchTransformInput {
    /**
     * Constructs a new <code>DataQualityJobInputBatchTransformInput</code>.
     * @alias module:model/DataQualityJobInputBatchTransformInput
     * @implements module:model/BatchTransformInput
     * @param dataCapturedDestinationS3Uri {String} 
     * @param datasetFormat {module:model/BatchTransformInputDatasetFormat} 
     * @param localPath {String} 
     */
    constructor(dataCapturedDestinationS3Uri, datasetFormat, localPath) { 
        BatchTransformInput.initialize(this, dataCapturedDestinationS3Uri, datasetFormat, localPath);
        DataQualityJobInputBatchTransformInput.initialize(this, dataCapturedDestinationS3Uri, datasetFormat, localPath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataCapturedDestinationS3Uri, datasetFormat, localPath) { 
        obj['DataCapturedDestinationS3Uri'] = dataCapturedDestinationS3Uri;
        obj['DatasetFormat'] = datasetFormat;
        obj['LocalPath'] = localPath;
    }

    /**
     * Constructs a <code>DataQualityJobInputBatchTransformInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataQualityJobInputBatchTransformInput} obj Optional instance to populate.
     * @return {module:model/DataQualityJobInputBatchTransformInput} The populated <code>DataQualityJobInputBatchTransformInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataQualityJobInputBatchTransformInput();
            BatchTransformInput.constructFromObject(data, obj);

            if (data.hasOwnProperty('DataCapturedDestinationS3Uri')) {
                obj['DataCapturedDestinationS3Uri'] = ApiClient.convertToType(data['DataCapturedDestinationS3Uri'], 'String');
            }
            if (data.hasOwnProperty('DatasetFormat')) {
                obj['DatasetFormat'] = BatchTransformInputDatasetFormat.constructFromObject(data['DatasetFormat']);
            }
            if (data.hasOwnProperty('LocalPath')) {
                obj['LocalPath'] = ApiClient.convertToType(data['LocalPath'], 'String');
            }
            if (data.hasOwnProperty('S3InputMode')) {
                obj['S3InputMode'] = ApiClient.convertToType(data['S3InputMode'], ProcessingS3InputMode);
            }
            if (data.hasOwnProperty('S3DataDistributionType')) {
                obj['S3DataDistributionType'] = ApiClient.convertToType(data['S3DataDistributionType'], ProcessingS3DataDistributionType);
            }
            if (data.hasOwnProperty('FeaturesAttribute')) {
                obj['FeaturesAttribute'] = ApiClient.convertToType(data['FeaturesAttribute'], 'String');
            }
            if (data.hasOwnProperty('InferenceAttribute')) {
                obj['InferenceAttribute'] = ApiClient.convertToType(data['InferenceAttribute'], 'String');
            }
            if (data.hasOwnProperty('ProbabilityAttribute')) {
                obj['ProbabilityAttribute'] = ApiClient.convertToType(data['ProbabilityAttribute'], 'String');
            }
            if (data.hasOwnProperty('ProbabilityThresholdAttribute')) {
                obj['ProbabilityThresholdAttribute'] = ApiClient.convertToType(data['ProbabilityThresholdAttribute'], 'Number');
            }
            if (data.hasOwnProperty('StartTimeOffset')) {
                obj['StartTimeOffset'] = ApiClient.convertToType(data['StartTimeOffset'], 'String');
            }
            if (data.hasOwnProperty('EndTimeOffset')) {
                obj['EndTimeOffset'] = ApiClient.convertToType(data['EndTimeOffset'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataQualityJobInputBatchTransformInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataQualityJobInputBatchTransformInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataQualityJobInputBatchTransformInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DataCapturedDestinationS3Uri`
        if (data['DataCapturedDestinationS3Uri']) { // data not null
          String.validateJSON(data['DataCapturedDestinationS3Uri']);
        }
        // validate the optional field `DatasetFormat`
        if (data['DatasetFormat']) { // data not null
          BatchTransformInputDatasetFormat.validateJSON(data['DatasetFormat']);
        }
        // validate the optional field `LocalPath`
        if (data['LocalPath']) { // data not null
          String.validateJSON(data['LocalPath']);
        }
        // validate the optional field `S3InputMode`
        if (data['S3InputMode']) { // data not null
          ProcessingS3InputMode.validateJSON(data['S3InputMode']);
        }
        // validate the optional field `S3DataDistributionType`
        if (data['S3DataDistributionType']) { // data not null
          ProcessingS3DataDistributionType.validateJSON(data['S3DataDistributionType']);
        }
        // validate the optional field `FeaturesAttribute`
        if (data['FeaturesAttribute']) { // data not null
          String.validateJSON(data['FeaturesAttribute']);
        }
        // validate the optional field `InferenceAttribute`
        if (data['InferenceAttribute']) { // data not null
          String.validateJSON(data['InferenceAttribute']);
        }
        // validate the optional field `ProbabilityAttribute`
        if (data['ProbabilityAttribute']) { // data not null
          String.validateJSON(data['ProbabilityAttribute']);
        }
        // validate the optional field `ProbabilityThresholdAttribute`
        if (data['ProbabilityThresholdAttribute']) { // data not null
          Number.validateJSON(data['ProbabilityThresholdAttribute']);
        }
        // validate the optional field `StartTimeOffset`
        if (data['StartTimeOffset']) { // data not null
          String.validateJSON(data['StartTimeOffset']);
        }
        // validate the optional field `EndTimeOffset`
        if (data['EndTimeOffset']) { // data not null
          String.validateJSON(data['EndTimeOffset']);
        }

        return true;
    }


}

DataQualityJobInputBatchTransformInput.RequiredProperties = ["DataCapturedDestinationS3Uri", "DatasetFormat", "LocalPath"];

/**
 * @member {String} DataCapturedDestinationS3Uri
 */
DataQualityJobInputBatchTransformInput.prototype['DataCapturedDestinationS3Uri'] = undefined;

/**
 * @member {module:model/BatchTransformInputDatasetFormat} DatasetFormat
 */
DataQualityJobInputBatchTransformInput.prototype['DatasetFormat'] = undefined;

/**
 * @member {String} LocalPath
 */
DataQualityJobInputBatchTransformInput.prototype['LocalPath'] = undefined;

/**
 * @member {module:model/ProcessingS3InputMode} S3InputMode
 */
DataQualityJobInputBatchTransformInput.prototype['S3InputMode'] = undefined;

/**
 * @member {module:model/ProcessingS3DataDistributionType} S3DataDistributionType
 */
DataQualityJobInputBatchTransformInput.prototype['S3DataDistributionType'] = undefined;

/**
 * @member {String} FeaturesAttribute
 */
DataQualityJobInputBatchTransformInput.prototype['FeaturesAttribute'] = undefined;

/**
 * @member {String} InferenceAttribute
 */
DataQualityJobInputBatchTransformInput.prototype['InferenceAttribute'] = undefined;

/**
 * @member {String} ProbabilityAttribute
 */
DataQualityJobInputBatchTransformInput.prototype['ProbabilityAttribute'] = undefined;

/**
 * @member {Number} ProbabilityThresholdAttribute
 */
DataQualityJobInputBatchTransformInput.prototype['ProbabilityThresholdAttribute'] = undefined;

/**
 * @member {String} StartTimeOffset
 */
DataQualityJobInputBatchTransformInput.prototype['StartTimeOffset'] = undefined;

/**
 * @member {String} EndTimeOffset
 */
DataQualityJobInputBatchTransformInput.prototype['EndTimeOffset'] = undefined;


// Implement BatchTransformInput interface:
/**
 * @member {String} DataCapturedDestinationS3Uri
 */
BatchTransformInput.prototype['DataCapturedDestinationS3Uri'] = undefined;
/**
 * @member {module:model/BatchTransformInputDatasetFormat} DatasetFormat
 */
BatchTransformInput.prototype['DatasetFormat'] = undefined;
/**
 * @member {String} LocalPath
 */
BatchTransformInput.prototype['LocalPath'] = undefined;
/**
 * @member {module:model/ProcessingS3InputMode} S3InputMode
 */
BatchTransformInput.prototype['S3InputMode'] = undefined;
/**
 * @member {module:model/ProcessingS3DataDistributionType} S3DataDistributionType
 */
BatchTransformInput.prototype['S3DataDistributionType'] = undefined;
/**
 * @member {String} FeaturesAttribute
 */
BatchTransformInput.prototype['FeaturesAttribute'] = undefined;
/**
 * @member {String} InferenceAttribute
 */
BatchTransformInput.prototype['InferenceAttribute'] = undefined;
/**
 * @member {String} ProbabilityAttribute
 */
BatchTransformInput.prototype['ProbabilityAttribute'] = undefined;
/**
 * @member {Number} ProbabilityThresholdAttribute
 */
BatchTransformInput.prototype['ProbabilityThresholdAttribute'] = undefined;
/**
 * @member {String} StartTimeOffset
 */
BatchTransformInput.prototype['StartTimeOffset'] = undefined;
/**
 * @member {String} EndTimeOffset
 */
BatchTransformInput.prototype['EndTimeOffset'] = undefined;




export default DataQualityJobInputBatchTransformInput;

