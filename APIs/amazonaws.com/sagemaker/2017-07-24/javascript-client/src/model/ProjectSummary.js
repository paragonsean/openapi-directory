/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectStatus from './ProjectStatus';

/**
 * The ProjectSummary model module.
 * @module model/ProjectSummary
 * @version 2017-07-24
 */
class ProjectSummary {
    /**
     * Constructs a new <code>ProjectSummary</code>.
     * Information about a project.
     * @alias module:model/ProjectSummary
     * @param projectName {String} 
     * @param projectArn {String} 
     * @param projectId {String} 
     * @param creationTime {Date} 
     * @param projectStatus {module:model/ProjectStatus} 
     */
    constructor(projectName, projectArn, projectId, creationTime, projectStatus) { 
        
        ProjectSummary.initialize(this, projectName, projectArn, projectId, creationTime, projectStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, projectName, projectArn, projectId, creationTime, projectStatus) { 
        obj['ProjectName'] = projectName;
        obj['ProjectArn'] = projectArn;
        obj['ProjectId'] = projectId;
        obj['CreationTime'] = creationTime;
        obj['ProjectStatus'] = projectStatus;
    }

    /**
     * Constructs a <code>ProjectSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectSummary} obj Optional instance to populate.
     * @return {module:model/ProjectSummary} The populated <code>ProjectSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectSummary();

            if (data.hasOwnProperty('ProjectName')) {
                obj['ProjectName'] = ApiClient.convertToType(data['ProjectName'], 'String');
            }
            if (data.hasOwnProperty('ProjectDescription')) {
                obj['ProjectDescription'] = ApiClient.convertToType(data['ProjectDescription'], 'String');
            }
            if (data.hasOwnProperty('ProjectArn')) {
                obj['ProjectArn'] = ApiClient.convertToType(data['ProjectArn'], 'String');
            }
            if (data.hasOwnProperty('ProjectId')) {
                obj['ProjectId'] = ApiClient.convertToType(data['ProjectId'], 'String');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('ProjectStatus')) {
                obj['ProjectStatus'] = ApiClient.convertToType(data['ProjectStatus'], ProjectStatus);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ProjectName`
        if (data['ProjectName']) { // data not null
          String.validateJSON(data['ProjectName']);
        }
        // validate the optional field `ProjectDescription`
        if (data['ProjectDescription']) { // data not null
          String.validateJSON(data['ProjectDescription']);
        }
        // validate the optional field `ProjectArn`
        if (data['ProjectArn']) { // data not null
          String.validateJSON(data['ProjectArn']);
        }
        // validate the optional field `ProjectId`
        if (data['ProjectId']) { // data not null
          String.validateJSON(data['ProjectId']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `ProjectStatus`
        if (data['ProjectStatus']) { // data not null
          ProjectStatus.validateJSON(data['ProjectStatus']);
        }

        return true;
    }


}

ProjectSummary.RequiredProperties = ["ProjectName", "ProjectArn", "ProjectId", "CreationTime", "ProjectStatus"];

/**
 * @member {String} ProjectName
 */
ProjectSummary.prototype['ProjectName'] = undefined;

/**
 * @member {String} ProjectDescription
 */
ProjectSummary.prototype['ProjectDescription'] = undefined;

/**
 * @member {String} ProjectArn
 */
ProjectSummary.prototype['ProjectArn'] = undefined;

/**
 * @member {String} ProjectId
 */
ProjectSummary.prototype['ProjectId'] = undefined;

/**
 * @member {Date} CreationTime
 */
ProjectSummary.prototype['CreationTime'] = undefined;

/**
 * @member {module:model/ProjectStatus} ProjectStatus
 */
ProjectSummary.prototype['ProjectStatus'] = undefined;






export default ProjectSummary;

