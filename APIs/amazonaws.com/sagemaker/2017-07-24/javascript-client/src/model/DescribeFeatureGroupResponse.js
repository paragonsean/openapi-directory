/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DescribeFeatureGroupResponseLastUpdateStatus from './DescribeFeatureGroupResponseLastUpdateStatus';
import DescribeFeatureGroupResponseOfflineStoreConfig from './DescribeFeatureGroupResponseOfflineStoreConfig';
import DescribeFeatureGroupResponseOfflineStoreStatus from './DescribeFeatureGroupResponseOfflineStoreStatus';
import DescribeFeatureGroupResponseOnlineStoreConfig from './DescribeFeatureGroupResponseOnlineStoreConfig';
import FeatureGroupStatus from './FeatureGroupStatus';

/**
 * The DescribeFeatureGroupResponse model module.
 * @module model/DescribeFeatureGroupResponse
 * @version 2017-07-24
 */
class DescribeFeatureGroupResponse {
    /**
     * Constructs a new <code>DescribeFeatureGroupResponse</code>.
     * @alias module:model/DescribeFeatureGroupResponse
     * @param featureGroupArn {String} 
     * @param featureGroupName {String} 
     * @param recordIdentifierFeatureName {String} 
     * @param eventTimeFeatureName {String} 
     * @param featureDefinitions {Array} 
     * @param creationTime {Date} 
     * @param nextToken {String} 
     */
    constructor(featureGroupArn, featureGroupName, recordIdentifierFeatureName, eventTimeFeatureName, featureDefinitions, creationTime, nextToken) { 
        
        DescribeFeatureGroupResponse.initialize(this, featureGroupArn, featureGroupName, recordIdentifierFeatureName, eventTimeFeatureName, featureDefinitions, creationTime, nextToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, featureGroupArn, featureGroupName, recordIdentifierFeatureName, eventTimeFeatureName, featureDefinitions, creationTime, nextToken) { 
        obj['FeatureGroupArn'] = featureGroupArn;
        obj['FeatureGroupName'] = featureGroupName;
        obj['RecordIdentifierFeatureName'] = recordIdentifierFeatureName;
        obj['EventTimeFeatureName'] = eventTimeFeatureName;
        obj['FeatureDefinitions'] = featureDefinitions;
        obj['CreationTime'] = creationTime;
        obj['NextToken'] = nextToken;
    }

    /**
     * Constructs a <code>DescribeFeatureGroupResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeFeatureGroupResponse} obj Optional instance to populate.
     * @return {module:model/DescribeFeatureGroupResponse} The populated <code>DescribeFeatureGroupResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeFeatureGroupResponse();

            if (data.hasOwnProperty('FeatureGroupArn')) {
                obj['FeatureGroupArn'] = ApiClient.convertToType(data['FeatureGroupArn'], 'String');
            }
            if (data.hasOwnProperty('FeatureGroupName')) {
                obj['FeatureGroupName'] = ApiClient.convertToType(data['FeatureGroupName'], 'String');
            }
            if (data.hasOwnProperty('RecordIdentifierFeatureName')) {
                obj['RecordIdentifierFeatureName'] = ApiClient.convertToType(data['RecordIdentifierFeatureName'], 'String');
            }
            if (data.hasOwnProperty('EventTimeFeatureName')) {
                obj['EventTimeFeatureName'] = ApiClient.convertToType(data['EventTimeFeatureName'], 'String');
            }
            if (data.hasOwnProperty('FeatureDefinitions')) {
                obj['FeatureDefinitions'] = ApiClient.convertToType(data['FeatureDefinitions'], Array);
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('LastModifiedTime')) {
                obj['LastModifiedTime'] = ApiClient.convertToType(data['LastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('OnlineStoreConfig')) {
                obj['OnlineStoreConfig'] = DescribeFeatureGroupResponseOnlineStoreConfig.constructFromObject(data['OnlineStoreConfig']);
            }
            if (data.hasOwnProperty('OfflineStoreConfig')) {
                obj['OfflineStoreConfig'] = DescribeFeatureGroupResponseOfflineStoreConfig.constructFromObject(data['OfflineStoreConfig']);
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('FeatureGroupStatus')) {
                obj['FeatureGroupStatus'] = ApiClient.convertToType(data['FeatureGroupStatus'], FeatureGroupStatus);
            }
            if (data.hasOwnProperty('OfflineStoreStatus')) {
                obj['OfflineStoreStatus'] = DescribeFeatureGroupResponseOfflineStoreStatus.constructFromObject(data['OfflineStoreStatus']);
            }
            if (data.hasOwnProperty('LastUpdateStatus')) {
                obj['LastUpdateStatus'] = DescribeFeatureGroupResponseLastUpdateStatus.constructFromObject(data['LastUpdateStatus']);
            }
            if (data.hasOwnProperty('FailureReason')) {
                obj['FailureReason'] = ApiClient.convertToType(data['FailureReason'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
            if (data.hasOwnProperty('OnlineStoreTotalSizeBytes')) {
                obj['OnlineStoreTotalSizeBytes'] = ApiClient.convertToType(data['OnlineStoreTotalSizeBytes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeFeatureGroupResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeFeatureGroupResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribeFeatureGroupResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `FeatureGroupArn`
        if (data['FeatureGroupArn']) { // data not null
          String.validateJSON(data['FeatureGroupArn']);
        }
        // validate the optional field `FeatureGroupName`
        if (data['FeatureGroupName']) { // data not null
          String.validateJSON(data['FeatureGroupName']);
        }
        // validate the optional field `RecordIdentifierFeatureName`
        if (data['RecordIdentifierFeatureName']) { // data not null
          String.validateJSON(data['RecordIdentifierFeatureName']);
        }
        // validate the optional field `EventTimeFeatureName`
        if (data['EventTimeFeatureName']) { // data not null
          String.validateJSON(data['EventTimeFeatureName']);
        }
        // validate the optional field `FeatureDefinitions`
        if (data['FeatureDefinitions']) { // data not null
          Array.validateJSON(data['FeatureDefinitions']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `LastModifiedTime`
        if (data['LastModifiedTime']) { // data not null
          Date.validateJSON(data['LastModifiedTime']);
        }
        // validate the optional field `OnlineStoreConfig`
        if (data['OnlineStoreConfig']) { // data not null
          DescribeFeatureGroupResponseOnlineStoreConfig.validateJSON(data['OnlineStoreConfig']);
        }
        // validate the optional field `OfflineStoreConfig`
        if (data['OfflineStoreConfig']) { // data not null
          DescribeFeatureGroupResponseOfflineStoreConfig.validateJSON(data['OfflineStoreConfig']);
        }
        // validate the optional field `RoleArn`
        if (data['RoleArn']) { // data not null
          String.validateJSON(data['RoleArn']);
        }
        // validate the optional field `FeatureGroupStatus`
        if (data['FeatureGroupStatus']) { // data not null
          FeatureGroupStatus.validateJSON(data['FeatureGroupStatus']);
        }
        // validate the optional field `OfflineStoreStatus`
        if (data['OfflineStoreStatus']) { // data not null
          DescribeFeatureGroupResponseOfflineStoreStatus.validateJSON(data['OfflineStoreStatus']);
        }
        // validate the optional field `LastUpdateStatus`
        if (data['LastUpdateStatus']) { // data not null
          DescribeFeatureGroupResponseLastUpdateStatus.validateJSON(data['LastUpdateStatus']);
        }
        // validate the optional field `FailureReason`
        if (data['FailureReason']) { // data not null
          String.validateJSON(data['FailureReason']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `NextToken`
        if (data['NextToken']) { // data not null
          String.validateJSON(data['NextToken']);
        }
        // validate the optional field `OnlineStoreTotalSizeBytes`
        if (data['OnlineStoreTotalSizeBytes']) { // data not null
          Number.validateJSON(data['OnlineStoreTotalSizeBytes']);
        }

        return true;
    }


}

DescribeFeatureGroupResponse.RequiredProperties = ["FeatureGroupArn", "FeatureGroupName", "RecordIdentifierFeatureName", "EventTimeFeatureName", "FeatureDefinitions", "CreationTime", "NextToken"];

/**
 * @member {String} FeatureGroupArn
 */
DescribeFeatureGroupResponse.prototype['FeatureGroupArn'] = undefined;

/**
 * @member {String} FeatureGroupName
 */
DescribeFeatureGroupResponse.prototype['FeatureGroupName'] = undefined;

/**
 * @member {String} RecordIdentifierFeatureName
 */
DescribeFeatureGroupResponse.prototype['RecordIdentifierFeatureName'] = undefined;

/**
 * @member {String} EventTimeFeatureName
 */
DescribeFeatureGroupResponse.prototype['EventTimeFeatureName'] = undefined;

/**
 * @member {Array} FeatureDefinitions
 */
DescribeFeatureGroupResponse.prototype['FeatureDefinitions'] = undefined;

/**
 * @member {Date} CreationTime
 */
DescribeFeatureGroupResponse.prototype['CreationTime'] = undefined;

/**
 * @member {Date} LastModifiedTime
 */
DescribeFeatureGroupResponse.prototype['LastModifiedTime'] = undefined;

/**
 * @member {module:model/DescribeFeatureGroupResponseOnlineStoreConfig} OnlineStoreConfig
 */
DescribeFeatureGroupResponse.prototype['OnlineStoreConfig'] = undefined;

/**
 * @member {module:model/DescribeFeatureGroupResponseOfflineStoreConfig} OfflineStoreConfig
 */
DescribeFeatureGroupResponse.prototype['OfflineStoreConfig'] = undefined;

/**
 * @member {String} RoleArn
 */
DescribeFeatureGroupResponse.prototype['RoleArn'] = undefined;

/**
 * @member {module:model/FeatureGroupStatus} FeatureGroupStatus
 */
DescribeFeatureGroupResponse.prototype['FeatureGroupStatus'] = undefined;

/**
 * @member {module:model/DescribeFeatureGroupResponseOfflineStoreStatus} OfflineStoreStatus
 */
DescribeFeatureGroupResponse.prototype['OfflineStoreStatus'] = undefined;

/**
 * @member {module:model/DescribeFeatureGroupResponseLastUpdateStatus} LastUpdateStatus
 */
DescribeFeatureGroupResponse.prototype['LastUpdateStatus'] = undefined;

/**
 * @member {String} FailureReason
 */
DescribeFeatureGroupResponse.prototype['FailureReason'] = undefined;

/**
 * @member {String} Description
 */
DescribeFeatureGroupResponse.prototype['Description'] = undefined;

/**
 * @member {String} NextToken
 */
DescribeFeatureGroupResponse.prototype['NextToken'] = undefined;

/**
 * @member {Number} OnlineStoreTotalSizeBytes
 */
DescribeFeatureGroupResponse.prototype['OnlineStoreTotalSizeBytes'] = undefined;






export default DescribeFeatureGroupResponse;

