/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompressionType from './CompressionType';
import SplitType from './SplitType';
import TransformInput from './TransformInput';
import TransformInputDataSource from './TransformInputDataSource';

/**
 * The DescribeTransformJobResponseTransformInput model module.
 * @module model/DescribeTransformJobResponseTransformInput
 * @version 2017-07-24
 */
class DescribeTransformJobResponseTransformInput {
    /**
     * Constructs a new <code>DescribeTransformJobResponseTransformInput</code>.
     * @alias module:model/DescribeTransformJobResponseTransformInput
     * @implements module:model/TransformInput
     * @param dataSource {module:model/TransformInputDataSource} 
     */
    constructor(dataSource) { 
        TransformInput.initialize(this, dataSource);
        DescribeTransformJobResponseTransformInput.initialize(this, dataSource);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataSource) { 
        obj['DataSource'] = dataSource;
    }

    /**
     * Constructs a <code>DescribeTransformJobResponseTransformInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeTransformJobResponseTransformInput} obj Optional instance to populate.
     * @return {module:model/DescribeTransformJobResponseTransformInput} The populated <code>DescribeTransformJobResponseTransformInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeTransformJobResponseTransformInput();
            TransformInput.constructFromObject(data, obj);

            if (data.hasOwnProperty('DataSource')) {
                obj['DataSource'] = TransformInputDataSource.constructFromObject(data['DataSource']);
            }
            if (data.hasOwnProperty('ContentType')) {
                obj['ContentType'] = ApiClient.convertToType(data['ContentType'], 'String');
            }
            if (data.hasOwnProperty('CompressionType')) {
                obj['CompressionType'] = ApiClient.convertToType(data['CompressionType'], CompressionType);
            }
            if (data.hasOwnProperty('SplitType')) {
                obj['SplitType'] = ApiClient.convertToType(data['SplitType'], SplitType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeTransformJobResponseTransformInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeTransformJobResponseTransformInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribeTransformJobResponseTransformInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DataSource`
        if (data['DataSource']) { // data not null
          TransformInputDataSource.validateJSON(data['DataSource']);
        }
        // validate the optional field `ContentType`
        if (data['ContentType']) { // data not null
          String.validateJSON(data['ContentType']);
        }
        // validate the optional field `CompressionType`
        if (data['CompressionType']) { // data not null
          CompressionType.validateJSON(data['CompressionType']);
        }
        // validate the optional field `SplitType`
        if (data['SplitType']) { // data not null
          SplitType.validateJSON(data['SplitType']);
        }

        return true;
    }


}

DescribeTransformJobResponseTransformInput.RequiredProperties = ["DataSource"];

/**
 * @member {module:model/TransformInputDataSource} DataSource
 */
DescribeTransformJobResponseTransformInput.prototype['DataSource'] = undefined;

/**
 * @member {String} ContentType
 */
DescribeTransformJobResponseTransformInput.prototype['ContentType'] = undefined;

/**
 * @member {module:model/CompressionType} CompressionType
 */
DescribeTransformJobResponseTransformInput.prototype['CompressionType'] = undefined;

/**
 * @member {module:model/SplitType} SplitType
 */
DescribeTransformJobResponseTransformInput.prototype['SplitType'] = undefined;


// Implement TransformInput interface:
/**
 * @member {module:model/TransformInputDataSource} DataSource
 */
TransformInput.prototype['DataSource'] = undefined;
/**
 * @member {String} ContentType
 */
TransformInput.prototype['ContentType'] = undefined;
/**
 * @member {module:model/CompressionType} CompressionType
 */
TransformInput.prototype['CompressionType'] = undefined;
/**
 * @member {module:model/SplitType} SplitType
 */
TransformInput.prototype['SplitType'] = undefined;




export default DescribeTransformJobResponseTransformInput;

