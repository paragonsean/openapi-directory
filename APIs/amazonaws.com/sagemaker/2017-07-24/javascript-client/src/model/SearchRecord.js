/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Endpoint from './Endpoint';
import FeatureGroup from './FeatureGroup';
import ModelDashboardModel from './ModelDashboardModel';
import ModelPackage from './ModelPackage';
import ModelPackageGroup from './ModelPackageGroup';
import Pipeline from './Pipeline';
import PipelineExecution from './PipelineExecution';
import SearchRecordExperiment from './SearchRecordExperiment';
import SearchRecordFeatureMetadata from './SearchRecordFeatureMetadata';
import SearchRecordHyperParameterTuningJob from './SearchRecordHyperParameterTuningJob';
import SearchRecordModelCard from './SearchRecordModelCard';
import SearchRecordProject from './SearchRecordProject';
import SearchRecordTrainingJob from './SearchRecordTrainingJob';
import SearchRecordTrial from './SearchRecordTrial';
import SearchRecordTrialComponent from './SearchRecordTrialComponent';

/**
 * The SearchRecord model module.
 * @module model/SearchRecord
 * @version 2017-07-24
 */
class SearchRecord {
    /**
     * Constructs a new <code>SearchRecord</code>.
     * A single resource returned as part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API response.
     * @alias module:model/SearchRecord
     */
    constructor() { 
        
        SearchRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchRecord} obj Optional instance to populate.
     * @return {module:model/SearchRecord} The populated <code>SearchRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchRecord();

            if (data.hasOwnProperty('TrainingJob')) {
                obj['TrainingJob'] = SearchRecordTrainingJob.constructFromObject(data['TrainingJob']);
            }
            if (data.hasOwnProperty('Experiment')) {
                obj['Experiment'] = SearchRecordExperiment.constructFromObject(data['Experiment']);
            }
            if (data.hasOwnProperty('Trial')) {
                obj['Trial'] = SearchRecordTrial.constructFromObject(data['Trial']);
            }
            if (data.hasOwnProperty('TrialComponent')) {
                obj['TrialComponent'] = SearchRecordTrialComponent.constructFromObject(data['TrialComponent']);
            }
            if (data.hasOwnProperty('Endpoint')) {
                obj['Endpoint'] = Endpoint.constructFromObject(data['Endpoint']);
            }
            if (data.hasOwnProperty('ModelPackage')) {
                obj['ModelPackage'] = ModelPackage.constructFromObject(data['ModelPackage']);
            }
            if (data.hasOwnProperty('ModelPackageGroup')) {
                obj['ModelPackageGroup'] = ModelPackageGroup.constructFromObject(data['ModelPackageGroup']);
            }
            if (data.hasOwnProperty('Pipeline')) {
                obj['Pipeline'] = Pipeline.constructFromObject(data['Pipeline']);
            }
            if (data.hasOwnProperty('PipelineExecution')) {
                obj['PipelineExecution'] = PipelineExecution.constructFromObject(data['PipelineExecution']);
            }
            if (data.hasOwnProperty('FeatureGroup')) {
                obj['FeatureGroup'] = FeatureGroup.constructFromObject(data['FeatureGroup']);
            }
            if (data.hasOwnProperty('Project')) {
                obj['Project'] = SearchRecordProject.constructFromObject(data['Project']);
            }
            if (data.hasOwnProperty('FeatureMetadata')) {
                obj['FeatureMetadata'] = SearchRecordFeatureMetadata.constructFromObject(data['FeatureMetadata']);
            }
            if (data.hasOwnProperty('HyperParameterTuningJob')) {
                obj['HyperParameterTuningJob'] = SearchRecordHyperParameterTuningJob.constructFromObject(data['HyperParameterTuningJob']);
            }
            if (data.hasOwnProperty('Model')) {
                obj['Model'] = ModelDashboardModel.constructFromObject(data['Model']);
            }
            if (data.hasOwnProperty('ModelCard')) {
                obj['ModelCard'] = SearchRecordModelCard.constructFromObject(data['ModelCard']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchRecord</code>.
     */
    static validateJSON(data) {
        // validate the optional field `TrainingJob`
        if (data['TrainingJob']) { // data not null
          SearchRecordTrainingJob.validateJSON(data['TrainingJob']);
        }
        // validate the optional field `Experiment`
        if (data['Experiment']) { // data not null
          SearchRecordExperiment.validateJSON(data['Experiment']);
        }
        // validate the optional field `Trial`
        if (data['Trial']) { // data not null
          SearchRecordTrial.validateJSON(data['Trial']);
        }
        // validate the optional field `TrialComponent`
        if (data['TrialComponent']) { // data not null
          SearchRecordTrialComponent.validateJSON(data['TrialComponent']);
        }
        // validate the optional field `Endpoint`
        if (data['Endpoint']) { // data not null
          Endpoint.validateJSON(data['Endpoint']);
        }
        // validate the optional field `ModelPackage`
        if (data['ModelPackage']) { // data not null
          ModelPackage.validateJSON(data['ModelPackage']);
        }
        // validate the optional field `ModelPackageGroup`
        if (data['ModelPackageGroup']) { // data not null
          ModelPackageGroup.validateJSON(data['ModelPackageGroup']);
        }
        // validate the optional field `Pipeline`
        if (data['Pipeline']) { // data not null
          Pipeline.validateJSON(data['Pipeline']);
        }
        // validate the optional field `PipelineExecution`
        if (data['PipelineExecution']) { // data not null
          PipelineExecution.validateJSON(data['PipelineExecution']);
        }
        // validate the optional field `FeatureGroup`
        if (data['FeatureGroup']) { // data not null
          FeatureGroup.validateJSON(data['FeatureGroup']);
        }
        // validate the optional field `Project`
        if (data['Project']) { // data not null
          SearchRecordProject.validateJSON(data['Project']);
        }
        // validate the optional field `FeatureMetadata`
        if (data['FeatureMetadata']) { // data not null
          SearchRecordFeatureMetadata.validateJSON(data['FeatureMetadata']);
        }
        // validate the optional field `HyperParameterTuningJob`
        if (data['HyperParameterTuningJob']) { // data not null
          SearchRecordHyperParameterTuningJob.validateJSON(data['HyperParameterTuningJob']);
        }
        // validate the optional field `Model`
        if (data['Model']) { // data not null
          ModelDashboardModel.validateJSON(data['Model']);
        }
        // validate the optional field `ModelCard`
        if (data['ModelCard']) { // data not null
          SearchRecordModelCard.validateJSON(data['ModelCard']);
        }

        return true;
    }


}



/**
 * @member {module:model/SearchRecordTrainingJob} TrainingJob
 */
SearchRecord.prototype['TrainingJob'] = undefined;

/**
 * @member {module:model/SearchRecordExperiment} Experiment
 */
SearchRecord.prototype['Experiment'] = undefined;

/**
 * @member {module:model/SearchRecordTrial} Trial
 */
SearchRecord.prototype['Trial'] = undefined;

/**
 * @member {module:model/SearchRecordTrialComponent} TrialComponent
 */
SearchRecord.prototype['TrialComponent'] = undefined;

/**
 * @member {module:model/Endpoint} Endpoint
 */
SearchRecord.prototype['Endpoint'] = undefined;

/**
 * @member {module:model/ModelPackage} ModelPackage
 */
SearchRecord.prototype['ModelPackage'] = undefined;

/**
 * @member {module:model/ModelPackageGroup} ModelPackageGroup
 */
SearchRecord.prototype['ModelPackageGroup'] = undefined;

/**
 * @member {module:model/Pipeline} Pipeline
 */
SearchRecord.prototype['Pipeline'] = undefined;

/**
 * @member {module:model/PipelineExecution} PipelineExecution
 */
SearchRecord.prototype['PipelineExecution'] = undefined;

/**
 * @member {module:model/FeatureGroup} FeatureGroup
 */
SearchRecord.prototype['FeatureGroup'] = undefined;

/**
 * @member {module:model/SearchRecordProject} Project
 */
SearchRecord.prototype['Project'] = undefined;

/**
 * @member {module:model/SearchRecordFeatureMetadata} FeatureMetadata
 */
SearchRecord.prototype['FeatureMetadata'] = undefined;

/**
 * @member {module:model/SearchRecordHyperParameterTuningJob} HyperParameterTuningJob
 */
SearchRecord.prototype['HyperParameterTuningJob'] = undefined;

/**
 * @member {module:model/ModelDashboardModel} Model
 */
SearchRecord.prototype['Model'] = undefined;

/**
 * @member {module:model/SearchRecordModelCard} ModelCard
 */
SearchRecord.prototype['ModelCard'] = undefined;






export default SearchRecord;

