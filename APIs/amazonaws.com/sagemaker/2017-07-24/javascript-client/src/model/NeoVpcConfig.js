/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NeoVpcConfig model module.
 * @module model/NeoVpcConfig
 * @version 2017-07-24
 */
class NeoVpcConfig {
    /**
     * Constructs a new <code>NeoVpcConfig</code>.
     * The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html\&quot;&gt;VpcConfig&lt;/a&gt; configuration object that specifies the VPC that you want the compilation jobs to connect to. For more information on controlling access to your Amazon S3 buckets used for compilation job, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html\&quot;&gt;Give Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon VPC&lt;/a&gt;.
     * @alias module:model/NeoVpcConfig
     * @param securityGroupIds {Array} 
     * @param subnets {Array} 
     */
    constructor(securityGroupIds, subnets) { 
        
        NeoVpcConfig.initialize(this, securityGroupIds, subnets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, securityGroupIds, subnets) { 
        obj['SecurityGroupIds'] = securityGroupIds;
        obj['Subnets'] = subnets;
    }

    /**
     * Constructs a <code>NeoVpcConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NeoVpcConfig} obj Optional instance to populate.
     * @return {module:model/NeoVpcConfig} The populated <code>NeoVpcConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NeoVpcConfig();

            if (data.hasOwnProperty('SecurityGroupIds')) {
                obj['SecurityGroupIds'] = ApiClient.convertToType(data['SecurityGroupIds'], Array);
            }
            if (data.hasOwnProperty('Subnets')) {
                obj['Subnets'] = ApiClient.convertToType(data['Subnets'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NeoVpcConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NeoVpcConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NeoVpcConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `SecurityGroupIds`
        if (data['SecurityGroupIds']) { // data not null
          Array.validateJSON(data['SecurityGroupIds']);
        }
        // validate the optional field `Subnets`
        if (data['Subnets']) { // data not null
          Array.validateJSON(data['Subnets']);
        }

        return true;
    }


}

NeoVpcConfig.RequiredProperties = ["SecurityGroupIds", "Subnets"];

/**
 * @member {Array} SecurityGroupIds
 */
NeoVpcConfig.prototype['SecurityGroupIds'] = undefined;

/**
 * @member {Array} Subnets
 */
NeoVpcConfig.prototype['Subnets'] = undefined;






export default NeoVpcConfig;

