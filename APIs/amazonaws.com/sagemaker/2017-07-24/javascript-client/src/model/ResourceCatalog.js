/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceCatalog model module.
 * @module model/ResourceCatalog
 * @version 2017-07-24
 */
class ResourceCatalog {
    /**
     * Constructs a new <code>ResourceCatalog</code>.
     *  A resource catalog containing all of the resources of a specific resource type within a resource owner account. For an example on sharing the Amazon SageMaker Feature Store &lt;code&gt;DefaultFeatureGroupCatalog&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/feature-store-cross-account-discoverability-share-sagemaker-catalog.html\&quot;&gt;Share Amazon SageMaker Catalog resource type&lt;/a&gt; in the Amazon SageMaker Developer Guide. 
     * @alias module:model/ResourceCatalog
     * @param resourceCatalogArn {String} 
     * @param resourceCatalogName {String} 
     * @param description {String} 
     * @param creationTime {Date} 
     */
    constructor(resourceCatalogArn, resourceCatalogName, description, creationTime) { 
        
        ResourceCatalog.initialize(this, resourceCatalogArn, resourceCatalogName, description, creationTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resourceCatalogArn, resourceCatalogName, description, creationTime) { 
        obj['ResourceCatalogArn'] = resourceCatalogArn;
        obj['ResourceCatalogName'] = resourceCatalogName;
        obj['Description'] = description;
        obj['CreationTime'] = creationTime;
    }

    /**
     * Constructs a <code>ResourceCatalog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceCatalog} obj Optional instance to populate.
     * @return {module:model/ResourceCatalog} The populated <code>ResourceCatalog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceCatalog();

            if (data.hasOwnProperty('ResourceCatalogArn')) {
                obj['ResourceCatalogArn'] = ApiClient.convertToType(data['ResourceCatalogArn'], 'String');
            }
            if (data.hasOwnProperty('ResourceCatalogName')) {
                obj['ResourceCatalogName'] = ApiClient.convertToType(data['ResourceCatalogName'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceCatalog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceCatalog</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceCatalog.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ResourceCatalogArn`
        if (data['ResourceCatalogArn']) { // data not null
          String.validateJSON(data['ResourceCatalogArn']);
        }
        // validate the optional field `ResourceCatalogName`
        if (data['ResourceCatalogName']) { // data not null
          String.validateJSON(data['ResourceCatalogName']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }

        return true;
    }


}

ResourceCatalog.RequiredProperties = ["ResourceCatalogArn", "ResourceCatalogName", "Description", "CreationTime"];

/**
 * @member {String} ResourceCatalogArn
 */
ResourceCatalog.prototype['ResourceCatalogArn'] = undefined;

/**
 * @member {String} ResourceCatalogName
 */
ResourceCatalog.prototype['ResourceCatalogName'] = undefined;

/**
 * @member {String} Description
 */
ResourceCatalog.prototype['Description'] = undefined;

/**
 * @member {Date} CreationTime
 */
ResourceCatalog.prototype['CreationTime'] = undefined;






export default ResourceCatalog;

