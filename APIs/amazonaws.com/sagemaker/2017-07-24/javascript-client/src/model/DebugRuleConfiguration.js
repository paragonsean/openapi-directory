/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProcessingInstanceType from './ProcessingInstanceType';

/**
 * The DebugRuleConfiguration model module.
 * @module model/DebugRuleConfiguration
 * @version 2017-07-24
 */
class DebugRuleConfiguration {
    /**
     * Constructs a new <code>DebugRuleConfiguration</code>.
     * Configuration information for SageMaker Debugger rules for debugging. To learn more about how to configure the &lt;code&gt;DebugRuleConfiguration&lt;/code&gt; parameter, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html\&quot;&gt;Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job&lt;/a&gt;.
     * @alias module:model/DebugRuleConfiguration
     * @param ruleConfigurationName {String} 
     * @param ruleEvaluatorImage {String} 
     */
    constructor(ruleConfigurationName, ruleEvaluatorImage) { 
        
        DebugRuleConfiguration.initialize(this, ruleConfigurationName, ruleEvaluatorImage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ruleConfigurationName, ruleEvaluatorImage) { 
        obj['RuleConfigurationName'] = ruleConfigurationName;
        obj['RuleEvaluatorImage'] = ruleEvaluatorImage;
    }

    /**
     * Constructs a <code>DebugRuleConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DebugRuleConfiguration} obj Optional instance to populate.
     * @return {module:model/DebugRuleConfiguration} The populated <code>DebugRuleConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DebugRuleConfiguration();

            if (data.hasOwnProperty('RuleConfigurationName')) {
                obj['RuleConfigurationName'] = ApiClient.convertToType(data['RuleConfigurationName'], 'String');
            }
            if (data.hasOwnProperty('LocalPath')) {
                obj['LocalPath'] = ApiClient.convertToType(data['LocalPath'], 'String');
            }
            if (data.hasOwnProperty('S3OutputPath')) {
                obj['S3OutputPath'] = ApiClient.convertToType(data['S3OutputPath'], 'String');
            }
            if (data.hasOwnProperty('RuleEvaluatorImage')) {
                obj['RuleEvaluatorImage'] = ApiClient.convertToType(data['RuleEvaluatorImage'], 'String');
            }
            if (data.hasOwnProperty('InstanceType')) {
                obj['InstanceType'] = ApiClient.convertToType(data['InstanceType'], ProcessingInstanceType);
            }
            if (data.hasOwnProperty('VolumeSizeInGB')) {
                obj['VolumeSizeInGB'] = ApiClient.convertToType(data['VolumeSizeInGB'], 'Number');
            }
            if (data.hasOwnProperty('RuleParameters')) {
                obj['RuleParameters'] = ApiClient.convertToType(data['RuleParameters'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DebugRuleConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DebugRuleConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DebugRuleConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `RuleConfigurationName`
        if (data['RuleConfigurationName']) { // data not null
          String.validateJSON(data['RuleConfigurationName']);
        }
        // validate the optional field `LocalPath`
        if (data['LocalPath']) { // data not null
          String.validateJSON(data['LocalPath']);
        }
        // validate the optional field `S3OutputPath`
        if (data['S3OutputPath']) { // data not null
          String.validateJSON(data['S3OutputPath']);
        }
        // validate the optional field `RuleEvaluatorImage`
        if (data['RuleEvaluatorImage']) { // data not null
          String.validateJSON(data['RuleEvaluatorImage']);
        }
        // validate the optional field `InstanceType`
        if (data['InstanceType']) { // data not null
          ProcessingInstanceType.validateJSON(data['InstanceType']);
        }
        // validate the optional field `VolumeSizeInGB`
        if (data['VolumeSizeInGB']) { // data not null
          Number.validateJSON(data['VolumeSizeInGB']);
        }
        // validate the optional field `RuleParameters`
        if (data['RuleParameters']) { // data not null
          Object.validateJSON(data['RuleParameters']);
        }

        return true;
    }


}

DebugRuleConfiguration.RequiredProperties = ["RuleConfigurationName", "RuleEvaluatorImage"];

/**
 * @member {String} RuleConfigurationName
 */
DebugRuleConfiguration.prototype['RuleConfigurationName'] = undefined;

/**
 * @member {String} LocalPath
 */
DebugRuleConfiguration.prototype['LocalPath'] = undefined;

/**
 * @member {String} S3OutputPath
 */
DebugRuleConfiguration.prototype['S3OutputPath'] = undefined;

/**
 * @member {String} RuleEvaluatorImage
 */
DebugRuleConfiguration.prototype['RuleEvaluatorImage'] = undefined;

/**
 * @member {module:model/ProcessingInstanceType} InstanceType
 */
DebugRuleConfiguration.prototype['InstanceType'] = undefined;

/**
 * @member {Number} VolumeSizeInGB
 */
DebugRuleConfiguration.prototype['VolumeSizeInGB'] = undefined;

/**
 * @member {Object} RuleParameters
 */
DebugRuleConfiguration.prototype['RuleParameters'] = undefined;






export default DebugRuleConfiguration;

