/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecommendationMetrics from './RecommendationMetrics';

/**
 * The InferenceRecommendationMetrics model module.
 * @module model/InferenceRecommendationMetrics
 * @version 2017-07-24
 */
class InferenceRecommendationMetrics {
    /**
     * Constructs a new <code>InferenceRecommendationMetrics</code>.
     * @alias module:model/InferenceRecommendationMetrics
     * @implements module:model/RecommendationMetrics
     * @param costPerHour {Number} 
     * @param costPerInference {Number} 
     * @param maxInvocations {Number} 
     * @param modelLatency {Number} 
     */
    constructor(costPerHour, costPerInference, maxInvocations, modelLatency) { 
        RecommendationMetrics.initialize(this, costPerHour, costPerInference, maxInvocations, modelLatency);
        InferenceRecommendationMetrics.initialize(this, costPerHour, costPerInference, maxInvocations, modelLatency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, costPerHour, costPerInference, maxInvocations, modelLatency) { 
        obj['CostPerHour'] = costPerHour;
        obj['CostPerInference'] = costPerInference;
        obj['MaxInvocations'] = maxInvocations;
        obj['ModelLatency'] = modelLatency;
    }

    /**
     * Constructs a <code>InferenceRecommendationMetrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InferenceRecommendationMetrics} obj Optional instance to populate.
     * @return {module:model/InferenceRecommendationMetrics} The populated <code>InferenceRecommendationMetrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InferenceRecommendationMetrics();
            RecommendationMetrics.constructFromObject(data, obj);

            if (data.hasOwnProperty('CostPerHour')) {
                obj['CostPerHour'] = ApiClient.convertToType(data['CostPerHour'], 'Number');
            }
            if (data.hasOwnProperty('CostPerInference')) {
                obj['CostPerInference'] = ApiClient.convertToType(data['CostPerInference'], 'Number');
            }
            if (data.hasOwnProperty('MaxInvocations')) {
                obj['MaxInvocations'] = ApiClient.convertToType(data['MaxInvocations'], 'Number');
            }
            if (data.hasOwnProperty('ModelLatency')) {
                obj['ModelLatency'] = ApiClient.convertToType(data['ModelLatency'], 'Number');
            }
            if (data.hasOwnProperty('CpuUtilization')) {
                obj['CpuUtilization'] = ApiClient.convertToType(data['CpuUtilization'], 'Number');
            }
            if (data.hasOwnProperty('MemoryUtilization')) {
                obj['MemoryUtilization'] = ApiClient.convertToType(data['MemoryUtilization'], 'Number');
            }
            if (data.hasOwnProperty('ModelSetupTime')) {
                obj['ModelSetupTime'] = ApiClient.convertToType(data['ModelSetupTime'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InferenceRecommendationMetrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InferenceRecommendationMetrics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InferenceRecommendationMetrics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CostPerHour`
        if (data['CostPerHour']) { // data not null
          Number.validateJSON(data['CostPerHour']);
        }
        // validate the optional field `CostPerInference`
        if (data['CostPerInference']) { // data not null
          Number.validateJSON(data['CostPerInference']);
        }
        // validate the optional field `MaxInvocations`
        if (data['MaxInvocations']) { // data not null
          Number.validateJSON(data['MaxInvocations']);
        }
        // validate the optional field `ModelLatency`
        if (data['ModelLatency']) { // data not null
          Number.validateJSON(data['ModelLatency']);
        }
        // validate the optional field `CpuUtilization`
        if (data['CpuUtilization']) { // data not null
          Number.validateJSON(data['CpuUtilization']);
        }
        // validate the optional field `MemoryUtilization`
        if (data['MemoryUtilization']) { // data not null
          Number.validateJSON(data['MemoryUtilization']);
        }
        // validate the optional field `ModelSetupTime`
        if (data['ModelSetupTime']) { // data not null
          Number.validateJSON(data['ModelSetupTime']);
        }

        return true;
    }


}

InferenceRecommendationMetrics.RequiredProperties = ["CostPerHour", "CostPerInference", "MaxInvocations", "ModelLatency"];

/**
 * @member {Number} CostPerHour
 */
InferenceRecommendationMetrics.prototype['CostPerHour'] = undefined;

/**
 * @member {Number} CostPerInference
 */
InferenceRecommendationMetrics.prototype['CostPerInference'] = undefined;

/**
 * @member {Number} MaxInvocations
 */
InferenceRecommendationMetrics.prototype['MaxInvocations'] = undefined;

/**
 * @member {Number} ModelLatency
 */
InferenceRecommendationMetrics.prototype['ModelLatency'] = undefined;

/**
 * @member {Number} CpuUtilization
 */
InferenceRecommendationMetrics.prototype['CpuUtilization'] = undefined;

/**
 * @member {Number} MemoryUtilization
 */
InferenceRecommendationMetrics.prototype['MemoryUtilization'] = undefined;

/**
 * @member {Number} ModelSetupTime
 */
InferenceRecommendationMetrics.prototype['ModelSetupTime'] = undefined;


// Implement RecommendationMetrics interface:
/**
 * @member {Number} CostPerHour
 */
RecommendationMetrics.prototype['CostPerHour'] = undefined;
/**
 * @member {Number} CostPerInference
 */
RecommendationMetrics.prototype['CostPerInference'] = undefined;
/**
 * @member {Number} MaxInvocations
 */
RecommendationMetrics.prototype['MaxInvocations'] = undefined;
/**
 * @member {Number} ModelLatency
 */
RecommendationMetrics.prototype['ModelLatency'] = undefined;
/**
 * @member {Number} CpuUtilization
 */
RecommendationMetrics.prototype['CpuUtilization'] = undefined;
/**
 * @member {Number} MemoryUtilization
 */
RecommendationMetrics.prototype['MemoryUtilization'] = undefined;
/**
 * @member {Number} ModelSetupTime
 */
RecommendationMetrics.prototype['ModelSetupTime'] = undefined;




export default InferenceRecommendationMetrics;

