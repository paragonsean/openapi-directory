/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeployedImage model module.
 * @module model/DeployedImage
 * @version 2017-07-24
 */
class DeployedImage {
    /**
     * Constructs a new <code>DeployedImage</code>.
     * &lt;p&gt;Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html\&quot;&gt;ProductionVariant&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you used the &lt;code&gt;registry/repository[:tag]&lt;/code&gt; form to specify the image path of the primary container when you created the model hosted in this &lt;code&gt;ProductionVariant&lt;/code&gt;, the path resolves to a path of the form &lt;code&gt;registry/repository[@digest]&lt;/code&gt;. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html\&quot;&gt;Pulling an Image&lt;/a&gt; in the &lt;i&gt;Amazon ECR User Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/DeployedImage
     */
    constructor() { 
        
        DeployedImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeployedImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeployedImage} obj Optional instance to populate.
     * @return {module:model/DeployedImage} The populated <code>DeployedImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeployedImage();

            if (data.hasOwnProperty('SpecifiedImage')) {
                obj['SpecifiedImage'] = ApiClient.convertToType(data['SpecifiedImage'], 'String');
            }
            if (data.hasOwnProperty('ResolvedImage')) {
                obj['ResolvedImage'] = ApiClient.convertToType(data['ResolvedImage'], 'String');
            }
            if (data.hasOwnProperty('ResolutionTime')) {
                obj['ResolutionTime'] = ApiClient.convertToType(data['ResolutionTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeployedImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeployedImage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `SpecifiedImage`
        if (data['SpecifiedImage']) { // data not null
          String.validateJSON(data['SpecifiedImage']);
        }
        // validate the optional field `ResolvedImage`
        if (data['ResolvedImage']) { // data not null
          String.validateJSON(data['ResolvedImage']);
        }
        // validate the optional field `ResolutionTime`
        if (data['ResolutionTime']) { // data not null
          Date.validateJSON(data['ResolutionTime']);
        }

        return true;
    }


}



/**
 * @member {String} SpecifiedImage
 */
DeployedImage.prototype['SpecifiedImage'] = undefined;

/**
 * @member {String} ResolvedImage
 */
DeployedImage.prototype['ResolvedImage'] = undefined;

/**
 * @member {Date} ResolutionTime
 */
DeployedImage.prototype['ResolutionTime'] = undefined;






export default DeployedImage;

