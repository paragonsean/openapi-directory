/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HyperParameterTuningJobObjectiveType from './HyperParameterTuningJobObjectiveType';

/**
 * The HyperParameterTuningJobObjective model module.
 * @module model/HyperParameterTuningJobObjective
 * @version 2017-07-24
 */
class HyperParameterTuningJobObjective {
    /**
     * Constructs a new <code>HyperParameterTuningJobObjective</code>.
     * Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the &lt;code&gt;Type&lt;/code&gt; parameter.
     * @alias module:model/HyperParameterTuningJobObjective
     * @param type {module:model/HyperParameterTuningJobObjectiveType} 
     * @param metricName {String} 
     */
    constructor(type, metricName) { 
        
        HyperParameterTuningJobObjective.initialize(this, type, metricName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, metricName) { 
        obj['Type'] = type;
        obj['MetricName'] = metricName;
    }

    /**
     * Constructs a <code>HyperParameterTuningJobObjective</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HyperParameterTuningJobObjective} obj Optional instance to populate.
     * @return {module:model/HyperParameterTuningJobObjective} The populated <code>HyperParameterTuningJobObjective</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HyperParameterTuningJobObjective();

            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], HyperParameterTuningJobObjectiveType);
            }
            if (data.hasOwnProperty('MetricName')) {
                obj['MetricName'] = ApiClient.convertToType(data['MetricName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HyperParameterTuningJobObjective</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HyperParameterTuningJobObjective</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HyperParameterTuningJobObjective.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          HyperParameterTuningJobObjectiveType.validateJSON(data['Type']);
        }
        // validate the optional field `MetricName`
        if (data['MetricName']) { // data not null
          String.validateJSON(data['MetricName']);
        }

        return true;
    }


}

HyperParameterTuningJobObjective.RequiredProperties = ["Type", "MetricName"];

/**
 * @member {module:model/HyperParameterTuningJobObjectiveType} Type
 */
HyperParameterTuningJobObjective.prototype['Type'] = undefined;

/**
 * @member {String} MetricName
 */
HyperParameterTuningJobObjective.prototype['MetricName'] = undefined;






export default HyperParameterTuningJobObjective;

