/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddAssociationRequest from '../model/AddAssociationRequest';
import AddAssociationResponse from '../model/AddAssociationResponse';
import AddTagsInput from '../model/AddTagsInput';
import AddTagsOutput from '../model/AddTagsOutput';
import AssociateTrialComponentRequest from '../model/AssociateTrialComponentRequest';
import AssociateTrialComponentResponse from '../model/AssociateTrialComponentResponse';
import BatchDescribeModelPackageInput from '../model/BatchDescribeModelPackageInput';
import BatchDescribeModelPackageOutput from '../model/BatchDescribeModelPackageOutput';
import CreateActionRequest from '../model/CreateActionRequest';
import CreateActionResponse from '../model/CreateActionResponse';
import CreateAlgorithmInput from '../model/CreateAlgorithmInput';
import CreateAlgorithmOutput from '../model/CreateAlgorithmOutput';
import CreateAppImageConfigRequest from '../model/CreateAppImageConfigRequest';
import CreateAppImageConfigResponse from '../model/CreateAppImageConfigResponse';
import CreateAppRequest from '../model/CreateAppRequest';
import CreateAppResponse from '../model/CreateAppResponse';
import CreateArtifactRequest from '../model/CreateArtifactRequest';
import CreateArtifactResponse from '../model/CreateArtifactResponse';
import CreateAutoMLJobRequest from '../model/CreateAutoMLJobRequest';
import CreateAutoMLJobResponse from '../model/CreateAutoMLJobResponse';
import CreateAutoMLJobV2Request from '../model/CreateAutoMLJobV2Request';
import CreateAutoMLJobV2Response from '../model/CreateAutoMLJobV2Response';
import CreateCodeRepositoryInput from '../model/CreateCodeRepositoryInput';
import CreateCodeRepositoryOutput from '../model/CreateCodeRepositoryOutput';
import CreateCompilationJobRequest from '../model/CreateCompilationJobRequest';
import CreateCompilationJobResponse from '../model/CreateCompilationJobResponse';
import CreateContextRequest from '../model/CreateContextRequest';
import CreateContextResponse from '../model/CreateContextResponse';
import CreateDataQualityJobDefinitionRequest from '../model/CreateDataQualityJobDefinitionRequest';
import CreateDataQualityJobDefinitionResponse from '../model/CreateDataQualityJobDefinitionResponse';
import CreateDeviceFleetRequest from '../model/CreateDeviceFleetRequest';
import CreateDomainRequest from '../model/CreateDomainRequest';
import CreateDomainResponse from '../model/CreateDomainResponse';
import CreateEdgeDeploymentPlanRequest from '../model/CreateEdgeDeploymentPlanRequest';
import CreateEdgeDeploymentPlanResponse from '../model/CreateEdgeDeploymentPlanResponse';
import CreateEdgeDeploymentStageRequest from '../model/CreateEdgeDeploymentStageRequest';
import CreateEdgePackagingJobRequest from '../model/CreateEdgePackagingJobRequest';
import CreateEndpointConfigInput from '../model/CreateEndpointConfigInput';
import CreateEndpointConfigOutput from '../model/CreateEndpointConfigOutput';
import CreateEndpointInput from '../model/CreateEndpointInput';
import CreateEndpointOutput from '../model/CreateEndpointOutput';
import CreateExperimentRequest from '../model/CreateExperimentRequest';
import CreateExperimentResponse from '../model/CreateExperimentResponse';
import CreateFeatureGroupRequest from '../model/CreateFeatureGroupRequest';
import CreateFeatureGroupResponse from '../model/CreateFeatureGroupResponse';
import CreateFlowDefinitionRequest from '../model/CreateFlowDefinitionRequest';
import CreateFlowDefinitionResponse from '../model/CreateFlowDefinitionResponse';
import CreateHubRequest from '../model/CreateHubRequest';
import CreateHubResponse from '../model/CreateHubResponse';
import CreateHumanTaskUiRequest from '../model/CreateHumanTaskUiRequest';
import CreateHumanTaskUiResponse from '../model/CreateHumanTaskUiResponse';
import CreateHyperParameterTuningJobRequest from '../model/CreateHyperParameterTuningJobRequest';
import CreateHyperParameterTuningJobResponse from '../model/CreateHyperParameterTuningJobResponse';
import CreateImageRequest from '../model/CreateImageRequest';
import CreateImageResponse from '../model/CreateImageResponse';
import CreateImageVersionRequest from '../model/CreateImageVersionRequest';
import CreateImageVersionResponse from '../model/CreateImageVersionResponse';
import CreateInferenceExperimentRequest from '../model/CreateInferenceExperimentRequest';
import CreateInferenceExperimentResponse from '../model/CreateInferenceExperimentResponse';
import CreateInferenceRecommendationsJobRequest from '../model/CreateInferenceRecommendationsJobRequest';
import CreateInferenceRecommendationsJobResponse from '../model/CreateInferenceRecommendationsJobResponse';
import CreateLabelingJobRequest from '../model/CreateLabelingJobRequest';
import CreateLabelingJobResponse from '../model/CreateLabelingJobResponse';
import CreateModelBiasJobDefinitionRequest from '../model/CreateModelBiasJobDefinitionRequest';
import CreateModelBiasJobDefinitionResponse from '../model/CreateModelBiasJobDefinitionResponse';
import CreateModelCardExportJobRequest from '../model/CreateModelCardExportJobRequest';
import CreateModelCardExportJobResponse from '../model/CreateModelCardExportJobResponse';
import CreateModelCardRequest from '../model/CreateModelCardRequest';
import CreateModelCardResponse from '../model/CreateModelCardResponse';
import CreateModelExplainabilityJobDefinitionRequest from '../model/CreateModelExplainabilityJobDefinitionRequest';
import CreateModelExplainabilityJobDefinitionResponse from '../model/CreateModelExplainabilityJobDefinitionResponse';
import CreateModelInput from '../model/CreateModelInput';
import CreateModelOutput from '../model/CreateModelOutput';
import CreateModelPackageGroupInput from '../model/CreateModelPackageGroupInput';
import CreateModelPackageGroupOutput from '../model/CreateModelPackageGroupOutput';
import CreateModelPackageInput from '../model/CreateModelPackageInput';
import CreateModelPackageOutput from '../model/CreateModelPackageOutput';
import CreateModelQualityJobDefinitionRequest from '../model/CreateModelQualityJobDefinitionRequest';
import CreateModelQualityJobDefinitionResponse from '../model/CreateModelQualityJobDefinitionResponse';
import CreateMonitoringScheduleRequest from '../model/CreateMonitoringScheduleRequest';
import CreateMonitoringScheduleResponse from '../model/CreateMonitoringScheduleResponse';
import CreateNotebookInstanceInput from '../model/CreateNotebookInstanceInput';
import CreateNotebookInstanceLifecycleConfigInput from '../model/CreateNotebookInstanceLifecycleConfigInput';
import CreateNotebookInstanceLifecycleConfigOutput from '../model/CreateNotebookInstanceLifecycleConfigOutput';
import CreateNotebookInstanceOutput from '../model/CreateNotebookInstanceOutput';
import CreatePipelineRequest from '../model/CreatePipelineRequest';
import CreatePipelineResponse from '../model/CreatePipelineResponse';
import CreatePresignedDomainUrlRequest from '../model/CreatePresignedDomainUrlRequest';
import CreatePresignedDomainUrlResponse from '../model/CreatePresignedDomainUrlResponse';
import CreatePresignedNotebookInstanceUrlInput from '../model/CreatePresignedNotebookInstanceUrlInput';
import CreatePresignedNotebookInstanceUrlOutput from '../model/CreatePresignedNotebookInstanceUrlOutput';
import CreateProcessingJobRequest from '../model/CreateProcessingJobRequest';
import CreateProcessingJobResponse from '../model/CreateProcessingJobResponse';
import CreateProjectInput from '../model/CreateProjectInput';
import CreateProjectOutput from '../model/CreateProjectOutput';
import CreateSpaceRequest from '../model/CreateSpaceRequest';
import CreateSpaceResponse from '../model/CreateSpaceResponse';
import CreateStudioLifecycleConfigRequest from '../model/CreateStudioLifecycleConfigRequest';
import CreateStudioLifecycleConfigResponse from '../model/CreateStudioLifecycleConfigResponse';
import CreateTrainingJobRequest from '../model/CreateTrainingJobRequest';
import CreateTrainingJobResponse from '../model/CreateTrainingJobResponse';
import CreateTransformJobRequest from '../model/CreateTransformJobRequest';
import CreateTransformJobResponse from '../model/CreateTransformJobResponse';
import CreateTrialComponentRequest from '../model/CreateTrialComponentRequest';
import CreateTrialComponentResponse from '../model/CreateTrialComponentResponse';
import CreateTrialRequest from '../model/CreateTrialRequest';
import CreateTrialResponse from '../model/CreateTrialResponse';
import CreateUserProfileRequest from '../model/CreateUserProfileRequest';
import CreateUserProfileResponse from '../model/CreateUserProfileResponse';
import CreateWorkforceRequest from '../model/CreateWorkforceRequest';
import CreateWorkforceResponse from '../model/CreateWorkforceResponse';
import CreateWorkteamRequest from '../model/CreateWorkteamRequest';
import CreateWorkteamResponse from '../model/CreateWorkteamResponse';
import DeleteActionRequest from '../model/DeleteActionRequest';
import DeleteActionResponse from '../model/DeleteActionResponse';
import DeleteAlgorithmInput from '../model/DeleteAlgorithmInput';
import DeleteAppImageConfigRequest from '../model/DeleteAppImageConfigRequest';
import DeleteAppRequest from '../model/DeleteAppRequest';
import DeleteArtifactRequest from '../model/DeleteArtifactRequest';
import DeleteArtifactResponse from '../model/DeleteArtifactResponse';
import DeleteAssociationRequest from '../model/DeleteAssociationRequest';
import DeleteAssociationResponse from '../model/DeleteAssociationResponse';
import DeleteCodeRepositoryInput from '../model/DeleteCodeRepositoryInput';
import DeleteContextRequest from '../model/DeleteContextRequest';
import DeleteContextResponse from '../model/DeleteContextResponse';
import DeleteDataQualityJobDefinitionRequest from '../model/DeleteDataQualityJobDefinitionRequest';
import DeleteDeviceFleetRequest from '../model/DeleteDeviceFleetRequest';
import DeleteDomainRequest from '../model/DeleteDomainRequest';
import DeleteEdgeDeploymentPlanRequest from '../model/DeleteEdgeDeploymentPlanRequest';
import DeleteEdgeDeploymentStageRequest from '../model/DeleteEdgeDeploymentStageRequest';
import DeleteEndpointConfigInput from '../model/DeleteEndpointConfigInput';
import DeleteEndpointInput from '../model/DeleteEndpointInput';
import DeleteExperimentRequest from '../model/DeleteExperimentRequest';
import DeleteExperimentResponse from '../model/DeleteExperimentResponse';
import DeleteFeatureGroupRequest from '../model/DeleteFeatureGroupRequest';
import DeleteFlowDefinitionRequest from '../model/DeleteFlowDefinitionRequest';
import DeleteHubContentRequest from '../model/DeleteHubContentRequest';
import DeleteHubRequest from '../model/DeleteHubRequest';
import DeleteHumanTaskUiRequest from '../model/DeleteHumanTaskUiRequest';
import DeleteImageRequest from '../model/DeleteImageRequest';
import DeleteImageVersionRequest from '../model/DeleteImageVersionRequest';
import DeleteInferenceExperimentRequest from '../model/DeleteInferenceExperimentRequest';
import DeleteInferenceExperimentResponse from '../model/DeleteInferenceExperimentResponse';
import DeleteModelBiasJobDefinitionRequest from '../model/DeleteModelBiasJobDefinitionRequest';
import DeleteModelCardRequest from '../model/DeleteModelCardRequest';
import DeleteModelExplainabilityJobDefinitionRequest from '../model/DeleteModelExplainabilityJobDefinitionRequest';
import DeleteModelInput from '../model/DeleteModelInput';
import DeleteModelPackageGroupInput from '../model/DeleteModelPackageGroupInput';
import DeleteModelPackageGroupPolicyInput from '../model/DeleteModelPackageGroupPolicyInput';
import DeleteModelPackageInput from '../model/DeleteModelPackageInput';
import DeleteModelQualityJobDefinitionRequest from '../model/DeleteModelQualityJobDefinitionRequest';
import DeleteMonitoringScheduleRequest from '../model/DeleteMonitoringScheduleRequest';
import DeleteNotebookInstanceInput from '../model/DeleteNotebookInstanceInput';
import DeleteNotebookInstanceLifecycleConfigInput from '../model/DeleteNotebookInstanceLifecycleConfigInput';
import DeletePipelineRequest from '../model/DeletePipelineRequest';
import DeletePipelineResponse from '../model/DeletePipelineResponse';
import DeleteProjectInput from '../model/DeleteProjectInput';
import DeleteSpaceRequest from '../model/DeleteSpaceRequest';
import DeleteStudioLifecycleConfigRequest from '../model/DeleteStudioLifecycleConfigRequest';
import DeleteTagsInput from '../model/DeleteTagsInput';
import DeleteTrialComponentRequest from '../model/DeleteTrialComponentRequest';
import DeleteTrialComponentResponse from '../model/DeleteTrialComponentResponse';
import DeleteTrialRequest from '../model/DeleteTrialRequest';
import DeleteTrialResponse from '../model/DeleteTrialResponse';
import DeleteUserProfileRequest from '../model/DeleteUserProfileRequest';
import DeleteWorkforceRequest from '../model/DeleteWorkforceRequest';
import DeleteWorkteamRequest from '../model/DeleteWorkteamRequest';
import DeleteWorkteamResponse from '../model/DeleteWorkteamResponse';
import DeregisterDevicesRequest from '../model/DeregisterDevicesRequest';
import DescribeActionRequest from '../model/DescribeActionRequest';
import DescribeActionResponse from '../model/DescribeActionResponse';
import DescribeAlgorithmInput from '../model/DescribeAlgorithmInput';
import DescribeAlgorithmOutput from '../model/DescribeAlgorithmOutput';
import DescribeAppImageConfigRequest from '../model/DescribeAppImageConfigRequest';
import DescribeAppImageConfigResponse from '../model/DescribeAppImageConfigResponse';
import DescribeAppRequest from '../model/DescribeAppRequest';
import DescribeAppResponse from '../model/DescribeAppResponse';
import DescribeArtifactRequest from '../model/DescribeArtifactRequest';
import DescribeArtifactResponse from '../model/DescribeArtifactResponse';
import DescribeAutoMLJobRequest from '../model/DescribeAutoMLJobRequest';
import DescribeAutoMLJobResponse from '../model/DescribeAutoMLJobResponse';
import DescribeAutoMLJobV2Request from '../model/DescribeAutoMLJobV2Request';
import DescribeAutoMLJobV2Response from '../model/DescribeAutoMLJobV2Response';
import DescribeCodeRepositoryInput from '../model/DescribeCodeRepositoryInput';
import DescribeCodeRepositoryOutput from '../model/DescribeCodeRepositoryOutput';
import DescribeCompilationJobRequest from '../model/DescribeCompilationJobRequest';
import DescribeCompilationJobResponse from '../model/DescribeCompilationJobResponse';
import DescribeContextRequest from '../model/DescribeContextRequest';
import DescribeContextResponse from '../model/DescribeContextResponse';
import DescribeDataQualityJobDefinitionRequest from '../model/DescribeDataQualityJobDefinitionRequest';
import DescribeDataQualityJobDefinitionResponse from '../model/DescribeDataQualityJobDefinitionResponse';
import DescribeDeviceFleetRequest from '../model/DescribeDeviceFleetRequest';
import DescribeDeviceFleetResponse from '../model/DescribeDeviceFleetResponse';
import DescribeDeviceRequest from '../model/DescribeDeviceRequest';
import DescribeDeviceResponse from '../model/DescribeDeviceResponse';
import DescribeDomainRequest from '../model/DescribeDomainRequest';
import DescribeDomainResponse from '../model/DescribeDomainResponse';
import DescribeEdgeDeploymentPlanRequest from '../model/DescribeEdgeDeploymentPlanRequest';
import DescribeEdgeDeploymentPlanResponse from '../model/DescribeEdgeDeploymentPlanResponse';
import DescribeEdgePackagingJobRequest from '../model/DescribeEdgePackagingJobRequest';
import DescribeEdgePackagingJobResponse from '../model/DescribeEdgePackagingJobResponse';
import DescribeEndpointConfigInput from '../model/DescribeEndpointConfigInput';
import DescribeEndpointConfigOutput from '../model/DescribeEndpointConfigOutput';
import DescribeEndpointInput from '../model/DescribeEndpointInput';
import DescribeEndpointOutput from '../model/DescribeEndpointOutput';
import DescribeExperimentRequest from '../model/DescribeExperimentRequest';
import DescribeExperimentResponse from '../model/DescribeExperimentResponse';
import DescribeFeatureGroupRequest from '../model/DescribeFeatureGroupRequest';
import DescribeFeatureGroupResponse from '../model/DescribeFeatureGroupResponse';
import DescribeFeatureMetadataRequest from '../model/DescribeFeatureMetadataRequest';
import DescribeFeatureMetadataResponse from '../model/DescribeFeatureMetadataResponse';
import DescribeFlowDefinitionRequest from '../model/DescribeFlowDefinitionRequest';
import DescribeFlowDefinitionResponse from '../model/DescribeFlowDefinitionResponse';
import DescribeHubContentRequest from '../model/DescribeHubContentRequest';
import DescribeHubContentResponse from '../model/DescribeHubContentResponse';
import DescribeHubRequest from '../model/DescribeHubRequest';
import DescribeHubResponse from '../model/DescribeHubResponse';
import DescribeHumanTaskUiRequest from '../model/DescribeHumanTaskUiRequest';
import DescribeHumanTaskUiResponse from '../model/DescribeHumanTaskUiResponse';
import DescribeHyperParameterTuningJobRequest from '../model/DescribeHyperParameterTuningJobRequest';
import DescribeHyperParameterTuningJobResponse from '../model/DescribeHyperParameterTuningJobResponse';
import DescribeImageRequest from '../model/DescribeImageRequest';
import DescribeImageResponse from '../model/DescribeImageResponse';
import DescribeImageVersionRequest from '../model/DescribeImageVersionRequest';
import DescribeImageVersionResponse from '../model/DescribeImageVersionResponse';
import DescribeInferenceExperimentRequest from '../model/DescribeInferenceExperimentRequest';
import DescribeInferenceExperimentResponse from '../model/DescribeInferenceExperimentResponse';
import DescribeInferenceRecommendationsJobRequest from '../model/DescribeInferenceRecommendationsJobRequest';
import DescribeInferenceRecommendationsJobResponse from '../model/DescribeInferenceRecommendationsJobResponse';
import DescribeLabelingJobRequest from '../model/DescribeLabelingJobRequest';
import DescribeLabelingJobResponse from '../model/DescribeLabelingJobResponse';
import DescribeLineageGroupRequest from '../model/DescribeLineageGroupRequest';
import DescribeLineageGroupResponse from '../model/DescribeLineageGroupResponse';
import DescribeModelBiasJobDefinitionRequest from '../model/DescribeModelBiasJobDefinitionRequest';
import DescribeModelBiasJobDefinitionResponse from '../model/DescribeModelBiasJobDefinitionResponse';
import DescribeModelCardExportJobRequest from '../model/DescribeModelCardExportJobRequest';
import DescribeModelCardExportJobResponse from '../model/DescribeModelCardExportJobResponse';
import DescribeModelCardRequest from '../model/DescribeModelCardRequest';
import DescribeModelCardResponse from '../model/DescribeModelCardResponse';
import DescribeModelExplainabilityJobDefinitionRequest from '../model/DescribeModelExplainabilityJobDefinitionRequest';
import DescribeModelExplainabilityJobDefinitionResponse from '../model/DescribeModelExplainabilityJobDefinitionResponse';
import DescribeModelInput from '../model/DescribeModelInput';
import DescribeModelOutput from '../model/DescribeModelOutput';
import DescribeModelPackageGroupInput from '../model/DescribeModelPackageGroupInput';
import DescribeModelPackageGroupOutput from '../model/DescribeModelPackageGroupOutput';
import DescribeModelPackageInput from '../model/DescribeModelPackageInput';
import DescribeModelPackageOutput from '../model/DescribeModelPackageOutput';
import DescribeModelQualityJobDefinitionRequest from '../model/DescribeModelQualityJobDefinitionRequest';
import DescribeModelQualityJobDefinitionResponse from '../model/DescribeModelQualityJobDefinitionResponse';
import DescribeMonitoringScheduleRequest from '../model/DescribeMonitoringScheduleRequest';
import DescribeMonitoringScheduleResponse from '../model/DescribeMonitoringScheduleResponse';
import DescribeNotebookInstanceInput from '../model/DescribeNotebookInstanceInput';
import DescribeNotebookInstanceLifecycleConfigInput from '../model/DescribeNotebookInstanceLifecycleConfigInput';
import DescribeNotebookInstanceLifecycleConfigOutput from '../model/DescribeNotebookInstanceLifecycleConfigOutput';
import DescribeNotebookInstanceOutput from '../model/DescribeNotebookInstanceOutput';
import DescribePipelineDefinitionForExecutionRequest from '../model/DescribePipelineDefinitionForExecutionRequest';
import DescribePipelineDefinitionForExecutionResponse from '../model/DescribePipelineDefinitionForExecutionResponse';
import DescribePipelineExecutionRequest from '../model/DescribePipelineExecutionRequest';
import DescribePipelineExecutionResponse from '../model/DescribePipelineExecutionResponse';
import DescribePipelineRequest from '../model/DescribePipelineRequest';
import DescribePipelineResponse from '../model/DescribePipelineResponse';
import DescribeProcessingJobRequest from '../model/DescribeProcessingJobRequest';
import DescribeProcessingJobResponse from '../model/DescribeProcessingJobResponse';
import DescribeProjectInput from '../model/DescribeProjectInput';
import DescribeProjectOutput from '../model/DescribeProjectOutput';
import DescribeSpaceRequest from '../model/DescribeSpaceRequest';
import DescribeSpaceResponse from '../model/DescribeSpaceResponse';
import DescribeStudioLifecycleConfigRequest from '../model/DescribeStudioLifecycleConfigRequest';
import DescribeStudioLifecycleConfigResponse from '../model/DescribeStudioLifecycleConfigResponse';
import DescribeSubscribedWorkteamRequest from '../model/DescribeSubscribedWorkteamRequest';
import DescribeSubscribedWorkteamResponse from '../model/DescribeSubscribedWorkteamResponse';
import DescribeTrainingJobRequest from '../model/DescribeTrainingJobRequest';
import DescribeTrainingJobResponse from '../model/DescribeTrainingJobResponse';
import DescribeTransformJobRequest from '../model/DescribeTransformJobRequest';
import DescribeTransformJobResponse from '../model/DescribeTransformJobResponse';
import DescribeTrialComponentRequest from '../model/DescribeTrialComponentRequest';
import DescribeTrialComponentResponse from '../model/DescribeTrialComponentResponse';
import DescribeTrialRequest from '../model/DescribeTrialRequest';
import DescribeTrialResponse from '../model/DescribeTrialResponse';
import DescribeUserProfileRequest from '../model/DescribeUserProfileRequest';
import DescribeUserProfileResponse from '../model/DescribeUserProfileResponse';
import DescribeWorkforceRequest from '../model/DescribeWorkforceRequest';
import DescribeWorkforceResponse from '../model/DescribeWorkforceResponse';
import DescribeWorkteamRequest from '../model/DescribeWorkteamRequest';
import DescribeWorkteamResponse from '../model/DescribeWorkteamResponse';
import DisassociateTrialComponentRequest from '../model/DisassociateTrialComponentRequest';
import DisassociateTrialComponentResponse from '../model/DisassociateTrialComponentResponse';
import GetDeviceFleetReportRequest from '../model/GetDeviceFleetReportRequest';
import GetDeviceFleetReportResponse from '../model/GetDeviceFleetReportResponse';
import GetLineageGroupPolicyRequest from '../model/GetLineageGroupPolicyRequest';
import GetLineageGroupPolicyResponse from '../model/GetLineageGroupPolicyResponse';
import GetModelPackageGroupPolicyInput from '../model/GetModelPackageGroupPolicyInput';
import GetModelPackageGroupPolicyOutput from '../model/GetModelPackageGroupPolicyOutput';
import GetSagemakerServicecatalogPortfolioStatusOutput from '../model/GetSagemakerServicecatalogPortfolioStatusOutput';
import GetScalingConfigurationRecommendationRequest from '../model/GetScalingConfigurationRecommendationRequest';
import GetScalingConfigurationRecommendationResponse from '../model/GetScalingConfigurationRecommendationResponse';
import GetSearchSuggestionsRequest from '../model/GetSearchSuggestionsRequest';
import GetSearchSuggestionsResponse from '../model/GetSearchSuggestionsResponse';
import ImportHubContentRequest from '../model/ImportHubContentRequest';
import ImportHubContentResponse from '../model/ImportHubContentResponse';
import ListActionsRequest from '../model/ListActionsRequest';
import ListActionsResponse from '../model/ListActionsResponse';
import ListAlgorithmsInput from '../model/ListAlgorithmsInput';
import ListAlgorithmsOutput from '../model/ListAlgorithmsOutput';
import ListAliasesRequest from '../model/ListAliasesRequest';
import ListAliasesResponse from '../model/ListAliasesResponse';
import ListAppImageConfigsRequest from '../model/ListAppImageConfigsRequest';
import ListAppImageConfigsResponse from '../model/ListAppImageConfigsResponse';
import ListAppsRequest from '../model/ListAppsRequest';
import ListAppsResponse from '../model/ListAppsResponse';
import ListArtifactsRequest from '../model/ListArtifactsRequest';
import ListArtifactsResponse from '../model/ListArtifactsResponse';
import ListAssociationsRequest from '../model/ListAssociationsRequest';
import ListAssociationsResponse from '../model/ListAssociationsResponse';
import ListAutoMLJobsRequest from '../model/ListAutoMLJobsRequest';
import ListAutoMLJobsResponse from '../model/ListAutoMLJobsResponse';
import ListCandidatesForAutoMLJobRequest from '../model/ListCandidatesForAutoMLJobRequest';
import ListCandidatesForAutoMLJobResponse from '../model/ListCandidatesForAutoMLJobResponse';
import ListCodeRepositoriesInput from '../model/ListCodeRepositoriesInput';
import ListCodeRepositoriesOutput from '../model/ListCodeRepositoriesOutput';
import ListCompilationJobsRequest from '../model/ListCompilationJobsRequest';
import ListCompilationJobsResponse from '../model/ListCompilationJobsResponse';
import ListContextsRequest from '../model/ListContextsRequest';
import ListContextsResponse from '../model/ListContextsResponse';
import ListDataQualityJobDefinitionsRequest from '../model/ListDataQualityJobDefinitionsRequest';
import ListDataQualityJobDefinitionsResponse from '../model/ListDataQualityJobDefinitionsResponse';
import ListDeviceFleetsRequest from '../model/ListDeviceFleetsRequest';
import ListDeviceFleetsResponse from '../model/ListDeviceFleetsResponse';
import ListDevicesRequest from '../model/ListDevicesRequest';
import ListDevicesResponse from '../model/ListDevicesResponse';
import ListDomainsRequest from '../model/ListDomainsRequest';
import ListDomainsResponse from '../model/ListDomainsResponse';
import ListEdgeDeploymentPlansRequest from '../model/ListEdgeDeploymentPlansRequest';
import ListEdgeDeploymentPlansResponse from '../model/ListEdgeDeploymentPlansResponse';
import ListEdgePackagingJobsRequest from '../model/ListEdgePackagingJobsRequest';
import ListEdgePackagingJobsResponse from '../model/ListEdgePackagingJobsResponse';
import ListEndpointConfigsInput from '../model/ListEndpointConfigsInput';
import ListEndpointConfigsOutput from '../model/ListEndpointConfigsOutput';
import ListEndpointsInput from '../model/ListEndpointsInput';
import ListEndpointsOutput from '../model/ListEndpointsOutput';
import ListExperimentsRequest from '../model/ListExperimentsRequest';
import ListExperimentsResponse from '../model/ListExperimentsResponse';
import ListFeatureGroupsRequest from '../model/ListFeatureGroupsRequest';
import ListFeatureGroupsResponse from '../model/ListFeatureGroupsResponse';
import ListFlowDefinitionsRequest from '../model/ListFlowDefinitionsRequest';
import ListFlowDefinitionsResponse from '../model/ListFlowDefinitionsResponse';
import ListHubContentVersionsRequest from '../model/ListHubContentVersionsRequest';
import ListHubContentVersionsResponse from '../model/ListHubContentVersionsResponse';
import ListHubContentsRequest from '../model/ListHubContentsRequest';
import ListHubContentsResponse from '../model/ListHubContentsResponse';
import ListHubsRequest from '../model/ListHubsRequest';
import ListHubsResponse from '../model/ListHubsResponse';
import ListHumanTaskUisRequest from '../model/ListHumanTaskUisRequest';
import ListHumanTaskUisResponse from '../model/ListHumanTaskUisResponse';
import ListHyperParameterTuningJobsRequest from '../model/ListHyperParameterTuningJobsRequest';
import ListHyperParameterTuningJobsResponse from '../model/ListHyperParameterTuningJobsResponse';
import ListImageVersionsRequest from '../model/ListImageVersionsRequest';
import ListImageVersionsResponse from '../model/ListImageVersionsResponse';
import ListImagesRequest from '../model/ListImagesRequest';
import ListImagesResponse from '../model/ListImagesResponse';
import ListInferenceExperimentsRequest from '../model/ListInferenceExperimentsRequest';
import ListInferenceExperimentsResponse from '../model/ListInferenceExperimentsResponse';
import ListInferenceRecommendationsJobStepsRequest from '../model/ListInferenceRecommendationsJobStepsRequest';
import ListInferenceRecommendationsJobStepsResponse from '../model/ListInferenceRecommendationsJobStepsResponse';
import ListInferenceRecommendationsJobsRequest from '../model/ListInferenceRecommendationsJobsRequest';
import ListInferenceRecommendationsJobsResponse from '../model/ListInferenceRecommendationsJobsResponse';
import ListLabelingJobsForWorkteamRequest from '../model/ListLabelingJobsForWorkteamRequest';
import ListLabelingJobsForWorkteamResponse from '../model/ListLabelingJobsForWorkteamResponse';
import ListLabelingJobsRequest from '../model/ListLabelingJobsRequest';
import ListLabelingJobsResponse from '../model/ListLabelingJobsResponse';
import ListLineageGroupsRequest from '../model/ListLineageGroupsRequest';
import ListLineageGroupsResponse from '../model/ListLineageGroupsResponse';
import ListModelBiasJobDefinitionsRequest from '../model/ListModelBiasJobDefinitionsRequest';
import ListModelBiasJobDefinitionsResponse from '../model/ListModelBiasJobDefinitionsResponse';
import ListModelCardExportJobsRequest from '../model/ListModelCardExportJobsRequest';
import ListModelCardExportJobsResponse from '../model/ListModelCardExportJobsResponse';
import ListModelCardVersionsRequest from '../model/ListModelCardVersionsRequest';
import ListModelCardVersionsResponse from '../model/ListModelCardVersionsResponse';
import ListModelCardsRequest from '../model/ListModelCardsRequest';
import ListModelCardsResponse from '../model/ListModelCardsResponse';
import ListModelExplainabilityJobDefinitionsRequest from '../model/ListModelExplainabilityJobDefinitionsRequest';
import ListModelExplainabilityJobDefinitionsResponse from '../model/ListModelExplainabilityJobDefinitionsResponse';
import ListModelMetadataRequest from '../model/ListModelMetadataRequest';
import ListModelMetadataResponse from '../model/ListModelMetadataResponse';
import ListModelPackageGroupsInput from '../model/ListModelPackageGroupsInput';
import ListModelPackageGroupsOutput from '../model/ListModelPackageGroupsOutput';
import ListModelPackagesInput from '../model/ListModelPackagesInput';
import ListModelPackagesOutput from '../model/ListModelPackagesOutput';
import ListModelQualityJobDefinitionsRequest from '../model/ListModelQualityJobDefinitionsRequest';
import ListModelQualityJobDefinitionsResponse from '../model/ListModelQualityJobDefinitionsResponse';
import ListModelsInput from '../model/ListModelsInput';
import ListModelsOutput from '../model/ListModelsOutput';
import ListMonitoringAlertHistoryRequest from '../model/ListMonitoringAlertHistoryRequest';
import ListMonitoringAlertHistoryResponse from '../model/ListMonitoringAlertHistoryResponse';
import ListMonitoringAlertsRequest from '../model/ListMonitoringAlertsRequest';
import ListMonitoringAlertsResponse from '../model/ListMonitoringAlertsResponse';
import ListMonitoringExecutionsRequest from '../model/ListMonitoringExecutionsRequest';
import ListMonitoringExecutionsResponse from '../model/ListMonitoringExecutionsResponse';
import ListMonitoringSchedulesRequest from '../model/ListMonitoringSchedulesRequest';
import ListMonitoringSchedulesResponse from '../model/ListMonitoringSchedulesResponse';
import ListNotebookInstanceLifecycleConfigsInput from '../model/ListNotebookInstanceLifecycleConfigsInput';
import ListNotebookInstanceLifecycleConfigsOutput from '../model/ListNotebookInstanceLifecycleConfigsOutput';
import ListNotebookInstancesInput from '../model/ListNotebookInstancesInput';
import ListNotebookInstancesOutput from '../model/ListNotebookInstancesOutput';
import ListPipelineExecutionStepsRequest from '../model/ListPipelineExecutionStepsRequest';
import ListPipelineExecutionStepsResponse from '../model/ListPipelineExecutionStepsResponse';
import ListPipelineExecutionsRequest from '../model/ListPipelineExecutionsRequest';
import ListPipelineExecutionsResponse from '../model/ListPipelineExecutionsResponse';
import ListPipelineParametersForExecutionRequest from '../model/ListPipelineParametersForExecutionRequest';
import ListPipelineParametersForExecutionResponse from '../model/ListPipelineParametersForExecutionResponse';
import ListPipelinesRequest from '../model/ListPipelinesRequest';
import ListPipelinesResponse from '../model/ListPipelinesResponse';
import ListProcessingJobsRequest from '../model/ListProcessingJobsRequest';
import ListProcessingJobsResponse from '../model/ListProcessingJobsResponse';
import ListProjectsInput from '../model/ListProjectsInput';
import ListProjectsOutput from '../model/ListProjectsOutput';
import ListResourceCatalogsRequest from '../model/ListResourceCatalogsRequest';
import ListResourceCatalogsResponse from '../model/ListResourceCatalogsResponse';
import ListSpacesRequest from '../model/ListSpacesRequest';
import ListSpacesResponse from '../model/ListSpacesResponse';
import ListStageDevicesRequest from '../model/ListStageDevicesRequest';
import ListStageDevicesResponse from '../model/ListStageDevicesResponse';
import ListStudioLifecycleConfigsRequest from '../model/ListStudioLifecycleConfigsRequest';
import ListStudioLifecycleConfigsResponse from '../model/ListStudioLifecycleConfigsResponse';
import ListSubscribedWorkteamsRequest from '../model/ListSubscribedWorkteamsRequest';
import ListSubscribedWorkteamsResponse from '../model/ListSubscribedWorkteamsResponse';
import ListTagsInput from '../model/ListTagsInput';
import ListTagsOutput from '../model/ListTagsOutput';
import ListTrainingJobsForHyperParameterTuningJobRequest from '../model/ListTrainingJobsForHyperParameterTuningJobRequest';
import ListTrainingJobsForHyperParameterTuningJobResponse from '../model/ListTrainingJobsForHyperParameterTuningJobResponse';
import ListTrainingJobsRequest from '../model/ListTrainingJobsRequest';
import ListTrainingJobsResponse from '../model/ListTrainingJobsResponse';
import ListTransformJobsRequest from '../model/ListTransformJobsRequest';
import ListTransformJobsResponse from '../model/ListTransformJobsResponse';
import ListTrialComponentsRequest from '../model/ListTrialComponentsRequest';
import ListTrialComponentsResponse from '../model/ListTrialComponentsResponse';
import ListTrialsRequest from '../model/ListTrialsRequest';
import ListTrialsResponse from '../model/ListTrialsResponse';
import ListUserProfilesRequest from '../model/ListUserProfilesRequest';
import ListUserProfilesResponse from '../model/ListUserProfilesResponse';
import ListWorkforcesRequest from '../model/ListWorkforcesRequest';
import ListWorkforcesResponse from '../model/ListWorkforcesResponse';
import ListWorkteamsRequest from '../model/ListWorkteamsRequest';
import ListWorkteamsResponse from '../model/ListWorkteamsResponse';
import PutModelPackageGroupPolicyInput from '../model/PutModelPackageGroupPolicyInput';
import PutModelPackageGroupPolicyOutput from '../model/PutModelPackageGroupPolicyOutput';
import QueryLineageRequest from '../model/QueryLineageRequest';
import QueryLineageResponse from '../model/QueryLineageResponse';
import RegisterDevicesRequest from '../model/RegisterDevicesRequest';
import RenderUiTemplateRequest from '../model/RenderUiTemplateRequest';
import RenderUiTemplateResponse from '../model/RenderUiTemplateResponse';
import RetryPipelineExecutionRequest from '../model/RetryPipelineExecutionRequest';
import RetryPipelineExecutionResponse from '../model/RetryPipelineExecutionResponse';
import SearchRequest from '../model/SearchRequest';
import SearchResponse from '../model/SearchResponse';
import SendPipelineExecutionStepFailureRequest from '../model/SendPipelineExecutionStepFailureRequest';
import SendPipelineExecutionStepFailureResponse from '../model/SendPipelineExecutionStepFailureResponse';
import SendPipelineExecutionStepSuccessRequest from '../model/SendPipelineExecutionStepSuccessRequest';
import SendPipelineExecutionStepSuccessResponse from '../model/SendPipelineExecutionStepSuccessResponse';
import StartEdgeDeploymentStageRequest from '../model/StartEdgeDeploymentStageRequest';
import StartInferenceExperimentRequest from '../model/StartInferenceExperimentRequest';
import StartInferenceExperimentResponse from '../model/StartInferenceExperimentResponse';
import StartMonitoringScheduleRequest from '../model/StartMonitoringScheduleRequest';
import StartNotebookInstanceInput from '../model/StartNotebookInstanceInput';
import StartPipelineExecutionRequest from '../model/StartPipelineExecutionRequest';
import StartPipelineExecutionResponse from '../model/StartPipelineExecutionResponse';
import StopAutoMLJobRequest from '../model/StopAutoMLJobRequest';
import StopCompilationJobRequest from '../model/StopCompilationJobRequest';
import StopEdgeDeploymentStageRequest from '../model/StopEdgeDeploymentStageRequest';
import StopEdgePackagingJobRequest from '../model/StopEdgePackagingJobRequest';
import StopHyperParameterTuningJobRequest from '../model/StopHyperParameterTuningJobRequest';
import StopInferenceExperimentRequest from '../model/StopInferenceExperimentRequest';
import StopInferenceExperimentResponse from '../model/StopInferenceExperimentResponse';
import StopInferenceRecommendationsJobRequest from '../model/StopInferenceRecommendationsJobRequest';
import StopLabelingJobRequest from '../model/StopLabelingJobRequest';
import StopMonitoringScheduleRequest from '../model/StopMonitoringScheduleRequest';
import StopNotebookInstanceInput from '../model/StopNotebookInstanceInput';
import StopPipelineExecutionRequest from '../model/StopPipelineExecutionRequest';
import StopPipelineExecutionResponse from '../model/StopPipelineExecutionResponse';
import StopProcessingJobRequest from '../model/StopProcessingJobRequest';
import StopTrainingJobRequest from '../model/StopTrainingJobRequest';
import StopTransformJobRequest from '../model/StopTransformJobRequest';
import UpdateActionRequest from '../model/UpdateActionRequest';
import UpdateActionResponse from '../model/UpdateActionResponse';
import UpdateAppImageConfigRequest from '../model/UpdateAppImageConfigRequest';
import UpdateAppImageConfigResponse from '../model/UpdateAppImageConfigResponse';
import UpdateArtifactRequest from '../model/UpdateArtifactRequest';
import UpdateArtifactResponse from '../model/UpdateArtifactResponse';
import UpdateCodeRepositoryInput from '../model/UpdateCodeRepositoryInput';
import UpdateCodeRepositoryOutput from '../model/UpdateCodeRepositoryOutput';
import UpdateContextRequest from '../model/UpdateContextRequest';
import UpdateContextResponse from '../model/UpdateContextResponse';
import UpdateDeviceFleetRequest from '../model/UpdateDeviceFleetRequest';
import UpdateDevicesRequest from '../model/UpdateDevicesRequest';
import UpdateDomainRequest from '../model/UpdateDomainRequest';
import UpdateDomainResponse from '../model/UpdateDomainResponse';
import UpdateEndpointInput from '../model/UpdateEndpointInput';
import UpdateEndpointOutput from '../model/UpdateEndpointOutput';
import UpdateEndpointWeightsAndCapacitiesInput from '../model/UpdateEndpointWeightsAndCapacitiesInput';
import UpdateEndpointWeightsAndCapacitiesOutput from '../model/UpdateEndpointWeightsAndCapacitiesOutput';
import UpdateExperimentRequest from '../model/UpdateExperimentRequest';
import UpdateExperimentResponse from '../model/UpdateExperimentResponse';
import UpdateFeatureGroupRequest from '../model/UpdateFeatureGroupRequest';
import UpdateFeatureGroupResponse from '../model/UpdateFeatureGroupResponse';
import UpdateFeatureMetadataRequest from '../model/UpdateFeatureMetadataRequest';
import UpdateHubRequest from '../model/UpdateHubRequest';
import UpdateHubResponse from '../model/UpdateHubResponse';
import UpdateImageRequest from '../model/UpdateImageRequest';
import UpdateImageResponse from '../model/UpdateImageResponse';
import UpdateImageVersionRequest from '../model/UpdateImageVersionRequest';
import UpdateImageVersionResponse from '../model/UpdateImageVersionResponse';
import UpdateInferenceExperimentRequest from '../model/UpdateInferenceExperimentRequest';
import UpdateInferenceExperimentResponse from '../model/UpdateInferenceExperimentResponse';
import UpdateModelCardRequest from '../model/UpdateModelCardRequest';
import UpdateModelCardResponse from '../model/UpdateModelCardResponse';
import UpdateModelPackageInput from '../model/UpdateModelPackageInput';
import UpdateModelPackageOutput from '../model/UpdateModelPackageOutput';
import UpdateMonitoringAlertRequest from '../model/UpdateMonitoringAlertRequest';
import UpdateMonitoringAlertResponse from '../model/UpdateMonitoringAlertResponse';
import UpdateMonitoringScheduleRequest from '../model/UpdateMonitoringScheduleRequest';
import UpdateMonitoringScheduleResponse from '../model/UpdateMonitoringScheduleResponse';
import UpdateNotebookInstanceInput from '../model/UpdateNotebookInstanceInput';
import UpdateNotebookInstanceLifecycleConfigInput from '../model/UpdateNotebookInstanceLifecycleConfigInput';
import UpdatePipelineExecutionRequest from '../model/UpdatePipelineExecutionRequest';
import UpdatePipelineExecutionResponse from '../model/UpdatePipelineExecutionResponse';
import UpdatePipelineRequest from '../model/UpdatePipelineRequest';
import UpdatePipelineResponse from '../model/UpdatePipelineResponse';
import UpdateProjectInput from '../model/UpdateProjectInput';
import UpdateProjectOutput from '../model/UpdateProjectOutput';
import UpdateSpaceRequest from '../model/UpdateSpaceRequest';
import UpdateSpaceResponse from '../model/UpdateSpaceResponse';
import UpdateTrainingJobRequest from '../model/UpdateTrainingJobRequest';
import UpdateTrainingJobResponse from '../model/UpdateTrainingJobResponse';
import UpdateTrialComponentRequest from '../model/UpdateTrialComponentRequest';
import UpdateTrialComponentResponse from '../model/UpdateTrialComponentResponse';
import UpdateTrialRequest from '../model/UpdateTrialRequest';
import UpdateTrialResponse from '../model/UpdateTrialResponse';
import UpdateUserProfileRequest from '../model/UpdateUserProfileRequest';
import UpdateUserProfileResponse from '../model/UpdateUserProfileResponse';
import UpdateWorkforceRequest from '../model/UpdateWorkforceRequest';
import UpdateWorkforceResponse from '../model/UpdateWorkforceResponse';
import UpdateWorkteamRequest from '../model/UpdateWorkteamRequest';
import UpdateWorkteamResponse from '../model/UpdateWorkteamResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-07-24
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAssociation operation.
     * @callback module:api/DefaultApi~addAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an <i>association</i> between the source and the destination. A source can be associated with multiple destinations, and a destination can be associated with multiple sources. An association is a lineage tracking entity. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\">Amazon SageMaker ML Lineage Tracking</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddAssociationRequest} addAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddAssociationResponse}
     */
    addAssociation(xAmzTarget, addAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = addAssociationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addAssociation");
      }
      // verify the required parameter 'addAssociationRequest' is set
      if (addAssociationRequest === undefined || addAssociationRequest === null) {
        throw new Error("Missing the required parameter 'addAssociationRequest' when calling addAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddAssociationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.AddAssociation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTags operation.
     * @callback module:api/DefaultApi~addTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddTagsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds or overwrites one or more tags for the specified SageMaker resource. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints.</p> <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see For more information, see <a href=\"https://aws.amazon.com/answers/account-management/aws-tagging-strategies/\">Amazon Web Services Tagging Strategies</a>.</p> <note> <p>Tags that you add to a hyperparameter tuning job by calling this API are also added to any training jobs that the hyperparameter tuning job launches after you call this API, but not to training jobs that the hyperparameter tuning job launched before you called this API. To make sure that the tags associated with a hyperparameter tuning job are also added to all training jobs that the hyperparameter tuning job launches, add the tags when you first create the tuning job by specifying them in the <code>Tags</code> parameter of <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html\">CreateHyperParameterTuningJob</a> </p> </note> <note> <p>Tags that you add to a SageMaker Studio Domain or User Profile by calling this API are also added to any Apps that the Domain or User Profile launches after you call this API, but not to Apps that the Domain or User Profile launched before you called this API. To make sure that the tags associated with a Domain or User Profile are also added to all Apps that the Domain or User Profile launches, add the tags when you first create the Domain or User Profile by specifying them in the <code>Tags</code> parameter of <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html\">CreateDomain</a> or <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html\">CreateUserProfile</a>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddTagsInput} addTagsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddTagsOutput}
     */
    addTags(xAmzTarget, addTagsInput, opts, callback) {
      opts = opts || {};
      let postBody = addTagsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addTags");
      }
      // verify the required parameter 'addTagsInput' is set
      if (addTagsInput === undefined || addTagsInput === null) {
        throw new Error("Missing the required parameter 'addTagsInput' when calling addTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddTagsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.AddTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateTrialComponent operation.
     * @callback module:api/DefaultApi~associateTrialComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateTrialComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a trial component with a trial. A trial component can be associated with multiple trials. To disassociate a trial component from a trial, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html\">DisassociateTrialComponent</a> API.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateTrialComponentRequest} associateTrialComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateTrialComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateTrialComponentResponse}
     */
    associateTrialComponent(xAmzTarget, associateTrialComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateTrialComponentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateTrialComponent");
      }
      // verify the required parameter 'associateTrialComponentRequest' is set
      if (associateTrialComponentRequest === undefined || associateTrialComponentRequest === null) {
        throw new Error("Missing the required parameter 'associateTrialComponentRequest' when calling associateTrialComponent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateTrialComponentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.AssociateTrialComponent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDescribeModelPackage operation.
     * @callback module:api/DefaultApi~batchDescribeModelPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDescribeModelPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This action batch describes a list of versioned model packages
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchDescribeModelPackageInput} batchDescribeModelPackageInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDescribeModelPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDescribeModelPackageOutput}
     */
    batchDescribeModelPackage(xAmzTarget, batchDescribeModelPackageInput, opts, callback) {
      opts = opts || {};
      let postBody = batchDescribeModelPackageInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchDescribeModelPackage");
      }
      // verify the required parameter 'batchDescribeModelPackageInput' is set
      if (batchDescribeModelPackageInput === undefined || batchDescribeModelPackageInput === null) {
        throw new Error("Missing the required parameter 'batchDescribeModelPackageInput' when calling batchDescribeModelPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDescribeModelPackageOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.BatchDescribeModelPackage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAction operation.
     * @callback module:api/DefaultApi~createActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an <i>action</i>. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\">Amazon SageMaker ML Lineage Tracking</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateActionRequest} createActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateActionResponse}
     */
    createAction(xAmzTarget, createActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createActionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAction");
      }
      // verify the required parameter 'createActionRequest' is set
      if (createActionRequest === undefined || createActionRequest === null) {
        throw new Error("Missing the required parameter 'createActionRequest' when calling createAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateActionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAlgorithm operation.
     * @callback module:api/DefaultApi~createAlgorithmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAlgorithmOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAlgorithmInput} createAlgorithmInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAlgorithmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAlgorithmOutput}
     */
    createAlgorithm(xAmzTarget, createAlgorithmInput, opts, callback) {
      opts = opts || {};
      let postBody = createAlgorithmInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAlgorithm");
      }
      // verify the required parameter 'createAlgorithmInput' is set
      if (createAlgorithmInput === undefined || createAlgorithmInput === null) {
        throw new Error("Missing the required parameter 'createAlgorithmInput' when calling createAlgorithm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAlgorithmOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateAlgorithm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/DefaultApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a running app for the specified UserProfile. This operation is automatically invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAppRequest} createAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppResponse}
     */
    createApp(xAmzTarget, createAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createApp");
      }
      // verify the required parameter 'createAppRequest' is set
      if (createAppRequest === undefined || createAppRequest === null) {
        throw new Error("Missing the required parameter 'createAppRequest' when calling createApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppImageConfig operation.
     * @callback module:api/DefaultApi~createAppImageConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppImageConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAppImageConfigRequest} createAppImageConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppImageConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppImageConfigResponse}
     */
    createAppImageConfig(xAmzTarget, createAppImageConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppImageConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAppImageConfig");
      }
      // verify the required parameter 'createAppImageConfigRequest' is set
      if (createAppImageConfigRequest === undefined || createAppImageConfigRequest === null) {
        throw new Error("Missing the required parameter 'createAppImageConfigRequest' when calling createAppImageConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppImageConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateAppImageConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createArtifact operation.
     * @callback module:api/DefaultApi~createArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateArtifactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an <i>artifact</i>. An artifact is a lineage tracking entity that represents a URI addressable object or data. Some examples are the S3 URI of a dataset and the ECR registry path of an image. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\">Amazon SageMaker ML Lineage Tracking</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateArtifactRequest} createArtifactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateArtifactResponse}
     */
    createArtifact(xAmzTarget, createArtifactRequest, opts, callback) {
      opts = opts || {};
      let postBody = createArtifactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createArtifact");
      }
      // verify the required parameter 'createArtifactRequest' is set
      if (createArtifactRequest === undefined || createArtifactRequest === null) {
        throw new Error("Missing the required parameter 'createArtifactRequest' when calling createArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateArtifactResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAutoMLJob operation.
     * @callback module:api/DefaultApi~createAutoMLJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAutoMLJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Autopilot job also referred to as Autopilot experiment or AutoML job.</p> <note> <p>We recommend using the new versions <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\">CreateAutoMLJobV2</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\">DescribeAutoMLJobV2</a>, which offer backward compatibility.</p> <p> <code>CreateAutoMLJobV2</code> can manage tabular problem types identical to those of its previous version <code>CreateAutoMLJob</code>, as well as non-tabular problem types such as image or text classification.</p> <p>Find guidelines about how to migrate a <code>CreateAutoMLJob</code> to <code>CreateAutoMLJobV2</code> in <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2\">Migrate a CreateAutoMLJob to CreateAutoMLJobV2</a>.</p> </note> <p>You can find the best-performing model after you run an AutoML job by calling <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\">DescribeAutoMLJobV2</a> (recommended) or <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html\">DescribeAutoMLJob</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAutoMLJobRequest} createAutoMLJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAutoMLJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAutoMLJobResponse}
     */
    createAutoMLJob(xAmzTarget, createAutoMLJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAutoMLJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAutoMLJob");
      }
      // verify the required parameter 'createAutoMLJobRequest' is set
      if (createAutoMLJobRequest === undefined || createAutoMLJobRequest === null) {
        throw new Error("Missing the required parameter 'createAutoMLJobRequest' when calling createAutoMLJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAutoMLJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateAutoMLJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAutoMLJobV2 operation.
     * @callback module:api/DefaultApi~createAutoMLJobV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAutoMLJobV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Autopilot job also referred to as Autopilot experiment or AutoML job V2.</p> <note> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\">CreateAutoMLJobV2</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\">DescribeAutoMLJobV2</a> are new versions of <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html\">CreateAutoMLJob</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html\">DescribeAutoMLJob</a> which offer backward compatibility.</p> <p> <code>CreateAutoMLJobV2</code> can manage tabular problem types identical to those of its previous version <code>CreateAutoMLJob</code>, as well as non-tabular problem types such as image or text classification.</p> <p>Find guidelines about how to migrate a <code>CreateAutoMLJob</code> to <code>CreateAutoMLJobV2</code> in <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2\">Migrate a CreateAutoMLJob to CreateAutoMLJobV2</a>.</p> </note> <p>For the list of available problem types supported by <code>CreateAutoMLJobV2</code>, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLProblemTypeConfig.html\">AutoMLProblemTypeConfig</a>.</p> <p>You can find the best-performing model after you run an AutoML job V2 by calling <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\">DescribeAutoMLJobV2</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAutoMLJobV2Request} createAutoMLJobV2Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAutoMLJobV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAutoMLJobV2Response}
     */
    createAutoMLJobV2(xAmzTarget, createAutoMLJobV2Request, opts, callback) {
      opts = opts || {};
      let postBody = createAutoMLJobV2Request;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAutoMLJobV2");
      }
      // verify the required parameter 'createAutoMLJobV2Request' is set
      if (createAutoMLJobV2Request === undefined || createAutoMLJobV2Request === null) {
        throw new Error("Missing the required parameter 'createAutoMLJobV2Request' when calling createAutoMLJobV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAutoMLJobV2Response;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateAutoMLJobV2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCodeRepository operation.
     * @callback module:api/DefaultApi~createCodeRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCodeRepositoryOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a Git repository as a resource in your SageMaker account. You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with.</p> <p>The repository can be hosted either in <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">Amazon Web Services CodeCommit</a> or in any other Git repository.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateCodeRepositoryInput} createCodeRepositoryInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCodeRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCodeRepositoryOutput}
     */
    createCodeRepository(xAmzTarget, createCodeRepositoryInput, opts, callback) {
      opts = opts || {};
      let postBody = createCodeRepositoryInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createCodeRepository");
      }
      // verify the required parameter 'createCodeRepositoryInput' is set
      if (createCodeRepositoryInput === undefined || createCodeRepositoryInput === null) {
        throw new Error("Missing the required parameter 'createCodeRepositoryInput' when calling createCodeRepository");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCodeRepositoryOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateCodeRepository', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCompilationJob operation.
     * @callback module:api/DefaultApi~createCompilationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCompilationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. </p> <p>If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with Amazon Web Services IoT Greengrass. In that case, deploy them as an ML resource.</p> <p>In the request body, you provide the following:</p> <ul> <li> <p>A name for the compilation job</p> </li> <li> <p> Information about the input model artifacts </p> </li> <li> <p>The output location for the compiled model and the device (target) that the model runs on </p> </li> <li> <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job. </p> </li> </ul> <p>You can also provide a <code>Tag</code> to track the model compilation job's resource use and costs. The response body contains the <code>CompilationJobArn</code> for the compiled job.</p> <p>To stop a model compilation job, use <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopCompilationJob.html\">StopCompilationJob</a>. To get information about a particular model compilation job, use <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html\">DescribeCompilationJob</a>. To get information about multiple model compilation jobs, use <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html\">ListCompilationJobs</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateCompilationJobRequest} createCompilationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCompilationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCompilationJobResponse}
     */
    createCompilationJob(xAmzTarget, createCompilationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCompilationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createCompilationJob");
      }
      // verify the required parameter 'createCompilationJobRequest' is set
      if (createCompilationJobRequest === undefined || createCompilationJobRequest === null) {
        throw new Error("Missing the required parameter 'createCompilationJobRequest' when calling createCompilationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCompilationJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateCompilationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContext operation.
     * @callback module:api/DefaultApi~createContextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a <i>context</i>. A context is a lineage tracking entity that represents a logical grouping of other tracking or experiment entities. Some examples are an endpoint and a model package. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\">Amazon SageMaker ML Lineage Tracking</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateContextRequest} createContextRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateContextResponse}
     */
    createContext(xAmzTarget, createContextRequest, opts, callback) {
      opts = opts || {};
      let postBody = createContextRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createContext");
      }
      // verify the required parameter 'createContextRequest' is set
      if (createContextRequest === undefined || createContextRequest === null) {
        throw new Error("Missing the required parameter 'createContextRequest' when calling createContext");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateContextResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateContext', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataQualityJobDefinition operation.
     * @callback module:api/DefaultApi~createDataQualityJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDataQualityJobDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a definition for a job that monitors data quality and drift. For information about model monitor, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html\">Amazon SageMaker Model Monitor</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDataQualityJobDefinitionRequest} createDataQualityJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataQualityJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDataQualityJobDefinitionResponse}
     */
    createDataQualityJobDefinition(xAmzTarget, createDataQualityJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDataQualityJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDataQualityJobDefinition");
      }
      // verify the required parameter 'createDataQualityJobDefinitionRequest' is set
      if (createDataQualityJobDefinitionRequest === undefined || createDataQualityJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'createDataQualityJobDefinitionRequest' when calling createDataQualityJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDataQualityJobDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateDataQualityJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceFleet operation.
     * @callback module:api/DefaultApi~createDeviceFleetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a device fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDeviceFleetRequest} createDeviceFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDeviceFleetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createDeviceFleet(xAmzTarget, createDeviceFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDeviceFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDeviceFleet");
      }
      // verify the required parameter 'createDeviceFleetRequest' is set
      if (createDeviceFleetRequest === undefined || createDeviceFleetRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceFleetRequest' when calling createDeviceFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateDeviceFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDomain operation.
     * @callback module:api/DefaultApi~createDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain consists of an associated Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. Users within a domain can share notebook files and other artifacts with each other.</p> <p> <b>EFS storage</b> </p> <p>When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files.</p> <p>SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, you can specify a customer managed key. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html\">Protect Data at Rest Using Encryption</a>.</p> <p> <b>VPC configuration</b> </p> <p>All SageMaker Studio traffic between the domain and the EFS volume is through the specified VPC and subnets. For other Studio traffic, you can specify the <code>AppNetworkAccessType</code> parameter. <code>AppNetworkAccessType</code> corresponds to the network access type that you choose when you onboard to Studio. The following options are available:</p> <ul> <li> <p> <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.</p> </li> <li> <p> <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway.</p> <p>When internet access is disabled, you won't be able to run a Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.</p> </li> </ul> <important> <p>NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a SageMaker Studio app successfully.</p> </important> <p>For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html\">Connect SageMaker Studio Notebooks to Resources in a VPC</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDomainRequest} createDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDomainResponse}
     */
    createDomain(xAmzTarget, createDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDomain");
      }
      // verify the required parameter 'createDomainRequest' is set
      if (createDomainRequest === undefined || createDomainRequest === null) {
        throw new Error("Missing the required parameter 'createDomainRequest' when calling createDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEdgeDeploymentPlan operation.
     * @callback module:api/DefaultApi~createEdgeDeploymentPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEdgeDeploymentPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateEdgeDeploymentPlanRequest} createEdgeDeploymentPlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEdgeDeploymentPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEdgeDeploymentPlanResponse}
     */
    createEdgeDeploymentPlan(xAmzTarget, createEdgeDeploymentPlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEdgeDeploymentPlanRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createEdgeDeploymentPlan");
      }
      // verify the required parameter 'createEdgeDeploymentPlanRequest' is set
      if (createEdgeDeploymentPlanRequest === undefined || createEdgeDeploymentPlanRequest === null) {
        throw new Error("Missing the required parameter 'createEdgeDeploymentPlanRequest' when calling createEdgeDeploymentPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEdgeDeploymentPlanResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateEdgeDeploymentPlan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEdgeDeploymentStage operation.
     * @callback module:api/DefaultApi~createEdgeDeploymentStageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new stage in an existing edge deployment plan.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateEdgeDeploymentStageRequest} createEdgeDeploymentStageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEdgeDeploymentStageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createEdgeDeploymentStage(xAmzTarget, createEdgeDeploymentStageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEdgeDeploymentStageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createEdgeDeploymentStage");
      }
      // verify the required parameter 'createEdgeDeploymentStageRequest' is set
      if (createEdgeDeploymentStageRequest === undefined || createEdgeDeploymentStageRequest === null) {
        throw new Error("Missing the required parameter 'createEdgeDeploymentStageRequest' when calling createEdgeDeploymentStage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateEdgeDeploymentStage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEdgePackagingJob operation.
     * @callback module:api/DefaultApi~createEdgePackagingJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateEdgePackagingJobRequest} createEdgePackagingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEdgePackagingJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createEdgePackagingJob(xAmzTarget, createEdgePackagingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEdgePackagingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createEdgePackagingJob");
      }
      // verify the required parameter 'createEdgePackagingJobRequest' is set
      if (createEdgePackagingJobRequest === undefined || createEdgePackagingJobRequest === null) {
        throw new Error("Missing the required parameter 'createEdgePackagingJobRequest' when calling createEdgePackagingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateEdgePackagingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEndpoint operation.
     * @callback module:api/DefaultApi~createEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an endpoint using the endpoint configuration specified in the request. SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html\">CreateEndpointConfig</a> API. </p> <p> Use this API to deploy models using SageMaker hosting services. </p> <p>For an example that calls this method when deploying a model to SageMaker hosting services, see the <a href=\"https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb\">Create Endpoint example notebook.</a> </p> <note> <p> You must not delete an <code>EndpointConfig</code> that is in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p> </note> <p>The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. </p> <p>When it receives the request, SageMaker creates the endpoint, launches the resources (ML compute instances), and deploys the model(s) on them. </p> <note> <p>When you call <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\">CreateEndpoint</a>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html\"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html\">DescribeEndpointConfig</a> before calling <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\">CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p> </note> <p>When SageMaker receives the request, it sets the endpoint status to <code>Creating</code>. After it creates the endpoint, it sets the status to <code>InService</code>. SageMaker can then process incoming requests for inferences. To check the status of an endpoint, use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html\">DescribeEndpoint</a> API.</p> <p>If any of the models hosted at this endpoint get model data from an Amazon S3 location, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provided. Amazon Web Services STS is activated in your Amazon Web Services account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html\">Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p> <note> <p> To add the IAM role policies for using this API operation, go to the <a href=\"https://console.aws.amazon.com/iam/\">IAM console</a>, and choose Roles in the left navigation pane. Search the IAM role that you want to grant access to use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\">CreateEndpoint</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html\">CreateEndpointConfig</a> API operations, add the following policies to the role. </p> <ul> <li> <p>Option 1: For a full SageMaker access, search and attach the <code>AmazonSageMakerFullAccess</code> policy.</p> </li> <li> <p>Option 2: For granting a limited access to an IAM role, paste the following Action elements manually into the JSON file of the IAM role: </p> <p> <code>\"Action\": [\"sagemaker:CreateEndpoint\", \"sagemaker:CreateEndpointConfig\"]</code> </p> <p> <code>\"Resource\": [</code> </p> <p> <code>\"arn:aws:sagemaker:region:account-id:endpoint/endpointName\"</code> </p> <p> <code>\"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName\"</code> </p> <p> <code>]</code> </p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html\">SageMaker API Permissions: Actions, Permissions, and Resources Reference</a>.</p> </li> </ul> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateEndpointInput} createEndpointInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEndpointOutput}
     */
    createEndpoint(xAmzTarget, createEndpointInput, opts, callback) {
      opts = opts || {};
      let postBody = createEndpointInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createEndpoint");
      }
      // verify the required parameter 'createEndpointInput' is set
      if (createEndpointInput === undefined || createEndpointInput === null) {
        throw new Error("Missing the required parameter 'createEndpointInput' when calling createEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEndpointOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEndpointConfig operation.
     * @callback module:api/DefaultApi~createEndpointConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEndpointConfigOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In the configuration, you identify one or more models, created using the <code>CreateModel</code> API, to deploy and the resources that you want SageMaker to provision. Then you call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\">CreateEndpoint</a> API.</p> <note> <p> Use this API if you want to use SageMaker hosting services to deploy models into production. </p> </note> <p>In the request, you define a <code>ProductionVariant</code>, for each model that you want to deploy. Each <code>ProductionVariant</code> parameter also describes the resources that you want SageMaker to provision. This includes the number and type of ML compute instances to deploy. </p> <p>If you are hosting multiple models, you also assign a <code>VariantWeight</code> to specify how much traffic you want to allocate to each model. For example, suppose that you want to host two models, A and B, and you assign traffic weight 2 for model A and 1 for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to model B. </p> <note> <p>When you call <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\">CreateEndpoint</a>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html\"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html\">DescribeEndpointConfig</a> before calling <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\">CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateEndpointConfigInput} createEndpointConfigInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEndpointConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEndpointConfigOutput}
     */
    createEndpointConfig(xAmzTarget, createEndpointConfigInput, opts, callback) {
      opts = opts || {};
      let postBody = createEndpointConfigInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createEndpointConfig");
      }
      // verify the required parameter 'createEndpointConfigInput' is set
      if (createEndpointConfigInput === undefined || createEndpointConfigInput === null) {
        throw new Error("Missing the required parameter 'createEndpointConfigInput' when calling createEndpointConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEndpointConfigOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateEndpointConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExperiment operation.
     * @callback module:api/DefaultApi~createExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a SageMaker <i>experiment</i>. An experiment is a collection of <i>trials</i> that are observed, compared and evaluated as a group. A trial is a set of steps, called <i>trial components</i>, that produce a machine learning model.</p> <note> <p>In the Studio UI, trials are referred to as <i>run groups</i> and trial components are referred to as <i>runs</i>.</p> </note> <p>The goal of an experiment is to determine the components that produce the best model. Multiple trials are performed, each one isolating and measuring the impact of a change to one or more inputs, while keeping the remaining inputs constant.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to experiments, trials, trial components and then use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\">Search</a> API to search for the tags.</p> <p>To add a description to an experiment, specify the optional <code>Description</code> parameter. To add a description later, or to change the description, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateExperiment.html\">UpdateExperiment</a> API.</p> <p>To get a list of all your experiments, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListExperiments.html\">ListExperiments</a> API. To view an experiment's properties, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html\">DescribeExperiment</a> API. To get a list of all the trials associated with an experiment, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html\">ListTrials</a> API. To create a trial call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrial.html\">CreateTrial</a> API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateExperimentRequest} createExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateExperimentResponse}
     */
    createExperiment(xAmzTarget, createExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createExperiment");
      }
      // verify the required parameter 'createExperimentRequest' is set
      if (createExperimentRequest === undefined || createExperimentRequest === null) {
        throw new Error("Missing the required parameter 'createExperimentRequest' when calling createExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFeatureGroup operation.
     * @callback module:api/DefaultApi~createFeatureGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFeatureGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a group of <code>Features</code> defined in the <code>FeatureStore</code> to describe a <code>Record</code>. </p> <p>The <code>FeatureGroup</code> defines the schema and features contained in the FeatureGroup. A <code>FeatureGroup</code> definition is composed of a list of <code>Features</code>, a <code>RecordIdentifierFeatureName</code>, an <code>EventTimeFeatureName</code> and configurations for its <code>OnlineStore</code> and <code>OfflineStore</code>. Check <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">Amazon Web Services service quotas</a> to see the <code>FeatureGroup</code>s quota for your Amazon Web Services account.</p> <important> <p>You must include at least one of <code>OnlineStoreConfig</code> and <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFeatureGroupRequest} createFeatureGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFeatureGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFeatureGroupResponse}
     */
    createFeatureGroup(xAmzTarget, createFeatureGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFeatureGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFeatureGroup");
      }
      // verify the required parameter 'createFeatureGroupRequest' is set
      if (createFeatureGroupRequest === undefined || createFeatureGroupRequest === null) {
        throw new Error("Missing the required parameter 'createFeatureGroupRequest' when calling createFeatureGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFeatureGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateFeatureGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFlowDefinition operation.
     * @callback module:api/DefaultApi~createFlowDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFlowDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a flow definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFlowDefinitionRequest} createFlowDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFlowDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFlowDefinitionResponse}
     */
    createFlowDefinition(xAmzTarget, createFlowDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFlowDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFlowDefinition");
      }
      // verify the required parameter 'createFlowDefinitionRequest' is set
      if (createFlowDefinitionRequest === undefined || createFlowDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'createFlowDefinitionRequest' when calling createFlowDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFlowDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateFlowDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createHub operation.
     * @callback module:api/DefaultApi~createHubCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHubResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateHubRequest} createHubRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createHubCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHubResponse}
     */
    createHub(xAmzTarget, createHubRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHubRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createHub");
      }
      // verify the required parameter 'createHubRequest' is set
      if (createHubRequest === undefined || createHubRequest === null) {
        throw new Error("Missing the required parameter 'createHubRequest' when calling createHub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateHubResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateHub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createHumanTaskUi operation.
     * @callback module:api/DefaultApi~createHumanTaskUiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHumanTaskUiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateHumanTaskUiRequest} createHumanTaskUiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createHumanTaskUiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHumanTaskUiResponse}
     */
    createHumanTaskUi(xAmzTarget, createHumanTaskUiRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHumanTaskUiRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createHumanTaskUi");
      }
      // verify the required parameter 'createHumanTaskUiRequest' is set
      if (createHumanTaskUiRequest === undefined || createHumanTaskUiRequest === null) {
        throw new Error("Missing the required parameter 'createHumanTaskUiRequest' when calling createHumanTaskUi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateHumanTaskUiResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateHumanTaskUi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createHyperParameterTuningJob operation.
     * @callback module:api/DefaultApi~createHyperParameterTuningJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHyperParameterTuningJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version of a model by running many training jobs on your dataset using the algorithm you choose and values for hyperparameters within ranges that you specify. It then chooses the hyperparameter values that result in a model that performs the best, as measured by an objective metric that you choose.</p> <p>A hyperparameter tuning job automatically creates Amazon SageMaker experiments, trials, and trial components for each training job that it runs. You can view these entities in Amazon SageMaker Studio. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/experiments-view-compare.html#experiments-view\">View Experiments, Trials, and Trial Components</a>.</p> <important> <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateHyperParameterTuningJobRequest} createHyperParameterTuningJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createHyperParameterTuningJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHyperParameterTuningJobResponse}
     */
    createHyperParameterTuningJob(xAmzTarget, createHyperParameterTuningJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHyperParameterTuningJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createHyperParameterTuningJob");
      }
      // verify the required parameter 'createHyperParameterTuningJobRequest' is set
      if (createHyperParameterTuningJobRequest === undefined || createHyperParameterTuningJobRequest === null) {
        throw new Error("Missing the required parameter 'createHyperParameterTuningJobRequest' when calling createHyperParameterTuningJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateHyperParameterTuningJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateHyperParameterTuningJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImage operation.
     * @callback module:api/DefaultApi~createImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html\">Bring your own SageMaker image</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateImageRequest} createImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateImageResponse}
     */
    createImage(xAmzTarget, createImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createImage");
      }
      // verify the required parameter 'createImageRequest' is set
      if (createImageRequest === undefined || createImageRequest === null) {
        throw new Error("Missing the required parameter 'createImageRequest' when calling createImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateImageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageVersion operation.
     * @callback module:api/DefaultApi~createImageVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateImageVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a version of the SageMaker image specified by <code>ImageName</code>. The version represents the Amazon Elastic Container Registry (ECR) container image specified by <code>BaseImage</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateImageVersionRequest} createImageVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createImageVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateImageVersionResponse}
     */
    createImageVersion(xAmzTarget, createImageVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createImageVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createImageVersion");
      }
      // verify the required parameter 'createImageVersionRequest' is set
      if (createImageVersionRequest === undefined || createImageVersionRequest === null) {
        throw new Error("Missing the required parameter 'createImageVersionRequest' when calling createImageVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateImageVersionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateImageVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInferenceExperiment operation.
     * @callback module:api/DefaultApi~createInferenceExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInferenceExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Creates an inference experiment using the configurations specified in the request. </p> <p> Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html\">Shadow tests</a>. </p> <p> Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint's model variants based on your specified configuration. </p> <p> While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html\">View, monitor, and edit shadow tests</a>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateInferenceExperimentRequest} createInferenceExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInferenceExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInferenceExperimentResponse}
     */
    createInferenceExperiment(xAmzTarget, createInferenceExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInferenceExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createInferenceExperiment");
      }
      // verify the required parameter 'createInferenceExperimentRequest' is set
      if (createInferenceExperimentRequest === undefined || createInferenceExperimentRequest === null) {
        throw new Error("Missing the required parameter 'createInferenceExperimentRequest' when calling createInferenceExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInferenceExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateInferenceExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInferenceRecommendationsJob operation.
     * @callback module:api/DefaultApi~createInferenceRecommendationsJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInferenceRecommendationsJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a recommendation job. You can create either an instance recommendation or load test job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateInferenceRecommendationsJobRequest} createInferenceRecommendationsJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInferenceRecommendationsJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInferenceRecommendationsJobResponse}
     */
    createInferenceRecommendationsJob(xAmzTarget, createInferenceRecommendationsJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInferenceRecommendationsJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createInferenceRecommendationsJob");
      }
      // verify the required parameter 'createInferenceRecommendationsJobRequest' is set
      if (createInferenceRecommendationsJobRequest === undefined || createInferenceRecommendationsJobRequest === null) {
        throw new Error("Missing the required parameter 'createInferenceRecommendationsJobRequest' when calling createInferenceRecommendationsJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInferenceRecommendationsJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateInferenceRecommendationsJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLabelingJob operation.
     * @callback module:api/DefaultApi~createLabelingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLabelingJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a job that uses workers to label the data objects in your input dataset. You can use the labeled data to train machine learning models. </p> <p>You can select your workforce from one of three providers:</p> <ul> <li> <p>A private workforce that you create. It can include employees, contractors, and outside experts. Use a private workforce when want the data to stay within your organization or when a specific set of skills is required.</p> </li> <li> <p>One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide expertise in specific areas. </p> </li> <li> <p>The Amazon Mechanical Turk workforce. This is the largest workforce, but it should only be used for public data or data that has been stripped of any personally identifiable information.</p> </li> </ul> <p>You can also use <i>automated data labeling</i> to reduce the number of data objects that need to be labeled by a human. Automated data labeling uses <i>active learning</i> to determine if a data object can be labeled by machine or if it needs to be sent to a human worker. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html\">Using Automated Data Labeling</a>.</p> <p>The data objects to be labeled are contained in an Amazon S3 bucket. You create a <i>manifest file</i> that describes the location of each object. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html\">Using Input and Output Data</a>.</p> <p>The output can be used as the manifest file for another labeling job or as training data for your machine learning models.</p> <p>You can use this operation to create a static labeling job or a streaming labeling job. A static labeling job stops if all data objects in the input manifest file identified in <code>ManifestS3Uri</code> have been labeled. A streaming labeling job runs perpetually until it is manually stopped, or remains idle for 10 days. You can send new data objects to an active (<code>InProgress</code>) streaming labeling job in real time. To learn how to create a static labeling job, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html\">Create a Labeling Job (API) </a> in the Amazon SageMaker Developer Guide. To learn how to create a streaming labeling job, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html\">Create a Streaming Labeling Job</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLabelingJobRequest} createLabelingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLabelingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLabelingJobResponse}
     */
    createLabelingJob(xAmzTarget, createLabelingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLabelingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLabelingJob");
      }
      // verify the required parameter 'createLabelingJobRequest' is set
      if (createLabelingJobRequest === undefined || createLabelingJobRequest === null) {
        throw new Error("Missing the required parameter 'createLabelingJobRequest' when calling createLabelingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLabelingJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateLabelingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModel operation.
     * @callback module:api/DefaultApi~createModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a model in SageMaker. In the request, you name the model and describe a primary container. For the primary container, you specify the Docker image that contains inference code, artifacts (from prior training), and a custom environment map that the inference code uses when you deploy the model for predictions.</p> <p>Use this API to create a model if you want to use SageMaker hosting services or run a batch transform job.</p> <p>To host your model, you create an endpoint configuration with the <code>CreateEndpointConfig</code> API, and then create an endpoint with the <code>CreateEndpoint</code> API. SageMaker then deploys all of the containers that you defined for the model in the hosting environment. </p> <p>For an example that calls this method when deploying a model to SageMaker hosting services, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model\">Create a Model (Amazon Web Services SDK for Python (Boto 3)).</a> </p> <p>To run a batch transform using your model, you start a job with the <code>CreateTransformJob</code> API. SageMaker uses your model and your dataset to get inferences which are then saved to a specified S3 location.</p> <p>In the request, you also provide an IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute hosting instances or for batch transform jobs. In addition, you also use the IAM role to manage permissions the inference code needs. For example, if the inference code access any other Amazon Web Services resources, you grant necessary permissions via this role.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateModelInput} createModelInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelOutput}
     */
    createModel(xAmzTarget, createModelInput, opts, callback) {
      opts = opts || {};
      let postBody = createModelInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createModel");
      }
      // verify the required parameter 'createModelInput' is set
      if (createModelInput === undefined || createModelInput === null) {
        throw new Error("Missing the required parameter 'createModelInput' when calling createModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelBiasJobDefinition operation.
     * @callback module:api/DefaultApi~createModelBiasJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelBiasJobDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the definition for a model bias job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateModelBiasJobDefinitionRequest} createModelBiasJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelBiasJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelBiasJobDefinitionResponse}
     */
    createModelBiasJobDefinition(xAmzTarget, createModelBiasJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createModelBiasJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createModelBiasJobDefinition");
      }
      // verify the required parameter 'createModelBiasJobDefinitionRequest' is set
      if (createModelBiasJobDefinitionRequest === undefined || createModelBiasJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'createModelBiasJobDefinitionRequest' when calling createModelBiasJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelBiasJobDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateModelBiasJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelCard operation.
     * @callback module:api/DefaultApi~createModelCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Amazon SageMaker Model Card.</p> <p>For information about how to use model cards, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html\">Amazon SageMaker Model Card</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateModelCardRequest} createModelCardRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelCardResponse}
     */
    createModelCard(xAmzTarget, createModelCardRequest, opts, callback) {
      opts = opts || {};
      let postBody = createModelCardRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createModelCard");
      }
      // verify the required parameter 'createModelCardRequest' is set
      if (createModelCardRequest === undefined || createModelCardRequest === null) {
        throw new Error("Missing the required parameter 'createModelCardRequest' when calling createModelCard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelCardResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateModelCard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelCardExportJob operation.
     * @callback module:api/DefaultApi~createModelCardExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelCardExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon SageMaker Model Card export job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateModelCardExportJobRequest} createModelCardExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelCardExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelCardExportJobResponse}
     */
    createModelCardExportJob(xAmzTarget, createModelCardExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createModelCardExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createModelCardExportJob");
      }
      // verify the required parameter 'createModelCardExportJobRequest' is set
      if (createModelCardExportJobRequest === undefined || createModelCardExportJobRequest === null) {
        throw new Error("Missing the required parameter 'createModelCardExportJobRequest' when calling createModelCardExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelCardExportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateModelCardExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelExplainabilityJobDefinition operation.
     * @callback module:api/DefaultApi~createModelExplainabilityJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelExplainabilityJobDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the definition for a model explainability job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateModelExplainabilityJobDefinitionRequest} createModelExplainabilityJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelExplainabilityJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelExplainabilityJobDefinitionResponse}
     */
    createModelExplainabilityJobDefinition(xAmzTarget, createModelExplainabilityJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createModelExplainabilityJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createModelExplainabilityJobDefinition");
      }
      // verify the required parameter 'createModelExplainabilityJobDefinitionRequest' is set
      if (createModelExplainabilityJobDefinitionRequest === undefined || createModelExplainabilityJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'createModelExplainabilityJobDefinitionRequest' when calling createModelExplainabilityJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelExplainabilityJobDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateModelExplainabilityJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelPackage operation.
     * @callback module:api/DefaultApi~createModelPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p> <p>To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for <code>InferenceSpecification</code>. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for <code>SourceAlgorithmSpecification</code>.</p> <note> <p>There are two types of model packages:</p> <ul> <li> <p>Versioned - a model that is part of a model group in the model registry.</p> </li> <li> <p>Unversioned - a model package that is not part of a model group.</p> </li> </ul> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateModelPackageInput} createModelPackageInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelPackageOutput}
     */
    createModelPackage(xAmzTarget, createModelPackageInput, opts, callback) {
      opts = opts || {};
      let postBody = createModelPackageInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createModelPackage");
      }
      // verify the required parameter 'createModelPackageInput' is set
      if (createModelPackageInput === undefined || createModelPackageInput === null) {
        throw new Error("Missing the required parameter 'createModelPackageInput' when calling createModelPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelPackageOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateModelPackage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelPackageGroup operation.
     * @callback module:api/DefaultApi~createModelPackageGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelPackageGroupOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a model group. A model group contains a group of model versions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateModelPackageGroupInput} createModelPackageGroupInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelPackageGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelPackageGroupOutput}
     */
    createModelPackageGroup(xAmzTarget, createModelPackageGroupInput, opts, callback) {
      opts = opts || {};
      let postBody = createModelPackageGroupInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createModelPackageGroup");
      }
      // verify the required parameter 'createModelPackageGroupInput' is set
      if (createModelPackageGroupInput === undefined || createModelPackageGroupInput === null) {
        throw new Error("Missing the required parameter 'createModelPackageGroupInput' when calling createModelPackageGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelPackageGroupOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateModelPackageGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelQualityJobDefinition operation.
     * @callback module:api/DefaultApi~createModelQualityJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelQualityJobDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a definition for a job that monitors model quality and drift. For information about model monitor, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html\">Amazon SageMaker Model Monitor</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateModelQualityJobDefinitionRequest} createModelQualityJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelQualityJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelQualityJobDefinitionResponse}
     */
    createModelQualityJobDefinition(xAmzTarget, createModelQualityJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createModelQualityJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createModelQualityJobDefinition");
      }
      // verify the required parameter 'createModelQualityJobDefinitionRequest' is set
      if (createModelQualityJobDefinitionRequest === undefined || createModelQualityJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'createModelQualityJobDefinitionRequest' when calling createModelQualityJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelQualityJobDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateModelQualityJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMonitoringSchedule operation.
     * @callback module:api/DefaultApi~createMonitoringScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMonitoringScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data captured for an Amazon SageMaker Endpoint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateMonitoringScheduleRequest} createMonitoringScheduleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMonitoringScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMonitoringScheduleResponse}
     */
    createMonitoringSchedule(xAmzTarget, createMonitoringScheduleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMonitoringScheduleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createMonitoringSchedule");
      }
      // verify the required parameter 'createMonitoringScheduleRequest' is set
      if (createMonitoringScheduleRequest === undefined || createMonitoringScheduleRequest === null) {
        throw new Error("Missing the required parameter 'createMonitoringScheduleRequest' when calling createMonitoringSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMonitoringScheduleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateMonitoringSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNotebookInstance operation.
     * @callback module:api/DefaultApi~createNotebookInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNotebookInstanceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook. </p> <p>In a <code>CreateNotebookInstance</code> request, specify the type of ML compute instance that you want to run. SageMaker launches the instance, installs common libraries that you can use to explore datasets for model training, and attaches an ML storage volume to the notebook instance. </p> <p>SageMaker also provides a set of example notebooks. Each notebook demonstrates how to use SageMaker with a specific algorithm or with a machine learning framework. </p> <p>After receiving the request, SageMaker does the following:</p> <ol> <li> <p>Creates a network interface in the SageMaker VPC.</p> </li> <li> <p>(Option) If you specified <code>SubnetId</code>, SageMaker creates a network interface in your own VPC, which is inferred from the subnet ID that you provide in the input. When creating this network interface, SageMaker attaches the security group that you specified in the request to the network interface that it creates in your VPC.</p> </li> <li> <p>Launches an EC2 instance of the type specified in the request in the SageMaker VPC. If you specified <code>SubnetId</code> of your VPC, SageMaker specifies both network interfaces when launching this instance. This enables inbound traffic from your own VPC to the notebook instance, assuming that the security groups allow it.</p> </li> </ol> <p>After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN). You can't change the name of a notebook instance after you create it.</p> <p>After SageMaker creates the notebook instance, you can connect to the Jupyter server and work in Jupyter notebooks. For example, you can write code to explore a dataset that you can use for model training, train a model, host models by creating SageMaker endpoints, and validate hosted models. </p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html\">How It Works</a>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateNotebookInstanceInput} createNotebookInstanceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createNotebookInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNotebookInstanceOutput}
     */
    createNotebookInstance(xAmzTarget, createNotebookInstanceInput, opts, callback) {
      opts = opts || {};
      let postBody = createNotebookInstanceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createNotebookInstance");
      }
      // verify the required parameter 'createNotebookInstanceInput' is set
      if (createNotebookInstanceInput === undefined || createNotebookInstanceInput === null) {
        throw new Error("Missing the required parameter 'createNotebookInstanceInput' when calling createNotebookInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNotebookInstanceOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateNotebookInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNotebookInstanceLifecycleConfig operation.
     * @callback module:api/DefaultApi~createNotebookInstanceLifecycleConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNotebookInstanceLifecycleConfigOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a lifecycle configuration that you can associate with a notebook instance. A <i>lifecycle configuration</i> is a collection of shell scripts that run when you create or start a notebook instance.</p> <p>Each lifecycle configuration script has a limit of 16384 characters.</p> <p>The value of the <code>$PATH</code> environment variable that is available to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p> <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p> <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.</p> <p>For information about notebook instance lifestyle configurations, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateNotebookInstanceLifecycleConfigInput} createNotebookInstanceLifecycleConfigInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createNotebookInstanceLifecycleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNotebookInstanceLifecycleConfigOutput}
     */
    createNotebookInstanceLifecycleConfig(xAmzTarget, createNotebookInstanceLifecycleConfigInput, opts, callback) {
      opts = opts || {};
      let postBody = createNotebookInstanceLifecycleConfigInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createNotebookInstanceLifecycleConfig");
      }
      // verify the required parameter 'createNotebookInstanceLifecycleConfigInput' is set
      if (createNotebookInstanceLifecycleConfigInput === undefined || createNotebookInstanceLifecycleConfigInput === null) {
        throw new Error("Missing the required parameter 'createNotebookInstanceLifecycleConfigInput' when calling createNotebookInstanceLifecycleConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNotebookInstanceLifecycleConfigOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateNotebookInstanceLifecycleConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPipeline operation.
     * @callback module:api/DefaultApi~createPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a pipeline using a JSON pipeline definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePipelineRequest} createPipelineRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePipelineResponse}
     */
    createPipeline(xAmzTarget, createPipelineRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPipelineRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPipeline");
      }
      // verify the required parameter 'createPipelineRequest' is set
      if (createPipelineRequest === undefined || createPipelineRequest === null) {
        throw new Error("Missing the required parameter 'createPipelineRequest' when calling createPipeline");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePipelineResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreatePipeline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPresignedDomainUrl operation.
     * @callback module:api/DefaultApi~createPresignedDomainUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePresignedDomainUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a URL for a specified UserProfile in a Domain. When accessed in a web browser, the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume. This operation can only be called when the authentication mode equals IAM. </p> <p>The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app.</p> <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html\">Connect to SageMaker Studio Through an Interface VPC Endpoint</a> .</p> <note> <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePresignedDomainUrlRequest} createPresignedDomainUrlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPresignedDomainUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePresignedDomainUrlResponse}
     */
    createPresignedDomainUrl(xAmzTarget, createPresignedDomainUrlRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPresignedDomainUrlRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPresignedDomainUrl");
      }
      // verify the required parameter 'createPresignedDomainUrlRequest' is set
      if (createPresignedDomainUrlRequest === undefined || createPresignedDomainUrlRequest === null) {
        throw new Error("Missing the required parameter 'createPresignedDomainUrlRequest' when calling createPresignedDomainUrl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePresignedDomainUrlResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreatePresignedDomainUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPresignedNotebookInstanceUrl operation.
     * @callback module:api/DefaultApi~createPresignedNotebookInstanceUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePresignedNotebookInstanceUrlOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose <code>Open</code> next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page.</p> <p> The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance.</p> <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the <code>aws:SourceIP</code> condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter\">Limit Access to a Notebook Instance by IP Address</a>.</p> <note> <p>The URL that you get from a call to <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreatePresignedNotebookInstanceUrl.html\">CreatePresignedNotebookInstanceUrl</a> is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePresignedNotebookInstanceUrlInput} createPresignedNotebookInstanceUrlInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPresignedNotebookInstanceUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePresignedNotebookInstanceUrlOutput}
     */
    createPresignedNotebookInstanceUrl(xAmzTarget, createPresignedNotebookInstanceUrlInput, opts, callback) {
      opts = opts || {};
      let postBody = createPresignedNotebookInstanceUrlInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPresignedNotebookInstanceUrl");
      }
      // verify the required parameter 'createPresignedNotebookInstanceUrlInput' is set
      if (createPresignedNotebookInstanceUrlInput === undefined || createPresignedNotebookInstanceUrlInput === null) {
        throw new Error("Missing the required parameter 'createPresignedNotebookInstanceUrlInput' when calling createPresignedNotebookInstanceUrl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePresignedNotebookInstanceUrlOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreatePresignedNotebookInstanceUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProcessingJob operation.
     * @callback module:api/DefaultApi~createProcessingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProcessingJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a processing job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateProcessingJobRequest} createProcessingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProcessingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProcessingJobResponse}
     */
    createProcessingJob(xAmzTarget, createProcessingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProcessingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createProcessingJob");
      }
      // verify the required parameter 'createProcessingJobRequest' is set
      if (createProcessingJobRequest === undefined || createProcessingJobRequest === null) {
        throw new Error("Missing the required parameter 'createProcessingJobRequest' when calling createProcessingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProcessingJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateProcessingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/DefaultApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProjectOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateProjectInput} createProjectInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProjectOutput}
     */
    createProject(xAmzTarget, createProjectInput, opts, callback) {
      opts = opts || {};
      let postBody = createProjectInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createProject");
      }
      // verify the required parameter 'createProjectInput' is set
      if (createProjectInput === undefined || createProjectInput === null) {
        throw new Error("Missing the required parameter 'createProjectInput' when calling createProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProjectOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSpace operation.
     * @callback module:api/DefaultApi~createSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSpaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a space used for real time collaboration in a Domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateSpaceRequest} createSpaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSpaceResponse}
     */
    createSpace(xAmzTarget, createSpaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSpaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createSpace");
      }
      // verify the required parameter 'createSpaceRequest' is set
      if (createSpaceRequest === undefined || createSpaceRequest === null) {
        throw new Error("Missing the required parameter 'createSpaceRequest' when calling createSpace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSpaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateSpace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStudioLifecycleConfig operation.
     * @callback module:api/DefaultApi~createStudioLifecycleConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStudioLifecycleConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Studio Lifecycle Configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateStudioLifecycleConfigRequest} createStudioLifecycleConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStudioLifecycleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStudioLifecycleConfigResponse}
     */
    createStudioLifecycleConfig(xAmzTarget, createStudioLifecycleConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStudioLifecycleConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createStudioLifecycleConfig");
      }
      // verify the required parameter 'createStudioLifecycleConfigRequest' is set
      if (createStudioLifecycleConfigRequest === undefined || createStudioLifecycleConfigRequest === null) {
        throw new Error("Missing the required parameter 'createStudioLifecycleConfigRequest' when calling createStudioLifecycleConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStudioLifecycleConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateStudioLifecycleConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTrainingJob operation.
     * @callback module:api/DefaultApi~createTrainingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTrainingJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts a model training job. After training completes, SageMaker saves the resulting model artifacts to an Amazon S3 location that you specify. </p> <p>If you choose to host your model using SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts in a machine learning service other than SageMaker, provided that you know how to use them for inference. </p> <p>In the request body, you provide the following: </p> <ul> <li> <p> <code>AlgorithmSpecification</code> - Identifies the training algorithm to use. </p> </li> <li> <p> <code>HyperParameters</code> - Specify these algorithm-specific parameters to enable the estimation of model parameters during training. Hyperparameters can be tuned to optimize this learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\">Algorithms</a>. </p> <important> <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p> </important> </li> <li> <p> <code>InputDataConfig</code> - Describes the input required by the training job and the Amazon S3, EFS, or FSx location where it is stored.</p> </li> <li> <p> <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you want SageMaker to save the results of model training. </p> </li> <li> <p> <code>ResourceConfig</code> - Identifies the resources, ML compute instances, and ML storage volumes to deploy for model training. In distributed training, you specify more than one instance. </p> </li> <li> <p> <code>EnableManagedSpotTraining</code> - Optimize the cost of training machine learning models by up to 80% by using Amazon EC2 Spot instances. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html\">Managed Spot Training</a>. </p> </li> <li> <p> <code>RoleArn</code> - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during model training. You must grant this role the necessary permissions so that SageMaker can successfully complete model training. </p> </li> <li> <p> <code>StoppingCondition</code> - To help cap training costs, use <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot training job has to complete. </p> </li> <li> <p> <code>Environment</code> - The environment variables to set in the Docker container.</p> </li> <li> <p> <code>RetryStrategy</code> - The number of times to retry the job when the job fails due to an <code>InternalServerError</code>.</p> </li> </ul> <p> For more information about SageMaker, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html\">How It Works</a>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTrainingJobRequest} createTrainingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTrainingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTrainingJobResponse}
     */
    createTrainingJob(xAmzTarget, createTrainingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTrainingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTrainingJob");
      }
      // verify the required parameter 'createTrainingJobRequest' is set
      if (createTrainingJobRequest === undefined || createTrainingJobRequest === null) {
        throw new Error("Missing the required parameter 'createTrainingJobRequest' when calling createTrainingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTrainingJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateTrainingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTransformJob operation.
     * @callback module:api/DefaultApi~createTransformJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTransformJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts a transform job. A transform job uses a trained model to get inferences on a dataset and saves these results to an Amazon S3 location that you specify.</p> <p>To perform batch transformations, you create a transform job and use the data that you have readily available.</p> <p>In the request body, you provide the following:</p> <ul> <li> <p> <code>TransformJobName</code> - Identifies the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.</p> </li> <li> <p> <code>ModelName</code> - Identifies the model to use. <code>ModelName</code> must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services account. For information on creating a model, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html\">CreateModel</a>.</p> </li> <li> <p> <code>TransformInput</code> - Describes the dataset to be transformed and the Amazon S3 location where it is stored.</p> </li> <li> <p> <code>TransformOutput</code> - Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.</p> </li> <li> <p> <code>TransformResources</code> - Identifies the ML compute instances for the transform job.</p> </li> </ul> <p>For more information about how batch transformation works, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html\">Batch Transform</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTransformJobRequest} createTransformJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTransformJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTransformJobResponse}
     */
    createTransformJob(xAmzTarget, createTransformJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTransformJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTransformJob");
      }
      // verify the required parameter 'createTransformJobRequest' is set
      if (createTransformJobRequest === undefined || createTransformJobRequest === null) {
        throw new Error("Missing the required parameter 'createTransformJobRequest' when calling createTransformJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransformJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateTransformJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTrial operation.
     * @callback module:api/DefaultApi~createTrialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTrialResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an SageMaker <i>trial</i>. A trial is a set of steps called <i>trial components</i> that produce a machine learning model. A trial is part of a single SageMaker <i>experiment</i>.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to a trial and then use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\">Search</a> API to search for the tags.</p> <p>To get a list of all your trials, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html\">ListTrials</a> API. To view a trial's properties, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html\">DescribeTrial</a> API. To create a trial component, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html\">CreateTrialComponent</a> API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTrialRequest} createTrialRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTrialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTrialResponse}
     */
    createTrial(xAmzTarget, createTrialRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTrialRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTrial");
      }
      // verify the required parameter 'createTrialRequest' is set
      if (createTrialRequest === undefined || createTrialRequest === null) {
        throw new Error("Missing the required parameter 'createTrialRequest' when calling createTrial");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTrialResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateTrial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTrialComponent operation.
     * @callback module:api/DefaultApi~createTrialComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTrialComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a <i>trial component</i>, which is a stage of a machine learning <i>trial</i>. A trial is composed of one or more trial components. A trial component can be used in multiple trials.</p> <p>Trial components include pre-processing jobs, training jobs, and batch transform jobs.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to a trial component and then use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\">Search</a> API to search for the tags.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTrialComponentRequest} createTrialComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTrialComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTrialComponentResponse}
     */
    createTrialComponent(xAmzTarget, createTrialComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTrialComponentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTrialComponent");
      }
      // verify the required parameter 'createTrialComponentRequest' is set
      if (createTrialComponentRequest === undefined || createTrialComponentRequest === null) {
        throw new Error("Missing the required parameter 'createTrialComponentRequest' when calling createTrialComponent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTrialComponentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateTrialComponent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserProfile operation.
     * @callback module:api/DefaultApi~createUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a \"person\" for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user's private Amazon Elastic File System (EFS) home directory. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateUserProfileRequest} createUserProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserProfileResponse}
     */
    createUserProfile(xAmzTarget, createUserProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUserProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createUserProfile");
      }
      // verify the required parameter 'createUserProfileRequest' is set
      if (createUserProfileRequest === undefined || createUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'createUserProfileRequest' when calling createUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserProfileResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateUserProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkforce operation.
     * @callback module:api/DefaultApi~createWorkforceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkforceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Use this operation to create a workforce. This operation will return an error if a workforce already exists in the Amazon Web Services Region that you specify. You can only create one workforce in each Amazon Web Services Region per Amazon Web Services account.</p> <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkforce.html\">DeleteWorkforce</a> API operation to delete the existing workforce and then use <code>CreateWorkforce</code> to create a new workforce.</p> <p>To create a private workforce using Amazon Cognito, you must specify a Cognito user pool in <code>CognitoConfig</code>. You can also create an Amazon Cognito workforce using the Amazon SageMaker console. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html\"> Create a Private Workforce (Amazon Cognito)</a>.</p> <p>To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP configuration in <code>OidcConfig</code>. Your OIDC IdP must support <i>groups</i> because groups are used by Ground Truth and Amazon A2I to create work teams. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html\"> Create a Private Workforce (OIDC IdP)</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWorkforceRequest} createWorkforceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkforceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkforceResponse}
     */
    createWorkforce(xAmzTarget, createWorkforceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkforceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWorkforce");
      }
      // verify the required parameter 'createWorkforceRequest' is set
      if (createWorkforceRequest === undefined || createWorkforceRequest === null) {
        throw new Error("Missing the required parameter 'createWorkforceRequest' when calling createWorkforce");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkforceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateWorkforce', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkteam operation.
     * @callback module:api/DefaultApi~createWorkteamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkteamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new work team for labeling your data. A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team.</p> <p>You cannot create more than 25 work teams in an account and region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWorkteamRequest} createWorkteamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkteamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkteamResponse}
     */
    createWorkteam(xAmzTarget, createWorkteamRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkteamRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWorkteam");
      }
      // verify the required parameter 'createWorkteamRequest' is set
      if (createWorkteamRequest === undefined || createWorkteamRequest === null) {
        throw new Error("Missing the required parameter 'createWorkteamRequest' when calling createWorkteam");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkteamResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.CreateWorkteam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAction operation.
     * @callback module:api/DefaultApi~deleteActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an action.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteActionRequest} deleteActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteActionResponse}
     */
    deleteAction(xAmzTarget, deleteActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteActionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAction");
      }
      // verify the required parameter 'deleteActionRequest' is set
      if (deleteActionRequest === undefined || deleteActionRequest === null) {
        throw new Error("Missing the required parameter 'deleteActionRequest' when calling deleteAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteActionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlgorithm operation.
     * @callback module:api/DefaultApi~deleteAlgorithmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified algorithm from your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAlgorithmInput} deleteAlgorithmInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAlgorithmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAlgorithm(xAmzTarget, deleteAlgorithmInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteAlgorithmInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAlgorithm");
      }
      // verify the required parameter 'deleteAlgorithmInput' is set
      if (deleteAlgorithmInput === undefined || deleteAlgorithmInput === null) {
        throw new Error("Missing the required parameter 'deleteAlgorithmInput' when calling deleteAlgorithm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteAlgorithm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/DefaultApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to stop and delete an app.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAppRequest} deleteAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApp(xAmzTarget, deleteAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAppRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApp");
      }
      // verify the required parameter 'deleteAppRequest' is set
      if (deleteAppRequest === undefined || deleteAppRequest === null) {
        throw new Error("Missing the required parameter 'deleteAppRequest' when calling deleteApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppImageConfig operation.
     * @callback module:api/DefaultApi~deleteAppImageConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an AppImageConfig.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAppImageConfigRequest} deleteAppImageConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppImageConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAppImageConfig(xAmzTarget, deleteAppImageConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAppImageConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAppImageConfig");
      }
      // verify the required parameter 'deleteAppImageConfigRequest' is set
      if (deleteAppImageConfigRequest === undefined || deleteAppImageConfigRequest === null) {
        throw new Error("Missing the required parameter 'deleteAppImageConfigRequest' when calling deleteAppImageConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteAppImageConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArtifact operation.
     * @callback module:api/DefaultApi~deleteArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteArtifactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an artifact. Either <code>ArtifactArn</code> or <code>Source</code> must be specified.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteArtifactRequest} deleteArtifactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteArtifactResponse}
     */
    deleteArtifact(xAmzTarget, deleteArtifactRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteArtifactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteArtifact");
      }
      // verify the required parameter 'deleteArtifactRequest' is set
      if (deleteArtifactRequest === undefined || deleteArtifactRequest === null) {
        throw new Error("Missing the required parameter 'deleteArtifactRequest' when calling deleteArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteArtifactResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssociation operation.
     * @callback module:api/DefaultApi~deleteAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an association.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAssociationRequest} deleteAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAssociationResponse}
     */
    deleteAssociation(xAmzTarget, deleteAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAssociationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAssociation");
      }
      // verify the required parameter 'deleteAssociationRequest' is set
      if (deleteAssociationRequest === undefined || deleteAssociationRequest === null) {
        throw new Error("Missing the required parameter 'deleteAssociationRequest' when calling deleteAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAssociationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteAssociation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCodeRepository operation.
     * @callback module:api/DefaultApi~deleteCodeRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Git repository from your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteCodeRepositoryInput} deleteCodeRepositoryInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCodeRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCodeRepository(xAmzTarget, deleteCodeRepositoryInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteCodeRepositoryInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteCodeRepository");
      }
      // verify the required parameter 'deleteCodeRepositoryInput' is set
      if (deleteCodeRepositoryInput === undefined || deleteCodeRepositoryInput === null) {
        throw new Error("Missing the required parameter 'deleteCodeRepositoryInput' when calling deleteCodeRepository");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteCodeRepository', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContext operation.
     * @callback module:api/DefaultApi~deleteContextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an context.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteContextRequest} deleteContextRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteContextResponse}
     */
    deleteContext(xAmzTarget, deleteContextRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteContextRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteContext");
      }
      // verify the required parameter 'deleteContextRequest' is set
      if (deleteContextRequest === undefined || deleteContextRequest === null) {
        throw new Error("Missing the required parameter 'deleteContextRequest' when calling deleteContext");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteContextResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteContext', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataQualityJobDefinition operation.
     * @callback module:api/DefaultApi~deleteDataQualityJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a data quality monitoring job definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDataQualityJobDefinitionRequest} deleteDataQualityJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDataQualityJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDataQualityJobDefinition(xAmzTarget, deleteDataQualityJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDataQualityJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDataQualityJobDefinition");
      }
      // verify the required parameter 'deleteDataQualityJobDefinitionRequest' is set
      if (deleteDataQualityJobDefinitionRequest === undefined || deleteDataQualityJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'deleteDataQualityJobDefinitionRequest' when calling deleteDataQualityJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteDataQualityJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceFleet operation.
     * @callback module:api/DefaultApi~deleteDeviceFleetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDeviceFleetRequest} deleteDeviceFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDeviceFleetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeviceFleet(xAmzTarget, deleteDeviceFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDeviceFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDeviceFleet");
      }
      // verify the required parameter 'deleteDeviceFleetRequest' is set
      if (deleteDeviceFleetRequest === undefined || deleteDeviceFleetRequest === null) {
        throw new Error("Missing the required parameter 'deleteDeviceFleetRequest' when calling deleteDeviceFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteDeviceFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomain operation.
     * @callback module:api/DefaultApi~deleteDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to delete a domain. If you onboarded with IAM mode, you will need to delete your domain to onboard again using IAM Identity Center. Use with caution. All of the members of the domain will lose access to their EFS volume, including data, notebooks, and other artifacts. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDomainRequest} deleteDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDomain(xAmzTarget, deleteDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDomain");
      }
      // verify the required parameter 'deleteDomainRequest' is set
      if (deleteDomainRequest === undefined || deleteDomainRequest === null) {
        throw new Error("Missing the required parameter 'deleteDomainRequest' when calling deleteDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEdgeDeploymentPlan operation.
     * @callback module:api/DefaultApi~deleteEdgeDeploymentPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteEdgeDeploymentPlanRequest} deleteEdgeDeploymentPlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEdgeDeploymentPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEdgeDeploymentPlan(xAmzTarget, deleteEdgeDeploymentPlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteEdgeDeploymentPlanRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteEdgeDeploymentPlan");
      }
      // verify the required parameter 'deleteEdgeDeploymentPlanRequest' is set
      if (deleteEdgeDeploymentPlanRequest === undefined || deleteEdgeDeploymentPlanRequest === null) {
        throw new Error("Missing the required parameter 'deleteEdgeDeploymentPlanRequest' when calling deleteEdgeDeploymentPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteEdgeDeploymentPlan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEdgeDeploymentStage operation.
     * @callback module:api/DefaultApi~deleteEdgeDeploymentStageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stage in an edge deployment plan if (and only if) the stage is inactive.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteEdgeDeploymentStageRequest} deleteEdgeDeploymentStageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEdgeDeploymentStageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEdgeDeploymentStage(xAmzTarget, deleteEdgeDeploymentStageRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteEdgeDeploymentStageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteEdgeDeploymentStage");
      }
      // verify the required parameter 'deleteEdgeDeploymentStageRequest' is set
      if (deleteEdgeDeploymentStageRequest === undefined || deleteEdgeDeploymentStageRequest === null) {
        throw new Error("Missing the required parameter 'deleteEdgeDeploymentStageRequest' when calling deleteEdgeDeploymentStage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteEdgeDeploymentStage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEndpoint operation.
     * @callback module:api/DefaultApi~deleteEndpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the endpoint was created. </p> <p>SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't need to use the <a href=\"http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html\">RevokeGrant</a> API call.</p> <p>When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants. You might still see these resources in your account for a few minutes after deleting your endpoint. Do not delete or revoke the permissions for your <code> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn\">ExecutionRoleArn</a> </code>, otherwise SageMaker cannot delete these resources.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteEndpointInput} deleteEndpointInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEndpoint(xAmzTarget, deleteEndpointInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteEndpointInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteEndpoint");
      }
      // verify the required parameter 'deleteEndpointInput' is set
      if (deleteEndpointInput === undefined || deleteEndpointInput === null) {
        throw new Error("Missing the required parameter 'deleteEndpointInput' when calling deleteEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEndpointConfig operation.
     * @callback module:api/DefaultApi~deleteEndpointConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API deletes only the specified configuration. It does not delete endpoints created using the configuration. </p> <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteEndpointConfigInput} deleteEndpointConfigInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEndpointConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEndpointConfig(xAmzTarget, deleteEndpointConfigInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteEndpointConfigInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteEndpointConfig");
      }
      // verify the required parameter 'deleteEndpointConfigInput' is set
      if (deleteEndpointConfigInput === undefined || deleteEndpointConfigInput === null) {
        throw new Error("Missing the required parameter 'deleteEndpointConfigInput' when calling deleteEndpointConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteEndpointConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback module:api/DefaultApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an SageMaker experiment. All trials associated with the experiment must be deleted first. Use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html\">ListTrials</a> API to get a list of the trials associated with the experiment.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteExperimentRequest} deleteExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteExperimentResponse}
     */
    deleteExperiment(xAmzTarget, deleteExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteExperiment");
      }
      // verify the required parameter 'deleteExperimentRequest' is set
      if (deleteExperimentRequest === undefined || deleteExperimentRequest === null) {
        throw new Error("Missing the required parameter 'deleteExperimentRequest' when calling deleteExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeatureGroup operation.
     * @callback module:api/DefaultApi~deleteFeatureGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete the <code>FeatureGroup</code> and any data that was written to the <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be accessed from the <code>OnlineStore</code> immediately after <code>DeleteFeatureGroup</code> is called. </p> <p>Data written into the <code>OfflineStore</code> will not be deleted. The Amazon Web Services Glue database and tables that are automatically created for your <code>OfflineStore</code> are not deleted. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFeatureGroupRequest} deleteFeatureGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFeatureGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFeatureGroup(xAmzTarget, deleteFeatureGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFeatureGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFeatureGroup");
      }
      // verify the required parameter 'deleteFeatureGroupRequest' is set
      if (deleteFeatureGroupRequest === undefined || deleteFeatureGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteFeatureGroupRequest' when calling deleteFeatureGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteFeatureGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlowDefinition operation.
     * @callback module:api/DefaultApi~deleteFlowDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified flow definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFlowDefinitionRequest} deleteFlowDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFlowDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteFlowDefinition(xAmzTarget, deleteFlowDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFlowDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFlowDefinition");
      }
      // verify the required parameter 'deleteFlowDefinitionRequest' is set
      if (deleteFlowDefinitionRequest === undefined || deleteFlowDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'deleteFlowDefinitionRequest' when calling deleteFlowDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteFlowDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHub operation.
     * @callback module:api/DefaultApi~deleteHubCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteHubRequest} deleteHubRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteHubCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHub(xAmzTarget, deleteHubRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteHubRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteHub");
      }
      // verify the required parameter 'deleteHubRequest' is set
      if (deleteHubRequest === undefined || deleteHubRequest === null) {
        throw new Error("Missing the required parameter 'deleteHubRequest' when calling deleteHub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteHub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHubContent operation.
     * @callback module:api/DefaultApi~deleteHubContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete the contents of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteHubContentRequest} deleteHubContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteHubContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHubContent(xAmzTarget, deleteHubContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteHubContentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteHubContent");
      }
      // verify the required parameter 'deleteHubContentRequest' is set
      if (deleteHubContentRequest === undefined || deleteHubContentRequest === null) {
        throw new Error("Missing the required parameter 'deleteHubContentRequest' when calling deleteHubContent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteHubContent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHumanTaskUi operation.
     * @callback module:api/DefaultApi~deleteHumanTaskUiCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Use this operation to delete a human task user interface (worker task template).</p> <p> To see a list of human task user interfaces (work task templates) in your account, use <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListHumanTaskUis.html\">ListHumanTaskUis</a>. When you delete a worker task template, it no longer appears when you call <code>ListHumanTaskUis</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteHumanTaskUiRequest} deleteHumanTaskUiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteHumanTaskUiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteHumanTaskUi(xAmzTarget, deleteHumanTaskUiRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteHumanTaskUiRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteHumanTaskUi");
      }
      // verify the required parameter 'deleteHumanTaskUiRequest' is set
      if (deleteHumanTaskUiRequest === undefined || deleteHumanTaskUiRequest === null) {
        throw new Error("Missing the required parameter 'deleteHumanTaskUiRequest' when calling deleteHumanTaskUi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteHumanTaskUi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImage operation.
     * @callback module:api/DefaultApi~deleteImageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a SageMaker image and all versions of the image. The container images aren't deleted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteImageRequest} deleteImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteImage(xAmzTarget, deleteImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteImage");
      }
      // verify the required parameter 'deleteImageRequest' is set
      if (deleteImageRequest === undefined || deleteImageRequest === null) {
        throw new Error("Missing the required parameter 'deleteImageRequest' when calling deleteImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageVersion operation.
     * @callback module:api/DefaultApi~deleteImageVersionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a version of a SageMaker image. The container image the version represents isn't deleted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteImageVersionRequest} deleteImageVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteImageVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteImageVersion(xAmzTarget, deleteImageVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteImageVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteImageVersion");
      }
      // verify the required parameter 'deleteImageVersionRequest' is set
      if (deleteImageVersionRequest === undefined || deleteImageVersionRequest === null) {
        throw new Error("Missing the required parameter 'deleteImageVersionRequest' when calling deleteImageVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteImageVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInferenceExperiment operation.
     * @callback module:api/DefaultApi~deleteInferenceExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteInferenceExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an inference experiment.</p> <note> <p> This operation does not delete your endpoint, variants, or any underlying resources. This operation only deletes the metadata of your experiment. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteInferenceExperimentRequest} deleteInferenceExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInferenceExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteInferenceExperimentResponse}
     */
    deleteInferenceExperiment(xAmzTarget, deleteInferenceExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteInferenceExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteInferenceExperiment");
      }
      // verify the required parameter 'deleteInferenceExperimentRequest' is set
      if (deleteInferenceExperimentRequest === undefined || deleteInferenceExperimentRequest === null) {
        throw new Error("Missing the required parameter 'deleteInferenceExperimentRequest' when calling deleteInferenceExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteInferenceExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteInferenceExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModel operation.
     * @callback module:api/DefaultApi~deleteModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a model. The <code>DeleteModel</code> API deletes only the model entry that was created in SageMaker when you called the <code>CreateModel</code> API. It does not delete model artifacts, inference code, or the IAM role that you specified when creating the model. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteModelInput} deleteModelInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModel(xAmzTarget, deleteModelInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteModelInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteModel");
      }
      // verify the required parameter 'deleteModelInput' is set
      if (deleteModelInput === undefined || deleteModelInput === null) {
        throw new Error("Missing the required parameter 'deleteModelInput' when calling deleteModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelBiasJobDefinition operation.
     * @callback module:api/DefaultApi~deleteModelBiasJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon SageMaker model bias job definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteModelBiasJobDefinitionRequest} deleteModelBiasJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelBiasJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModelBiasJobDefinition(xAmzTarget, deleteModelBiasJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteModelBiasJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteModelBiasJobDefinition");
      }
      // verify the required parameter 'deleteModelBiasJobDefinitionRequest' is set
      if (deleteModelBiasJobDefinitionRequest === undefined || deleteModelBiasJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'deleteModelBiasJobDefinitionRequest' when calling deleteModelBiasJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteModelBiasJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelCard operation.
     * @callback module:api/DefaultApi~deleteModelCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon SageMaker Model Card.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteModelCardRequest} deleteModelCardRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModelCard(xAmzTarget, deleteModelCardRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteModelCardRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteModelCard");
      }
      // verify the required parameter 'deleteModelCardRequest' is set
      if (deleteModelCardRequest === undefined || deleteModelCardRequest === null) {
        throw new Error("Missing the required parameter 'deleteModelCardRequest' when calling deleteModelCard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteModelCard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelExplainabilityJobDefinition operation.
     * @callback module:api/DefaultApi~deleteModelExplainabilityJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon SageMaker model explainability job definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteModelExplainabilityJobDefinitionRequest} deleteModelExplainabilityJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelExplainabilityJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModelExplainabilityJobDefinition(xAmzTarget, deleteModelExplainabilityJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteModelExplainabilityJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteModelExplainabilityJobDefinition");
      }
      // verify the required parameter 'deleteModelExplainabilityJobDefinitionRequest' is set
      if (deleteModelExplainabilityJobDefinitionRequest === undefined || deleteModelExplainabilityJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'deleteModelExplainabilityJobDefinitionRequest' when calling deleteModelExplainabilityJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteModelExplainabilityJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelPackage operation.
     * @callback module:api/DefaultApi~deleteModelPackageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a model package.</p> <p>A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteModelPackageInput} deleteModelPackageInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelPackageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModelPackage(xAmzTarget, deleteModelPackageInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteModelPackageInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteModelPackage");
      }
      // verify the required parameter 'deleteModelPackageInput' is set
      if (deleteModelPackageInput === undefined || deleteModelPackageInput === null) {
        throw new Error("Missing the required parameter 'deleteModelPackageInput' when calling deleteModelPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteModelPackage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelPackageGroup operation.
     * @callback module:api/DefaultApi~deleteModelPackageGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified model group.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteModelPackageGroupInput} deleteModelPackageGroupInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelPackageGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModelPackageGroup(xAmzTarget, deleteModelPackageGroupInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteModelPackageGroupInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteModelPackageGroup");
      }
      // verify the required parameter 'deleteModelPackageGroupInput' is set
      if (deleteModelPackageGroupInput === undefined || deleteModelPackageGroupInput === null) {
        throw new Error("Missing the required parameter 'deleteModelPackageGroupInput' when calling deleteModelPackageGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteModelPackageGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelPackageGroupPolicy operation.
     * @callback module:api/DefaultApi~deleteModelPackageGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a model group resource policy.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteModelPackageGroupPolicyInput} deleteModelPackageGroupPolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelPackageGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModelPackageGroupPolicy(xAmzTarget, deleteModelPackageGroupPolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteModelPackageGroupPolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteModelPackageGroupPolicy");
      }
      // verify the required parameter 'deleteModelPackageGroupPolicyInput' is set
      if (deleteModelPackageGroupPolicyInput === undefined || deleteModelPackageGroupPolicyInput === null) {
        throw new Error("Missing the required parameter 'deleteModelPackageGroupPolicyInput' when calling deleteModelPackageGroupPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteModelPackageGroupPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelQualityJobDefinition operation.
     * @callback module:api/DefaultApi~deleteModelQualityJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the secified model quality monitoring job definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteModelQualityJobDefinitionRequest} deleteModelQualityJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelQualityJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModelQualityJobDefinition(xAmzTarget, deleteModelQualityJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteModelQualityJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteModelQualityJobDefinition");
      }
      // verify the required parameter 'deleteModelQualityJobDefinitionRequest' is set
      if (deleteModelQualityJobDefinitionRequest === undefined || deleteModelQualityJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'deleteModelQualityJobDefinitionRequest' when calling deleteModelQualityJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteModelQualityJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMonitoringSchedule operation.
     * @callback module:api/DefaultApi~deleteMonitoringScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a monitoring schedule. Also stops the schedule had not already been stopped. This does not delete the job execution history of the monitoring schedule. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteMonitoringScheduleRequest} deleteMonitoringScheduleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMonitoringScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMonitoringSchedule(xAmzTarget, deleteMonitoringScheduleRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteMonitoringScheduleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteMonitoringSchedule");
      }
      // verify the required parameter 'deleteMonitoringScheduleRequest' is set
      if (deleteMonitoringScheduleRequest === undefined || deleteMonitoringScheduleRequest === null) {
        throw new Error("Missing the required parameter 'deleteMonitoringScheduleRequest' when calling deleteMonitoringSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteMonitoringSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotebookInstance operation.
     * @callback module:api/DefaultApi~deleteNotebookInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you must call the <code>StopNotebookInstance</code> API. </p> <important> <p>When you delete a notebook instance, you lose all of your data. SageMaker removes the ML compute instance, and deletes the ML storage volume and the network interface associated with the notebook instance. </p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteNotebookInstanceInput} deleteNotebookInstanceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteNotebookInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNotebookInstance(xAmzTarget, deleteNotebookInstanceInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteNotebookInstanceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteNotebookInstance");
      }
      // verify the required parameter 'deleteNotebookInstanceInput' is set
      if (deleteNotebookInstanceInput === undefined || deleteNotebookInstanceInput === null) {
        throw new Error("Missing the required parameter 'deleteNotebookInstanceInput' when calling deleteNotebookInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteNotebookInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotebookInstanceLifecycleConfig operation.
     * @callback module:api/DefaultApi~deleteNotebookInstanceLifecycleConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a notebook instance lifecycle configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteNotebookInstanceLifecycleConfigInput} deleteNotebookInstanceLifecycleConfigInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteNotebookInstanceLifecycleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNotebookInstanceLifecycleConfig(xAmzTarget, deleteNotebookInstanceLifecycleConfigInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteNotebookInstanceLifecycleConfigInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteNotebookInstanceLifecycleConfig");
      }
      // verify the required parameter 'deleteNotebookInstanceLifecycleConfigInput' is set
      if (deleteNotebookInstanceLifecycleConfigInput === undefined || deleteNotebookInstanceLifecycleConfigInput === null) {
        throw new Error("Missing the required parameter 'deleteNotebookInstanceLifecycleConfigInput' when calling deleteNotebookInstanceLifecycleConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteNotebookInstanceLifecycleConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePipeline operation.
     * @callback module:api/DefaultApi~deletePipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pipeline if there are no running instances of the pipeline. To delete a pipeline, you must stop all running instances of the pipeline using the <code>StopPipelineExecution</code> API. When you delete a pipeline, all instances of the pipeline are deleted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePipelineRequest} deletePipelineRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePipelineResponse}
     */
    deletePipeline(xAmzTarget, deletePipelineRequest, opts, callback) {
      opts = opts || {};
      let postBody = deletePipelineRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePipeline");
      }
      // verify the required parameter 'deletePipelineRequest' is set
      if (deletePipelineRequest === undefined || deletePipelineRequest === null) {
        throw new Error("Missing the required parameter 'deletePipelineRequest' when calling deletePipeline");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeletePipelineResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeletePipeline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/DefaultApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteProjectInput} deleteProjectInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProject(xAmzTarget, deleteProjectInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteProjectInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteProject");
      }
      // verify the required parameter 'deleteProjectInput' is set
      if (deleteProjectInput === undefined || deleteProjectInput === null) {
        throw new Error("Missing the required parameter 'deleteProjectInput' when calling deleteProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpace operation.
     * @callback module:api/DefaultApi~deleteSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to delete a space.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSpaceRequest} deleteSpaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSpace(xAmzTarget, deleteSpaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSpaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSpace");
      }
      // verify the required parameter 'deleteSpaceRequest' is set
      if (deleteSpaceRequest === undefined || deleteSpaceRequest === null) {
        throw new Error("Missing the required parameter 'deleteSpaceRequest' when calling deleteSpace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteSpace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStudioLifecycleConfig operation.
     * @callback module:api/DefaultApi~deleteStudioLifecycleConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteStudioLifecycleConfigRequest} deleteStudioLifecycleConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteStudioLifecycleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStudioLifecycleConfig(xAmzTarget, deleteStudioLifecycleConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteStudioLifecycleConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteStudioLifecycleConfig");
      }
      // verify the required parameter 'deleteStudioLifecycleConfigRequest' is set
      if (deleteStudioLifecycleConfigRequest === undefined || deleteStudioLifecycleConfigRequest === null) {
        throw new Error("Missing the required parameter 'deleteStudioLifecycleConfigRequest' when calling deleteStudioLifecycleConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteStudioLifecycleConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTags operation.
     * @callback module:api/DefaultApi~deleteTagsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified tags from an SageMaker resource.</p> <p>To list a resource's tags, use the <code>ListTags</code> API. </p> <note> <p>When you call this API to delete tags from a hyperparameter tuning job, the deleted tags are not removed from training jobs that the hyperparameter tuning job launched before you called this API.</p> </note> <note> <p>When you call this API to delete tags from a SageMaker Studio Domain or User Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain or User Profile launched before you called this API.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTagsInput} deleteTagsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTags(xAmzTarget, deleteTagsInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteTagsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTags");
      }
      // verify the required parameter 'deleteTagsInput' is set
      if (deleteTagsInput === undefined || deleteTagsInput === null) {
        throw new Error("Missing the required parameter 'deleteTagsInput' when calling deleteTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrial operation.
     * @callback module:api/DefaultApi~deleteTrialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteTrialResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified trial. All trial components that make up the trial must be deleted first. Use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html\">DescribeTrialComponent</a> API to get the list of trial components.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTrialRequest} deleteTrialRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTrialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteTrialResponse}
     */
    deleteTrial(xAmzTarget, deleteTrialRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTrialRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTrial");
      }
      // verify the required parameter 'deleteTrialRequest' is set
      if (deleteTrialRequest === undefined || deleteTrialRequest === null) {
        throw new Error("Missing the required parameter 'deleteTrialRequest' when calling deleteTrial");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteTrialResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteTrial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrialComponent operation.
     * @callback module:api/DefaultApi~deleteTrialComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteTrialComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified trial component. A trial component must be disassociated from all trials before the trial component can be deleted. To disassociate a trial component from a trial, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html\">DisassociateTrialComponent</a> API.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTrialComponentRequest} deleteTrialComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTrialComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteTrialComponentResponse}
     */
    deleteTrialComponent(xAmzTarget, deleteTrialComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTrialComponentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTrialComponent");
      }
      // verify the required parameter 'deleteTrialComponentRequest' is set
      if (deleteTrialComponentRequest === undefined || deleteTrialComponentRequest === null) {
        throw new Error("Missing the required parameter 'deleteTrialComponentRequest' when calling deleteTrialComponent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteTrialComponentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteTrialComponent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserProfile operation.
     * @callback module:api/DefaultApi~deleteUserProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user profile. When a user profile is deleted, the user loses access to their EFS volume, including data, notebooks, and other artifacts.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteUserProfileRequest} deleteUserProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserProfile(xAmzTarget, deleteUserProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteUserProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteUserProfile");
      }
      // verify the required parameter 'deleteUserProfileRequest' is set
      if (deleteUserProfileRequest === undefined || deleteUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'deleteUserProfileRequest' when calling deleteUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteUserProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkforce operation.
     * @callback module:api/DefaultApi~deleteWorkforceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Use this operation to delete a workforce.</p> <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use this operation to delete the existing workforce and then use <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateWorkforce.html\">CreateWorkforce</a> to create a new workforce.</p> <important> <p>If a private workforce contains one or more work teams, you must use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html\">DeleteWorkteam</a> operation to delete all work teams before you delete the workforce. If you try to delete a workforce that contains one or more work teams, you will recieve a <code>ResourceInUse</code> error.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWorkforceRequest} deleteWorkforceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorkforceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWorkforce(xAmzTarget, deleteWorkforceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWorkforceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWorkforce");
      }
      // verify the required parameter 'deleteWorkforceRequest' is set
      if (deleteWorkforceRequest === undefined || deleteWorkforceRequest === null) {
        throw new Error("Missing the required parameter 'deleteWorkforceRequest' when calling deleteWorkforce");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteWorkforce', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkteam operation.
     * @callback module:api/DefaultApi~deleteWorkteamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteWorkteamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing work team. This operation can't be undone.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWorkteamRequest} deleteWorkteamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorkteamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteWorkteamResponse}
     */
    deleteWorkteam(xAmzTarget, deleteWorkteamRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWorkteamRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWorkteam");
      }
      // verify the required parameter 'deleteWorkteamRequest' is set
      if (deleteWorkteamRequest === undefined || deleteWorkteamRequest === null) {
        throw new Error("Missing the required parameter 'deleteWorkteamRequest' when calling deleteWorkteam");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteWorkteamResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeleteWorkteam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterDevices operation.
     * @callback module:api/DefaultApi~deregisterDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeregisterDevicesRequest} deregisterDevicesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deregisterDevices(xAmzTarget, deregisterDevicesRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterDevicesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deregisterDevices");
      }
      // verify the required parameter 'deregisterDevicesRequest' is set
      if (deregisterDevicesRequest === undefined || deregisterDevicesRequest === null) {
        throw new Error("Missing the required parameter 'deregisterDevicesRequest' when calling deregisterDevices");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DeregisterDevices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAction operation.
     * @callback module:api/DefaultApi~describeActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an action.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeActionRequest} describeActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeActionResponse}
     */
    describeAction(xAmzTarget, describeActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeActionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAction");
      }
      // verify the required parameter 'describeActionRequest' is set
      if (describeActionRequest === undefined || describeActionRequest === null) {
        throw new Error("Missing the required parameter 'describeActionRequest' when calling describeAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeActionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAlgorithm operation.
     * @callback module:api/DefaultApi~describeAlgorithmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAlgorithmOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a description of the specified algorithm that is in your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAlgorithmInput} describeAlgorithmInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAlgorithmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAlgorithmOutput}
     */
    describeAlgorithm(xAmzTarget, describeAlgorithmInput, opts, callback) {
      opts = opts || {};
      let postBody = describeAlgorithmInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAlgorithm");
      }
      // verify the required parameter 'describeAlgorithmInput' is set
      if (describeAlgorithmInput === undefined || describeAlgorithmInput === null) {
        throw new Error("Missing the required parameter 'describeAlgorithmInput' when calling describeAlgorithm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAlgorithmOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeAlgorithm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeApp operation.
     * @callback module:api/DefaultApi~describeAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the app.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAppRequest} describeAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppResponse}
     */
    describeApp(xAmzTarget, describeAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAppRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeApp");
      }
      // verify the required parameter 'describeAppRequest' is set
      if (describeAppRequest === undefined || describeAppRequest === null) {
        throw new Error("Missing the required parameter 'describeAppRequest' when calling describeApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAppResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAppImageConfig operation.
     * @callback module:api/DefaultApi~describeAppImageConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppImageConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an AppImageConfig.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAppImageConfigRequest} describeAppImageConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAppImageConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppImageConfigResponse}
     */
    describeAppImageConfig(xAmzTarget, describeAppImageConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAppImageConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAppImageConfig");
      }
      // verify the required parameter 'describeAppImageConfigRequest' is set
      if (describeAppImageConfigRequest === undefined || describeAppImageConfigRequest === null) {
        throw new Error("Missing the required parameter 'describeAppImageConfigRequest' when calling describeAppImageConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAppImageConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeAppImageConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeArtifact operation.
     * @callback module:api/DefaultApi~describeArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeArtifactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an artifact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeArtifactRequest} describeArtifactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeArtifactResponse}
     */
    describeArtifact(xAmzTarget, describeArtifactRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeArtifactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeArtifact");
      }
      // verify the required parameter 'describeArtifactRequest' is set
      if (describeArtifactRequest === undefined || describeArtifactRequest === null) {
        throw new Error("Missing the required parameter 'describeArtifactRequest' when calling describeArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeArtifactResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAutoMLJob operation.
     * @callback module:api/DefaultApi~describeAutoMLJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAutoMLJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about an AutoML job created by calling <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html\">CreateAutoMLJob</a>.</p> <note> <p>AutoML jobs created by calling <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\">CreateAutoMLJobV2</a> cannot be described by <code>DescribeAutoMLJob</code>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAutoMLJobRequest} describeAutoMLJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAutoMLJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAutoMLJobResponse}
     */
    describeAutoMLJob(xAmzTarget, describeAutoMLJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAutoMLJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAutoMLJob");
      }
      // verify the required parameter 'describeAutoMLJobRequest' is set
      if (describeAutoMLJobRequest === undefined || describeAutoMLJobRequest === null) {
        throw new Error("Missing the required parameter 'describeAutoMLJobRequest' when calling describeAutoMLJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAutoMLJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeAutoMLJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAutoMLJobV2 operation.
     * @callback module:api/DefaultApi~describeAutoMLJobV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAutoMLJobV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about an AutoML job created by calling <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\">CreateAutoMLJobV2</a> or <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html\">CreateAutoMLJob</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAutoMLJobV2Request} describeAutoMLJobV2Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAutoMLJobV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAutoMLJobV2Response}
     */
    describeAutoMLJobV2(xAmzTarget, describeAutoMLJobV2Request, opts, callback) {
      opts = opts || {};
      let postBody = describeAutoMLJobV2Request;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAutoMLJobV2");
      }
      // verify the required parameter 'describeAutoMLJobV2Request' is set
      if (describeAutoMLJobV2Request === undefined || describeAutoMLJobV2Request === null) {
        throw new Error("Missing the required parameter 'describeAutoMLJobV2Request' when calling describeAutoMLJobV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAutoMLJobV2Response;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeAutoMLJobV2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCodeRepository operation.
     * @callback module:api/DefaultApi~describeCodeRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeCodeRepositoryOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about the specified Git repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeCodeRepositoryInput} describeCodeRepositoryInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeCodeRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeCodeRepositoryOutput}
     */
    describeCodeRepository(xAmzTarget, describeCodeRepositoryInput, opts, callback) {
      opts = opts || {};
      let postBody = describeCodeRepositoryInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeCodeRepository");
      }
      // verify the required parameter 'describeCodeRepositoryInput' is set
      if (describeCodeRepositoryInput === undefined || describeCodeRepositoryInput === null) {
        throw new Error("Missing the required parameter 'describeCodeRepositoryInput' when calling describeCodeRepository");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeCodeRepositoryOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeCodeRepository', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCompilationJob operation.
     * @callback module:api/DefaultApi~describeCompilationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeCompilationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about a model compilation job.</p> <p>To create a model compilation job, use <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html\">CreateCompilationJob</a>. To get information about multiple model compilation jobs, use <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html\">ListCompilationJobs</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeCompilationJobRequest} describeCompilationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeCompilationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeCompilationJobResponse}
     */
    describeCompilationJob(xAmzTarget, describeCompilationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeCompilationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeCompilationJob");
      }
      // verify the required parameter 'describeCompilationJobRequest' is set
      if (describeCompilationJobRequest === undefined || describeCompilationJobRequest === null) {
        throw new Error("Missing the required parameter 'describeCompilationJobRequest' when calling describeCompilationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeCompilationJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeCompilationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeContext operation.
     * @callback module:api/DefaultApi~describeContextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a context.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeContextRequest} describeContextRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeContextResponse}
     */
    describeContext(xAmzTarget, describeContextRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeContextRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeContext");
      }
      // verify the required parameter 'describeContextRequest' is set
      if (describeContextRequest === undefined || describeContextRequest === null) {
        throw new Error("Missing the required parameter 'describeContextRequest' when calling describeContext");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeContextResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeContext', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDataQualityJobDefinition operation.
     * @callback module:api/DefaultApi~describeDataQualityJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataQualityJobDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a data quality monitoring job definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDataQualityJobDefinitionRequest} describeDataQualityJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDataQualityJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataQualityJobDefinitionResponse}
     */
    describeDataQualityJobDefinition(xAmzTarget, describeDataQualityJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDataQualityJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDataQualityJobDefinition");
      }
      // verify the required parameter 'describeDataQualityJobDefinitionRequest' is set
      if (describeDataQualityJobDefinitionRequest === undefined || describeDataQualityJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'describeDataQualityJobDefinitionRequest' when calling describeDataQualityJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDataQualityJobDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeDataQualityJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDevice operation.
     * @callback module:api/DefaultApi~describeDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the device.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDeviceRequest} describeDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDeviceResponse}
     */
    describeDevice(xAmzTarget, describeDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDeviceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDevice");
      }
      // verify the required parameter 'describeDeviceRequest' is set
      if (describeDeviceRequest === undefined || describeDeviceRequest === null) {
        throw new Error("Missing the required parameter 'describeDeviceRequest' when calling describeDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDeviceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeDevice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDeviceFleet operation.
     * @callback module:api/DefaultApi~describeDeviceFleetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDeviceFleetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A description of the fleet the device belongs to.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDeviceFleetRequest} describeDeviceFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDeviceFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDeviceFleetResponse}
     */
    describeDeviceFleet(xAmzTarget, describeDeviceFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDeviceFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDeviceFleet");
      }
      // verify the required parameter 'describeDeviceFleetRequest' is set
      if (describeDeviceFleetRequest === undefined || describeDeviceFleetRequest === null) {
        throw new Error("Missing the required parameter 'describeDeviceFleetRequest' when calling describeDeviceFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDeviceFleetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeDeviceFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomain operation.
     * @callback module:api/DefaultApi~describeDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The description of the domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDomainRequest} describeDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainResponse}
     */
    describeDomain(xAmzTarget, describeDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDomain");
      }
      // verify the required parameter 'describeDomainRequest' is set
      if (describeDomainRequest === undefined || describeDomainRequest === null) {
        throw new Error("Missing the required parameter 'describeDomainRequest' when calling describeDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEdgeDeploymentPlan operation.
     * @callback module:api/DefaultApi~describeEdgeDeploymentPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEdgeDeploymentPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an edge deployment plan with deployment status per stage.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEdgeDeploymentPlanRequest} describeEdgeDeploymentPlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeEdgeDeploymentPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEdgeDeploymentPlanResponse}
     */
    describeEdgeDeploymentPlan(xAmzTarget, describeEdgeDeploymentPlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeEdgeDeploymentPlanRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEdgeDeploymentPlan");
      }
      // verify the required parameter 'describeEdgeDeploymentPlanRequest' is set
      if (describeEdgeDeploymentPlanRequest === undefined || describeEdgeDeploymentPlanRequest === null) {
        throw new Error("Missing the required parameter 'describeEdgeDeploymentPlanRequest' when calling describeEdgeDeploymentPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEdgeDeploymentPlanResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeEdgeDeploymentPlan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEdgePackagingJob operation.
     * @callback module:api/DefaultApi~describeEdgePackagingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEdgePackagingJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A description of edge packaging jobs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEdgePackagingJobRequest} describeEdgePackagingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeEdgePackagingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEdgePackagingJobResponse}
     */
    describeEdgePackagingJob(xAmzTarget, describeEdgePackagingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeEdgePackagingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEdgePackagingJob");
      }
      // verify the required parameter 'describeEdgePackagingJobRequest' is set
      if (describeEdgePackagingJobRequest === undefined || describeEdgePackagingJobRequest === null) {
        throw new Error("Missing the required parameter 'describeEdgePackagingJobRequest' when calling describeEdgePackagingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEdgePackagingJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeEdgePackagingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEndpoint operation.
     * @callback module:api/DefaultApi~describeEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the description of an endpoint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEndpointInput} describeEndpointInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEndpointOutput}
     */
    describeEndpoint(xAmzTarget, describeEndpointInput, opts, callback) {
      opts = opts || {};
      let postBody = describeEndpointInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEndpoint");
      }
      // verify the required parameter 'describeEndpointInput' is set
      if (describeEndpointInput === undefined || describeEndpointInput === null) {
        throw new Error("Missing the required parameter 'describeEndpointInput' when calling describeEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEndpointOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEndpointConfig operation.
     * @callback module:api/DefaultApi~describeEndpointConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEndpointConfigOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the description of an endpoint configuration created using the <code>CreateEndpointConfig</code> API.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEndpointConfigInput} describeEndpointConfigInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeEndpointConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEndpointConfigOutput}
     */
    describeEndpointConfig(xAmzTarget, describeEndpointConfigInput, opts, callback) {
      opts = opts || {};
      let postBody = describeEndpointConfigInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEndpointConfig");
      }
      // verify the required parameter 'describeEndpointConfigInput' is set
      if (describeEndpointConfigInput === undefined || describeEndpointConfigInput === null) {
        throw new Error("Missing the required parameter 'describeEndpointConfigInput' when calling describeEndpointConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEndpointConfigOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeEndpointConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeExperiment operation.
     * @callback module:api/DefaultApi~describeExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of an experiment's properties.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeExperimentRequest} describeExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeExperimentResponse}
     */
    describeExperiment(xAmzTarget, describeExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeExperiment");
      }
      // verify the required parameter 'describeExperimentRequest' is set
      if (describeExperimentRequest === undefined || describeExperimentRequest === null) {
        throw new Error("Missing the required parameter 'describeExperimentRequest' when calling describeExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFeatureGroup operation.
     * @callback module:api/DefaultApi~describeFeatureGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFeatureGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this operation to describe a <code>FeatureGroup</code>. The response includes information on the creation time, <code>FeatureGroup</code> name, the unique identifier for each <code>FeatureGroup</code>, and more.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFeatureGroupRequest} describeFeatureGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFeatureGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFeatureGroupResponse}
     */
    describeFeatureGroup(xAmzTarget, describeFeatureGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFeatureGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFeatureGroup");
      }
      // verify the required parameter 'describeFeatureGroupRequest' is set
      if (describeFeatureGroupRequest === undefined || describeFeatureGroupRequest === null) {
        throw new Error("Missing the required parameter 'describeFeatureGroupRequest' when calling describeFeatureGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFeatureGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeFeatureGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFeatureMetadata operation.
     * @callback module:api/DefaultApi~describeFeatureMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFeatureMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows the metadata for a feature within a feature group.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFeatureMetadataRequest} describeFeatureMetadataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFeatureMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFeatureMetadataResponse}
     */
    describeFeatureMetadata(xAmzTarget, describeFeatureMetadataRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFeatureMetadataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFeatureMetadata");
      }
      // verify the required parameter 'describeFeatureMetadataRequest' is set
      if (describeFeatureMetadataRequest === undefined || describeFeatureMetadataRequest === null) {
        throw new Error("Missing the required parameter 'describeFeatureMetadataRequest' when calling describeFeatureMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFeatureMetadataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeFeatureMetadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFlowDefinition operation.
     * @callback module:api/DefaultApi~describeFlowDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFlowDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the specified flow definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFlowDefinitionRequest} describeFlowDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFlowDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFlowDefinitionResponse}
     */
    describeFlowDefinition(xAmzTarget, describeFlowDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFlowDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFlowDefinition");
      }
      // verify the required parameter 'describeFlowDefinitionRequest' is set
      if (describeFlowDefinitionRequest === undefined || describeFlowDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'describeFlowDefinitionRequest' when calling describeFlowDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFlowDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeFlowDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeHub operation.
     * @callback module:api/DefaultApi~describeHubCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeHubResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describe a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeHubRequest} describeHubRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeHubCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeHubResponse}
     */
    describeHub(xAmzTarget, describeHubRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeHubRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeHub");
      }
      // verify the required parameter 'describeHubRequest' is set
      if (describeHubRequest === undefined || describeHubRequest === null) {
        throw new Error("Missing the required parameter 'describeHubRequest' when calling describeHub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeHubResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeHub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeHubContent operation.
     * @callback module:api/DefaultApi~describeHubContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeHubContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describe the content of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeHubContentRequest} describeHubContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeHubContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeHubContentResponse}
     */
    describeHubContent(xAmzTarget, describeHubContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeHubContentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeHubContent");
      }
      // verify the required parameter 'describeHubContentRequest' is set
      if (describeHubContentRequest === undefined || describeHubContentRequest === null) {
        throw new Error("Missing the required parameter 'describeHubContentRequest' when calling describeHubContent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeHubContentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeHubContent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeHumanTaskUi operation.
     * @callback module:api/DefaultApi~describeHumanTaskUiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeHumanTaskUiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the requested human task user interface (worker task template).
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeHumanTaskUiRequest} describeHumanTaskUiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeHumanTaskUiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeHumanTaskUiResponse}
     */
    describeHumanTaskUi(xAmzTarget, describeHumanTaskUiRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeHumanTaskUiRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeHumanTaskUi");
      }
      // verify the required parameter 'describeHumanTaskUiRequest' is set
      if (describeHumanTaskUiRequest === undefined || describeHumanTaskUiRequest === null) {
        throw new Error("Missing the required parameter 'describeHumanTaskUiRequest' when calling describeHumanTaskUi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeHumanTaskUiResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeHumanTaskUi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeHyperParameterTuningJob operation.
     * @callback module:api/DefaultApi~describeHyperParameterTuningJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeHyperParameterTuningJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a description of a hyperparameter tuning job, depending on the fields selected. These fields can include the name, Amazon Resource Name (ARN), job status of your tuning job and more.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeHyperParameterTuningJobRequest} describeHyperParameterTuningJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeHyperParameterTuningJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeHyperParameterTuningJobResponse}
     */
    describeHyperParameterTuningJob(xAmzTarget, describeHyperParameterTuningJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeHyperParameterTuningJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeHyperParameterTuningJob");
      }
      // verify the required parameter 'describeHyperParameterTuningJobRequest' is set
      if (describeHyperParameterTuningJobRequest === undefined || describeHyperParameterTuningJobRequest === null) {
        throw new Error("Missing the required parameter 'describeHyperParameterTuningJobRequest' when calling describeHyperParameterTuningJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeHyperParameterTuningJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeHyperParameterTuningJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImage operation.
     * @callback module:api/DefaultApi~describeImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a SageMaker image.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImageRequest} describeImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImageResponse}
     */
    describeImage(xAmzTarget, describeImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImage");
      }
      // verify the required parameter 'describeImageRequest' is set
      if (describeImageRequest === undefined || describeImageRequest === null) {
        throw new Error("Missing the required parameter 'describeImageRequest' when calling describeImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImageVersion operation.
     * @callback module:api/DefaultApi~describeImageVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImageVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a version of a SageMaker image.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImageVersionRequest} describeImageVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeImageVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImageVersionResponse}
     */
    describeImageVersion(xAmzTarget, describeImageVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImageVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImageVersion");
      }
      // verify the required parameter 'describeImageVersionRequest' is set
      if (describeImageVersionRequest === undefined || describeImageVersionRequest === null) {
        throw new Error("Missing the required parameter 'describeImageVersionRequest' when calling describeImageVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImageVersionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeImageVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInferenceExperiment operation.
     * @callback module:api/DefaultApi~describeInferenceExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInferenceExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details about an inference experiment.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeInferenceExperimentRequest} describeInferenceExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInferenceExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInferenceExperimentResponse}
     */
    describeInferenceExperiment(xAmzTarget, describeInferenceExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeInferenceExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeInferenceExperiment");
      }
      // verify the required parameter 'describeInferenceExperimentRequest' is set
      if (describeInferenceExperimentRequest === undefined || describeInferenceExperimentRequest === null) {
        throw new Error("Missing the required parameter 'describeInferenceExperimentRequest' when calling describeInferenceExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeInferenceExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeInferenceExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInferenceRecommendationsJob operation.
     * @callback module:api/DefaultApi~describeInferenceRecommendationsJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInferenceRecommendationsJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides the results of the Inference Recommender job. One or more recommendation jobs are returned.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeInferenceRecommendationsJobRequest} describeInferenceRecommendationsJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInferenceRecommendationsJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInferenceRecommendationsJobResponse}
     */
    describeInferenceRecommendationsJob(xAmzTarget, describeInferenceRecommendationsJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeInferenceRecommendationsJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeInferenceRecommendationsJob");
      }
      // verify the required parameter 'describeInferenceRecommendationsJobRequest' is set
      if (describeInferenceRecommendationsJobRequest === undefined || describeInferenceRecommendationsJobRequest === null) {
        throw new Error("Missing the required parameter 'describeInferenceRecommendationsJobRequest' when calling describeInferenceRecommendationsJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeInferenceRecommendationsJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeInferenceRecommendationsJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLabelingJob operation.
     * @callback module:api/DefaultApi~describeLabelingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLabelingJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a labeling job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLabelingJobRequest} describeLabelingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLabelingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLabelingJobResponse}
     */
    describeLabelingJob(xAmzTarget, describeLabelingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLabelingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLabelingJob");
      }
      // verify the required parameter 'describeLabelingJobRequest' is set
      if (describeLabelingJobRequest === undefined || describeLabelingJobRequest === null) {
        throw new Error("Missing the required parameter 'describeLabelingJobRequest' when calling describeLabelingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLabelingJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeLabelingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLineageGroup operation.
     * @callback module:api/DefaultApi~describeLineageGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLineageGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of properties for the requested lineage group. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html\"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLineageGroupRequest} describeLineageGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLineageGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLineageGroupResponse}
     */
    describeLineageGroup(xAmzTarget, describeLineageGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLineageGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLineageGroup");
      }
      // verify the required parameter 'describeLineageGroupRequest' is set
      if (describeLineageGroupRequest === undefined || describeLineageGroupRequest === null) {
        throw new Error("Missing the required parameter 'describeLineageGroupRequest' when calling describeLineageGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLineageGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeLineageGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModel operation.
     * @callback module:api/DefaultApi~describeModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a model that you created using the <code>CreateModel</code> API.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelInput} describeModelInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelOutput}
     */
    describeModel(xAmzTarget, describeModelInput, opts, callback) {
      opts = opts || {};
      let postBody = describeModelInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModel");
      }
      // verify the required parameter 'describeModelInput' is set
      if (describeModelInput === undefined || describeModelInput === null) {
        throw new Error("Missing the required parameter 'describeModelInput' when calling describeModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModelBiasJobDefinition operation.
     * @callback module:api/DefaultApi~describeModelBiasJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelBiasJobDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a description of a model bias job definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelBiasJobDefinitionRequest} describeModelBiasJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelBiasJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelBiasJobDefinitionResponse}
     */
    describeModelBiasJobDefinition(xAmzTarget, describeModelBiasJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeModelBiasJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModelBiasJobDefinition");
      }
      // verify the required parameter 'describeModelBiasJobDefinitionRequest' is set
      if (describeModelBiasJobDefinitionRequest === undefined || describeModelBiasJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'describeModelBiasJobDefinitionRequest' when calling describeModelBiasJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelBiasJobDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeModelBiasJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModelCard operation.
     * @callback module:api/DefaultApi~describeModelCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the content, creation time, and security configuration of an Amazon SageMaker Model Card.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelCardRequest} describeModelCardRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelCardResponse}
     */
    describeModelCard(xAmzTarget, describeModelCardRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeModelCardRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModelCard");
      }
      // verify the required parameter 'describeModelCardRequest' is set
      if (describeModelCardRequest === undefined || describeModelCardRequest === null) {
        throw new Error("Missing the required parameter 'describeModelCardRequest' when calling describeModelCard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelCardResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeModelCard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModelCardExportJob operation.
     * @callback module:api/DefaultApi~describeModelCardExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelCardExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an Amazon SageMaker Model Card export job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelCardExportJobRequest} describeModelCardExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelCardExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelCardExportJobResponse}
     */
    describeModelCardExportJob(xAmzTarget, describeModelCardExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeModelCardExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModelCardExportJob");
      }
      // verify the required parameter 'describeModelCardExportJobRequest' is set
      if (describeModelCardExportJobRequest === undefined || describeModelCardExportJobRequest === null) {
        throw new Error("Missing the required parameter 'describeModelCardExportJobRequest' when calling describeModelCardExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelCardExportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeModelCardExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModelExplainabilityJobDefinition operation.
     * @callback module:api/DefaultApi~describeModelExplainabilityJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelExplainabilityJobDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a description of a model explainability job definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelExplainabilityJobDefinitionRequest} describeModelExplainabilityJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelExplainabilityJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelExplainabilityJobDefinitionResponse}
     */
    describeModelExplainabilityJobDefinition(xAmzTarget, describeModelExplainabilityJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeModelExplainabilityJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModelExplainabilityJobDefinition");
      }
      // verify the required parameter 'describeModelExplainabilityJobDefinitionRequest' is set
      if (describeModelExplainabilityJobDefinitionRequest === undefined || describeModelExplainabilityJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'describeModelExplainabilityJobDefinitionRequest' when calling describeModelExplainabilityJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelExplainabilityJobDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeModelExplainabilityJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModelPackage operation.
     * @callback module:api/DefaultApi~describeModelPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a description of the specified model package, which is used to create SageMaker models or list them on Amazon Web Services Marketplace.</p> <p>To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services Marketplace.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelPackageInput} describeModelPackageInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelPackageOutput}
     */
    describeModelPackage(xAmzTarget, describeModelPackageInput, opts, callback) {
      opts = opts || {};
      let postBody = describeModelPackageInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModelPackage");
      }
      // verify the required parameter 'describeModelPackageInput' is set
      if (describeModelPackageInput === undefined || describeModelPackageInput === null) {
        throw new Error("Missing the required parameter 'describeModelPackageInput' when calling describeModelPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelPackageOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeModelPackage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModelPackageGroup operation.
     * @callback module:api/DefaultApi~describeModelPackageGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelPackageGroupOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a description for the specified model group.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelPackageGroupInput} describeModelPackageGroupInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelPackageGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelPackageGroupOutput}
     */
    describeModelPackageGroup(xAmzTarget, describeModelPackageGroupInput, opts, callback) {
      opts = opts || {};
      let postBody = describeModelPackageGroupInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModelPackageGroup");
      }
      // verify the required parameter 'describeModelPackageGroupInput' is set
      if (describeModelPackageGroupInput === undefined || describeModelPackageGroupInput === null) {
        throw new Error("Missing the required parameter 'describeModelPackageGroupInput' when calling describeModelPackageGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelPackageGroupOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeModelPackageGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeModelQualityJobDefinition operation.
     * @callback module:api/DefaultApi~describeModelQualityJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeModelQualityJobDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a description of a model quality job definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeModelQualityJobDefinitionRequest} describeModelQualityJobDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeModelQualityJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeModelQualityJobDefinitionResponse}
     */
    describeModelQualityJobDefinition(xAmzTarget, describeModelQualityJobDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeModelQualityJobDefinitionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeModelQualityJobDefinition");
      }
      // verify the required parameter 'describeModelQualityJobDefinitionRequest' is set
      if (describeModelQualityJobDefinitionRequest === undefined || describeModelQualityJobDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'describeModelQualityJobDefinitionRequest' when calling describeModelQualityJobDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeModelQualityJobDefinitionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeModelQualityJobDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeMonitoringSchedule operation.
     * @callback module:api/DefaultApi~describeMonitoringScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeMonitoringScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the schedule for a monitoring job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeMonitoringScheduleRequest} describeMonitoringScheduleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeMonitoringScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeMonitoringScheduleResponse}
     */
    describeMonitoringSchedule(xAmzTarget, describeMonitoringScheduleRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeMonitoringScheduleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeMonitoringSchedule");
      }
      // verify the required parameter 'describeMonitoringScheduleRequest' is set
      if (describeMonitoringScheduleRequest === undefined || describeMonitoringScheduleRequest === null) {
        throw new Error("Missing the required parameter 'describeMonitoringScheduleRequest' when calling describeMonitoringSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeMonitoringScheduleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeMonitoringSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeNotebookInstance operation.
     * @callback module:api/DefaultApi~describeNotebookInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeNotebookInstanceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a notebook instance.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeNotebookInstanceInput} describeNotebookInstanceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeNotebookInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeNotebookInstanceOutput}
     */
    describeNotebookInstance(xAmzTarget, describeNotebookInstanceInput, opts, callback) {
      opts = opts || {};
      let postBody = describeNotebookInstanceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeNotebookInstance");
      }
      // verify the required parameter 'describeNotebookInstanceInput' is set
      if (describeNotebookInstanceInput === undefined || describeNotebookInstanceInput === null) {
        throw new Error("Missing the required parameter 'describeNotebookInstanceInput' when calling describeNotebookInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeNotebookInstanceOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeNotebookInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeNotebookInstanceLifecycleConfig operation.
     * @callback module:api/DefaultApi~describeNotebookInstanceLifecycleConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeNotebookInstanceLifecycleConfigOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a description of a notebook instance lifecycle configuration.</p> <p>For information about notebook instance lifestyle configurations, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeNotebookInstanceLifecycleConfigInput} describeNotebookInstanceLifecycleConfigInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeNotebookInstanceLifecycleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeNotebookInstanceLifecycleConfigOutput}
     */
    describeNotebookInstanceLifecycleConfig(xAmzTarget, describeNotebookInstanceLifecycleConfigInput, opts, callback) {
      opts = opts || {};
      let postBody = describeNotebookInstanceLifecycleConfigInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeNotebookInstanceLifecycleConfig");
      }
      // verify the required parameter 'describeNotebookInstanceLifecycleConfigInput' is set
      if (describeNotebookInstanceLifecycleConfigInput === undefined || describeNotebookInstanceLifecycleConfigInput === null) {
        throw new Error("Missing the required parameter 'describeNotebookInstanceLifecycleConfigInput' when calling describeNotebookInstanceLifecycleConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeNotebookInstanceLifecycleConfigOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeNotebookInstanceLifecycleConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePipeline operation.
     * @callback module:api/DefaultApi~describePipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the details of a pipeline.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePipelineRequest} describePipelineRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePipelineResponse}
     */
    describePipeline(xAmzTarget, describePipelineRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePipelineRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePipeline");
      }
      // verify the required parameter 'describePipelineRequest' is set
      if (describePipelineRequest === undefined || describePipelineRequest === null) {
        throw new Error("Missing the required parameter 'describePipelineRequest' when calling describePipeline");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePipelineResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribePipeline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePipelineDefinitionForExecution operation.
     * @callback module:api/DefaultApi~describePipelineDefinitionForExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePipelineDefinitionForExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the details of an execution's pipeline definition.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePipelineDefinitionForExecutionRequest} describePipelineDefinitionForExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePipelineDefinitionForExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePipelineDefinitionForExecutionResponse}
     */
    describePipelineDefinitionForExecution(xAmzTarget, describePipelineDefinitionForExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePipelineDefinitionForExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePipelineDefinitionForExecution");
      }
      // verify the required parameter 'describePipelineDefinitionForExecutionRequest' is set
      if (describePipelineDefinitionForExecutionRequest === undefined || describePipelineDefinitionForExecutionRequest === null) {
        throw new Error("Missing the required parameter 'describePipelineDefinitionForExecutionRequest' when calling describePipelineDefinitionForExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePipelineDefinitionForExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribePipelineDefinitionForExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePipelineExecution operation.
     * @callback module:api/DefaultApi~describePipelineExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePipelineExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the details of a pipeline execution.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePipelineExecutionRequest} describePipelineExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePipelineExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePipelineExecutionResponse}
     */
    describePipelineExecution(xAmzTarget, describePipelineExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePipelineExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePipelineExecution");
      }
      // verify the required parameter 'describePipelineExecutionRequest' is set
      if (describePipelineExecutionRequest === undefined || describePipelineExecutionRequest === null) {
        throw new Error("Missing the required parameter 'describePipelineExecutionRequest' when calling describePipelineExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePipelineExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribePipelineExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProcessingJob operation.
     * @callback module:api/DefaultApi~describeProcessingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProcessingJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a description of a processing job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProcessingJobRequest} describeProcessingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProcessingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProcessingJobResponse}
     */
    describeProcessingJob(xAmzTarget, describeProcessingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeProcessingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProcessingJob");
      }
      // verify the required parameter 'describeProcessingJobRequest' is set
      if (describeProcessingJobRequest === undefined || describeProcessingJobRequest === null) {
        throw new Error("Missing the required parameter 'describeProcessingJobRequest' when calling describeProcessingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProcessingJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeProcessingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProject operation.
     * @callback module:api/DefaultApi~describeProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProjectOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the details of a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProjectInput} describeProjectInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProjectOutput}
     */
    describeProject(xAmzTarget, describeProjectInput, opts, callback) {
      opts = opts || {};
      let postBody = describeProjectInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProject");
      }
      // verify the required parameter 'describeProjectInput' is set
      if (describeProjectInput === undefined || describeProjectInput === null) {
        throw new Error("Missing the required parameter 'describeProjectInput' when calling describeProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProjectOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSpace operation.
     * @callback module:api/DefaultApi~describeSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSpaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the space.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeSpaceRequest} describeSpaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSpaceResponse}
     */
    describeSpace(xAmzTarget, describeSpaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSpaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeSpace");
      }
      // verify the required parameter 'describeSpaceRequest' is set
      if (describeSpaceRequest === undefined || describeSpaceRequest === null) {
        throw new Error("Missing the required parameter 'describeSpaceRequest' when calling describeSpace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSpaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeSpace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeStudioLifecycleConfig operation.
     * @callback module:api/DefaultApi~describeStudioLifecycleConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStudioLifecycleConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the Studio Lifecycle Configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeStudioLifecycleConfigRequest} describeStudioLifecycleConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeStudioLifecycleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStudioLifecycleConfigResponse}
     */
    describeStudioLifecycleConfig(xAmzTarget, describeStudioLifecycleConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeStudioLifecycleConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeStudioLifecycleConfig");
      }
      // verify the required parameter 'describeStudioLifecycleConfigRequest' is set
      if (describeStudioLifecycleConfigRequest === undefined || describeStudioLifecycleConfigRequest === null) {
        throw new Error("Missing the required parameter 'describeStudioLifecycleConfigRequest' when calling describeStudioLifecycleConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeStudioLifecycleConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeStudioLifecycleConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSubscribedWorkteam operation.
     * @callback module:api/DefaultApi~describeSubscribedWorkteamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSubscribedWorkteamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a work team provided by a vendor. It returns details about the subscription with a vendor in the Amazon Web Services Marketplace.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeSubscribedWorkteamRequest} describeSubscribedWorkteamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSubscribedWorkteamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSubscribedWorkteamResponse}
     */
    describeSubscribedWorkteam(xAmzTarget, describeSubscribedWorkteamRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSubscribedWorkteamRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeSubscribedWorkteam");
      }
      // verify the required parameter 'describeSubscribedWorkteamRequest' is set
      if (describeSubscribedWorkteamRequest === undefined || describeSubscribedWorkteamRequest === null) {
        throw new Error("Missing the required parameter 'describeSubscribedWorkteamRequest' when calling describeSubscribedWorkteam");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSubscribedWorkteamResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeSubscribedWorkteam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTrainingJob operation.
     * @callback module:api/DefaultApi~describeTrainingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTrainingJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about a training job. </p> <p>Some of the attributes below only appear if the training job successfully starts. If the training job fails, <code>TrainingJobStatus</code> is <code>Failed</code> and, depending on the <code>FailureReason</code>, attributes like <code>TrainingStartTime</code>, <code>TrainingTimeInSeconds</code>, <code>TrainingEndTime</code>, and <code>BillableTimeInSeconds</code> may not be present in the response.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTrainingJobRequest} describeTrainingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTrainingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTrainingJobResponse}
     */
    describeTrainingJob(xAmzTarget, describeTrainingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTrainingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTrainingJob");
      }
      // verify the required parameter 'describeTrainingJobRequest' is set
      if (describeTrainingJobRequest === undefined || describeTrainingJobRequest === null) {
        throw new Error("Missing the required parameter 'describeTrainingJobRequest' when calling describeTrainingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTrainingJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeTrainingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTransformJob operation.
     * @callback module:api/DefaultApi~describeTransformJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTransformJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a transform job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTransformJobRequest} describeTransformJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTransformJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTransformJobResponse}
     */
    describeTransformJob(xAmzTarget, describeTransformJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTransformJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTransformJob");
      }
      // verify the required parameter 'describeTransformJobRequest' is set
      if (describeTransformJobRequest === undefined || describeTransformJobRequest === null) {
        throw new Error("Missing the required parameter 'describeTransformJobRequest' when calling describeTransformJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTransformJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeTransformJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTrial operation.
     * @callback module:api/DefaultApi~describeTrialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTrialResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of a trial's properties.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTrialRequest} describeTrialRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTrialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTrialResponse}
     */
    describeTrial(xAmzTarget, describeTrialRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTrialRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTrial");
      }
      // verify the required parameter 'describeTrialRequest' is set
      if (describeTrialRequest === undefined || describeTrialRequest === null) {
        throw new Error("Missing the required parameter 'describeTrialRequest' when calling describeTrial");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTrialResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeTrial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTrialComponent operation.
     * @callback module:api/DefaultApi~describeTrialComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTrialComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of a trials component's properties.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTrialComponentRequest} describeTrialComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTrialComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTrialComponentResponse}
     */
    describeTrialComponent(xAmzTarget, describeTrialComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTrialComponentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTrialComponent");
      }
      // verify the required parameter 'describeTrialComponentRequest' is set
      if (describeTrialComponentRequest === undefined || describeTrialComponentRequest === null) {
        throw new Error("Missing the required parameter 'describeTrialComponentRequest' when calling describeTrialComponent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTrialComponentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeTrialComponent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUserProfile operation.
     * @callback module:api/DefaultApi~describeUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUserProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a user profile. For more information, see <code>CreateUserProfile</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeUserProfileRequest} describeUserProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUserProfileResponse}
     */
    describeUserProfile(xAmzTarget, describeUserProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeUserProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeUserProfile");
      }
      // verify the required parameter 'describeUserProfileRequest' is set
      if (describeUserProfileRequest === undefined || describeUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'describeUserProfileRequest' when calling describeUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeUserProfileResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeUserProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkforce operation.
     * @callback module:api/DefaultApi~describeWorkforceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkforceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists private workforce information, including workforce name, Amazon Resource Name (ARN), and, if applicable, allowed IP address ranges (<a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">CIDRs</a>). Allowable IP address ranges are the IP addresses that workers can use to access tasks. </p> <important> <p>This operation applies only to private workforces.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkforceRequest} describeWorkforceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorkforceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkforceResponse}
     */
    describeWorkforce(xAmzTarget, describeWorkforceRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkforceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkforce");
      }
      // verify the required parameter 'describeWorkforceRequest' is set
      if (describeWorkforceRequest === undefined || describeWorkforceRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkforceRequest' when calling describeWorkforce");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkforceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeWorkforce', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkteam operation.
     * @callback module:api/DefaultApi~describeWorkteamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkteamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specific work team. You can see information such as the create date, the last updated date, membership information, and the work team's Amazon Resource Name (ARN).
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkteamRequest} describeWorkteamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorkteamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkteamResponse}
     */
    describeWorkteam(xAmzTarget, describeWorkteamRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkteamRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkteam");
      }
      // verify the required parameter 'describeWorkteamRequest' is set
      if (describeWorkteamRequest === undefined || describeWorkteamRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkteamRequest' when calling describeWorkteam");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkteamResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DescribeWorkteam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableSagemakerServicecatalogPortfolio operation.
     * @callback module:api/DefaultApi~disableSagemakerServicecatalogPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disableSagemakerServicecatalogPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disableSagemakerServicecatalogPortfolio(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disableSagemakerServicecatalogPortfolio");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling disableSagemakerServicecatalogPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DisableSagemakerServicecatalogPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateTrialComponent operation.
     * @callback module:api/DefaultApi~disassociateTrialComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateTrialComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disassociates a trial component from a trial. This doesn't effect other trials the component is associated with. Before you can delete a component, you must disassociate the component from all trials it is associated with. To associate a trial component with a trial, call the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AssociateTrialComponent.html\">AssociateTrialComponent</a> API.</p> <p>To get a list of the trials a component is associated with, use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\">Search</a> API. Specify <code>ExperimentTrialComponent</code> for the <code>Resource</code> parameter. The list appears in the response under <code>Results.TrialComponent.Parents</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateTrialComponentRequest} disassociateTrialComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateTrialComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateTrialComponentResponse}
     */
    disassociateTrialComponent(xAmzTarget, disassociateTrialComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateTrialComponentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateTrialComponent");
      }
      // verify the required parameter 'disassociateTrialComponentRequest' is set
      if (disassociateTrialComponentRequest === undefined || disassociateTrialComponentRequest === null) {
        throw new Error("Missing the required parameter 'disassociateTrialComponentRequest' when calling disassociateTrialComponent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateTrialComponentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.DisassociateTrialComponent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableSagemakerServicecatalogPortfolio operation.
     * @callback module:api/DefaultApi~enableSagemakerServicecatalogPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~enableSagemakerServicecatalogPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    enableSagemakerServicecatalogPortfolio(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling enableSagemakerServicecatalogPortfolio");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling enableSagemakerServicecatalogPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.EnableSagemakerServicecatalogPortfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceFleetReport operation.
     * @callback module:api/DefaultApi~getDeviceFleetReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceFleetReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetDeviceFleetReportRequest} getDeviceFleetReportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeviceFleetReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceFleetReportResponse}
     */
    getDeviceFleetReport(xAmzTarget, getDeviceFleetReportRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDeviceFleetReportRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getDeviceFleetReport");
      }
      // verify the required parameter 'getDeviceFleetReportRequest' is set
      if (getDeviceFleetReportRequest === undefined || getDeviceFleetReportRequest === null) {
        throw new Error("Missing the required parameter 'getDeviceFleetReportRequest' when calling getDeviceFleetReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceFleetReportResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.GetDeviceFleetReport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLineageGroupPolicy operation.
     * @callback module:api/DefaultApi~getLineageGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLineageGroupPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The resource policy for the lineage group.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetLineageGroupPolicyRequest} getLineageGroupPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLineageGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLineageGroupPolicyResponse}
     */
    getLineageGroupPolicy(xAmzTarget, getLineageGroupPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLineageGroupPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getLineageGroupPolicy");
      }
      // verify the required parameter 'getLineageGroupPolicyRequest' is set
      if (getLineageGroupPolicyRequest === undefined || getLineageGroupPolicyRequest === null) {
        throw new Error("Missing the required parameter 'getLineageGroupPolicyRequest' when calling getLineageGroupPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLineageGroupPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.GetLineageGroupPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelPackageGroupPolicy operation.
     * @callback module:api/DefaultApi~getModelPackageGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModelPackageGroupPolicyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a resource policy that manages access for a model group. For information about resource policies, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html\">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetModelPackageGroupPolicyInput} getModelPackageGroupPolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getModelPackageGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModelPackageGroupPolicyOutput}
     */
    getModelPackageGroupPolicy(xAmzTarget, getModelPackageGroupPolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = getModelPackageGroupPolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getModelPackageGroupPolicy");
      }
      // verify the required parameter 'getModelPackageGroupPolicyInput' is set
      if (getModelPackageGroupPolicyInput === undefined || getModelPackageGroupPolicyInput === null) {
        throw new Error("Missing the required parameter 'getModelPackageGroupPolicyInput' when calling getModelPackageGroupPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetModelPackageGroupPolicyOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.GetModelPackageGroupPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSagemakerServicecatalogPortfolioStatus operation.
     * @callback module:api/DefaultApi~getSagemakerServicecatalogPortfolioStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSagemakerServicecatalogPortfolioStatusOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSagemakerServicecatalogPortfolioStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSagemakerServicecatalogPortfolioStatusOutput}
     */
    getSagemakerServicecatalogPortfolioStatus(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSagemakerServicecatalogPortfolioStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSagemakerServicecatalogPortfolioStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSagemakerServicecatalogPortfolioStatusOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.GetSagemakerServicecatalogPortfolioStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScalingConfigurationRecommendation operation.
     * @callback module:api/DefaultApi~getScalingConfigurationRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetScalingConfigurationRecommendationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an Amazon SageMaker Inference Recommender autoscaling recommendation job. Returns recommendations for autoscaling policies that you can apply to your SageMaker endpoint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetScalingConfigurationRecommendationRequest} getScalingConfigurationRecommendationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getScalingConfigurationRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetScalingConfigurationRecommendationResponse}
     */
    getScalingConfigurationRecommendation(xAmzTarget, getScalingConfigurationRecommendationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getScalingConfigurationRecommendationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getScalingConfigurationRecommendation");
      }
      // verify the required parameter 'getScalingConfigurationRecommendationRequest' is set
      if (getScalingConfigurationRecommendationRequest === undefined || getScalingConfigurationRecommendationRequest === null) {
        throw new Error("Missing the required parameter 'getScalingConfigurationRecommendationRequest' when calling getScalingConfigurationRecommendation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetScalingConfigurationRecommendationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.GetScalingConfigurationRecommendation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSearchSuggestions operation.
     * @callback module:api/DefaultApi~getSearchSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSearchSuggestionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An auto-complete API for the search functionality in the SageMaker console. It returns suggestions of possible matches for the property name to use in <code>Search</code> queries. Provides suggestions for <code>HyperParameters</code>, <code>Tags</code>, and <code>Metrics</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSearchSuggestionsRequest} getSearchSuggestionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSearchSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSearchSuggestionsResponse}
     */
    getSearchSuggestions(xAmzTarget, getSearchSuggestionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSearchSuggestionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSearchSuggestions");
      }
      // verify the required parameter 'getSearchSuggestionsRequest' is set
      if (getSearchSuggestionsRequest === undefined || getSearchSuggestionsRequest === null) {
        throw new Error("Missing the required parameter 'getSearchSuggestionsRequest' when calling getSearchSuggestions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSearchSuggestionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.GetSearchSuggestions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importHubContent operation.
     * @callback module:api/DefaultApi~importHubContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportHubContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Import hub content.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportHubContentRequest} importHubContentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importHubContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportHubContentResponse}
     */
    importHubContent(xAmzTarget, importHubContentRequest, opts, callback) {
      opts = opts || {};
      let postBody = importHubContentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importHubContent");
      }
      // verify the required parameter 'importHubContentRequest' is set
      if (importHubContentRequest === undefined || importHubContentRequest === null) {
        throw new Error("Missing the required parameter 'importHubContentRequest' when calling importHubContent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportHubContentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ImportHubContent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listActions operation.
     * @callback module:api/DefaultApi~listActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the actions in your account and their properties.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListActionsRequest} listActionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListActionsResponse}
     */
    listActions(xAmzTarget, listActionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listActionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listActions");
      }
      // verify the required parameter 'listActionsRequest' is set
      if (listActionsRequest === undefined || listActionsRequest === null) {
        throw new Error("Missing the required parameter 'listActionsRequest' when calling listActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListActionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAlgorithms operation.
     * @callback module:api/DefaultApi~listAlgorithmsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAlgorithmsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the machine learning algorithms that have been created.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAlgorithmsInput} listAlgorithmsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAlgorithmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAlgorithmsOutput}
     */
    listAlgorithms(xAmzTarget, listAlgorithmsInput, opts, callback) {
      opts = opts || {};
      let postBody = listAlgorithmsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAlgorithms");
      }
      // verify the required parameter 'listAlgorithmsInput' is set
      if (listAlgorithmsInput === undefined || listAlgorithmsInput === null) {
        throw new Error("Missing the required parameter 'listAlgorithmsInput' when calling listAlgorithms");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAlgorithmsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListAlgorithms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAliases operation.
     * @callback module:api/DefaultApi~listAliasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAliasesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the aliases of a specified image or image version.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAliasesRequest} listAliasesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAliasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAliasesResponse}
     */
    listAliases(xAmzTarget, listAliasesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAliasesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAliases");
      }
      // verify the required parameter 'listAliasesRequest' is set
      if (listAliasesRequest === undefined || listAliasesRequest === null) {
        throw new Error("Missing the required parameter 'listAliasesRequest' when calling listAliases");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAliasesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListAliases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppImageConfigs operation.
     * @callback module:api/DefaultApi~listAppImageConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAppImageConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAppImageConfigsRequest} listAppImageConfigsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAppImageConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAppImageConfigsResponse}
     */
    listAppImageConfigs(xAmzTarget, listAppImageConfigsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAppImageConfigsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAppImageConfigs");
      }
      // verify the required parameter 'listAppImageConfigsRequest' is set
      if (listAppImageConfigsRequest === undefined || listAppImageConfigsRequest === null) {
        throw new Error("Missing the required parameter 'listAppImageConfigsRequest' when calling listAppImageConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAppImageConfigsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListAppImageConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApps operation.
     * @callback module:api/DefaultApi~listAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAppsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists apps.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAppsRequest} listAppsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAppsResponse}
     */
    listApps(xAmzTarget, listAppsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAppsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listApps");
      }
      // verify the required parameter 'listAppsRequest' is set
      if (listAppsRequest === undefined || listAppsRequest === null) {
        throw new Error("Missing the required parameter 'listAppsRequest' when calling listApps");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAppsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListApps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listArtifacts operation.
     * @callback module:api/DefaultApi~listArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListArtifactsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the artifacts in your account and their properties.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListArtifactsRequest} listArtifactsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListArtifactsResponse}
     */
    listArtifacts(xAmzTarget, listArtifactsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listArtifactsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listArtifacts");
      }
      // verify the required parameter 'listArtifactsRequest' is set
      if (listArtifactsRequest === undefined || listArtifactsRequest === null) {
        throw new Error("Missing the required parameter 'listArtifactsRequest' when calling listArtifacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListArtifactsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListArtifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssociations operation.
     * @callback module:api/DefaultApi~listAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the associations in your account and their properties.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAssociationsRequest} listAssociationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssociationsResponse}
     */
    listAssociations(xAmzTarget, listAssociationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAssociationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAssociations");
      }
      // verify the required parameter 'listAssociationsRequest' is set
      if (listAssociationsRequest === undefined || listAssociationsRequest === null) {
        throw new Error("Missing the required parameter 'listAssociationsRequest' when calling listAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAssociationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAutoMLJobs operation.
     * @callback module:api/DefaultApi~listAutoMLJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAutoMLJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a list of jobs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAutoMLJobsRequest} listAutoMLJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAutoMLJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAutoMLJobsResponse}
     */
    listAutoMLJobs(xAmzTarget, listAutoMLJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAutoMLJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAutoMLJobs");
      }
      // verify the required parameter 'listAutoMLJobsRequest' is set
      if (listAutoMLJobsRequest === undefined || listAutoMLJobsRequest === null) {
        throw new Error("Missing the required parameter 'listAutoMLJobsRequest' when calling listAutoMLJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAutoMLJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListAutoMLJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCandidatesForAutoMLJob operation.
     * @callback module:api/DefaultApi~listCandidatesForAutoMLJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCandidatesForAutoMLJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the candidates created for the job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListCandidatesForAutoMLJobRequest} listCandidatesForAutoMLJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCandidatesForAutoMLJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCandidatesForAutoMLJobResponse}
     */
    listCandidatesForAutoMLJob(xAmzTarget, listCandidatesForAutoMLJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCandidatesForAutoMLJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCandidatesForAutoMLJob");
      }
      // verify the required parameter 'listCandidatesForAutoMLJobRequest' is set
      if (listCandidatesForAutoMLJobRequest === undefined || listCandidatesForAutoMLJobRequest === null) {
        throw new Error("Missing the required parameter 'listCandidatesForAutoMLJobRequest' when calling listCandidatesForAutoMLJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCandidatesForAutoMLJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListCandidatesForAutoMLJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCodeRepositories operation.
     * @callback module:api/DefaultApi~listCodeRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCodeRepositoriesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the Git repositories in your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListCodeRepositoriesInput} listCodeRepositoriesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCodeRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCodeRepositoriesOutput}
     */
    listCodeRepositories(xAmzTarget, listCodeRepositoriesInput, opts, callback) {
      opts = opts || {};
      let postBody = listCodeRepositoriesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCodeRepositories");
      }
      // verify the required parameter 'listCodeRepositoriesInput' is set
      if (listCodeRepositoriesInput === undefined || listCodeRepositoriesInput === null) {
        throw new Error("Missing the required parameter 'listCodeRepositoriesInput' when calling listCodeRepositories");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCodeRepositoriesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListCodeRepositories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCompilationJobs operation.
     * @callback module:api/DefaultApi~listCompilationJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCompilationJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists model compilation jobs that satisfy various filters.</p> <p>To create a model compilation job, use <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html\">CreateCompilationJob</a>. To get information about a particular model compilation job you have created, use <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html\">DescribeCompilationJob</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListCompilationJobsRequest} listCompilationJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCompilationJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCompilationJobsResponse}
     */
    listCompilationJobs(xAmzTarget, listCompilationJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCompilationJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCompilationJobs");
      }
      // verify the required parameter 'listCompilationJobsRequest' is set
      if (listCompilationJobsRequest === undefined || listCompilationJobsRequest === null) {
        throw new Error("Missing the required parameter 'listCompilationJobsRequest' when calling listCompilationJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCompilationJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListCompilationJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContexts operation.
     * @callback module:api/DefaultApi~listContextsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContextsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the contexts in your account and their properties.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListContextsRequest} listContextsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listContextsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContextsResponse}
     */
    listContexts(xAmzTarget, listContextsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listContextsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listContexts");
      }
      // verify the required parameter 'listContextsRequest' is set
      if (listContextsRequest === undefined || listContextsRequest === null) {
        throw new Error("Missing the required parameter 'listContextsRequest' when calling listContexts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListContextsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListContexts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataQualityJobDefinitions operation.
     * @callback module:api/DefaultApi~listDataQualityJobDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataQualityJobDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the data quality job definitions in your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDataQualityJobDefinitionsRequest} listDataQualityJobDefinitionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDataQualityJobDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataQualityJobDefinitionsResponse}
     */
    listDataQualityJobDefinitions(xAmzTarget, listDataQualityJobDefinitionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDataQualityJobDefinitionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDataQualityJobDefinitions");
      }
      // verify the required parameter 'listDataQualityJobDefinitionsRequest' is set
      if (listDataQualityJobDefinitionsRequest === undefined || listDataQualityJobDefinitionsRequest === null) {
        throw new Error("Missing the required parameter 'listDataQualityJobDefinitionsRequest' when calling listDataQualityJobDefinitions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDataQualityJobDefinitionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListDataQualityJobDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeviceFleets operation.
     * @callback module:api/DefaultApi~listDeviceFleetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeviceFleetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of devices in the fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDeviceFleetsRequest} listDeviceFleetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDeviceFleetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeviceFleetsResponse}
     */
    listDeviceFleets(xAmzTarget, listDeviceFleetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDeviceFleetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDeviceFleets");
      }
      // verify the required parameter 'listDeviceFleetsRequest' is set
      if (listDeviceFleetsRequest === undefined || listDeviceFleetsRequest === null) {
        throw new Error("Missing the required parameter 'listDeviceFleetsRequest' when calling listDeviceFleets");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDeviceFleetsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListDeviceFleets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDevices operation.
     * @callback module:api/DefaultApi~listDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of devices.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDevicesRequest} listDevicesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDevicesResponse}
     */
    listDevices(xAmzTarget, listDevicesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDevicesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDevices");
      }
      // verify the required parameter 'listDevicesRequest' is set
      if (listDevicesRequest === undefined || listDevicesRequest === null) {
        throw new Error("Missing the required parameter 'listDevicesRequest' when calling listDevices");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDevicesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListDevices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomains operation.
     * @callback module:api/DefaultApi~listDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the domains.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDomainsRequest} listDomainsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainsResponse}
     */
    listDomains(xAmzTarget, listDomainsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDomainsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDomains");
      }
      // verify the required parameter 'listDomainsRequest' is set
      if (listDomainsRequest === undefined || listDomainsRequest === null) {
        throw new Error("Missing the required parameter 'listDomainsRequest' when calling listDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDomainsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListDomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEdgeDeploymentPlans operation.
     * @callback module:api/DefaultApi~listEdgeDeploymentPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEdgeDeploymentPlansResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all edge deployment plans.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListEdgeDeploymentPlansRequest} listEdgeDeploymentPlansRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listEdgeDeploymentPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEdgeDeploymentPlansResponse}
     */
    listEdgeDeploymentPlans(xAmzTarget, listEdgeDeploymentPlansRequest, opts, callback) {
      opts = opts || {};
      let postBody = listEdgeDeploymentPlansRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listEdgeDeploymentPlans");
      }
      // verify the required parameter 'listEdgeDeploymentPlansRequest' is set
      if (listEdgeDeploymentPlansRequest === undefined || listEdgeDeploymentPlansRequest === null) {
        throw new Error("Missing the required parameter 'listEdgeDeploymentPlansRequest' when calling listEdgeDeploymentPlans");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEdgeDeploymentPlansResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListEdgeDeploymentPlans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEdgePackagingJobs operation.
     * @callback module:api/DefaultApi~listEdgePackagingJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEdgePackagingJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of edge packaging jobs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListEdgePackagingJobsRequest} listEdgePackagingJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listEdgePackagingJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEdgePackagingJobsResponse}
     */
    listEdgePackagingJobs(xAmzTarget, listEdgePackagingJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listEdgePackagingJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listEdgePackagingJobs");
      }
      // verify the required parameter 'listEdgePackagingJobsRequest' is set
      if (listEdgePackagingJobsRequest === undefined || listEdgePackagingJobsRequest === null) {
        throw new Error("Missing the required parameter 'listEdgePackagingJobsRequest' when calling listEdgePackagingJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEdgePackagingJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListEdgePackagingJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEndpointConfigs operation.
     * @callback module:api/DefaultApi~listEndpointConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEndpointConfigsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists endpoint configurations.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListEndpointConfigsInput} listEndpointConfigsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listEndpointConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEndpointConfigsOutput}
     */
    listEndpointConfigs(xAmzTarget, listEndpointConfigsInput, opts, callback) {
      opts = opts || {};
      let postBody = listEndpointConfigsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listEndpointConfigs");
      }
      // verify the required parameter 'listEndpointConfigsInput' is set
      if (listEndpointConfigsInput === undefined || listEndpointConfigsInput === null) {
        throw new Error("Missing the required parameter 'listEndpointConfigsInput' when calling listEndpointConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEndpointConfigsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListEndpointConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEndpoints operation.
     * @callback module:api/DefaultApi~listEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEndpointsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists endpoints.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListEndpointsInput} listEndpointsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEndpointsOutput}
     */
    listEndpoints(xAmzTarget, listEndpointsInput, opts, callback) {
      opts = opts || {};
      let postBody = listEndpointsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listEndpoints");
      }
      // verify the required parameter 'listEndpointsInput' is set
      if (listEndpointsInput === undefined || listEndpointsInput === null) {
        throw new Error("Missing the required parameter 'listEndpointsInput' when calling listEndpoints");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEndpointsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListEndpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExperiments operation.
     * @callback module:api/DefaultApi~listExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListExperimentsRequest} listExperimentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExperimentsResponse}
     */
    listExperiments(xAmzTarget, listExperimentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExperimentsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listExperiments");
      }
      // verify the required parameter 'listExperimentsRequest' is set
      if (listExperimentsRequest === undefined || listExperimentsRequest === null) {
        throw new Error("Missing the required parameter 'listExperimentsRequest' when calling listExperiments");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExperimentsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListExperiments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFeatureGroups operation.
     * @callback module:api/DefaultApi~listFeatureGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFeatureGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List <code>FeatureGroup</code>s based on given filter and order.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFeatureGroupsRequest} listFeatureGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFeatureGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFeatureGroupsResponse}
     */
    listFeatureGroups(xAmzTarget, listFeatureGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFeatureGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFeatureGroups");
      }
      // verify the required parameter 'listFeatureGroupsRequest' is set
      if (listFeatureGroupsRequest === undefined || listFeatureGroupsRequest === null) {
        throw new Error("Missing the required parameter 'listFeatureGroupsRequest' when calling listFeatureGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFeatureGroupsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListFeatureGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFlowDefinitions operation.
     * @callback module:api/DefaultApi~listFlowDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFlowDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the flow definitions in your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFlowDefinitionsRequest} listFlowDefinitionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFlowDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFlowDefinitionsResponse}
     */
    listFlowDefinitions(xAmzTarget, listFlowDefinitionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFlowDefinitionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFlowDefinitions");
      }
      // verify the required parameter 'listFlowDefinitionsRequest' is set
      if (listFlowDefinitionsRequest === undefined || listFlowDefinitionsRequest === null) {
        throw new Error("Missing the required parameter 'listFlowDefinitionsRequest' when calling listFlowDefinitions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFlowDefinitionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListFlowDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHubContentVersions operation.
     * @callback module:api/DefaultApi~listHubContentVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListHubContentVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>List hub content versions.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListHubContentVersionsRequest} listHubContentVersionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listHubContentVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListHubContentVersionsResponse}
     */
    listHubContentVersions(xAmzTarget, listHubContentVersionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listHubContentVersionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listHubContentVersions");
      }
      // verify the required parameter 'listHubContentVersionsRequest' is set
      if (listHubContentVersionsRequest === undefined || listHubContentVersionsRequest === null) {
        throw new Error("Missing the required parameter 'listHubContentVersionsRequest' when calling listHubContentVersions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListHubContentVersionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListHubContentVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHubContents operation.
     * @callback module:api/DefaultApi~listHubContentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListHubContentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>List the contents of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListHubContentsRequest} listHubContentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listHubContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListHubContentsResponse}
     */
    listHubContents(xAmzTarget, listHubContentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listHubContentsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listHubContents");
      }
      // verify the required parameter 'listHubContentsRequest' is set
      if (listHubContentsRequest === undefined || listHubContentsRequest === null) {
        throw new Error("Missing the required parameter 'listHubContentsRequest' when calling listHubContents");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListHubContentsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListHubContents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHubs operation.
     * @callback module:api/DefaultApi~listHubsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListHubsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>List all existing hubs.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListHubsRequest} listHubsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listHubsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListHubsResponse}
     */
    listHubs(xAmzTarget, listHubsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listHubsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listHubs");
      }
      // verify the required parameter 'listHubsRequest' is set
      if (listHubsRequest === undefined || listHubsRequest === null) {
        throw new Error("Missing the required parameter 'listHubsRequest' when calling listHubs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListHubsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListHubs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHumanTaskUis operation.
     * @callback module:api/DefaultApi~listHumanTaskUisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListHumanTaskUisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the human task user interfaces in your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListHumanTaskUisRequest} listHumanTaskUisRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listHumanTaskUisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListHumanTaskUisResponse}
     */
    listHumanTaskUis(xAmzTarget, listHumanTaskUisRequest, opts, callback) {
      opts = opts || {};
      let postBody = listHumanTaskUisRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listHumanTaskUis");
      }
      // verify the required parameter 'listHumanTaskUisRequest' is set
      if (listHumanTaskUisRequest === undefined || listHumanTaskUisRequest === null) {
        throw new Error("Missing the required parameter 'listHumanTaskUisRequest' when calling listHumanTaskUis");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListHumanTaskUisResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListHumanTaskUis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHyperParameterTuningJobs operation.
     * @callback module:api/DefaultApi~listHyperParameterTuningJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListHyperParameterTuningJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobSummary.html\">HyperParameterTuningJobSummary</a> objects that describe the hyperparameter tuning jobs launched in your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListHyperParameterTuningJobsRequest} listHyperParameterTuningJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listHyperParameterTuningJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListHyperParameterTuningJobsResponse}
     */
    listHyperParameterTuningJobs(xAmzTarget, listHyperParameterTuningJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listHyperParameterTuningJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listHyperParameterTuningJobs");
      }
      // verify the required parameter 'listHyperParameterTuningJobsRequest' is set
      if (listHyperParameterTuningJobsRequest === undefined || listHyperParameterTuningJobsRequest === null) {
        throw new Error("Missing the required parameter 'listHyperParameterTuningJobsRequest' when calling listHyperParameterTuningJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListHyperParameterTuningJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListHyperParameterTuningJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageVersions operation.
     * @callback module:api/DefaultApi~listImageVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListImageVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListImageVersionsRequest} listImageVersionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listImageVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListImageVersionsResponse}
     */
    listImageVersions(xAmzTarget, listImageVersionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listImageVersionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listImageVersions");
      }
      // verify the required parameter 'listImageVersionsRequest' is set
      if (listImageVersionsRequest === undefined || listImageVersionsRequest === null) {
        throw new Error("Missing the required parameter 'listImageVersionsRequest' when calling listImageVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListImageVersionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListImageVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImages operation.
     * @callback module:api/DefaultApi~listImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListImagesRequest} listImagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListImagesResponse}
     */
    listImages(xAmzTarget, listImagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listImagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listImages");
      }
      // verify the required parameter 'listImagesRequest' is set
      if (listImagesRequest === undefined || listImagesRequest === null) {
        throw new Error("Missing the required parameter 'listImagesRequest' when calling listImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListImagesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInferenceExperiments operation.
     * @callback module:api/DefaultApi~listInferenceExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInferenceExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of all inference experiments.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListInferenceExperimentsRequest} listInferenceExperimentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInferenceExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInferenceExperimentsResponse}
     */
    listInferenceExperiments(xAmzTarget, listInferenceExperimentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInferenceExperimentsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listInferenceExperiments");
      }
      // verify the required parameter 'listInferenceExperimentsRequest' is set
      if (listInferenceExperimentsRequest === undefined || listInferenceExperimentsRequest === null) {
        throw new Error("Missing the required parameter 'listInferenceExperimentsRequest' when calling listInferenceExperiments");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInferenceExperimentsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListInferenceExperiments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInferenceRecommendationsJobSteps operation.
     * @callback module:api/DefaultApi~listInferenceRecommendationsJobStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInferenceRecommendationsJobStepsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of the subtasks for an Inference Recommender job.</p> <p>The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListInferenceRecommendationsJobStepsRequest} listInferenceRecommendationsJobStepsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInferenceRecommendationsJobStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInferenceRecommendationsJobStepsResponse}
     */
    listInferenceRecommendationsJobSteps(xAmzTarget, listInferenceRecommendationsJobStepsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInferenceRecommendationsJobStepsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listInferenceRecommendationsJobSteps");
      }
      // verify the required parameter 'listInferenceRecommendationsJobStepsRequest' is set
      if (listInferenceRecommendationsJobStepsRequest === undefined || listInferenceRecommendationsJobStepsRequest === null) {
        throw new Error("Missing the required parameter 'listInferenceRecommendationsJobStepsRequest' when calling listInferenceRecommendationsJobSteps");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInferenceRecommendationsJobStepsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobSteps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInferenceRecommendationsJobs operation.
     * @callback module:api/DefaultApi~listInferenceRecommendationsJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInferenceRecommendationsJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists recommendation jobs that satisfy various filters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListInferenceRecommendationsJobsRequest} listInferenceRecommendationsJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInferenceRecommendationsJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInferenceRecommendationsJobsResponse}
     */
    listInferenceRecommendationsJobs(xAmzTarget, listInferenceRecommendationsJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInferenceRecommendationsJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listInferenceRecommendationsJobs");
      }
      // verify the required parameter 'listInferenceRecommendationsJobsRequest' is set
      if (listInferenceRecommendationsJobsRequest === undefined || listInferenceRecommendationsJobsRequest === null) {
        throw new Error("Missing the required parameter 'listInferenceRecommendationsJobsRequest' when calling listInferenceRecommendationsJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInferenceRecommendationsJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLabelingJobs operation.
     * @callback module:api/DefaultApi~listLabelingJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLabelingJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of labeling jobs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLabelingJobsRequest} listLabelingJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLabelingJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLabelingJobsResponse}
     */
    listLabelingJobs(xAmzTarget, listLabelingJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLabelingJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLabelingJobs");
      }
      // verify the required parameter 'listLabelingJobsRequest' is set
      if (listLabelingJobsRequest === undefined || listLabelingJobsRequest === null) {
        throw new Error("Missing the required parameter 'listLabelingJobsRequest' when calling listLabelingJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLabelingJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListLabelingJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLabelingJobsForWorkteam operation.
     * @callback module:api/DefaultApi~listLabelingJobsForWorkteamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLabelingJobsForWorkteamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of labeling jobs assigned to a specified work team.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLabelingJobsForWorkteamRequest} listLabelingJobsForWorkteamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLabelingJobsForWorkteamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLabelingJobsForWorkteamResponse}
     */
    listLabelingJobsForWorkteam(xAmzTarget, listLabelingJobsForWorkteamRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLabelingJobsForWorkteamRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLabelingJobsForWorkteam");
      }
      // verify the required parameter 'listLabelingJobsForWorkteamRequest' is set
      if (listLabelingJobsForWorkteamRequest === undefined || listLabelingJobsForWorkteamRequest === null) {
        throw new Error("Missing the required parameter 'listLabelingJobsForWorkteamRequest' when calling listLabelingJobsForWorkteam");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLabelingJobsForWorkteamResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListLabelingJobsForWorkteam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLineageGroups operation.
     * @callback module:api/DefaultApi~listLineageGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLineageGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of lineage groups shared with your Amazon Web Services account. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html\"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLineageGroupsRequest} listLineageGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLineageGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLineageGroupsResponse}
     */
    listLineageGroups(xAmzTarget, listLineageGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLineageGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLineageGroups");
      }
      // verify the required parameter 'listLineageGroupsRequest' is set
      if (listLineageGroupsRequest === undefined || listLineageGroupsRequest === null) {
        throw new Error("Missing the required parameter 'listLineageGroupsRequest' when calling listLineageGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLineageGroupsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListLineageGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelBiasJobDefinitions operation.
     * @callback module:api/DefaultApi~listModelBiasJobDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelBiasJobDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists model bias jobs definitions that satisfy various filters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelBiasJobDefinitionsRequest} listModelBiasJobDefinitionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelBiasJobDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelBiasJobDefinitionsResponse}
     */
    listModelBiasJobDefinitions(xAmzTarget, listModelBiasJobDefinitionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listModelBiasJobDefinitionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelBiasJobDefinitions");
      }
      // verify the required parameter 'listModelBiasJobDefinitionsRequest' is set
      if (listModelBiasJobDefinitionsRequest === undefined || listModelBiasJobDefinitionsRequest === null) {
        throw new Error("Missing the required parameter 'listModelBiasJobDefinitionsRequest' when calling listModelBiasJobDefinitions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelBiasJobDefinitionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModelBiasJobDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelCardExportJobs operation.
     * @callback module:api/DefaultApi~listModelCardExportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelCardExportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the export jobs for the Amazon SageMaker Model Card.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelCardExportJobsRequest} listModelCardExportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelCardExportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelCardExportJobsResponse}
     */
    listModelCardExportJobs(xAmzTarget, listModelCardExportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listModelCardExportJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelCardExportJobs");
      }
      // verify the required parameter 'listModelCardExportJobsRequest' is set
      if (listModelCardExportJobsRequest === undefined || listModelCardExportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listModelCardExportJobsRequest' when calling listModelCardExportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelCardExportJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModelCardExportJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelCardVersions operation.
     * @callback module:api/DefaultApi~listModelCardVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelCardVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List existing versions of an Amazon SageMaker Model Card.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelCardVersionsRequest} listModelCardVersionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelCardVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelCardVersionsResponse}
     */
    listModelCardVersions(xAmzTarget, listModelCardVersionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listModelCardVersionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelCardVersions");
      }
      // verify the required parameter 'listModelCardVersionsRequest' is set
      if (listModelCardVersionsRequest === undefined || listModelCardVersionsRequest === null) {
        throw new Error("Missing the required parameter 'listModelCardVersionsRequest' when calling listModelCardVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelCardVersionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModelCardVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelCards operation.
     * @callback module:api/DefaultApi~listModelCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelCardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List existing model cards.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelCardsRequest} listModelCardsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelCardsResponse}
     */
    listModelCards(xAmzTarget, listModelCardsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listModelCardsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelCards");
      }
      // verify the required parameter 'listModelCardsRequest' is set
      if (listModelCardsRequest === undefined || listModelCardsRequest === null) {
        throw new Error("Missing the required parameter 'listModelCardsRequest' when calling listModelCards");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelCardsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModelCards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelExplainabilityJobDefinitions operation.
     * @callback module:api/DefaultApi~listModelExplainabilityJobDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelExplainabilityJobDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists model explainability job definitions that satisfy various filters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelExplainabilityJobDefinitionsRequest} listModelExplainabilityJobDefinitionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelExplainabilityJobDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelExplainabilityJobDefinitionsResponse}
     */
    listModelExplainabilityJobDefinitions(xAmzTarget, listModelExplainabilityJobDefinitionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listModelExplainabilityJobDefinitionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelExplainabilityJobDefinitions");
      }
      // verify the required parameter 'listModelExplainabilityJobDefinitionsRequest' is set
      if (listModelExplainabilityJobDefinitionsRequest === undefined || listModelExplainabilityJobDefinitionsRequest === null) {
        throw new Error("Missing the required parameter 'listModelExplainabilityJobDefinitionsRequest' when calling listModelExplainabilityJobDefinitions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelExplainabilityJobDefinitionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModelExplainabilityJobDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelMetadata operation.
     * @callback module:api/DefaultApi~listModelMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the domain, framework, task, and model name of standard machine learning models found in common model zoos.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelMetadataRequest} listModelMetadataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelMetadataResponse}
     */
    listModelMetadata(xAmzTarget, listModelMetadataRequest, opts, callback) {
      opts = opts || {};
      let postBody = listModelMetadataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelMetadata");
      }
      // verify the required parameter 'listModelMetadataRequest' is set
      if (listModelMetadataRequest === undefined || listModelMetadataRequest === null) {
        throw new Error("Missing the required parameter 'listModelMetadataRequest' when calling listModelMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelMetadataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModelMetadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelPackageGroups operation.
     * @callback module:api/DefaultApi~listModelPackageGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelPackageGroupsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the model groups in your Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelPackageGroupsInput} listModelPackageGroupsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelPackageGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelPackageGroupsOutput}
     */
    listModelPackageGroups(xAmzTarget, listModelPackageGroupsInput, opts, callback) {
      opts = opts || {};
      let postBody = listModelPackageGroupsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelPackageGroups");
      }
      // verify the required parameter 'listModelPackageGroupsInput' is set
      if (listModelPackageGroupsInput === undefined || listModelPackageGroupsInput === null) {
        throw new Error("Missing the required parameter 'listModelPackageGroupsInput' when calling listModelPackageGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelPackageGroupsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModelPackageGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelPackages operation.
     * @callback module:api/DefaultApi~listModelPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelPackagesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the model packages that have been created.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelPackagesInput} listModelPackagesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelPackagesOutput}
     */
    listModelPackages(xAmzTarget, listModelPackagesInput, opts, callback) {
      opts = opts || {};
      let postBody = listModelPackagesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelPackages");
      }
      // verify the required parameter 'listModelPackagesInput' is set
      if (listModelPackagesInput === undefined || listModelPackagesInput === null) {
        throw new Error("Missing the required parameter 'listModelPackagesInput' when calling listModelPackages");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelPackagesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModelPackages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModelQualityJobDefinitions operation.
     * @callback module:api/DefaultApi~listModelQualityJobDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelQualityJobDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of model quality monitoring job definitions in your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelQualityJobDefinitionsRequest} listModelQualityJobDefinitionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelQualityJobDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelQualityJobDefinitionsResponse}
     */
    listModelQualityJobDefinitions(xAmzTarget, listModelQualityJobDefinitionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listModelQualityJobDefinitionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModelQualityJobDefinitions");
      }
      // verify the required parameter 'listModelQualityJobDefinitionsRequest' is set
      if (listModelQualityJobDefinitionsRequest === undefined || listModelQualityJobDefinitionsRequest === null) {
        throw new Error("Missing the required parameter 'listModelQualityJobDefinitionsRequest' when calling listModelQualityJobDefinitions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelQualityJobDefinitionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModelQualityJobDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModels operation.
     * @callback module:api/DefaultApi~listModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists models created with the <code>CreateModel</code> API.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListModelsInput} listModelsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelsOutput}
     */
    listModels(xAmzTarget, listModelsInput, opts, callback) {
      opts = opts || {};
      let postBody = listModelsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listModels");
      }
      // verify the required parameter 'listModelsInput' is set
      if (listModelsInput === undefined || listModelsInput === null) {
        throw new Error("Missing the required parameter 'listModelsInput' when calling listModels");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListModelsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListModels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMonitoringAlertHistory operation.
     * @callback module:api/DefaultApi~listMonitoringAlertHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMonitoringAlertHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of past alerts in a model monitoring schedule.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListMonitoringAlertHistoryRequest} listMonitoringAlertHistoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMonitoringAlertHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMonitoringAlertHistoryResponse}
     */
    listMonitoringAlertHistory(xAmzTarget, listMonitoringAlertHistoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMonitoringAlertHistoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listMonitoringAlertHistory");
      }
      // verify the required parameter 'listMonitoringAlertHistoryRequest' is set
      if (listMonitoringAlertHistoryRequest === undefined || listMonitoringAlertHistoryRequest === null) {
        throw new Error("Missing the required parameter 'listMonitoringAlertHistoryRequest' when calling listMonitoringAlertHistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMonitoringAlertHistoryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListMonitoringAlertHistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMonitoringAlerts operation.
     * @callback module:api/DefaultApi~listMonitoringAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMonitoringAlertsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the alerts for a single monitoring schedule.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListMonitoringAlertsRequest} listMonitoringAlertsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMonitoringAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMonitoringAlertsResponse}
     */
    listMonitoringAlerts(xAmzTarget, listMonitoringAlertsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMonitoringAlertsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listMonitoringAlerts");
      }
      // verify the required parameter 'listMonitoringAlertsRequest' is set
      if (listMonitoringAlertsRequest === undefined || listMonitoringAlertsRequest === null) {
        throw new Error("Missing the required parameter 'listMonitoringAlertsRequest' when calling listMonitoringAlerts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMonitoringAlertsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListMonitoringAlerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMonitoringExecutions operation.
     * @callback module:api/DefaultApi~listMonitoringExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMonitoringExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all monitoring job executions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListMonitoringExecutionsRequest} listMonitoringExecutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMonitoringExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMonitoringExecutionsResponse}
     */
    listMonitoringExecutions(xAmzTarget, listMonitoringExecutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMonitoringExecutionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listMonitoringExecutions");
      }
      // verify the required parameter 'listMonitoringExecutionsRequest' is set
      if (listMonitoringExecutionsRequest === undefined || listMonitoringExecutionsRequest === null) {
        throw new Error("Missing the required parameter 'listMonitoringExecutionsRequest' when calling listMonitoringExecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMonitoringExecutionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListMonitoringExecutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMonitoringSchedules operation.
     * @callback module:api/DefaultApi~listMonitoringSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMonitoringSchedulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of all monitoring schedules.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListMonitoringSchedulesRequest} listMonitoringSchedulesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMonitoringSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMonitoringSchedulesResponse}
     */
    listMonitoringSchedules(xAmzTarget, listMonitoringSchedulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMonitoringSchedulesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listMonitoringSchedules");
      }
      // verify the required parameter 'listMonitoringSchedulesRequest' is set
      if (listMonitoringSchedulesRequest === undefined || listMonitoringSchedulesRequest === null) {
        throw new Error("Missing the required parameter 'listMonitoringSchedulesRequest' when calling listMonitoringSchedules");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMonitoringSchedulesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListMonitoringSchedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNotebookInstanceLifecycleConfigs operation.
     * @callback module:api/DefaultApi~listNotebookInstanceLifecycleConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNotebookInstanceLifecycleConfigsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists notebook instance lifestyle configurations created with the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html\">CreateNotebookInstanceLifecycleConfig</a> API.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListNotebookInstanceLifecycleConfigsInput} listNotebookInstanceLifecycleConfigsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listNotebookInstanceLifecycleConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNotebookInstanceLifecycleConfigsOutput}
     */
    listNotebookInstanceLifecycleConfigs(xAmzTarget, listNotebookInstanceLifecycleConfigsInput, opts, callback) {
      opts = opts || {};
      let postBody = listNotebookInstanceLifecycleConfigsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listNotebookInstanceLifecycleConfigs");
      }
      // verify the required parameter 'listNotebookInstanceLifecycleConfigsInput' is set
      if (listNotebookInstanceLifecycleConfigsInput === undefined || listNotebookInstanceLifecycleConfigsInput === null) {
        throw new Error("Missing the required parameter 'listNotebookInstanceLifecycleConfigsInput' when calling listNotebookInstanceLifecycleConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListNotebookInstanceLifecycleConfigsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListNotebookInstanceLifecycleConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNotebookInstances operation.
     * @callback module:api/DefaultApi~listNotebookInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNotebookInstancesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services Region. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListNotebookInstancesInput} listNotebookInstancesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listNotebookInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNotebookInstancesOutput}
     */
    listNotebookInstances(xAmzTarget, listNotebookInstancesInput, opts, callback) {
      opts = opts || {};
      let postBody = listNotebookInstancesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listNotebookInstances");
      }
      // verify the required parameter 'listNotebookInstancesInput' is set
      if (listNotebookInstancesInput === undefined || listNotebookInstancesInput === null) {
        throw new Error("Missing the required parameter 'listNotebookInstancesInput' when calling listNotebookInstances");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListNotebookInstancesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListNotebookInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPipelineExecutionSteps operation.
     * @callback module:api/DefaultApi~listPipelineExecutionStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPipelineExecutionStepsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of <code>PipeLineExecutionStep</code> objects.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPipelineExecutionStepsRequest} listPipelineExecutionStepsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPipelineExecutionStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPipelineExecutionStepsResponse}
     */
    listPipelineExecutionSteps(xAmzTarget, listPipelineExecutionStepsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPipelineExecutionStepsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPipelineExecutionSteps");
      }
      // verify the required parameter 'listPipelineExecutionStepsRequest' is set
      if (listPipelineExecutionStepsRequest === undefined || listPipelineExecutionStepsRequest === null) {
        throw new Error("Missing the required parameter 'listPipelineExecutionStepsRequest' when calling listPipelineExecutionSteps");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPipelineExecutionStepsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListPipelineExecutionSteps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPipelineExecutions operation.
     * @callback module:api/DefaultApi~listPipelineExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPipelineExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the pipeline executions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPipelineExecutionsRequest} listPipelineExecutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPipelineExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPipelineExecutionsResponse}
     */
    listPipelineExecutions(xAmzTarget, listPipelineExecutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPipelineExecutionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPipelineExecutions");
      }
      // verify the required parameter 'listPipelineExecutionsRequest' is set
      if (listPipelineExecutionsRequest === undefined || listPipelineExecutionsRequest === null) {
        throw new Error("Missing the required parameter 'listPipelineExecutionsRequest' when calling listPipelineExecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPipelineExecutionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListPipelineExecutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPipelineParametersForExecution operation.
     * @callback module:api/DefaultApi~listPipelineParametersForExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPipelineParametersForExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of parameters for a pipeline execution.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPipelineParametersForExecutionRequest} listPipelineParametersForExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPipelineParametersForExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPipelineParametersForExecutionResponse}
     */
    listPipelineParametersForExecution(xAmzTarget, listPipelineParametersForExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPipelineParametersForExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPipelineParametersForExecution");
      }
      // verify the required parameter 'listPipelineParametersForExecutionRequest' is set
      if (listPipelineParametersForExecutionRequest === undefined || listPipelineParametersForExecutionRequest === null) {
        throw new Error("Missing the required parameter 'listPipelineParametersForExecutionRequest' when calling listPipelineParametersForExecution");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPipelineParametersForExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListPipelineParametersForExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPipelines operation.
     * @callback module:api/DefaultApi~listPipelinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPipelinesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of pipelines.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPipelinesRequest} listPipelinesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPipelinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPipelinesResponse}
     */
    listPipelines(xAmzTarget, listPipelinesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPipelinesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPipelines");
      }
      // verify the required parameter 'listPipelinesRequest' is set
      if (listPipelinesRequest === undefined || listPipelinesRequest === null) {
        throw new Error("Missing the required parameter 'listPipelinesRequest' when calling listPipelines");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPipelinesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListPipelines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProcessingJobs operation.
     * @callback module:api/DefaultApi~listProcessingJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProcessingJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists processing jobs that satisfy various filters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListProcessingJobsRequest} listProcessingJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listProcessingJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProcessingJobsResponse}
     */
    listProcessingJobs(xAmzTarget, listProcessingJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listProcessingJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listProcessingJobs");
      }
      // verify the required parameter 'listProcessingJobsRequest' is set
      if (listProcessingJobsRequest === undefined || listProcessingJobsRequest === null) {
        throw new Error("Missing the required parameter 'listProcessingJobsRequest' when calling listProcessingJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProcessingJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListProcessingJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjects operation.
     * @callback module:api/DefaultApi~listProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProjectsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the projects in an Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListProjectsInput} listProjectsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProjectsOutput}
     */
    listProjects(xAmzTarget, listProjectsInput, opts, callback) {
      opts = opts || {};
      let postBody = listProjectsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listProjects");
      }
      // verify the required parameter 'listProjectsInput' is set
      if (listProjectsInput === undefined || listProjectsInput === null) {
        throw new Error("Missing the required parameter 'listProjectsInput' when calling listProjects");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProjectsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListProjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResourceCatalogs operation.
     * @callback module:api/DefaultApi~listResourceCatalogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResourceCatalogsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists Amazon SageMaker Catalogs based on given filters and orders. The maximum number of <code>ResourceCatalog</code>s viewable is 1000. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResourceCatalogsRequest} listResourceCatalogsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResourceCatalogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResourceCatalogsResponse}
     */
    listResourceCatalogs(xAmzTarget, listResourceCatalogsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResourceCatalogsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResourceCatalogs");
      }
      // verify the required parameter 'listResourceCatalogsRequest' is set
      if (listResourceCatalogsRequest === undefined || listResourceCatalogsRequest === null) {
        throw new Error("Missing the required parameter 'listResourceCatalogsRequest' when calling listResourceCatalogs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResourceCatalogsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListResourceCatalogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpaces operation.
     * @callback module:api/DefaultApi~listSpacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists spaces.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSpacesRequest} listSpacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpacesResponse}
     */
    listSpaces(xAmzTarget, listSpacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSpacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSpaces");
      }
      // verify the required parameter 'listSpacesRequest' is set
      if (listSpacesRequest === undefined || listSpacesRequest === null) {
        throw new Error("Missing the required parameter 'listSpacesRequest' when calling listSpaces");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSpacesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListSpaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStageDevices operation.
     * @callback module:api/DefaultApi~listStageDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStageDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists devices allocated to the stage, containing detailed device information and deployment status.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListStageDevicesRequest} listStageDevicesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listStageDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStageDevicesResponse}
     */
    listStageDevices(xAmzTarget, listStageDevicesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listStageDevicesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listStageDevices");
      }
      // verify the required parameter 'listStageDevicesRequest' is set
      if (listStageDevicesRequest === undefined || listStageDevicesRequest === null) {
        throw new Error("Missing the required parameter 'listStageDevicesRequest' when calling listStageDevices");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListStageDevicesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListStageDevices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStudioLifecycleConfigs operation.
     * @callback module:api/DefaultApi~listStudioLifecycleConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStudioLifecycleConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListStudioLifecycleConfigsRequest} listStudioLifecycleConfigsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listStudioLifecycleConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStudioLifecycleConfigsResponse}
     */
    listStudioLifecycleConfigs(xAmzTarget, listStudioLifecycleConfigsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listStudioLifecycleConfigsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listStudioLifecycleConfigs");
      }
      // verify the required parameter 'listStudioLifecycleConfigsRequest' is set
      if (listStudioLifecycleConfigsRequest === undefined || listStudioLifecycleConfigsRequest === null) {
        throw new Error("Missing the required parameter 'listStudioLifecycleConfigsRequest' when calling listStudioLifecycleConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListStudioLifecycleConfigsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListStudioLifecycleConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubscribedWorkteams operation.
     * @callback module:api/DefaultApi~listSubscribedWorkteamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSubscribedWorkteamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSubscribedWorkteamsRequest} listSubscribedWorkteamsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSubscribedWorkteamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSubscribedWorkteamsResponse}
     */
    listSubscribedWorkteams(xAmzTarget, listSubscribedWorkteamsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSubscribedWorkteamsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSubscribedWorkteams");
      }
      // verify the required parameter 'listSubscribedWorkteamsRequest' is set
      if (listSubscribedWorkteamsRequest === undefined || listSubscribedWorkteamsRequest === null) {
        throw new Error("Missing the required parameter 'listSubscribedWorkteamsRequest' when calling listSubscribedWorkteams");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSubscribedWorkteamsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListSubscribedWorkteams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTags operation.
     * @callback module:api/DefaultApi~listTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the tags for the specified SageMaker resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsInput} listTagsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsOutput}
     */
    listTags(xAmzTarget, listTagsInput, opts, callback) {
      opts = opts || {};
      let postBody = listTagsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTags");
      }
      // verify the required parameter 'listTagsInput' is set
      if (listTagsInput === undefined || listTagsInput === null) {
        throw new Error("Missing the required parameter 'listTagsInput' when calling listTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrainingJobs operation.
     * @callback module:api/DefaultApi~listTrainingJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTrainingJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists training jobs.</p> <note> <p>When <code>StatusEquals</code> and <code>MaxResults</code> are set at the same time, the <code>MaxResults</code> number of training jobs are first retrieved ignoring the <code>StatusEquals</code> parameter and then they are filtered by the <code>StatusEquals</code> parameter, which is returned as a response.</p> <p>For example, if <code>ListTrainingJobs</code> is invoked with the following parameters:</p> <p> <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code> </p> <p>First, 100 trainings jobs with any status, including those other than <code>InProgress</code>, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of <code>InProgress</code> are returned.</p> <p>You can quickly test the API using the following Amazon Web Services CLI code.</p> <p> <code>aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress</code> </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTrainingJobsRequest} listTrainingJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTrainingJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTrainingJobsResponse}
     */
    listTrainingJobs(xAmzTarget, listTrainingJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTrainingJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTrainingJobs");
      }
      // verify the required parameter 'listTrainingJobsRequest' is set
      if (listTrainingJobsRequest === undefined || listTrainingJobsRequest === null) {
        throw new Error("Missing the required parameter 'listTrainingJobsRequest' when calling listTrainingJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTrainingJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListTrainingJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrainingJobsForHyperParameterTuningJob operation.
     * @callback module:api/DefaultApi~listTrainingJobsForHyperParameterTuningJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTrainingJobsForHyperParameterTuningJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html\">TrainingJobSummary</a> objects that describe the training jobs that a hyperparameter tuning job launched.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTrainingJobsForHyperParameterTuningJobRequest} listTrainingJobsForHyperParameterTuningJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTrainingJobsForHyperParameterTuningJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTrainingJobsForHyperParameterTuningJobResponse}
     */
    listTrainingJobsForHyperParameterTuningJob(xAmzTarget, listTrainingJobsForHyperParameterTuningJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTrainingJobsForHyperParameterTuningJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTrainingJobsForHyperParameterTuningJob");
      }
      // verify the required parameter 'listTrainingJobsForHyperParameterTuningJobRequest' is set
      if (listTrainingJobsForHyperParameterTuningJobRequest === undefined || listTrainingJobsForHyperParameterTuningJobRequest === null) {
        throw new Error("Missing the required parameter 'listTrainingJobsForHyperParameterTuningJobRequest' when calling listTrainingJobsForHyperParameterTuningJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTrainingJobsForHyperParameterTuningJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListTrainingJobsForHyperParameterTuningJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransformJobs operation.
     * @callback module:api/DefaultApi~listTransformJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTransformJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists transform jobs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTransformJobsRequest} listTransformJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTransformJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTransformJobsResponse}
     */
    listTransformJobs(xAmzTarget, listTransformJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTransformJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTransformJobs");
      }
      // verify the required parameter 'listTransformJobsRequest' is set
      if (listTransformJobsRequest === undefined || listTransformJobsRequest === null) {
        throw new Error("Missing the required parameter 'listTransformJobsRequest' when calling listTransformJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTransformJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListTransformJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrialComponents operation.
     * @callback module:api/DefaultApi~listTrialComponentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTrialComponentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:</p> <ul> <li> <p> <code>ExperimentName</code> </p> </li> <li> <p> <code>SourceArn</code> </p> </li> <li> <p> <code>TrialName</code> </p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTrialComponentsRequest} listTrialComponentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTrialComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTrialComponentsResponse}
     */
    listTrialComponents(xAmzTarget, listTrialComponentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTrialComponentsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTrialComponents");
      }
      // verify the required parameter 'listTrialComponentsRequest' is set
      if (listTrialComponentsRequest === undefined || listTrialComponentsRequest === null) {
        throw new Error("Missing the required parameter 'listTrialComponentsRequest' when calling listTrialComponents");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTrialComponentsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListTrialComponents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrials operation.
     * @callback module:api/DefaultApi~listTrialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTrialsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTrialsRequest} listTrialsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTrialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTrialsResponse}
     */
    listTrials(xAmzTarget, listTrialsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTrialsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTrials");
      }
      // verify the required parameter 'listTrialsRequest' is set
      if (listTrialsRequest === undefined || listTrialsRequest === null) {
        throw new Error("Missing the required parameter 'listTrialsRequest' when calling listTrials");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTrialsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListTrials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserProfiles operation.
     * @callback module:api/DefaultApi~listUserProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists user profiles.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListUserProfilesRequest} listUserProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listUserProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserProfilesResponse}
     */
    listUserProfiles(xAmzTarget, listUserProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUserProfilesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listUserProfiles");
      }
      // verify the required parameter 'listUserProfilesRequest' is set
      if (listUserProfilesRequest === undefined || listUserProfilesRequest === null) {
        throw new Error("Missing the required parameter 'listUserProfilesRequest' when calling listUserProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUserProfilesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListUserProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkforces operation.
     * @callback module:api/DefaultApi~listWorkforcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkforcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only have one private workforce per Amazon Web Services Region.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListWorkforcesRequest} listWorkforcesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWorkforcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkforcesResponse}
     */
    listWorkforces(xAmzTarget, listWorkforcesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWorkforcesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listWorkforces");
      }
      // verify the required parameter 'listWorkforcesRequest' is set
      if (listWorkforcesRequest === undefined || listWorkforcesRequest === null) {
        throw new Error("Missing the required parameter 'listWorkforcesRequest' when calling listWorkforces");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWorkforcesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListWorkforces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkteams operation.
     * @callback module:api/DefaultApi~listWorkteamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkteamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListWorkteamsRequest} listWorkteamsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWorkteamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkteamsResponse}
     */
    listWorkteams(xAmzTarget, listWorkteamsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWorkteamsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listWorkteams");
      }
      // verify the required parameter 'listWorkteamsRequest' is set
      if (listWorkteamsRequest === undefined || listWorkteamsRequest === null) {
        throw new Error("Missing the required parameter 'listWorkteamsRequest' when calling listWorkteams");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWorkteamsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.ListWorkteams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putModelPackageGroupPolicy operation.
     * @callback module:api/DefaultApi~putModelPackageGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutModelPackageGroupPolicyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a resouce policy to control access to a model group. For information about resoure policies, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html\">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutModelPackageGroupPolicyInput} putModelPackageGroupPolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putModelPackageGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutModelPackageGroupPolicyOutput}
     */
    putModelPackageGroupPolicy(xAmzTarget, putModelPackageGroupPolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = putModelPackageGroupPolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putModelPackageGroupPolicy");
      }
      // verify the required parameter 'putModelPackageGroupPolicyInput' is set
      if (putModelPackageGroupPolicyInput === undefined || putModelPackageGroupPolicyInput === null) {
        throw new Error("Missing the required parameter 'putModelPackageGroupPolicyInput' when calling putModelPackageGroupPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutModelPackageGroupPolicyOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.PutModelPackageGroupPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryLineage operation.
     * @callback module:api/DefaultApi~queryLineageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryLineageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this action to inspect your lineage and discover relationships between entities. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html\"> Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/QueryLineageRequest} queryLineageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~queryLineageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryLineageResponse}
     */
    queryLineage(xAmzTarget, queryLineageRequest, opts, callback) {
      opts = opts || {};
      let postBody = queryLineageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling queryLineage");
      }
      // verify the required parameter 'queryLineageRequest' is set
      if (queryLineageRequest === undefined || queryLineageRequest === null) {
        throw new Error("Missing the required parameter 'queryLineageRequest' when calling queryLineage");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueryLineageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.QueryLineage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerDevices operation.
     * @callback module:api/DefaultApi~registerDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register devices.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RegisterDevicesRequest} registerDevicesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registerDevices(xAmzTarget, registerDevicesRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerDevicesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling registerDevices");
      }
      // verify the required parameter 'registerDevicesRequest' is set
      if (registerDevicesRequest === undefined || registerDevicesRequest === null) {
        throw new Error("Missing the required parameter 'registerDevicesRequest' when calling registerDevices");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.RegisterDevices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renderUiTemplate operation.
     * @callback module:api/DefaultApi~renderUiTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenderUiTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renders the UI template so that you can preview the worker's experience. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RenderUiTemplateRequest} renderUiTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~renderUiTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenderUiTemplateResponse}
     */
    renderUiTemplate(xAmzTarget, renderUiTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = renderUiTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling renderUiTemplate");
      }
      // verify the required parameter 'renderUiTemplateRequest' is set
      if (renderUiTemplateRequest === undefined || renderUiTemplateRequest === null) {
        throw new Error("Missing the required parameter 'renderUiTemplateRequest' when calling renderUiTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RenderUiTemplateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.RenderUiTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retryPipelineExecution operation.
     * @callback module:api/DefaultApi~retryPipelineExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetryPipelineExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry the execution of the pipeline.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RetryPipelineExecutionRequest} retryPipelineExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~retryPipelineExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetryPipelineExecutionResponse}
     */
    retryPipelineExecution(xAmzTarget, retryPipelineExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = retryPipelineExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling retryPipelineExecution");
      }
      // verify the required parameter 'retryPipelineExecutionRequest' is set
      if (retryPipelineExecutionRequest === undefined || retryPipelineExecutionRequest === null) {
        throw new Error("Missing the required parameter 'retryPipelineExecutionRequest' when calling retryPipelineExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetryPipelineExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.RetryPipelineExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/DefaultApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Finds SageMaker resources that match a search query. Matching resources are returned as a list of <code>SearchRecord</code> objects in the response. You can sort the search results by any resource property in a ascending or descending order.</p> <p>You can query against the following value types: numeric, text, Boolean, and timestamp.</p> <note> <p>The Search API may provide access to otherwise restricted data. See <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html\">Amazon SageMaker API Permissions: Actions, Permissions, and Resources Reference</a> for more information.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SearchRequest} searchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResponse}
     */
    search(xAmzTarget, searchRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling search");
      }
      // verify the required parameter 'searchRequest' is set
      if (searchRequest === undefined || searchRequest === null) {
        throw new Error("Missing the required parameter 'searchRequest' when calling search");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.Search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPipelineExecutionStepFailure operation.
     * @callback module:api/DefaultApi~sendPipelineExecutionStepFailureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendPipelineExecutionStepFailureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notifies the pipeline that the execution of a callback step failed, along with a message describing why. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SendPipelineExecutionStepFailureRequest} sendPipelineExecutionStepFailureRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendPipelineExecutionStepFailureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendPipelineExecutionStepFailureResponse}
     */
    sendPipelineExecutionStepFailure(xAmzTarget, sendPipelineExecutionStepFailureRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendPipelineExecutionStepFailureRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling sendPipelineExecutionStepFailure");
      }
      // verify the required parameter 'sendPipelineExecutionStepFailureRequest' is set
      if (sendPipelineExecutionStepFailureRequest === undefined || sendPipelineExecutionStepFailureRequest === null) {
        throw new Error("Missing the required parameter 'sendPipelineExecutionStepFailureRequest' when calling sendPipelineExecutionStepFailure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendPipelineExecutionStepFailureResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.SendPipelineExecutionStepFailure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPipelineExecutionStepSuccess operation.
     * @callback module:api/DefaultApi~sendPipelineExecutionStepSuccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendPipelineExecutionStepSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notifies the pipeline that the execution of a callback step succeeded and provides a list of the step's output parameters. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SendPipelineExecutionStepSuccessRequest} sendPipelineExecutionStepSuccessRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendPipelineExecutionStepSuccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendPipelineExecutionStepSuccessResponse}
     */
    sendPipelineExecutionStepSuccess(xAmzTarget, sendPipelineExecutionStepSuccessRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendPipelineExecutionStepSuccessRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling sendPipelineExecutionStepSuccess");
      }
      // verify the required parameter 'sendPipelineExecutionStepSuccessRequest' is set
      if (sendPipelineExecutionStepSuccessRequest === undefined || sendPipelineExecutionStepSuccessRequest === null) {
        throw new Error("Missing the required parameter 'sendPipelineExecutionStepSuccessRequest' when calling sendPipelineExecutionStepSuccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendPipelineExecutionStepSuccessResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.SendPipelineExecutionStepSuccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startEdgeDeploymentStage operation.
     * @callback module:api/DefaultApi~startEdgeDeploymentStageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a stage in an edge deployment plan.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartEdgeDeploymentStageRequest} startEdgeDeploymentStageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startEdgeDeploymentStageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startEdgeDeploymentStage(xAmzTarget, startEdgeDeploymentStageRequest, opts, callback) {
      opts = opts || {};
      let postBody = startEdgeDeploymentStageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startEdgeDeploymentStage");
      }
      // verify the required parameter 'startEdgeDeploymentStageRequest' is set
      if (startEdgeDeploymentStageRequest === undefined || startEdgeDeploymentStageRequest === null) {
        throw new Error("Missing the required parameter 'startEdgeDeploymentStageRequest' when calling startEdgeDeploymentStage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StartEdgeDeploymentStage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startInferenceExperiment operation.
     * @callback module:api/DefaultApi~startInferenceExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartInferenceExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an inference experiment.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartInferenceExperimentRequest} startInferenceExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startInferenceExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartInferenceExperimentResponse}
     */
    startInferenceExperiment(xAmzTarget, startInferenceExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = startInferenceExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startInferenceExperiment");
      }
      // verify the required parameter 'startInferenceExperimentRequest' is set
      if (startInferenceExperimentRequest === undefined || startInferenceExperimentRequest === null) {
        throw new Error("Missing the required parameter 'startInferenceExperimentRequest' when calling startInferenceExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartInferenceExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StartInferenceExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startMonitoringSchedule operation.
     * @callback module:api/DefaultApi~startMonitoringScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts a previously stopped monitoring schedule.</p> <note> <p>By default, when you successfully create a new schedule, the status of a monitoring schedule is <code>scheduled</code>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartMonitoringScheduleRequest} startMonitoringScheduleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startMonitoringScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startMonitoringSchedule(xAmzTarget, startMonitoringScheduleRequest, opts, callback) {
      opts = opts || {};
      let postBody = startMonitoringScheduleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startMonitoringSchedule");
      }
      // verify the required parameter 'startMonitoringScheduleRequest' is set
      if (startMonitoringScheduleRequest === undefined || startMonitoringScheduleRequest === null) {
        throw new Error("Missing the required parameter 'startMonitoringScheduleRequest' when calling startMonitoringSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StartMonitoringSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startNotebookInstance operation.
     * @callback module:api/DefaultApi~startNotebookInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Launches an ML compute instance with the latest version of the libraries and attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the notebook instance status to <code>InService</code>. A notebook instance's status must be <code>InService</code> before you can connect to your Jupyter notebook. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartNotebookInstanceInput} startNotebookInstanceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startNotebookInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startNotebookInstance(xAmzTarget, startNotebookInstanceInput, opts, callback) {
      opts = opts || {};
      let postBody = startNotebookInstanceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startNotebookInstance");
      }
      // verify the required parameter 'startNotebookInstanceInput' is set
      if (startNotebookInstanceInput === undefined || startNotebookInstanceInput === null) {
        throw new Error("Missing the required parameter 'startNotebookInstanceInput' when calling startNotebookInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StartNotebookInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startPipelineExecution operation.
     * @callback module:api/DefaultApi~startPipelineExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartPipelineExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a pipeline execution.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartPipelineExecutionRequest} startPipelineExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startPipelineExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartPipelineExecutionResponse}
     */
    startPipelineExecution(xAmzTarget, startPipelineExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = startPipelineExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startPipelineExecution");
      }
      // verify the required parameter 'startPipelineExecutionRequest' is set
      if (startPipelineExecutionRequest === undefined || startPipelineExecutionRequest === null) {
        throw new Error("Missing the required parameter 'startPipelineExecutionRequest' when calling startPipelineExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartPipelineExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StartPipelineExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopAutoMLJob operation.
     * @callback module:api/DefaultApi~stopAutoMLJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A method for forcing a running job to shut down.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopAutoMLJobRequest} stopAutoMLJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopAutoMLJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopAutoMLJob(xAmzTarget, stopAutoMLJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopAutoMLJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopAutoMLJob");
      }
      // verify the required parameter 'stopAutoMLJobRequest' is set
      if (stopAutoMLJobRequest === undefined || stopAutoMLJobRequest === null) {
        throw new Error("Missing the required parameter 'stopAutoMLJobRequest' when calling stopAutoMLJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopAutoMLJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopCompilationJob operation.
     * @callback module:api/DefaultApi~stopCompilationJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops a model compilation job.</p> <p> To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the job down. If the job hasn't stopped, it sends the SIGKILL signal.</p> <p>When it receives a <code>StopCompilationJob</code> request, Amazon SageMaker changes the <code>CompilationJobStatus</code> of the job to <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the <code>CompilationJobStatus</code> to <code>Stopped</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopCompilationJobRequest} stopCompilationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopCompilationJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopCompilationJob(xAmzTarget, stopCompilationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopCompilationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopCompilationJob");
      }
      // verify the required parameter 'stopCompilationJobRequest' is set
      if (stopCompilationJobRequest === undefined || stopCompilationJobRequest === null) {
        throw new Error("Missing the required parameter 'stopCompilationJobRequest' when calling stopCompilationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopCompilationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopEdgeDeploymentStage operation.
     * @callback module:api/DefaultApi~stopEdgeDeploymentStageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a stage in an edge deployment plan.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopEdgeDeploymentStageRequest} stopEdgeDeploymentStageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopEdgeDeploymentStageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopEdgeDeploymentStage(xAmzTarget, stopEdgeDeploymentStageRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopEdgeDeploymentStageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopEdgeDeploymentStage");
      }
      // verify the required parameter 'stopEdgeDeploymentStageRequest' is set
      if (stopEdgeDeploymentStageRequest === undefined || stopEdgeDeploymentStageRequest === null) {
        throw new Error("Missing the required parameter 'stopEdgeDeploymentStageRequest' when calling stopEdgeDeploymentStage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopEdgeDeploymentStage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopEdgePackagingJob operation.
     * @callback module:api/DefaultApi~stopEdgePackagingJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request to stop an edge packaging job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopEdgePackagingJobRequest} stopEdgePackagingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopEdgePackagingJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopEdgePackagingJob(xAmzTarget, stopEdgePackagingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopEdgePackagingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopEdgePackagingJob");
      }
      // verify the required parameter 'stopEdgePackagingJobRequest' is set
      if (stopEdgePackagingJobRequest === undefined || stopEdgePackagingJobRequest === null) {
        throw new Error("Missing the required parameter 'stopEdgePackagingJobRequest' when calling stopEdgePackagingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopEdgePackagingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopHyperParameterTuningJob operation.
     * @callback module:api/DefaultApi~stopHyperParameterTuningJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched.</p> <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the <code>Stopped</code> state, it releases all reserved resources for the tuning job.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopHyperParameterTuningJobRequest} stopHyperParameterTuningJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopHyperParameterTuningJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopHyperParameterTuningJob(xAmzTarget, stopHyperParameterTuningJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopHyperParameterTuningJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopHyperParameterTuningJob");
      }
      // verify the required parameter 'stopHyperParameterTuningJobRequest' is set
      if (stopHyperParameterTuningJobRequest === undefined || stopHyperParameterTuningJobRequest === null) {
        throw new Error("Missing the required parameter 'stopHyperParameterTuningJobRequest' when calling stopHyperParameterTuningJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopHyperParameterTuningJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopInferenceExperiment operation.
     * @callback module:api/DefaultApi~stopInferenceExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopInferenceExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an inference experiment.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopInferenceExperimentRequest} stopInferenceExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopInferenceExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopInferenceExperimentResponse}
     */
    stopInferenceExperiment(xAmzTarget, stopInferenceExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopInferenceExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopInferenceExperiment");
      }
      // verify the required parameter 'stopInferenceExperimentRequest' is set
      if (stopInferenceExperimentRequest === undefined || stopInferenceExperimentRequest === null) {
        throw new Error("Missing the required parameter 'stopInferenceExperimentRequest' when calling stopInferenceExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopInferenceExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopInferenceExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopInferenceRecommendationsJob operation.
     * @callback module:api/DefaultApi~stopInferenceRecommendationsJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an Inference Recommender job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopInferenceRecommendationsJobRequest} stopInferenceRecommendationsJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopInferenceRecommendationsJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopInferenceRecommendationsJob(xAmzTarget, stopInferenceRecommendationsJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopInferenceRecommendationsJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopInferenceRecommendationsJob");
      }
      // verify the required parameter 'stopInferenceRecommendationsJobRequest' is set
      if (stopInferenceRecommendationsJobRequest === undefined || stopInferenceRecommendationsJobRequest === null) {
        throw new Error("Missing the required parameter 'stopInferenceRecommendationsJobRequest' when calling stopInferenceRecommendationsJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopInferenceRecommendationsJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopLabelingJob operation.
     * @callback module:api/DefaultApi~stopLabelingJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a running labeling job. A job that is stopped cannot be restarted. Any results obtained before the job is stopped are placed in the Amazon S3 output bucket.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopLabelingJobRequest} stopLabelingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopLabelingJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopLabelingJob(xAmzTarget, stopLabelingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopLabelingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopLabelingJob");
      }
      // verify the required parameter 'stopLabelingJobRequest' is set
      if (stopLabelingJobRequest === undefined || stopLabelingJobRequest === null) {
        throw new Error("Missing the required parameter 'stopLabelingJobRequest' when calling stopLabelingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopLabelingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopMonitoringSchedule operation.
     * @callback module:api/DefaultApi~stopMonitoringScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a previously started monitoring schedule.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopMonitoringScheduleRequest} stopMonitoringScheduleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopMonitoringScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopMonitoringSchedule(xAmzTarget, stopMonitoringScheduleRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopMonitoringScheduleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopMonitoringSchedule");
      }
      // verify the required parameter 'stopMonitoringScheduleRequest' is set
      if (stopMonitoringScheduleRequest === undefined || stopMonitoringScheduleRequest === null) {
        throw new Error("Missing the required parameter 'stopMonitoringScheduleRequest' when calling stopMonitoringSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopMonitoringSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopNotebookInstance operation.
     * @callback module:api/DefaultApi~stopNotebookInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call <code>StopNotebookInstance</code>.</p> <p>To access data on the ML storage volume for a notebook instance that has been terminated, call the <code>StartNotebookInstance</code> API. <code>StartNotebookInstance</code> launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopNotebookInstanceInput} stopNotebookInstanceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopNotebookInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopNotebookInstance(xAmzTarget, stopNotebookInstanceInput, opts, callback) {
      opts = opts || {};
      let postBody = stopNotebookInstanceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopNotebookInstance");
      }
      // verify the required parameter 'stopNotebookInstanceInput' is set
      if (stopNotebookInstanceInput === undefined || stopNotebookInstanceInput === null) {
        throw new Error("Missing the required parameter 'stopNotebookInstanceInput' when calling stopNotebookInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopNotebookInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPipelineExecution operation.
     * @callback module:api/DefaultApi~stopPipelineExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopPipelineExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops a pipeline execution.</p> <p> <b>Callback Step</b> </p> <p>A pipeline execution won't stop while a callback step is running. When you call <code>StopPipelineExecution</code> on a pipeline execution with a running callback step, SageMaker Pipelines sends an additional Amazon SQS message to the specified SQS queue. The body of the SQS message contains a \"Status\" field which is set to \"Stopping\".</p> <p>You should add logic to your Amazon SQS message consumer to take any needed action (for example, resource cleanup) upon receipt of the message followed by a call to <code>SendPipelineExecutionStepSuccess</code> or <code>SendPipelineExecutionStepFailure</code>.</p> <p>Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.</p> <p> <b>Lambda Step</b> </p> <p>A pipeline execution can't be stopped while a lambda step is running because the Lambda function invoked by the lambda step can't be stopped. If you attempt to stop the execution while the Lambda function is running, the pipeline waits for the Lambda function to finish or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function finishes, the pipeline execution status is <code>Stopped</code>. If the timeout is hit the pipeline execution status is <code>Failed</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopPipelineExecutionRequest} stopPipelineExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopPipelineExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopPipelineExecutionResponse}
     */
    stopPipelineExecution(xAmzTarget, stopPipelineExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopPipelineExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopPipelineExecution");
      }
      // verify the required parameter 'stopPipelineExecutionRequest' is set
      if (stopPipelineExecutionRequest === undefined || stopPipelineExecutionRequest === null) {
        throw new Error("Missing the required parameter 'stopPipelineExecutionRequest' when calling stopPipelineExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopPipelineExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopPipelineExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopProcessingJob operation.
     * @callback module:api/DefaultApi~stopProcessingJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a processing job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopProcessingJobRequest} stopProcessingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopProcessingJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopProcessingJob(xAmzTarget, stopProcessingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopProcessingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopProcessingJob");
      }
      // verify the required parameter 'stopProcessingJobRequest' is set
      if (stopProcessingJobRequest === undefined || stopProcessingJobRequest === null) {
        throw new Error("Missing the required parameter 'stopProcessingJobRequest' when calling stopProcessingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopProcessingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopTrainingJob operation.
     * @callback module:api/DefaultApi~stopTrainingJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops a training job. To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts, so the results of the training is not lost. </p> <p>When it receives a <code>StopTrainingJob</code> request, SageMaker changes the status of the job to <code>Stopping</code>. After SageMaker stops the job, it sets the status to <code>Stopped</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopTrainingJobRequest} stopTrainingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopTrainingJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopTrainingJob(xAmzTarget, stopTrainingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopTrainingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopTrainingJob");
      }
      // verify the required parameter 'stopTrainingJobRequest' is set
      if (stopTrainingJobRequest === undefined || stopTrainingJobRequest === null) {
        throw new Error("Missing the required parameter 'stopTrainingJobRequest' when calling stopTrainingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopTrainingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopTransformJob operation.
     * @callback module:api/DefaultApi~stopTransformJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops a batch transform job.</p> <p>When Amazon SageMaker receives a <code>StopTransformJob</code> request, the status of the job changes to <code>Stopping</code>. After Amazon SageMaker stops the job, the status is set to <code>Stopped</code>. When you stop a batch transform job before it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopTransformJobRequest} stopTransformJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopTransformJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopTransformJob(xAmzTarget, stopTransformJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopTransformJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopTransformJob");
      }
      // verify the required parameter 'stopTransformJobRequest' is set
      if (stopTransformJobRequest === undefined || stopTransformJobRequest === null) {
        throw new Error("Missing the required parameter 'stopTransformJobRequest' when calling stopTransformJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.StopTransformJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAction operation.
     * @callback module:api/DefaultApi~updateActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an action.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateActionRequest} updateActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateActionResponse}
     */
    updateAction(xAmzTarget, updateActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateActionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAction");
      }
      // verify the required parameter 'updateActionRequest' is set
      if (updateActionRequest === undefined || updateActionRequest === null) {
        throw new Error("Missing the required parameter 'updateActionRequest' when calling updateAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateActionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppImageConfig operation.
     * @callback module:api/DefaultApi~updateAppImageConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAppImageConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of an AppImageConfig.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAppImageConfigRequest} updateAppImageConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAppImageConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAppImageConfigResponse}
     */
    updateAppImageConfig(xAmzTarget, updateAppImageConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAppImageConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAppImageConfig");
      }
      // verify the required parameter 'updateAppImageConfigRequest' is set
      if (updateAppImageConfigRequest === undefined || updateAppImageConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateAppImageConfigRequest' when calling updateAppImageConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAppImageConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateAppImageConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArtifact operation.
     * @callback module:api/DefaultApi~updateArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateArtifactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an artifact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateArtifactRequest} updateArtifactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateArtifactResponse}
     */
    updateArtifact(xAmzTarget, updateArtifactRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateArtifactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateArtifact");
      }
      // verify the required parameter 'updateArtifactRequest' is set
      if (updateArtifactRequest === undefined || updateArtifactRequest === null) {
        throw new Error("Missing the required parameter 'updateArtifactRequest' when calling updateArtifact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateArtifactResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateArtifact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCodeRepository operation.
     * @callback module:api/DefaultApi~updateCodeRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCodeRepositoryOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified Git repository with the specified values.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateCodeRepositoryInput} updateCodeRepositoryInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateCodeRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCodeRepositoryOutput}
     */
    updateCodeRepository(xAmzTarget, updateCodeRepositoryInput, opts, callback) {
      opts = opts || {};
      let postBody = updateCodeRepositoryInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateCodeRepository");
      }
      // verify the required parameter 'updateCodeRepositoryInput' is set
      if (updateCodeRepositoryInput === undefined || updateCodeRepositoryInput === null) {
        throw new Error("Missing the required parameter 'updateCodeRepositoryInput' when calling updateCodeRepository");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCodeRepositoryOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateCodeRepository', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContext operation.
     * @callback module:api/DefaultApi~updateContextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateContextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a context.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateContextRequest} updateContextRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateContextResponse}
     */
    updateContext(xAmzTarget, updateContextRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContextRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateContext");
      }
      // verify the required parameter 'updateContextRequest' is set
      if (updateContextRequest === undefined || updateContextRequest === null) {
        throw new Error("Missing the required parameter 'updateContextRequest' when calling updateContext");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateContextResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateContext', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceFleet operation.
     * @callback module:api/DefaultApi~updateDeviceFleetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a fleet of devices.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDeviceFleetRequest} updateDeviceFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDeviceFleetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDeviceFleet(xAmzTarget, updateDeviceFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDeviceFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDeviceFleet");
      }
      // verify the required parameter 'updateDeviceFleetRequest' is set
      if (updateDeviceFleetRequest === undefined || updateDeviceFleetRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceFleetRequest' when calling updateDeviceFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateDeviceFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDevices operation.
     * @callback module:api/DefaultApi~updateDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates one or more devices in a fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDevicesRequest} updateDevicesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDevices(xAmzTarget, updateDevicesRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDevicesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDevices");
      }
      // verify the required parameter 'updateDevicesRequest' is set
      if (updateDevicesRequest === undefined || updateDevicesRequest === null) {
        throw new Error("Missing the required parameter 'updateDevicesRequest' when calling updateDevices");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateDevices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomain operation.
     * @callback module:api/DefaultApi~updateDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the default settings for new user profiles in the domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDomainRequest} updateDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainResponse}
     */
    updateDomain(xAmzTarget, updateDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDomain");
      }
      // verify the required parameter 'updateDomainRequest' is set
      if (updateDomainRequest === undefined || updateDomainRequest === null) {
        throw new Error("Missing the required parameter 'updateDomainRequest' when calling updateDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEndpoint operation.
     * @callback module:api/DefaultApi~updateEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deploys the new <code>EndpointConfig</code> specified in the request, switches to using newly created endpoint, and then deletes resources provisioned for the endpoint using the previous <code>EndpointConfig</code> (there is no availability loss). </p> <p>When SageMaker receives the request, it sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html\">DescribeEndpoint</a> API. </p> <note> <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p> <p>If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateEndpointInput} updateEndpointInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEndpointOutput}
     */
    updateEndpoint(xAmzTarget, updateEndpointInput, opts, callback) {
      opts = opts || {};
      let postBody = updateEndpointInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateEndpoint");
      }
      // verify the required parameter 'updateEndpointInput' is set
      if (updateEndpointInput === undefined || updateEndpointInput === null) {
        throw new Error("Missing the required parameter 'updateEndpointInput' when calling updateEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEndpointOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEndpointWeightsAndCapacities operation.
     * @callback module:api/DefaultApi~updateEndpointWeightsAndCapacitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEndpointWeightsAndCapacitiesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html\">DescribeEndpoint</a> API. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateEndpointWeightsAndCapacitiesInput} updateEndpointWeightsAndCapacitiesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEndpointWeightsAndCapacitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEndpointWeightsAndCapacitiesOutput}
     */
    updateEndpointWeightsAndCapacities(xAmzTarget, updateEndpointWeightsAndCapacitiesInput, opts, callback) {
      opts = opts || {};
      let postBody = updateEndpointWeightsAndCapacitiesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateEndpointWeightsAndCapacities");
      }
      // verify the required parameter 'updateEndpointWeightsAndCapacitiesInput' is set
      if (updateEndpointWeightsAndCapacitiesInput === undefined || updateEndpointWeightsAndCapacitiesInput === null) {
        throw new Error("Missing the required parameter 'updateEndpointWeightsAndCapacitiesInput' when calling updateEndpointWeightsAndCapacities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEndpointWeightsAndCapacitiesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateEndpointWeightsAndCapacities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperiment operation.
     * @callback module:api/DefaultApi~updateExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds, updates, or removes the description of an experiment. Updates the display name of an experiment.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateExperimentRequest} updateExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateExperimentResponse}
     */
    updateExperiment(xAmzTarget, updateExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateExperiment");
      }
      // verify the required parameter 'updateExperimentRequest' is set
      if (updateExperimentRequest === undefined || updateExperimentRequest === null) {
        throw new Error("Missing the required parameter 'updateExperimentRequest' when calling updateExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFeatureGroup operation.
     * @callback module:api/DefaultApi~updateFeatureGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFeatureGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the feature group by either adding features or updating the online store configuration. Use one of the following request parameters at a time while using the <code>UpdateFeatureGroup</code> API.</p> <p>You can add features for your feature group using the <code>FeatureAdditions</code> request parameter. Features cannot be removed from a feature group.</p> <p>You can update the online store configuration by using the <code>OnlineStoreConfig</code> request parameter. If a <code>TtlDuration</code> is specified, the default <code>TtlDuration</code> applies for all records added to the feature group <i>after the feature group is updated</i>. If a record level <code>TtlDuration</code> exists from using the <code>PutRecord</code> API, the record level <code>TtlDuration</code> applies to that record instead of the default <code>TtlDuration</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFeatureGroupRequest} updateFeatureGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFeatureGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFeatureGroupResponse}
     */
    updateFeatureGroup(xAmzTarget, updateFeatureGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFeatureGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFeatureGroup");
      }
      // verify the required parameter 'updateFeatureGroupRequest' is set
      if (updateFeatureGroupRequest === undefined || updateFeatureGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateFeatureGroupRequest' when calling updateFeatureGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFeatureGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateFeatureGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFeatureMetadata operation.
     * @callback module:api/DefaultApi~updateFeatureMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the description and parameters of the feature group.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFeatureMetadataRequest} updateFeatureMetadataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFeatureMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFeatureMetadata(xAmzTarget, updateFeatureMetadataRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFeatureMetadataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFeatureMetadata");
      }
      // verify the required parameter 'updateFeatureMetadataRequest' is set
      if (updateFeatureMetadataRequest === undefined || updateFeatureMetadataRequest === null) {
        throw new Error("Missing the required parameter 'updateFeatureMetadataRequest' when calling updateFeatureMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateFeatureMetadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHub operation.
     * @callback module:api/DefaultApi~updateHubCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateHubResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateHubRequest} updateHubRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateHubCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateHubResponse}
     */
    updateHub(xAmzTarget, updateHubRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateHubRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateHub");
      }
      // verify the required parameter 'updateHubRequest' is set
      if (updateHubRequest === undefined || updateHubRequest === null) {
        throw new Error("Missing the required parameter 'updateHubRequest' when calling updateHub");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateHubResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateHub', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateImage operation.
     * @callback module:api/DefaultApi~updateImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of a SageMaker image. To change the image's tags, use the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html\">AddTags</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteTags.html\">DeleteTags</a> APIs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateImageRequest} updateImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateImageResponse}
     */
    updateImage(xAmzTarget, updateImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateImage");
      }
      // verify the required parameter 'updateImageRequest' is set
      if (updateImageRequest === undefined || updateImageRequest === null) {
        throw new Error("Missing the required parameter 'updateImageRequest' when calling updateImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateImageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateImageVersion operation.
     * @callback module:api/DefaultApi~updateImageVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateImageVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of a SageMaker image version.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateImageVersionRequest} updateImageVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateImageVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateImageVersionResponse}
     */
    updateImageVersion(xAmzTarget, updateImageVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateImageVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateImageVersion");
      }
      // verify the required parameter 'updateImageVersionRequest' is set
      if (updateImageVersionRequest === undefined || updateImageVersionRequest === null) {
        throw new Error("Missing the required parameter 'updateImageVersionRequest' when calling updateImageVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateImageVersionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateImageVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInferenceExperiment operation.
     * @callback module:api/DefaultApi~updateInferenceExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInferenceExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Updates an inference experiment that you created. The status of the inference experiment has to be either <code>Created</code>, <code>Running</code>. For more information on the status of an inference experiment, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeInferenceExperiment.html\">DescribeInferenceExperiment</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateInferenceExperimentRequest} updateInferenceExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInferenceExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInferenceExperimentResponse}
     */
    updateInferenceExperiment(xAmzTarget, updateInferenceExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInferenceExperimentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateInferenceExperiment");
      }
      // verify the required parameter 'updateInferenceExperimentRequest' is set
      if (updateInferenceExperimentRequest === undefined || updateInferenceExperimentRequest === null) {
        throw new Error("Missing the required parameter 'updateInferenceExperimentRequest' when calling updateInferenceExperiment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateInferenceExperimentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateInferenceExperiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelCard operation.
     * @callback module:api/DefaultApi~updateModelCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateModelCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update an Amazon SageMaker Model Card.</p> <important> <p>You cannot update both model card content and model card status in a single call.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateModelCardRequest} updateModelCardRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateModelCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateModelCardResponse}
     */
    updateModelCard(xAmzTarget, updateModelCardRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateModelCardRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateModelCard");
      }
      // verify the required parameter 'updateModelCardRequest' is set
      if (updateModelCardRequest === undefined || updateModelCardRequest === null) {
        throw new Error("Missing the required parameter 'updateModelCardRequest' when calling updateModelCard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateModelCardResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateModelCard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelPackage operation.
     * @callback module:api/DefaultApi~updateModelPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateModelPackageOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a versioned model.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateModelPackageInput} updateModelPackageInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateModelPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateModelPackageOutput}
     */
    updateModelPackage(xAmzTarget, updateModelPackageInput, opts, callback) {
      opts = opts || {};
      let postBody = updateModelPackageInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateModelPackage");
      }
      // verify the required parameter 'updateModelPackageInput' is set
      if (updateModelPackageInput === undefined || updateModelPackageInput === null) {
        throw new Error("Missing the required parameter 'updateModelPackageInput' when calling updateModelPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateModelPackageOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateModelPackage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMonitoringAlert operation.
     * @callback module:api/DefaultApi~updateMonitoringAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMonitoringAlertResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the parameters of a model monitor alert.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateMonitoringAlertRequest} updateMonitoringAlertRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMonitoringAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMonitoringAlertResponse}
     */
    updateMonitoringAlert(xAmzTarget, updateMonitoringAlertRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMonitoringAlertRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateMonitoringAlert");
      }
      // verify the required parameter 'updateMonitoringAlertRequest' is set
      if (updateMonitoringAlertRequest === undefined || updateMonitoringAlertRequest === null) {
        throw new Error("Missing the required parameter 'updateMonitoringAlertRequest' when calling updateMonitoringAlert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMonitoringAlertResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateMonitoringAlert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMonitoringSchedule operation.
     * @callback module:api/DefaultApi~updateMonitoringScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMonitoringScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a previously created schedule.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateMonitoringScheduleRequest} updateMonitoringScheduleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMonitoringScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMonitoringScheduleResponse}
     */
    updateMonitoringSchedule(xAmzTarget, updateMonitoringScheduleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMonitoringScheduleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateMonitoringSchedule");
      }
      // verify the required parameter 'updateMonitoringScheduleRequest' is set
      if (updateMonitoringScheduleRequest === undefined || updateMonitoringScheduleRequest === null) {
        throw new Error("Missing the required parameter 'updateMonitoringScheduleRequest' when calling updateMonitoringSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMonitoringScheduleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateMonitoringSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotebookInstance operation.
     * @callback module:api/DefaultApi~updateNotebookInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a notebook instance. NotebookInstance updates include upgrading or downgrading the ML compute instance used for your notebook instance to accommodate changes in your workload requirements.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateNotebookInstanceInput} updateNotebookInstanceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateNotebookInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNotebookInstance(xAmzTarget, updateNotebookInstanceInput, opts, callback) {
      opts = opts || {};
      let postBody = updateNotebookInstanceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateNotebookInstance");
      }
      // verify the required parameter 'updateNotebookInstanceInput' is set
      if (updateNotebookInstanceInput === undefined || updateNotebookInstanceInput === null) {
        throw new Error("Missing the required parameter 'updateNotebookInstanceInput' when calling updateNotebookInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateNotebookInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotebookInstanceLifecycleConfig operation.
     * @callback module:api/DefaultApi~updateNotebookInstanceLifecycleConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a notebook instance lifecycle configuration created with the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html\">CreateNotebookInstanceLifecycleConfig</a> API.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateNotebookInstanceLifecycleConfigInput} updateNotebookInstanceLifecycleConfigInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateNotebookInstanceLifecycleConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNotebookInstanceLifecycleConfig(xAmzTarget, updateNotebookInstanceLifecycleConfigInput, opts, callback) {
      opts = opts || {};
      let postBody = updateNotebookInstanceLifecycleConfigInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateNotebookInstanceLifecycleConfig");
      }
      // verify the required parameter 'updateNotebookInstanceLifecycleConfigInput' is set
      if (updateNotebookInstanceLifecycleConfigInput === undefined || updateNotebookInstanceLifecycleConfigInput === null) {
        throw new Error("Missing the required parameter 'updateNotebookInstanceLifecycleConfigInput' when calling updateNotebookInstanceLifecycleConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateNotebookInstanceLifecycleConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePipeline operation.
     * @callback module:api/DefaultApi~updatePipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePipelineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a pipeline.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePipelineRequest} updatePipelineRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePipelineResponse}
     */
    updatePipeline(xAmzTarget, updatePipelineRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePipelineRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePipeline");
      }
      // verify the required parameter 'updatePipelineRequest' is set
      if (updatePipelineRequest === undefined || updatePipelineRequest === null) {
        throw new Error("Missing the required parameter 'updatePipelineRequest' when calling updatePipeline");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePipelineResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdatePipeline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePipelineExecution operation.
     * @callback module:api/DefaultApi~updatePipelineExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePipelineExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a pipeline execution.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePipelineExecutionRequest} updatePipelineExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePipelineExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePipelineExecutionResponse}
     */
    updatePipelineExecution(xAmzTarget, updatePipelineExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePipelineExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePipelineExecution");
      }
      // verify the required parameter 'updatePipelineExecutionRequest' is set
      if (updatePipelineExecutionRequest === undefined || updatePipelineExecutionRequest === null) {
        throw new Error("Missing the required parameter 'updatePipelineExecutionRequest' when calling updatePipelineExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePipelineExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdatePipelineExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/DefaultApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProjectOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a machine learning (ML) project that is created from a template that sets up an ML pipeline from training to deploying an approved model.</p> <note> <p>You must not update a project that is in use. If you update the <code>ServiceCatalogProvisioningUpdateDetails</code> of a project that is active or being created, or updated, you may lose resources already created by the project.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProjectInput} updateProjectInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProjectOutput}
     */
    updateProject(xAmzTarget, updateProjectInput, opts, callback) {
      opts = opts || {};
      let postBody = updateProjectInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProject");
      }
      // verify the required parameter 'updateProjectInput' is set
      if (updateProjectInput === undefined || updateProjectInput === null) {
        throw new Error("Missing the required parameter 'updateProjectInput' when calling updateProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProjectOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpace operation.
     * @callback module:api/DefaultApi~updateSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSpaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the settings of a space.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateSpaceRequest} updateSpaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSpaceResponse}
     */
    updateSpace(xAmzTarget, updateSpaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSpaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateSpace");
      }
      // verify the required parameter 'updateSpaceRequest' is set
      if (updateSpaceRequest === undefined || updateSpaceRequest === null) {
        throw new Error("Missing the required parameter 'updateSpaceRequest' when calling updateSpace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSpaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateSpace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrainingJob operation.
     * @callback module:api/DefaultApi~updateTrainingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTrainingJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model training job to request a new Debugger profiling configuration or to change warm pool retention length.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTrainingJobRequest} updateTrainingJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTrainingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTrainingJobResponse}
     */
    updateTrainingJob(xAmzTarget, updateTrainingJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTrainingJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTrainingJob");
      }
      // verify the required parameter 'updateTrainingJobRequest' is set
      if (updateTrainingJobRequest === undefined || updateTrainingJobRequest === null) {
        throw new Error("Missing the required parameter 'updateTrainingJobRequest' when calling updateTrainingJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTrainingJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateTrainingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrial operation.
     * @callback module:api/DefaultApi~updateTrialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTrialResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the display name of a trial.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTrialRequest} updateTrialRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTrialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTrialResponse}
     */
    updateTrial(xAmzTarget, updateTrialRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTrialRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTrial");
      }
      // verify the required parameter 'updateTrialRequest' is set
      if (updateTrialRequest === undefined || updateTrialRequest === null) {
        throw new Error("Missing the required parameter 'updateTrialRequest' when calling updateTrial");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTrialResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateTrial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrialComponent operation.
     * @callback module:api/DefaultApi~updateTrialComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTrialComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates one or more properties of a trial component.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTrialComponentRequest} updateTrialComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTrialComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTrialComponentResponse}
     */
    updateTrialComponent(xAmzTarget, updateTrialComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTrialComponentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTrialComponent");
      }
      // verify the required parameter 'updateTrialComponentRequest' is set
      if (updateTrialComponentRequest === undefined || updateTrialComponentRequest === null) {
        throw new Error("Missing the required parameter 'updateTrialComponentRequest' when calling updateTrialComponent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTrialComponentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateTrialComponent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserProfile operation.
     * @callback module:api/DefaultApi~updateUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUserProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a user profile.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateUserProfileRequest} updateUserProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUserProfileResponse}
     */
    updateUserProfile(xAmzTarget, updateUserProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateUserProfile");
      }
      // verify the required parameter 'updateUserProfileRequest' is set
      if (updateUserProfileRequest === undefined || updateUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateUserProfileRequest' when calling updateUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUserProfileResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateUserProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkforce operation.
     * @callback module:api/DefaultApi~updateWorkforceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateWorkforceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Use this operation to update your workforce. You can use this operation to require that workers use specific IP addresses to work on tasks and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.</p> <p>The worker portal is now supported in VPC and public internet.</p> <p> Use <code>SourceIpConfig</code> to restrict worker access to tasks to a specific range of IP addresses. You specify allowed IP addresses by creating a list of up to ten <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">CIDRs</a>. By default, a workforce isn't restricted to specific IP addresses. If you specify a range of IP addresses, workers who attempt to access tasks using any IP address outside the specified range are denied and get a <code>Not Found</code> error message on the worker portal.</p> <p>To restrict access to all the workers in public internet, add the <code>SourceIpConfig</code> CIDR value as \"10.0.0.0/16\".</p> <important> <p>Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.</p> </important> <p>Use <code>OidcConfig</code> to update the configuration of a workforce created using your own OIDC IdP. </p> <important> <p>You can only update your OIDC IdP configuration when there are no work teams associated with your workforce. You can delete work teams using the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html\">DeleteWorkteam</a> operation.</p> </important> <p>After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you can view details about your update workforce using the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeWorkforce.html\">DescribeWorkforce</a> operation.</p> <important> <p>This operation only applies to private workforces.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateWorkforceRequest} updateWorkforceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWorkforceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateWorkforceResponse}
     */
    updateWorkforce(xAmzTarget, updateWorkforceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWorkforceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateWorkforce");
      }
      // verify the required parameter 'updateWorkforceRequest' is set
      if (updateWorkforceRequest === undefined || updateWorkforceRequest === null) {
        throw new Error("Missing the required parameter 'updateWorkforceRequest' when calling updateWorkforce");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWorkforceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateWorkforce', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkteam operation.
     * @callback module:api/DefaultApi~updateWorkteamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateWorkteamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing work team with new member definitions or description.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateWorkteamRequest} updateWorkteamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWorkteamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateWorkteamResponse}
     */
    updateWorkteam(xAmzTarget, updateWorkteamRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWorkteamRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateWorkteam");
      }
      // verify the required parameter 'updateWorkteamRequest' is set
      if (updateWorkteamRequest === undefined || updateWorkteamRequest === null) {
        throw new Error("Missing the required parameter 'updateWorkteamRequest' when calling updateWorkteam");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWorkteamResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SageMaker.UpdateWorkteam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
