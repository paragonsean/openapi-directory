/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonSageMakerService);
  }
}(this, function(expect, AmazonSageMakerService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TrialComponentSourceDetailTransformJob', function() {
    it('should create an instance of TrialComponentSourceDetailTransformJob', function() {
      // uncomment below and update the code to test TrialComponentSourceDetailTransformJob
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be.a(AmazonSageMakerService.TrialComponentSourceDetailTransformJob);
    });

    it('should have the property transformJobName (base name: "TransformJobName")', function() {
      // uncomment below and update the code to test the property transformJobName
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property transformJobArn (base name: "TransformJobArn")', function() {
      // uncomment below and update the code to test the property transformJobArn
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property transformJobStatus (base name: "TransformJobStatus")', function() {
      // uncomment below and update the code to test the property transformJobStatus
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property failureReason (base name: "FailureReason")', function() {
      // uncomment below and update the code to test the property failureReason
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property modelName (base name: "ModelName")', function() {
      // uncomment below and update the code to test the property modelName
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property maxConcurrentTransforms (base name: "MaxConcurrentTransforms")', function() {
      // uncomment below and update the code to test the property maxConcurrentTransforms
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property modelClientConfig (base name: "ModelClientConfig")', function() {
      // uncomment below and update the code to test the property modelClientConfig
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property maxPayloadInMB (base name: "MaxPayloadInMB")', function() {
      // uncomment below and update the code to test the property maxPayloadInMB
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property batchStrategy (base name: "BatchStrategy")', function() {
      // uncomment below and update the code to test the property batchStrategy
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property environment (base name: "Environment")', function() {
      // uncomment below and update the code to test the property environment
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property transformInput (base name: "TransformInput")', function() {
      // uncomment below and update the code to test the property transformInput
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property transformOutput (base name: "TransformOutput")', function() {
      // uncomment below and update the code to test the property transformOutput
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property transformResources (base name: "TransformResources")', function() {
      // uncomment below and update the code to test the property transformResources
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "CreationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property transformStartTime (base name: "TransformStartTime")', function() {
      // uncomment below and update the code to test the property transformStartTime
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property transformEndTime (base name: "TransformEndTime")', function() {
      // uncomment below and update the code to test the property transformEndTime
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property labelingJobArn (base name: "LabelingJobArn")', function() {
      // uncomment below and update the code to test the property labelingJobArn
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property autoMLJobArn (base name: "AutoMLJobArn")', function() {
      // uncomment below and update the code to test the property autoMLJobArn
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property dataProcessing (base name: "DataProcessing")', function() {
      // uncomment below and update the code to test the property dataProcessing
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property experimentConfig (base name: "ExperimentConfig")', function() {
      // uncomment below and update the code to test the property experimentConfig
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

    it('should have the property dataCaptureConfig (base name: "DataCaptureConfig")', function() {
      // uncomment below and update the code to test the property dataCaptureConfig
      //var instance = new AmazonSageMakerService.TrialComponentSourceDetailTransformJob();
      //expect(instance).to.be();
    });

  });

}));
