# coding: utf-8

import pytest
import json
from aiohttp import web

from openapi_server.models.add_association_request import AddAssociationRequest
from openapi_server.models.add_association_response import AddAssociationResponse
from openapi_server.models.add_tags_input import AddTagsInput
from openapi_server.models.add_tags_output import AddTagsOutput
from openapi_server.models.associate_trial_component_request import AssociateTrialComponentRequest
from openapi_server.models.associate_trial_component_response import AssociateTrialComponentResponse
from openapi_server.models.batch_describe_model_package_input import BatchDescribeModelPackageInput
from openapi_server.models.batch_describe_model_package_output import BatchDescribeModelPackageOutput
from openapi_server.models.create_action_request import CreateActionRequest
from openapi_server.models.create_action_response import CreateActionResponse
from openapi_server.models.create_algorithm_input import CreateAlgorithmInput
from openapi_server.models.create_algorithm_output import CreateAlgorithmOutput
from openapi_server.models.create_app_image_config_request import CreateAppImageConfigRequest
from openapi_server.models.create_app_image_config_response import CreateAppImageConfigResponse
from openapi_server.models.create_app_request import CreateAppRequest
from openapi_server.models.create_app_response import CreateAppResponse
from openapi_server.models.create_artifact_request import CreateArtifactRequest
from openapi_server.models.create_artifact_response import CreateArtifactResponse
from openapi_server.models.create_auto_ml_job_request import CreateAutoMLJobRequest
from openapi_server.models.create_auto_ml_job_response import CreateAutoMLJobResponse
from openapi_server.models.create_auto_ml_job_v2_request import CreateAutoMLJobV2Request
from openapi_server.models.create_auto_ml_job_v2_response import CreateAutoMLJobV2Response
from openapi_server.models.create_code_repository_input import CreateCodeRepositoryInput
from openapi_server.models.create_code_repository_output import CreateCodeRepositoryOutput
from openapi_server.models.create_compilation_job_request import CreateCompilationJobRequest
from openapi_server.models.create_compilation_job_response import CreateCompilationJobResponse
from openapi_server.models.create_context_request import CreateContextRequest
from openapi_server.models.create_context_response import CreateContextResponse
from openapi_server.models.create_data_quality_job_definition_request import CreateDataQualityJobDefinitionRequest
from openapi_server.models.create_data_quality_job_definition_response import CreateDataQualityJobDefinitionResponse
from openapi_server.models.create_device_fleet_request import CreateDeviceFleetRequest
from openapi_server.models.create_domain_request import CreateDomainRequest
from openapi_server.models.create_domain_response import CreateDomainResponse
from openapi_server.models.create_edge_deployment_plan_request import CreateEdgeDeploymentPlanRequest
from openapi_server.models.create_edge_deployment_plan_response import CreateEdgeDeploymentPlanResponse
from openapi_server.models.create_edge_deployment_stage_request import CreateEdgeDeploymentStageRequest
from openapi_server.models.create_edge_packaging_job_request import CreateEdgePackagingJobRequest
from openapi_server.models.create_endpoint_config_input import CreateEndpointConfigInput
from openapi_server.models.create_endpoint_config_output import CreateEndpointConfigOutput
from openapi_server.models.create_endpoint_input import CreateEndpointInput
from openapi_server.models.create_endpoint_output import CreateEndpointOutput
from openapi_server.models.create_experiment_request import CreateExperimentRequest
from openapi_server.models.create_experiment_response import CreateExperimentResponse
from openapi_server.models.create_feature_group_request import CreateFeatureGroupRequest
from openapi_server.models.create_feature_group_response import CreateFeatureGroupResponse
from openapi_server.models.create_flow_definition_request import CreateFlowDefinitionRequest
from openapi_server.models.create_flow_definition_response import CreateFlowDefinitionResponse
from openapi_server.models.create_hub_request import CreateHubRequest
from openapi_server.models.create_hub_response import CreateHubResponse
from openapi_server.models.create_human_task_ui_request import CreateHumanTaskUiRequest
from openapi_server.models.create_human_task_ui_response import CreateHumanTaskUiResponse
from openapi_server.models.create_hyper_parameter_tuning_job_request import CreateHyperParameterTuningJobRequest
from openapi_server.models.create_hyper_parameter_tuning_job_response import CreateHyperParameterTuningJobResponse
from openapi_server.models.create_image_request import CreateImageRequest
from openapi_server.models.create_image_response import CreateImageResponse
from openapi_server.models.create_image_version_request import CreateImageVersionRequest
from openapi_server.models.create_image_version_response import CreateImageVersionResponse
from openapi_server.models.create_inference_experiment_request import CreateInferenceExperimentRequest
from openapi_server.models.create_inference_experiment_response import CreateInferenceExperimentResponse
from openapi_server.models.create_inference_recommendations_job_request import CreateInferenceRecommendationsJobRequest
from openapi_server.models.create_inference_recommendations_job_response import CreateInferenceRecommendationsJobResponse
from openapi_server.models.create_labeling_job_request import CreateLabelingJobRequest
from openapi_server.models.create_labeling_job_response import CreateLabelingJobResponse
from openapi_server.models.create_model_bias_job_definition_request import CreateModelBiasJobDefinitionRequest
from openapi_server.models.create_model_bias_job_definition_response import CreateModelBiasJobDefinitionResponse
from openapi_server.models.create_model_card_export_job_request import CreateModelCardExportJobRequest
from openapi_server.models.create_model_card_export_job_response import CreateModelCardExportJobResponse
from openapi_server.models.create_model_card_request import CreateModelCardRequest
from openapi_server.models.create_model_card_response import CreateModelCardResponse
from openapi_server.models.create_model_explainability_job_definition_request import CreateModelExplainabilityJobDefinitionRequest
from openapi_server.models.create_model_explainability_job_definition_response import CreateModelExplainabilityJobDefinitionResponse
from openapi_server.models.create_model_input import CreateModelInput
from openapi_server.models.create_model_output import CreateModelOutput
from openapi_server.models.create_model_package_group_input import CreateModelPackageGroupInput
from openapi_server.models.create_model_package_group_output import CreateModelPackageGroupOutput
from openapi_server.models.create_model_package_input import CreateModelPackageInput
from openapi_server.models.create_model_package_output import CreateModelPackageOutput
from openapi_server.models.create_model_quality_job_definition_request import CreateModelQualityJobDefinitionRequest
from openapi_server.models.create_model_quality_job_definition_response import CreateModelQualityJobDefinitionResponse
from openapi_server.models.create_monitoring_schedule_request import CreateMonitoringScheduleRequest
from openapi_server.models.create_monitoring_schedule_response import CreateMonitoringScheduleResponse
from openapi_server.models.create_notebook_instance_input import CreateNotebookInstanceInput
from openapi_server.models.create_notebook_instance_lifecycle_config_input import CreateNotebookInstanceLifecycleConfigInput
from openapi_server.models.create_notebook_instance_lifecycle_config_output import CreateNotebookInstanceLifecycleConfigOutput
from openapi_server.models.create_notebook_instance_output import CreateNotebookInstanceOutput
from openapi_server.models.create_pipeline_request import CreatePipelineRequest
from openapi_server.models.create_pipeline_response import CreatePipelineResponse
from openapi_server.models.create_presigned_domain_url_request import CreatePresignedDomainUrlRequest
from openapi_server.models.create_presigned_domain_url_response import CreatePresignedDomainUrlResponse
from openapi_server.models.create_presigned_notebook_instance_url_input import CreatePresignedNotebookInstanceUrlInput
from openapi_server.models.create_presigned_notebook_instance_url_output import CreatePresignedNotebookInstanceUrlOutput
from openapi_server.models.create_processing_job_request import CreateProcessingJobRequest
from openapi_server.models.create_processing_job_response import CreateProcessingJobResponse
from openapi_server.models.create_project_input import CreateProjectInput
from openapi_server.models.create_project_output import CreateProjectOutput
from openapi_server.models.create_space_request import CreateSpaceRequest
from openapi_server.models.create_space_response import CreateSpaceResponse
from openapi_server.models.create_studio_lifecycle_config_request import CreateStudioLifecycleConfigRequest
from openapi_server.models.create_studio_lifecycle_config_response import CreateStudioLifecycleConfigResponse
from openapi_server.models.create_training_job_request import CreateTrainingJobRequest
from openapi_server.models.create_training_job_response import CreateTrainingJobResponse
from openapi_server.models.create_transform_job_request import CreateTransformJobRequest
from openapi_server.models.create_transform_job_response import CreateTransformJobResponse
from openapi_server.models.create_trial_component_request import CreateTrialComponentRequest
from openapi_server.models.create_trial_component_response import CreateTrialComponentResponse
from openapi_server.models.create_trial_request import CreateTrialRequest
from openapi_server.models.create_trial_response import CreateTrialResponse
from openapi_server.models.create_user_profile_request import CreateUserProfileRequest
from openapi_server.models.create_user_profile_response import CreateUserProfileResponse
from openapi_server.models.create_workforce_request import CreateWorkforceRequest
from openapi_server.models.create_workforce_response import CreateWorkforceResponse
from openapi_server.models.create_workteam_request import CreateWorkteamRequest
from openapi_server.models.create_workteam_response import CreateWorkteamResponse
from openapi_server.models.delete_action_request import DeleteActionRequest
from openapi_server.models.delete_action_response import DeleteActionResponse
from openapi_server.models.delete_algorithm_input import DeleteAlgorithmInput
from openapi_server.models.delete_app_image_config_request import DeleteAppImageConfigRequest
from openapi_server.models.delete_app_request import DeleteAppRequest
from openapi_server.models.delete_artifact_request import DeleteArtifactRequest
from openapi_server.models.delete_artifact_response import DeleteArtifactResponse
from openapi_server.models.delete_association_request import DeleteAssociationRequest
from openapi_server.models.delete_association_response import DeleteAssociationResponse
from openapi_server.models.delete_code_repository_input import DeleteCodeRepositoryInput
from openapi_server.models.delete_context_request import DeleteContextRequest
from openapi_server.models.delete_context_response import DeleteContextResponse
from openapi_server.models.delete_data_quality_job_definition_request import DeleteDataQualityJobDefinitionRequest
from openapi_server.models.delete_device_fleet_request import DeleteDeviceFleetRequest
from openapi_server.models.delete_domain_request import DeleteDomainRequest
from openapi_server.models.delete_edge_deployment_plan_request import DeleteEdgeDeploymentPlanRequest
from openapi_server.models.delete_edge_deployment_stage_request import DeleteEdgeDeploymentStageRequest
from openapi_server.models.delete_endpoint_config_input import DeleteEndpointConfigInput
from openapi_server.models.delete_endpoint_input import DeleteEndpointInput
from openapi_server.models.delete_experiment_request import DeleteExperimentRequest
from openapi_server.models.delete_experiment_response import DeleteExperimentResponse
from openapi_server.models.delete_feature_group_request import DeleteFeatureGroupRequest
from openapi_server.models.delete_flow_definition_request import DeleteFlowDefinitionRequest
from openapi_server.models.delete_hub_content_request import DeleteHubContentRequest
from openapi_server.models.delete_hub_request import DeleteHubRequest
from openapi_server.models.delete_human_task_ui_request import DeleteHumanTaskUiRequest
from openapi_server.models.delete_image_request import DeleteImageRequest
from openapi_server.models.delete_image_version_request import DeleteImageVersionRequest
from openapi_server.models.delete_inference_experiment_request import DeleteInferenceExperimentRequest
from openapi_server.models.delete_inference_experiment_response import DeleteInferenceExperimentResponse
from openapi_server.models.delete_model_bias_job_definition_request import DeleteModelBiasJobDefinitionRequest
from openapi_server.models.delete_model_card_request import DeleteModelCardRequest
from openapi_server.models.delete_model_explainability_job_definition_request import DeleteModelExplainabilityJobDefinitionRequest
from openapi_server.models.delete_model_input import DeleteModelInput
from openapi_server.models.delete_model_package_group_input import DeleteModelPackageGroupInput
from openapi_server.models.delete_model_package_group_policy_input import DeleteModelPackageGroupPolicyInput
from openapi_server.models.delete_model_package_input import DeleteModelPackageInput
from openapi_server.models.delete_model_quality_job_definition_request import DeleteModelQualityJobDefinitionRequest
from openapi_server.models.delete_monitoring_schedule_request import DeleteMonitoringScheduleRequest
from openapi_server.models.delete_notebook_instance_input import DeleteNotebookInstanceInput
from openapi_server.models.delete_notebook_instance_lifecycle_config_input import DeleteNotebookInstanceLifecycleConfigInput
from openapi_server.models.delete_pipeline_request import DeletePipelineRequest
from openapi_server.models.delete_pipeline_response import DeletePipelineResponse
from openapi_server.models.delete_project_input import DeleteProjectInput
from openapi_server.models.delete_space_request import DeleteSpaceRequest
from openapi_server.models.delete_studio_lifecycle_config_request import DeleteStudioLifecycleConfigRequest
from openapi_server.models.delete_tags_input import DeleteTagsInput
from openapi_server.models.delete_trial_component_request import DeleteTrialComponentRequest
from openapi_server.models.delete_trial_component_response import DeleteTrialComponentResponse
from openapi_server.models.delete_trial_request import DeleteTrialRequest
from openapi_server.models.delete_trial_response import DeleteTrialResponse
from openapi_server.models.delete_user_profile_request import DeleteUserProfileRequest
from openapi_server.models.delete_workforce_request import DeleteWorkforceRequest
from openapi_server.models.delete_workteam_request import DeleteWorkteamRequest
from openapi_server.models.delete_workteam_response import DeleteWorkteamResponse
from openapi_server.models.deregister_devices_request import DeregisterDevicesRequest
from openapi_server.models.describe_action_request import DescribeActionRequest
from openapi_server.models.describe_action_response import DescribeActionResponse
from openapi_server.models.describe_algorithm_input import DescribeAlgorithmInput
from openapi_server.models.describe_algorithm_output import DescribeAlgorithmOutput
from openapi_server.models.describe_app_image_config_request import DescribeAppImageConfigRequest
from openapi_server.models.describe_app_image_config_response import DescribeAppImageConfigResponse
from openapi_server.models.describe_app_request import DescribeAppRequest
from openapi_server.models.describe_app_response import DescribeAppResponse
from openapi_server.models.describe_artifact_request import DescribeArtifactRequest
from openapi_server.models.describe_artifact_response import DescribeArtifactResponse
from openapi_server.models.describe_auto_ml_job_request import DescribeAutoMLJobRequest
from openapi_server.models.describe_auto_ml_job_response import DescribeAutoMLJobResponse
from openapi_server.models.describe_auto_ml_job_v2_request import DescribeAutoMLJobV2Request
from openapi_server.models.describe_auto_ml_job_v2_response import DescribeAutoMLJobV2Response
from openapi_server.models.describe_code_repository_input import DescribeCodeRepositoryInput
from openapi_server.models.describe_code_repository_output import DescribeCodeRepositoryOutput
from openapi_server.models.describe_compilation_job_request import DescribeCompilationJobRequest
from openapi_server.models.describe_compilation_job_response import DescribeCompilationJobResponse
from openapi_server.models.describe_context_request import DescribeContextRequest
from openapi_server.models.describe_context_response import DescribeContextResponse
from openapi_server.models.describe_data_quality_job_definition_request import DescribeDataQualityJobDefinitionRequest
from openapi_server.models.describe_data_quality_job_definition_response import DescribeDataQualityJobDefinitionResponse
from openapi_server.models.describe_device_fleet_request import DescribeDeviceFleetRequest
from openapi_server.models.describe_device_fleet_response import DescribeDeviceFleetResponse
from openapi_server.models.describe_device_request import DescribeDeviceRequest
from openapi_server.models.describe_device_response import DescribeDeviceResponse
from openapi_server.models.describe_domain_request import DescribeDomainRequest
from openapi_server.models.describe_domain_response import DescribeDomainResponse
from openapi_server.models.describe_edge_deployment_plan_request import DescribeEdgeDeploymentPlanRequest
from openapi_server.models.describe_edge_deployment_plan_response import DescribeEdgeDeploymentPlanResponse
from openapi_server.models.describe_edge_packaging_job_request import DescribeEdgePackagingJobRequest
from openapi_server.models.describe_edge_packaging_job_response import DescribeEdgePackagingJobResponse
from openapi_server.models.describe_endpoint_config_input import DescribeEndpointConfigInput
from openapi_server.models.describe_endpoint_config_output import DescribeEndpointConfigOutput
from openapi_server.models.describe_endpoint_input import DescribeEndpointInput
from openapi_server.models.describe_endpoint_output import DescribeEndpointOutput
from openapi_server.models.describe_experiment_request import DescribeExperimentRequest
from openapi_server.models.describe_experiment_response import DescribeExperimentResponse
from openapi_server.models.describe_feature_group_request import DescribeFeatureGroupRequest
from openapi_server.models.describe_feature_group_response import DescribeFeatureGroupResponse
from openapi_server.models.describe_feature_metadata_request import DescribeFeatureMetadataRequest
from openapi_server.models.describe_feature_metadata_response import DescribeFeatureMetadataResponse
from openapi_server.models.describe_flow_definition_request import DescribeFlowDefinitionRequest
from openapi_server.models.describe_flow_definition_response import DescribeFlowDefinitionResponse
from openapi_server.models.describe_hub_content_request import DescribeHubContentRequest
from openapi_server.models.describe_hub_content_response import DescribeHubContentResponse
from openapi_server.models.describe_hub_request import DescribeHubRequest
from openapi_server.models.describe_hub_response import DescribeHubResponse
from openapi_server.models.describe_human_task_ui_request import DescribeHumanTaskUiRequest
from openapi_server.models.describe_human_task_ui_response import DescribeHumanTaskUiResponse
from openapi_server.models.describe_hyper_parameter_tuning_job_request import DescribeHyperParameterTuningJobRequest
from openapi_server.models.describe_hyper_parameter_tuning_job_response import DescribeHyperParameterTuningJobResponse
from openapi_server.models.describe_image_request import DescribeImageRequest
from openapi_server.models.describe_image_response import DescribeImageResponse
from openapi_server.models.describe_image_version_request import DescribeImageVersionRequest
from openapi_server.models.describe_image_version_response import DescribeImageVersionResponse
from openapi_server.models.describe_inference_experiment_request import DescribeInferenceExperimentRequest
from openapi_server.models.describe_inference_experiment_response import DescribeInferenceExperimentResponse
from openapi_server.models.describe_inference_recommendations_job_request import DescribeInferenceRecommendationsJobRequest
from openapi_server.models.describe_inference_recommendations_job_response import DescribeInferenceRecommendationsJobResponse
from openapi_server.models.describe_labeling_job_request import DescribeLabelingJobRequest
from openapi_server.models.describe_labeling_job_response import DescribeLabelingJobResponse
from openapi_server.models.describe_lineage_group_request import DescribeLineageGroupRequest
from openapi_server.models.describe_lineage_group_response import DescribeLineageGroupResponse
from openapi_server.models.describe_model_bias_job_definition_request import DescribeModelBiasJobDefinitionRequest
from openapi_server.models.describe_model_bias_job_definition_response import DescribeModelBiasJobDefinitionResponse
from openapi_server.models.describe_model_card_export_job_request import DescribeModelCardExportJobRequest
from openapi_server.models.describe_model_card_export_job_response import DescribeModelCardExportJobResponse
from openapi_server.models.describe_model_card_request import DescribeModelCardRequest
from openapi_server.models.describe_model_card_response import DescribeModelCardResponse
from openapi_server.models.describe_model_explainability_job_definition_request import DescribeModelExplainabilityJobDefinitionRequest
from openapi_server.models.describe_model_explainability_job_definition_response import DescribeModelExplainabilityJobDefinitionResponse
from openapi_server.models.describe_model_input import DescribeModelInput
from openapi_server.models.describe_model_output import DescribeModelOutput
from openapi_server.models.describe_model_package_group_input import DescribeModelPackageGroupInput
from openapi_server.models.describe_model_package_group_output import DescribeModelPackageGroupOutput
from openapi_server.models.describe_model_package_input import DescribeModelPackageInput
from openapi_server.models.describe_model_package_output import DescribeModelPackageOutput
from openapi_server.models.describe_model_quality_job_definition_request import DescribeModelQualityJobDefinitionRequest
from openapi_server.models.describe_model_quality_job_definition_response import DescribeModelQualityJobDefinitionResponse
from openapi_server.models.describe_monitoring_schedule_request import DescribeMonitoringScheduleRequest
from openapi_server.models.describe_monitoring_schedule_response import DescribeMonitoringScheduleResponse
from openapi_server.models.describe_notebook_instance_input import DescribeNotebookInstanceInput
from openapi_server.models.describe_notebook_instance_lifecycle_config_input import DescribeNotebookInstanceLifecycleConfigInput
from openapi_server.models.describe_notebook_instance_lifecycle_config_output import DescribeNotebookInstanceLifecycleConfigOutput
from openapi_server.models.describe_notebook_instance_output import DescribeNotebookInstanceOutput
from openapi_server.models.describe_pipeline_definition_for_execution_request import DescribePipelineDefinitionForExecutionRequest
from openapi_server.models.describe_pipeline_definition_for_execution_response import DescribePipelineDefinitionForExecutionResponse
from openapi_server.models.describe_pipeline_execution_request import DescribePipelineExecutionRequest
from openapi_server.models.describe_pipeline_execution_response import DescribePipelineExecutionResponse
from openapi_server.models.describe_pipeline_request import DescribePipelineRequest
from openapi_server.models.describe_pipeline_response import DescribePipelineResponse
from openapi_server.models.describe_processing_job_request import DescribeProcessingJobRequest
from openapi_server.models.describe_processing_job_response import DescribeProcessingJobResponse
from openapi_server.models.describe_project_input import DescribeProjectInput
from openapi_server.models.describe_project_output import DescribeProjectOutput
from openapi_server.models.describe_space_request import DescribeSpaceRequest
from openapi_server.models.describe_space_response import DescribeSpaceResponse
from openapi_server.models.describe_studio_lifecycle_config_request import DescribeStudioLifecycleConfigRequest
from openapi_server.models.describe_studio_lifecycle_config_response import DescribeStudioLifecycleConfigResponse
from openapi_server.models.describe_subscribed_workteam_request import DescribeSubscribedWorkteamRequest
from openapi_server.models.describe_subscribed_workteam_response import DescribeSubscribedWorkteamResponse
from openapi_server.models.describe_training_job_request import DescribeTrainingJobRequest
from openapi_server.models.describe_training_job_response import DescribeTrainingJobResponse
from openapi_server.models.describe_transform_job_request import DescribeTransformJobRequest
from openapi_server.models.describe_transform_job_response import DescribeTransformJobResponse
from openapi_server.models.describe_trial_component_request import DescribeTrialComponentRequest
from openapi_server.models.describe_trial_component_response import DescribeTrialComponentResponse
from openapi_server.models.describe_trial_request import DescribeTrialRequest
from openapi_server.models.describe_trial_response import DescribeTrialResponse
from openapi_server.models.describe_user_profile_request import DescribeUserProfileRequest
from openapi_server.models.describe_user_profile_response import DescribeUserProfileResponse
from openapi_server.models.describe_workforce_request import DescribeWorkforceRequest
from openapi_server.models.describe_workforce_response import DescribeWorkforceResponse
from openapi_server.models.describe_workteam_request import DescribeWorkteamRequest
from openapi_server.models.describe_workteam_response import DescribeWorkteamResponse
from openapi_server.models.disassociate_trial_component_request import DisassociateTrialComponentRequest
from openapi_server.models.disassociate_trial_component_response import DisassociateTrialComponentResponse
from openapi_server.models.get_device_fleet_report_request import GetDeviceFleetReportRequest
from openapi_server.models.get_device_fleet_report_response import GetDeviceFleetReportResponse
from openapi_server.models.get_lineage_group_policy_request import GetLineageGroupPolicyRequest
from openapi_server.models.get_lineage_group_policy_response import GetLineageGroupPolicyResponse
from openapi_server.models.get_model_package_group_policy_input import GetModelPackageGroupPolicyInput
from openapi_server.models.get_model_package_group_policy_output import GetModelPackageGroupPolicyOutput
from openapi_server.models.get_sagemaker_servicecatalog_portfolio_status_output import GetSagemakerServicecatalogPortfolioStatusOutput
from openapi_server.models.get_scaling_configuration_recommendation_request import GetScalingConfigurationRecommendationRequest
from openapi_server.models.get_scaling_configuration_recommendation_response import GetScalingConfigurationRecommendationResponse
from openapi_server.models.get_search_suggestions_request import GetSearchSuggestionsRequest
from openapi_server.models.get_search_suggestions_response import GetSearchSuggestionsResponse
from openapi_server.models.import_hub_content_request import ImportHubContentRequest
from openapi_server.models.import_hub_content_response import ImportHubContentResponse
from openapi_server.models.list_actions_request import ListActionsRequest
from openapi_server.models.list_actions_response import ListActionsResponse
from openapi_server.models.list_algorithms_input import ListAlgorithmsInput
from openapi_server.models.list_algorithms_output import ListAlgorithmsOutput
from openapi_server.models.list_aliases_request import ListAliasesRequest
from openapi_server.models.list_aliases_response import ListAliasesResponse
from openapi_server.models.list_app_image_configs_request import ListAppImageConfigsRequest
from openapi_server.models.list_app_image_configs_response import ListAppImageConfigsResponse
from openapi_server.models.list_apps_request import ListAppsRequest
from openapi_server.models.list_apps_response import ListAppsResponse
from openapi_server.models.list_artifacts_request import ListArtifactsRequest
from openapi_server.models.list_artifacts_response import ListArtifactsResponse
from openapi_server.models.list_associations_request import ListAssociationsRequest
from openapi_server.models.list_associations_response import ListAssociationsResponse
from openapi_server.models.list_auto_ml_jobs_request import ListAutoMLJobsRequest
from openapi_server.models.list_auto_ml_jobs_response import ListAutoMLJobsResponse
from openapi_server.models.list_candidates_for_auto_ml_job_request import ListCandidatesForAutoMLJobRequest
from openapi_server.models.list_candidates_for_auto_ml_job_response import ListCandidatesForAutoMLJobResponse
from openapi_server.models.list_code_repositories_input import ListCodeRepositoriesInput
from openapi_server.models.list_code_repositories_output import ListCodeRepositoriesOutput
from openapi_server.models.list_compilation_jobs_request import ListCompilationJobsRequest
from openapi_server.models.list_compilation_jobs_response import ListCompilationJobsResponse
from openapi_server.models.list_contexts_request import ListContextsRequest
from openapi_server.models.list_contexts_response import ListContextsResponse
from openapi_server.models.list_data_quality_job_definitions_request import ListDataQualityJobDefinitionsRequest
from openapi_server.models.list_data_quality_job_definitions_response import ListDataQualityJobDefinitionsResponse
from openapi_server.models.list_device_fleets_request import ListDeviceFleetsRequest
from openapi_server.models.list_device_fleets_response import ListDeviceFleetsResponse
from openapi_server.models.list_devices_request import ListDevicesRequest
from openapi_server.models.list_devices_response import ListDevicesResponse
from openapi_server.models.list_domains_request import ListDomainsRequest
from openapi_server.models.list_domains_response import ListDomainsResponse
from openapi_server.models.list_edge_deployment_plans_request import ListEdgeDeploymentPlansRequest
from openapi_server.models.list_edge_deployment_plans_response import ListEdgeDeploymentPlansResponse
from openapi_server.models.list_edge_packaging_jobs_request import ListEdgePackagingJobsRequest
from openapi_server.models.list_edge_packaging_jobs_response import ListEdgePackagingJobsResponse
from openapi_server.models.list_endpoint_configs_input import ListEndpointConfigsInput
from openapi_server.models.list_endpoint_configs_output import ListEndpointConfigsOutput
from openapi_server.models.list_endpoints_input import ListEndpointsInput
from openapi_server.models.list_endpoints_output import ListEndpointsOutput
from openapi_server.models.list_experiments_request import ListExperimentsRequest
from openapi_server.models.list_experiments_response import ListExperimentsResponse
from openapi_server.models.list_feature_groups_request import ListFeatureGroupsRequest
from openapi_server.models.list_feature_groups_response import ListFeatureGroupsResponse
from openapi_server.models.list_flow_definitions_request import ListFlowDefinitionsRequest
from openapi_server.models.list_flow_definitions_response import ListFlowDefinitionsResponse
from openapi_server.models.list_hub_content_versions_request import ListHubContentVersionsRequest
from openapi_server.models.list_hub_content_versions_response import ListHubContentVersionsResponse
from openapi_server.models.list_hub_contents_request import ListHubContentsRequest
from openapi_server.models.list_hub_contents_response import ListHubContentsResponse
from openapi_server.models.list_hubs_request import ListHubsRequest
from openapi_server.models.list_hubs_response import ListHubsResponse
from openapi_server.models.list_human_task_uis_request import ListHumanTaskUisRequest
from openapi_server.models.list_human_task_uis_response import ListHumanTaskUisResponse
from openapi_server.models.list_hyper_parameter_tuning_jobs_request import ListHyperParameterTuningJobsRequest
from openapi_server.models.list_hyper_parameter_tuning_jobs_response import ListHyperParameterTuningJobsResponse
from openapi_server.models.list_image_versions_request import ListImageVersionsRequest
from openapi_server.models.list_image_versions_response import ListImageVersionsResponse
from openapi_server.models.list_images_request import ListImagesRequest
from openapi_server.models.list_images_response import ListImagesResponse
from openapi_server.models.list_inference_experiments_request import ListInferenceExperimentsRequest
from openapi_server.models.list_inference_experiments_response import ListInferenceExperimentsResponse
from openapi_server.models.list_inference_recommendations_job_steps_request import ListInferenceRecommendationsJobStepsRequest
from openapi_server.models.list_inference_recommendations_job_steps_response import ListInferenceRecommendationsJobStepsResponse
from openapi_server.models.list_inference_recommendations_jobs_request import ListInferenceRecommendationsJobsRequest
from openapi_server.models.list_inference_recommendations_jobs_response import ListInferenceRecommendationsJobsResponse
from openapi_server.models.list_labeling_jobs_for_workteam_request import ListLabelingJobsForWorkteamRequest
from openapi_server.models.list_labeling_jobs_for_workteam_response import ListLabelingJobsForWorkteamResponse
from openapi_server.models.list_labeling_jobs_request import ListLabelingJobsRequest
from openapi_server.models.list_labeling_jobs_response import ListLabelingJobsResponse
from openapi_server.models.list_lineage_groups_request import ListLineageGroupsRequest
from openapi_server.models.list_lineage_groups_response import ListLineageGroupsResponse
from openapi_server.models.list_model_bias_job_definitions_request import ListModelBiasJobDefinitionsRequest
from openapi_server.models.list_model_bias_job_definitions_response import ListModelBiasJobDefinitionsResponse
from openapi_server.models.list_model_card_export_jobs_request import ListModelCardExportJobsRequest
from openapi_server.models.list_model_card_export_jobs_response import ListModelCardExportJobsResponse
from openapi_server.models.list_model_card_versions_request import ListModelCardVersionsRequest
from openapi_server.models.list_model_card_versions_response import ListModelCardVersionsResponse
from openapi_server.models.list_model_cards_request import ListModelCardsRequest
from openapi_server.models.list_model_cards_response import ListModelCardsResponse
from openapi_server.models.list_model_explainability_job_definitions_request import ListModelExplainabilityJobDefinitionsRequest
from openapi_server.models.list_model_explainability_job_definitions_response import ListModelExplainabilityJobDefinitionsResponse
from openapi_server.models.list_model_metadata_request import ListModelMetadataRequest
from openapi_server.models.list_model_metadata_response import ListModelMetadataResponse
from openapi_server.models.list_model_package_groups_input import ListModelPackageGroupsInput
from openapi_server.models.list_model_package_groups_output import ListModelPackageGroupsOutput
from openapi_server.models.list_model_packages_input import ListModelPackagesInput
from openapi_server.models.list_model_packages_output import ListModelPackagesOutput
from openapi_server.models.list_model_quality_job_definitions_request import ListModelQualityJobDefinitionsRequest
from openapi_server.models.list_model_quality_job_definitions_response import ListModelQualityJobDefinitionsResponse
from openapi_server.models.list_models_input import ListModelsInput
from openapi_server.models.list_models_output import ListModelsOutput
from openapi_server.models.list_monitoring_alert_history_request import ListMonitoringAlertHistoryRequest
from openapi_server.models.list_monitoring_alert_history_response import ListMonitoringAlertHistoryResponse
from openapi_server.models.list_monitoring_alerts_request import ListMonitoringAlertsRequest
from openapi_server.models.list_monitoring_alerts_response import ListMonitoringAlertsResponse
from openapi_server.models.list_monitoring_executions_request import ListMonitoringExecutionsRequest
from openapi_server.models.list_monitoring_executions_response import ListMonitoringExecutionsResponse
from openapi_server.models.list_monitoring_schedules_request import ListMonitoringSchedulesRequest
from openapi_server.models.list_monitoring_schedules_response import ListMonitoringSchedulesResponse
from openapi_server.models.list_notebook_instance_lifecycle_configs_input import ListNotebookInstanceLifecycleConfigsInput
from openapi_server.models.list_notebook_instance_lifecycle_configs_output import ListNotebookInstanceLifecycleConfigsOutput
from openapi_server.models.list_notebook_instances_input import ListNotebookInstancesInput
from openapi_server.models.list_notebook_instances_output import ListNotebookInstancesOutput
from openapi_server.models.list_pipeline_execution_steps_request import ListPipelineExecutionStepsRequest
from openapi_server.models.list_pipeline_execution_steps_response import ListPipelineExecutionStepsResponse
from openapi_server.models.list_pipeline_executions_request import ListPipelineExecutionsRequest
from openapi_server.models.list_pipeline_executions_response import ListPipelineExecutionsResponse
from openapi_server.models.list_pipeline_parameters_for_execution_request import ListPipelineParametersForExecutionRequest
from openapi_server.models.list_pipeline_parameters_for_execution_response import ListPipelineParametersForExecutionResponse
from openapi_server.models.list_pipelines_request import ListPipelinesRequest
from openapi_server.models.list_pipelines_response import ListPipelinesResponse
from openapi_server.models.list_processing_jobs_request import ListProcessingJobsRequest
from openapi_server.models.list_processing_jobs_response import ListProcessingJobsResponse
from openapi_server.models.list_projects_input import ListProjectsInput
from openapi_server.models.list_projects_output import ListProjectsOutput
from openapi_server.models.list_resource_catalogs_request import ListResourceCatalogsRequest
from openapi_server.models.list_resource_catalogs_response import ListResourceCatalogsResponse
from openapi_server.models.list_spaces_request import ListSpacesRequest
from openapi_server.models.list_spaces_response import ListSpacesResponse
from openapi_server.models.list_stage_devices_request import ListStageDevicesRequest
from openapi_server.models.list_stage_devices_response import ListStageDevicesResponse
from openapi_server.models.list_studio_lifecycle_configs_request import ListStudioLifecycleConfigsRequest
from openapi_server.models.list_studio_lifecycle_configs_response import ListStudioLifecycleConfigsResponse
from openapi_server.models.list_subscribed_workteams_request import ListSubscribedWorkteamsRequest
from openapi_server.models.list_subscribed_workteams_response import ListSubscribedWorkteamsResponse
from openapi_server.models.list_tags_input import ListTagsInput
from openapi_server.models.list_tags_output import ListTagsOutput
from openapi_server.models.list_training_jobs_for_hyper_parameter_tuning_job_request import ListTrainingJobsForHyperParameterTuningJobRequest
from openapi_server.models.list_training_jobs_for_hyper_parameter_tuning_job_response import ListTrainingJobsForHyperParameterTuningJobResponse
from openapi_server.models.list_training_jobs_request import ListTrainingJobsRequest
from openapi_server.models.list_training_jobs_response import ListTrainingJobsResponse
from openapi_server.models.list_transform_jobs_request import ListTransformJobsRequest
from openapi_server.models.list_transform_jobs_response import ListTransformJobsResponse
from openapi_server.models.list_trial_components_request import ListTrialComponentsRequest
from openapi_server.models.list_trial_components_response import ListTrialComponentsResponse
from openapi_server.models.list_trials_request import ListTrialsRequest
from openapi_server.models.list_trials_response import ListTrialsResponse
from openapi_server.models.list_user_profiles_request import ListUserProfilesRequest
from openapi_server.models.list_user_profiles_response import ListUserProfilesResponse
from openapi_server.models.list_workforces_request import ListWorkforcesRequest
from openapi_server.models.list_workforces_response import ListWorkforcesResponse
from openapi_server.models.list_workteams_request import ListWorkteamsRequest
from openapi_server.models.list_workteams_response import ListWorkteamsResponse
from openapi_server.models.put_model_package_group_policy_input import PutModelPackageGroupPolicyInput
from openapi_server.models.put_model_package_group_policy_output import PutModelPackageGroupPolicyOutput
from openapi_server.models.query_lineage_request import QueryLineageRequest
from openapi_server.models.query_lineage_response import QueryLineageResponse
from openapi_server.models.register_devices_request import RegisterDevicesRequest
from openapi_server.models.render_ui_template_request import RenderUiTemplateRequest
from openapi_server.models.render_ui_template_response import RenderUiTemplateResponse
from openapi_server.models.retry_pipeline_execution_request import RetryPipelineExecutionRequest
from openapi_server.models.retry_pipeline_execution_response import RetryPipelineExecutionResponse
from openapi_server.models.search_request import SearchRequest
from openapi_server.models.search_response import SearchResponse
from openapi_server.models.send_pipeline_execution_step_failure_request import SendPipelineExecutionStepFailureRequest
from openapi_server.models.send_pipeline_execution_step_failure_response import SendPipelineExecutionStepFailureResponse
from openapi_server.models.send_pipeline_execution_step_success_request import SendPipelineExecutionStepSuccessRequest
from openapi_server.models.send_pipeline_execution_step_success_response import SendPipelineExecutionStepSuccessResponse
from openapi_server.models.start_edge_deployment_stage_request import StartEdgeDeploymentStageRequest
from openapi_server.models.start_inference_experiment_request import StartInferenceExperimentRequest
from openapi_server.models.start_inference_experiment_response import StartInferenceExperimentResponse
from openapi_server.models.start_monitoring_schedule_request import StartMonitoringScheduleRequest
from openapi_server.models.start_notebook_instance_input import StartNotebookInstanceInput
from openapi_server.models.start_pipeline_execution_request import StartPipelineExecutionRequest
from openapi_server.models.start_pipeline_execution_response import StartPipelineExecutionResponse
from openapi_server.models.stop_auto_ml_job_request import StopAutoMLJobRequest
from openapi_server.models.stop_compilation_job_request import StopCompilationJobRequest
from openapi_server.models.stop_edge_deployment_stage_request import StopEdgeDeploymentStageRequest
from openapi_server.models.stop_edge_packaging_job_request import StopEdgePackagingJobRequest
from openapi_server.models.stop_hyper_parameter_tuning_job_request import StopHyperParameterTuningJobRequest
from openapi_server.models.stop_inference_experiment_request import StopInferenceExperimentRequest
from openapi_server.models.stop_inference_experiment_response import StopInferenceExperimentResponse
from openapi_server.models.stop_inference_recommendations_job_request import StopInferenceRecommendationsJobRequest
from openapi_server.models.stop_labeling_job_request import StopLabelingJobRequest
from openapi_server.models.stop_monitoring_schedule_request import StopMonitoringScheduleRequest
from openapi_server.models.stop_notebook_instance_input import StopNotebookInstanceInput
from openapi_server.models.stop_pipeline_execution_request import StopPipelineExecutionRequest
from openapi_server.models.stop_pipeline_execution_response import StopPipelineExecutionResponse
from openapi_server.models.stop_processing_job_request import StopProcessingJobRequest
from openapi_server.models.stop_training_job_request import StopTrainingJobRequest
from openapi_server.models.stop_transform_job_request import StopTransformJobRequest
from openapi_server.models.update_action_request import UpdateActionRequest
from openapi_server.models.update_action_response import UpdateActionResponse
from openapi_server.models.update_app_image_config_request import UpdateAppImageConfigRequest
from openapi_server.models.update_app_image_config_response import UpdateAppImageConfigResponse
from openapi_server.models.update_artifact_request import UpdateArtifactRequest
from openapi_server.models.update_artifact_response import UpdateArtifactResponse
from openapi_server.models.update_code_repository_input import UpdateCodeRepositoryInput
from openapi_server.models.update_code_repository_output import UpdateCodeRepositoryOutput
from openapi_server.models.update_context_request import UpdateContextRequest
from openapi_server.models.update_context_response import UpdateContextResponse
from openapi_server.models.update_device_fleet_request import UpdateDeviceFleetRequest
from openapi_server.models.update_devices_request import UpdateDevicesRequest
from openapi_server.models.update_domain_request import UpdateDomainRequest
from openapi_server.models.update_domain_response import UpdateDomainResponse
from openapi_server.models.update_endpoint_input import UpdateEndpointInput
from openapi_server.models.update_endpoint_output import UpdateEndpointOutput
from openapi_server.models.update_endpoint_weights_and_capacities_input import UpdateEndpointWeightsAndCapacitiesInput
from openapi_server.models.update_endpoint_weights_and_capacities_output import UpdateEndpointWeightsAndCapacitiesOutput
from openapi_server.models.update_experiment_request import UpdateExperimentRequest
from openapi_server.models.update_experiment_response import UpdateExperimentResponse
from openapi_server.models.update_feature_group_request import UpdateFeatureGroupRequest
from openapi_server.models.update_feature_group_response import UpdateFeatureGroupResponse
from openapi_server.models.update_feature_metadata_request import UpdateFeatureMetadataRequest
from openapi_server.models.update_hub_request import UpdateHubRequest
from openapi_server.models.update_hub_response import UpdateHubResponse
from openapi_server.models.update_image_request import UpdateImageRequest
from openapi_server.models.update_image_response import UpdateImageResponse
from openapi_server.models.update_image_version_request import UpdateImageVersionRequest
from openapi_server.models.update_image_version_response import UpdateImageVersionResponse
from openapi_server.models.update_inference_experiment_request import UpdateInferenceExperimentRequest
from openapi_server.models.update_inference_experiment_response import UpdateInferenceExperimentResponse
from openapi_server.models.update_model_card_request import UpdateModelCardRequest
from openapi_server.models.update_model_card_response import UpdateModelCardResponse
from openapi_server.models.update_model_package_input import UpdateModelPackageInput
from openapi_server.models.update_model_package_output import UpdateModelPackageOutput
from openapi_server.models.update_monitoring_alert_request import UpdateMonitoringAlertRequest
from openapi_server.models.update_monitoring_alert_response import UpdateMonitoringAlertResponse
from openapi_server.models.update_monitoring_schedule_request import UpdateMonitoringScheduleRequest
from openapi_server.models.update_monitoring_schedule_response import UpdateMonitoringScheduleResponse
from openapi_server.models.update_notebook_instance_input import UpdateNotebookInstanceInput
from openapi_server.models.update_notebook_instance_lifecycle_config_input import UpdateNotebookInstanceLifecycleConfigInput
from openapi_server.models.update_pipeline_execution_request import UpdatePipelineExecutionRequest
from openapi_server.models.update_pipeline_execution_response import UpdatePipelineExecutionResponse
from openapi_server.models.update_pipeline_request import UpdatePipelineRequest
from openapi_server.models.update_pipeline_response import UpdatePipelineResponse
from openapi_server.models.update_project_input import UpdateProjectInput
from openapi_server.models.update_project_output import UpdateProjectOutput
from openapi_server.models.update_space_request import UpdateSpaceRequest
from openapi_server.models.update_space_response import UpdateSpaceResponse
from openapi_server.models.update_training_job_request import UpdateTrainingJobRequest
from openapi_server.models.update_training_job_response import UpdateTrainingJobResponse
from openapi_server.models.update_trial_component_request import UpdateTrialComponentRequest
from openapi_server.models.update_trial_component_response import UpdateTrialComponentResponse
from openapi_server.models.update_trial_request import UpdateTrialRequest
from openapi_server.models.update_trial_response import UpdateTrialResponse
from openapi_server.models.update_user_profile_request import UpdateUserProfileRequest
from openapi_server.models.update_user_profile_response import UpdateUserProfileResponse
from openapi_server.models.update_workforce_request import UpdateWorkforceRequest
from openapi_server.models.update_workforce_response import UpdateWorkforceResponse
from openapi_server.models.update_workteam_request import UpdateWorkteamRequest
from openapi_server.models.update_workteam_response import UpdateWorkteamResponse


pytestmark = pytest.mark.asyncio

async def test_add_association(client):
    """Test case for add_association

    
    """
    body = {"SourceArn":"","AssociationType":"","DestinationArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.AddAssociation',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_add_tags(client):
    """Test case for add_tags

    
    """
    body = {"ResourceArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.AddTags',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_associate_trial_component(client):
    """Test case for associate_trial_component

    
    """
    body = {"TrialName":"","TrialComponentName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.AssociateTrialComponent',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_batch_describe_model_package(client):
    """Test case for batch_describe_model_package

    
    """
    body = {"ModelPackageArnList":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.BatchDescribeModelPackage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_action(client):
    """Test case for create_action

    
    """
    body = {"Status":"","ActionName":"","ActionType":"","Description":"","Properties":"","MetadataProperties":{"Repository":"","GeneratedBy":"","CommitId":"","ProjectId":""},"Source":{"SourceUri":"","SourceType":"","SourceId":""},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateAction',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_algorithm(client):
    """Test case for create_algorithm

    
    """
    body = {"ValidationSpecification":{"ValidationRole":"","ValidationProfiles":""},"InferenceSpecification":{"SupportedContentTypes":"","SupportedRealtimeInferenceInstanceTypes":"","Containers":"","SupportedTransformInstanceTypes":"","SupportedResponseMIMETypes":""},"AlgorithmDescription":"","TrainingSpecification":{"SupportedTrainingInstanceTypes":"","TrainingImageDigest":"","SupportedHyperParameters":"","SupportsDistributedTraining":"","MetricDefinitions":"","TrainingChannels":"","TrainingImage":"","SupportedTuningJobObjectiveMetrics":""},"AlgorithmName":"","Tags":"","CertifyForMarketplace":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateAlgorithm',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_app(client):
    """Test case for create_app

    
    """
    body = {"DomainId":"","SpaceName":"","ResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"AppType":"","UserProfileName":"","Tags":"","AppName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateApp',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_app_image_config(client):
    """Test case for create_app_image_config

    
    """
    body = {"KernelGatewayImageConfig":{"KernelSpecs":"","FileSystemConfig":{"MountPath":"","DefaultGid":"","DefaultUid":""}},"AppImageConfigName":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateAppImageConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_artifact(client):
    """Test case for create_artifact

    
    """
    body = {"ArtifactType":"","ArtifactName":"","Properties":"","MetadataProperties":{"Repository":"","GeneratedBy":"","CommitId":"","ProjectId":""},"Source":{"SourceUri":"","SourceTypes":""},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateArtifact',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_auto_ml_job(client):
    """Test case for create_auto_ml_job

    
    """
    body = {"AutoMLJobConfig":{"CandidateGenerationConfig":{"AlgorithmsConfig":"","FeatureSpecificationS3Uri":""},"SecurityConfig":{"EnableInterContainerTrafficEncryption":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""},"VolumeKmsKeyId":""},"Mode":"","CompletionCriteria":{"MaxRuntimePerTrainingJobInSeconds":"","MaxAutoMLJobRuntimeInSeconds":"","MaxCandidates":""},"DataSplitConfig":{"ValidationFraction":""}},"OutputDataConfig":{"KmsKeyId":"","S3OutputPath":""},"ModelDeployConfig":{"AutoGenerateEndpointName":"","EndpointName":""},"AutoMLJobName":"","ProblemType":"","AutoMLJobObjective":{"MetricName":""},"GenerateCandidateDefinitionsOnly":"","InputDataConfig":"","RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateAutoMLJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_auto_ml_job_v2(client):
    """Test case for create_auto_ml_job_v2

    
    """
    body = {"AutoMLJobInputDataConfig":"","OutputDataConfig":{"KmsKeyId":"","S3OutputPath":""},"SecurityConfig":{"EnableInterContainerTrafficEncryption":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""},"VolumeKmsKeyId":""},"ModelDeployConfig":{"AutoGenerateEndpointName":"","EndpointName":""},"AutoMLJobName":"","AutoMLJobObjective":{"MetricName":""},"DataSplitConfig":{"ValidationFraction":""},"AutoMLProblemTypeConfig":{"ImageClassificationJobConfig":{"CompletionCriteria":{"MaxRuntimePerTrainingJobInSeconds":"","MaxAutoMLJobRuntimeInSeconds":"","MaxCandidates":""}},"TimeSeriesForecastingJobConfig":{"FeatureSpecificationS3Uri":"","ForecastQuantiles":"","ForecastHorizon":"","CompletionCriteria":{"MaxRuntimePerTrainingJobInSeconds":"","MaxAutoMLJobRuntimeInSeconds":"","MaxCandidates":""},"Transformations":{"Aggregation":"","Filling":""},"TimeSeriesConfig":{"GroupingAttributeNames":"","TargetAttributeName":"","TimestampAttributeName":"","ItemIdentifierAttributeName":""},"ForecastFrequency":""},"TextClassificationJobConfig":{"TargetLabelColumn":"","CompletionCriteria":{"MaxRuntimePerTrainingJobInSeconds":"","MaxAutoMLJobRuntimeInSeconds":"","MaxCandidates":""},"ContentColumn":""},"TabularJobConfig":{"CandidateGenerationConfig":{"AlgorithmsConfig":""},"FeatureSpecificationS3Uri":"","Mode":"","ProblemType":"","TargetAttributeName":"","SampleWeightAttributeName":"","CompletionCriteria":{"MaxRuntimePerTrainingJobInSeconds":"","MaxAutoMLJobRuntimeInSeconds":"","MaxCandidates":""},"GenerateCandidateDefinitionsOnly":""}},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateAutoMLJobV2',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_code_repository(client):
    """Test case for create_code_repository

    
    """
    body = {"CodeRepositoryName":"","GitConfig":{"SecretArn":"","Branch":"","RepositoryUrl":""},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateCodeRepository',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_compilation_job(client):
    """Test case for create_compilation_job

    
    """
    body = {"ModelPackageVersionArn":"","OutputConfig":{"KmsKeyId":"","S3OutputLocation":"","CompilerOptions":"","TargetPlatform":{"Os":"","Arch":"","Accelerator":""},"TargetDevice":""},"StoppingCondition":{"MaxRuntimeInSeconds":"","MaxWaitTimeInSeconds":""},"VpcConfig":{"Subnets":"","SecurityGroupIds":""},"CompilationJobName":"","InputConfig":{"DataInputConfig":"","S3Uri":"","FrameworkVersion":"","Framework":""},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateCompilationJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_context(client):
    """Test case for create_context

    
    """
    body = {"ContextType":"","Description":"","Properties":"","Source":{"SourceUri":"","SourceType":"","SourceId":""},"Tags":"","ContextName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateContext',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_data_quality_job_definition(client):
    """Test case for create_data_quality_job_definition

    
    """
    body = {"DataQualityJobInput":{"BatchTransformInput":{"DatasetFormat":{"Parquet":"","Csv":{"Header":""},"Json":{"Line":""}},"S3DataDistributionType":"","ProbabilityThresholdAttribute":"","StartTimeOffset":"","EndTimeOffset":"","InferenceAttribute":"","DataCapturedDestinationS3Uri":"","S3InputMode":"","LocalPath":"","ProbabilityAttribute":"","FeaturesAttribute":""},"EndpointInput":{"S3DataDistributionType":"","ProbabilityThresholdAttribute":"","StartTimeOffset":"","EndTimeOffset":"","EndpointName":"","InferenceAttribute":"","S3InputMode":"","LocalPath":"","ProbabilityAttribute":"","FeaturesAttribute":""}},"DataQualityAppSpecification":{"ContainerEntrypoint":"","PostAnalyticsProcessorSourceUri":"","RecordPreprocessorSourceUri":"","Environment":"","ImageUri":"","ContainerArguments":""},"StoppingCondition":{"MaxRuntimeInSeconds":""},"JobDefinitionName":"","JobResources":{"ClusterConfig":{"InstanceCount":"","VolumeSizeInGB":"","VolumeKmsKeyId":"","InstanceType":""}},"NetworkConfig":{"EnableNetworkIsolation":"","EnableInterContainerTrafficEncryption":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""}},"DataQualityBaselineConfig":{"StatisticsResource":{"S3Uri":""},"ConstraintsResource":{"S3Uri":""},"BaseliningJobName":""},"DataQualityJobOutputConfig":{"MonitoringOutputs":"","KmsKeyId":""},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateDataQualityJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_device_fleet(client):
    """Test case for create_device_fleet

    
    """
    body = {"DeviceFleetName":"","EnableIotRoleAlias":"","Description":"","OutputConfig":{"PresetDeploymentType":"","KmsKeyId":"","S3OutputLocation":"","PresetDeploymentConfig":""},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateDeviceFleet',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_domain(client):
    """Test case for create_domain

    
    """
    body = {"AppNetworkAccessType":"","VpcId":"","KmsKeyId":"","DefaultSpaceSettings":{"SecurityGroups":"","KernelGatewayAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":""},"JupyterServerAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":"","CodeRepositories":""},"ExecutionRole":""},"DomainName":"","AppSecurityGroupManagement":"","HomeEfsFileSystemKmsKeyId":"","DefaultUserSettings":{"SecurityGroups":"","KernelGatewayAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":""},"RStudioServerProAppSettings":{"AccessStatus":"","UserGroup":""},"RSessionAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""}},"JupyterServerAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":"","CodeRepositories":""},"CanvasAppSettings":{"TimeSeriesForecastingSettings":{"Status":"","AmazonForecastRoleArn":""},"ModelRegisterSettings":{"Status":"","CrossAccountModelRegisterRoleArn":""},"WorkspaceSettings":{"S3KmsKeyId":"","S3ArtifactPath":""}},"ExecutionRole":"","TensorBoardAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""}},"SharingSettings":{"NotebookOutputOption":"","S3KmsKeyId":"","S3OutputPath":""}},"SubnetIds":"","AuthMode":"","Tags":"","DomainSettings":{"ExecutionRoleIdentityConfig":"","RStudioServerProDomainSettings":{"DomainExecutionRoleArn":"","RStudioConnectUrl":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"RStudioPackageManagerUrl":""},"SecurityGroupIds":""}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateDomain',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_edge_deployment_plan(client):
    """Test case for create_edge_deployment_plan

    
    """
    body = {"EdgeDeploymentPlanName":"","DeviceFleetName":"","Stages":"","ModelConfigs":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateEdgeDeploymentPlan',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_edge_deployment_stage(client):
    """Test case for create_edge_deployment_stage

    
    """
    body = {"EdgeDeploymentPlanName":"","Stages":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateEdgeDeploymentStage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_edge_packaging_job(client):
    """Test case for create_edge_packaging_job

    
    """
    body = {"ModelName":"","OutputConfig":{"PresetDeploymentType":"","KmsKeyId":"","S3OutputLocation":"","PresetDeploymentConfig":""},"CompilationJobName":"","EdgePackagingJobName":"","ModelVersion":"","RoleArn":"","Tags":"","ResourceKey":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateEdgePackagingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_endpoint(client):
    """Test case for create_endpoint

    
    """
    body = {"EndpointName":"","EndpointConfigName":"","DeploymentConfig":{"AutoRollbackConfiguration":{"Alarms":""},"RollingUpdatePolicy":{"MaximumExecutionTimeoutInSeconds":"","MaximumBatchSize":{"Type":"","Value":""},"WaitIntervalInSeconds":"","RollbackMaximumBatchSize":{"Type":"","Value":""}},"BlueGreenUpdatePolicy":{"MaximumExecutionTimeoutInSeconds":"","TerminationWaitInSeconds":"","TrafficRoutingConfiguration":{"Type":"","LinearStepSize":{"Type":"","Value":""},"CanarySize":{"Type":"","Value":""},"WaitIntervalInSeconds":""}}},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateEndpoint',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_endpoint_config(client):
    """Test case for create_endpoint_config

    
    """
    body = {"DataCaptureConfig":{"CaptureOptions":"","KmsKeyId":"","DestinationS3Uri":"","InitialSamplingPercentage":"","CaptureContentTypeHeader":{"JsonContentTypes":"","CsvContentTypes":""},"EnableCapture":""},"ShadowProductionVariants":"","ProductionVariants":"","KmsKeyId":"","AsyncInferenceConfig":{"OutputConfig":{"KmsKeyId":"","NotificationConfig":{"IncludeInferenceResponseIn":"","SuccessTopic":"","ErrorTopic":""},"S3OutputPath":"","S3FailurePath":""},"ClientConfig":{"MaxConcurrentInvocationsPerInstance":""}},"EndpointConfigName":"","ExplainerConfig":{"ClarifyExplainerConfig":{"InferenceConfig":{"ContentTemplate":"","LabelHeaders":"","MaxPayloadInMB":"","ProbabilityIndex":"","LabelAttribute":"","FeatureTypes":"","FeatureHeaders":"","LabelIndex":"","ProbabilityAttribute":"","FeaturesAttribute":"","MaxRecordCount":""},"EnableExplanations":"","ShapConfig":{"TextConfig":{"Language":"","Granularity":""},"UseLogit":"","Seed":"","ShapBaselineConfig":{"ShapBaseline":"","ShapBaselineUri":"","MimeType":""},"NumberOfSamples":""}}},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateEndpointConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_experiment(client):
    """Test case for create_experiment

    
    """
    body = {"Description":"","ExperimentName":"","DisplayName":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_feature_group(client):
    """Test case for create_feature_group

    
    """
    body = {"Description":"","OfflineStoreConfig":{"DataCatalogConfig":{"TableName":"","Database":"","Catalog":""},"S3StorageConfig":{"ResolvedOutputS3Uri":"","KmsKeyId":"","S3Uri":""},"DisableGlueTableCreation":"","TableFormat":""},"FeatureDefinitions":"","RecordIdentifierFeatureName":"","EventTimeFeatureName":"","FeatureGroupName":"","OnlineStoreConfig":{"EnableOnlineStore":"","SecurityConfig":{"KmsKeyId":""},"TtlDuration":{"Value":"","Unit":""}},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateFeatureGroup',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_flow_definition(client):
    """Test case for create_flow_definition

    
    """
    body = {"FlowDefinitionName":"","OutputConfig":{"KmsKeyId":"","S3OutputPath":""},"HumanLoopConfig":{"WorkteamArn":"","HumanTaskUiArn":"","TaskDescription":"","PublicWorkforceTaskPrice":{"AmountInUsd":{"Dollars":"","Cents":"","TenthFractionsOfACent":""}},"TaskCount":"","TaskTitle":"","TaskAvailabilityLifetimeInSeconds":"","TaskKeywords":"","TaskTimeLimitInSeconds":""},"HumanLoopActivationConfig":{"HumanLoopActivationConditionsConfig":{"HumanLoopActivationConditions":""}},"HumanLoopRequestSource":{"AwsManagedHumanLoopRequestSource":""},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateFlowDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_hub(client):
    """Test case for create_hub

    
    """
    body = {"HubName":"","HubDisplayName":"","HubDescription":"","S3StorageConfig":{"S3OutputPath":""},"HubSearchKeywords":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateHub',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_human_task_ui(client):
    """Test case for create_human_task_ui

    
    """
    body = {"HumanTaskUiName":"","UiTemplate":{"Content":""},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateHumanTaskUi',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_hyper_parameter_tuning_job(client):
    """Test case for create_hyper_parameter_tuning_job

    
    """
    body = {"WarmStartConfig":{"ParentHyperParameterTuningJobs":"","WarmStartType":""},"TrainingJobDefinitions":"","HyperParameterTuningJobName":"","TrainingJobDefinition":{"EnableManagedSpotTraining":"","AlgorithmSpecification":{"TrainingInputMode":"Pipe","MetricDefinitions":"","TrainingImage":"","AlgorithmName":""},"VpcConfig":{"Subnets":"","SecurityGroupIds":""},"OutputDataConfig":{"KmsKeyId":"","S3OutputPath":"","CompressionType":""},"CheckpointConfig":{"S3Uri":"","LocalPath":""},"InputDataConfig":"","RoleArn":"","EnableNetworkIsolation":"","EnableInterContainerTrafficEncryption":"","StoppingCondition":{"MaxRuntimeInSeconds":"","MaxWaitTimeInSeconds":""},"HyperParameterTuningResourceConfig":{"InstanceCount":"","AllocationStrategy":"","VolumeSizeInGB":"","VolumeKmsKeyId":"","InstanceConfigs":"","InstanceType":""},"StaticHyperParameters":"","Environment":"","DefinitionName":"","TuningObjective":{"MetricName":"","Type":""},"ResourceConfig":{"InstanceCount":"","VolumeSizeInGB":"","KeepAlivePeriodInSeconds":"","VolumeKmsKeyId":"","InstanceGroups":"","InstanceType":""},"RetryStrategy":{"MaximumRetryAttempts":""},"HyperParameterRanges":{"CategoricalParameterRanges":"","IntegerParameterRanges":"","ContinuousParameterRanges":"","AutoParameters":""}},"Autotune":{"Mode":""},"HyperParameterTuningJobConfig":{"RandomSeed":"","TrainingJobEarlyStoppingType":"","StrategyConfig":{"HyperbandStrategyConfig":{"MaxResource":"","MinResource":""}},"HyperParameterTuningJobObjective":{"MetricName":"","Type":""},"ResourceLimits":{"MaxRuntimeInSeconds":"","MaxParallelTrainingJobs":"","MaxNumberOfTrainingJobs":""},"Strategy":"","ParameterRanges":{"CategoricalParameterRanges":"","IntegerParameterRanges":"","ContinuousParameterRanges":"","AutoParameters":""},"TuningJobCompletionCriteria":{"BestObjectiveNotImproving":{"MaxNumberOfTrainingJobsNotImproving":""},"ConvergenceDetected":{"CompleteOnConvergence":""},"TargetObjectiveMetricValue":""}},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateHyperParameterTuningJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_image(client):
    """Test case for create_image

    
    """
    body = {"ImageName":"","Description":"","DisplayName":"","RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateImage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_image_version(client):
    """Test case for create_image_version

    
    """
    body = {"ImageName":"","Horovod":"","JobType":"","Processor":"","VendorGuidance":"","ProgrammingLang":"","MLFramework":"","Aliases":"","ClientToken":"","BaseImage":"","ReleaseNotes":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateImageVersion',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_inference_experiment(client):
    """Test case for create_inference_experiment

    
    """
    body = {"DataStorageConfig":{"Destination":"","ContentType":{"JsonContentTypes":"","CsvContentTypes":""},"KmsKey":""},"Type":"","Description":"","EndpointName":"","Schedule":{"EndTime":"","StartTime":""},"ModelVariants":"","ShadowModeConfig":{"SourceModelVariantName":"","ShadowModelVariants":""},"RoleArn":"","KmsKey":"","Tags":"","Name":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateInferenceExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_inference_recommendations_job(client):
    """Test case for create_inference_recommendations_job

    
    """
    body = {"JobType":"","JobDescription":"","OutputConfig":{"KmsKeyId":"","CompiledOutputConfig":{"S3OutputUri":""}},"JobName":"","InputConfig":{"ContainerConfig":{"Task":"","NearestModelName":"","DataInputConfig":"","SupportedEndpointType":"","FrameworkVersion":"","PayloadConfig":{"SupportedContentTypes":"","SamplePayloadUrl":""},"SupportedInstanceTypes":"","Domain":"","Framework":""},"Endpoints":"","ModelPackageVersionArn":"","ModelName":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""},"VolumeKmsKeyId":"","TrafficPattern":{"Phases":"","Stairs":{"DurationInSeconds":"","NumberOfSteps":"","UsersPerStep":""},"TrafficType":""},"EndpointConfigurations":"","JobDurationInSeconds":"","ResourceLimit":{"MaxNumberOfTests":"","MaxParallelOfTests":""}},"StoppingConditions":{"FlatInvocations":"","ModelLatencyThresholds":"","MaxInvocations":""},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateInferenceRecommendationsJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_labeling_job(client):
    """Test case for create_labeling_job

    
    """
    body = {"LabelAttributeName":"","LabelingJobName":"","OutputConfig":{"KmsKeyId":"","SnsTopicArn":"","S3OutputPath":""},"InputConfig":{"DataAttributes":{"ContentClassifiers":""},"DataSource":{"S3DataSource":{"ManifestS3Uri":""},"SnsDataSource":{"SnsTopicArn":""}}},"HumanTaskConfig":{"UiConfig":{"UiTemplateS3Uri":"","HumanTaskUiArn":""},"WorkteamArn":"","MaxConcurrentTaskCount":"","TaskDescription":"","AnnotationConsolidationConfig":{"AnnotationConsolidationLambdaArn":""},"PublicWorkforceTaskPrice":{"AmountInUsd":{"Dollars":"","Cents":"","TenthFractionsOfACent":""}},"NumberOfHumanWorkersPerDataObject":"","TaskTitle":"","TaskAvailabilityLifetimeInSeconds":"","PreHumanTaskLambdaArn":"","TaskKeywords":"","TaskTimeLimitInSeconds":""},"StoppingConditions":{"MaxPercentageOfInputDatasetLabeled":"","MaxHumanLabeledObjectCount":""},"LabelingJobAlgorithmsConfig":{"LabelingJobAlgorithmSpecificationArn":"","InitialActiveLearningModelArn":"","LabelingJobResourceConfig":{"VpcConfig":{"Subnets":"","SecurityGroupIds":""},"VolumeKmsKeyId":""}},"LabelCategoryConfigS3Uri":"","RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateLabelingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_model(client):
    """Test case for create_model

    
    """
    body = {"ExecutionRoleArn":"","EnableNetworkIsolation":"","PrimaryContainer":{"ImageConfig":{"RepositoryAuthConfig":{"RepositoryCredentialsProviderArn":""},"RepositoryAccessMode":""},"InferenceSpecificationName":"","ContainerHostname":"","ModelPackageName":"","Mode":"","ModelDataUrl":"","Environment":"","Image":"","ModelDataSource":{"S3DataSource":{"S3Uri":"","S3DataType":"","CompressionType":""}},"MultiModelConfig":{"ModelCacheSetting":""}},"ModelName":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""},"Containers":"","InferenceExecutionConfig":{"Mode":""},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateModel',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_model_bias_job_definition(client):
    """Test case for create_model_bias_job_definition

    
    """
    body = {"ModelBiasJobInput":{"GroundTruthS3Input":{"S3Uri":""},"BatchTransformInput":{"DatasetFormat":{"Parquet":"","Csv":{"Header":""},"Json":{"Line":""}},"S3DataDistributionType":"","ProbabilityThresholdAttribute":"","StartTimeOffset":"","EndTimeOffset":"","InferenceAttribute":"","DataCapturedDestinationS3Uri":"","S3InputMode":"","LocalPath":"","ProbabilityAttribute":"","FeaturesAttribute":""},"EndpointInput":{"S3DataDistributionType":"","ProbabilityThresholdAttribute":"","StartTimeOffset":"","EndTimeOffset":"","EndpointName":"","InferenceAttribute":"","S3InputMode":"","LocalPath":"","ProbabilityAttribute":"","FeaturesAttribute":""}},"ModelBiasJobOutputConfig":{"MonitoringOutputs":"","KmsKeyId":""},"StoppingCondition":{"MaxRuntimeInSeconds":""},"JobDefinitionName":"","JobResources":{"ClusterConfig":{"InstanceCount":"","VolumeSizeInGB":"","VolumeKmsKeyId":"","InstanceType":""}},"NetworkConfig":{"EnableNetworkIsolation":"","EnableInterContainerTrafficEncryption":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""}},"ModelBiasBaselineConfig":{"ConstraintsResource":{"S3Uri":""},"BaseliningJobName":""},"ModelBiasAppSpecification":{"ConfigUri":"","Environment":"","ImageUri":""},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateModelBiasJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_model_card(client):
    """Test case for create_model_card

    
    """
    body = {"ModelCardName":"","ModelCardStatus":"","SecurityConfig":{"KmsKeyId":""},"Content":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateModelCard',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_model_card_export_job(client):
    """Test case for create_model_card_export_job

    
    """
    body = {"ModelCardName":"","ModelCardExportJobName":"","OutputConfig":{"S3OutputPath":""},"ModelCardVersion":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateModelCardExportJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_model_explainability_job_definition(client):
    """Test case for create_model_explainability_job_definition

    
    """
    body = {"ModelExplainabilityJobOutputConfig":{"MonitoringOutputs":"","KmsKeyId":""},"StoppingCondition":{"MaxRuntimeInSeconds":""},"ModelExplainabilityBaselineConfig":{"ConstraintsResource":{"S3Uri":""},"BaseliningJobName":""},"JobDefinitionName":"","JobResources":{"ClusterConfig":{"InstanceCount":"","VolumeSizeInGB":"","VolumeKmsKeyId":"","InstanceType":""}},"NetworkConfig":{"EnableNetworkIsolation":"","EnableInterContainerTrafficEncryption":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""}},"ModelExplainabilityJobInput":{"BatchTransformInput":{"DatasetFormat":{"Parquet":"","Csv":{"Header":""},"Json":{"Line":""}},"S3DataDistributionType":"","ProbabilityThresholdAttribute":"","StartTimeOffset":"","EndTimeOffset":"","InferenceAttribute":"","DataCapturedDestinationS3Uri":"","S3InputMode":"","LocalPath":"","ProbabilityAttribute":"","FeaturesAttribute":""},"EndpointInput":{"S3DataDistributionType":"","ProbabilityThresholdAttribute":"","StartTimeOffset":"","EndTimeOffset":"","EndpointName":"","InferenceAttribute":"","S3InputMode":"","LocalPath":"","ProbabilityAttribute":"","FeaturesAttribute":""}},"RoleArn":"","Tags":"","ModelExplainabilityAppSpecification":{"ConfigUri":"","Environment":"","ImageUri":""}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateModelExplainabilityJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_model_package(client):
    """Test case for create_model_package

    
    """
    body = {"ModelPackageGroupName":"","DriftCheckBaselines":{"ModelDataQuality":{"Constraints":{"ContentType":"","S3Uri":"","ContentDigest":""},"Statistics":{"ContentType":"","S3Uri":"","ContentDigest":""}},"Bias":{"ConfigFile":{"ContentType":"","S3Uri":"","ContentDigest":""},"PreTrainingConstraints":{"ContentType":"","S3Uri":"","ContentDigest":""},"PostTrainingConstraints":{"ContentType":"","S3Uri":"","ContentDigest":""}},"ModelQuality":{"Constraints":{"ContentType":"","S3Uri":"","ContentDigest":""},"Statistics":{"ContentType":"","S3Uri":"","ContentDigest":""}},"Explainability":{"Constraints":{"ContentType":"","S3Uri":"","ContentDigest":""},"ConfigFile":{"ContentType":"","S3Uri":"","ContentDigest":""}}},"ModelMetrics":{"ModelDataQuality":{"Constraints":{"ContentType":"","S3Uri":"","ContentDigest":""},"Statistics":{"ContentType":"","S3Uri":"","ContentDigest":""}},"ModelQuality":{"Constraints":{"ContentType":"","S3Uri":"","ContentDigest":""},"Statistics":{"ContentType":"","S3Uri":"","ContentDigest":""}},"Bias":{"Report":{"ContentType":"","S3Uri":"","ContentDigest":""},"PreTrainingReport":{"ContentType":"","S3Uri":"","ContentDigest":""},"PostTrainingReport":{"ContentType":"","S3Uri":"","ContentDigest":""}},"Explainability":{"Report":{"ContentType":"","S3Uri":"","ContentDigest":""}}},"Task":"","CustomerMetadataProperties":"","ModelApprovalStatus":"","MetadataProperties":{"Repository":"","GeneratedBy":"","CommitId":"","ProjectId":""},"ValidationSpecification":{"ValidationRole":"","ValidationProfiles":""},"SourceAlgorithmSpecification":{"SourceAlgorithms":""},"ModelPackageName":"","ModelPackageDescription":"","InferenceSpecification":{"SupportedContentTypes":"","SupportedRealtimeInferenceInstanceTypes":"","Containers":"","SupportedTransformInstanceTypes":"","SupportedResponseMIMETypes":""},"SamplePayloadUrl":"","ClientToken":"","Domain":"","Tags":"","CertifyForMarketplace":"","AdditionalInferenceSpecifications":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateModelPackage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_model_package_group(client):
    """Test case for create_model_package_group

    
    """
    body = {"ModelPackageGroupName":"","ModelPackageGroupDescription":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateModelPackageGroup',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_model_quality_job_definition(client):
    """Test case for create_model_quality_job_definition

    
    """
    body = {"ModelQualityAppSpecification":{"ContainerEntrypoint":"","ProblemType":"","PostAnalyticsProcessorSourceUri":"","RecordPreprocessorSourceUri":"","Environment":"","ImageUri":"","ContainerArguments":""},"StoppingCondition":{"MaxRuntimeInSeconds":""},"ModelQualityBaselineConfig":{"ConstraintsResource":{"S3Uri":""},"BaseliningJobName":""},"JobDefinitionName":"","ModelQualityJobInput":{"GroundTruthS3Input":{"S3Uri":""},"BatchTransformInput":{"DatasetFormat":{"Parquet":"","Csv":{"Header":""},"Json":{"Line":""}},"S3DataDistributionType":"","ProbabilityThresholdAttribute":"","StartTimeOffset":"","EndTimeOffset":"","InferenceAttribute":"","DataCapturedDestinationS3Uri":"","S3InputMode":"","LocalPath":"","ProbabilityAttribute":"","FeaturesAttribute":""},"EndpointInput":{"S3DataDistributionType":"","ProbabilityThresholdAttribute":"","StartTimeOffset":"","EndTimeOffset":"","EndpointName":"","InferenceAttribute":"","S3InputMode":"","LocalPath":"","ProbabilityAttribute":"","FeaturesAttribute":""}},"JobResources":{"ClusterConfig":{"InstanceCount":"","VolumeSizeInGB":"","VolumeKmsKeyId":"","InstanceType":""}},"NetworkConfig":{"EnableNetworkIsolation":"","EnableInterContainerTrafficEncryption":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""}},"ModelQualityJobOutputConfig":{"MonitoringOutputs":"","KmsKeyId":""},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateModelQualityJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_monitoring_schedule(client):
    """Test case for create_monitoring_schedule

    
    """
    body = {"MonitoringScheduleConfig":{"ScheduleConfig":{"ScheduleExpression":""},"MonitoringJobDefinition":{"MonitoringInputs":"","MonitoringResources":{"ClusterConfig":{"InstanceCount":"","VolumeSizeInGB":"","VolumeKmsKeyId":"","InstanceType":""}},"BaselineConfig":{"StatisticsResource":{"S3Uri":""},"ConstraintsResource":{"S3Uri":""},"BaseliningJobName":""},"StoppingCondition":{"MaxRuntimeInSeconds":""},"MonitoringAppSpecification":{"ContainerEntrypoint":"","PostAnalyticsProcessorSourceUri":"","RecordPreprocessorSourceUri":"","ImageUri":"","ContainerArguments":""},"NetworkConfig":{"EnableNetworkIsolation":"","EnableInterContainerTrafficEncryption":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""}},"Environment":"","MonitoringOutputConfig":{"MonitoringOutputs":"","KmsKeyId":""},"RoleArn":""},"MonitoringJobDefinitionName":"","MonitoringType":""},"MonitoringScheduleName":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateMonitoringSchedule',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_notebook_instance(client):
    """Test case for create_notebook_instance

    
    """
    body = {"KmsKeyId":"","VolumeSizeInGB":"","DirectInternetAccess":"","DefaultCodeRepository":"","AdditionalCodeRepositories":"","PlatformIdentifier":"","SubnetId":"","AcceleratorTypes":"","SecurityGroupIds":"","RoleArn":"","InstanceMetadataServiceConfiguration":{"MinimumInstanceMetadataServiceVersion":""},"RootAccess":"","NotebookInstanceName":"","InstanceType":"","LifecycleConfigName":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateNotebookInstance',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_notebook_instance_lifecycle_config(client):
    """Test case for create_notebook_instance_lifecycle_config

    
    """
    body = {"OnStart":"","NotebookInstanceLifecycleConfigName":"","OnCreate":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateNotebookInstanceLifecycleConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_pipeline(client):
    """Test case for create_pipeline

    
    """
    body = {"ClientRequestToken":"","PipelineName":"","ParallelismConfiguration":{"MaxParallelExecutionSteps":""},"PipelineDescription":"","PipelineDisplayName":"","PipelineDefinition":"","PipelineDefinitionS3Location":{"VersionId":"","Bucket":"","ObjectKey":""},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreatePipeline',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_presigned_domain_url(client):
    """Test case for create_presigned_domain_url

    
    """
    body = {"DomainId":"","SpaceName":"","SessionExpirationDurationInSeconds":"","ExpiresInSeconds":"","UserProfileName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreatePresignedDomainUrl',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_presigned_notebook_instance_url(client):
    """Test case for create_presigned_notebook_instance_url

    
    """
    body = {"SessionExpirationDurationInSeconds":"","NotebookInstanceName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreatePresignedNotebookInstanceUrl',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_processing_job(client):
    """Test case for create_processing_job

    
    """
    body = {"ProcessingResources":{"ClusterConfig":{"InstanceCount":"","VolumeSizeInGB":"","VolumeKmsKeyId":"","InstanceType":""}},"StoppingCondition":{"MaxRuntimeInSeconds":""},"ExperimentConfig":{"TrialName":"","ExperimentName":"","TrialComponentDisplayName":"","RunName":""},"ProcessingInputs":"","ProcessingOutputConfig":{"KmsKeyId":"","Outputs":""},"NetworkConfig":{"EnableNetworkIsolation":"","EnableInterContainerTrafficEncryption":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""}},"Environment":"","ProcessingJobName":"","AppSpecification":{"ContainerEntrypoint":"","ImageUri":"","ContainerArguments":""},"RoleArn":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateProcessingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_project(client):
    """Test case for create_project

    
    """
    body = {"ProjectName":"","ServiceCatalogProvisioningDetails":{"PathId":"","ProvisioningParameters":"","ProductId":"","ProvisioningArtifactId":""},"ProjectDescription":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateProject',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_space(client):
    """Test case for create_space

    
    """
    body = {"DomainId":"","SpaceName":"","SpaceSettings":{"KernelGatewayAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":""},"JupyterServerAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":"","CodeRepositories":""}},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateSpace',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_studio_lifecycle_config(client):
    """Test case for create_studio_lifecycle_config

    
    """
    body = {"StudioLifecycleConfigAppType":"","StudioLifecycleConfigName":"","StudioLifecycleConfigContent":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateStudioLifecycleConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_training_job(client):
    """Test case for create_training_job

    
    """
    body = {"EnableManagedSpotTraining":"","HyperParameters":"","DebugHookConfig":{"CollectionConfigurations":"","LocalPath":"","HookParameters":"","S3OutputPath":""},"TrainingJobName":"","AlgorithmSpecification":{"EnableSageMakerMetricsTimeSeries":"","ContainerEntrypoint":"","TrainingImageConfig":{"TrainingRepositoryAccessMode":"","TrainingRepositoryAuthConfig":{"TrainingRepositoryCredentialsProviderArn":""}},"TrainingInputMode":"Pipe","MetricDefinitions":"","TrainingImage":"","AlgorithmName":"","ContainerArguments":""},"OutputDataConfig":{"KmsKeyId":"","S3OutputPath":"","CompressionType":""},"VpcConfig":{"Subnets":"","SecurityGroupIds":""},"CheckpointConfig":{"S3Uri":"","LocalPath":""},"ProfilerConfig":{"DisableProfiler":"","ProfilingIntervalInMilliseconds":"","ProfilingParameters":"","S3OutputPath":""},"InputDataConfig":"","TensorBoardOutputConfig":{"LocalPath":"","S3OutputPath":""},"ProfilerRuleConfigurations":"","RoleArn":"","EnableNetworkIsolation":"","EnableInterContainerTrafficEncryption":"","StoppingCondition":{"MaxRuntimeInSeconds":"","MaxWaitTimeInSeconds":""},"ExperimentConfig":{"TrialName":"","ExperimentName":"","TrialComponentDisplayName":"","RunName":""},"DebugRuleConfigurations":"","Environment":"","ResourceConfig":{"InstanceCount":"","VolumeSizeInGB":"","KeepAlivePeriodInSeconds":"","VolumeKmsKeyId":"","InstanceGroups":"","InstanceType":""},"RetryStrategy":{"MaximumRetryAttempts":""},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateTrainingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_transform_job(client):
    """Test case for create_transform_job

    
    """
    body = {"ModelName":"","MaxPayloadInMB":"","TransformOutput":{"AssembleWith":"","Accept":"","KmsKeyId":"","S3OutputPath":""},"TransformInput":{"ContentType":"","SplitType":"","CompressionType":"","DataSource":{"S3DataSource":{"S3Uri":"","S3DataType":""}}},"DataProcessing":{"OutputFilter":"","JoinSource":"","InputFilter":""},"DataCaptureConfig":{"KmsKeyId":"","GenerateInferenceId":"","DestinationS3Uri":""},"TransformResources":{"InstanceCount":"","VolumeKmsKeyId":"","InstanceType":""},"MaxConcurrentTransforms":"","ModelClientConfig":{"InvocationsMaxRetries":"","InvocationsTimeoutInSeconds":""},"ExperimentConfig":{"TrialName":"","ExperimentName":"","TrialComponentDisplayName":"","RunName":""},"Environment":"","TransformJobName":"","BatchStrategy":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateTransformJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_trial(client):
    """Test case for create_trial

    
    """
    body = {"TrialName":"","ExperimentName":"","DisplayName":"","MetadataProperties":{"Repository":"","GeneratedBy":"","CommitId":"","ProjectId":""},"Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateTrial',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_trial_component(client):
    """Test case for create_trial_component

    
    """
    body = {"Status":{"Message":"","PrimaryStatus":""},"Parameters":"","EndTime":"","InputArtifacts":"","DisplayName":"","StartTime":"","OutputArtifacts":"","MetadataProperties":{"Repository":"","GeneratedBy":"","CommitId":"","ProjectId":""},"Tags":"","TrialComponentName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateTrialComponent',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_user_profile(client):
    """Test case for create_user_profile

    
    """
    body = {"DomainId":"","SingleSignOnUserValue":"","UserSettings":{"SecurityGroups":"","KernelGatewayAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":""},"RStudioServerProAppSettings":{"AccessStatus":"","UserGroup":""},"RSessionAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""}},"JupyterServerAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":"","CodeRepositories":""},"CanvasAppSettings":{"TimeSeriesForecastingSettings":{"Status":"","AmazonForecastRoleArn":""},"ModelRegisterSettings":{"Status":"","CrossAccountModelRegisterRoleArn":""},"WorkspaceSettings":{"S3KmsKeyId":"","S3ArtifactPath":""}},"ExecutionRole":"","TensorBoardAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""}},"SharingSettings":{"NotebookOutputOption":"","S3KmsKeyId":"","S3OutputPath":""}},"UserProfileName":"","SingleSignOnUserIdentifier":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateUserProfile',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_workforce(client):
    """Test case for create_workforce

    
    """
    body = {"OidcConfig":{"TokenEndpoint":"","LogoutEndpoint":"","JwksUri":"","Issuer":"","ClientSecret":"","UserInfoEndpoint":"","ClientId":"","AuthorizationEndpoint":""},"CognitoConfig":{"UserPool":"","ClientId":""},"WorkforceVpcConfig":{"Subnets":"","VpcId":"","SecurityGroupIds":""},"WorkforceName":"","Tags":"","SourceIpConfig":{"Cidrs":""}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateWorkforce',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_create_workteam(client):
    """Test case for create_workteam

    
    """
    body = {"Description":"","NotificationConfiguration":{"NotificationTopicArn":""},"WorkteamName":"","MemberDefinitions":"","WorkforceName":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.CreateWorkteam',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_action(client):
    """Test case for delete_action

    
    """
    body = {"ActionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteAction',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_algorithm(client):
    """Test case for delete_algorithm

    
    """
    body = {"AlgorithmName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteAlgorithm',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_app(client):
    """Test case for delete_app

    
    """
    body = {"DomainId":"","SpaceName":"","AppType":"","UserProfileName":"","AppName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteApp',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_app_image_config(client):
    """Test case for delete_app_image_config

    
    """
    body = {"AppImageConfigName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteAppImageConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_artifact(client):
    """Test case for delete_artifact

    
    """
    body = {"ArtifactArn":"","Source":{"SourceUri":"","SourceTypes":""}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteArtifact',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_association(client):
    """Test case for delete_association

    
    """
    body = {"SourceArn":"","DestinationArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteAssociation',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_code_repository(client):
    """Test case for delete_code_repository

    
    """
    body = {"CodeRepositoryName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteCodeRepository',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_context(client):
    """Test case for delete_context

    
    """
    body = {"ContextName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteContext',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_data_quality_job_definition(client):
    """Test case for delete_data_quality_job_definition

    
    """
    body = {"JobDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteDataQualityJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_device_fleet(client):
    """Test case for delete_device_fleet

    
    """
    body = {"DeviceFleetName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteDeviceFleet',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_domain(client):
    """Test case for delete_domain

    
    """
    body = {"DomainId":"","RetentionPolicy":{"HomeEfsFileSystem":""}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteDomain',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_edge_deployment_plan(client):
    """Test case for delete_edge_deployment_plan

    
    """
    body = {"EdgeDeploymentPlanName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteEdgeDeploymentPlan',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_edge_deployment_stage(client):
    """Test case for delete_edge_deployment_stage

    
    """
    body = {"EdgeDeploymentPlanName":"","StageName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteEdgeDeploymentStage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_endpoint(client):
    """Test case for delete_endpoint

    
    """
    body = {"EndpointName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteEndpoint',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_endpoint_config(client):
    """Test case for delete_endpoint_config

    
    """
    body = {"EndpointConfigName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteEndpointConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_experiment(client):
    """Test case for delete_experiment

    
    """
    body = {"ExperimentName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_feature_group(client):
    """Test case for delete_feature_group

    
    """
    body = {"FeatureGroupName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteFeatureGroup',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_flow_definition(client):
    """Test case for delete_flow_definition

    
    """
    body = {"FlowDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteFlowDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_hub(client):
    """Test case for delete_hub

    
    """
    body = {"HubName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteHub',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_hub_content(client):
    """Test case for delete_hub_content

    
    """
    body = {"HubName":"","HubContentType":"","HubContentName":"","HubContentVersion":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteHubContent',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_human_task_ui(client):
    """Test case for delete_human_task_ui

    
    """
    body = {"HumanTaskUiName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteHumanTaskUi',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_image(client):
    """Test case for delete_image

    
    """
    body = {"ImageName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteImage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_image_version(client):
    """Test case for delete_image_version

    
    """
    body = {"ImageName":"","Version":"","Alias":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteImageVersion',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_inference_experiment(client):
    """Test case for delete_inference_experiment

    
    """
    body = {"Name":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteInferenceExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_model(client):
    """Test case for delete_model

    
    """
    body = {"ModelName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteModel',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_model_bias_job_definition(client):
    """Test case for delete_model_bias_job_definition

    
    """
    body = {"JobDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteModelBiasJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_model_card(client):
    """Test case for delete_model_card

    
    """
    body = {"ModelCardName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteModelCard',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_model_explainability_job_definition(client):
    """Test case for delete_model_explainability_job_definition

    
    """
    body = {"JobDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteModelExplainabilityJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_model_package(client):
    """Test case for delete_model_package

    
    """
    body = {"ModelPackageName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteModelPackage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_model_package_group(client):
    """Test case for delete_model_package_group

    
    """
    body = {"ModelPackageGroupName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteModelPackageGroup',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_model_package_group_policy(client):
    """Test case for delete_model_package_group_policy

    
    """
    body = {"ModelPackageGroupName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteModelPackageGroupPolicy',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_model_quality_job_definition(client):
    """Test case for delete_model_quality_job_definition

    
    """
    body = {"JobDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteModelQualityJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_monitoring_schedule(client):
    """Test case for delete_monitoring_schedule

    
    """
    body = {"MonitoringScheduleName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteMonitoringSchedule',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_notebook_instance(client):
    """Test case for delete_notebook_instance

    
    """
    body = {"NotebookInstanceName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteNotebookInstance',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_notebook_instance_lifecycle_config(client):
    """Test case for delete_notebook_instance_lifecycle_config

    
    """
    body = {"NotebookInstanceLifecycleConfigName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteNotebookInstanceLifecycleConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_pipeline(client):
    """Test case for delete_pipeline

    
    """
    body = {"ClientRequestToken":"","PipelineName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeletePipeline',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_project(client):
    """Test case for delete_project

    
    """
    body = {"ProjectName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteProject',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_space(client):
    """Test case for delete_space

    
    """
    body = {"DomainId":"","SpaceName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteSpace',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_studio_lifecycle_config(client):
    """Test case for delete_studio_lifecycle_config

    
    """
    body = {"StudioLifecycleConfigName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteStudioLifecycleConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_tags(client):
    """Test case for delete_tags

    
    """
    body = {"ResourceArn":"","TagKeys":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteTags',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_trial(client):
    """Test case for delete_trial

    
    """
    body = {"TrialName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteTrial',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_trial_component(client):
    """Test case for delete_trial_component

    
    """
    body = {"TrialComponentName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteTrialComponent',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_user_profile(client):
    """Test case for delete_user_profile

    
    """
    body = {"DomainId":"","UserProfileName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteUserProfile',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_workforce(client):
    """Test case for delete_workforce

    
    """
    body = {"WorkforceName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteWorkforce',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_delete_workteam(client):
    """Test case for delete_workteam

    
    """
    body = {"WorkteamName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeleteWorkteam',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_deregister_devices(client):
    """Test case for deregister_devices

    
    """
    body = {"DeviceFleetName":"","DeviceNames":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DeregisterDevices',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_action(client):
    """Test case for describe_action

    
    """
    body = {"ActionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeAction',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_algorithm(client):
    """Test case for describe_algorithm

    
    """
    body = {"AlgorithmName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeAlgorithm',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_app(client):
    """Test case for describe_app

    
    """
    body = {"DomainId":"","SpaceName":"","AppType":"","UserProfileName":"","AppName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeApp',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_app_image_config(client):
    """Test case for describe_app_image_config

    
    """
    body = {"AppImageConfigName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeAppImageConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_artifact(client):
    """Test case for describe_artifact

    
    """
    body = {"ArtifactArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeArtifact',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_auto_ml_job(client):
    """Test case for describe_auto_ml_job

    
    """
    body = {"AutoMLJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeAutoMLJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_auto_ml_job_v2(client):
    """Test case for describe_auto_ml_job_v2

    
    """
    body = {"AutoMLJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeAutoMLJobV2',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_code_repository(client):
    """Test case for describe_code_repository

    
    """
    body = {"CodeRepositoryName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeCodeRepository',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_compilation_job(client):
    """Test case for describe_compilation_job

    
    """
    body = {"CompilationJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeCompilationJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_context(client):
    """Test case for describe_context

    
    """
    body = {"ContextName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeContext',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_data_quality_job_definition(client):
    """Test case for describe_data_quality_job_definition

    
    """
    body = {"JobDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeDataQualityJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_device(client):
    """Test case for describe_device

    
    """
    body = {"DeviceFleetName":"","NextToken":"","DeviceName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeDevice',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_device_fleet(client):
    """Test case for describe_device_fleet

    
    """
    body = {"DeviceFleetName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeDeviceFleet',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_domain(client):
    """Test case for describe_domain

    
    """
    body = {"DomainId":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeDomain',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_edge_deployment_plan(client):
    """Test case for describe_edge_deployment_plan

    
    """
    body = {"EdgeDeploymentPlanName":"","NextToken":"","MaxResults":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeEdgeDeploymentPlan',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_edge_packaging_job(client):
    """Test case for describe_edge_packaging_job

    
    """
    body = {"EdgePackagingJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeEdgePackagingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_endpoint(client):
    """Test case for describe_endpoint

    
    """
    body = {"EndpointName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeEndpoint',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_endpoint_config(client):
    """Test case for describe_endpoint_config

    
    """
    body = {"EndpointConfigName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeEndpointConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_experiment(client):
    """Test case for describe_experiment

    
    """
    body = {"ExperimentName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_feature_group(client):
    """Test case for describe_feature_group

    
    """
    body = {"NextToken":"","FeatureGroupName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeFeatureGroup',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_feature_metadata(client):
    """Test case for describe_feature_metadata

    
    """
    body = {"FeatureGroupName":"","FeatureName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeFeatureMetadata',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_flow_definition(client):
    """Test case for describe_flow_definition

    
    """
    body = {"FlowDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeFlowDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_hub(client):
    """Test case for describe_hub

    
    """
    body = {"HubName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeHub',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_hub_content(client):
    """Test case for describe_hub_content

    
    """
    body = {"HubName":"","HubContentType":"","HubContentName":"","HubContentVersion":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeHubContent',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_human_task_ui(client):
    """Test case for describe_human_task_ui

    
    """
    body = {"HumanTaskUiName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeHumanTaskUi',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_hyper_parameter_tuning_job(client):
    """Test case for describe_hyper_parameter_tuning_job

    
    """
    body = {"HyperParameterTuningJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeHyperParameterTuningJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_image(client):
    """Test case for describe_image

    
    """
    body = {"ImageName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeImage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_image_version(client):
    """Test case for describe_image_version

    
    """
    body = {"ImageName":"","Version":"","Alias":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeImageVersion',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_inference_experiment(client):
    """Test case for describe_inference_experiment

    
    """
    body = {"Name":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeInferenceExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_inference_recommendations_job(client):
    """Test case for describe_inference_recommendations_job

    
    """
    body = {"JobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeInferenceRecommendationsJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_labeling_job(client):
    """Test case for describe_labeling_job

    
    """
    body = {"LabelingJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeLabelingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_lineage_group(client):
    """Test case for describe_lineage_group

    
    """
    body = {"LineageGroupName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeLineageGroup',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_model(client):
    """Test case for describe_model

    
    """
    body = {"ModelName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeModel',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_model_bias_job_definition(client):
    """Test case for describe_model_bias_job_definition

    
    """
    body = {"JobDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeModelBiasJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_model_card(client):
    """Test case for describe_model_card

    
    """
    body = {"ModelCardName":"","ModelCardVersion":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeModelCard',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_model_card_export_job(client):
    """Test case for describe_model_card_export_job

    
    """
    body = {"ModelCardExportJobArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeModelCardExportJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_model_explainability_job_definition(client):
    """Test case for describe_model_explainability_job_definition

    
    """
    body = {"JobDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeModelExplainabilityJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_model_package(client):
    """Test case for describe_model_package

    
    """
    body = {"ModelPackageName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeModelPackage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_model_package_group(client):
    """Test case for describe_model_package_group

    
    """
    body = {"ModelPackageGroupName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeModelPackageGroup',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_model_quality_job_definition(client):
    """Test case for describe_model_quality_job_definition

    
    """
    body = {"JobDefinitionName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeModelQualityJobDefinition',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_monitoring_schedule(client):
    """Test case for describe_monitoring_schedule

    
    """
    body = {"MonitoringScheduleName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeMonitoringSchedule',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_notebook_instance(client):
    """Test case for describe_notebook_instance

    
    """
    body = {"NotebookInstanceName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeNotebookInstance',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_notebook_instance_lifecycle_config(client):
    """Test case for describe_notebook_instance_lifecycle_config

    
    """
    body = {"NotebookInstanceLifecycleConfigName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeNotebookInstanceLifecycleConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_pipeline(client):
    """Test case for describe_pipeline

    
    """
    body = {"PipelineName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribePipeline',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_pipeline_definition_for_execution(client):
    """Test case for describe_pipeline_definition_for_execution

    
    """
    body = {"PipelineExecutionArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribePipelineDefinitionForExecution',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_pipeline_execution(client):
    """Test case for describe_pipeline_execution

    
    """
    body = {"PipelineExecutionArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribePipelineExecution',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_processing_job(client):
    """Test case for describe_processing_job

    
    """
    body = {"ProcessingJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeProcessingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_project(client):
    """Test case for describe_project

    
    """
    body = {"ProjectName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeProject',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_space(client):
    """Test case for describe_space

    
    """
    body = {"DomainId":"","SpaceName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeSpace',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_studio_lifecycle_config(client):
    """Test case for describe_studio_lifecycle_config

    
    """
    body = {"StudioLifecycleConfigName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeStudioLifecycleConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_subscribed_workteam(client):
    """Test case for describe_subscribed_workteam

    
    """
    body = {"WorkteamArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeSubscribedWorkteam',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_training_job(client):
    """Test case for describe_training_job

    
    """
    body = {"TrainingJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeTrainingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_transform_job(client):
    """Test case for describe_transform_job

    
    """
    body = {"TransformJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeTransformJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_trial(client):
    """Test case for describe_trial

    
    """
    body = {"TrialName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeTrial',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_trial_component(client):
    """Test case for describe_trial_component

    
    """
    body = {"TrialComponentName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeTrialComponent',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_user_profile(client):
    """Test case for describe_user_profile

    
    """
    body = {"DomainId":"","UserProfileName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeUserProfile',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_workforce(client):
    """Test case for describe_workforce

    
    """
    body = {"WorkforceName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeWorkforce',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_describe_workteam(client):
    """Test case for describe_workteam

    
    """
    body = {"WorkteamName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DescribeWorkteam',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_disable_sagemaker_servicecatalog_portfolio(client):
    """Test case for disable_sagemaker_servicecatalog_portfolio

    
    """
    body = None
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DisableSagemakerServicecatalogPortfolio',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_disassociate_trial_component(client):
    """Test case for disassociate_trial_component

    
    """
    body = {"TrialName":"","TrialComponentName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.DisassociateTrialComponent',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_enable_sagemaker_servicecatalog_portfolio(client):
    """Test case for enable_sagemaker_servicecatalog_portfolio

    
    """
    body = None
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.EnableSagemakerServicecatalogPortfolio',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_get_device_fleet_report(client):
    """Test case for get_device_fleet_report

    
    """
    body = {"DeviceFleetName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.GetDeviceFleetReport',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_get_lineage_group_policy(client):
    """Test case for get_lineage_group_policy

    
    """
    body = {"LineageGroupName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.GetLineageGroupPolicy',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_get_model_package_group_policy(client):
    """Test case for get_model_package_group_policy

    
    """
    body = {"ModelPackageGroupName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.GetModelPackageGroupPolicy',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_get_sagemaker_servicecatalog_portfolio_status(client):
    """Test case for get_sagemaker_servicecatalog_portfolio_status

    
    """
    body = None
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.GetSagemakerServicecatalogPortfolioStatus',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_get_scaling_configuration_recommendation(client):
    """Test case for get_scaling_configuration_recommendation

    
    """
    body = {"EndpointName":"","RecommendationId":"","TargetCpuUtilizationPerCore":"","ScalingPolicyObjective":{"MinInvocationsPerMinute":"","MaxInvocationsPerMinute":""},"InferenceRecommendationsJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.GetScalingConfigurationRecommendation',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_get_search_suggestions(client):
    """Test case for get_search_suggestions

    
    """
    body = {"Resource":"","SuggestionQuery":{"PropertyNameQuery":{"PropertyNameHint":""}}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.GetSearchSuggestions',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_import_hub_content(client):
    """Test case for import_hub_content

    
    """
    body = {"HubName":"","HubContentMarkdown":"","HubContentType":"","HubContentName":"","HubContentDescription":"","HubContentDocument":"","DocumentSchemaVersion":"","HubContentSearchKeywords":"","HubContentVersion":"","Tags":"","HubContentDisplayName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ImportHubContent',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_actions(client):
    """Test case for list_actions

    
    """
    body = {"ActionType":"","NextToken":"","SortBy":"","SourceUri":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListActions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_algorithms(client):
    """Test case for list_algorithms

    
    """
    body = {"CreationTimeBefore":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListAlgorithms',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_aliases(client):
    """Test case for list_aliases

    
    """
    body = {"ImageName":"","NextToken":"","Version":"","Alias":"","MaxResults":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListAliases',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_app_image_configs(client):
    """Test case for list_app_image_configs

    
    """
    body = {"CreationTimeBefore":"","ModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","ModifiedTimeBefore":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListAppImageConfigs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_apps(client):
    """Test case for list_apps

    
    """
    body = {"SpaceNameEquals":"","DomainIdEquals":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","UserProfileNameEquals":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListApps',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_artifacts(client):
    """Test case for list_artifacts

    
    """
    body = {"NextToken":"","ArtifactType":"","SortBy":"","SourceUri":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListArtifacts',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_associations(client):
    """Test case for list_associations

    
    """
    body = {"SourceArn":"","AssociationType":"","NextToken":"","SortBy":"","SourceType":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":"","DestinationType":"","DestinationArn":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListAssociations',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_auto_ml_jobs(client):
    """Test case for list_auto_ml_jobs

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListAutoMLJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_candidates_for_auto_ml_job(client):
    """Test case for list_candidates_for_auto_ml_job

    
    """
    body = {"StatusEquals":"","NextToken":"","CandidateNameEquals":"","SortBy":"","AutoMLJobName":"","MaxResults":"","SortOrder":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListCandidatesForAutoMLJob',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_code_repositories(client):
    """Test case for list_code_repositories

    
    """
    body = {"CreationTimeBefore":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListCodeRepositories',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_compilation_jobs(client):
    """Test case for list_compilation_jobs

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","NextToken":"","LastModifiedTimeAfter":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListCompilationJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_contexts(client):
    """Test case for list_contexts

    
    """
    body = {"ContextType":"","NextToken":"","SortBy":"","SourceUri":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListContexts',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_data_quality_job_definitions(client):
    """Test case for list_data_quality_job_definitions

    
    """
    body = {"CreationTimeBefore":"","EndpointName":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListDataQualityJobDefinitions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_device_fleets(client):
    """Test case for list_device_fleets

    
    """
    body = {"CreationTimeBefore":"","LastModifiedTimeBefore":"","NextToken":"","LastModifiedTimeAfter":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListDeviceFleets',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_devices(client):
    """Test case for list_devices

    
    """
    body = {"DeviceFleetName":"","ModelName":"","NextToken":"","MaxResults":"","LatestHeartbeatAfter":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListDevices',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_domains(client):
    """Test case for list_domains

    
    """
    body = {"NextToken":"","MaxResults":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListDomains',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_edge_deployment_plans(client):
    """Test case for list_edge_deployment_plans

    
    """
    body = {"CreationTimeBefore":"","LastModifiedTimeBefore":"","NextToken":"","LastModifiedTimeAfter":"","SortBy":"","MaxResults":"","DeviceFleetNameContains":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListEdgeDeploymentPlans',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_edge_packaging_jobs(client):
    """Test case for list_edge_packaging_jobs

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","NextToken":"","LastModifiedTimeAfter":"","SortBy":"","MaxResults":"","SortOrder":"","ModelNameContains":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListEdgePackagingJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_endpoint_configs(client):
    """Test case for list_endpoint_configs

    
    """
    body = {"CreationTimeBefore":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListEndpointConfigs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_endpoints(client):
    """Test case for list_endpoints

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","NextToken":"","LastModifiedTimeAfter":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListEndpoints',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_experiments(client):
    """Test case for list_experiments

    
    """
    body = {"NextToken":"","SortBy":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListExperiments',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_feature_groups(client):
    """Test case for list_feature_groups

    
    """
    body = {"CreationTimeBefore":"","NextToken":"","OfflineStoreStatusEquals":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":"","FeatureGroupStatusEquals":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListFeatureGroups',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_flow_definitions(client):
    """Test case for list_flow_definitions

    
    """
    body = {"CreationTimeBefore":"","NextToken":"","MaxResults":"","SortOrder":"","CreationTimeAfter":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListFlowDefinitions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_hub_content_versions(client):
    """Test case for list_hub_content_versions

    
    """
    body = {"HubName":"","MinVersion":"","CreationTimeBefore":"","NextToken":"","HubContentType":"","SortBy":"","HubContentName":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","MaxSchemaVersion":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListHubContentVersions',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_hub_contents(client):
    """Test case for list_hub_contents

    
    """
    body = {"HubName":"","CreationTimeBefore":"","NextToken":"","HubContentType":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":"","MaxSchemaVersion":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListHubContents',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_hubs(client):
    """Test case for list_hubs

    
    """
    body = {"CreationTimeBefore":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListHubs',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_human_task_uis(client):
    """Test case for list_human_task_uis

    
    """
    body = {"CreationTimeBefore":"","NextToken":"","MaxResults":"","SortOrder":"","CreationTimeAfter":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListHumanTaskUis',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_hyper_parameter_tuning_jobs(client):
    """Test case for list_hyper_parameter_tuning_jobs

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","NextToken":"","LastModifiedTimeAfter":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListHyperParameterTuningJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_image_versions(client):
    """Test case for list_image_versions

    
    """
    body = {"CreationTimeBefore":"","ImageName":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListImageVersions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_images(client):
    """Test case for list_images

    
    """
    body = {"CreationTimeBefore":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListImages',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_inference_experiments(client):
    """Test case for list_inference_experiments

    
    """
    body = {"CreationTimeBefore":"","Type":"","StatusEquals":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListInferenceExperiments',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_inference_recommendations_job_steps(client):
    """Test case for list_inference_recommendations_job_steps

    
    """
    body = {"Status":"","NextToken":"","StepType":"","MaxResults":"","JobName":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobSteps',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_inference_recommendations_jobs(client):
    """Test case for list_inference_recommendations_jobs

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","ModelPackageVersionArnEquals":"","SortBy":"","MaxResults":"","ModelNameEquals":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_labeling_jobs(client):
    """Test case for list_labeling_jobs

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListLabelingJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_labeling_jobs_for_workteam(client):
    """Test case for list_labeling_jobs_for_workteam

    
    """
    body = {"CreationTimeBefore":"","WorkteamArn":"","NextToken":"","JobReferenceCodeContains":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListLabelingJobsForWorkteam',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_lineage_groups(client):
    """Test case for list_lineage_groups

    
    """
    body = {"NextToken":"","SortBy":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListLineageGroups',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_model_bias_job_definitions(client):
    """Test case for list_model_bias_job_definitions

    
    """
    body = {"CreationTimeBefore":"","EndpointName":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModelBiasJobDefinitions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_model_card_export_jobs(client):
    """Test case for list_model_card_export_jobs

    
    """
    body = {"CreationTimeBefore":"","ModelCardExportJobNameContains":"","StatusEquals":"","ModelCardName":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","ModelCardVersion":"","CreationTimeAfter":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModelCardExportJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_model_card_versions(client):
    """Test case for list_model_card_versions

    
    """
    body = {"CreationTimeBefore":"","ModelCardName":"","ModelCardStatus":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModelCardVersions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_model_cards(client):
    """Test case for list_model_cards

    
    """
    body = {"CreationTimeBefore":"","ModelCardStatus":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModelCards',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_model_explainability_job_definitions(client):
    """Test case for list_model_explainability_job_definitions

    
    """
    body = {"CreationTimeBefore":"","EndpointName":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModelExplainabilityJobDefinitions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_model_metadata(client):
    """Test case for list_model_metadata

    
    """
    body = {"NextToken":"","SearchExpression":{"Filters":""},"MaxResults":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModelMetadata',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_model_package_groups(client):
    """Test case for list_model_package_groups

    
    """
    body = {"CreationTimeBefore":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModelPackageGroups',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_model_packages(client):
    """Test case for list_model_packages

    
    """
    body = {"ModelPackageGroupName":"","CreationTimeBefore":"","NextToken":"","SortBy":"","MaxResults":"","ModelPackageType":"","SortOrder":"","ModelApprovalStatus":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModelPackages',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_model_quality_job_definitions(client):
    """Test case for list_model_quality_job_definitions

    
    """
    body = {"CreationTimeBefore":"","EndpointName":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModelQualityJobDefinitions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_models(client):
    """Test case for list_models

    
    """
    body = {"CreationTimeBefore":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListModels',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_monitoring_alert_history(client):
    """Test case for list_monitoring_alert_history

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","MonitoringScheduleName":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","MonitoringAlertName":"","CreationTimeAfter":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListMonitoringAlertHistory',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_monitoring_alerts(client):
    """Test case for list_monitoring_alerts

    
    """
    body = {"MonitoringScheduleName":"","NextToken":"","MaxResults":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListMonitoringAlerts',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_monitoring_executions(client):
    """Test case for list_monitoring_executions

    
    """
    body = {"CreationTimeBefore":"","ScheduledTimeBefore":"","StatusEquals":"","NextToken":"","ScheduledTimeAfter":"","LastModifiedTimeAfter":"","SortBy":"","MaxResults":"","SortOrder":"","MonitoringJobDefinitionName":"","LastModifiedTimeBefore":"","MonitoringScheduleName":"","EndpointName":"","MonitoringTypeEquals":"","CreationTimeAfter":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListMonitoringExecutions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_monitoring_schedules(client):
    """Test case for list_monitoring_schedules

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","NextToken":"","LastModifiedTimeAfter":"","SortBy":"","MaxResults":"","SortOrder":"","MonitoringJobDefinitionName":"","LastModifiedTimeBefore":"","EndpointName":"","MonitoringTypeEquals":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListMonitoringSchedules',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_notebook_instance_lifecycle_configs(client):
    """Test case for list_notebook_instance_lifecycle_configs

    
    """
    body = {"CreationTimeBefore":"","LastModifiedTimeBefore":"","NextToken":"","LastModifiedTimeAfter":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListNotebookInstanceLifecycleConfigs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_notebook_instances(client):
    """Test case for list_notebook_instances

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","AdditionalCodeRepositoryEquals":"","NextToken":"","LastModifiedTimeAfter":"","NotebookInstanceLifecycleConfigNameContains":"","SortBy":"","MaxResults":"","SortOrder":"","DefaultCodeRepositoryContains":"","LastModifiedTimeBefore":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListNotebookInstances',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_pipeline_execution_steps(client):
    """Test case for list_pipeline_execution_steps

    
    """
    body = {"NextToken":"","PipelineExecutionArn":"","MaxResults":"","SortOrder":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListPipelineExecutionSteps',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_pipeline_executions(client):
    """Test case for list_pipeline_executions

    
    """
    body = {"NextToken":"","PipelineName":"","SortBy":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListPipelineExecutions',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_pipeline_parameters_for_execution(client):
    """Test case for list_pipeline_parameters_for_execution

    
    """
    body = {"NextToken":"","PipelineExecutionArn":"","MaxResults":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListPipelineParametersForExecution',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_pipelines(client):
    """Test case for list_pipelines

    
    """
    body = {"NextToken":"","SortBy":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":"","PipelineNamePrefix":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListPipelines',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_processing_jobs(client):
    """Test case for list_processing_jobs

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListProcessingJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_projects(client):
    """Test case for list_projects

    
    """
    body = {"CreationTimeBefore":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListProjects',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_resource_catalogs(client):
    """Test case for list_resource_catalogs

    
    """
    body = {"CreationTimeBefore":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListResourceCatalogs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_spaces(client):
    """Test case for list_spaces

    
    """
    body = {"SpaceNameContains":"","DomainIdEquals":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListSpaces',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_stage_devices(client):
    """Test case for list_stage_devices

    
    """
    body = {"EdgeDeploymentPlanName":"","NextToken":"","StageName":"","MaxResults":"","ExcludeDevicesDeployedInOtherStage":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListStageDevices',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_studio_lifecycle_configs(client):
    """Test case for list_studio_lifecycle_configs

    
    """
    body = {"CreationTimeBefore":"","ModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","AppTypeEquals":"","SortOrder":"","CreationTimeAfter":"","ModifiedTimeBefore":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListStudioLifecycleConfigs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_subscribed_workteams(client):
    """Test case for list_subscribed_workteams

    
    """
    body = {"NextToken":"","MaxResults":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListSubscribedWorkteams',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_tags(client):
    """Test case for list_tags

    
    """
    body = {"ResourceArn":"","NextToken":"","MaxResults":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListTags',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_training_jobs(client):
    """Test case for list_training_jobs

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","NextToken":"","LastModifiedTimeAfter":"","WarmPoolStatusEquals":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListTrainingJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_training_jobs_for_hyper_parameter_tuning_job(client):
    """Test case for list_training_jobs_for_hyper_parameter_tuning_job

    
    """
    body = {"StatusEquals":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","HyperParameterTuningJobName":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListTrainingJobsForHyperParameterTuningJob',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_transform_jobs(client):
    """Test case for list_transform_jobs

    
    """
    body = {"CreationTimeBefore":"","StatusEquals":"","LastModifiedTimeBefore":"","LastModifiedTimeAfter":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","CreationTimeAfter":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListTransformJobs',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_trial_components(client):
    """Test case for list_trial_components

    
    """
    body = {"TrialName":"","SourceArn":"","NextToken":"","ExperimentName":"","SortBy":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListTrialComponents',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_trials(client):
    """Test case for list_trials

    
    """
    body = {"NextToken":"","ExperimentName":"","SortBy":"","CreatedAfter":"","MaxResults":"","SortOrder":"","CreatedBefore":"","TrialComponentName":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListTrials',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_user_profiles(client):
    """Test case for list_user_profiles

    
    """
    body = {"DomainIdEquals":"","NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","UserProfileNameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListUserProfiles',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_workforces(client):
    """Test case for list_workforces

    
    """
    body = {"NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListWorkforces',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_list_workteams(client):
    """Test case for list_workteams

    
    """
    body = {"NextToken":"","SortBy":"","MaxResults":"","SortOrder":"","NameContains":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.ListWorkteams',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_put_model_package_group_policy(client):
    """Test case for put_model_package_group_policy

    
    """
    body = {"ModelPackageGroupName":"","ResourcePolicy":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.PutModelPackageGroupPolicy',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_query_lineage(client):
    """Test case for query_lineage

    
    """
    body = {"Filters":{"LineageTypes":"","Types":"","ModifiedAfter":"","CreatedAfter":"","ModifiedBefore":"","CreatedBefore":"","Properties":""},"NextToken":"","MaxDepth":"","StartArns":"","MaxResults":"","Direction":"","IncludeEdges":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.QueryLineage',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_register_devices(client):
    """Test case for register_devices

    
    """
    body = {"DeviceFleetName":"","Devices":"","Tags":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.RegisterDevices',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_render_ui_template(client):
    """Test case for render_ui_template

    
    """
    body = {"Task":{"Input":""},"HumanTaskUiArn":"","UiTemplate":{"Content":""},"RoleArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.RenderUiTemplate',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_retry_pipeline_execution(client):
    """Test case for retry_pipeline_execution

    
    """
    body = {"ClientRequestToken":"","ParallelismConfiguration":{"MaxParallelExecutionSteps":""},"PipelineExecutionArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.RetryPipelineExecution',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_search(client):
    """Test case for search

    
    """
    body = {"NextToken":"","CrossAccountFilterOption":"","SortBy":"","SearchExpression":{"NestedFilters":"","Operator":"","Filters":"","SubExpressions":""},"MaxResults":"","Resource":"","SortOrder":""}
    params = [('MaxResults', 'max_results_example'),
                    ('NextToken', 'next_token_example')]
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.Search',
        headers=headers,
        json=body,
        params=params,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_send_pipeline_execution_step_failure(client):
    """Test case for send_pipeline_execution_step_failure

    
    """
    body = {"ClientRequestToken":"","FailureReason":"","CallbackToken":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.SendPipelineExecutionStepFailure',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_send_pipeline_execution_step_success(client):
    """Test case for send_pipeline_execution_step_success

    
    """
    body = {"ClientRequestToken":"","OutputParameters":"","CallbackToken":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.SendPipelineExecutionStepSuccess',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_start_edge_deployment_stage(client):
    """Test case for start_edge_deployment_stage

    
    """
    body = {"EdgeDeploymentPlanName":"","StageName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StartEdgeDeploymentStage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_start_inference_experiment(client):
    """Test case for start_inference_experiment

    
    """
    body = {"Name":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StartInferenceExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_start_monitoring_schedule(client):
    """Test case for start_monitoring_schedule

    
    """
    body = {"MonitoringScheduleName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StartMonitoringSchedule',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_start_notebook_instance(client):
    """Test case for start_notebook_instance

    
    """
    body = {"NotebookInstanceName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StartNotebookInstance',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_start_pipeline_execution(client):
    """Test case for start_pipeline_execution

    
    """
    body = {"PipelineParameters":"","ClientRequestToken":"","PipelineExecutionDescription":"","PipelineName":"","ParallelismConfiguration":{"MaxParallelExecutionSteps":""},"SelectiveExecutionConfig":{"SourcePipelineExecutionArn":"","SelectedSteps":""},"PipelineExecutionDisplayName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StartPipelineExecution',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_auto_ml_job(client):
    """Test case for stop_auto_ml_job

    
    """
    body = {"AutoMLJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopAutoMLJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_compilation_job(client):
    """Test case for stop_compilation_job

    
    """
    body = {"CompilationJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopCompilationJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_edge_deployment_stage(client):
    """Test case for stop_edge_deployment_stage

    
    """
    body = {"EdgeDeploymentPlanName":"","StageName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopEdgeDeploymentStage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_edge_packaging_job(client):
    """Test case for stop_edge_packaging_job

    
    """
    body = {"EdgePackagingJobName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopEdgePackagingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_hyper_parameter_tuning_job(client):
    """Test case for stop_hyper_parameter_tuning_job

    
    """
    body = {"HyperParameterTuningJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopHyperParameterTuningJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_inference_experiment(client):
    """Test case for stop_inference_experiment

    
    """
    body = {"DesiredModelVariants":"","ModelVariantActions":"","DesiredState":"","Reason":"","Name":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopInferenceExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_inference_recommendations_job(client):
    """Test case for stop_inference_recommendations_job

    
    """
    body = {"JobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopInferenceRecommendationsJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_labeling_job(client):
    """Test case for stop_labeling_job

    
    """
    body = {"LabelingJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopLabelingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_monitoring_schedule(client):
    """Test case for stop_monitoring_schedule

    
    """
    body = {"MonitoringScheduleName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopMonitoringSchedule',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_notebook_instance(client):
    """Test case for stop_notebook_instance

    
    """
    body = {"NotebookInstanceName":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopNotebookInstance',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_pipeline_execution(client):
    """Test case for stop_pipeline_execution

    
    """
    body = {"ClientRequestToken":"","PipelineExecutionArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopPipelineExecution',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_processing_job(client):
    """Test case for stop_processing_job

    
    """
    body = {"ProcessingJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopProcessingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_training_job(client):
    """Test case for stop_training_job

    
    """
    body = {"TrainingJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopTrainingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_stop_transform_job(client):
    """Test case for stop_transform_job

    
    """
    body = {"TransformJobName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.StopTransformJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_action(client):
    """Test case for update_action

    
    """
    body = {"Status":"","ActionName":"","Description":"","Properties":"","PropertiesToRemove":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateAction',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_app_image_config(client):
    """Test case for update_app_image_config

    
    """
    body = {"KernelGatewayImageConfig":{"KernelSpecs":"","FileSystemConfig":{"MountPath":"","DefaultGid":"","DefaultUid":""}},"AppImageConfigName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateAppImageConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_artifact(client):
    """Test case for update_artifact

    
    """
    body = {"ArtifactArn":"","ArtifactName":"","Properties":"","PropertiesToRemove":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateArtifact',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_code_repository(client):
    """Test case for update_code_repository

    
    """
    body = {"CodeRepositoryName":"","GitConfig":{"SecretArn":""}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateCodeRepository',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_context(client):
    """Test case for update_context

    
    """
    body = {"Description":"","Properties":"","PropertiesToRemove":"","ContextName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateContext',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_device_fleet(client):
    """Test case for update_device_fleet

    
    """
    body = {"DeviceFleetName":"","EnableIotRoleAlias":"","Description":"","OutputConfig":{"PresetDeploymentType":"","KmsKeyId":"","S3OutputLocation":"","PresetDeploymentConfig":""},"RoleArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateDeviceFleet',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_devices(client):
    """Test case for update_devices

    
    """
    body = {"DeviceFleetName":"","Devices":""}
    headers = { 
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateDevices',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_domain(client):
    """Test case for update_domain

    
    """
    body = {"DomainId":"","DefaultSpaceSettings":{"SecurityGroups":"","KernelGatewayAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":""},"JupyterServerAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":"","CodeRepositories":""},"ExecutionRole":""},"AppSecurityGroupManagement":"","DomainSettingsForUpdate":{"ExecutionRoleIdentityConfig":"","RStudioServerProDomainSettingsForUpdate":{"DomainExecutionRoleArn":"","RStudioConnectUrl":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"RStudioPackageManagerUrl":""},"SecurityGroupIds":""},"DefaultUserSettings":{"SecurityGroups":"","KernelGatewayAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":""},"RStudioServerProAppSettings":{"AccessStatus":"","UserGroup":""},"RSessionAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""}},"JupyterServerAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":"","CodeRepositories":""},"CanvasAppSettings":{"TimeSeriesForecastingSettings":{"Status":"","AmazonForecastRoleArn":""},"ModelRegisterSettings":{"Status":"","CrossAccountModelRegisterRoleArn":""},"WorkspaceSettings":{"S3KmsKeyId":"","S3ArtifactPath":""}},"ExecutionRole":"","TensorBoardAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""}},"SharingSettings":{"NotebookOutputOption":"","S3KmsKeyId":"","S3OutputPath":""}}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateDomain',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_endpoint(client):
    """Test case for update_endpoint

    
    """
    body = {"RetainAllVariantProperties":"","EndpointName":"","ExcludeRetainedVariantProperties":"","EndpointConfigName":"","DeploymentConfig":{"AutoRollbackConfiguration":{"Alarms":""},"RollingUpdatePolicy":{"MaximumExecutionTimeoutInSeconds":"","MaximumBatchSize":{"Type":"","Value":""},"WaitIntervalInSeconds":"","RollbackMaximumBatchSize":{"Type":"","Value":""}},"BlueGreenUpdatePolicy":{"MaximumExecutionTimeoutInSeconds":"","TerminationWaitInSeconds":"","TrafficRoutingConfiguration":{"Type":"","LinearStepSize":{"Type":"","Value":""},"CanarySize":{"Type":"","Value":""},"WaitIntervalInSeconds":""}}},"RetainDeploymentConfig":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateEndpoint',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_endpoint_weights_and_capacities(client):
    """Test case for update_endpoint_weights_and_capacities

    
    """
    body = {"DesiredWeightsAndCapacities":"","EndpointName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateEndpointWeightsAndCapacities',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_experiment(client):
    """Test case for update_experiment

    
    """
    body = {"Description":"","ExperimentName":"","DisplayName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_feature_group(client):
    """Test case for update_feature_group

    
    """
    body = {"FeatureAdditions":"","FeatureGroupName":"","OnlineStoreConfig":{"TtlDuration":{"Value":"","Unit":""}}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateFeatureGroup',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_feature_metadata(client):
    """Test case for update_feature_metadata

    
    """
    body = {"ParameterAdditions":"","Description":"","ParameterRemovals":"","FeatureGroupName":"","FeatureName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateFeatureMetadata',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_hub(client):
    """Test case for update_hub

    
    """
    body = {"HubName":"","HubDisplayName":"","HubDescription":"","HubSearchKeywords":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateHub',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_image(client):
    """Test case for update_image

    
    """
    body = {"ImageName":"","Description":"","DeleteProperties":"","DisplayName":"","RoleArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateImage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_image_version(client):
    """Test case for update_image_version

    
    """
    body = {"ImageName":"","Horovod":"","JobType":"","Processor":"","Version":"","Alias":"","VendorGuidance":"","ProgrammingLang":"","AliasesToAdd":"","MLFramework":"","AliasesToDelete":"","ReleaseNotes":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateImageVersion',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_inference_experiment(client):
    """Test case for update_inference_experiment

    
    """
    body = {"DataStorageConfig":{"Destination":"","ContentType":{"JsonContentTypes":"","CsvContentTypes":""},"KmsKey":""},"Description":"","Schedule":{"EndTime":"","StartTime":""},"ModelVariants":"","ShadowModeConfig":{"SourceModelVariantName":"","ShadowModelVariants":""},"Name":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateInferenceExperiment',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_model_card(client):
    """Test case for update_model_card

    
    """
    body = {"ModelCardName":"","ModelCardStatus":"","Content":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateModelCard',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_model_package(client):
    """Test case for update_model_package

    
    """
    body = {"CustomerMetadataProperties":"","AdditionalInferenceSpecificationsToAdd":"","ApprovalDescription":"","ModelPackageArn":"","ModelApprovalStatus":"","CustomerMetadataPropertiesToRemove":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateModelPackage',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_monitoring_alert(client):
    """Test case for update_monitoring_alert

    
    """
    body = {"DatapointsToAlert":"","EvaluationPeriod":"","MonitoringScheduleName":"","MonitoringAlertName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateMonitoringAlert',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_monitoring_schedule(client):
    """Test case for update_monitoring_schedule

    
    """
    body = {"MonitoringScheduleConfig":{"ScheduleConfig":{"ScheduleExpression":""},"MonitoringJobDefinition":{"MonitoringInputs":"","MonitoringResources":{"ClusterConfig":{"InstanceCount":"","VolumeSizeInGB":"","VolumeKmsKeyId":"","InstanceType":""}},"BaselineConfig":{"StatisticsResource":{"S3Uri":""},"ConstraintsResource":{"S3Uri":""},"BaseliningJobName":""},"StoppingCondition":{"MaxRuntimeInSeconds":""},"MonitoringAppSpecification":{"ContainerEntrypoint":"","PostAnalyticsProcessorSourceUri":"","RecordPreprocessorSourceUri":"","ImageUri":"","ContainerArguments":""},"NetworkConfig":{"EnableNetworkIsolation":"","EnableInterContainerTrafficEncryption":"","VpcConfig":{"Subnets":"","SecurityGroupIds":""}},"Environment":"","MonitoringOutputConfig":{"MonitoringOutputs":"","KmsKeyId":""},"RoleArn":""},"MonitoringJobDefinitionName":"","MonitoringType":""},"MonitoringScheduleName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateMonitoringSchedule',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_notebook_instance(client):
    """Test case for update_notebook_instance

    
    """
    body = {"DisassociateAdditionalCodeRepositories":"","VolumeSizeInGB":"","DefaultCodeRepository":"","AdditionalCodeRepositories":"","AcceleratorTypes":"","DisassociateDefaultCodeRepository":"","RoleArn":"","InstanceMetadataServiceConfiguration":{"MinimumInstanceMetadataServiceVersion":""},"RootAccess":"","DisassociateAcceleratorTypes":"","NotebookInstanceName":"","InstanceType":"","LifecycleConfigName":"","DisassociateLifecycleConfig":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateNotebookInstance',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_notebook_instance_lifecycle_config(client):
    """Test case for update_notebook_instance_lifecycle_config

    
    """
    body = {"OnStart":"","NotebookInstanceLifecycleConfigName":"","OnCreate":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateNotebookInstanceLifecycleConfig',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_pipeline(client):
    """Test case for update_pipeline

    
    """
    body = {"PipelineName":"","ParallelismConfiguration":{"MaxParallelExecutionSteps":""},"PipelineDescription":"","PipelineDisplayName":"","PipelineDefinition":"","PipelineDefinitionS3Location":{"VersionId":"","Bucket":"","ObjectKey":""},"RoleArn":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdatePipeline',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_pipeline_execution(client):
    """Test case for update_pipeline_execution

    
    """
    body = {"PipelineExecutionDescription":"","ParallelismConfiguration":{"MaxParallelExecutionSteps":""},"PipelineExecutionArn":"","PipelineExecutionDisplayName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdatePipelineExecution',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_project(client):
    """Test case for update_project

    
    """
    body = {"ProjectName":"","ProjectDescription":"","Tags":"","ServiceCatalogProvisioningUpdateDetails":{"ProvisioningParameters":"","ProvisioningArtifactId":""}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateProject',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_space(client):
    """Test case for update_space

    
    """
    body = {"DomainId":"","SpaceName":"","SpaceSettings":{"KernelGatewayAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":""},"JupyterServerAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":"","CodeRepositories":""}}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateSpace',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_training_job(client):
    """Test case for update_training_job

    
    """
    body = {"TrainingJobName":"","ProfilerConfig":{"DisableProfiler":"","ProfilingIntervalInMilliseconds":"","ProfilingParameters":"","S3OutputPath":""},"ResourceConfig":{"KeepAlivePeriodInSeconds":""},"ProfilerRuleConfigurations":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateTrainingJob',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_trial(client):
    """Test case for update_trial

    
    """
    body = {"TrialName":"","DisplayName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateTrial',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_trial_component(client):
    """Test case for update_trial_component

    
    """
    body = {"Status":{"Message":"","PrimaryStatus":""},"OutputArtifactsToRemove":"","Parameters":"","EndTime":"","InputArtifacts":"","ParametersToRemove":"","DisplayName":"","StartTime":"","OutputArtifacts":"","InputArtifactsToRemove":"","TrialComponentName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateTrialComponent',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_user_profile(client):
    """Test case for update_user_profile

    
    """
    body = {"DomainId":"","UserSettings":{"SecurityGroups":"","KernelGatewayAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":""},"RStudioServerProAppSettings":{"AccessStatus":"","UserGroup":""},"RSessionAppSettings":{"CustomImages":"","DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""}},"JupyterServerAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""},"LifecycleConfigArns":"","CodeRepositories":""},"CanvasAppSettings":{"TimeSeriesForecastingSettings":{"Status":"","AmazonForecastRoleArn":""},"ModelRegisterSettings":{"Status":"","CrossAccountModelRegisterRoleArn":""},"WorkspaceSettings":{"S3KmsKeyId":"","S3ArtifactPath":""}},"ExecutionRole":"","TensorBoardAppSettings":{"DefaultResourceSpec":{"LifecycleConfigArn":"","SageMakerImageArn":"","InstanceType":"","SageMakerImageVersionArn":""}},"SharingSettings":{"NotebookOutputOption":"","S3KmsKeyId":"","S3OutputPath":""}},"UserProfileName":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateUserProfile',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_workforce(client):
    """Test case for update_workforce

    
    """
    body = {"OidcConfig":{"TokenEndpoint":"","LogoutEndpoint":"","JwksUri":"","Issuer":"","ClientSecret":"","UserInfoEndpoint":"","ClientId":"","AuthorizationEndpoint":""},"WorkforceVpcConfig":{"Subnets":"","VpcId":"","SecurityGroupIds":""},"WorkforceName":"","SourceIpConfig":{"Cidrs":""}}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateWorkforce',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')


pytestmark = pytest.mark.asyncio

async def test_update_workteam(client):
    """Test case for update_workteam

    
    """
    body = {"Description":"","NotificationConfiguration":{"NotificationTopicArn":""},"WorkteamName":"","MemberDefinitions":""}
    headers = { 
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'x_amz_content_sha256': 'x_amz_content_sha256_example',
        'x_amz_date': 'x_amz_date_example',
        'x_amz_algorithm': 'x_amz_algorithm_example',
        'x_amz_credential': 'x_amz_credential_example',
        'x_amz_security_token': 'x_amz_security_token_example',
        'x_amz_signature': 'x_amz_signature_example',
        'x_amz_signed_headers': 'x_amz_signed_headers_example',
        'x_amz_target': 'x_amz_target_example',
        'hmac': 'special-key',
    }
    response = await client.request(
        method='POST',
        path='/#X-Amz-Target=SageMaker.UpdateWorkteam',
        headers=headers,
        json=body,
        )
    assert response.status == 200, 'Response body is : ' + (await response.read()).decode('utf-8')

