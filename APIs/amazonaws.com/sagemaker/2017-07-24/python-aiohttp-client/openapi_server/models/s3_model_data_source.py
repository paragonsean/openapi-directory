# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_compression_type import ModelCompressionType
from openapi_server.models.s3_model_data_type import S3ModelDataType
from openapi_server import util


class S3ModelDataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_uri: str=None, s3_data_type: S3ModelDataType=None, compression_type: ModelCompressionType=None):
        """S3ModelDataSource - a model defined in OpenAPI

        :param s3_uri: The s3_uri of this S3ModelDataSource.
        :param s3_data_type: The s3_data_type of this S3ModelDataSource.
        :param compression_type: The compression_type of this S3ModelDataSource.
        """
        self.openapi_types = {
            's3_uri': str,
            's3_data_type': S3ModelDataType,
            'compression_type': ModelCompressionType
        }

        self.attribute_map = {
            's3_uri': 'S3Uri',
            's3_data_type': 'S3DataType',
            'compression_type': 'CompressionType'
        }

        self._s3_uri = s3_uri
        self._s3_data_type = s3_data_type
        self._compression_type = compression_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3ModelDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3ModelDataSource of this S3ModelDataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_uri(self):
        """Gets the s3_uri of this S3ModelDataSource.


        :return: The s3_uri of this S3ModelDataSource.
        :rtype: str
        """
        return self._s3_uri

    @s3_uri.setter
    def s3_uri(self, s3_uri):
        """Sets the s3_uri of this S3ModelDataSource.


        :param s3_uri: The s3_uri of this S3ModelDataSource.
        :type s3_uri: str
        """
        if s3_uri is None:
            raise ValueError("Invalid value for `s3_uri`, must not be `None`")

        self._s3_uri = s3_uri

    @property
    def s3_data_type(self):
        """Gets the s3_data_type of this S3ModelDataSource.


        :return: The s3_data_type of this S3ModelDataSource.
        :rtype: S3ModelDataType
        """
        return self._s3_data_type

    @s3_data_type.setter
    def s3_data_type(self, s3_data_type):
        """Sets the s3_data_type of this S3ModelDataSource.


        :param s3_data_type: The s3_data_type of this S3ModelDataSource.
        :type s3_data_type: S3ModelDataType
        """
        if s3_data_type is None:
            raise ValueError("Invalid value for `s3_data_type`, must not be `None`")

        self._s3_data_type = s3_data_type

    @property
    def compression_type(self):
        """Gets the compression_type of this S3ModelDataSource.


        :return: The compression_type of this S3ModelDataSource.
        :rtype: ModelCompressionType
        """
        return self._compression_type

    @compression_type.setter
    def compression_type(self, compression_type):
        """Sets the compression_type of this S3ModelDataSource.


        :param compression_type: The compression_type of this S3ModelDataSource.
        :type compression_type: ModelCompressionType
        """
        if compression_type is None:
            raise ValueError("Invalid value for `compression_type`, must not be `None`")

        self._compression_type = compression_type
