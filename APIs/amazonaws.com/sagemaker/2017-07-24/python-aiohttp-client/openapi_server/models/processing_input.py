# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.processing_input_dataset_definition import ProcessingInputDatasetDefinition
from openapi_server.models.processing_input_s3_input import ProcessingInputS3Input
from openapi_server import util


class ProcessingInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_name: str=None, app_managed: bool=None, s3_input: ProcessingInputS3Input=None, dataset_definition: ProcessingInputDatasetDefinition=None):
        """ProcessingInput - a model defined in OpenAPI

        :param input_name: The input_name of this ProcessingInput.
        :param app_managed: The app_managed of this ProcessingInput.
        :param s3_input: The s3_input of this ProcessingInput.
        :param dataset_definition: The dataset_definition of this ProcessingInput.
        """
        self.openapi_types = {
            'input_name': str,
            'app_managed': bool,
            's3_input': ProcessingInputS3Input,
            'dataset_definition': ProcessingInputDatasetDefinition
        }

        self.attribute_map = {
            'input_name': 'InputName',
            'app_managed': 'AppManaged',
            's3_input': 'S3Input',
            'dataset_definition': 'DatasetDefinition'
        }

        self._input_name = input_name
        self._app_managed = app_managed
        self._s3_input = s3_input
        self._dataset_definition = dataset_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProcessingInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProcessingInput of this ProcessingInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_name(self):
        """Gets the input_name of this ProcessingInput.


        :return: The input_name of this ProcessingInput.
        :rtype: str
        """
        return self._input_name

    @input_name.setter
    def input_name(self, input_name):
        """Sets the input_name of this ProcessingInput.


        :param input_name: The input_name of this ProcessingInput.
        :type input_name: str
        """
        if input_name is None:
            raise ValueError("Invalid value for `input_name`, must not be `None`")

        self._input_name = input_name

    @property
    def app_managed(self):
        """Gets the app_managed of this ProcessingInput.


        :return: The app_managed of this ProcessingInput.
        :rtype: bool
        """
        return self._app_managed

    @app_managed.setter
    def app_managed(self, app_managed):
        """Sets the app_managed of this ProcessingInput.


        :param app_managed: The app_managed of this ProcessingInput.
        :type app_managed: bool
        """

        self._app_managed = app_managed

    @property
    def s3_input(self):
        """Gets the s3_input of this ProcessingInput.


        :return: The s3_input of this ProcessingInput.
        :rtype: ProcessingInputS3Input
        """
        return self._s3_input

    @s3_input.setter
    def s3_input(self, s3_input):
        """Sets the s3_input of this ProcessingInput.


        :param s3_input: The s3_input of this ProcessingInput.
        :type s3_input: ProcessingInputS3Input
        """

        self._s3_input = s3_input

    @property
    def dataset_definition(self):
        """Gets the dataset_definition of this ProcessingInput.


        :return: The dataset_definition of this ProcessingInput.
        :rtype: ProcessingInputDatasetDefinition
        """
        return self._dataset_definition

    @dataset_definition.setter
    def dataset_definition(self, dataset_definition):
        """Sets the dataset_definition of this ProcessingInput.


        :param dataset_definition: The dataset_definition of this ProcessingInput.
        :type dataset_definition: ProcessingInputDatasetDefinition
        """

        self._dataset_definition = dataset_definition
