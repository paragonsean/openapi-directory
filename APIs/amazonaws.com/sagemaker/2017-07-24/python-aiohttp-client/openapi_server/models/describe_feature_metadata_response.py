# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_type import FeatureType
from openapi_server import util


class DescribeFeatureMetadataResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_group_arn: str=None, feature_group_name: str=None, feature_name: str=None, feature_type: FeatureType=None, creation_time: datetime=None, last_modified_time: datetime=None, description: str=None, parameters: List=None):
        """DescribeFeatureMetadataResponse - a model defined in OpenAPI

        :param feature_group_arn: The feature_group_arn of this DescribeFeatureMetadataResponse.
        :param feature_group_name: The feature_group_name of this DescribeFeatureMetadataResponse.
        :param feature_name: The feature_name of this DescribeFeatureMetadataResponse.
        :param feature_type: The feature_type of this DescribeFeatureMetadataResponse.
        :param creation_time: The creation_time of this DescribeFeatureMetadataResponse.
        :param last_modified_time: The last_modified_time of this DescribeFeatureMetadataResponse.
        :param description: The description of this DescribeFeatureMetadataResponse.
        :param parameters: The parameters of this DescribeFeatureMetadataResponse.
        """
        self.openapi_types = {
            'feature_group_arn': str,
            'feature_group_name': str,
            'feature_name': str,
            'feature_type': FeatureType,
            'creation_time': datetime,
            'last_modified_time': datetime,
            'description': str,
            'parameters': List
        }

        self.attribute_map = {
            'feature_group_arn': 'FeatureGroupArn',
            'feature_group_name': 'FeatureGroupName',
            'feature_name': 'FeatureName',
            'feature_type': 'FeatureType',
            'creation_time': 'CreationTime',
            'last_modified_time': 'LastModifiedTime',
            'description': 'Description',
            'parameters': 'Parameters'
        }

        self._feature_group_arn = feature_group_arn
        self._feature_group_name = feature_group_name
        self._feature_name = feature_name
        self._feature_type = feature_type
        self._creation_time = creation_time
        self._last_modified_time = last_modified_time
        self._description = description
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeFeatureMetadataResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeFeatureMetadataResponse of this DescribeFeatureMetadataResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_group_arn(self):
        """Gets the feature_group_arn of this DescribeFeatureMetadataResponse.


        :return: The feature_group_arn of this DescribeFeatureMetadataResponse.
        :rtype: str
        """
        return self._feature_group_arn

    @feature_group_arn.setter
    def feature_group_arn(self, feature_group_arn):
        """Sets the feature_group_arn of this DescribeFeatureMetadataResponse.


        :param feature_group_arn: The feature_group_arn of this DescribeFeatureMetadataResponse.
        :type feature_group_arn: str
        """
        if feature_group_arn is None:
            raise ValueError("Invalid value for `feature_group_arn`, must not be `None`")

        self._feature_group_arn = feature_group_arn

    @property
    def feature_group_name(self):
        """Gets the feature_group_name of this DescribeFeatureMetadataResponse.


        :return: The feature_group_name of this DescribeFeatureMetadataResponse.
        :rtype: str
        """
        return self._feature_group_name

    @feature_group_name.setter
    def feature_group_name(self, feature_group_name):
        """Sets the feature_group_name of this DescribeFeatureMetadataResponse.


        :param feature_group_name: The feature_group_name of this DescribeFeatureMetadataResponse.
        :type feature_group_name: str
        """
        if feature_group_name is None:
            raise ValueError("Invalid value for `feature_group_name`, must not be `None`")

        self._feature_group_name = feature_group_name

    @property
    def feature_name(self):
        """Gets the feature_name of this DescribeFeatureMetadataResponse.


        :return: The feature_name of this DescribeFeatureMetadataResponse.
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this DescribeFeatureMetadataResponse.


        :param feature_name: The feature_name of this DescribeFeatureMetadataResponse.
        :type feature_name: str
        """
        if feature_name is None:
            raise ValueError("Invalid value for `feature_name`, must not be `None`")

        self._feature_name = feature_name

    @property
    def feature_type(self):
        """Gets the feature_type of this DescribeFeatureMetadataResponse.


        :return: The feature_type of this DescribeFeatureMetadataResponse.
        :rtype: FeatureType
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this DescribeFeatureMetadataResponse.


        :param feature_type: The feature_type of this DescribeFeatureMetadataResponse.
        :type feature_type: FeatureType
        """
        if feature_type is None:
            raise ValueError("Invalid value for `feature_type`, must not be `None`")

        self._feature_type = feature_type

    @property
    def creation_time(self):
        """Gets the creation_time of this DescribeFeatureMetadataResponse.


        :return: The creation_time of this DescribeFeatureMetadataResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DescribeFeatureMetadataResponse.


        :param creation_time: The creation_time of this DescribeFeatureMetadataResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DescribeFeatureMetadataResponse.


        :return: The last_modified_time of this DescribeFeatureMetadataResponse.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DescribeFeatureMetadataResponse.


        :param last_modified_time: The last_modified_time of this DescribeFeatureMetadataResponse.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def description(self):
        """Gets the description of this DescribeFeatureMetadataResponse.


        :return: The description of this DescribeFeatureMetadataResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DescribeFeatureMetadataResponse.


        :param description: The description of this DescribeFeatureMetadataResponse.
        :type description: str
        """

        self._description = description

    @property
    def parameters(self):
        """Gets the parameters of this DescribeFeatureMetadataResponse.


        :return: The parameters of this DescribeFeatureMetadataResponse.
        :rtype: List
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DescribeFeatureMetadataResponse.


        :param parameters: The parameters of this DescribeFeatureMetadataResponse.
        :type parameters: List
        """

        self._parameters = parameters
