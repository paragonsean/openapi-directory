# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjectiveStatusCounters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, succeeded: int=None, pending: int=None, failed: int=None):
        """ObjectiveStatusCounters - a model defined in OpenAPI

        :param succeeded: The succeeded of this ObjectiveStatusCounters.
        :param pending: The pending of this ObjectiveStatusCounters.
        :param failed: The failed of this ObjectiveStatusCounters.
        """
        self.openapi_types = {
            'succeeded': int,
            'pending': int,
            'failed': int
        }

        self.attribute_map = {
            'succeeded': 'Succeeded',
            'pending': 'Pending',
            'failed': 'Failed'
        }

        self._succeeded = succeeded
        self._pending = pending
        self._failed = failed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectiveStatusCounters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectiveStatusCounters of this ObjectiveStatusCounters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def succeeded(self):
        """Gets the succeeded of this ObjectiveStatusCounters.


        :return: The succeeded of this ObjectiveStatusCounters.
        :rtype: int
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this ObjectiveStatusCounters.


        :param succeeded: The succeeded of this ObjectiveStatusCounters.
        :type succeeded: int
        """

        self._succeeded = succeeded

    @property
    def pending(self):
        """Gets the pending of this ObjectiveStatusCounters.


        :return: The pending of this ObjectiveStatusCounters.
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this ObjectiveStatusCounters.


        :param pending: The pending of this ObjectiveStatusCounters.
        :type pending: int
        """

        self._pending = pending

    @property
    def failed(self):
        """Gets the failed of this ObjectiveStatusCounters.


        :return: The failed of this ObjectiveStatusCounters.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this ObjectiveStatusCounters.


        :param failed: The failed of this ObjectiveStatusCounters.
        :type failed: int
        """

        self._failed = failed
