# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_processing_job_request_app_specification import CreateProcessingJobRequestAppSpecification
from openapi_server.models.create_processing_job_request_network_config import CreateProcessingJobRequestNetworkConfig
from openapi_server.models.create_processing_job_request_processing_output_config import CreateProcessingJobRequestProcessingOutputConfig
from openapi_server.models.create_processing_job_request_processing_resources import CreateProcessingJobRequestProcessingResources
from openapi_server.models.create_processing_job_request_stopping_condition import CreateProcessingJobRequestStoppingCondition
from openapi_server.models.experiment_config import ExperimentConfig
from openapi_server import util


class CreateProcessingJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, processing_inputs: List=None, processing_output_config: CreateProcessingJobRequestProcessingOutputConfig=None, processing_job_name: str=None, processing_resources: CreateProcessingJobRequestProcessingResources=None, stopping_condition: CreateProcessingJobRequestStoppingCondition=None, app_specification: CreateProcessingJobRequestAppSpecification=None, environment: Dict=None, network_config: CreateProcessingJobRequestNetworkConfig=None, role_arn: str=None, tags: List=None, experiment_config: ExperimentConfig=None):
        """CreateProcessingJobRequest - a model defined in OpenAPI

        :param processing_inputs: The processing_inputs of this CreateProcessingJobRequest.
        :param processing_output_config: The processing_output_config of this CreateProcessingJobRequest.
        :param processing_job_name: The processing_job_name of this CreateProcessingJobRequest.
        :param processing_resources: The processing_resources of this CreateProcessingJobRequest.
        :param stopping_condition: The stopping_condition of this CreateProcessingJobRequest.
        :param app_specification: The app_specification of this CreateProcessingJobRequest.
        :param environment: The environment of this CreateProcessingJobRequest.
        :param network_config: The network_config of this CreateProcessingJobRequest.
        :param role_arn: The role_arn of this CreateProcessingJobRequest.
        :param tags: The tags of this CreateProcessingJobRequest.
        :param experiment_config: The experiment_config of this CreateProcessingJobRequest.
        """
        self.openapi_types = {
            'processing_inputs': List,
            'processing_output_config': CreateProcessingJobRequestProcessingOutputConfig,
            'processing_job_name': str,
            'processing_resources': CreateProcessingJobRequestProcessingResources,
            'stopping_condition': CreateProcessingJobRequestStoppingCondition,
            'app_specification': CreateProcessingJobRequestAppSpecification,
            'environment': Dict,
            'network_config': CreateProcessingJobRequestNetworkConfig,
            'role_arn': str,
            'tags': List,
            'experiment_config': ExperimentConfig
        }

        self.attribute_map = {
            'processing_inputs': 'ProcessingInputs',
            'processing_output_config': 'ProcessingOutputConfig',
            'processing_job_name': 'ProcessingJobName',
            'processing_resources': 'ProcessingResources',
            'stopping_condition': 'StoppingCondition',
            'app_specification': 'AppSpecification',
            'environment': 'Environment',
            'network_config': 'NetworkConfig',
            'role_arn': 'RoleArn',
            'tags': 'Tags',
            'experiment_config': 'ExperimentConfig'
        }

        self._processing_inputs = processing_inputs
        self._processing_output_config = processing_output_config
        self._processing_job_name = processing_job_name
        self._processing_resources = processing_resources
        self._stopping_condition = stopping_condition
        self._app_specification = app_specification
        self._environment = environment
        self._network_config = network_config
        self._role_arn = role_arn
        self._tags = tags
        self._experiment_config = experiment_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProcessingJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProcessingJobRequest of this CreateProcessingJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def processing_inputs(self):
        """Gets the processing_inputs of this CreateProcessingJobRequest.


        :return: The processing_inputs of this CreateProcessingJobRequest.
        :rtype: List
        """
        return self._processing_inputs

    @processing_inputs.setter
    def processing_inputs(self, processing_inputs):
        """Sets the processing_inputs of this CreateProcessingJobRequest.


        :param processing_inputs: The processing_inputs of this CreateProcessingJobRequest.
        :type processing_inputs: List
        """

        self._processing_inputs = processing_inputs

    @property
    def processing_output_config(self):
        """Gets the processing_output_config of this CreateProcessingJobRequest.


        :return: The processing_output_config of this CreateProcessingJobRequest.
        :rtype: CreateProcessingJobRequestProcessingOutputConfig
        """
        return self._processing_output_config

    @processing_output_config.setter
    def processing_output_config(self, processing_output_config):
        """Sets the processing_output_config of this CreateProcessingJobRequest.


        :param processing_output_config: The processing_output_config of this CreateProcessingJobRequest.
        :type processing_output_config: CreateProcessingJobRequestProcessingOutputConfig
        """

        self._processing_output_config = processing_output_config

    @property
    def processing_job_name(self):
        """Gets the processing_job_name of this CreateProcessingJobRequest.


        :return: The processing_job_name of this CreateProcessingJobRequest.
        :rtype: str
        """
        return self._processing_job_name

    @processing_job_name.setter
    def processing_job_name(self, processing_job_name):
        """Sets the processing_job_name of this CreateProcessingJobRequest.


        :param processing_job_name: The processing_job_name of this CreateProcessingJobRequest.
        :type processing_job_name: str
        """
        if processing_job_name is None:
            raise ValueError("Invalid value for `processing_job_name`, must not be `None`")

        self._processing_job_name = processing_job_name

    @property
    def processing_resources(self):
        """Gets the processing_resources of this CreateProcessingJobRequest.


        :return: The processing_resources of this CreateProcessingJobRequest.
        :rtype: CreateProcessingJobRequestProcessingResources
        """
        return self._processing_resources

    @processing_resources.setter
    def processing_resources(self, processing_resources):
        """Sets the processing_resources of this CreateProcessingJobRequest.


        :param processing_resources: The processing_resources of this CreateProcessingJobRequest.
        :type processing_resources: CreateProcessingJobRequestProcessingResources
        """
        if processing_resources is None:
            raise ValueError("Invalid value for `processing_resources`, must not be `None`")

        self._processing_resources = processing_resources

    @property
    def stopping_condition(self):
        """Gets the stopping_condition of this CreateProcessingJobRequest.


        :return: The stopping_condition of this CreateProcessingJobRequest.
        :rtype: CreateProcessingJobRequestStoppingCondition
        """
        return self._stopping_condition

    @stopping_condition.setter
    def stopping_condition(self, stopping_condition):
        """Sets the stopping_condition of this CreateProcessingJobRequest.


        :param stopping_condition: The stopping_condition of this CreateProcessingJobRequest.
        :type stopping_condition: CreateProcessingJobRequestStoppingCondition
        """

        self._stopping_condition = stopping_condition

    @property
    def app_specification(self):
        """Gets the app_specification of this CreateProcessingJobRequest.


        :return: The app_specification of this CreateProcessingJobRequest.
        :rtype: CreateProcessingJobRequestAppSpecification
        """
        return self._app_specification

    @app_specification.setter
    def app_specification(self, app_specification):
        """Sets the app_specification of this CreateProcessingJobRequest.


        :param app_specification: The app_specification of this CreateProcessingJobRequest.
        :type app_specification: CreateProcessingJobRequestAppSpecification
        """
        if app_specification is None:
            raise ValueError("Invalid value for `app_specification`, must not be `None`")

        self._app_specification = app_specification

    @property
    def environment(self):
        """Gets the environment of this CreateProcessingJobRequest.


        :return: The environment of this CreateProcessingJobRequest.
        :rtype: Dict
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this CreateProcessingJobRequest.


        :param environment: The environment of this CreateProcessingJobRequest.
        :type environment: Dict
        """

        self._environment = environment

    @property
    def network_config(self):
        """Gets the network_config of this CreateProcessingJobRequest.


        :return: The network_config of this CreateProcessingJobRequest.
        :rtype: CreateProcessingJobRequestNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this CreateProcessingJobRequest.


        :param network_config: The network_config of this CreateProcessingJobRequest.
        :type network_config: CreateProcessingJobRequestNetworkConfig
        """

        self._network_config = network_config

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateProcessingJobRequest.


        :return: The role_arn of this CreateProcessingJobRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateProcessingJobRequest.


        :param role_arn: The role_arn of this CreateProcessingJobRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateProcessingJobRequest.


        :return: The tags of this CreateProcessingJobRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateProcessingJobRequest.


        :param tags: The tags of this CreateProcessingJobRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def experiment_config(self):
        """Gets the experiment_config of this CreateProcessingJobRequest.


        :return: The experiment_config of this CreateProcessingJobRequest.
        :rtype: ExperimentConfig
        """
        return self._experiment_config

    @experiment_config.setter
    def experiment_config(self, experiment_config):
        """Sets the experiment_config of this CreateProcessingJobRequest.


        :param experiment_config: The experiment_config of this CreateProcessingJobRequest.
        :type experiment_config: ExperimentConfig
        """

        self._experiment_config = experiment_config
