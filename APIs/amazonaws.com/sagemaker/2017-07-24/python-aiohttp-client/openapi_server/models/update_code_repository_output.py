# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateCodeRepositoryOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_repository_arn: str=None):
        """UpdateCodeRepositoryOutput - a model defined in OpenAPI

        :param code_repository_arn: The code_repository_arn of this UpdateCodeRepositoryOutput.
        """
        self.openapi_types = {
            'code_repository_arn': str
        }

        self.attribute_map = {
            'code_repository_arn': 'CodeRepositoryArn'
        }

        self._code_repository_arn = code_repository_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCodeRepositoryOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCodeRepositoryOutput of this UpdateCodeRepositoryOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_repository_arn(self):
        """Gets the code_repository_arn of this UpdateCodeRepositoryOutput.


        :return: The code_repository_arn of this UpdateCodeRepositoryOutput.
        :rtype: str
        """
        return self._code_repository_arn

    @code_repository_arn.setter
    def code_repository_arn(self, code_repository_arn):
        """Sets the code_repository_arn of this UpdateCodeRepositoryOutput.


        :param code_repository_arn: The code_repository_arn of this UpdateCodeRepositoryOutput.
        :type code_repository_arn: str
        """
        if code_repository_arn is None:
            raise ValueError("Invalid value for `code_repository_arn`, must not be `None`")

        self._code_repository_arn = code_repository_arn
