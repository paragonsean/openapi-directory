# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.production_variant_accelerator_type import ProductionVariantAcceleratorType
from openapi_server.models.production_variant_core_dump_config import ProductionVariantCoreDumpConfig
from openapi_server.models.production_variant_instance_type import ProductionVariantInstanceType
from openapi_server.models.production_variant_serverless_config import ProductionVariantServerlessConfig
from openapi_server import util


class ProductionVariant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variant_name: str=None, model_name: str=None, initial_instance_count: int=None, instance_type: ProductionVariantInstanceType=None, initial_variant_weight: float=None, accelerator_type: ProductionVariantAcceleratorType=None, core_dump_config: ProductionVariantCoreDumpConfig=None, serverless_config: ProductionVariantServerlessConfig=None, volume_size_in_gb: int=None, model_data_download_timeout_in_seconds: int=None, container_startup_health_check_timeout_in_seconds: int=None, enable_ssm_access: bool=None):
        """ProductionVariant - a model defined in OpenAPI

        :param variant_name: The variant_name of this ProductionVariant.
        :param model_name: The model_name of this ProductionVariant.
        :param initial_instance_count: The initial_instance_count of this ProductionVariant.
        :param instance_type: The instance_type of this ProductionVariant.
        :param initial_variant_weight: The initial_variant_weight of this ProductionVariant.
        :param accelerator_type: The accelerator_type of this ProductionVariant.
        :param core_dump_config: The core_dump_config of this ProductionVariant.
        :param serverless_config: The serverless_config of this ProductionVariant.
        :param volume_size_in_gb: The volume_size_in_gb of this ProductionVariant.
        :param model_data_download_timeout_in_seconds: The model_data_download_timeout_in_seconds of this ProductionVariant.
        :param container_startup_health_check_timeout_in_seconds: The container_startup_health_check_timeout_in_seconds of this ProductionVariant.
        :param enable_ssm_access: The enable_ssm_access of this ProductionVariant.
        """
        self.openapi_types = {
            'variant_name': str,
            'model_name': str,
            'initial_instance_count': int,
            'instance_type': ProductionVariantInstanceType,
            'initial_variant_weight': float,
            'accelerator_type': ProductionVariantAcceleratorType,
            'core_dump_config': ProductionVariantCoreDumpConfig,
            'serverless_config': ProductionVariantServerlessConfig,
            'volume_size_in_gb': int,
            'model_data_download_timeout_in_seconds': int,
            'container_startup_health_check_timeout_in_seconds': int,
            'enable_ssm_access': bool
        }

        self.attribute_map = {
            'variant_name': 'VariantName',
            'model_name': 'ModelName',
            'initial_instance_count': 'InitialInstanceCount',
            'instance_type': 'InstanceType',
            'initial_variant_weight': 'InitialVariantWeight',
            'accelerator_type': 'AcceleratorType',
            'core_dump_config': 'CoreDumpConfig',
            'serverless_config': 'ServerlessConfig',
            'volume_size_in_gb': 'VolumeSizeInGB',
            'model_data_download_timeout_in_seconds': 'ModelDataDownloadTimeoutInSeconds',
            'container_startup_health_check_timeout_in_seconds': 'ContainerStartupHealthCheckTimeoutInSeconds',
            'enable_ssm_access': 'EnableSSMAccess'
        }

        self._variant_name = variant_name
        self._model_name = model_name
        self._initial_instance_count = initial_instance_count
        self._instance_type = instance_type
        self._initial_variant_weight = initial_variant_weight
        self._accelerator_type = accelerator_type
        self._core_dump_config = core_dump_config
        self._serverless_config = serverless_config
        self._volume_size_in_gb = volume_size_in_gb
        self._model_data_download_timeout_in_seconds = model_data_download_timeout_in_seconds
        self._container_startup_health_check_timeout_in_seconds = container_startup_health_check_timeout_in_seconds
        self._enable_ssm_access = enable_ssm_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductionVariant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductionVariant of this ProductionVariant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variant_name(self):
        """Gets the variant_name of this ProductionVariant.


        :return: The variant_name of this ProductionVariant.
        :rtype: str
        """
        return self._variant_name

    @variant_name.setter
    def variant_name(self, variant_name):
        """Sets the variant_name of this ProductionVariant.


        :param variant_name: The variant_name of this ProductionVariant.
        :type variant_name: str
        """
        if variant_name is None:
            raise ValueError("Invalid value for `variant_name`, must not be `None`")

        self._variant_name = variant_name

    @property
    def model_name(self):
        """Gets the model_name of this ProductionVariant.


        :return: The model_name of this ProductionVariant.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this ProductionVariant.


        :param model_name: The model_name of this ProductionVariant.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def initial_instance_count(self):
        """Gets the initial_instance_count of this ProductionVariant.


        :return: The initial_instance_count of this ProductionVariant.
        :rtype: int
        """
        return self._initial_instance_count

    @initial_instance_count.setter
    def initial_instance_count(self, initial_instance_count):
        """Sets the initial_instance_count of this ProductionVariant.


        :param initial_instance_count: The initial_instance_count of this ProductionVariant.
        :type initial_instance_count: int
        """

        self._initial_instance_count = initial_instance_count

    @property
    def instance_type(self):
        """Gets the instance_type of this ProductionVariant.


        :return: The instance_type of this ProductionVariant.
        :rtype: ProductionVariantInstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this ProductionVariant.


        :param instance_type: The instance_type of this ProductionVariant.
        :type instance_type: ProductionVariantInstanceType
        """

        self._instance_type = instance_type

    @property
    def initial_variant_weight(self):
        """Gets the initial_variant_weight of this ProductionVariant.


        :return: The initial_variant_weight of this ProductionVariant.
        :rtype: float
        """
        return self._initial_variant_weight

    @initial_variant_weight.setter
    def initial_variant_weight(self, initial_variant_weight):
        """Sets the initial_variant_weight of this ProductionVariant.


        :param initial_variant_weight: The initial_variant_weight of this ProductionVariant.
        :type initial_variant_weight: float
        """

        self._initial_variant_weight = initial_variant_weight

    @property
    def accelerator_type(self):
        """Gets the accelerator_type of this ProductionVariant.


        :return: The accelerator_type of this ProductionVariant.
        :rtype: ProductionVariantAcceleratorType
        """
        return self._accelerator_type

    @accelerator_type.setter
    def accelerator_type(self, accelerator_type):
        """Sets the accelerator_type of this ProductionVariant.


        :param accelerator_type: The accelerator_type of this ProductionVariant.
        :type accelerator_type: ProductionVariantAcceleratorType
        """

        self._accelerator_type = accelerator_type

    @property
    def core_dump_config(self):
        """Gets the core_dump_config of this ProductionVariant.


        :return: The core_dump_config of this ProductionVariant.
        :rtype: ProductionVariantCoreDumpConfig
        """
        return self._core_dump_config

    @core_dump_config.setter
    def core_dump_config(self, core_dump_config):
        """Sets the core_dump_config of this ProductionVariant.


        :param core_dump_config: The core_dump_config of this ProductionVariant.
        :type core_dump_config: ProductionVariantCoreDumpConfig
        """

        self._core_dump_config = core_dump_config

    @property
    def serverless_config(self):
        """Gets the serverless_config of this ProductionVariant.


        :return: The serverless_config of this ProductionVariant.
        :rtype: ProductionVariantServerlessConfig
        """
        return self._serverless_config

    @serverless_config.setter
    def serverless_config(self, serverless_config):
        """Sets the serverless_config of this ProductionVariant.


        :param serverless_config: The serverless_config of this ProductionVariant.
        :type serverless_config: ProductionVariantServerlessConfig
        """

        self._serverless_config = serverless_config

    @property
    def volume_size_in_gb(self):
        """Gets the volume_size_in_gb of this ProductionVariant.


        :return: The volume_size_in_gb of this ProductionVariant.
        :rtype: int
        """
        return self._volume_size_in_gb

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, volume_size_in_gb):
        """Sets the volume_size_in_gb of this ProductionVariant.


        :param volume_size_in_gb: The volume_size_in_gb of this ProductionVariant.
        :type volume_size_in_gb: int
        """

        self._volume_size_in_gb = volume_size_in_gb

    @property
    def model_data_download_timeout_in_seconds(self):
        """Gets the model_data_download_timeout_in_seconds of this ProductionVariant.


        :return: The model_data_download_timeout_in_seconds of this ProductionVariant.
        :rtype: int
        """
        return self._model_data_download_timeout_in_seconds

    @model_data_download_timeout_in_seconds.setter
    def model_data_download_timeout_in_seconds(self, model_data_download_timeout_in_seconds):
        """Sets the model_data_download_timeout_in_seconds of this ProductionVariant.


        :param model_data_download_timeout_in_seconds: The model_data_download_timeout_in_seconds of this ProductionVariant.
        :type model_data_download_timeout_in_seconds: int
        """

        self._model_data_download_timeout_in_seconds = model_data_download_timeout_in_seconds

    @property
    def container_startup_health_check_timeout_in_seconds(self):
        """Gets the container_startup_health_check_timeout_in_seconds of this ProductionVariant.


        :return: The container_startup_health_check_timeout_in_seconds of this ProductionVariant.
        :rtype: int
        """
        return self._container_startup_health_check_timeout_in_seconds

    @container_startup_health_check_timeout_in_seconds.setter
    def container_startup_health_check_timeout_in_seconds(self, container_startup_health_check_timeout_in_seconds):
        """Sets the container_startup_health_check_timeout_in_seconds of this ProductionVariant.


        :param container_startup_health_check_timeout_in_seconds: The container_startup_health_check_timeout_in_seconds of this ProductionVariant.
        :type container_startup_health_check_timeout_in_seconds: int
        """

        self._container_startup_health_check_timeout_in_seconds = container_startup_health_check_timeout_in_seconds

    @property
    def enable_ssm_access(self):
        """Gets the enable_ssm_access of this ProductionVariant.


        :return: The enable_ssm_access of this ProductionVariant.
        :rtype: bool
        """
        return self._enable_ssm_access

    @enable_ssm_access.setter
    def enable_ssm_access(self, enable_ssm_access):
        """Sets the enable_ssm_access of this ProductionVariant.


        :param enable_ssm_access: The enable_ssm_access of this ProductionVariant.
        :type enable_ssm_access: bool
        """

        self._enable_ssm_access = enable_ssm_access
