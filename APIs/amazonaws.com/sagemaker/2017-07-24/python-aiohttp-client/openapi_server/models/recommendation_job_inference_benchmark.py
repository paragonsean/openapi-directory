# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_output_configuration import EndpointOutputConfiguration
from openapi_server.models.inference_metrics import InferenceMetrics
from openapi_server.models.model_configuration import ModelConfiguration
from openapi_server.models.recommendation_metrics import RecommendationMetrics
from openapi_server import util


class RecommendationJobInferenceBenchmark(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metrics: RecommendationMetrics=None, endpoint_configuration: EndpointOutputConfiguration=None, model_configuration: ModelConfiguration=None, failure_reason: str=None, endpoint_metrics: InferenceMetrics=None, invocation_end_time: datetime=None, invocation_start_time: datetime=None):
        """RecommendationJobInferenceBenchmark - a model defined in OpenAPI

        :param metrics: The metrics of this RecommendationJobInferenceBenchmark.
        :param endpoint_configuration: The endpoint_configuration of this RecommendationJobInferenceBenchmark.
        :param model_configuration: The model_configuration of this RecommendationJobInferenceBenchmark.
        :param failure_reason: The failure_reason of this RecommendationJobInferenceBenchmark.
        :param endpoint_metrics: The endpoint_metrics of this RecommendationJobInferenceBenchmark.
        :param invocation_end_time: The invocation_end_time of this RecommendationJobInferenceBenchmark.
        :param invocation_start_time: The invocation_start_time of this RecommendationJobInferenceBenchmark.
        """
        self.openapi_types = {
            'metrics': RecommendationMetrics,
            'endpoint_configuration': EndpointOutputConfiguration,
            'model_configuration': ModelConfiguration,
            'failure_reason': str,
            'endpoint_metrics': InferenceMetrics,
            'invocation_end_time': datetime,
            'invocation_start_time': datetime
        }

        self.attribute_map = {
            'metrics': 'Metrics',
            'endpoint_configuration': 'EndpointConfiguration',
            'model_configuration': 'ModelConfiguration',
            'failure_reason': 'FailureReason',
            'endpoint_metrics': 'EndpointMetrics',
            'invocation_end_time': 'InvocationEndTime',
            'invocation_start_time': 'InvocationStartTime'
        }

        self._metrics = metrics
        self._endpoint_configuration = endpoint_configuration
        self._model_configuration = model_configuration
        self._failure_reason = failure_reason
        self._endpoint_metrics = endpoint_metrics
        self._invocation_end_time = invocation_end_time
        self._invocation_start_time = invocation_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationJobInferenceBenchmark':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationJobInferenceBenchmark of this RecommendationJobInferenceBenchmark.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metrics(self):
        """Gets the metrics of this RecommendationJobInferenceBenchmark.


        :return: The metrics of this RecommendationJobInferenceBenchmark.
        :rtype: RecommendationMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this RecommendationJobInferenceBenchmark.


        :param metrics: The metrics of this RecommendationJobInferenceBenchmark.
        :type metrics: RecommendationMetrics
        """

        self._metrics = metrics

    @property
    def endpoint_configuration(self):
        """Gets the endpoint_configuration of this RecommendationJobInferenceBenchmark.


        :return: The endpoint_configuration of this RecommendationJobInferenceBenchmark.
        :rtype: EndpointOutputConfiguration
        """
        return self._endpoint_configuration

    @endpoint_configuration.setter
    def endpoint_configuration(self, endpoint_configuration):
        """Sets the endpoint_configuration of this RecommendationJobInferenceBenchmark.


        :param endpoint_configuration: The endpoint_configuration of this RecommendationJobInferenceBenchmark.
        :type endpoint_configuration: EndpointOutputConfiguration
        """

        self._endpoint_configuration = endpoint_configuration

    @property
    def model_configuration(self):
        """Gets the model_configuration of this RecommendationJobInferenceBenchmark.


        :return: The model_configuration of this RecommendationJobInferenceBenchmark.
        :rtype: ModelConfiguration
        """
        return self._model_configuration

    @model_configuration.setter
    def model_configuration(self, model_configuration):
        """Sets the model_configuration of this RecommendationJobInferenceBenchmark.


        :param model_configuration: The model_configuration of this RecommendationJobInferenceBenchmark.
        :type model_configuration: ModelConfiguration
        """
        if model_configuration is None:
            raise ValueError("Invalid value for `model_configuration`, must not be `None`")

        self._model_configuration = model_configuration

    @property
    def failure_reason(self):
        """Gets the failure_reason of this RecommendationJobInferenceBenchmark.


        :return: The failure_reason of this RecommendationJobInferenceBenchmark.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this RecommendationJobInferenceBenchmark.


        :param failure_reason: The failure_reason of this RecommendationJobInferenceBenchmark.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def endpoint_metrics(self):
        """Gets the endpoint_metrics of this RecommendationJobInferenceBenchmark.


        :return: The endpoint_metrics of this RecommendationJobInferenceBenchmark.
        :rtype: InferenceMetrics
        """
        return self._endpoint_metrics

    @endpoint_metrics.setter
    def endpoint_metrics(self, endpoint_metrics):
        """Sets the endpoint_metrics of this RecommendationJobInferenceBenchmark.


        :param endpoint_metrics: The endpoint_metrics of this RecommendationJobInferenceBenchmark.
        :type endpoint_metrics: InferenceMetrics
        """

        self._endpoint_metrics = endpoint_metrics

    @property
    def invocation_end_time(self):
        """Gets the invocation_end_time of this RecommendationJobInferenceBenchmark.


        :return: The invocation_end_time of this RecommendationJobInferenceBenchmark.
        :rtype: datetime
        """
        return self._invocation_end_time

    @invocation_end_time.setter
    def invocation_end_time(self, invocation_end_time):
        """Sets the invocation_end_time of this RecommendationJobInferenceBenchmark.


        :param invocation_end_time: The invocation_end_time of this RecommendationJobInferenceBenchmark.
        :type invocation_end_time: datetime
        """

        self._invocation_end_time = invocation_end_time

    @property
    def invocation_start_time(self):
        """Gets the invocation_start_time of this RecommendationJobInferenceBenchmark.


        :return: The invocation_start_time of this RecommendationJobInferenceBenchmark.
        :rtype: datetime
        """
        return self._invocation_start_time

    @invocation_start_time.setter
    def invocation_start_time(self, invocation_start_time):
        """Sets the invocation_start_time of this RecommendationJobInferenceBenchmark.


        :param invocation_start_time: The invocation_start_time of this RecommendationJobInferenceBenchmark.
        :type invocation_start_time: datetime
        """

        self._invocation_start_time = invocation_start_time
