# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.training_instance_type import TrainingInstanceType
from openapi_server import util


class InstanceGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_type: TrainingInstanceType=None, instance_count: int=None, instance_group_name: str=None):
        """InstanceGroup - a model defined in OpenAPI

        :param instance_type: The instance_type of this InstanceGroup.
        :param instance_count: The instance_count of this InstanceGroup.
        :param instance_group_name: The instance_group_name of this InstanceGroup.
        """
        self.openapi_types = {
            'instance_type': TrainingInstanceType,
            'instance_count': int,
            'instance_group_name': str
        }

        self.attribute_map = {
            'instance_type': 'InstanceType',
            'instance_count': 'InstanceCount',
            'instance_group_name': 'InstanceGroupName'
        }

        self._instance_type = instance_type
        self._instance_count = instance_count
        self._instance_group_name = instance_group_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceGroup of this InstanceGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_type(self):
        """Gets the instance_type of this InstanceGroup.


        :return: The instance_type of this InstanceGroup.
        :rtype: TrainingInstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InstanceGroup.


        :param instance_type: The instance_type of this InstanceGroup.
        :type instance_type: TrainingInstanceType
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")

        self._instance_type = instance_type

    @property
    def instance_count(self):
        """Gets the instance_count of this InstanceGroup.


        :return: The instance_count of this InstanceGroup.
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this InstanceGroup.


        :param instance_count: The instance_count of this InstanceGroup.
        :type instance_count: int
        """
        if instance_count is None:
            raise ValueError("Invalid value for `instance_count`, must not be `None`")

        self._instance_count = instance_count

    @property
    def instance_group_name(self):
        """Gets the instance_group_name of this InstanceGroup.


        :return: The instance_group_name of this InstanceGroup.
        :rtype: str
        """
        return self._instance_group_name

    @instance_group_name.setter
    def instance_group_name(self, instance_group_name):
        """Sets the instance_group_name of this InstanceGroup.


        :param instance_group_name: The instance_group_name of this InstanceGroup.
        :type instance_group_name: str
        """
        if instance_group_name is None:
            raise ValueError("Invalid value for `instance_group_name`, must not be `None`")

        self._instance_group_name = instance_group_name
