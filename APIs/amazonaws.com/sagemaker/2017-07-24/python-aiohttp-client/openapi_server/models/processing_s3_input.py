# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.processing_s3_compression_type import ProcessingS3CompressionType
from openapi_server.models.processing_s3_data_distribution_type import ProcessingS3DataDistributionType
from openapi_server.models.processing_s3_data_type import ProcessingS3DataType
from openapi_server.models.processing_s3_input_mode import ProcessingS3InputMode
from openapi_server import util


class ProcessingS3Input(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_uri: str=None, local_path: str=None, s3_data_type: ProcessingS3DataType=None, s3_input_mode: ProcessingS3InputMode=None, s3_data_distribution_type: ProcessingS3DataDistributionType=None, s3_compression_type: ProcessingS3CompressionType=None):
        """ProcessingS3Input - a model defined in OpenAPI

        :param s3_uri: The s3_uri of this ProcessingS3Input.
        :param local_path: The local_path of this ProcessingS3Input.
        :param s3_data_type: The s3_data_type of this ProcessingS3Input.
        :param s3_input_mode: The s3_input_mode of this ProcessingS3Input.
        :param s3_data_distribution_type: The s3_data_distribution_type of this ProcessingS3Input.
        :param s3_compression_type: The s3_compression_type of this ProcessingS3Input.
        """
        self.openapi_types = {
            's3_uri': str,
            'local_path': str,
            's3_data_type': ProcessingS3DataType,
            's3_input_mode': ProcessingS3InputMode,
            's3_data_distribution_type': ProcessingS3DataDistributionType,
            's3_compression_type': ProcessingS3CompressionType
        }

        self.attribute_map = {
            's3_uri': 'S3Uri',
            'local_path': 'LocalPath',
            's3_data_type': 'S3DataType',
            's3_input_mode': 'S3InputMode',
            's3_data_distribution_type': 'S3DataDistributionType',
            's3_compression_type': 'S3CompressionType'
        }

        self._s3_uri = s3_uri
        self._local_path = local_path
        self._s3_data_type = s3_data_type
        self._s3_input_mode = s3_input_mode
        self._s3_data_distribution_type = s3_data_distribution_type
        self._s3_compression_type = s3_compression_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProcessingS3Input':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProcessingS3Input of this ProcessingS3Input.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_uri(self):
        """Gets the s3_uri of this ProcessingS3Input.


        :return: The s3_uri of this ProcessingS3Input.
        :rtype: str
        """
        return self._s3_uri

    @s3_uri.setter
    def s3_uri(self, s3_uri):
        """Sets the s3_uri of this ProcessingS3Input.


        :param s3_uri: The s3_uri of this ProcessingS3Input.
        :type s3_uri: str
        """
        if s3_uri is None:
            raise ValueError("Invalid value for `s3_uri`, must not be `None`")

        self._s3_uri = s3_uri

    @property
    def local_path(self):
        """Gets the local_path of this ProcessingS3Input.


        :return: The local_path of this ProcessingS3Input.
        :rtype: str
        """
        return self._local_path

    @local_path.setter
    def local_path(self, local_path):
        """Sets the local_path of this ProcessingS3Input.


        :param local_path: The local_path of this ProcessingS3Input.
        :type local_path: str
        """

        self._local_path = local_path

    @property
    def s3_data_type(self):
        """Gets the s3_data_type of this ProcessingS3Input.


        :return: The s3_data_type of this ProcessingS3Input.
        :rtype: ProcessingS3DataType
        """
        return self._s3_data_type

    @s3_data_type.setter
    def s3_data_type(self, s3_data_type):
        """Sets the s3_data_type of this ProcessingS3Input.


        :param s3_data_type: The s3_data_type of this ProcessingS3Input.
        :type s3_data_type: ProcessingS3DataType
        """
        if s3_data_type is None:
            raise ValueError("Invalid value for `s3_data_type`, must not be `None`")

        self._s3_data_type = s3_data_type

    @property
    def s3_input_mode(self):
        """Gets the s3_input_mode of this ProcessingS3Input.


        :return: The s3_input_mode of this ProcessingS3Input.
        :rtype: ProcessingS3InputMode
        """
        return self._s3_input_mode

    @s3_input_mode.setter
    def s3_input_mode(self, s3_input_mode):
        """Sets the s3_input_mode of this ProcessingS3Input.


        :param s3_input_mode: The s3_input_mode of this ProcessingS3Input.
        :type s3_input_mode: ProcessingS3InputMode
        """

        self._s3_input_mode = s3_input_mode

    @property
    def s3_data_distribution_type(self):
        """Gets the s3_data_distribution_type of this ProcessingS3Input.


        :return: The s3_data_distribution_type of this ProcessingS3Input.
        :rtype: ProcessingS3DataDistributionType
        """
        return self._s3_data_distribution_type

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, s3_data_distribution_type):
        """Sets the s3_data_distribution_type of this ProcessingS3Input.


        :param s3_data_distribution_type: The s3_data_distribution_type of this ProcessingS3Input.
        :type s3_data_distribution_type: ProcessingS3DataDistributionType
        """

        self._s3_data_distribution_type = s3_data_distribution_type

    @property
    def s3_compression_type(self):
        """Gets the s3_compression_type of this ProcessingS3Input.


        :return: The s3_compression_type of this ProcessingS3Input.
        :rtype: ProcessingS3CompressionType
        """
        return self._s3_compression_type

    @s3_compression_type.setter
    def s3_compression_type(self, s3_compression_type):
        """Sets the s3_compression_type of this ProcessingS3Input.


        :param s3_compression_type: The s3_compression_type of this ProcessingS3Input.
        :type s3_compression_type: ProcessingS3CompressionType
        """

        self._s3_compression_type = s3_compression_type
