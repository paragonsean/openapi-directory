# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_code_repository_input_git_config import CreateCodeRepositoryInputGitConfig
from openapi_server import util


class CreateCodeRepositoryInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_repository_name: str=None, git_config: CreateCodeRepositoryInputGitConfig=None, tags: List=None):
        """CreateCodeRepositoryInput - a model defined in OpenAPI

        :param code_repository_name: The code_repository_name of this CreateCodeRepositoryInput.
        :param git_config: The git_config of this CreateCodeRepositoryInput.
        :param tags: The tags of this CreateCodeRepositoryInput.
        """
        self.openapi_types = {
            'code_repository_name': str,
            'git_config': CreateCodeRepositoryInputGitConfig,
            'tags': List
        }

        self.attribute_map = {
            'code_repository_name': 'CodeRepositoryName',
            'git_config': 'GitConfig',
            'tags': 'Tags'
        }

        self._code_repository_name = code_repository_name
        self._git_config = git_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCodeRepositoryInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCodeRepositoryInput of this CreateCodeRepositoryInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_repository_name(self):
        """Gets the code_repository_name of this CreateCodeRepositoryInput.


        :return: The code_repository_name of this CreateCodeRepositoryInput.
        :rtype: str
        """
        return self._code_repository_name

    @code_repository_name.setter
    def code_repository_name(self, code_repository_name):
        """Sets the code_repository_name of this CreateCodeRepositoryInput.


        :param code_repository_name: The code_repository_name of this CreateCodeRepositoryInput.
        :type code_repository_name: str
        """
        if code_repository_name is None:
            raise ValueError("Invalid value for `code_repository_name`, must not be `None`")

        self._code_repository_name = code_repository_name

    @property
    def git_config(self):
        """Gets the git_config of this CreateCodeRepositoryInput.


        :return: The git_config of this CreateCodeRepositoryInput.
        :rtype: CreateCodeRepositoryInputGitConfig
        """
        return self._git_config

    @git_config.setter
    def git_config(self, git_config):
        """Sets the git_config of this CreateCodeRepositoryInput.


        :param git_config: The git_config of this CreateCodeRepositoryInput.
        :type git_config: CreateCodeRepositoryInputGitConfig
        """
        if git_config is None:
            raise ValueError("Invalid value for `git_config`, must not be `None`")

        self._git_config = git_config

    @property
    def tags(self):
        """Gets the tags of this CreateCodeRepositoryInput.


        :return: The tags of this CreateCodeRepositoryInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCodeRepositoryInput.


        :param tags: The tags of this CreateCodeRepositoryInput.
        :type tags: List
        """

        self._tags = tags
