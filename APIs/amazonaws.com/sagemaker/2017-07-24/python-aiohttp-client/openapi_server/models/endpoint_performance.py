# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_info import EndpointInfo
from openapi_server.models.endpoint_performance_metrics import EndpointPerformanceMetrics
from openapi_server import util


class EndpointPerformance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metrics: EndpointPerformanceMetrics=None, endpoint_info: EndpointInfo=None):
        """EndpointPerformance - a model defined in OpenAPI

        :param metrics: The metrics of this EndpointPerformance.
        :param endpoint_info: The endpoint_info of this EndpointPerformance.
        """
        self.openapi_types = {
            'metrics': EndpointPerformanceMetrics,
            'endpoint_info': EndpointInfo
        }

        self.attribute_map = {
            'metrics': 'Metrics',
            'endpoint_info': 'EndpointInfo'
        }

        self._metrics = metrics
        self._endpoint_info = endpoint_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointPerformance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointPerformance of this EndpointPerformance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metrics(self):
        """Gets the metrics of this EndpointPerformance.


        :return: The metrics of this EndpointPerformance.
        :rtype: EndpointPerformanceMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this EndpointPerformance.


        :param metrics: The metrics of this EndpointPerformance.
        :type metrics: EndpointPerformanceMetrics
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")

        self._metrics = metrics

    @property
    def endpoint_info(self):
        """Gets the endpoint_info of this EndpointPerformance.


        :return: The endpoint_info of this EndpointPerformance.
        :rtype: EndpointInfo
        """
        return self._endpoint_info

    @endpoint_info.setter
    def endpoint_info(self, endpoint_info):
        """Sets the endpoint_info of this EndpointPerformance.


        :param endpoint_info: The endpoint_info of this EndpointPerformance.
        :type endpoint_info: EndpointInfo
        """
        if endpoint_info is None:
            raise ValueError("Invalid value for `endpoint_info`, must not be `None`")

        self._endpoint_info = endpoint_info
