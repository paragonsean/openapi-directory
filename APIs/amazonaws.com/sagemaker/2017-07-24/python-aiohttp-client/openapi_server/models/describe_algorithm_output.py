# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithm_status import AlgorithmStatus
from openapi_server.models.describe_algorithm_output_algorithm_status_details import DescribeAlgorithmOutputAlgorithmStatusDetails
from openapi_server.models.describe_algorithm_output_inference_specification import DescribeAlgorithmOutputInferenceSpecification
from openapi_server.models.describe_algorithm_output_training_specification import DescribeAlgorithmOutputTrainingSpecification
from openapi_server.models.describe_algorithm_output_validation_specification import DescribeAlgorithmOutputValidationSpecification
from openapi_server import util


class DescribeAlgorithmOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm_name: str=None, algorithm_arn: str=None, algorithm_description: str=None, creation_time: datetime=None, training_specification: DescribeAlgorithmOutputTrainingSpecification=None, inference_specification: DescribeAlgorithmOutputInferenceSpecification=None, validation_specification: DescribeAlgorithmOutputValidationSpecification=None, algorithm_status: AlgorithmStatus=None, algorithm_status_details: DescribeAlgorithmOutputAlgorithmStatusDetails=None, product_id: str=None, certify_for_marketplace: bool=None):
        """DescribeAlgorithmOutput - a model defined in OpenAPI

        :param algorithm_name: The algorithm_name of this DescribeAlgorithmOutput.
        :param algorithm_arn: The algorithm_arn of this DescribeAlgorithmOutput.
        :param algorithm_description: The algorithm_description of this DescribeAlgorithmOutput.
        :param creation_time: The creation_time of this DescribeAlgorithmOutput.
        :param training_specification: The training_specification of this DescribeAlgorithmOutput.
        :param inference_specification: The inference_specification of this DescribeAlgorithmOutput.
        :param validation_specification: The validation_specification of this DescribeAlgorithmOutput.
        :param algorithm_status: The algorithm_status of this DescribeAlgorithmOutput.
        :param algorithm_status_details: The algorithm_status_details of this DescribeAlgorithmOutput.
        :param product_id: The product_id of this DescribeAlgorithmOutput.
        :param certify_for_marketplace: The certify_for_marketplace of this DescribeAlgorithmOutput.
        """
        self.openapi_types = {
            'algorithm_name': str,
            'algorithm_arn': str,
            'algorithm_description': str,
            'creation_time': datetime,
            'training_specification': DescribeAlgorithmOutputTrainingSpecification,
            'inference_specification': DescribeAlgorithmOutputInferenceSpecification,
            'validation_specification': DescribeAlgorithmOutputValidationSpecification,
            'algorithm_status': AlgorithmStatus,
            'algorithm_status_details': DescribeAlgorithmOutputAlgorithmStatusDetails,
            'product_id': str,
            'certify_for_marketplace': bool
        }

        self.attribute_map = {
            'algorithm_name': 'AlgorithmName',
            'algorithm_arn': 'AlgorithmArn',
            'algorithm_description': 'AlgorithmDescription',
            'creation_time': 'CreationTime',
            'training_specification': 'TrainingSpecification',
            'inference_specification': 'InferenceSpecification',
            'validation_specification': 'ValidationSpecification',
            'algorithm_status': 'AlgorithmStatus',
            'algorithm_status_details': 'AlgorithmStatusDetails',
            'product_id': 'ProductId',
            'certify_for_marketplace': 'CertifyForMarketplace'
        }

        self._algorithm_name = algorithm_name
        self._algorithm_arn = algorithm_arn
        self._algorithm_description = algorithm_description
        self._creation_time = creation_time
        self._training_specification = training_specification
        self._inference_specification = inference_specification
        self._validation_specification = validation_specification
        self._algorithm_status = algorithm_status
        self._algorithm_status_details = algorithm_status_details
        self._product_id = product_id
        self._certify_for_marketplace = certify_for_marketplace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAlgorithmOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAlgorithmOutput of this DescribeAlgorithmOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm_name(self):
        """Gets the algorithm_name of this DescribeAlgorithmOutput.


        :return: The algorithm_name of this DescribeAlgorithmOutput.
        :rtype: str
        """
        return self._algorithm_name

    @algorithm_name.setter
    def algorithm_name(self, algorithm_name):
        """Sets the algorithm_name of this DescribeAlgorithmOutput.


        :param algorithm_name: The algorithm_name of this DescribeAlgorithmOutput.
        :type algorithm_name: str
        """
        if algorithm_name is None:
            raise ValueError("Invalid value for `algorithm_name`, must not be `None`")

        self._algorithm_name = algorithm_name

    @property
    def algorithm_arn(self):
        """Gets the algorithm_arn of this DescribeAlgorithmOutput.


        :return: The algorithm_arn of this DescribeAlgorithmOutput.
        :rtype: str
        """
        return self._algorithm_arn

    @algorithm_arn.setter
    def algorithm_arn(self, algorithm_arn):
        """Sets the algorithm_arn of this DescribeAlgorithmOutput.


        :param algorithm_arn: The algorithm_arn of this DescribeAlgorithmOutput.
        :type algorithm_arn: str
        """
        if algorithm_arn is None:
            raise ValueError("Invalid value for `algorithm_arn`, must not be `None`")

        self._algorithm_arn = algorithm_arn

    @property
    def algorithm_description(self):
        """Gets the algorithm_description of this DescribeAlgorithmOutput.


        :return: The algorithm_description of this DescribeAlgorithmOutput.
        :rtype: str
        """
        return self._algorithm_description

    @algorithm_description.setter
    def algorithm_description(self, algorithm_description):
        """Sets the algorithm_description of this DescribeAlgorithmOutput.


        :param algorithm_description: The algorithm_description of this DescribeAlgorithmOutput.
        :type algorithm_description: str
        """

        self._algorithm_description = algorithm_description

    @property
    def creation_time(self):
        """Gets the creation_time of this DescribeAlgorithmOutput.


        :return: The creation_time of this DescribeAlgorithmOutput.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DescribeAlgorithmOutput.


        :param creation_time: The creation_time of this DescribeAlgorithmOutput.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def training_specification(self):
        """Gets the training_specification of this DescribeAlgorithmOutput.


        :return: The training_specification of this DescribeAlgorithmOutput.
        :rtype: DescribeAlgorithmOutputTrainingSpecification
        """
        return self._training_specification

    @training_specification.setter
    def training_specification(self, training_specification):
        """Sets the training_specification of this DescribeAlgorithmOutput.


        :param training_specification: The training_specification of this DescribeAlgorithmOutput.
        :type training_specification: DescribeAlgorithmOutputTrainingSpecification
        """
        if training_specification is None:
            raise ValueError("Invalid value for `training_specification`, must not be `None`")

        self._training_specification = training_specification

    @property
    def inference_specification(self):
        """Gets the inference_specification of this DescribeAlgorithmOutput.


        :return: The inference_specification of this DescribeAlgorithmOutput.
        :rtype: DescribeAlgorithmOutputInferenceSpecification
        """
        return self._inference_specification

    @inference_specification.setter
    def inference_specification(self, inference_specification):
        """Sets the inference_specification of this DescribeAlgorithmOutput.


        :param inference_specification: The inference_specification of this DescribeAlgorithmOutput.
        :type inference_specification: DescribeAlgorithmOutputInferenceSpecification
        """

        self._inference_specification = inference_specification

    @property
    def validation_specification(self):
        """Gets the validation_specification of this DescribeAlgorithmOutput.


        :return: The validation_specification of this DescribeAlgorithmOutput.
        :rtype: DescribeAlgorithmOutputValidationSpecification
        """
        return self._validation_specification

    @validation_specification.setter
    def validation_specification(self, validation_specification):
        """Sets the validation_specification of this DescribeAlgorithmOutput.


        :param validation_specification: The validation_specification of this DescribeAlgorithmOutput.
        :type validation_specification: DescribeAlgorithmOutputValidationSpecification
        """

        self._validation_specification = validation_specification

    @property
    def algorithm_status(self):
        """Gets the algorithm_status of this DescribeAlgorithmOutput.


        :return: The algorithm_status of this DescribeAlgorithmOutput.
        :rtype: AlgorithmStatus
        """
        return self._algorithm_status

    @algorithm_status.setter
    def algorithm_status(self, algorithm_status):
        """Sets the algorithm_status of this DescribeAlgorithmOutput.


        :param algorithm_status: The algorithm_status of this DescribeAlgorithmOutput.
        :type algorithm_status: AlgorithmStatus
        """
        if algorithm_status is None:
            raise ValueError("Invalid value for `algorithm_status`, must not be `None`")

        self._algorithm_status = algorithm_status

    @property
    def algorithm_status_details(self):
        """Gets the algorithm_status_details of this DescribeAlgorithmOutput.


        :return: The algorithm_status_details of this DescribeAlgorithmOutput.
        :rtype: DescribeAlgorithmOutputAlgorithmStatusDetails
        """
        return self._algorithm_status_details

    @algorithm_status_details.setter
    def algorithm_status_details(self, algorithm_status_details):
        """Sets the algorithm_status_details of this DescribeAlgorithmOutput.


        :param algorithm_status_details: The algorithm_status_details of this DescribeAlgorithmOutput.
        :type algorithm_status_details: DescribeAlgorithmOutputAlgorithmStatusDetails
        """
        if algorithm_status_details is None:
            raise ValueError("Invalid value for `algorithm_status_details`, must not be `None`")

        self._algorithm_status_details = algorithm_status_details

    @property
    def product_id(self):
        """Gets the product_id of this DescribeAlgorithmOutput.


        :return: The product_id of this DescribeAlgorithmOutput.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this DescribeAlgorithmOutput.


        :param product_id: The product_id of this DescribeAlgorithmOutput.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def certify_for_marketplace(self):
        """Gets the certify_for_marketplace of this DescribeAlgorithmOutput.


        :return: The certify_for_marketplace of this DescribeAlgorithmOutput.
        :rtype: bool
        """
        return self._certify_for_marketplace

    @certify_for_marketplace.setter
    def certify_for_marketplace(self, certify_for_marketplace):
        """Sets the certify_for_marketplace of this DescribeAlgorithmOutput.


        :param certify_for_marketplace: The certify_for_marketplace of this DescribeAlgorithmOutput.
        :type certify_for_marketplace: bool
        """

        self._certify_for_marketplace = certify_for_marketplace
