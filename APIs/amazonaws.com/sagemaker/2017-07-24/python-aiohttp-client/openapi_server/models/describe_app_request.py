# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_type import AppType
from openapi_server import util


class DescribeAppRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_id: str=None, user_profile_name: str=None, app_type: AppType=None, app_name: str=None, space_name: str=None):
        """DescribeAppRequest - a model defined in OpenAPI

        :param domain_id: The domain_id of this DescribeAppRequest.
        :param user_profile_name: The user_profile_name of this DescribeAppRequest.
        :param app_type: The app_type of this DescribeAppRequest.
        :param app_name: The app_name of this DescribeAppRequest.
        :param space_name: The space_name of this DescribeAppRequest.
        """
        self.openapi_types = {
            'domain_id': str,
            'user_profile_name': str,
            'app_type': AppType,
            'app_name': str,
            'space_name': str
        }

        self.attribute_map = {
            'domain_id': 'DomainId',
            'user_profile_name': 'UserProfileName',
            'app_type': 'AppType',
            'app_name': 'AppName',
            'space_name': 'SpaceName'
        }

        self._domain_id = domain_id
        self._user_profile_name = user_profile_name
        self._app_type = app_type
        self._app_name = app_name
        self._space_name = space_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAppRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAppRequest of this DescribeAppRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_id(self):
        """Gets the domain_id of this DescribeAppRequest.


        :return: The domain_id of this DescribeAppRequest.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this DescribeAppRequest.


        :param domain_id: The domain_id of this DescribeAppRequest.
        :type domain_id: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")

        self._domain_id = domain_id

    @property
    def user_profile_name(self):
        """Gets the user_profile_name of this DescribeAppRequest.


        :return: The user_profile_name of this DescribeAppRequest.
        :rtype: str
        """
        return self._user_profile_name

    @user_profile_name.setter
    def user_profile_name(self, user_profile_name):
        """Sets the user_profile_name of this DescribeAppRequest.


        :param user_profile_name: The user_profile_name of this DescribeAppRequest.
        :type user_profile_name: str
        """

        self._user_profile_name = user_profile_name

    @property
    def app_type(self):
        """Gets the app_type of this DescribeAppRequest.


        :return: The app_type of this DescribeAppRequest.
        :rtype: AppType
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this DescribeAppRequest.


        :param app_type: The app_type of this DescribeAppRequest.
        :type app_type: AppType
        """
        if app_type is None:
            raise ValueError("Invalid value for `app_type`, must not be `None`")

        self._app_type = app_type

    @property
    def app_name(self):
        """Gets the app_name of this DescribeAppRequest.


        :return: The app_name of this DescribeAppRequest.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this DescribeAppRequest.


        :param app_name: The app_name of this DescribeAppRequest.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")

        self._app_name = app_name

    @property
    def space_name(self):
        """Gets the space_name of this DescribeAppRequest.


        :return: The space_name of this DescribeAppRequest.
        :rtype: str
        """
        return self._space_name

    @space_name.setter
    def space_name(self, space_name):
        """Sets the space_name of this DescribeAppRequest.


        :param space_name: The space_name of this DescribeAppRequest.
        :type space_name: str
        """

        self._space_name = space_name
