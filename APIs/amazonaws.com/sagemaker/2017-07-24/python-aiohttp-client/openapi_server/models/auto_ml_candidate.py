# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_ml_candidate_candidate_properties import AutoMLCandidateCandidateProperties
from openapi_server.models.candidate_status import CandidateStatus
from openapi_server.models.final_auto_ml_job_objective_metric import FinalAutoMLJobObjectiveMetric
from openapi_server.models.objective_status import ObjectiveStatus
from openapi_server import util


class AutoMLCandidate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_name: str=None, final_auto_ml_job_objective_metric: FinalAutoMLJobObjectiveMetric=None, objective_status: ObjectiveStatus=None, candidate_steps: List=None, candidate_status: CandidateStatus=None, inference_containers: List=None, creation_time: datetime=None, end_time: datetime=None, last_modified_time: datetime=None, failure_reason: str=None, candidate_properties: AutoMLCandidateCandidateProperties=None, inference_container_definitions: Dict=None):
        """AutoMLCandidate - a model defined in OpenAPI

        :param candidate_name: The candidate_name of this AutoMLCandidate.
        :param final_auto_ml_job_objective_metric: The final_auto_ml_job_objective_metric of this AutoMLCandidate.
        :param objective_status: The objective_status of this AutoMLCandidate.
        :param candidate_steps: The candidate_steps of this AutoMLCandidate.
        :param candidate_status: The candidate_status of this AutoMLCandidate.
        :param inference_containers: The inference_containers of this AutoMLCandidate.
        :param creation_time: The creation_time of this AutoMLCandidate.
        :param end_time: The end_time of this AutoMLCandidate.
        :param last_modified_time: The last_modified_time of this AutoMLCandidate.
        :param failure_reason: The failure_reason of this AutoMLCandidate.
        :param candidate_properties: The candidate_properties of this AutoMLCandidate.
        :param inference_container_definitions: The inference_container_definitions of this AutoMLCandidate.
        """
        self.openapi_types = {
            'candidate_name': str,
            'final_auto_ml_job_objective_metric': FinalAutoMLJobObjectiveMetric,
            'objective_status': ObjectiveStatus,
            'candidate_steps': List,
            'candidate_status': CandidateStatus,
            'inference_containers': List,
            'creation_time': datetime,
            'end_time': datetime,
            'last_modified_time': datetime,
            'failure_reason': str,
            'candidate_properties': AutoMLCandidateCandidateProperties,
            'inference_container_definitions': Dict
        }

        self.attribute_map = {
            'candidate_name': 'CandidateName',
            'final_auto_ml_job_objective_metric': 'FinalAutoMLJobObjectiveMetric',
            'objective_status': 'ObjectiveStatus',
            'candidate_steps': 'CandidateSteps',
            'candidate_status': 'CandidateStatus',
            'inference_containers': 'InferenceContainers',
            'creation_time': 'CreationTime',
            'end_time': 'EndTime',
            'last_modified_time': 'LastModifiedTime',
            'failure_reason': 'FailureReason',
            'candidate_properties': 'CandidateProperties',
            'inference_container_definitions': 'InferenceContainerDefinitions'
        }

        self._candidate_name = candidate_name
        self._final_auto_ml_job_objective_metric = final_auto_ml_job_objective_metric
        self._objective_status = objective_status
        self._candidate_steps = candidate_steps
        self._candidate_status = candidate_status
        self._inference_containers = inference_containers
        self._creation_time = creation_time
        self._end_time = end_time
        self._last_modified_time = last_modified_time
        self._failure_reason = failure_reason
        self._candidate_properties = candidate_properties
        self._inference_container_definitions = inference_container_definitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoMLCandidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoMLCandidate of this AutoMLCandidate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_name(self):
        """Gets the candidate_name of this AutoMLCandidate.


        :return: The candidate_name of this AutoMLCandidate.
        :rtype: str
        """
        return self._candidate_name

    @candidate_name.setter
    def candidate_name(self, candidate_name):
        """Sets the candidate_name of this AutoMLCandidate.


        :param candidate_name: The candidate_name of this AutoMLCandidate.
        :type candidate_name: str
        """
        if candidate_name is None:
            raise ValueError("Invalid value for `candidate_name`, must not be `None`")

        self._candidate_name = candidate_name

    @property
    def final_auto_ml_job_objective_metric(self):
        """Gets the final_auto_ml_job_objective_metric of this AutoMLCandidate.


        :return: The final_auto_ml_job_objective_metric of this AutoMLCandidate.
        :rtype: FinalAutoMLJobObjectiveMetric
        """
        return self._final_auto_ml_job_objective_metric

    @final_auto_ml_job_objective_metric.setter
    def final_auto_ml_job_objective_metric(self, final_auto_ml_job_objective_metric):
        """Sets the final_auto_ml_job_objective_metric of this AutoMLCandidate.


        :param final_auto_ml_job_objective_metric: The final_auto_ml_job_objective_metric of this AutoMLCandidate.
        :type final_auto_ml_job_objective_metric: FinalAutoMLJobObjectiveMetric
        """

        self._final_auto_ml_job_objective_metric = final_auto_ml_job_objective_metric

    @property
    def objective_status(self):
        """Gets the objective_status of this AutoMLCandidate.


        :return: The objective_status of this AutoMLCandidate.
        :rtype: ObjectiveStatus
        """
        return self._objective_status

    @objective_status.setter
    def objective_status(self, objective_status):
        """Sets the objective_status of this AutoMLCandidate.


        :param objective_status: The objective_status of this AutoMLCandidate.
        :type objective_status: ObjectiveStatus
        """
        if objective_status is None:
            raise ValueError("Invalid value for `objective_status`, must not be `None`")

        self._objective_status = objective_status

    @property
    def candidate_steps(self):
        """Gets the candidate_steps of this AutoMLCandidate.


        :return: The candidate_steps of this AutoMLCandidate.
        :rtype: List
        """
        return self._candidate_steps

    @candidate_steps.setter
    def candidate_steps(self, candidate_steps):
        """Sets the candidate_steps of this AutoMLCandidate.


        :param candidate_steps: The candidate_steps of this AutoMLCandidate.
        :type candidate_steps: List
        """
        if candidate_steps is None:
            raise ValueError("Invalid value for `candidate_steps`, must not be `None`")

        self._candidate_steps = candidate_steps

    @property
    def candidate_status(self):
        """Gets the candidate_status of this AutoMLCandidate.


        :return: The candidate_status of this AutoMLCandidate.
        :rtype: CandidateStatus
        """
        return self._candidate_status

    @candidate_status.setter
    def candidate_status(self, candidate_status):
        """Sets the candidate_status of this AutoMLCandidate.


        :param candidate_status: The candidate_status of this AutoMLCandidate.
        :type candidate_status: CandidateStatus
        """
        if candidate_status is None:
            raise ValueError("Invalid value for `candidate_status`, must not be `None`")

        self._candidate_status = candidate_status

    @property
    def inference_containers(self):
        """Gets the inference_containers of this AutoMLCandidate.


        :return: The inference_containers of this AutoMLCandidate.
        :rtype: List
        """
        return self._inference_containers

    @inference_containers.setter
    def inference_containers(self, inference_containers):
        """Sets the inference_containers of this AutoMLCandidate.


        :param inference_containers: The inference_containers of this AutoMLCandidate.
        :type inference_containers: List
        """

        self._inference_containers = inference_containers

    @property
    def creation_time(self):
        """Gets the creation_time of this AutoMLCandidate.


        :return: The creation_time of this AutoMLCandidate.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AutoMLCandidate.


        :param creation_time: The creation_time of this AutoMLCandidate.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def end_time(self):
        """Gets the end_time of this AutoMLCandidate.


        :return: The end_time of this AutoMLCandidate.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AutoMLCandidate.


        :param end_time: The end_time of this AutoMLCandidate.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this AutoMLCandidate.


        :return: The last_modified_time of this AutoMLCandidate.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this AutoMLCandidate.


        :param last_modified_time: The last_modified_time of this AutoMLCandidate.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def failure_reason(self):
        """Gets the failure_reason of this AutoMLCandidate.


        :return: The failure_reason of this AutoMLCandidate.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this AutoMLCandidate.


        :param failure_reason: The failure_reason of this AutoMLCandidate.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def candidate_properties(self):
        """Gets the candidate_properties of this AutoMLCandidate.


        :return: The candidate_properties of this AutoMLCandidate.
        :rtype: AutoMLCandidateCandidateProperties
        """
        return self._candidate_properties

    @candidate_properties.setter
    def candidate_properties(self, candidate_properties):
        """Sets the candidate_properties of this AutoMLCandidate.


        :param candidate_properties: The candidate_properties of this AutoMLCandidate.
        :type candidate_properties: AutoMLCandidateCandidateProperties
        """

        self._candidate_properties = candidate_properties

    @property
    def inference_container_definitions(self):
        """Gets the inference_container_definitions of this AutoMLCandidate.


        :return: The inference_container_definitions of this AutoMLCandidate.
        :rtype: Dict
        """
        return self._inference_container_definitions

    @inference_container_definitions.setter
    def inference_container_definitions(self, inference_container_definitions):
        """Sets the inference_container_definitions of this AutoMLCandidate.


        :param inference_container_definitions: The inference_container_definitions of this AutoMLCandidate.
        :type inference_container_definitions: Dict
        """

        self._inference_container_definitions = inference_container_definitions
