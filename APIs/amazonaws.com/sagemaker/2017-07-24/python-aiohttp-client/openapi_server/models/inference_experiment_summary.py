# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inference_experiment_status import InferenceExperimentStatus
from openapi_server.models.inference_experiment_summary_schedule import InferenceExperimentSummarySchedule
from openapi_server.models.inference_experiment_type import InferenceExperimentType
from openapi_server import util


class InferenceExperimentSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: InferenceExperimentType=None, schedule: InferenceExperimentSummarySchedule=None, status: InferenceExperimentStatus=None, status_reason: str=None, description: str=None, creation_time: datetime=None, completion_time: datetime=None, last_modified_time: datetime=None, role_arn: str=None):
        """InferenceExperimentSummary - a model defined in OpenAPI

        :param name: The name of this InferenceExperimentSummary.
        :param type: The type of this InferenceExperimentSummary.
        :param schedule: The schedule of this InferenceExperimentSummary.
        :param status: The status of this InferenceExperimentSummary.
        :param status_reason: The status_reason of this InferenceExperimentSummary.
        :param description: The description of this InferenceExperimentSummary.
        :param creation_time: The creation_time of this InferenceExperimentSummary.
        :param completion_time: The completion_time of this InferenceExperimentSummary.
        :param last_modified_time: The last_modified_time of this InferenceExperimentSummary.
        :param role_arn: The role_arn of this InferenceExperimentSummary.
        """
        self.openapi_types = {
            'name': str,
            'type': InferenceExperimentType,
            'schedule': InferenceExperimentSummarySchedule,
            'status': InferenceExperimentStatus,
            'status_reason': str,
            'description': str,
            'creation_time': datetime,
            'completion_time': datetime,
            'last_modified_time': datetime,
            'role_arn': str
        }

        self.attribute_map = {
            'name': 'Name',
            'type': 'Type',
            'schedule': 'Schedule',
            'status': 'Status',
            'status_reason': 'StatusReason',
            'description': 'Description',
            'creation_time': 'CreationTime',
            'completion_time': 'CompletionTime',
            'last_modified_time': 'LastModifiedTime',
            'role_arn': 'RoleArn'
        }

        self._name = name
        self._type = type
        self._schedule = schedule
        self._status = status
        self._status_reason = status_reason
        self._description = description
        self._creation_time = creation_time
        self._completion_time = completion_time
        self._last_modified_time = last_modified_time
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InferenceExperimentSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InferenceExperimentSummary of this InferenceExperimentSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this InferenceExperimentSummary.


        :return: The name of this InferenceExperimentSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InferenceExperimentSummary.


        :param name: The name of this InferenceExperimentSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this InferenceExperimentSummary.


        :return: The type of this InferenceExperimentSummary.
        :rtype: InferenceExperimentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InferenceExperimentSummary.


        :param type: The type of this InferenceExperimentSummary.
        :type type: InferenceExperimentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def schedule(self):
        """Gets the schedule of this InferenceExperimentSummary.


        :return: The schedule of this InferenceExperimentSummary.
        :rtype: InferenceExperimentSummarySchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this InferenceExperimentSummary.


        :param schedule: The schedule of this InferenceExperimentSummary.
        :type schedule: InferenceExperimentSummarySchedule
        """

        self._schedule = schedule

    @property
    def status(self):
        """Gets the status of this InferenceExperimentSummary.


        :return: The status of this InferenceExperimentSummary.
        :rtype: InferenceExperimentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InferenceExperimentSummary.


        :param status: The status of this InferenceExperimentSummary.
        :type status: InferenceExperimentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this InferenceExperimentSummary.


        :return: The status_reason of this InferenceExperimentSummary.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this InferenceExperimentSummary.


        :param status_reason: The status_reason of this InferenceExperimentSummary.
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def description(self):
        """Gets the description of this InferenceExperimentSummary.


        :return: The description of this InferenceExperimentSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InferenceExperimentSummary.


        :param description: The description of this InferenceExperimentSummary.
        :type description: str
        """

        self._description = description

    @property
    def creation_time(self):
        """Gets the creation_time of this InferenceExperimentSummary.


        :return: The creation_time of this InferenceExperimentSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this InferenceExperimentSummary.


        :param creation_time: The creation_time of this InferenceExperimentSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def completion_time(self):
        """Gets the completion_time of this InferenceExperimentSummary.


        :return: The completion_time of this InferenceExperimentSummary.
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this InferenceExperimentSummary.


        :param completion_time: The completion_time of this InferenceExperimentSummary.
        :type completion_time: datetime
        """

        self._completion_time = completion_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this InferenceExperimentSummary.


        :return: The last_modified_time of this InferenceExperimentSummary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this InferenceExperimentSummary.


        :param last_modified_time: The last_modified_time of this InferenceExperimentSummary.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def role_arn(self):
        """Gets the role_arn of this InferenceExperimentSummary.


        :return: The role_arn of this InferenceExperimentSummary.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this InferenceExperimentSummary.


        :param role_arn: The role_arn of this InferenceExperimentSummary.
        :type role_arn: str
        """

        self._role_arn = role_arn
