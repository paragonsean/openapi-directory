# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offline_store_status_value import OfflineStoreStatusValue
from openapi_server import util


class DescribeFeatureGroupResponseOfflineStoreStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: OfflineStoreStatusValue=None, blocked_reason: str=None):
        """DescribeFeatureGroupResponseOfflineStoreStatus - a model defined in OpenAPI

        :param status: The status of this DescribeFeatureGroupResponseOfflineStoreStatus.
        :param blocked_reason: The blocked_reason of this DescribeFeatureGroupResponseOfflineStoreStatus.
        """
        self.openapi_types = {
            'status': OfflineStoreStatusValue,
            'blocked_reason': str
        }

        self.attribute_map = {
            'status': 'Status',
            'blocked_reason': 'BlockedReason'
        }

        self._status = status
        self._blocked_reason = blocked_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeFeatureGroupResponseOfflineStoreStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeFeatureGroupResponse_OfflineStoreStatus of this DescribeFeatureGroupResponseOfflineStoreStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this DescribeFeatureGroupResponseOfflineStoreStatus.


        :return: The status of this DescribeFeatureGroupResponseOfflineStoreStatus.
        :rtype: OfflineStoreStatusValue
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeFeatureGroupResponseOfflineStoreStatus.


        :param status: The status of this DescribeFeatureGroupResponseOfflineStoreStatus.
        :type status: OfflineStoreStatusValue
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def blocked_reason(self):
        """Gets the blocked_reason of this DescribeFeatureGroupResponseOfflineStoreStatus.


        :return: The blocked_reason of this DescribeFeatureGroupResponseOfflineStoreStatus.
        :rtype: str
        """
        return self._blocked_reason

    @blocked_reason.setter
    def blocked_reason(self, blocked_reason):
        """Sets the blocked_reason of this DescribeFeatureGroupResponseOfflineStoreStatus.


        :param blocked_reason: The blocked_reason of this DescribeFeatureGroupResponseOfflineStoreStatus.
        :type blocked_reason: str
        """

        self._blocked_reason = blocked_reason
