# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.variant_status import VariantStatus
from openapi_server import util


class ProductionVariantStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: VariantStatus=None, status_message: str=None, start_time: datetime=None):
        """ProductionVariantStatus - a model defined in OpenAPI

        :param status: The status of this ProductionVariantStatus.
        :param status_message: The status_message of this ProductionVariantStatus.
        :param start_time: The start_time of this ProductionVariantStatus.
        """
        self.openapi_types = {
            'status': VariantStatus,
            'status_message': str,
            'start_time': datetime
        }

        self.attribute_map = {
            'status': 'Status',
            'status_message': 'StatusMessage',
            'start_time': 'StartTime'
        }

        self._status = status
        self._status_message = status_message
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductionVariantStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductionVariantStatus of this ProductionVariantStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this ProductionVariantStatus.


        :return: The status of this ProductionVariantStatus.
        :rtype: VariantStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductionVariantStatus.


        :param status: The status of this ProductionVariantStatus.
        :type status: VariantStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this ProductionVariantStatus.


        :return: The status_message of this ProductionVariantStatus.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ProductionVariantStatus.


        :param status_message: The status_message of this ProductionVariantStatus.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def start_time(self):
        """Gets the start_time of this ProductionVariantStatus.


        :return: The start_time of this ProductionVariantStatus.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ProductionVariantStatus.


        :param start_time: The start_time of this ProductionVariantStatus.
        :type start_time: datetime
        """

        self._start_time = start_time
