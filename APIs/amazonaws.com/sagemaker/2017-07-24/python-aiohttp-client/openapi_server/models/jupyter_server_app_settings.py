# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jupyter_server_app_settings_default_resource_spec import JupyterServerAppSettingsDefaultResourceSpec
from openapi_server import util


class JupyterServerAppSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_resource_spec: JupyterServerAppSettingsDefaultResourceSpec=None, lifecycle_config_arns: List=None, code_repositories: List=None):
        """JupyterServerAppSettings - a model defined in OpenAPI

        :param default_resource_spec: The default_resource_spec of this JupyterServerAppSettings.
        :param lifecycle_config_arns: The lifecycle_config_arns of this JupyterServerAppSettings.
        :param code_repositories: The code_repositories of this JupyterServerAppSettings.
        """
        self.openapi_types = {
            'default_resource_spec': JupyterServerAppSettingsDefaultResourceSpec,
            'lifecycle_config_arns': List,
            'code_repositories': List
        }

        self.attribute_map = {
            'default_resource_spec': 'DefaultResourceSpec',
            'lifecycle_config_arns': 'LifecycleConfigArns',
            'code_repositories': 'CodeRepositories'
        }

        self._default_resource_spec = default_resource_spec
        self._lifecycle_config_arns = lifecycle_config_arns
        self._code_repositories = code_repositories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JupyterServerAppSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JupyterServerAppSettings of this JupyterServerAppSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_resource_spec(self):
        """Gets the default_resource_spec of this JupyterServerAppSettings.


        :return: The default_resource_spec of this JupyterServerAppSettings.
        :rtype: JupyterServerAppSettingsDefaultResourceSpec
        """
        return self._default_resource_spec

    @default_resource_spec.setter
    def default_resource_spec(self, default_resource_spec):
        """Sets the default_resource_spec of this JupyterServerAppSettings.


        :param default_resource_spec: The default_resource_spec of this JupyterServerAppSettings.
        :type default_resource_spec: JupyterServerAppSettingsDefaultResourceSpec
        """

        self._default_resource_spec = default_resource_spec

    @property
    def lifecycle_config_arns(self):
        """Gets the lifecycle_config_arns of this JupyterServerAppSettings.


        :return: The lifecycle_config_arns of this JupyterServerAppSettings.
        :rtype: List
        """
        return self._lifecycle_config_arns

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, lifecycle_config_arns):
        """Sets the lifecycle_config_arns of this JupyterServerAppSettings.


        :param lifecycle_config_arns: The lifecycle_config_arns of this JupyterServerAppSettings.
        :type lifecycle_config_arns: List
        """

        self._lifecycle_config_arns = lifecycle_config_arns

    @property
    def code_repositories(self):
        """Gets the code_repositories of this JupyterServerAppSettings.


        :return: The code_repositories of this JupyterServerAppSettings.
        :rtype: List
        """
        return self._code_repositories

    @code_repositories.setter
    def code_repositories(self, code_repositories):
        """Sets the code_repositories of this JupyterServerAppSettings.


        :param code_repositories: The code_repositories of this JupyterServerAppSettings.
        :type code_repositories: List
        """

        self._code_repositories = code_repositories
