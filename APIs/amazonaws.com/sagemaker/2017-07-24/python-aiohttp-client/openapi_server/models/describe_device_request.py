# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, device_name: str=None, device_fleet_name: str=None):
        """DescribeDeviceRequest - a model defined in OpenAPI

        :param next_token: The next_token of this DescribeDeviceRequest.
        :param device_name: The device_name of this DescribeDeviceRequest.
        :param device_fleet_name: The device_fleet_name of this DescribeDeviceRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'device_name': str,
            'device_fleet_name': str
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'device_name': 'DeviceName',
            'device_fleet_name': 'DeviceFleetName'
        }

        self._next_token = next_token
        self._device_name = device_name
        self._device_fleet_name = device_fleet_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDeviceRequest of this DescribeDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this DescribeDeviceRequest.


        :return: The next_token of this DescribeDeviceRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeDeviceRequest.


        :param next_token: The next_token of this DescribeDeviceRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def device_name(self):
        """Gets the device_name of this DescribeDeviceRequest.


        :return: The device_name of this DescribeDeviceRequest.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DescribeDeviceRequest.


        :param device_name: The device_name of this DescribeDeviceRequest.
        :type device_name: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")

        self._device_name = device_name

    @property
    def device_fleet_name(self):
        """Gets the device_fleet_name of this DescribeDeviceRequest.


        :return: The device_fleet_name of this DescribeDeviceRequest.
        :rtype: str
        """
        return self._device_fleet_name

    @device_fleet_name.setter
    def device_fleet_name(self, device_fleet_name):
        """Sets the device_fleet_name of this DescribeDeviceRequest.


        :param device_fleet_name: The device_fleet_name of this DescribeDeviceRequest.
        :type device_fleet_name: str
        """
        if device_fleet_name is None:
            raise ValueError("Invalid value for `device_fleet_name`, must not be `None`")

        self._device_fleet_name = device_fleet_name
