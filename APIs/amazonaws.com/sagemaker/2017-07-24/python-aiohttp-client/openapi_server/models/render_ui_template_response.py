# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RenderUiTemplateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rendered_content: str=None, errors: List=None):
        """RenderUiTemplateResponse - a model defined in OpenAPI

        :param rendered_content: The rendered_content of this RenderUiTemplateResponse.
        :param errors: The errors of this RenderUiTemplateResponse.
        """
        self.openapi_types = {
            'rendered_content': str,
            'errors': List
        }

        self.attribute_map = {
            'rendered_content': 'RenderedContent',
            'errors': 'Errors'
        }

        self._rendered_content = rendered_content
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenderUiTemplateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenderUiTemplateResponse of this RenderUiTemplateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rendered_content(self):
        """Gets the rendered_content of this RenderUiTemplateResponse.


        :return: The rendered_content of this RenderUiTemplateResponse.
        :rtype: str
        """
        return self._rendered_content

    @rendered_content.setter
    def rendered_content(self, rendered_content):
        """Sets the rendered_content of this RenderUiTemplateResponse.


        :param rendered_content: The rendered_content of this RenderUiTemplateResponse.
        :type rendered_content: str
        """
        if rendered_content is None:
            raise ValueError("Invalid value for `rendered_content`, must not be `None`")

        self._rendered_content = rendered_content

    @property
    def errors(self):
        """Gets the errors of this RenderUiTemplateResponse.


        :return: The errors of this RenderUiTemplateResponse.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this RenderUiTemplateResponse.


        :param errors: The errors of this RenderUiTemplateResponse.
        :type errors: List
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors
