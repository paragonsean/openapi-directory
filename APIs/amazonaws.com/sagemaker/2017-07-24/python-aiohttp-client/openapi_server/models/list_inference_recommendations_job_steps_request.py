# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_job_status import RecommendationJobStatus
from openapi_server.models.recommendation_step_type import RecommendationStepType
from openapi_server import util


class ListInferenceRecommendationsJobStepsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_name: str=None, status: RecommendationJobStatus=None, step_type: RecommendationStepType=None, max_results: int=None, next_token: str=None):
        """ListInferenceRecommendationsJobStepsRequest - a model defined in OpenAPI

        :param job_name: The job_name of this ListInferenceRecommendationsJobStepsRequest.
        :param status: The status of this ListInferenceRecommendationsJobStepsRequest.
        :param step_type: The step_type of this ListInferenceRecommendationsJobStepsRequest.
        :param max_results: The max_results of this ListInferenceRecommendationsJobStepsRequest.
        :param next_token: The next_token of this ListInferenceRecommendationsJobStepsRequest.
        """
        self.openapi_types = {
            'job_name': str,
            'status': RecommendationJobStatus,
            'step_type': RecommendationStepType,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'job_name': 'JobName',
            'status': 'Status',
            'step_type': 'StepType',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._job_name = job_name
        self._status = status
        self._step_type = step_type
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListInferenceRecommendationsJobStepsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListInferenceRecommendationsJobStepsRequest of this ListInferenceRecommendationsJobStepsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_name(self):
        """Gets the job_name of this ListInferenceRecommendationsJobStepsRequest.


        :return: The job_name of this ListInferenceRecommendationsJobStepsRequest.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this ListInferenceRecommendationsJobStepsRequest.


        :param job_name: The job_name of this ListInferenceRecommendationsJobStepsRequest.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")

        self._job_name = job_name

    @property
    def status(self):
        """Gets the status of this ListInferenceRecommendationsJobStepsRequest.


        :return: The status of this ListInferenceRecommendationsJobStepsRequest.
        :rtype: RecommendationJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListInferenceRecommendationsJobStepsRequest.


        :param status: The status of this ListInferenceRecommendationsJobStepsRequest.
        :type status: RecommendationJobStatus
        """

        self._status = status

    @property
    def step_type(self):
        """Gets the step_type of this ListInferenceRecommendationsJobStepsRequest.


        :return: The step_type of this ListInferenceRecommendationsJobStepsRequest.
        :rtype: RecommendationStepType
        """
        return self._step_type

    @step_type.setter
    def step_type(self, step_type):
        """Sets the step_type of this ListInferenceRecommendationsJobStepsRequest.


        :param step_type: The step_type of this ListInferenceRecommendationsJobStepsRequest.
        :type step_type: RecommendationStepType
        """

        self._step_type = step_type

    @property
    def max_results(self):
        """Gets the max_results of this ListInferenceRecommendationsJobStepsRequest.


        :return: The max_results of this ListInferenceRecommendationsJobStepsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListInferenceRecommendationsJobStepsRequest.


        :param max_results: The max_results of this ListInferenceRecommendationsJobStepsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListInferenceRecommendationsJobStepsRequest.


        :return: The next_token of this ListInferenceRecommendationsJobStepsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListInferenceRecommendationsJobStepsRequest.


        :param next_token: The next_token of this ListInferenceRecommendationsJobStepsRequest.
        :type next_token: str
        """

        self._next_token = next_token
