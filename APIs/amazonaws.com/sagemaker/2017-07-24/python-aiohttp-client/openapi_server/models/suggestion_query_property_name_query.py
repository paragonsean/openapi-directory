# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuggestionQueryPropertyNameQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, property_name_hint: str=None):
        """SuggestionQueryPropertyNameQuery - a model defined in OpenAPI

        :param property_name_hint: The property_name_hint of this SuggestionQueryPropertyNameQuery.
        """
        self.openapi_types = {
            'property_name_hint': str
        }

        self.attribute_map = {
            'property_name_hint': 'PropertyNameHint'
        }

        self._property_name_hint = property_name_hint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuggestionQueryPropertyNameQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuggestionQuery_PropertyNameQuery of this SuggestionQueryPropertyNameQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def property_name_hint(self):
        """Gets the property_name_hint of this SuggestionQueryPropertyNameQuery.


        :return: The property_name_hint of this SuggestionQueryPropertyNameQuery.
        :rtype: str
        """
        return self._property_name_hint

    @property_name_hint.setter
    def property_name_hint(self, property_name_hint):
        """Sets the property_name_hint of this SuggestionQueryPropertyNameQuery.


        :param property_name_hint: The property_name_hint of this SuggestionQueryPropertyNameQuery.
        :type property_name_hint: str
        """
        if property_name_hint is None:
            raise ValueError("Invalid value for `property_name_hint`, must not be `None`")

        self._property_name_hint = property_name_hint
