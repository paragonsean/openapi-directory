# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_status import ProjectStatus
from openapi_server import util


class ProjectSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_name: str=None, project_description: str=None, project_arn: str=None, project_id: str=None, creation_time: datetime=None, project_status: ProjectStatus=None):
        """ProjectSummary - a model defined in OpenAPI

        :param project_name: The project_name of this ProjectSummary.
        :param project_description: The project_description of this ProjectSummary.
        :param project_arn: The project_arn of this ProjectSummary.
        :param project_id: The project_id of this ProjectSummary.
        :param creation_time: The creation_time of this ProjectSummary.
        :param project_status: The project_status of this ProjectSummary.
        """
        self.openapi_types = {
            'project_name': str,
            'project_description': str,
            'project_arn': str,
            'project_id': str,
            'creation_time': datetime,
            'project_status': ProjectStatus
        }

        self.attribute_map = {
            'project_name': 'ProjectName',
            'project_description': 'ProjectDescription',
            'project_arn': 'ProjectArn',
            'project_id': 'ProjectId',
            'creation_time': 'CreationTime',
            'project_status': 'ProjectStatus'
        }

        self._project_name = project_name
        self._project_description = project_description
        self._project_arn = project_arn
        self._project_id = project_id
        self._creation_time = creation_time
        self._project_status = project_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectSummary of this ProjectSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_name(self):
        """Gets the project_name of this ProjectSummary.


        :return: The project_name of this ProjectSummary.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ProjectSummary.


        :param project_name: The project_name of this ProjectSummary.
        :type project_name: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")

        self._project_name = project_name

    @property
    def project_description(self):
        """Gets the project_description of this ProjectSummary.


        :return: The project_description of this ProjectSummary.
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """Sets the project_description of this ProjectSummary.


        :param project_description: The project_description of this ProjectSummary.
        :type project_description: str
        """

        self._project_description = project_description

    @property
    def project_arn(self):
        """Gets the project_arn of this ProjectSummary.


        :return: The project_arn of this ProjectSummary.
        :rtype: str
        """
        return self._project_arn

    @project_arn.setter
    def project_arn(self, project_arn):
        """Sets the project_arn of this ProjectSummary.


        :param project_arn: The project_arn of this ProjectSummary.
        :type project_arn: str
        """
        if project_arn is None:
            raise ValueError("Invalid value for `project_arn`, must not be `None`")

        self._project_arn = project_arn

    @property
    def project_id(self):
        """Gets the project_id of this ProjectSummary.


        :return: The project_id of this ProjectSummary.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectSummary.


        :param project_id: The project_id of this ProjectSummary.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def creation_time(self):
        """Gets the creation_time of this ProjectSummary.


        :return: The creation_time of this ProjectSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ProjectSummary.


        :param creation_time: The creation_time of this ProjectSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def project_status(self):
        """Gets the project_status of this ProjectSummary.


        :return: The project_status of this ProjectSummary.
        :rtype: ProjectStatus
        """
        return self._project_status

    @project_status.setter
    def project_status(self, project_status):
        """Sets the project_status of this ProjectSummary.


        :param project_status: The project_status of this ProjectSummary.
        :type project_status: ProjectStatus
        """
        if project_status is None:
            raise ValueError("Invalid value for `project_status`, must not be `None`")

        self._project_status = project_status
