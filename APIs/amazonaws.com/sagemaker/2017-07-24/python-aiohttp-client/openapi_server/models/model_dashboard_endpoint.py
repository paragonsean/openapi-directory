# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_status import EndpointStatus
from openapi_server import util


class ModelDashboardEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_name: str=None, endpoint_arn: str=None, creation_time: datetime=None, last_modified_time: datetime=None, endpoint_status: EndpointStatus=None):
        """ModelDashboardEndpoint - a model defined in OpenAPI

        :param endpoint_name: The endpoint_name of this ModelDashboardEndpoint.
        :param endpoint_arn: The endpoint_arn of this ModelDashboardEndpoint.
        :param creation_time: The creation_time of this ModelDashboardEndpoint.
        :param last_modified_time: The last_modified_time of this ModelDashboardEndpoint.
        :param endpoint_status: The endpoint_status of this ModelDashboardEndpoint.
        """
        self.openapi_types = {
            'endpoint_name': str,
            'endpoint_arn': str,
            'creation_time': datetime,
            'last_modified_time': datetime,
            'endpoint_status': EndpointStatus
        }

        self.attribute_map = {
            'endpoint_name': 'EndpointName',
            'endpoint_arn': 'EndpointArn',
            'creation_time': 'CreationTime',
            'last_modified_time': 'LastModifiedTime',
            'endpoint_status': 'EndpointStatus'
        }

        self._endpoint_name = endpoint_name
        self._endpoint_arn = endpoint_arn
        self._creation_time = creation_time
        self._last_modified_time = last_modified_time
        self._endpoint_status = endpoint_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelDashboardEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelDashboardEndpoint of this ModelDashboardEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this ModelDashboardEndpoint.


        :return: The endpoint_name of this ModelDashboardEndpoint.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this ModelDashboardEndpoint.


        :param endpoint_name: The endpoint_name of this ModelDashboardEndpoint.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def endpoint_arn(self):
        """Gets the endpoint_arn of this ModelDashboardEndpoint.


        :return: The endpoint_arn of this ModelDashboardEndpoint.
        :rtype: str
        """
        return self._endpoint_arn

    @endpoint_arn.setter
    def endpoint_arn(self, endpoint_arn):
        """Sets the endpoint_arn of this ModelDashboardEndpoint.


        :param endpoint_arn: The endpoint_arn of this ModelDashboardEndpoint.
        :type endpoint_arn: str
        """
        if endpoint_arn is None:
            raise ValueError("Invalid value for `endpoint_arn`, must not be `None`")

        self._endpoint_arn = endpoint_arn

    @property
    def creation_time(self):
        """Gets the creation_time of this ModelDashboardEndpoint.


        :return: The creation_time of this ModelDashboardEndpoint.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ModelDashboardEndpoint.


        :param creation_time: The creation_time of this ModelDashboardEndpoint.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ModelDashboardEndpoint.


        :return: The last_modified_time of this ModelDashboardEndpoint.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ModelDashboardEndpoint.


        :param last_modified_time: The last_modified_time of this ModelDashboardEndpoint.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def endpoint_status(self):
        """Gets the endpoint_status of this ModelDashboardEndpoint.


        :return: The endpoint_status of this ModelDashboardEndpoint.
        :rtype: EndpointStatus
        """
        return self._endpoint_status

    @endpoint_status.setter
    def endpoint_status(self, endpoint_status):
        """Sets the endpoint_status of this ModelDashboardEndpoint.


        :param endpoint_status: The endpoint_status of this ModelDashboardEndpoint.
        :type endpoint_status: EndpointStatus
        """
        if endpoint_status is None:
            raise ValueError("Invalid value for `endpoint_status`, must not be `None`")

        self._endpoint_status = endpoint_status
