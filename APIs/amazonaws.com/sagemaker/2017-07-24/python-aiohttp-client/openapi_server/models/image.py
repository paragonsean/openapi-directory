# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_status import ImageStatus
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, description: str=None, display_name: str=None, failure_reason: str=None, image_arn: str=None, image_name: str=None, image_status: ImageStatus=None, last_modified_time: datetime=None):
        """Image - a model defined in OpenAPI

        :param creation_time: The creation_time of this Image.
        :param description: The description of this Image.
        :param display_name: The display_name of this Image.
        :param failure_reason: The failure_reason of this Image.
        :param image_arn: The image_arn of this Image.
        :param image_name: The image_name of this Image.
        :param image_status: The image_status of this Image.
        :param last_modified_time: The last_modified_time of this Image.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'description': str,
            'display_name': str,
            'failure_reason': str,
            'image_arn': str,
            'image_name': str,
            'image_status': ImageStatus,
            'last_modified_time': datetime
        }

        self.attribute_map = {
            'creation_time': 'CreationTime',
            'description': 'Description',
            'display_name': 'DisplayName',
            'failure_reason': 'FailureReason',
            'image_arn': 'ImageArn',
            'image_name': 'ImageName',
            'image_status': 'ImageStatus',
            'last_modified_time': 'LastModifiedTime'
        }

        self._creation_time = creation_time
        self._description = description
        self._display_name = display_name
        self._failure_reason = failure_reason
        self._image_arn = image_arn
        self._image_name = image_name
        self._image_status = image_status
        self._last_modified_time = last_modified_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this Image.


        :return: The creation_time of this Image.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Image.


        :param creation_time: The creation_time of this Image.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this Image.


        :return: The description of this Image.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Image.


        :param description: The description of this Image.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Image.


        :return: The display_name of this Image.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Image.


        :param display_name: The display_name of this Image.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def failure_reason(self):
        """Gets the failure_reason of this Image.


        :return: The failure_reason of this Image.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this Image.


        :param failure_reason: The failure_reason of this Image.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def image_arn(self):
        """Gets the image_arn of this Image.


        :return: The image_arn of this Image.
        :rtype: str
        """
        return self._image_arn

    @image_arn.setter
    def image_arn(self, image_arn):
        """Sets the image_arn of this Image.


        :param image_arn: The image_arn of this Image.
        :type image_arn: str
        """
        if image_arn is None:
            raise ValueError("Invalid value for `image_arn`, must not be `None`")

        self._image_arn = image_arn

    @property
    def image_name(self):
        """Gets the image_name of this Image.


        :return: The image_name of this Image.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this Image.


        :param image_name: The image_name of this Image.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")

        self._image_name = image_name

    @property
    def image_status(self):
        """Gets the image_status of this Image.


        :return: The image_status of this Image.
        :rtype: ImageStatus
        """
        return self._image_status

    @image_status.setter
    def image_status(self, image_status):
        """Sets the image_status of this Image.


        :param image_status: The image_status of this Image.
        :type image_status: ImageStatus
        """
        if image_status is None:
            raise ValueError("Invalid value for `image_status`, must not be `None`")

        self._image_status = image_status

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this Image.


        :return: The last_modified_time of this Image.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this Image.


        :param last_modified_time: The last_modified_time of this Image.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time
