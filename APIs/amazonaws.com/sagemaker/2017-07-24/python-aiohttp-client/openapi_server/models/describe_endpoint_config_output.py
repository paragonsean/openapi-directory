# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_capture_config import DataCaptureConfig
from openapi_server.models.describe_endpoint_output_async_inference_config import DescribeEndpointOutputAsyncInferenceConfig
from openapi_server.models.describe_endpoint_output_explainer_config import DescribeEndpointOutputExplainerConfig
from openapi_server import util


class DescribeEndpointConfigOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_config_name: str=None, endpoint_config_arn: str=None, production_variants: List=None, data_capture_config: DataCaptureConfig=None, kms_key_id: str=None, creation_time: datetime=None, async_inference_config: DescribeEndpointOutputAsyncInferenceConfig=None, explainer_config: DescribeEndpointOutputExplainerConfig=None, shadow_production_variants: List=None):
        """DescribeEndpointConfigOutput - a model defined in OpenAPI

        :param endpoint_config_name: The endpoint_config_name of this DescribeEndpointConfigOutput.
        :param endpoint_config_arn: The endpoint_config_arn of this DescribeEndpointConfigOutput.
        :param production_variants: The production_variants of this DescribeEndpointConfigOutput.
        :param data_capture_config: The data_capture_config of this DescribeEndpointConfigOutput.
        :param kms_key_id: The kms_key_id of this DescribeEndpointConfigOutput.
        :param creation_time: The creation_time of this DescribeEndpointConfigOutput.
        :param async_inference_config: The async_inference_config of this DescribeEndpointConfigOutput.
        :param explainer_config: The explainer_config of this DescribeEndpointConfigOutput.
        :param shadow_production_variants: The shadow_production_variants of this DescribeEndpointConfigOutput.
        """
        self.openapi_types = {
            'endpoint_config_name': str,
            'endpoint_config_arn': str,
            'production_variants': List,
            'data_capture_config': DataCaptureConfig,
            'kms_key_id': str,
            'creation_time': datetime,
            'async_inference_config': DescribeEndpointOutputAsyncInferenceConfig,
            'explainer_config': DescribeEndpointOutputExplainerConfig,
            'shadow_production_variants': List
        }

        self.attribute_map = {
            'endpoint_config_name': 'EndpointConfigName',
            'endpoint_config_arn': 'EndpointConfigArn',
            'production_variants': 'ProductionVariants',
            'data_capture_config': 'DataCaptureConfig',
            'kms_key_id': 'KmsKeyId',
            'creation_time': 'CreationTime',
            'async_inference_config': 'AsyncInferenceConfig',
            'explainer_config': 'ExplainerConfig',
            'shadow_production_variants': 'ShadowProductionVariants'
        }

        self._endpoint_config_name = endpoint_config_name
        self._endpoint_config_arn = endpoint_config_arn
        self._production_variants = production_variants
        self._data_capture_config = data_capture_config
        self._kms_key_id = kms_key_id
        self._creation_time = creation_time
        self._async_inference_config = async_inference_config
        self._explainer_config = explainer_config
        self._shadow_production_variants = shadow_production_variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeEndpointConfigOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeEndpointConfigOutput of this DescribeEndpointConfigOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_config_name(self):
        """Gets the endpoint_config_name of this DescribeEndpointConfigOutput.


        :return: The endpoint_config_name of this DescribeEndpointConfigOutput.
        :rtype: str
        """
        return self._endpoint_config_name

    @endpoint_config_name.setter
    def endpoint_config_name(self, endpoint_config_name):
        """Sets the endpoint_config_name of this DescribeEndpointConfigOutput.


        :param endpoint_config_name: The endpoint_config_name of this DescribeEndpointConfigOutput.
        :type endpoint_config_name: str
        """
        if endpoint_config_name is None:
            raise ValueError("Invalid value for `endpoint_config_name`, must not be `None`")

        self._endpoint_config_name = endpoint_config_name

    @property
    def endpoint_config_arn(self):
        """Gets the endpoint_config_arn of this DescribeEndpointConfigOutput.


        :return: The endpoint_config_arn of this DescribeEndpointConfigOutput.
        :rtype: str
        """
        return self._endpoint_config_arn

    @endpoint_config_arn.setter
    def endpoint_config_arn(self, endpoint_config_arn):
        """Sets the endpoint_config_arn of this DescribeEndpointConfigOutput.


        :param endpoint_config_arn: The endpoint_config_arn of this DescribeEndpointConfigOutput.
        :type endpoint_config_arn: str
        """
        if endpoint_config_arn is None:
            raise ValueError("Invalid value for `endpoint_config_arn`, must not be `None`")

        self._endpoint_config_arn = endpoint_config_arn

    @property
    def production_variants(self):
        """Gets the production_variants of this DescribeEndpointConfigOutput.


        :return: The production_variants of this DescribeEndpointConfigOutput.
        :rtype: List
        """
        return self._production_variants

    @production_variants.setter
    def production_variants(self, production_variants):
        """Sets the production_variants of this DescribeEndpointConfigOutput.


        :param production_variants: The production_variants of this DescribeEndpointConfigOutput.
        :type production_variants: List
        """
        if production_variants is None:
            raise ValueError("Invalid value for `production_variants`, must not be `None`")

        self._production_variants = production_variants

    @property
    def data_capture_config(self):
        """Gets the data_capture_config of this DescribeEndpointConfigOutput.


        :return: The data_capture_config of this DescribeEndpointConfigOutput.
        :rtype: DataCaptureConfig
        """
        return self._data_capture_config

    @data_capture_config.setter
    def data_capture_config(self, data_capture_config):
        """Sets the data_capture_config of this DescribeEndpointConfigOutput.


        :param data_capture_config: The data_capture_config of this DescribeEndpointConfigOutput.
        :type data_capture_config: DataCaptureConfig
        """

        self._data_capture_config = data_capture_config

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this DescribeEndpointConfigOutput.


        :return: The kms_key_id of this DescribeEndpointConfigOutput.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this DescribeEndpointConfigOutput.


        :param kms_key_id: The kms_key_id of this DescribeEndpointConfigOutput.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def creation_time(self):
        """Gets the creation_time of this DescribeEndpointConfigOutput.


        :return: The creation_time of this DescribeEndpointConfigOutput.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DescribeEndpointConfigOutput.


        :param creation_time: The creation_time of this DescribeEndpointConfigOutput.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def async_inference_config(self):
        """Gets the async_inference_config of this DescribeEndpointConfigOutput.


        :return: The async_inference_config of this DescribeEndpointConfigOutput.
        :rtype: DescribeEndpointOutputAsyncInferenceConfig
        """
        return self._async_inference_config

    @async_inference_config.setter
    def async_inference_config(self, async_inference_config):
        """Sets the async_inference_config of this DescribeEndpointConfigOutput.


        :param async_inference_config: The async_inference_config of this DescribeEndpointConfigOutput.
        :type async_inference_config: DescribeEndpointOutputAsyncInferenceConfig
        """

        self._async_inference_config = async_inference_config

    @property
    def explainer_config(self):
        """Gets the explainer_config of this DescribeEndpointConfigOutput.


        :return: The explainer_config of this DescribeEndpointConfigOutput.
        :rtype: DescribeEndpointOutputExplainerConfig
        """
        return self._explainer_config

    @explainer_config.setter
    def explainer_config(self, explainer_config):
        """Sets the explainer_config of this DescribeEndpointConfigOutput.


        :param explainer_config: The explainer_config of this DescribeEndpointConfigOutput.
        :type explainer_config: DescribeEndpointOutputExplainerConfig
        """

        self._explainer_config = explainer_config

    @property
    def shadow_production_variants(self):
        """Gets the shadow_production_variants of this DescribeEndpointConfigOutput.


        :return: The shadow_production_variants of this DescribeEndpointConfigOutput.
        :rtype: List
        """
        return self._shadow_production_variants

    @shadow_production_variants.setter
    def shadow_production_variants(self, shadow_production_variants):
        """Sets the shadow_production_variants of this DescribeEndpointConfigOutput.


        :param shadow_production_variants: The shadow_production_variants of this DescribeEndpointConfigOutput.
        :type shadow_production_variants: List
        """

        self._shadow_production_variants = shadow_production_variants
