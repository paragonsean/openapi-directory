# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_type import JobType
from openapi_server.models.processor import Processor
from openapi_server.models.vendor_guidance import VendorGuidance
from openapi_server import util


class CreateImageVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_image: str=None, client_token: str=None, image_name: str=None, aliases: List=None, vendor_guidance: VendorGuidance=None, job_type: JobType=None, ml_framework: str=None, programming_lang: str=None, processor: Processor=None, horovod: bool=None, release_notes: str=None):
        """CreateImageVersionRequest - a model defined in OpenAPI

        :param base_image: The base_image of this CreateImageVersionRequest.
        :param client_token: The client_token of this CreateImageVersionRequest.
        :param image_name: The image_name of this CreateImageVersionRequest.
        :param aliases: The aliases of this CreateImageVersionRequest.
        :param vendor_guidance: The vendor_guidance of this CreateImageVersionRequest.
        :param job_type: The job_type of this CreateImageVersionRequest.
        :param ml_framework: The ml_framework of this CreateImageVersionRequest.
        :param programming_lang: The programming_lang of this CreateImageVersionRequest.
        :param processor: The processor of this CreateImageVersionRequest.
        :param horovod: The horovod of this CreateImageVersionRequest.
        :param release_notes: The release_notes of this CreateImageVersionRequest.
        """
        self.openapi_types = {
            'base_image': str,
            'client_token': str,
            'image_name': str,
            'aliases': List,
            'vendor_guidance': VendorGuidance,
            'job_type': JobType,
            'ml_framework': str,
            'programming_lang': str,
            'processor': Processor,
            'horovod': bool,
            'release_notes': str
        }

        self.attribute_map = {
            'base_image': 'BaseImage',
            'client_token': 'ClientToken',
            'image_name': 'ImageName',
            'aliases': 'Aliases',
            'vendor_guidance': 'VendorGuidance',
            'job_type': 'JobType',
            'ml_framework': 'MLFramework',
            'programming_lang': 'ProgrammingLang',
            'processor': 'Processor',
            'horovod': 'Horovod',
            'release_notes': 'ReleaseNotes'
        }

        self._base_image = base_image
        self._client_token = client_token
        self._image_name = image_name
        self._aliases = aliases
        self._vendor_guidance = vendor_guidance
        self._job_type = job_type
        self._ml_framework = ml_framework
        self._programming_lang = programming_lang
        self._processor = processor
        self._horovod = horovod
        self._release_notes = release_notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateImageVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateImageVersionRequest of this CreateImageVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_image(self):
        """Gets the base_image of this CreateImageVersionRequest.


        :return: The base_image of this CreateImageVersionRequest.
        :rtype: str
        """
        return self._base_image

    @base_image.setter
    def base_image(self, base_image):
        """Sets the base_image of this CreateImageVersionRequest.


        :param base_image: The base_image of this CreateImageVersionRequest.
        :type base_image: str
        """
        if base_image is None:
            raise ValueError("Invalid value for `base_image`, must not be `None`")

        self._base_image = base_image

    @property
    def client_token(self):
        """Gets the client_token of this CreateImageVersionRequest.


        :return: The client_token of this CreateImageVersionRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateImageVersionRequest.


        :param client_token: The client_token of this CreateImageVersionRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token

    @property
    def image_name(self):
        """Gets the image_name of this CreateImageVersionRequest.


        :return: The image_name of this CreateImageVersionRequest.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this CreateImageVersionRequest.


        :param image_name: The image_name of this CreateImageVersionRequest.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")

        self._image_name = image_name

    @property
    def aliases(self):
        """Gets the aliases of this CreateImageVersionRequest.


        :return: The aliases of this CreateImageVersionRequest.
        :rtype: List
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this CreateImageVersionRequest.


        :param aliases: The aliases of this CreateImageVersionRequest.
        :type aliases: List
        """

        self._aliases = aliases

    @property
    def vendor_guidance(self):
        """Gets the vendor_guidance of this CreateImageVersionRequest.


        :return: The vendor_guidance of this CreateImageVersionRequest.
        :rtype: VendorGuidance
        """
        return self._vendor_guidance

    @vendor_guidance.setter
    def vendor_guidance(self, vendor_guidance):
        """Sets the vendor_guidance of this CreateImageVersionRequest.


        :param vendor_guidance: The vendor_guidance of this CreateImageVersionRequest.
        :type vendor_guidance: VendorGuidance
        """

        self._vendor_guidance = vendor_guidance

    @property
    def job_type(self):
        """Gets the job_type of this CreateImageVersionRequest.


        :return: The job_type of this CreateImageVersionRequest.
        :rtype: JobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this CreateImageVersionRequest.


        :param job_type: The job_type of this CreateImageVersionRequest.
        :type job_type: JobType
        """

        self._job_type = job_type

    @property
    def ml_framework(self):
        """Gets the ml_framework of this CreateImageVersionRequest.


        :return: The ml_framework of this CreateImageVersionRequest.
        :rtype: str
        """
        return self._ml_framework

    @ml_framework.setter
    def ml_framework(self, ml_framework):
        """Sets the ml_framework of this CreateImageVersionRequest.


        :param ml_framework: The ml_framework of this CreateImageVersionRequest.
        :type ml_framework: str
        """

        self._ml_framework = ml_framework

    @property
    def programming_lang(self):
        """Gets the programming_lang of this CreateImageVersionRequest.


        :return: The programming_lang of this CreateImageVersionRequest.
        :rtype: str
        """
        return self._programming_lang

    @programming_lang.setter
    def programming_lang(self, programming_lang):
        """Sets the programming_lang of this CreateImageVersionRequest.


        :param programming_lang: The programming_lang of this CreateImageVersionRequest.
        :type programming_lang: str
        """

        self._programming_lang = programming_lang

    @property
    def processor(self):
        """Gets the processor of this CreateImageVersionRequest.


        :return: The processor of this CreateImageVersionRequest.
        :rtype: Processor
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this CreateImageVersionRequest.


        :param processor: The processor of this CreateImageVersionRequest.
        :type processor: Processor
        """

        self._processor = processor

    @property
    def horovod(self):
        """Gets the horovod of this CreateImageVersionRequest.


        :return: The horovod of this CreateImageVersionRequest.
        :rtype: bool
        """
        return self._horovod

    @horovod.setter
    def horovod(self, horovod):
        """Sets the horovod of this CreateImageVersionRequest.


        :param horovod: The horovod of this CreateImageVersionRequest.
        :type horovod: bool
        """

        self._horovod = horovod

    @property
    def release_notes(self):
        """Gets the release_notes of this CreateImageVersionRequest.


        :return: The release_notes of this CreateImageVersionRequest.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this CreateImageVersionRequest.


        :param release_notes: The release_notes of this CreateImageVersionRequest.
        :type release_notes: str
        """

        self._release_notes = release_notes
