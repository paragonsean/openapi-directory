# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hyper_parameter_tuning_job_config_hyper_parameter_tuning_job_objective import HyperParameterTuningJobConfigHyperParameterTuningJobObjective
from openapi_server.models.hyper_parameter_tuning_job_config_parameter_ranges import HyperParameterTuningJobConfigParameterRanges
from openapi_server.models.hyper_parameter_tuning_job_config_resource_limits import HyperParameterTuningJobConfigResourceLimits
from openapi_server.models.hyper_parameter_tuning_job_config_strategy_config import HyperParameterTuningJobConfigStrategyConfig
from openapi_server.models.hyper_parameter_tuning_job_config_tuning_job_completion_criteria import HyperParameterTuningJobConfigTuningJobCompletionCriteria
from openapi_server.models.hyper_parameter_tuning_job_strategy_type import HyperParameterTuningJobStrategyType
from openapi_server.models.training_job_early_stopping_type import TrainingJobEarlyStoppingType
from openapi_server import util


class HyperParameterTuningJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, strategy: HyperParameterTuningJobStrategyType=None, strategy_config: HyperParameterTuningJobConfigStrategyConfig=None, hyper_parameter_tuning_job_objective: HyperParameterTuningJobConfigHyperParameterTuningJobObjective=None, resource_limits: HyperParameterTuningJobConfigResourceLimits=None, parameter_ranges: HyperParameterTuningJobConfigParameterRanges=None, training_job_early_stopping_type: TrainingJobEarlyStoppingType=None, tuning_job_completion_criteria: HyperParameterTuningJobConfigTuningJobCompletionCriteria=None, random_seed: int=None):
        """HyperParameterTuningJobConfig - a model defined in OpenAPI

        :param strategy: The strategy of this HyperParameterTuningJobConfig.
        :param strategy_config: The strategy_config of this HyperParameterTuningJobConfig.
        :param hyper_parameter_tuning_job_objective: The hyper_parameter_tuning_job_objective of this HyperParameterTuningJobConfig.
        :param resource_limits: The resource_limits of this HyperParameterTuningJobConfig.
        :param parameter_ranges: The parameter_ranges of this HyperParameterTuningJobConfig.
        :param training_job_early_stopping_type: The training_job_early_stopping_type of this HyperParameterTuningJobConfig.
        :param tuning_job_completion_criteria: The tuning_job_completion_criteria of this HyperParameterTuningJobConfig.
        :param random_seed: The random_seed of this HyperParameterTuningJobConfig.
        """
        self.openapi_types = {
            'strategy': HyperParameterTuningJobStrategyType,
            'strategy_config': HyperParameterTuningJobConfigStrategyConfig,
            'hyper_parameter_tuning_job_objective': HyperParameterTuningJobConfigHyperParameterTuningJobObjective,
            'resource_limits': HyperParameterTuningJobConfigResourceLimits,
            'parameter_ranges': HyperParameterTuningJobConfigParameterRanges,
            'training_job_early_stopping_type': TrainingJobEarlyStoppingType,
            'tuning_job_completion_criteria': HyperParameterTuningJobConfigTuningJobCompletionCriteria,
            'random_seed': int
        }

        self.attribute_map = {
            'strategy': 'Strategy',
            'strategy_config': 'StrategyConfig',
            'hyper_parameter_tuning_job_objective': 'HyperParameterTuningJobObjective',
            'resource_limits': 'ResourceLimits',
            'parameter_ranges': 'ParameterRanges',
            'training_job_early_stopping_type': 'TrainingJobEarlyStoppingType',
            'tuning_job_completion_criteria': 'TuningJobCompletionCriteria',
            'random_seed': 'RandomSeed'
        }

        self._strategy = strategy
        self._strategy_config = strategy_config
        self._hyper_parameter_tuning_job_objective = hyper_parameter_tuning_job_objective
        self._resource_limits = resource_limits
        self._parameter_ranges = parameter_ranges
        self._training_job_early_stopping_type = training_job_early_stopping_type
        self._tuning_job_completion_criteria = tuning_job_completion_criteria
        self._random_seed = random_seed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HyperParameterTuningJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HyperParameterTuningJobConfig of this HyperParameterTuningJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def strategy(self):
        """Gets the strategy of this HyperParameterTuningJobConfig.


        :return: The strategy of this HyperParameterTuningJobConfig.
        :rtype: HyperParameterTuningJobStrategyType
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this HyperParameterTuningJobConfig.


        :param strategy: The strategy of this HyperParameterTuningJobConfig.
        :type strategy: HyperParameterTuningJobStrategyType
        """
        if strategy is None:
            raise ValueError("Invalid value for `strategy`, must not be `None`")

        self._strategy = strategy

    @property
    def strategy_config(self):
        """Gets the strategy_config of this HyperParameterTuningJobConfig.


        :return: The strategy_config of this HyperParameterTuningJobConfig.
        :rtype: HyperParameterTuningJobConfigStrategyConfig
        """
        return self._strategy_config

    @strategy_config.setter
    def strategy_config(self, strategy_config):
        """Sets the strategy_config of this HyperParameterTuningJobConfig.


        :param strategy_config: The strategy_config of this HyperParameterTuningJobConfig.
        :type strategy_config: HyperParameterTuningJobConfigStrategyConfig
        """

        self._strategy_config = strategy_config

    @property
    def hyper_parameter_tuning_job_objective(self):
        """Gets the hyper_parameter_tuning_job_objective of this HyperParameterTuningJobConfig.


        :return: The hyper_parameter_tuning_job_objective of this HyperParameterTuningJobConfig.
        :rtype: HyperParameterTuningJobConfigHyperParameterTuningJobObjective
        """
        return self._hyper_parameter_tuning_job_objective

    @hyper_parameter_tuning_job_objective.setter
    def hyper_parameter_tuning_job_objective(self, hyper_parameter_tuning_job_objective):
        """Sets the hyper_parameter_tuning_job_objective of this HyperParameterTuningJobConfig.


        :param hyper_parameter_tuning_job_objective: The hyper_parameter_tuning_job_objective of this HyperParameterTuningJobConfig.
        :type hyper_parameter_tuning_job_objective: HyperParameterTuningJobConfigHyperParameterTuningJobObjective
        """

        self._hyper_parameter_tuning_job_objective = hyper_parameter_tuning_job_objective

    @property
    def resource_limits(self):
        """Gets the resource_limits of this HyperParameterTuningJobConfig.


        :return: The resource_limits of this HyperParameterTuningJobConfig.
        :rtype: HyperParameterTuningJobConfigResourceLimits
        """
        return self._resource_limits

    @resource_limits.setter
    def resource_limits(self, resource_limits):
        """Sets the resource_limits of this HyperParameterTuningJobConfig.


        :param resource_limits: The resource_limits of this HyperParameterTuningJobConfig.
        :type resource_limits: HyperParameterTuningJobConfigResourceLimits
        """
        if resource_limits is None:
            raise ValueError("Invalid value for `resource_limits`, must not be `None`")

        self._resource_limits = resource_limits

    @property
    def parameter_ranges(self):
        """Gets the parameter_ranges of this HyperParameterTuningJobConfig.


        :return: The parameter_ranges of this HyperParameterTuningJobConfig.
        :rtype: HyperParameterTuningJobConfigParameterRanges
        """
        return self._parameter_ranges

    @parameter_ranges.setter
    def parameter_ranges(self, parameter_ranges):
        """Sets the parameter_ranges of this HyperParameterTuningJobConfig.


        :param parameter_ranges: The parameter_ranges of this HyperParameterTuningJobConfig.
        :type parameter_ranges: HyperParameterTuningJobConfigParameterRanges
        """

        self._parameter_ranges = parameter_ranges

    @property
    def training_job_early_stopping_type(self):
        """Gets the training_job_early_stopping_type of this HyperParameterTuningJobConfig.


        :return: The training_job_early_stopping_type of this HyperParameterTuningJobConfig.
        :rtype: TrainingJobEarlyStoppingType
        """
        return self._training_job_early_stopping_type

    @training_job_early_stopping_type.setter
    def training_job_early_stopping_type(self, training_job_early_stopping_type):
        """Sets the training_job_early_stopping_type of this HyperParameterTuningJobConfig.


        :param training_job_early_stopping_type: The training_job_early_stopping_type of this HyperParameterTuningJobConfig.
        :type training_job_early_stopping_type: TrainingJobEarlyStoppingType
        """

        self._training_job_early_stopping_type = training_job_early_stopping_type

    @property
    def tuning_job_completion_criteria(self):
        """Gets the tuning_job_completion_criteria of this HyperParameterTuningJobConfig.


        :return: The tuning_job_completion_criteria of this HyperParameterTuningJobConfig.
        :rtype: HyperParameterTuningJobConfigTuningJobCompletionCriteria
        """
        return self._tuning_job_completion_criteria

    @tuning_job_completion_criteria.setter
    def tuning_job_completion_criteria(self, tuning_job_completion_criteria):
        """Sets the tuning_job_completion_criteria of this HyperParameterTuningJobConfig.


        :param tuning_job_completion_criteria: The tuning_job_completion_criteria of this HyperParameterTuningJobConfig.
        :type tuning_job_completion_criteria: HyperParameterTuningJobConfigTuningJobCompletionCriteria
        """

        self._tuning_job_completion_criteria = tuning_job_completion_criteria

    @property
    def random_seed(self):
        """Gets the random_seed of this HyperParameterTuningJobConfig.


        :return: The random_seed of this HyperParameterTuningJobConfig.
        :rtype: int
        """
        return self._random_seed

    @random_seed.setter
    def random_seed(self, random_seed):
        """Sets the random_seed of this HyperParameterTuningJobConfig.


        :param random_seed: The random_seed of this HyperParameterTuningJobConfig.
        :type random_seed: int
        """

        self._random_seed = random_seed
