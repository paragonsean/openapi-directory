# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipeline_execution_step_metadata_auto_ml_job import PipelineExecutionStepMetadataAutoMLJob
from openapi_server.models.pipeline_execution_step_metadata_callback import PipelineExecutionStepMetadataCallback
from openapi_server.models.pipeline_execution_step_metadata_clarify_check import PipelineExecutionStepMetadataClarifyCheck
from openapi_server.models.pipeline_execution_step_metadata_condition import PipelineExecutionStepMetadataCondition
from openapi_server.models.pipeline_execution_step_metadata_emr import PipelineExecutionStepMetadataEMR
from openapi_server.models.pipeline_execution_step_metadata_fail import PipelineExecutionStepMetadataFail
from openapi_server.models.pipeline_execution_step_metadata_lambda import PipelineExecutionStepMetadataLambda
from openapi_server.models.pipeline_execution_step_metadata_model import PipelineExecutionStepMetadataModel
from openapi_server.models.pipeline_execution_step_metadata_processing_job import PipelineExecutionStepMetadataProcessingJob
from openapi_server.models.pipeline_execution_step_metadata_quality_check import PipelineExecutionStepMetadataQualityCheck
from openapi_server.models.pipeline_execution_step_metadata_register_model import PipelineExecutionStepMetadataRegisterModel
from openapi_server.models.pipeline_execution_step_metadata_training_job import PipelineExecutionStepMetadataTrainingJob
from openapi_server.models.pipeline_execution_step_metadata_transform_job import PipelineExecutionStepMetadataTransformJob
from openapi_server.models.pipeline_execution_step_metadata_tuning_job import PipelineExecutionStepMetadataTuningJob
from openapi_server import util


class PipelineExecutionStepMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, training_job: PipelineExecutionStepMetadataTrainingJob=None, processing_job: PipelineExecutionStepMetadataProcessingJob=None, transform_job: PipelineExecutionStepMetadataTransformJob=None, tuning_job: PipelineExecutionStepMetadataTuningJob=None, model: PipelineExecutionStepMetadataModel=None, register_model: PipelineExecutionStepMetadataRegisterModel=None, condition: PipelineExecutionStepMetadataCondition=None, callback: PipelineExecutionStepMetadataCallback=None, _lambda: PipelineExecutionStepMetadataLambda=None, quality_check: PipelineExecutionStepMetadataQualityCheck=None, clarify_check: PipelineExecutionStepMetadataClarifyCheck=None, emr: PipelineExecutionStepMetadataEMR=None, fail: PipelineExecutionStepMetadataFail=None, auto_ml_job: PipelineExecutionStepMetadataAutoMLJob=None):
        """PipelineExecutionStepMetadata - a model defined in OpenAPI

        :param training_job: The training_job of this PipelineExecutionStepMetadata.
        :param processing_job: The processing_job of this PipelineExecutionStepMetadata.
        :param transform_job: The transform_job of this PipelineExecutionStepMetadata.
        :param tuning_job: The tuning_job of this PipelineExecutionStepMetadata.
        :param model: The model of this PipelineExecutionStepMetadata.
        :param register_model: The register_model of this PipelineExecutionStepMetadata.
        :param condition: The condition of this PipelineExecutionStepMetadata.
        :param callback: The callback of this PipelineExecutionStepMetadata.
        :param _lambda: The _lambda of this PipelineExecutionStepMetadata.
        :param quality_check: The quality_check of this PipelineExecutionStepMetadata.
        :param clarify_check: The clarify_check of this PipelineExecutionStepMetadata.
        :param emr: The emr of this PipelineExecutionStepMetadata.
        :param fail: The fail of this PipelineExecutionStepMetadata.
        :param auto_ml_job: The auto_ml_job of this PipelineExecutionStepMetadata.
        """
        self.openapi_types = {
            'training_job': PipelineExecutionStepMetadataTrainingJob,
            'processing_job': PipelineExecutionStepMetadataProcessingJob,
            'transform_job': PipelineExecutionStepMetadataTransformJob,
            'tuning_job': PipelineExecutionStepMetadataTuningJob,
            'model': PipelineExecutionStepMetadataModel,
            'register_model': PipelineExecutionStepMetadataRegisterModel,
            'condition': PipelineExecutionStepMetadataCondition,
            'callback': PipelineExecutionStepMetadataCallback,
            '_lambda': PipelineExecutionStepMetadataLambda,
            'quality_check': PipelineExecutionStepMetadataQualityCheck,
            'clarify_check': PipelineExecutionStepMetadataClarifyCheck,
            'emr': PipelineExecutionStepMetadataEMR,
            'fail': PipelineExecutionStepMetadataFail,
            'auto_ml_job': PipelineExecutionStepMetadataAutoMLJob
        }

        self.attribute_map = {
            'training_job': 'TrainingJob',
            'processing_job': 'ProcessingJob',
            'transform_job': 'TransformJob',
            'tuning_job': 'TuningJob',
            'model': 'Model',
            'register_model': 'RegisterModel',
            'condition': 'Condition',
            'callback': 'Callback',
            '_lambda': 'Lambda',
            'quality_check': 'QualityCheck',
            'clarify_check': 'ClarifyCheck',
            'emr': 'EMR',
            'fail': 'Fail',
            'auto_ml_job': 'AutoMLJob'
        }

        self._training_job = training_job
        self._processing_job = processing_job
        self._transform_job = transform_job
        self._tuning_job = tuning_job
        self._model = model
        self._register_model = register_model
        self._condition = condition
        self._callback = callback
        self.__lambda = _lambda
        self._quality_check = quality_check
        self._clarify_check = clarify_check
        self._emr = emr
        self._fail = fail
        self._auto_ml_job = auto_ml_job

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineExecutionStepMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineExecutionStep_Metadata of this PipelineExecutionStepMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def training_job(self):
        """Gets the training_job of this PipelineExecutionStepMetadata.


        :return: The training_job of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataTrainingJob
        """
        return self._training_job

    @training_job.setter
    def training_job(self, training_job):
        """Sets the training_job of this PipelineExecutionStepMetadata.


        :param training_job: The training_job of this PipelineExecutionStepMetadata.
        :type training_job: PipelineExecutionStepMetadataTrainingJob
        """

        self._training_job = training_job

    @property
    def processing_job(self):
        """Gets the processing_job of this PipelineExecutionStepMetadata.


        :return: The processing_job of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataProcessingJob
        """
        return self._processing_job

    @processing_job.setter
    def processing_job(self, processing_job):
        """Sets the processing_job of this PipelineExecutionStepMetadata.


        :param processing_job: The processing_job of this PipelineExecutionStepMetadata.
        :type processing_job: PipelineExecutionStepMetadataProcessingJob
        """

        self._processing_job = processing_job

    @property
    def transform_job(self):
        """Gets the transform_job of this PipelineExecutionStepMetadata.


        :return: The transform_job of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataTransformJob
        """
        return self._transform_job

    @transform_job.setter
    def transform_job(self, transform_job):
        """Sets the transform_job of this PipelineExecutionStepMetadata.


        :param transform_job: The transform_job of this PipelineExecutionStepMetadata.
        :type transform_job: PipelineExecutionStepMetadataTransformJob
        """

        self._transform_job = transform_job

    @property
    def tuning_job(self):
        """Gets the tuning_job of this PipelineExecutionStepMetadata.


        :return: The tuning_job of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataTuningJob
        """
        return self._tuning_job

    @tuning_job.setter
    def tuning_job(self, tuning_job):
        """Sets the tuning_job of this PipelineExecutionStepMetadata.


        :param tuning_job: The tuning_job of this PipelineExecutionStepMetadata.
        :type tuning_job: PipelineExecutionStepMetadataTuningJob
        """

        self._tuning_job = tuning_job

    @property
    def model(self):
        """Gets the model of this PipelineExecutionStepMetadata.


        :return: The model of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PipelineExecutionStepMetadata.


        :param model: The model of this PipelineExecutionStepMetadata.
        :type model: PipelineExecutionStepMetadataModel
        """

        self._model = model

    @property
    def register_model(self):
        """Gets the register_model of this PipelineExecutionStepMetadata.


        :return: The register_model of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataRegisterModel
        """
        return self._register_model

    @register_model.setter
    def register_model(self, register_model):
        """Sets the register_model of this PipelineExecutionStepMetadata.


        :param register_model: The register_model of this PipelineExecutionStepMetadata.
        :type register_model: PipelineExecutionStepMetadataRegisterModel
        """

        self._register_model = register_model

    @property
    def condition(self):
        """Gets the condition of this PipelineExecutionStepMetadata.


        :return: The condition of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this PipelineExecutionStepMetadata.


        :param condition: The condition of this PipelineExecutionStepMetadata.
        :type condition: PipelineExecutionStepMetadataCondition
        """

        self._condition = condition

    @property
    def callback(self):
        """Gets the callback of this PipelineExecutionStepMetadata.


        :return: The callback of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataCallback
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this PipelineExecutionStepMetadata.


        :param callback: The callback of this PipelineExecutionStepMetadata.
        :type callback: PipelineExecutionStepMetadataCallback
        """

        self._callback = callback

    @property
    def _lambda(self):
        """Gets the _lambda of this PipelineExecutionStepMetadata.


        :return: The _lambda of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataLambda
        """
        return self.__lambda

    @_lambda.setter
    def _lambda(self, _lambda):
        """Sets the _lambda of this PipelineExecutionStepMetadata.


        :param _lambda: The _lambda of this PipelineExecutionStepMetadata.
        :type _lambda: PipelineExecutionStepMetadataLambda
        """

        self.__lambda = _lambda

    @property
    def quality_check(self):
        """Gets the quality_check of this PipelineExecutionStepMetadata.


        :return: The quality_check of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataQualityCheck
        """
        return self._quality_check

    @quality_check.setter
    def quality_check(self, quality_check):
        """Sets the quality_check of this PipelineExecutionStepMetadata.


        :param quality_check: The quality_check of this PipelineExecutionStepMetadata.
        :type quality_check: PipelineExecutionStepMetadataQualityCheck
        """

        self._quality_check = quality_check

    @property
    def clarify_check(self):
        """Gets the clarify_check of this PipelineExecutionStepMetadata.


        :return: The clarify_check of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataClarifyCheck
        """
        return self._clarify_check

    @clarify_check.setter
    def clarify_check(self, clarify_check):
        """Sets the clarify_check of this PipelineExecutionStepMetadata.


        :param clarify_check: The clarify_check of this PipelineExecutionStepMetadata.
        :type clarify_check: PipelineExecutionStepMetadataClarifyCheck
        """

        self._clarify_check = clarify_check

    @property
    def emr(self):
        """Gets the emr of this PipelineExecutionStepMetadata.


        :return: The emr of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataEMR
        """
        return self._emr

    @emr.setter
    def emr(self, emr):
        """Sets the emr of this PipelineExecutionStepMetadata.


        :param emr: The emr of this PipelineExecutionStepMetadata.
        :type emr: PipelineExecutionStepMetadataEMR
        """

        self._emr = emr

    @property
    def fail(self):
        """Gets the fail of this PipelineExecutionStepMetadata.


        :return: The fail of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataFail
        """
        return self._fail

    @fail.setter
    def fail(self, fail):
        """Sets the fail of this PipelineExecutionStepMetadata.


        :param fail: The fail of this PipelineExecutionStepMetadata.
        :type fail: PipelineExecutionStepMetadataFail
        """

        self._fail = fail

    @property
    def auto_ml_job(self):
        """Gets the auto_ml_job of this PipelineExecutionStepMetadata.


        :return: The auto_ml_job of this PipelineExecutionStepMetadata.
        :rtype: PipelineExecutionStepMetadataAutoMLJob
        """
        return self._auto_ml_job

    @auto_ml_job.setter
    def auto_ml_job(self, auto_ml_job):
        """Sets the auto_ml_job of this PipelineExecutionStepMetadata.


        :param auto_ml_job: The auto_ml_job of this PipelineExecutionStepMetadata.
        :type auto_ml_job: PipelineExecutionStepMetadataAutoMLJob
        """

        self._auto_ml_job = auto_ml_job
