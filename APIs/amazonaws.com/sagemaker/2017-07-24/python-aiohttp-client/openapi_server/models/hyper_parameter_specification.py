# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hyper_parameter_specification_range import HyperParameterSpecificationRange
from openapi_server.models.parameter_type import ParameterType
from openapi_server import util


class HyperParameterSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, type: ParameterType=None, range: HyperParameterSpecificationRange=None, is_tunable: bool=None, is_required: bool=None, default_value: str=None):
        """HyperParameterSpecification - a model defined in OpenAPI

        :param name: The name of this HyperParameterSpecification.
        :param description: The description of this HyperParameterSpecification.
        :param type: The type of this HyperParameterSpecification.
        :param range: The range of this HyperParameterSpecification.
        :param is_tunable: The is_tunable of this HyperParameterSpecification.
        :param is_required: The is_required of this HyperParameterSpecification.
        :param default_value: The default_value of this HyperParameterSpecification.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'type': ParameterType,
            'range': HyperParameterSpecificationRange,
            'is_tunable': bool,
            'is_required': bool,
            'default_value': str
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'type': 'Type',
            'range': 'Range',
            'is_tunable': 'IsTunable',
            'is_required': 'IsRequired',
            'default_value': 'DefaultValue'
        }

        self._name = name
        self._description = description
        self._type = type
        self._range = range
        self._is_tunable = is_tunable
        self._is_required = is_required
        self._default_value = default_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HyperParameterSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HyperParameterSpecification of this HyperParameterSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this HyperParameterSpecification.


        :return: The name of this HyperParameterSpecification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HyperParameterSpecification.


        :param name: The name of this HyperParameterSpecification.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this HyperParameterSpecification.


        :return: The description of this HyperParameterSpecification.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HyperParameterSpecification.


        :param description: The description of this HyperParameterSpecification.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this HyperParameterSpecification.


        :return: The type of this HyperParameterSpecification.
        :rtype: ParameterType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HyperParameterSpecification.


        :param type: The type of this HyperParameterSpecification.
        :type type: ParameterType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def range(self):
        """Gets the range of this HyperParameterSpecification.


        :return: The range of this HyperParameterSpecification.
        :rtype: HyperParameterSpecificationRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this HyperParameterSpecification.


        :param range: The range of this HyperParameterSpecification.
        :type range: HyperParameterSpecificationRange
        """

        self._range = range

    @property
    def is_tunable(self):
        """Gets the is_tunable of this HyperParameterSpecification.


        :return: The is_tunable of this HyperParameterSpecification.
        :rtype: bool
        """
        return self._is_tunable

    @is_tunable.setter
    def is_tunable(self, is_tunable):
        """Sets the is_tunable of this HyperParameterSpecification.


        :param is_tunable: The is_tunable of this HyperParameterSpecification.
        :type is_tunable: bool
        """

        self._is_tunable = is_tunable

    @property
    def is_required(self):
        """Gets the is_required of this HyperParameterSpecification.


        :return: The is_required of this HyperParameterSpecification.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this HyperParameterSpecification.


        :param is_required: The is_required of this HyperParameterSpecification.
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def default_value(self):
        """Gets the default_value of this HyperParameterSpecification.


        :return: The default_value of this HyperParameterSpecification.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this HyperParameterSpecification.


        :param default_value: The default_value of this HyperParameterSpecification.
        :type default_value: str
        """

        self._default_value = default_value
