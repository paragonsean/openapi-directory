# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartPipelineExecutionRequestParallelismConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_parallel_execution_steps: int=None):
        """StartPipelineExecutionRequestParallelismConfiguration - a model defined in OpenAPI

        :param max_parallel_execution_steps: The max_parallel_execution_steps of this StartPipelineExecutionRequestParallelismConfiguration.
        """
        self.openapi_types = {
            'max_parallel_execution_steps': int
        }

        self.attribute_map = {
            'max_parallel_execution_steps': 'MaxParallelExecutionSteps'
        }

        self._max_parallel_execution_steps = max_parallel_execution_steps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartPipelineExecutionRequestParallelismConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartPipelineExecutionRequest_ParallelismConfiguration of this StartPipelineExecutionRequestParallelismConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_parallel_execution_steps(self):
        """Gets the max_parallel_execution_steps of this StartPipelineExecutionRequestParallelismConfiguration.


        :return: The max_parallel_execution_steps of this StartPipelineExecutionRequestParallelismConfiguration.
        :rtype: int
        """
        return self._max_parallel_execution_steps

    @max_parallel_execution_steps.setter
    def max_parallel_execution_steps(self, max_parallel_execution_steps):
        """Sets the max_parallel_execution_steps of this StartPipelineExecutionRequestParallelismConfiguration.


        :param max_parallel_execution_steps: The max_parallel_execution_steps of this StartPipelineExecutionRequestParallelismConfiguration.
        :type max_parallel_execution_steps: int
        """
        if max_parallel_execution_steps is None:
            raise ValueError("Invalid value for `max_parallel_execution_steps`, must not be `None`")

        self._max_parallel_execution_steps = max_parallel_execution_steps
