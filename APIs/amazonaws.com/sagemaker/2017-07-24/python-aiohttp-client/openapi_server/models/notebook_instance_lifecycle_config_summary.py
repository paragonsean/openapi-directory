# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotebookInstanceLifecycleConfigSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notebook_instance_lifecycle_config_name: str=None, notebook_instance_lifecycle_config_arn: str=None, creation_time: datetime=None, last_modified_time: datetime=None):
        """NotebookInstanceLifecycleConfigSummary - a model defined in OpenAPI

        :param notebook_instance_lifecycle_config_name: The notebook_instance_lifecycle_config_name of this NotebookInstanceLifecycleConfigSummary.
        :param notebook_instance_lifecycle_config_arn: The notebook_instance_lifecycle_config_arn of this NotebookInstanceLifecycleConfigSummary.
        :param creation_time: The creation_time of this NotebookInstanceLifecycleConfigSummary.
        :param last_modified_time: The last_modified_time of this NotebookInstanceLifecycleConfigSummary.
        """
        self.openapi_types = {
            'notebook_instance_lifecycle_config_name': str,
            'notebook_instance_lifecycle_config_arn': str,
            'creation_time': datetime,
            'last_modified_time': datetime
        }

        self.attribute_map = {
            'notebook_instance_lifecycle_config_name': 'NotebookInstanceLifecycleConfigName',
            'notebook_instance_lifecycle_config_arn': 'NotebookInstanceLifecycleConfigArn',
            'creation_time': 'CreationTime',
            'last_modified_time': 'LastModifiedTime'
        }

        self._notebook_instance_lifecycle_config_name = notebook_instance_lifecycle_config_name
        self._notebook_instance_lifecycle_config_arn = notebook_instance_lifecycle_config_arn
        self._creation_time = creation_time
        self._last_modified_time = last_modified_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotebookInstanceLifecycleConfigSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotebookInstanceLifecycleConfigSummary of this NotebookInstanceLifecycleConfigSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notebook_instance_lifecycle_config_name(self):
        """Gets the notebook_instance_lifecycle_config_name of this NotebookInstanceLifecycleConfigSummary.


        :return: The notebook_instance_lifecycle_config_name of this NotebookInstanceLifecycleConfigSummary.
        :rtype: str
        """
        return self._notebook_instance_lifecycle_config_name

    @notebook_instance_lifecycle_config_name.setter
    def notebook_instance_lifecycle_config_name(self, notebook_instance_lifecycle_config_name):
        """Sets the notebook_instance_lifecycle_config_name of this NotebookInstanceLifecycleConfigSummary.


        :param notebook_instance_lifecycle_config_name: The notebook_instance_lifecycle_config_name of this NotebookInstanceLifecycleConfigSummary.
        :type notebook_instance_lifecycle_config_name: str
        """
        if notebook_instance_lifecycle_config_name is None:
            raise ValueError("Invalid value for `notebook_instance_lifecycle_config_name`, must not be `None`")

        self._notebook_instance_lifecycle_config_name = notebook_instance_lifecycle_config_name

    @property
    def notebook_instance_lifecycle_config_arn(self):
        """Gets the notebook_instance_lifecycle_config_arn of this NotebookInstanceLifecycleConfigSummary.


        :return: The notebook_instance_lifecycle_config_arn of this NotebookInstanceLifecycleConfigSummary.
        :rtype: str
        """
        return self._notebook_instance_lifecycle_config_arn

    @notebook_instance_lifecycle_config_arn.setter
    def notebook_instance_lifecycle_config_arn(self, notebook_instance_lifecycle_config_arn):
        """Sets the notebook_instance_lifecycle_config_arn of this NotebookInstanceLifecycleConfigSummary.


        :param notebook_instance_lifecycle_config_arn: The notebook_instance_lifecycle_config_arn of this NotebookInstanceLifecycleConfigSummary.
        :type notebook_instance_lifecycle_config_arn: str
        """
        if notebook_instance_lifecycle_config_arn is None:
            raise ValueError("Invalid value for `notebook_instance_lifecycle_config_arn`, must not be `None`")

        self._notebook_instance_lifecycle_config_arn = notebook_instance_lifecycle_config_arn

    @property
    def creation_time(self):
        """Gets the creation_time of this NotebookInstanceLifecycleConfigSummary.


        :return: The creation_time of this NotebookInstanceLifecycleConfigSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NotebookInstanceLifecycleConfigSummary.


        :param creation_time: The creation_time of this NotebookInstanceLifecycleConfigSummary.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this NotebookInstanceLifecycleConfigSummary.


        :return: The last_modified_time of this NotebookInstanceLifecycleConfigSummary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this NotebookInstanceLifecycleConfigSummary.


        :param last_modified_time: The last_modified_time of this NotebookInstanceLifecycleConfigSummary.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time
