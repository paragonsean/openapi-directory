# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_classification_job_config_completion_criteria import ImageClassificationJobConfigCompletionCriteria
from openapi_server import util


class AutoMLProblemTypeConfigTextClassificationJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_criteria: ImageClassificationJobConfigCompletionCriteria=None, content_column: str=None, target_label_column: str=None):
        """AutoMLProblemTypeConfigTextClassificationJobConfig - a model defined in OpenAPI

        :param completion_criteria: The completion_criteria of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        :param content_column: The content_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        :param target_label_column: The target_label_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        """
        self.openapi_types = {
            'completion_criteria': ImageClassificationJobConfigCompletionCriteria,
            'content_column': str,
            'target_label_column': str
        }

        self.attribute_map = {
            'completion_criteria': 'CompletionCriteria',
            'content_column': 'ContentColumn',
            'target_label_column': 'TargetLabelColumn'
        }

        self._completion_criteria = completion_criteria
        self._content_column = content_column
        self._target_label_column = target_label_column

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoMLProblemTypeConfigTextClassificationJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoMLProblemTypeConfig_TextClassificationJobConfig of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_criteria(self):
        """Gets the completion_criteria of this AutoMLProblemTypeConfigTextClassificationJobConfig.


        :return: The completion_criteria of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        :rtype: ImageClassificationJobConfigCompletionCriteria
        """
        return self._completion_criteria

    @completion_criteria.setter
    def completion_criteria(self, completion_criteria):
        """Sets the completion_criteria of this AutoMLProblemTypeConfigTextClassificationJobConfig.


        :param completion_criteria: The completion_criteria of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        :type completion_criteria: ImageClassificationJobConfigCompletionCriteria
        """

        self._completion_criteria = completion_criteria

    @property
    def content_column(self):
        """Gets the content_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.


        :return: The content_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        :rtype: str
        """
        return self._content_column

    @content_column.setter
    def content_column(self, content_column):
        """Sets the content_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.


        :param content_column: The content_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        :type content_column: str
        """
        if content_column is None:
            raise ValueError("Invalid value for `content_column`, must not be `None`")

        self._content_column = content_column

    @property
    def target_label_column(self):
        """Gets the target_label_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.


        :return: The target_label_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        :rtype: str
        """
        return self._target_label_column

    @target_label_column.setter
    def target_label_column(self, target_label_column):
        """Sets the target_label_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.


        :param target_label_column: The target_label_column of this AutoMLProblemTypeConfigTextClassificationJobConfig.
        :type target_label_column: str
        """
        if target_label_column is None:
            raise ValueError("Invalid value for `target_label_column`, must not be `None`")

        self._target_label_column = target_label_column
