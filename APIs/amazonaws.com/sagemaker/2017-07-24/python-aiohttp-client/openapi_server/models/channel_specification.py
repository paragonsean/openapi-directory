# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, is_required: bool=None, supported_content_types: List=None, supported_compression_types: List=None, supported_input_modes: List=None):
        """ChannelSpecification - a model defined in OpenAPI

        :param name: The name of this ChannelSpecification.
        :param description: The description of this ChannelSpecification.
        :param is_required: The is_required of this ChannelSpecification.
        :param supported_content_types: The supported_content_types of this ChannelSpecification.
        :param supported_compression_types: The supported_compression_types of this ChannelSpecification.
        :param supported_input_modes: The supported_input_modes of this ChannelSpecification.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'is_required': bool,
            'supported_content_types': List,
            'supported_compression_types': List,
            'supported_input_modes': List
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'is_required': 'IsRequired',
            'supported_content_types': 'SupportedContentTypes',
            'supported_compression_types': 'SupportedCompressionTypes',
            'supported_input_modes': 'SupportedInputModes'
        }

        self._name = name
        self._description = description
        self._is_required = is_required
        self._supported_content_types = supported_content_types
        self._supported_compression_types = supported_compression_types
        self._supported_input_modes = supported_input_modes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelSpecification of this ChannelSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ChannelSpecification.


        :return: The name of this ChannelSpecification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChannelSpecification.


        :param name: The name of this ChannelSpecification.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this ChannelSpecification.


        :return: The description of this ChannelSpecification.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChannelSpecification.


        :param description: The description of this ChannelSpecification.
        :type description: str
        """

        self._description = description

    @property
    def is_required(self):
        """Gets the is_required of this ChannelSpecification.


        :return: The is_required of this ChannelSpecification.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this ChannelSpecification.


        :param is_required: The is_required of this ChannelSpecification.
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def supported_content_types(self):
        """Gets the supported_content_types of this ChannelSpecification.


        :return: The supported_content_types of this ChannelSpecification.
        :rtype: List
        """
        return self._supported_content_types

    @supported_content_types.setter
    def supported_content_types(self, supported_content_types):
        """Sets the supported_content_types of this ChannelSpecification.


        :param supported_content_types: The supported_content_types of this ChannelSpecification.
        :type supported_content_types: List
        """
        if supported_content_types is None:
            raise ValueError("Invalid value for `supported_content_types`, must not be `None`")

        self._supported_content_types = supported_content_types

    @property
    def supported_compression_types(self):
        """Gets the supported_compression_types of this ChannelSpecification.


        :return: The supported_compression_types of this ChannelSpecification.
        :rtype: List
        """
        return self._supported_compression_types

    @supported_compression_types.setter
    def supported_compression_types(self, supported_compression_types):
        """Sets the supported_compression_types of this ChannelSpecification.


        :param supported_compression_types: The supported_compression_types of this ChannelSpecification.
        :type supported_compression_types: List
        """

        self._supported_compression_types = supported_compression_types

    @property
    def supported_input_modes(self):
        """Gets the supported_input_modes of this ChannelSpecification.


        :return: The supported_input_modes of this ChannelSpecification.
        :rtype: List
        """
        return self._supported_input_modes

    @supported_input_modes.setter
    def supported_input_modes(self, supported_input_modes):
        """Sets the supported_input_modes of this ChannelSpecification.


        :param supported_input_modes: The supported_input_modes of this ChannelSpecification.
        :type supported_input_modes: List
        """
        if supported_input_modes is None:
            raise ValueError("Invalid value for `supported_input_modes`, must not be `None`")

        self._supported_input_modes = supported_input_modes
