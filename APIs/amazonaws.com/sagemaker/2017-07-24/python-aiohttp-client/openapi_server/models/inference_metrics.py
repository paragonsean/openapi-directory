# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InferenceMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_invocations: int=None, model_latency: int=None):
        """InferenceMetrics - a model defined in OpenAPI

        :param max_invocations: The max_invocations of this InferenceMetrics.
        :param model_latency: The model_latency of this InferenceMetrics.
        """
        self.openapi_types = {
            'max_invocations': int,
            'model_latency': int
        }

        self.attribute_map = {
            'max_invocations': 'MaxInvocations',
            'model_latency': 'ModelLatency'
        }

        self._max_invocations = max_invocations
        self._model_latency = model_latency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InferenceMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InferenceMetrics of this InferenceMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_invocations(self):
        """Gets the max_invocations of this InferenceMetrics.


        :return: The max_invocations of this InferenceMetrics.
        :rtype: int
        """
        return self._max_invocations

    @max_invocations.setter
    def max_invocations(self, max_invocations):
        """Sets the max_invocations of this InferenceMetrics.


        :param max_invocations: The max_invocations of this InferenceMetrics.
        :type max_invocations: int
        """
        if max_invocations is None:
            raise ValueError("Invalid value for `max_invocations`, must not be `None`")

        self._max_invocations = max_invocations

    @property
    def model_latency(self):
        """Gets the model_latency of this InferenceMetrics.


        :return: The model_latency of this InferenceMetrics.
        :rtype: int
        """
        return self._model_latency

    @model_latency.setter
    def model_latency(self, model_latency):
        """Sets the model_latency of this InferenceMetrics.


        :param model_latency: The model_latency of this InferenceMetrics.
        :type model_latency: int
        """
        if model_latency is None:
            raise ValueError("Invalid value for `model_latency`, must not be `None`")

        self._model_latency = model_latency
