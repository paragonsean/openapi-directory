# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clarify_explainer_config_inference_config import ClarifyExplainerConfigInferenceConfig
from openapi_server.models.clarify_explainer_config_shap_config import ClarifyExplainerConfigShapConfig
from openapi_server import util


class ClarifyExplainerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_explanations: str=None, inference_config: ClarifyExplainerConfigInferenceConfig=None, shap_config: ClarifyExplainerConfigShapConfig=None):
        """ClarifyExplainerConfig - a model defined in OpenAPI

        :param enable_explanations: The enable_explanations of this ClarifyExplainerConfig.
        :param inference_config: The inference_config of this ClarifyExplainerConfig.
        :param shap_config: The shap_config of this ClarifyExplainerConfig.
        """
        self.openapi_types = {
            'enable_explanations': str,
            'inference_config': ClarifyExplainerConfigInferenceConfig,
            'shap_config': ClarifyExplainerConfigShapConfig
        }

        self.attribute_map = {
            'enable_explanations': 'EnableExplanations',
            'inference_config': 'InferenceConfig',
            'shap_config': 'ShapConfig'
        }

        self._enable_explanations = enable_explanations
        self._inference_config = inference_config
        self._shap_config = shap_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClarifyExplainerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClarifyExplainerConfig of this ClarifyExplainerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_explanations(self):
        """Gets the enable_explanations of this ClarifyExplainerConfig.


        :return: The enable_explanations of this ClarifyExplainerConfig.
        :rtype: str
        """
        return self._enable_explanations

    @enable_explanations.setter
    def enable_explanations(self, enable_explanations):
        """Sets the enable_explanations of this ClarifyExplainerConfig.


        :param enable_explanations: The enable_explanations of this ClarifyExplainerConfig.
        :type enable_explanations: str
        """

        self._enable_explanations = enable_explanations

    @property
    def inference_config(self):
        """Gets the inference_config of this ClarifyExplainerConfig.


        :return: The inference_config of this ClarifyExplainerConfig.
        :rtype: ClarifyExplainerConfigInferenceConfig
        """
        return self._inference_config

    @inference_config.setter
    def inference_config(self, inference_config):
        """Sets the inference_config of this ClarifyExplainerConfig.


        :param inference_config: The inference_config of this ClarifyExplainerConfig.
        :type inference_config: ClarifyExplainerConfigInferenceConfig
        """

        self._inference_config = inference_config

    @property
    def shap_config(self):
        """Gets the shap_config of this ClarifyExplainerConfig.


        :return: The shap_config of this ClarifyExplainerConfig.
        :rtype: ClarifyExplainerConfigShapConfig
        """
        return self._shap_config

    @shap_config.setter
    def shap_config(self, shap_config):
        """Sets the shap_config of this ClarifyExplainerConfig.


        :param shap_config: The shap_config of this ClarifyExplainerConfig.
        :type shap_config: ClarifyExplainerConfigShapConfig
        """
        if shap_config is None:
            raise ValueError("Invalid value for `shap_config`, must not be `None`")

        self._shap_config = shap_config
