# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connected_device_count: int=None, registered_device_count: int=None):
        """DeviceStats - a model defined in OpenAPI

        :param connected_device_count: The connected_device_count of this DeviceStats.
        :param registered_device_count: The registered_device_count of this DeviceStats.
        """
        self.openapi_types = {
            'connected_device_count': int,
            'registered_device_count': int
        }

        self.attribute_map = {
            'connected_device_count': 'ConnectedDeviceCount',
            'registered_device_count': 'RegisteredDeviceCount'
        }

        self._connected_device_count = connected_device_count
        self._registered_device_count = registered_device_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceStats of this DeviceStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connected_device_count(self):
        """Gets the connected_device_count of this DeviceStats.


        :return: The connected_device_count of this DeviceStats.
        :rtype: int
        """
        return self._connected_device_count

    @connected_device_count.setter
    def connected_device_count(self, connected_device_count):
        """Sets the connected_device_count of this DeviceStats.


        :param connected_device_count: The connected_device_count of this DeviceStats.
        :type connected_device_count: int
        """
        if connected_device_count is None:
            raise ValueError("Invalid value for `connected_device_count`, must not be `None`")

        self._connected_device_count = connected_device_count

    @property
    def registered_device_count(self):
        """Gets the registered_device_count of this DeviceStats.


        :return: The registered_device_count of this DeviceStats.
        :rtype: int
        """
        return self._registered_device_count

    @registered_device_count.setter
    def registered_device_count(self, registered_device_count):
        """Sets the registered_device_count of this DeviceStats.


        :param registered_device_count: The registered_device_count of this DeviceStats.
        :type registered_device_count: int
        """
        if registered_device_count is None:
            raise ValueError("Invalid value for `registered_device_count`, must not be `None`")

        self._registered_device_count = registered_device_count
