# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_type import JobType
from openapi_server.models.processor import Processor
from openapi_server.models.vendor_guidance import VendorGuidance
from openapi_server import util


class UpdateImageVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_name: str=None, alias: str=None, version: int=None, aliases_to_add: List=None, aliases_to_delete: List=None, vendor_guidance: VendorGuidance=None, job_type: JobType=None, ml_framework: str=None, programming_lang: str=None, processor: Processor=None, horovod: bool=None, release_notes: str=None):
        """UpdateImageVersionRequest - a model defined in OpenAPI

        :param image_name: The image_name of this UpdateImageVersionRequest.
        :param alias: The alias of this UpdateImageVersionRequest.
        :param version: The version of this UpdateImageVersionRequest.
        :param aliases_to_add: The aliases_to_add of this UpdateImageVersionRequest.
        :param aliases_to_delete: The aliases_to_delete of this UpdateImageVersionRequest.
        :param vendor_guidance: The vendor_guidance of this UpdateImageVersionRequest.
        :param job_type: The job_type of this UpdateImageVersionRequest.
        :param ml_framework: The ml_framework of this UpdateImageVersionRequest.
        :param programming_lang: The programming_lang of this UpdateImageVersionRequest.
        :param processor: The processor of this UpdateImageVersionRequest.
        :param horovod: The horovod of this UpdateImageVersionRequest.
        :param release_notes: The release_notes of this UpdateImageVersionRequest.
        """
        self.openapi_types = {
            'image_name': str,
            'alias': str,
            'version': int,
            'aliases_to_add': List,
            'aliases_to_delete': List,
            'vendor_guidance': VendorGuidance,
            'job_type': JobType,
            'ml_framework': str,
            'programming_lang': str,
            'processor': Processor,
            'horovod': bool,
            'release_notes': str
        }

        self.attribute_map = {
            'image_name': 'ImageName',
            'alias': 'Alias',
            'version': 'Version',
            'aliases_to_add': 'AliasesToAdd',
            'aliases_to_delete': 'AliasesToDelete',
            'vendor_guidance': 'VendorGuidance',
            'job_type': 'JobType',
            'ml_framework': 'MLFramework',
            'programming_lang': 'ProgrammingLang',
            'processor': 'Processor',
            'horovod': 'Horovod',
            'release_notes': 'ReleaseNotes'
        }

        self._image_name = image_name
        self._alias = alias
        self._version = version
        self._aliases_to_add = aliases_to_add
        self._aliases_to_delete = aliases_to_delete
        self._vendor_guidance = vendor_guidance
        self._job_type = job_type
        self._ml_framework = ml_framework
        self._programming_lang = programming_lang
        self._processor = processor
        self._horovod = horovod
        self._release_notes = release_notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateImageVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateImageVersionRequest of this UpdateImageVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_name(self):
        """Gets the image_name of this UpdateImageVersionRequest.


        :return: The image_name of this UpdateImageVersionRequest.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this UpdateImageVersionRequest.


        :param image_name: The image_name of this UpdateImageVersionRequest.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")

        self._image_name = image_name

    @property
    def alias(self):
        """Gets the alias of this UpdateImageVersionRequest.


        :return: The alias of this UpdateImageVersionRequest.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this UpdateImageVersionRequest.


        :param alias: The alias of this UpdateImageVersionRequest.
        :type alias: str
        """

        self._alias = alias

    @property
    def version(self):
        """Gets the version of this UpdateImageVersionRequest.


        :return: The version of this UpdateImageVersionRequest.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdateImageVersionRequest.


        :param version: The version of this UpdateImageVersionRequest.
        :type version: int
        """

        self._version = version

    @property
    def aliases_to_add(self):
        """Gets the aliases_to_add of this UpdateImageVersionRequest.


        :return: The aliases_to_add of this UpdateImageVersionRequest.
        :rtype: List
        """
        return self._aliases_to_add

    @aliases_to_add.setter
    def aliases_to_add(self, aliases_to_add):
        """Sets the aliases_to_add of this UpdateImageVersionRequest.


        :param aliases_to_add: The aliases_to_add of this UpdateImageVersionRequest.
        :type aliases_to_add: List
        """

        self._aliases_to_add = aliases_to_add

    @property
    def aliases_to_delete(self):
        """Gets the aliases_to_delete of this UpdateImageVersionRequest.


        :return: The aliases_to_delete of this UpdateImageVersionRequest.
        :rtype: List
        """
        return self._aliases_to_delete

    @aliases_to_delete.setter
    def aliases_to_delete(self, aliases_to_delete):
        """Sets the aliases_to_delete of this UpdateImageVersionRequest.


        :param aliases_to_delete: The aliases_to_delete of this UpdateImageVersionRequest.
        :type aliases_to_delete: List
        """

        self._aliases_to_delete = aliases_to_delete

    @property
    def vendor_guidance(self):
        """Gets the vendor_guidance of this UpdateImageVersionRequest.


        :return: The vendor_guidance of this UpdateImageVersionRequest.
        :rtype: VendorGuidance
        """
        return self._vendor_guidance

    @vendor_guidance.setter
    def vendor_guidance(self, vendor_guidance):
        """Sets the vendor_guidance of this UpdateImageVersionRequest.


        :param vendor_guidance: The vendor_guidance of this UpdateImageVersionRequest.
        :type vendor_guidance: VendorGuidance
        """

        self._vendor_guidance = vendor_guidance

    @property
    def job_type(self):
        """Gets the job_type of this UpdateImageVersionRequest.


        :return: The job_type of this UpdateImageVersionRequest.
        :rtype: JobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this UpdateImageVersionRequest.


        :param job_type: The job_type of this UpdateImageVersionRequest.
        :type job_type: JobType
        """

        self._job_type = job_type

    @property
    def ml_framework(self):
        """Gets the ml_framework of this UpdateImageVersionRequest.


        :return: The ml_framework of this UpdateImageVersionRequest.
        :rtype: str
        """
        return self._ml_framework

    @ml_framework.setter
    def ml_framework(self, ml_framework):
        """Sets the ml_framework of this UpdateImageVersionRequest.


        :param ml_framework: The ml_framework of this UpdateImageVersionRequest.
        :type ml_framework: str
        """

        self._ml_framework = ml_framework

    @property
    def programming_lang(self):
        """Gets the programming_lang of this UpdateImageVersionRequest.


        :return: The programming_lang of this UpdateImageVersionRequest.
        :rtype: str
        """
        return self._programming_lang

    @programming_lang.setter
    def programming_lang(self, programming_lang):
        """Sets the programming_lang of this UpdateImageVersionRequest.


        :param programming_lang: The programming_lang of this UpdateImageVersionRequest.
        :type programming_lang: str
        """

        self._programming_lang = programming_lang

    @property
    def processor(self):
        """Gets the processor of this UpdateImageVersionRequest.


        :return: The processor of this UpdateImageVersionRequest.
        :rtype: Processor
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this UpdateImageVersionRequest.


        :param processor: The processor of this UpdateImageVersionRequest.
        :type processor: Processor
        """

        self._processor = processor

    @property
    def horovod(self):
        """Gets the horovod of this UpdateImageVersionRequest.


        :return: The horovod of this UpdateImageVersionRequest.
        :rtype: bool
        """
        return self._horovod

    @horovod.setter
    def horovod(self, horovod):
        """Sets the horovod of this UpdateImageVersionRequest.


        :param horovod: The horovod of this UpdateImageVersionRequest.
        :type horovod: bool
        """

        self._horovod = horovod

    @property
    def release_notes(self):
        """Gets the release_notes of this UpdateImageVersionRequest.


        :return: The release_notes of this UpdateImageVersionRequest.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this UpdateImageVersionRequest.


        :param release_notes: The release_notes of this UpdateImageVersionRequest.
        :type release_notes: str
        """

        self._release_notes = release_notes
