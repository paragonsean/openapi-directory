# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_inference_experiment_request_shadow_mode_config import CreateInferenceExperimentRequestShadowModeConfig
from openapi_server.models.describe_inference_experiment_response_data_storage_config import DescribeInferenceExperimentResponseDataStorageConfig
from openapi_server.models.update_inference_experiment_request_schedule import UpdateInferenceExperimentRequestSchedule
from openapi_server import util


class UpdateInferenceExperimentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, schedule: UpdateInferenceExperimentRequestSchedule=None, description: str=None, model_variants: List=None, data_storage_config: DescribeInferenceExperimentResponseDataStorageConfig=None, shadow_mode_config: CreateInferenceExperimentRequestShadowModeConfig=None):
        """UpdateInferenceExperimentRequest - a model defined in OpenAPI

        :param name: The name of this UpdateInferenceExperimentRequest.
        :param schedule: The schedule of this UpdateInferenceExperimentRequest.
        :param description: The description of this UpdateInferenceExperimentRequest.
        :param model_variants: The model_variants of this UpdateInferenceExperimentRequest.
        :param data_storage_config: The data_storage_config of this UpdateInferenceExperimentRequest.
        :param shadow_mode_config: The shadow_mode_config of this UpdateInferenceExperimentRequest.
        """
        self.openapi_types = {
            'name': str,
            'schedule': UpdateInferenceExperimentRequestSchedule,
            'description': str,
            'model_variants': List,
            'data_storage_config': DescribeInferenceExperimentResponseDataStorageConfig,
            'shadow_mode_config': CreateInferenceExperimentRequestShadowModeConfig
        }

        self.attribute_map = {
            'name': 'Name',
            'schedule': 'Schedule',
            'description': 'Description',
            'model_variants': 'ModelVariants',
            'data_storage_config': 'DataStorageConfig',
            'shadow_mode_config': 'ShadowModeConfig'
        }

        self._name = name
        self._schedule = schedule
        self._description = description
        self._model_variants = model_variants
        self._data_storage_config = data_storage_config
        self._shadow_mode_config = shadow_mode_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateInferenceExperimentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateInferenceExperimentRequest of this UpdateInferenceExperimentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateInferenceExperimentRequest.


        :return: The name of this UpdateInferenceExperimentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateInferenceExperimentRequest.


        :param name: The name of this UpdateInferenceExperimentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def schedule(self):
        """Gets the schedule of this UpdateInferenceExperimentRequest.


        :return: The schedule of this UpdateInferenceExperimentRequest.
        :rtype: UpdateInferenceExperimentRequestSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this UpdateInferenceExperimentRequest.


        :param schedule: The schedule of this UpdateInferenceExperimentRequest.
        :type schedule: UpdateInferenceExperimentRequestSchedule
        """

        self._schedule = schedule

    @property
    def description(self):
        """Gets the description of this UpdateInferenceExperimentRequest.


        :return: The description of this UpdateInferenceExperimentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateInferenceExperimentRequest.


        :param description: The description of this UpdateInferenceExperimentRequest.
        :type description: str
        """

        self._description = description

    @property
    def model_variants(self):
        """Gets the model_variants of this UpdateInferenceExperimentRequest.


        :return: The model_variants of this UpdateInferenceExperimentRequest.
        :rtype: List
        """
        return self._model_variants

    @model_variants.setter
    def model_variants(self, model_variants):
        """Sets the model_variants of this UpdateInferenceExperimentRequest.


        :param model_variants: The model_variants of this UpdateInferenceExperimentRequest.
        :type model_variants: List
        """

        self._model_variants = model_variants

    @property
    def data_storage_config(self):
        """Gets the data_storage_config of this UpdateInferenceExperimentRequest.


        :return: The data_storage_config of this UpdateInferenceExperimentRequest.
        :rtype: DescribeInferenceExperimentResponseDataStorageConfig
        """
        return self._data_storage_config

    @data_storage_config.setter
    def data_storage_config(self, data_storage_config):
        """Sets the data_storage_config of this UpdateInferenceExperimentRequest.


        :param data_storage_config: The data_storage_config of this UpdateInferenceExperimentRequest.
        :type data_storage_config: DescribeInferenceExperimentResponseDataStorageConfig
        """

        self._data_storage_config = data_storage_config

    @property
    def shadow_mode_config(self):
        """Gets the shadow_mode_config of this UpdateInferenceExperimentRequest.


        :return: The shadow_mode_config of this UpdateInferenceExperimentRequest.
        :rtype: CreateInferenceExperimentRequestShadowModeConfig
        """
        return self._shadow_mode_config

    @shadow_mode_config.setter
    def shadow_mode_config(self, shadow_mode_config):
        """Sets the shadow_mode_config of this UpdateInferenceExperimentRequest.


        :param shadow_mode_config: The shadow_mode_config of this UpdateInferenceExperimentRequest.
        :type shadow_mode_config: CreateInferenceExperimentRequestShadowModeConfig
        """

        self._shadow_mode_config = shadow_mode_config
