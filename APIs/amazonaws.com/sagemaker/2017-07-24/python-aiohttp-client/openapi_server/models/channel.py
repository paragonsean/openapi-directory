# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_data_source import ChannelDataSource
from openapi_server.models.channel_shuffle_config import ChannelShuffleConfig
from openapi_server.models.compression_type import CompressionType
from openapi_server.models.record_wrapper import RecordWrapper
from openapi_server.models.training_input_mode import TrainingInputMode
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_name: str=None, data_source: ChannelDataSource=None, content_type: str=None, compression_type: CompressionType=None, record_wrapper_type: RecordWrapper=None, input_mode: TrainingInputMode=None, shuffle_config: ChannelShuffleConfig=None):
        """Channel - a model defined in OpenAPI

        :param channel_name: The channel_name of this Channel.
        :param data_source: The data_source of this Channel.
        :param content_type: The content_type of this Channel.
        :param compression_type: The compression_type of this Channel.
        :param record_wrapper_type: The record_wrapper_type of this Channel.
        :param input_mode: The input_mode of this Channel.
        :param shuffle_config: The shuffle_config of this Channel.
        """
        self.openapi_types = {
            'channel_name': str,
            'data_source': ChannelDataSource,
            'content_type': str,
            'compression_type': CompressionType,
            'record_wrapper_type': RecordWrapper,
            'input_mode': TrainingInputMode,
            'shuffle_config': ChannelShuffleConfig
        }

        self.attribute_map = {
            'channel_name': 'ChannelName',
            'data_source': 'DataSource',
            'content_type': 'ContentType',
            'compression_type': 'CompressionType',
            'record_wrapper_type': 'RecordWrapperType',
            'input_mode': 'InputMode',
            'shuffle_config': 'ShuffleConfig'
        }

        self._channel_name = channel_name
        self._data_source = data_source
        self._content_type = content_type
        self._compression_type = compression_type
        self._record_wrapper_type = record_wrapper_type
        self._input_mode = input_mode
        self._shuffle_config = shuffle_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_name(self):
        """Gets the channel_name of this Channel.


        :return: The channel_name of this Channel.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this Channel.


        :param channel_name: The channel_name of this Channel.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")

        self._channel_name = channel_name

    @property
    def data_source(self):
        """Gets the data_source of this Channel.


        :return: The data_source of this Channel.
        :rtype: ChannelDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this Channel.


        :param data_source: The data_source of this Channel.
        :type data_source: ChannelDataSource
        """
        if data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")

        self._data_source = data_source

    @property
    def content_type(self):
        """Gets the content_type of this Channel.


        :return: The content_type of this Channel.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Channel.


        :param content_type: The content_type of this Channel.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def compression_type(self):
        """Gets the compression_type of this Channel.


        :return: The compression_type of this Channel.
        :rtype: CompressionType
        """
        return self._compression_type

    @compression_type.setter
    def compression_type(self, compression_type):
        """Sets the compression_type of this Channel.


        :param compression_type: The compression_type of this Channel.
        :type compression_type: CompressionType
        """

        self._compression_type = compression_type

    @property
    def record_wrapper_type(self):
        """Gets the record_wrapper_type of this Channel.


        :return: The record_wrapper_type of this Channel.
        :rtype: RecordWrapper
        """
        return self._record_wrapper_type

    @record_wrapper_type.setter
    def record_wrapper_type(self, record_wrapper_type):
        """Sets the record_wrapper_type of this Channel.


        :param record_wrapper_type: The record_wrapper_type of this Channel.
        :type record_wrapper_type: RecordWrapper
        """

        self._record_wrapper_type = record_wrapper_type

    @property
    def input_mode(self):
        """Gets the input_mode of this Channel.


        :return: The input_mode of this Channel.
        :rtype: TrainingInputMode
        """
        return self._input_mode

    @input_mode.setter
    def input_mode(self, input_mode):
        """Sets the input_mode of this Channel.


        :param input_mode: The input_mode of this Channel.
        :type input_mode: TrainingInputMode
        """

        self._input_mode = input_mode

    @property
    def shuffle_config(self):
        """Gets the shuffle_config of this Channel.


        :return: The shuffle_config of this Channel.
        :rtype: ChannelShuffleConfig
        """
        return self._shuffle_config

    @shuffle_config.setter
    def shuffle_config(self, shuffle_config):
        """Sets the shuffle_config of this Channel.


        :param shuffle_config: The shuffle_config of this Channel.
        :type shuffle_config: ChannelShuffleConfig
        """

        self._shuffle_config = shuffle_config
