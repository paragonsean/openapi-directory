# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_subscribed_workteam_response_subscribed_workteam import DescribeSubscribedWorkteamResponseSubscribedWorkteam
from openapi_server import util


class DescribeSubscribedWorkteamResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscribed_workteam: DescribeSubscribedWorkteamResponseSubscribedWorkteam=None):
        """DescribeSubscribedWorkteamResponse - a model defined in OpenAPI

        :param subscribed_workteam: The subscribed_workteam of this DescribeSubscribedWorkteamResponse.
        """
        self.openapi_types = {
            'subscribed_workteam': DescribeSubscribedWorkteamResponseSubscribedWorkteam
        }

        self.attribute_map = {
            'subscribed_workteam': 'SubscribedWorkteam'
        }

        self._subscribed_workteam = subscribed_workteam

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeSubscribedWorkteamResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeSubscribedWorkteamResponse of this DescribeSubscribedWorkteamResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscribed_workteam(self):
        """Gets the subscribed_workteam of this DescribeSubscribedWorkteamResponse.


        :return: The subscribed_workteam of this DescribeSubscribedWorkteamResponse.
        :rtype: DescribeSubscribedWorkteamResponseSubscribedWorkteam
        """
        return self._subscribed_workteam

    @subscribed_workteam.setter
    def subscribed_workteam(self, subscribed_workteam):
        """Sets the subscribed_workteam of this DescribeSubscribedWorkteamResponse.


        :param subscribed_workteam: The subscribed_workteam of this DescribeSubscribedWorkteamResponse.
        :type subscribed_workteam: DescribeSubscribedWorkteamResponseSubscribedWorkteam
        """
        if subscribed_workteam is None:
            raise ValueError("Invalid value for `subscribed_workteam`, must not be `None`")

        self._subscribed_workteam = subscribed_workteam
