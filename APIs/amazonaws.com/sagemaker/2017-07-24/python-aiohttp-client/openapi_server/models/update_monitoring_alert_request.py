# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateMonitoringAlertRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, monitoring_schedule_name: str=None, monitoring_alert_name: str=None, datapoints_to_alert: int=None, evaluation_period: int=None):
        """UpdateMonitoringAlertRequest - a model defined in OpenAPI

        :param monitoring_schedule_name: The monitoring_schedule_name of this UpdateMonitoringAlertRequest.
        :param monitoring_alert_name: The monitoring_alert_name of this UpdateMonitoringAlertRequest.
        :param datapoints_to_alert: The datapoints_to_alert of this UpdateMonitoringAlertRequest.
        :param evaluation_period: The evaluation_period of this UpdateMonitoringAlertRequest.
        """
        self.openapi_types = {
            'monitoring_schedule_name': str,
            'monitoring_alert_name': str,
            'datapoints_to_alert': int,
            'evaluation_period': int
        }

        self.attribute_map = {
            'monitoring_schedule_name': 'MonitoringScheduleName',
            'monitoring_alert_name': 'MonitoringAlertName',
            'datapoints_to_alert': 'DatapointsToAlert',
            'evaluation_period': 'EvaluationPeriod'
        }

        self._monitoring_schedule_name = monitoring_schedule_name
        self._monitoring_alert_name = monitoring_alert_name
        self._datapoints_to_alert = datapoints_to_alert
        self._evaluation_period = evaluation_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMonitoringAlertRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMonitoringAlertRequest of this UpdateMonitoringAlertRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monitoring_schedule_name(self):
        """Gets the monitoring_schedule_name of this UpdateMonitoringAlertRequest.


        :return: The monitoring_schedule_name of this UpdateMonitoringAlertRequest.
        :rtype: str
        """
        return self._monitoring_schedule_name

    @monitoring_schedule_name.setter
    def monitoring_schedule_name(self, monitoring_schedule_name):
        """Sets the monitoring_schedule_name of this UpdateMonitoringAlertRequest.


        :param monitoring_schedule_name: The monitoring_schedule_name of this UpdateMonitoringAlertRequest.
        :type monitoring_schedule_name: str
        """
        if monitoring_schedule_name is None:
            raise ValueError("Invalid value for `monitoring_schedule_name`, must not be `None`")

        self._monitoring_schedule_name = monitoring_schedule_name

    @property
    def monitoring_alert_name(self):
        """Gets the monitoring_alert_name of this UpdateMonitoringAlertRequest.


        :return: The monitoring_alert_name of this UpdateMonitoringAlertRequest.
        :rtype: str
        """
        return self._monitoring_alert_name

    @monitoring_alert_name.setter
    def monitoring_alert_name(self, monitoring_alert_name):
        """Sets the monitoring_alert_name of this UpdateMonitoringAlertRequest.


        :param monitoring_alert_name: The monitoring_alert_name of this UpdateMonitoringAlertRequest.
        :type monitoring_alert_name: str
        """
        if monitoring_alert_name is None:
            raise ValueError("Invalid value for `monitoring_alert_name`, must not be `None`")

        self._monitoring_alert_name = monitoring_alert_name

    @property
    def datapoints_to_alert(self):
        """Gets the datapoints_to_alert of this UpdateMonitoringAlertRequest.


        :return: The datapoints_to_alert of this UpdateMonitoringAlertRequest.
        :rtype: int
        """
        return self._datapoints_to_alert

    @datapoints_to_alert.setter
    def datapoints_to_alert(self, datapoints_to_alert):
        """Sets the datapoints_to_alert of this UpdateMonitoringAlertRequest.


        :param datapoints_to_alert: The datapoints_to_alert of this UpdateMonitoringAlertRequest.
        :type datapoints_to_alert: int
        """
        if datapoints_to_alert is None:
            raise ValueError("Invalid value for `datapoints_to_alert`, must not be `None`")

        self._datapoints_to_alert = datapoints_to_alert

    @property
    def evaluation_period(self):
        """Gets the evaluation_period of this UpdateMonitoringAlertRequest.


        :return: The evaluation_period of this UpdateMonitoringAlertRequest.
        :rtype: int
        """
        return self._evaluation_period

    @evaluation_period.setter
    def evaluation_period(self, evaluation_period):
        """Sets the evaluation_period of this UpdateMonitoringAlertRequest.


        :param evaluation_period: The evaluation_period of this UpdateMonitoringAlertRequest.
        :type evaluation_period: int
        """
        if evaluation_period is None:
            raise ValueError("Invalid value for `evaluation_period`, must not be `None`")

        self._evaluation_period = evaluation_period
