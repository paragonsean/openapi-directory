# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DebugHookConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_path: str=None, s3_output_path: str=None, hook_parameters: Dict=None, collection_configurations: List=None):
        """DebugHookConfig - a model defined in OpenAPI

        :param local_path: The local_path of this DebugHookConfig.
        :param s3_output_path: The s3_output_path of this DebugHookConfig.
        :param hook_parameters: The hook_parameters of this DebugHookConfig.
        :param collection_configurations: The collection_configurations of this DebugHookConfig.
        """
        self.openapi_types = {
            'local_path': str,
            's3_output_path': str,
            'hook_parameters': Dict,
            'collection_configurations': List
        }

        self.attribute_map = {
            'local_path': 'LocalPath',
            's3_output_path': 'S3OutputPath',
            'hook_parameters': 'HookParameters',
            'collection_configurations': 'CollectionConfigurations'
        }

        self._local_path = local_path
        self._s3_output_path = s3_output_path
        self._hook_parameters = hook_parameters
        self._collection_configurations = collection_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DebugHookConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DebugHookConfig of this DebugHookConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_path(self):
        """Gets the local_path of this DebugHookConfig.


        :return: The local_path of this DebugHookConfig.
        :rtype: str
        """
        return self._local_path

    @local_path.setter
    def local_path(self, local_path):
        """Sets the local_path of this DebugHookConfig.


        :param local_path: The local_path of this DebugHookConfig.
        :type local_path: str
        """

        self._local_path = local_path

    @property
    def s3_output_path(self):
        """Gets the s3_output_path of this DebugHookConfig.


        :return: The s3_output_path of this DebugHookConfig.
        :rtype: str
        """
        return self._s3_output_path

    @s3_output_path.setter
    def s3_output_path(self, s3_output_path):
        """Sets the s3_output_path of this DebugHookConfig.


        :param s3_output_path: The s3_output_path of this DebugHookConfig.
        :type s3_output_path: str
        """
        if s3_output_path is None:
            raise ValueError("Invalid value for `s3_output_path`, must not be `None`")

        self._s3_output_path = s3_output_path

    @property
    def hook_parameters(self):
        """Gets the hook_parameters of this DebugHookConfig.


        :return: The hook_parameters of this DebugHookConfig.
        :rtype: Dict
        """
        return self._hook_parameters

    @hook_parameters.setter
    def hook_parameters(self, hook_parameters):
        """Sets the hook_parameters of this DebugHookConfig.


        :param hook_parameters: The hook_parameters of this DebugHookConfig.
        :type hook_parameters: Dict
        """

        self._hook_parameters = hook_parameters

    @property
    def collection_configurations(self):
        """Gets the collection_configurations of this DebugHookConfig.


        :return: The collection_configurations of this DebugHookConfig.
        :rtype: List
        """
        return self._collection_configurations

    @collection_configurations.setter
    def collection_configurations(self, collection_configurations):
        """Sets the collection_configurations of this DebugHookConfig.


        :param collection_configurations: The collection_configurations of this DebugHookConfig.
        :type collection_configurations: List
        """

        self._collection_configurations = collection_configurations
