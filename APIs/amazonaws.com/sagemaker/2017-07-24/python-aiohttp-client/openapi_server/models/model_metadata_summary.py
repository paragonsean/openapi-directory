# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelMetadataSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, framework: str=None, task: str=None, model: str=None, framework_version: str=None):
        """ModelMetadataSummary - a model defined in OpenAPI

        :param domain: The domain of this ModelMetadataSummary.
        :param framework: The framework of this ModelMetadataSummary.
        :param task: The task of this ModelMetadataSummary.
        :param model: The model of this ModelMetadataSummary.
        :param framework_version: The framework_version of this ModelMetadataSummary.
        """
        self.openapi_types = {
            'domain': str,
            'framework': str,
            'task': str,
            'model': str,
            'framework_version': str
        }

        self.attribute_map = {
            'domain': 'Domain',
            'framework': 'Framework',
            'task': 'Task',
            'model': 'Model',
            'framework_version': 'FrameworkVersion'
        }

        self._domain = domain
        self._framework = framework
        self._task = task
        self._model = model
        self._framework_version = framework_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelMetadataSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelMetadataSummary of this ModelMetadataSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this ModelMetadataSummary.


        :return: The domain of this ModelMetadataSummary.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ModelMetadataSummary.


        :param domain: The domain of this ModelMetadataSummary.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def framework(self):
        """Gets the framework of this ModelMetadataSummary.


        :return: The framework of this ModelMetadataSummary.
        :rtype: str
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this ModelMetadataSummary.


        :param framework: The framework of this ModelMetadataSummary.
        :type framework: str
        """
        if framework is None:
            raise ValueError("Invalid value for `framework`, must not be `None`")

        self._framework = framework

    @property
    def task(self):
        """Gets the task of this ModelMetadataSummary.


        :return: The task of this ModelMetadataSummary.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this ModelMetadataSummary.


        :param task: The task of this ModelMetadataSummary.
        :type task: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")

        self._task = task

    @property
    def model(self):
        """Gets the model of this ModelMetadataSummary.


        :return: The model of this ModelMetadataSummary.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModelMetadataSummary.


        :param model: The model of this ModelMetadataSummary.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def framework_version(self):
        """Gets the framework_version of this ModelMetadataSummary.


        :return: The framework_version of this ModelMetadataSummary.
        :rtype: str
        """
        return self._framework_version

    @framework_version.setter
    def framework_version(self, framework_version):
        """Sets the framework_version of this ModelMetadataSummary.


        :param framework_version: The framework_version of this ModelMetadataSummary.
        :type framework_version: str
        """
        if framework_version is None:
            raise ValueError("Invalid value for `framework_version`, must not be `None`")

        self._framework_version = framework_version
