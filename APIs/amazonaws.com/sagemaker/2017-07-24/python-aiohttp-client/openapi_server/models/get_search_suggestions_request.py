# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_search_suggestions_request_suggestion_query import GetSearchSuggestionsRequestSuggestionQuery
from openapi_server.models.resource_type import ResourceType
from openapi_server import util


class GetSearchSuggestionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource: ResourceType=None, suggestion_query: GetSearchSuggestionsRequestSuggestionQuery=None):
        """GetSearchSuggestionsRequest - a model defined in OpenAPI

        :param resource: The resource of this GetSearchSuggestionsRequest.
        :param suggestion_query: The suggestion_query of this GetSearchSuggestionsRequest.
        """
        self.openapi_types = {
            'resource': ResourceType,
            'suggestion_query': GetSearchSuggestionsRequestSuggestionQuery
        }

        self.attribute_map = {
            'resource': 'Resource',
            'suggestion_query': 'SuggestionQuery'
        }

        self._resource = resource
        self._suggestion_query = suggestion_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSearchSuggestionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSearchSuggestionsRequest of this GetSearchSuggestionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource(self):
        """Gets the resource of this GetSearchSuggestionsRequest.


        :return: The resource of this GetSearchSuggestionsRequest.
        :rtype: ResourceType
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this GetSearchSuggestionsRequest.


        :param resource: The resource of this GetSearchSuggestionsRequest.
        :type resource: ResourceType
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def suggestion_query(self):
        """Gets the suggestion_query of this GetSearchSuggestionsRequest.


        :return: The suggestion_query of this GetSearchSuggestionsRequest.
        :rtype: GetSearchSuggestionsRequestSuggestionQuery
        """
        return self._suggestion_query

    @suggestion_query.setter
    def suggestion_query(self, suggestion_query):
        """Sets the suggestion_query of this GetSearchSuggestionsRequest.


        :param suggestion_query: The suggestion_query of this GetSearchSuggestionsRequest.
        :type suggestion_query: GetSearchSuggestionsRequestSuggestionQuery
        """

        self._suggestion_query = suggestion_query
