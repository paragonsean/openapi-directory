# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_subset_type import DeviceSubsetType
from openapi_server import util


class DeploymentStageDeviceSelectionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_subset_type: DeviceSubsetType=None, percentage: int=None, device_names: List=None, device_name_contains: str=None):
        """DeploymentStageDeviceSelectionConfig - a model defined in OpenAPI

        :param device_subset_type: The device_subset_type of this DeploymentStageDeviceSelectionConfig.
        :param percentage: The percentage of this DeploymentStageDeviceSelectionConfig.
        :param device_names: The device_names of this DeploymentStageDeviceSelectionConfig.
        :param device_name_contains: The device_name_contains of this DeploymentStageDeviceSelectionConfig.
        """
        self.openapi_types = {
            'device_subset_type': DeviceSubsetType,
            'percentage': int,
            'device_names': List,
            'device_name_contains': str
        }

        self.attribute_map = {
            'device_subset_type': 'DeviceSubsetType',
            'percentage': 'Percentage',
            'device_names': 'DeviceNames',
            'device_name_contains': 'DeviceNameContains'
        }

        self._device_subset_type = device_subset_type
        self._percentage = percentage
        self._device_names = device_names
        self._device_name_contains = device_name_contains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentStageDeviceSelectionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentStage_DeviceSelectionConfig of this DeploymentStageDeviceSelectionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_subset_type(self):
        """Gets the device_subset_type of this DeploymentStageDeviceSelectionConfig.


        :return: The device_subset_type of this DeploymentStageDeviceSelectionConfig.
        :rtype: DeviceSubsetType
        """
        return self._device_subset_type

    @device_subset_type.setter
    def device_subset_type(self, device_subset_type):
        """Sets the device_subset_type of this DeploymentStageDeviceSelectionConfig.


        :param device_subset_type: The device_subset_type of this DeploymentStageDeviceSelectionConfig.
        :type device_subset_type: DeviceSubsetType
        """
        if device_subset_type is None:
            raise ValueError("Invalid value for `device_subset_type`, must not be `None`")

        self._device_subset_type = device_subset_type

    @property
    def percentage(self):
        """Gets the percentage of this DeploymentStageDeviceSelectionConfig.


        :return: The percentage of this DeploymentStageDeviceSelectionConfig.
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this DeploymentStageDeviceSelectionConfig.


        :param percentage: The percentage of this DeploymentStageDeviceSelectionConfig.
        :type percentage: int
        """

        self._percentage = percentage

    @property
    def device_names(self):
        """Gets the device_names of this DeploymentStageDeviceSelectionConfig.


        :return: The device_names of this DeploymentStageDeviceSelectionConfig.
        :rtype: List
        """
        return self._device_names

    @device_names.setter
    def device_names(self, device_names):
        """Sets the device_names of this DeploymentStageDeviceSelectionConfig.


        :param device_names: The device_names of this DeploymentStageDeviceSelectionConfig.
        :type device_names: List
        """

        self._device_names = device_names

    @property
    def device_name_contains(self):
        """Gets the device_name_contains of this DeploymentStageDeviceSelectionConfig.


        :return: The device_name_contains of this DeploymentStageDeviceSelectionConfig.
        :rtype: str
        """
        return self._device_name_contains

    @device_name_contains.setter
    def device_name_contains(self, device_name_contains):
        """Sets the device_name_contains of this DeploymentStageDeviceSelectionConfig.


        :param device_name_contains: The device_name_contains of this DeploymentStageDeviceSelectionConfig.
        :type device_name_contains: str
        """

        self._device_name_contains = device_name_contains
