# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.traffic_routing_config_canary_size import TrafficRoutingConfigCanarySize
from openapi_server.models.traffic_routing_config_linear_step_size import TrafficRoutingConfigLinearStepSize
from openapi_server.models.traffic_routing_config_type import TrafficRoutingConfigType
from openapi_server import util


class TrafficRoutingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: TrafficRoutingConfigType=None, wait_interval_in_seconds: int=None, canary_size: TrafficRoutingConfigCanarySize=None, linear_step_size: TrafficRoutingConfigLinearStepSize=None):
        """TrafficRoutingConfig - a model defined in OpenAPI

        :param type: The type of this TrafficRoutingConfig.
        :param wait_interval_in_seconds: The wait_interval_in_seconds of this TrafficRoutingConfig.
        :param canary_size: The canary_size of this TrafficRoutingConfig.
        :param linear_step_size: The linear_step_size of this TrafficRoutingConfig.
        """
        self.openapi_types = {
            'type': TrafficRoutingConfigType,
            'wait_interval_in_seconds': int,
            'canary_size': TrafficRoutingConfigCanarySize,
            'linear_step_size': TrafficRoutingConfigLinearStepSize
        }

        self.attribute_map = {
            'type': 'Type',
            'wait_interval_in_seconds': 'WaitIntervalInSeconds',
            'canary_size': 'CanarySize',
            'linear_step_size': 'LinearStepSize'
        }

        self._type = type
        self._wait_interval_in_seconds = wait_interval_in_seconds
        self._canary_size = canary_size
        self._linear_step_size = linear_step_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficRoutingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficRoutingConfig of this TrafficRoutingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this TrafficRoutingConfig.


        :return: The type of this TrafficRoutingConfig.
        :rtype: TrafficRoutingConfigType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TrafficRoutingConfig.


        :param type: The type of this TrafficRoutingConfig.
        :type type: TrafficRoutingConfigType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def wait_interval_in_seconds(self):
        """Gets the wait_interval_in_seconds of this TrafficRoutingConfig.


        :return: The wait_interval_in_seconds of this TrafficRoutingConfig.
        :rtype: int
        """
        return self._wait_interval_in_seconds

    @wait_interval_in_seconds.setter
    def wait_interval_in_seconds(self, wait_interval_in_seconds):
        """Sets the wait_interval_in_seconds of this TrafficRoutingConfig.


        :param wait_interval_in_seconds: The wait_interval_in_seconds of this TrafficRoutingConfig.
        :type wait_interval_in_seconds: int
        """
        if wait_interval_in_seconds is None:
            raise ValueError("Invalid value for `wait_interval_in_seconds`, must not be `None`")

        self._wait_interval_in_seconds = wait_interval_in_seconds

    @property
    def canary_size(self):
        """Gets the canary_size of this TrafficRoutingConfig.


        :return: The canary_size of this TrafficRoutingConfig.
        :rtype: TrafficRoutingConfigCanarySize
        """
        return self._canary_size

    @canary_size.setter
    def canary_size(self, canary_size):
        """Sets the canary_size of this TrafficRoutingConfig.


        :param canary_size: The canary_size of this TrafficRoutingConfig.
        :type canary_size: TrafficRoutingConfigCanarySize
        """

        self._canary_size = canary_size

    @property
    def linear_step_size(self):
        """Gets the linear_step_size of this TrafficRoutingConfig.


        :return: The linear_step_size of this TrafficRoutingConfig.
        :rtype: TrafficRoutingConfigLinearStepSize
        """
        return self._linear_step_size

    @linear_step_size.setter
    def linear_step_size(self, linear_step_size):
        """Sets the linear_step_size of this TrafficRoutingConfig.


        :param linear_step_size: The linear_step_size of this TrafficRoutingConfig.
        :type linear_step_size: TrafficRoutingConfigLinearStepSize
        """

        self._linear_step_size = linear_step_size
