# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecommendationMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_per_hour: float=None, cost_per_inference: float=None, max_invocations: int=None, model_latency: int=None, cpu_utilization: float=None, memory_utilization: float=None, model_setup_time: int=None):
        """RecommendationMetrics - a model defined in OpenAPI

        :param cost_per_hour: The cost_per_hour of this RecommendationMetrics.
        :param cost_per_inference: The cost_per_inference of this RecommendationMetrics.
        :param max_invocations: The max_invocations of this RecommendationMetrics.
        :param model_latency: The model_latency of this RecommendationMetrics.
        :param cpu_utilization: The cpu_utilization of this RecommendationMetrics.
        :param memory_utilization: The memory_utilization of this RecommendationMetrics.
        :param model_setup_time: The model_setup_time of this RecommendationMetrics.
        """
        self.openapi_types = {
            'cost_per_hour': float,
            'cost_per_inference': float,
            'max_invocations': int,
            'model_latency': int,
            'cpu_utilization': float,
            'memory_utilization': float,
            'model_setup_time': int
        }

        self.attribute_map = {
            'cost_per_hour': 'CostPerHour',
            'cost_per_inference': 'CostPerInference',
            'max_invocations': 'MaxInvocations',
            'model_latency': 'ModelLatency',
            'cpu_utilization': 'CpuUtilization',
            'memory_utilization': 'MemoryUtilization',
            'model_setup_time': 'ModelSetupTime'
        }

        self._cost_per_hour = cost_per_hour
        self._cost_per_inference = cost_per_inference
        self._max_invocations = max_invocations
        self._model_latency = model_latency
        self._cpu_utilization = cpu_utilization
        self._memory_utilization = memory_utilization
        self._model_setup_time = model_setup_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationMetrics of this RecommendationMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_per_hour(self):
        """Gets the cost_per_hour of this RecommendationMetrics.


        :return: The cost_per_hour of this RecommendationMetrics.
        :rtype: float
        """
        return self._cost_per_hour

    @cost_per_hour.setter
    def cost_per_hour(self, cost_per_hour):
        """Sets the cost_per_hour of this RecommendationMetrics.


        :param cost_per_hour: The cost_per_hour of this RecommendationMetrics.
        :type cost_per_hour: float
        """
        if cost_per_hour is None:
            raise ValueError("Invalid value for `cost_per_hour`, must not be `None`")

        self._cost_per_hour = cost_per_hour

    @property
    def cost_per_inference(self):
        """Gets the cost_per_inference of this RecommendationMetrics.


        :return: The cost_per_inference of this RecommendationMetrics.
        :rtype: float
        """
        return self._cost_per_inference

    @cost_per_inference.setter
    def cost_per_inference(self, cost_per_inference):
        """Sets the cost_per_inference of this RecommendationMetrics.


        :param cost_per_inference: The cost_per_inference of this RecommendationMetrics.
        :type cost_per_inference: float
        """
        if cost_per_inference is None:
            raise ValueError("Invalid value for `cost_per_inference`, must not be `None`")

        self._cost_per_inference = cost_per_inference

    @property
    def max_invocations(self):
        """Gets the max_invocations of this RecommendationMetrics.


        :return: The max_invocations of this RecommendationMetrics.
        :rtype: int
        """
        return self._max_invocations

    @max_invocations.setter
    def max_invocations(self, max_invocations):
        """Sets the max_invocations of this RecommendationMetrics.


        :param max_invocations: The max_invocations of this RecommendationMetrics.
        :type max_invocations: int
        """
        if max_invocations is None:
            raise ValueError("Invalid value for `max_invocations`, must not be `None`")

        self._max_invocations = max_invocations

    @property
    def model_latency(self):
        """Gets the model_latency of this RecommendationMetrics.


        :return: The model_latency of this RecommendationMetrics.
        :rtype: int
        """
        return self._model_latency

    @model_latency.setter
    def model_latency(self, model_latency):
        """Sets the model_latency of this RecommendationMetrics.


        :param model_latency: The model_latency of this RecommendationMetrics.
        :type model_latency: int
        """
        if model_latency is None:
            raise ValueError("Invalid value for `model_latency`, must not be `None`")

        self._model_latency = model_latency

    @property
    def cpu_utilization(self):
        """Gets the cpu_utilization of this RecommendationMetrics.


        :return: The cpu_utilization of this RecommendationMetrics.
        :rtype: float
        """
        return self._cpu_utilization

    @cpu_utilization.setter
    def cpu_utilization(self, cpu_utilization):
        """Sets the cpu_utilization of this RecommendationMetrics.


        :param cpu_utilization: The cpu_utilization of this RecommendationMetrics.
        :type cpu_utilization: float
        """

        self._cpu_utilization = cpu_utilization

    @property
    def memory_utilization(self):
        """Gets the memory_utilization of this RecommendationMetrics.


        :return: The memory_utilization of this RecommendationMetrics.
        :rtype: float
        """
        return self._memory_utilization

    @memory_utilization.setter
    def memory_utilization(self, memory_utilization):
        """Sets the memory_utilization of this RecommendationMetrics.


        :param memory_utilization: The memory_utilization of this RecommendationMetrics.
        :type memory_utilization: float
        """

        self._memory_utilization = memory_utilization

    @property
    def model_setup_time(self):
        """Gets the model_setup_time of this RecommendationMetrics.


        :return: The model_setup_time of this RecommendationMetrics.
        :rtype: int
        """
        return self._model_setup_time

    @model_setup_time.setter
    def model_setup_time(self, model_setup_time):
        """Sets the model_setup_time of this RecommendationMetrics.


        :param model_setup_time: The model_setup_time of this RecommendationMetrics.
        :type model_setup_time: int
        """

        self._model_setup_time = model_setup_time
