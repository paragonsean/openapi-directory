# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_user_profile_request_user_settings import CreateUserProfileRequestUserSettings
from openapi_server import util


class UpdateUserProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_id: str=None, user_profile_name: str=None, user_settings: CreateUserProfileRequestUserSettings=None):
        """UpdateUserProfileRequest - a model defined in OpenAPI

        :param domain_id: The domain_id of this UpdateUserProfileRequest.
        :param user_profile_name: The user_profile_name of this UpdateUserProfileRequest.
        :param user_settings: The user_settings of this UpdateUserProfileRequest.
        """
        self.openapi_types = {
            'domain_id': str,
            'user_profile_name': str,
            'user_settings': CreateUserProfileRequestUserSettings
        }

        self.attribute_map = {
            'domain_id': 'DomainId',
            'user_profile_name': 'UserProfileName',
            'user_settings': 'UserSettings'
        }

        self._domain_id = domain_id
        self._user_profile_name = user_profile_name
        self._user_settings = user_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUserProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUserProfileRequest of this UpdateUserProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_id(self):
        """Gets the domain_id of this UpdateUserProfileRequest.


        :return: The domain_id of this UpdateUserProfileRequest.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this UpdateUserProfileRequest.


        :param domain_id: The domain_id of this UpdateUserProfileRequest.
        :type domain_id: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")

        self._domain_id = domain_id

    @property
    def user_profile_name(self):
        """Gets the user_profile_name of this UpdateUserProfileRequest.


        :return: The user_profile_name of this UpdateUserProfileRequest.
        :rtype: str
        """
        return self._user_profile_name

    @user_profile_name.setter
    def user_profile_name(self, user_profile_name):
        """Sets the user_profile_name of this UpdateUserProfileRequest.


        :param user_profile_name: The user_profile_name of this UpdateUserProfileRequest.
        :type user_profile_name: str
        """
        if user_profile_name is None:
            raise ValueError("Invalid value for `user_profile_name`, must not be `None`")

        self._user_profile_name = user_profile_name

    @property
    def user_settings(self):
        """Gets the user_settings of this UpdateUserProfileRequest.


        :return: The user_settings of this UpdateUserProfileRequest.
        :rtype: CreateUserProfileRequestUserSettings
        """
        return self._user_settings

    @user_settings.setter
    def user_settings(self, user_settings):
        """Sets the user_settings of this UpdateUserProfileRequest.


        :param user_settings: The user_settings of this UpdateUserProfileRequest.
        :type user_settings: CreateUserProfileRequestUserSettings
        """

        self._user_settings = user_settings
