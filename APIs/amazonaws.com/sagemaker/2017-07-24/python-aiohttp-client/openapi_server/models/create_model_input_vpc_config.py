# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateModelInputVpcConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, security_group_ids: List=None, subnets: List=None):
        """CreateModelInputVpcConfig - a model defined in OpenAPI

        :param security_group_ids: The security_group_ids of this CreateModelInputVpcConfig.
        :param subnets: The subnets of this CreateModelInputVpcConfig.
        """
        self.openapi_types = {
            'security_group_ids': List,
            'subnets': List
        }

        self.attribute_map = {
            'security_group_ids': 'SecurityGroupIds',
            'subnets': 'Subnets'
        }

        self._security_group_ids = security_group_ids
        self._subnets = subnets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateModelInputVpcConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateModelInput_VpcConfig of this CreateModelInputVpcConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this CreateModelInputVpcConfig.


        :return: The security_group_ids of this CreateModelInputVpcConfig.
        :rtype: List
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this CreateModelInputVpcConfig.


        :param security_group_ids: The security_group_ids of this CreateModelInputVpcConfig.
        :type security_group_ids: List
        """
        if security_group_ids is None:
            raise ValueError("Invalid value for `security_group_ids`, must not be `None`")

        self._security_group_ids = security_group_ids

    @property
    def subnets(self):
        """Gets the subnets of this CreateModelInputVpcConfig.


        :return: The subnets of this CreateModelInputVpcConfig.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this CreateModelInputVpcConfig.


        :param subnets: The subnets of this CreateModelInputVpcConfig.
        :type subnets: List
        """
        if subnets is None:
            raise ValueError("Invalid value for `subnets`, must not be `None`")

        self._subnets = subnets
