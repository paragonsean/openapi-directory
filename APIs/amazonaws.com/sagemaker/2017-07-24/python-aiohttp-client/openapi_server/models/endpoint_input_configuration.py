# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_input_configuration_environment_parameter_ranges import EndpointInputConfigurationEnvironmentParameterRanges
from openapi_server.models.production_variant_instance_type import ProductionVariantInstanceType
from openapi_server.models.production_variant_serverless_config import ProductionVariantServerlessConfig
from openapi_server import util


class EndpointInputConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_type: ProductionVariantInstanceType=None, inference_specification_name: str=None, environment_parameter_ranges: EndpointInputConfigurationEnvironmentParameterRanges=None, serverless_config: ProductionVariantServerlessConfig=None):
        """EndpointInputConfiguration - a model defined in OpenAPI

        :param instance_type: The instance_type of this EndpointInputConfiguration.
        :param inference_specification_name: The inference_specification_name of this EndpointInputConfiguration.
        :param environment_parameter_ranges: The environment_parameter_ranges of this EndpointInputConfiguration.
        :param serverless_config: The serverless_config of this EndpointInputConfiguration.
        """
        self.openapi_types = {
            'instance_type': ProductionVariantInstanceType,
            'inference_specification_name': str,
            'environment_parameter_ranges': EndpointInputConfigurationEnvironmentParameterRanges,
            'serverless_config': ProductionVariantServerlessConfig
        }

        self.attribute_map = {
            'instance_type': 'InstanceType',
            'inference_specification_name': 'InferenceSpecificationName',
            'environment_parameter_ranges': 'EnvironmentParameterRanges',
            'serverless_config': 'ServerlessConfig'
        }

        self._instance_type = instance_type
        self._inference_specification_name = inference_specification_name
        self._environment_parameter_ranges = environment_parameter_ranges
        self._serverless_config = serverless_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointInputConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointInputConfiguration of this EndpointInputConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_type(self):
        """Gets the instance_type of this EndpointInputConfiguration.


        :return: The instance_type of this EndpointInputConfiguration.
        :rtype: ProductionVariantInstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this EndpointInputConfiguration.


        :param instance_type: The instance_type of this EndpointInputConfiguration.
        :type instance_type: ProductionVariantInstanceType
        """

        self._instance_type = instance_type

    @property
    def inference_specification_name(self):
        """Gets the inference_specification_name of this EndpointInputConfiguration.


        :return: The inference_specification_name of this EndpointInputConfiguration.
        :rtype: str
        """
        return self._inference_specification_name

    @inference_specification_name.setter
    def inference_specification_name(self, inference_specification_name):
        """Sets the inference_specification_name of this EndpointInputConfiguration.


        :param inference_specification_name: The inference_specification_name of this EndpointInputConfiguration.
        :type inference_specification_name: str
        """

        self._inference_specification_name = inference_specification_name

    @property
    def environment_parameter_ranges(self):
        """Gets the environment_parameter_ranges of this EndpointInputConfiguration.


        :return: The environment_parameter_ranges of this EndpointInputConfiguration.
        :rtype: EndpointInputConfigurationEnvironmentParameterRanges
        """
        return self._environment_parameter_ranges

    @environment_parameter_ranges.setter
    def environment_parameter_ranges(self, environment_parameter_ranges):
        """Sets the environment_parameter_ranges of this EndpointInputConfiguration.


        :param environment_parameter_ranges: The environment_parameter_ranges of this EndpointInputConfiguration.
        :type environment_parameter_ranges: EndpointInputConfigurationEnvironmentParameterRanges
        """

        self._environment_parameter_ranges = environment_parameter_ranges

    @property
    def serverless_config(self):
        """Gets the serverless_config of this EndpointInputConfiguration.


        :return: The serverless_config of this EndpointInputConfiguration.
        :rtype: ProductionVariantServerlessConfig
        """
        return self._serverless_config

    @serverless_config.setter
    def serverless_config(self, serverless_config):
        """Sets the serverless_config of this EndpointInputConfiguration.


        :param serverless_config: The serverless_config of this EndpointInputConfiguration.
        :type serverless_config: ProductionVariantServerlessConfig
        """

        self._serverless_config = serverless_config
