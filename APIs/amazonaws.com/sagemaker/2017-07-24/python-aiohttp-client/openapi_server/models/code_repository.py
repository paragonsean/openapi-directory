# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_url: str=None):
        """CodeRepository - a model defined in OpenAPI

        :param repository_url: The repository_url of this CodeRepository.
        """
        self.openapi_types = {
            'repository_url': str
        }

        self.attribute_map = {
            'repository_url': 'RepositoryUrl'
        }

        self._repository_url = repository_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeRepository of this CodeRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_url(self):
        """Gets the repository_url of this CodeRepository.


        :return: The repository_url of this CodeRepository.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this CodeRepository.


        :param repository_url: The repository_url of this CodeRepository.
        :type repository_url: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")

        self._repository_url = repository_url
