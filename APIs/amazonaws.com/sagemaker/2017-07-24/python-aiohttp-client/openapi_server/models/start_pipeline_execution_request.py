# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_pipeline_execution_response_selective_execution_config import DescribePipelineExecutionResponseSelectiveExecutionConfig
from openapi_server.models.start_pipeline_execution_request_parallelism_configuration import StartPipelineExecutionRequestParallelismConfiguration
from openapi_server import util


class StartPipelineExecutionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pipeline_name: str=None, pipeline_execution_display_name: str=None, pipeline_parameters: List=None, pipeline_execution_description: str=None, client_request_token: str=None, parallelism_configuration: StartPipelineExecutionRequestParallelismConfiguration=None, selective_execution_config: DescribePipelineExecutionResponseSelectiveExecutionConfig=None):
        """StartPipelineExecutionRequest - a model defined in OpenAPI

        :param pipeline_name: The pipeline_name of this StartPipelineExecutionRequest.
        :param pipeline_execution_display_name: The pipeline_execution_display_name of this StartPipelineExecutionRequest.
        :param pipeline_parameters: The pipeline_parameters of this StartPipelineExecutionRequest.
        :param pipeline_execution_description: The pipeline_execution_description of this StartPipelineExecutionRequest.
        :param client_request_token: The client_request_token of this StartPipelineExecutionRequest.
        :param parallelism_configuration: The parallelism_configuration of this StartPipelineExecutionRequest.
        :param selective_execution_config: The selective_execution_config of this StartPipelineExecutionRequest.
        """
        self.openapi_types = {
            'pipeline_name': str,
            'pipeline_execution_display_name': str,
            'pipeline_parameters': List,
            'pipeline_execution_description': str,
            'client_request_token': str,
            'parallelism_configuration': StartPipelineExecutionRequestParallelismConfiguration,
            'selective_execution_config': DescribePipelineExecutionResponseSelectiveExecutionConfig
        }

        self.attribute_map = {
            'pipeline_name': 'PipelineName',
            'pipeline_execution_display_name': 'PipelineExecutionDisplayName',
            'pipeline_parameters': 'PipelineParameters',
            'pipeline_execution_description': 'PipelineExecutionDescription',
            'client_request_token': 'ClientRequestToken',
            'parallelism_configuration': 'ParallelismConfiguration',
            'selective_execution_config': 'SelectiveExecutionConfig'
        }

        self._pipeline_name = pipeline_name
        self._pipeline_execution_display_name = pipeline_execution_display_name
        self._pipeline_parameters = pipeline_parameters
        self._pipeline_execution_description = pipeline_execution_description
        self._client_request_token = client_request_token
        self._parallelism_configuration = parallelism_configuration
        self._selective_execution_config = selective_execution_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartPipelineExecutionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartPipelineExecutionRequest of this StartPipelineExecutionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this StartPipelineExecutionRequest.


        :return: The pipeline_name of this StartPipelineExecutionRequest.
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this StartPipelineExecutionRequest.


        :param pipeline_name: The pipeline_name of this StartPipelineExecutionRequest.
        :type pipeline_name: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")

        self._pipeline_name = pipeline_name

    @property
    def pipeline_execution_display_name(self):
        """Gets the pipeline_execution_display_name of this StartPipelineExecutionRequest.


        :return: The pipeline_execution_display_name of this StartPipelineExecutionRequest.
        :rtype: str
        """
        return self._pipeline_execution_display_name

    @pipeline_execution_display_name.setter
    def pipeline_execution_display_name(self, pipeline_execution_display_name):
        """Sets the pipeline_execution_display_name of this StartPipelineExecutionRequest.


        :param pipeline_execution_display_name: The pipeline_execution_display_name of this StartPipelineExecutionRequest.
        :type pipeline_execution_display_name: str
        """

        self._pipeline_execution_display_name = pipeline_execution_display_name

    @property
    def pipeline_parameters(self):
        """Gets the pipeline_parameters of this StartPipelineExecutionRequest.


        :return: The pipeline_parameters of this StartPipelineExecutionRequest.
        :rtype: List
        """
        return self._pipeline_parameters

    @pipeline_parameters.setter
    def pipeline_parameters(self, pipeline_parameters):
        """Sets the pipeline_parameters of this StartPipelineExecutionRequest.


        :param pipeline_parameters: The pipeline_parameters of this StartPipelineExecutionRequest.
        :type pipeline_parameters: List
        """

        self._pipeline_parameters = pipeline_parameters

    @property
    def pipeline_execution_description(self):
        """Gets the pipeline_execution_description of this StartPipelineExecutionRequest.


        :return: The pipeline_execution_description of this StartPipelineExecutionRequest.
        :rtype: str
        """
        return self._pipeline_execution_description

    @pipeline_execution_description.setter
    def pipeline_execution_description(self, pipeline_execution_description):
        """Sets the pipeline_execution_description of this StartPipelineExecutionRequest.


        :param pipeline_execution_description: The pipeline_execution_description of this StartPipelineExecutionRequest.
        :type pipeline_execution_description: str
        """

        self._pipeline_execution_description = pipeline_execution_description

    @property
    def client_request_token(self):
        """Gets the client_request_token of this StartPipelineExecutionRequest.


        :return: The client_request_token of this StartPipelineExecutionRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this StartPipelineExecutionRequest.


        :param client_request_token: The client_request_token of this StartPipelineExecutionRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")

        self._client_request_token = client_request_token

    @property
    def parallelism_configuration(self):
        """Gets the parallelism_configuration of this StartPipelineExecutionRequest.


        :return: The parallelism_configuration of this StartPipelineExecutionRequest.
        :rtype: StartPipelineExecutionRequestParallelismConfiguration
        """
        return self._parallelism_configuration

    @parallelism_configuration.setter
    def parallelism_configuration(self, parallelism_configuration):
        """Sets the parallelism_configuration of this StartPipelineExecutionRequest.


        :param parallelism_configuration: The parallelism_configuration of this StartPipelineExecutionRequest.
        :type parallelism_configuration: StartPipelineExecutionRequestParallelismConfiguration
        """

        self._parallelism_configuration = parallelism_configuration

    @property
    def selective_execution_config(self):
        """Gets the selective_execution_config of this StartPipelineExecutionRequest.


        :return: The selective_execution_config of this StartPipelineExecutionRequest.
        :rtype: DescribePipelineExecutionResponseSelectiveExecutionConfig
        """
        return self._selective_execution_config

    @selective_execution_config.setter
    def selective_execution_config(self, selective_execution_config):
        """Sets the selective_execution_config of this StartPipelineExecutionRequest.


        :param selective_execution_config: The selective_execution_config of this StartPipelineExecutionRequest.
        :type selective_execution_config: DescribePipelineExecutionResponseSelectiveExecutionConfig
        """

        self._selective_execution_config = selective_execution_config
