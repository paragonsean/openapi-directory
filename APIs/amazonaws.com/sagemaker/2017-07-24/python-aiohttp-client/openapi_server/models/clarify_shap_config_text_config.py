# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clarify_text_granularity import ClarifyTextGranularity
from openapi_server.models.clarify_text_language import ClarifyTextLanguage
from openapi_server import util


class ClarifyShapConfigTextConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language: ClarifyTextLanguage=None, granularity: ClarifyTextGranularity=None):
        """ClarifyShapConfigTextConfig - a model defined in OpenAPI

        :param language: The language of this ClarifyShapConfigTextConfig.
        :param granularity: The granularity of this ClarifyShapConfigTextConfig.
        """
        self.openapi_types = {
            'language': ClarifyTextLanguage,
            'granularity': ClarifyTextGranularity
        }

        self.attribute_map = {
            'language': 'Language',
            'granularity': 'Granularity'
        }

        self._language = language
        self._granularity = granularity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClarifyShapConfigTextConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClarifyShapConfig_TextConfig of this ClarifyShapConfigTextConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language(self):
        """Gets the language of this ClarifyShapConfigTextConfig.


        :return: The language of this ClarifyShapConfigTextConfig.
        :rtype: ClarifyTextLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ClarifyShapConfigTextConfig.


        :param language: The language of this ClarifyShapConfigTextConfig.
        :type language: ClarifyTextLanguage
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def granularity(self):
        """Gets the granularity of this ClarifyShapConfigTextConfig.


        :return: The granularity of this ClarifyShapConfigTextConfig.
        :rtype: ClarifyTextGranularity
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this ClarifyShapConfigTextConfig.


        :param granularity: The granularity of this ClarifyShapConfigTextConfig.
        :type granularity: ClarifyTextGranularity
        """
        if granularity is None:
            raise ValueError("Invalid value for `granularity`, must not be `None`")

        self._granularity = granularity
