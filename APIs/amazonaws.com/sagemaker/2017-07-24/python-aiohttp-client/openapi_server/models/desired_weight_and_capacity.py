# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.desired_weight_and_capacity_serverless_update_config import DesiredWeightAndCapacityServerlessUpdateConfig
from openapi_server import util


class DesiredWeightAndCapacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variant_name: str=None, desired_weight: float=None, desired_instance_count: int=None, serverless_update_config: DesiredWeightAndCapacityServerlessUpdateConfig=None):
        """DesiredWeightAndCapacity - a model defined in OpenAPI

        :param variant_name: The variant_name of this DesiredWeightAndCapacity.
        :param desired_weight: The desired_weight of this DesiredWeightAndCapacity.
        :param desired_instance_count: The desired_instance_count of this DesiredWeightAndCapacity.
        :param serverless_update_config: The serverless_update_config of this DesiredWeightAndCapacity.
        """
        self.openapi_types = {
            'variant_name': str,
            'desired_weight': float,
            'desired_instance_count': int,
            'serverless_update_config': DesiredWeightAndCapacityServerlessUpdateConfig
        }

        self.attribute_map = {
            'variant_name': 'VariantName',
            'desired_weight': 'DesiredWeight',
            'desired_instance_count': 'DesiredInstanceCount',
            'serverless_update_config': 'ServerlessUpdateConfig'
        }

        self._variant_name = variant_name
        self._desired_weight = desired_weight
        self._desired_instance_count = desired_instance_count
        self._serverless_update_config = serverless_update_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DesiredWeightAndCapacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DesiredWeightAndCapacity of this DesiredWeightAndCapacity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variant_name(self):
        """Gets the variant_name of this DesiredWeightAndCapacity.


        :return: The variant_name of this DesiredWeightAndCapacity.
        :rtype: str
        """
        return self._variant_name

    @variant_name.setter
    def variant_name(self, variant_name):
        """Sets the variant_name of this DesiredWeightAndCapacity.


        :param variant_name: The variant_name of this DesiredWeightAndCapacity.
        :type variant_name: str
        """
        if variant_name is None:
            raise ValueError("Invalid value for `variant_name`, must not be `None`")

        self._variant_name = variant_name

    @property
    def desired_weight(self):
        """Gets the desired_weight of this DesiredWeightAndCapacity.


        :return: The desired_weight of this DesiredWeightAndCapacity.
        :rtype: float
        """
        return self._desired_weight

    @desired_weight.setter
    def desired_weight(self, desired_weight):
        """Sets the desired_weight of this DesiredWeightAndCapacity.


        :param desired_weight: The desired_weight of this DesiredWeightAndCapacity.
        :type desired_weight: float
        """

        self._desired_weight = desired_weight

    @property
    def desired_instance_count(self):
        """Gets the desired_instance_count of this DesiredWeightAndCapacity.


        :return: The desired_instance_count of this DesiredWeightAndCapacity.
        :rtype: int
        """
        return self._desired_instance_count

    @desired_instance_count.setter
    def desired_instance_count(self, desired_instance_count):
        """Sets the desired_instance_count of this DesiredWeightAndCapacity.


        :param desired_instance_count: The desired_instance_count of this DesiredWeightAndCapacity.
        :type desired_instance_count: int
        """

        self._desired_instance_count = desired_instance_count

    @property
    def serverless_update_config(self):
        """Gets the serverless_update_config of this DesiredWeightAndCapacity.


        :return: The serverless_update_config of this DesiredWeightAndCapacity.
        :rtype: DesiredWeightAndCapacityServerlessUpdateConfig
        """
        return self._serverless_update_config

    @serverless_update_config.setter
    def serverless_update_config(self, serverless_update_config):
        """Sets the serverless_update_config of this DesiredWeightAndCapacity.


        :param serverless_update_config: The serverless_update_config of this DesiredWeightAndCapacity.
        :type serverless_update_config: DesiredWeightAndCapacityServerlessUpdateConfig
        """

        self._serverless_update_config = serverless_update_config
