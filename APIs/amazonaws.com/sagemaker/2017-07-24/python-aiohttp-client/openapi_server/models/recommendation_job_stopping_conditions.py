# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flat_invocations import FlatInvocations
from openapi_server import util


class RecommendationJobStoppingConditions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_invocations: int=None, model_latency_thresholds: List=None, flat_invocations: FlatInvocations=None):
        """RecommendationJobStoppingConditions - a model defined in OpenAPI

        :param max_invocations: The max_invocations of this RecommendationJobStoppingConditions.
        :param model_latency_thresholds: The model_latency_thresholds of this RecommendationJobStoppingConditions.
        :param flat_invocations: The flat_invocations of this RecommendationJobStoppingConditions.
        """
        self.openapi_types = {
            'max_invocations': int,
            'model_latency_thresholds': List,
            'flat_invocations': FlatInvocations
        }

        self.attribute_map = {
            'max_invocations': 'MaxInvocations',
            'model_latency_thresholds': 'ModelLatencyThresholds',
            'flat_invocations': 'FlatInvocations'
        }

        self._max_invocations = max_invocations
        self._model_latency_thresholds = model_latency_thresholds
        self._flat_invocations = flat_invocations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationJobStoppingConditions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationJobStoppingConditions of this RecommendationJobStoppingConditions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_invocations(self):
        """Gets the max_invocations of this RecommendationJobStoppingConditions.


        :return: The max_invocations of this RecommendationJobStoppingConditions.
        :rtype: int
        """
        return self._max_invocations

    @max_invocations.setter
    def max_invocations(self, max_invocations):
        """Sets the max_invocations of this RecommendationJobStoppingConditions.


        :param max_invocations: The max_invocations of this RecommendationJobStoppingConditions.
        :type max_invocations: int
        """

        self._max_invocations = max_invocations

    @property
    def model_latency_thresholds(self):
        """Gets the model_latency_thresholds of this RecommendationJobStoppingConditions.


        :return: The model_latency_thresholds of this RecommendationJobStoppingConditions.
        :rtype: List
        """
        return self._model_latency_thresholds

    @model_latency_thresholds.setter
    def model_latency_thresholds(self, model_latency_thresholds):
        """Sets the model_latency_thresholds of this RecommendationJobStoppingConditions.


        :param model_latency_thresholds: The model_latency_thresholds of this RecommendationJobStoppingConditions.
        :type model_latency_thresholds: List
        """

        self._model_latency_thresholds = model_latency_thresholds

    @property
    def flat_invocations(self):
        """Gets the flat_invocations of this RecommendationJobStoppingConditions.


        :return: The flat_invocations of this RecommendationJobStoppingConditions.
        :rtype: FlatInvocations
        """
        return self._flat_invocations

    @flat_invocations.setter
    def flat_invocations(self, flat_invocations):
        """Sets the flat_invocations of this RecommendationJobStoppingConditions.


        :param flat_invocations: The flat_invocations of this RecommendationJobStoppingConditions.
        :type flat_invocations: FlatInvocations
        """

        self._flat_invocations = flat_invocations
