# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_type import InstanceType
from openapi_server import util


class RealTimeInferenceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_type: InstanceType=None, instance_count: int=None):
        """RealTimeInferenceConfig - a model defined in OpenAPI

        :param instance_type: The instance_type of this RealTimeInferenceConfig.
        :param instance_count: The instance_count of this RealTimeInferenceConfig.
        """
        self.openapi_types = {
            'instance_type': InstanceType,
            'instance_count': int
        }

        self.attribute_map = {
            'instance_type': 'InstanceType',
            'instance_count': 'InstanceCount'
        }

        self._instance_type = instance_type
        self._instance_count = instance_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealTimeInferenceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RealTimeInferenceConfig of this RealTimeInferenceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_type(self):
        """Gets the instance_type of this RealTimeInferenceConfig.


        :return: The instance_type of this RealTimeInferenceConfig.
        :rtype: InstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this RealTimeInferenceConfig.


        :param instance_type: The instance_type of this RealTimeInferenceConfig.
        :type instance_type: InstanceType
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")

        self._instance_type = instance_type

    @property
    def instance_count(self):
        """Gets the instance_count of this RealTimeInferenceConfig.


        :return: The instance_count of this RealTimeInferenceConfig.
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this RealTimeInferenceConfig.


        :param instance_count: The instance_count of this RealTimeInferenceConfig.
        :type instance_count: int
        """
        if instance_count is None:
            raise ValueError("Invalid value for `instance_count`, must not be `None`")

        self._instance_count = instance_count
