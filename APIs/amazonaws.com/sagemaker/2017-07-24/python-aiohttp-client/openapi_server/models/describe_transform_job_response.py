# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_strategy import BatchStrategy
from openapi_server.models.create_transform_job_request_data_capture_config import CreateTransformJobRequestDataCaptureConfig
from openapi_server.models.create_transform_job_request_transform_resources import CreateTransformJobRequestTransformResources
from openapi_server.models.data_processing import DataProcessing
from openapi_server.models.describe_transform_job_response_model_client_config import DescribeTransformJobResponseModelClientConfig
from openapi_server.models.describe_transform_job_response_transform_input import DescribeTransformJobResponseTransformInput
from openapi_server.models.describe_transform_job_response_transform_output import DescribeTransformJobResponseTransformOutput
from openapi_server.models.experiment_config import ExperimentConfig
from openapi_server.models.transform_job_status import TransformJobStatus
from openapi_server import util


class DescribeTransformJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transform_job_name: str=None, transform_job_arn: str=None, transform_job_status: TransformJobStatus=None, failure_reason: str=None, model_name: str=None, max_concurrent_transforms: int=None, model_client_config: DescribeTransformJobResponseModelClientConfig=None, max_payload_in_mb: int=None, batch_strategy: BatchStrategy=None, environment: Dict=None, transform_input: DescribeTransformJobResponseTransformInput=None, transform_output: DescribeTransformJobResponseTransformOutput=None, data_capture_config: CreateTransformJobRequestDataCaptureConfig=None, transform_resources: CreateTransformJobRequestTransformResources=None, creation_time: datetime=None, transform_start_time: datetime=None, transform_end_time: datetime=None, labeling_job_arn: str=None, auto_ml_job_arn: str=None, data_processing: DataProcessing=None, experiment_config: ExperimentConfig=None):
        """DescribeTransformJobResponse - a model defined in OpenAPI

        :param transform_job_name: The transform_job_name of this DescribeTransformJobResponse.
        :param transform_job_arn: The transform_job_arn of this DescribeTransformJobResponse.
        :param transform_job_status: The transform_job_status of this DescribeTransformJobResponse.
        :param failure_reason: The failure_reason of this DescribeTransformJobResponse.
        :param model_name: The model_name of this DescribeTransformJobResponse.
        :param max_concurrent_transforms: The max_concurrent_transforms of this DescribeTransformJobResponse.
        :param model_client_config: The model_client_config of this DescribeTransformJobResponse.
        :param max_payload_in_mb: The max_payload_in_mb of this DescribeTransformJobResponse.
        :param batch_strategy: The batch_strategy of this DescribeTransformJobResponse.
        :param environment: The environment of this DescribeTransformJobResponse.
        :param transform_input: The transform_input of this DescribeTransformJobResponse.
        :param transform_output: The transform_output of this DescribeTransformJobResponse.
        :param data_capture_config: The data_capture_config of this DescribeTransformJobResponse.
        :param transform_resources: The transform_resources of this DescribeTransformJobResponse.
        :param creation_time: The creation_time of this DescribeTransformJobResponse.
        :param transform_start_time: The transform_start_time of this DescribeTransformJobResponse.
        :param transform_end_time: The transform_end_time of this DescribeTransformJobResponse.
        :param labeling_job_arn: The labeling_job_arn of this DescribeTransformJobResponse.
        :param auto_ml_job_arn: The auto_ml_job_arn of this DescribeTransformJobResponse.
        :param data_processing: The data_processing of this DescribeTransformJobResponse.
        :param experiment_config: The experiment_config of this DescribeTransformJobResponse.
        """
        self.openapi_types = {
            'transform_job_name': str,
            'transform_job_arn': str,
            'transform_job_status': TransformJobStatus,
            'failure_reason': str,
            'model_name': str,
            'max_concurrent_transforms': int,
            'model_client_config': DescribeTransformJobResponseModelClientConfig,
            'max_payload_in_mb': int,
            'batch_strategy': BatchStrategy,
            'environment': Dict,
            'transform_input': DescribeTransformJobResponseTransformInput,
            'transform_output': DescribeTransformJobResponseTransformOutput,
            'data_capture_config': CreateTransformJobRequestDataCaptureConfig,
            'transform_resources': CreateTransformJobRequestTransformResources,
            'creation_time': datetime,
            'transform_start_time': datetime,
            'transform_end_time': datetime,
            'labeling_job_arn': str,
            'auto_ml_job_arn': str,
            'data_processing': DataProcessing,
            'experiment_config': ExperimentConfig
        }

        self.attribute_map = {
            'transform_job_name': 'TransformJobName',
            'transform_job_arn': 'TransformJobArn',
            'transform_job_status': 'TransformJobStatus',
            'failure_reason': 'FailureReason',
            'model_name': 'ModelName',
            'max_concurrent_transforms': 'MaxConcurrentTransforms',
            'model_client_config': 'ModelClientConfig',
            'max_payload_in_mb': 'MaxPayloadInMB',
            'batch_strategy': 'BatchStrategy',
            'environment': 'Environment',
            'transform_input': 'TransformInput',
            'transform_output': 'TransformOutput',
            'data_capture_config': 'DataCaptureConfig',
            'transform_resources': 'TransformResources',
            'creation_time': 'CreationTime',
            'transform_start_time': 'TransformStartTime',
            'transform_end_time': 'TransformEndTime',
            'labeling_job_arn': 'LabelingJobArn',
            'auto_ml_job_arn': 'AutoMLJobArn',
            'data_processing': 'DataProcessing',
            'experiment_config': 'ExperimentConfig'
        }

        self._transform_job_name = transform_job_name
        self._transform_job_arn = transform_job_arn
        self._transform_job_status = transform_job_status
        self._failure_reason = failure_reason
        self._model_name = model_name
        self._max_concurrent_transforms = max_concurrent_transforms
        self._model_client_config = model_client_config
        self._max_payload_in_mb = max_payload_in_mb
        self._batch_strategy = batch_strategy
        self._environment = environment
        self._transform_input = transform_input
        self._transform_output = transform_output
        self._data_capture_config = data_capture_config
        self._transform_resources = transform_resources
        self._creation_time = creation_time
        self._transform_start_time = transform_start_time
        self._transform_end_time = transform_end_time
        self._labeling_job_arn = labeling_job_arn
        self._auto_ml_job_arn = auto_ml_job_arn
        self._data_processing = data_processing
        self._experiment_config = experiment_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeTransformJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeTransformJobResponse of this DescribeTransformJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transform_job_name(self):
        """Gets the transform_job_name of this DescribeTransformJobResponse.


        :return: The transform_job_name of this DescribeTransformJobResponse.
        :rtype: str
        """
        return self._transform_job_name

    @transform_job_name.setter
    def transform_job_name(self, transform_job_name):
        """Sets the transform_job_name of this DescribeTransformJobResponse.


        :param transform_job_name: The transform_job_name of this DescribeTransformJobResponse.
        :type transform_job_name: str
        """
        if transform_job_name is None:
            raise ValueError("Invalid value for `transform_job_name`, must not be `None`")

        self._transform_job_name = transform_job_name

    @property
    def transform_job_arn(self):
        """Gets the transform_job_arn of this DescribeTransformJobResponse.


        :return: The transform_job_arn of this DescribeTransformJobResponse.
        :rtype: str
        """
        return self._transform_job_arn

    @transform_job_arn.setter
    def transform_job_arn(self, transform_job_arn):
        """Sets the transform_job_arn of this DescribeTransformJobResponse.


        :param transform_job_arn: The transform_job_arn of this DescribeTransformJobResponse.
        :type transform_job_arn: str
        """
        if transform_job_arn is None:
            raise ValueError("Invalid value for `transform_job_arn`, must not be `None`")

        self._transform_job_arn = transform_job_arn

    @property
    def transform_job_status(self):
        """Gets the transform_job_status of this DescribeTransformJobResponse.


        :return: The transform_job_status of this DescribeTransformJobResponse.
        :rtype: TransformJobStatus
        """
        return self._transform_job_status

    @transform_job_status.setter
    def transform_job_status(self, transform_job_status):
        """Sets the transform_job_status of this DescribeTransformJobResponse.


        :param transform_job_status: The transform_job_status of this DescribeTransformJobResponse.
        :type transform_job_status: TransformJobStatus
        """
        if transform_job_status is None:
            raise ValueError("Invalid value for `transform_job_status`, must not be `None`")

        self._transform_job_status = transform_job_status

    @property
    def failure_reason(self):
        """Gets the failure_reason of this DescribeTransformJobResponse.


        :return: The failure_reason of this DescribeTransformJobResponse.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this DescribeTransformJobResponse.


        :param failure_reason: The failure_reason of this DescribeTransformJobResponse.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def model_name(self):
        """Gets the model_name of this DescribeTransformJobResponse.


        :return: The model_name of this DescribeTransformJobResponse.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DescribeTransformJobResponse.


        :param model_name: The model_name of this DescribeTransformJobResponse.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def max_concurrent_transforms(self):
        """Gets the max_concurrent_transforms of this DescribeTransformJobResponse.


        :return: The max_concurrent_transforms of this DescribeTransformJobResponse.
        :rtype: int
        """
        return self._max_concurrent_transforms

    @max_concurrent_transforms.setter
    def max_concurrent_transforms(self, max_concurrent_transforms):
        """Sets the max_concurrent_transforms of this DescribeTransformJobResponse.


        :param max_concurrent_transforms: The max_concurrent_transforms of this DescribeTransformJobResponse.
        :type max_concurrent_transforms: int
        """

        self._max_concurrent_transforms = max_concurrent_transforms

    @property
    def model_client_config(self):
        """Gets the model_client_config of this DescribeTransformJobResponse.


        :return: The model_client_config of this DescribeTransformJobResponse.
        :rtype: DescribeTransformJobResponseModelClientConfig
        """
        return self._model_client_config

    @model_client_config.setter
    def model_client_config(self, model_client_config):
        """Sets the model_client_config of this DescribeTransformJobResponse.


        :param model_client_config: The model_client_config of this DescribeTransformJobResponse.
        :type model_client_config: DescribeTransformJobResponseModelClientConfig
        """

        self._model_client_config = model_client_config

    @property
    def max_payload_in_mb(self):
        """Gets the max_payload_in_mb of this DescribeTransformJobResponse.


        :return: The max_payload_in_mb of this DescribeTransformJobResponse.
        :rtype: int
        """
        return self._max_payload_in_mb

    @max_payload_in_mb.setter
    def max_payload_in_mb(self, max_payload_in_mb):
        """Sets the max_payload_in_mb of this DescribeTransformJobResponse.


        :param max_payload_in_mb: The max_payload_in_mb of this DescribeTransformJobResponse.
        :type max_payload_in_mb: int
        """

        self._max_payload_in_mb = max_payload_in_mb

    @property
    def batch_strategy(self):
        """Gets the batch_strategy of this DescribeTransformJobResponse.


        :return: The batch_strategy of this DescribeTransformJobResponse.
        :rtype: BatchStrategy
        """
        return self._batch_strategy

    @batch_strategy.setter
    def batch_strategy(self, batch_strategy):
        """Sets the batch_strategy of this DescribeTransformJobResponse.


        :param batch_strategy: The batch_strategy of this DescribeTransformJobResponse.
        :type batch_strategy: BatchStrategy
        """

        self._batch_strategy = batch_strategy

    @property
    def environment(self):
        """Gets the environment of this DescribeTransformJobResponse.


        :return: The environment of this DescribeTransformJobResponse.
        :rtype: Dict
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this DescribeTransformJobResponse.


        :param environment: The environment of this DescribeTransformJobResponse.
        :type environment: Dict
        """

        self._environment = environment

    @property
    def transform_input(self):
        """Gets the transform_input of this DescribeTransformJobResponse.


        :return: The transform_input of this DescribeTransformJobResponse.
        :rtype: DescribeTransformJobResponseTransformInput
        """
        return self._transform_input

    @transform_input.setter
    def transform_input(self, transform_input):
        """Sets the transform_input of this DescribeTransformJobResponse.


        :param transform_input: The transform_input of this DescribeTransformJobResponse.
        :type transform_input: DescribeTransformJobResponseTransformInput
        """
        if transform_input is None:
            raise ValueError("Invalid value for `transform_input`, must not be `None`")

        self._transform_input = transform_input

    @property
    def transform_output(self):
        """Gets the transform_output of this DescribeTransformJobResponse.


        :return: The transform_output of this DescribeTransformJobResponse.
        :rtype: DescribeTransformJobResponseTransformOutput
        """
        return self._transform_output

    @transform_output.setter
    def transform_output(self, transform_output):
        """Sets the transform_output of this DescribeTransformJobResponse.


        :param transform_output: The transform_output of this DescribeTransformJobResponse.
        :type transform_output: DescribeTransformJobResponseTransformOutput
        """

        self._transform_output = transform_output

    @property
    def data_capture_config(self):
        """Gets the data_capture_config of this DescribeTransformJobResponse.


        :return: The data_capture_config of this DescribeTransformJobResponse.
        :rtype: CreateTransformJobRequestDataCaptureConfig
        """
        return self._data_capture_config

    @data_capture_config.setter
    def data_capture_config(self, data_capture_config):
        """Sets the data_capture_config of this DescribeTransformJobResponse.


        :param data_capture_config: The data_capture_config of this DescribeTransformJobResponse.
        :type data_capture_config: CreateTransformJobRequestDataCaptureConfig
        """

        self._data_capture_config = data_capture_config

    @property
    def transform_resources(self):
        """Gets the transform_resources of this DescribeTransformJobResponse.


        :return: The transform_resources of this DescribeTransformJobResponse.
        :rtype: CreateTransformJobRequestTransformResources
        """
        return self._transform_resources

    @transform_resources.setter
    def transform_resources(self, transform_resources):
        """Sets the transform_resources of this DescribeTransformJobResponse.


        :param transform_resources: The transform_resources of this DescribeTransformJobResponse.
        :type transform_resources: CreateTransformJobRequestTransformResources
        """
        if transform_resources is None:
            raise ValueError("Invalid value for `transform_resources`, must not be `None`")

        self._transform_resources = transform_resources

    @property
    def creation_time(self):
        """Gets the creation_time of this DescribeTransformJobResponse.


        :return: The creation_time of this DescribeTransformJobResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DescribeTransformJobResponse.


        :param creation_time: The creation_time of this DescribeTransformJobResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def transform_start_time(self):
        """Gets the transform_start_time of this DescribeTransformJobResponse.


        :return: The transform_start_time of this DescribeTransformJobResponse.
        :rtype: datetime
        """
        return self._transform_start_time

    @transform_start_time.setter
    def transform_start_time(self, transform_start_time):
        """Sets the transform_start_time of this DescribeTransformJobResponse.


        :param transform_start_time: The transform_start_time of this DescribeTransformJobResponse.
        :type transform_start_time: datetime
        """

        self._transform_start_time = transform_start_time

    @property
    def transform_end_time(self):
        """Gets the transform_end_time of this DescribeTransformJobResponse.


        :return: The transform_end_time of this DescribeTransformJobResponse.
        :rtype: datetime
        """
        return self._transform_end_time

    @transform_end_time.setter
    def transform_end_time(self, transform_end_time):
        """Sets the transform_end_time of this DescribeTransformJobResponse.


        :param transform_end_time: The transform_end_time of this DescribeTransformJobResponse.
        :type transform_end_time: datetime
        """

        self._transform_end_time = transform_end_time

    @property
    def labeling_job_arn(self):
        """Gets the labeling_job_arn of this DescribeTransformJobResponse.


        :return: The labeling_job_arn of this DescribeTransformJobResponse.
        :rtype: str
        """
        return self._labeling_job_arn

    @labeling_job_arn.setter
    def labeling_job_arn(self, labeling_job_arn):
        """Sets the labeling_job_arn of this DescribeTransformJobResponse.


        :param labeling_job_arn: The labeling_job_arn of this DescribeTransformJobResponse.
        :type labeling_job_arn: str
        """

        self._labeling_job_arn = labeling_job_arn

    @property
    def auto_ml_job_arn(self):
        """Gets the auto_ml_job_arn of this DescribeTransformJobResponse.


        :return: The auto_ml_job_arn of this DescribeTransformJobResponse.
        :rtype: str
        """
        return self._auto_ml_job_arn

    @auto_ml_job_arn.setter
    def auto_ml_job_arn(self, auto_ml_job_arn):
        """Sets the auto_ml_job_arn of this DescribeTransformJobResponse.


        :param auto_ml_job_arn: The auto_ml_job_arn of this DescribeTransformJobResponse.
        :type auto_ml_job_arn: str
        """

        self._auto_ml_job_arn = auto_ml_job_arn

    @property
    def data_processing(self):
        """Gets the data_processing of this DescribeTransformJobResponse.


        :return: The data_processing of this DescribeTransformJobResponse.
        :rtype: DataProcessing
        """
        return self._data_processing

    @data_processing.setter
    def data_processing(self, data_processing):
        """Sets the data_processing of this DescribeTransformJobResponse.


        :param data_processing: The data_processing of this DescribeTransformJobResponse.
        :type data_processing: DataProcessing
        """

        self._data_processing = data_processing

    @property
    def experiment_config(self):
        """Gets the experiment_config of this DescribeTransformJobResponse.


        :return: The experiment_config of this DescribeTransformJobResponse.
        :rtype: ExperimentConfig
        """
        return self._experiment_config

    @experiment_config.setter
    def experiment_config(self, experiment_config):
        """Sets the experiment_config of this DescribeTransformJobResponse.


        :param experiment_config: The experiment_config of this DescribeTransformJobResponse.
        :type experiment_config: ExperimentConfig
        """

        self._experiment_config = experiment_config
