# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, value_hint: str=None):
        """AutoParameter - a model defined in OpenAPI

        :param name: The name of this AutoParameter.
        :param value_hint: The value_hint of this AutoParameter.
        """
        self.openapi_types = {
            'name': str,
            'value_hint': str
        }

        self.attribute_map = {
            'name': 'Name',
            'value_hint': 'ValueHint'
        }

        self._name = name
        self._value_hint = value_hint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoParameter of this AutoParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AutoParameter.


        :return: The name of this AutoParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutoParameter.


        :param name: The name of this AutoParameter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value_hint(self):
        """Gets the value_hint of this AutoParameter.


        :return: The value_hint of this AutoParameter.
        :rtype: str
        """
        return self._value_hint

    @value_hint.setter
    def value_hint(self, value_hint):
        """Sets the value_hint of this AutoParameter.


        :param value_hint: The value_hint of this AutoParameter.
        :type value_hint: str
        """
        if value_hint is None:
            raise ValueError("Invalid value for `value_hint`, must not be `None`")

        self._value_hint = value_hint
