# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_approval_status import ModelApprovalStatus
from openapi_server import util


class UpdateModelPackageInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_package_arn: str=None, model_approval_status: ModelApprovalStatus=None, approval_description: str=None, customer_metadata_properties: Dict=None, customer_metadata_properties_to_remove: List=None, additional_inference_specifications_to_add: List=None):
        """UpdateModelPackageInput - a model defined in OpenAPI

        :param model_package_arn: The model_package_arn of this UpdateModelPackageInput.
        :param model_approval_status: The model_approval_status of this UpdateModelPackageInput.
        :param approval_description: The approval_description of this UpdateModelPackageInput.
        :param customer_metadata_properties: The customer_metadata_properties of this UpdateModelPackageInput.
        :param customer_metadata_properties_to_remove: The customer_metadata_properties_to_remove of this UpdateModelPackageInput.
        :param additional_inference_specifications_to_add: The additional_inference_specifications_to_add of this UpdateModelPackageInput.
        """
        self.openapi_types = {
            'model_package_arn': str,
            'model_approval_status': ModelApprovalStatus,
            'approval_description': str,
            'customer_metadata_properties': Dict,
            'customer_metadata_properties_to_remove': List,
            'additional_inference_specifications_to_add': List
        }

        self.attribute_map = {
            'model_package_arn': 'ModelPackageArn',
            'model_approval_status': 'ModelApprovalStatus',
            'approval_description': 'ApprovalDescription',
            'customer_metadata_properties': 'CustomerMetadataProperties',
            'customer_metadata_properties_to_remove': 'CustomerMetadataPropertiesToRemove',
            'additional_inference_specifications_to_add': 'AdditionalInferenceSpecificationsToAdd'
        }

        self._model_package_arn = model_package_arn
        self._model_approval_status = model_approval_status
        self._approval_description = approval_description
        self._customer_metadata_properties = customer_metadata_properties
        self._customer_metadata_properties_to_remove = customer_metadata_properties_to_remove
        self._additional_inference_specifications_to_add = additional_inference_specifications_to_add

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateModelPackageInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateModelPackageInput of this UpdateModelPackageInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_package_arn(self):
        """Gets the model_package_arn of this UpdateModelPackageInput.


        :return: The model_package_arn of this UpdateModelPackageInput.
        :rtype: str
        """
        return self._model_package_arn

    @model_package_arn.setter
    def model_package_arn(self, model_package_arn):
        """Sets the model_package_arn of this UpdateModelPackageInput.


        :param model_package_arn: The model_package_arn of this UpdateModelPackageInput.
        :type model_package_arn: str
        """
        if model_package_arn is None:
            raise ValueError("Invalid value for `model_package_arn`, must not be `None`")

        self._model_package_arn = model_package_arn

    @property
    def model_approval_status(self):
        """Gets the model_approval_status of this UpdateModelPackageInput.


        :return: The model_approval_status of this UpdateModelPackageInput.
        :rtype: ModelApprovalStatus
        """
        return self._model_approval_status

    @model_approval_status.setter
    def model_approval_status(self, model_approval_status):
        """Sets the model_approval_status of this UpdateModelPackageInput.


        :param model_approval_status: The model_approval_status of this UpdateModelPackageInput.
        :type model_approval_status: ModelApprovalStatus
        """

        self._model_approval_status = model_approval_status

    @property
    def approval_description(self):
        """Gets the approval_description of this UpdateModelPackageInput.


        :return: The approval_description of this UpdateModelPackageInput.
        :rtype: str
        """
        return self._approval_description

    @approval_description.setter
    def approval_description(self, approval_description):
        """Sets the approval_description of this UpdateModelPackageInput.


        :param approval_description: The approval_description of this UpdateModelPackageInput.
        :type approval_description: str
        """

        self._approval_description = approval_description

    @property
    def customer_metadata_properties(self):
        """Gets the customer_metadata_properties of this UpdateModelPackageInput.


        :return: The customer_metadata_properties of this UpdateModelPackageInput.
        :rtype: Dict
        """
        return self._customer_metadata_properties

    @customer_metadata_properties.setter
    def customer_metadata_properties(self, customer_metadata_properties):
        """Sets the customer_metadata_properties of this UpdateModelPackageInput.


        :param customer_metadata_properties: The customer_metadata_properties of this UpdateModelPackageInput.
        :type customer_metadata_properties: Dict
        """

        self._customer_metadata_properties = customer_metadata_properties

    @property
    def customer_metadata_properties_to_remove(self):
        """Gets the customer_metadata_properties_to_remove of this UpdateModelPackageInput.


        :return: The customer_metadata_properties_to_remove of this UpdateModelPackageInput.
        :rtype: List
        """
        return self._customer_metadata_properties_to_remove

    @customer_metadata_properties_to_remove.setter
    def customer_metadata_properties_to_remove(self, customer_metadata_properties_to_remove):
        """Sets the customer_metadata_properties_to_remove of this UpdateModelPackageInput.


        :param customer_metadata_properties_to_remove: The customer_metadata_properties_to_remove of this UpdateModelPackageInput.
        :type customer_metadata_properties_to_remove: List
        """

        self._customer_metadata_properties_to_remove = customer_metadata_properties_to_remove

    @property
    def additional_inference_specifications_to_add(self):
        """Gets the additional_inference_specifications_to_add of this UpdateModelPackageInput.


        :return: The additional_inference_specifications_to_add of this UpdateModelPackageInput.
        :rtype: List
        """
        return self._additional_inference_specifications_to_add

    @additional_inference_specifications_to_add.setter
    def additional_inference_specifications_to_add(self, additional_inference_specifications_to_add):
        """Sets the additional_inference_specifications_to_add of this UpdateModelPackageInput.


        :param additional_inference_specifications_to_add: The additional_inference_specifications_to_add of this UpdateModelPackageInput.
        :type additional_inference_specifications_to_add: List
        """

        self._additional_inference_specifications_to_add = additional_inference_specifications_to_add
