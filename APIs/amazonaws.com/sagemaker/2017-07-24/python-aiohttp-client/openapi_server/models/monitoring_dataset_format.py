# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitoring_dataset_format_csv import MonitoringDatasetFormatCsv
from openapi_server.models.monitoring_dataset_format_json import MonitoringDatasetFormatJson
from openapi_server import util


class MonitoringDatasetFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, csv: MonitoringDatasetFormatCsv=None, _json: MonitoringDatasetFormatJson=None, parquet: object=None):
        """MonitoringDatasetFormat - a model defined in OpenAPI

        :param csv: The csv of this MonitoringDatasetFormat.
        :param _json: The _json of this MonitoringDatasetFormat.
        :param parquet: The parquet of this MonitoringDatasetFormat.
        """
        self.openapi_types = {
            'csv': MonitoringDatasetFormatCsv,
            '_json': MonitoringDatasetFormatJson,
            'parquet': object
        }

        self.attribute_map = {
            'csv': 'Csv',
            '_json': 'Json',
            'parquet': 'Parquet'
        }

        self._csv = csv
        self.__json = _json
        self._parquet = parquet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringDatasetFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringDatasetFormat of this MonitoringDatasetFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def csv(self):
        """Gets the csv of this MonitoringDatasetFormat.


        :return: The csv of this MonitoringDatasetFormat.
        :rtype: MonitoringDatasetFormatCsv
        """
        return self._csv

    @csv.setter
    def csv(self, csv):
        """Sets the csv of this MonitoringDatasetFormat.


        :param csv: The csv of this MonitoringDatasetFormat.
        :type csv: MonitoringDatasetFormatCsv
        """

        self._csv = csv

    @property
    def _json(self):
        """Gets the _json of this MonitoringDatasetFormat.


        :return: The _json of this MonitoringDatasetFormat.
        :rtype: MonitoringDatasetFormatJson
        """
        return self.__json

    @_json.setter
    def _json(self, _json):
        """Sets the _json of this MonitoringDatasetFormat.


        :param _json: The _json of this MonitoringDatasetFormat.
        :type _json: MonitoringDatasetFormatJson
        """

        self.__json = _json

    @property
    def parquet(self):
        """Gets the parquet of this MonitoringDatasetFormat.


        :return: The parquet of this MonitoringDatasetFormat.
        :rtype: object
        """
        return self._parquet

    @parquet.setter
    def parquet(self, parquet):
        """Sets the parquet of this MonitoringDatasetFormat.


        :param parquet: The parquet of this MonitoringDatasetFormat.
        :type parquet: object
        """

        self._parquet = parquet
