# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workteam_notification_configuration import WorkteamNotificationConfiguration
from openapi_server import util


class UpdateWorkteamResponseWorkteam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workteam_name: str=None, member_definitions: List=None, workteam_arn: str=None, workforce_arn: str=None, product_listing_ids: List=None, description: str=None, sub_domain: str=None, create_date: datetime=None, last_updated_date: datetime=None, notification_configuration: WorkteamNotificationConfiguration=None):
        """UpdateWorkteamResponseWorkteam - a model defined in OpenAPI

        :param workteam_name: The workteam_name of this UpdateWorkteamResponseWorkteam.
        :param member_definitions: The member_definitions of this UpdateWorkteamResponseWorkteam.
        :param workteam_arn: The workteam_arn of this UpdateWorkteamResponseWorkteam.
        :param workforce_arn: The workforce_arn of this UpdateWorkteamResponseWorkteam.
        :param product_listing_ids: The product_listing_ids of this UpdateWorkteamResponseWorkteam.
        :param description: The description of this UpdateWorkteamResponseWorkteam.
        :param sub_domain: The sub_domain of this UpdateWorkteamResponseWorkteam.
        :param create_date: The create_date of this UpdateWorkteamResponseWorkteam.
        :param last_updated_date: The last_updated_date of this UpdateWorkteamResponseWorkteam.
        :param notification_configuration: The notification_configuration of this UpdateWorkteamResponseWorkteam.
        """
        self.openapi_types = {
            'workteam_name': str,
            'member_definitions': List,
            'workteam_arn': str,
            'workforce_arn': str,
            'product_listing_ids': List,
            'description': str,
            'sub_domain': str,
            'create_date': datetime,
            'last_updated_date': datetime,
            'notification_configuration': WorkteamNotificationConfiguration
        }

        self.attribute_map = {
            'workteam_name': 'WorkteamName',
            'member_definitions': 'MemberDefinitions',
            'workteam_arn': 'WorkteamArn',
            'workforce_arn': 'WorkforceArn',
            'product_listing_ids': 'ProductListingIds',
            'description': 'Description',
            'sub_domain': 'SubDomain',
            'create_date': 'CreateDate',
            'last_updated_date': 'LastUpdatedDate',
            'notification_configuration': 'NotificationConfiguration'
        }

        self._workteam_name = workteam_name
        self._member_definitions = member_definitions
        self._workteam_arn = workteam_arn
        self._workforce_arn = workforce_arn
        self._product_listing_ids = product_listing_ids
        self._description = description
        self._sub_domain = sub_domain
        self._create_date = create_date
        self._last_updated_date = last_updated_date
        self._notification_configuration = notification_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateWorkteamResponseWorkteam':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateWorkteamResponse_Workteam of this UpdateWorkteamResponseWorkteam.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workteam_name(self):
        """Gets the workteam_name of this UpdateWorkteamResponseWorkteam.


        :return: The workteam_name of this UpdateWorkteamResponseWorkteam.
        :rtype: str
        """
        return self._workteam_name

    @workteam_name.setter
    def workteam_name(self, workteam_name):
        """Sets the workteam_name of this UpdateWorkteamResponseWorkteam.


        :param workteam_name: The workteam_name of this UpdateWorkteamResponseWorkteam.
        :type workteam_name: str
        """
        if workteam_name is None:
            raise ValueError("Invalid value for `workteam_name`, must not be `None`")

        self._workteam_name = workteam_name

    @property
    def member_definitions(self):
        """Gets the member_definitions of this UpdateWorkteamResponseWorkteam.


        :return: The member_definitions of this UpdateWorkteamResponseWorkteam.
        :rtype: List
        """
        return self._member_definitions

    @member_definitions.setter
    def member_definitions(self, member_definitions):
        """Sets the member_definitions of this UpdateWorkteamResponseWorkteam.


        :param member_definitions: The member_definitions of this UpdateWorkteamResponseWorkteam.
        :type member_definitions: List
        """
        if member_definitions is None:
            raise ValueError("Invalid value for `member_definitions`, must not be `None`")

        self._member_definitions = member_definitions

    @property
    def workteam_arn(self):
        """Gets the workteam_arn of this UpdateWorkteamResponseWorkteam.


        :return: The workteam_arn of this UpdateWorkteamResponseWorkteam.
        :rtype: str
        """
        return self._workteam_arn

    @workteam_arn.setter
    def workteam_arn(self, workteam_arn):
        """Sets the workteam_arn of this UpdateWorkteamResponseWorkteam.


        :param workteam_arn: The workteam_arn of this UpdateWorkteamResponseWorkteam.
        :type workteam_arn: str
        """
        if workteam_arn is None:
            raise ValueError("Invalid value for `workteam_arn`, must not be `None`")

        self._workteam_arn = workteam_arn

    @property
    def workforce_arn(self):
        """Gets the workforce_arn of this UpdateWorkteamResponseWorkteam.


        :return: The workforce_arn of this UpdateWorkteamResponseWorkteam.
        :rtype: str
        """
        return self._workforce_arn

    @workforce_arn.setter
    def workforce_arn(self, workforce_arn):
        """Sets the workforce_arn of this UpdateWorkteamResponseWorkteam.


        :param workforce_arn: The workforce_arn of this UpdateWorkteamResponseWorkteam.
        :type workforce_arn: str
        """

        self._workforce_arn = workforce_arn

    @property
    def product_listing_ids(self):
        """Gets the product_listing_ids of this UpdateWorkteamResponseWorkteam.


        :return: The product_listing_ids of this UpdateWorkteamResponseWorkteam.
        :rtype: List
        """
        return self._product_listing_ids

    @product_listing_ids.setter
    def product_listing_ids(self, product_listing_ids):
        """Sets the product_listing_ids of this UpdateWorkteamResponseWorkteam.


        :param product_listing_ids: The product_listing_ids of this UpdateWorkteamResponseWorkteam.
        :type product_listing_ids: List
        """

        self._product_listing_ids = product_listing_ids

    @property
    def description(self):
        """Gets the description of this UpdateWorkteamResponseWorkteam.


        :return: The description of this UpdateWorkteamResponseWorkteam.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateWorkteamResponseWorkteam.


        :param description: The description of this UpdateWorkteamResponseWorkteam.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def sub_domain(self):
        """Gets the sub_domain of this UpdateWorkteamResponseWorkteam.


        :return: The sub_domain of this UpdateWorkteamResponseWorkteam.
        :rtype: str
        """
        return self._sub_domain

    @sub_domain.setter
    def sub_domain(self, sub_domain):
        """Sets the sub_domain of this UpdateWorkteamResponseWorkteam.


        :param sub_domain: The sub_domain of this UpdateWorkteamResponseWorkteam.
        :type sub_domain: str
        """

        self._sub_domain = sub_domain

    @property
    def create_date(self):
        """Gets the create_date of this UpdateWorkteamResponseWorkteam.


        :return: The create_date of this UpdateWorkteamResponseWorkteam.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this UpdateWorkteamResponseWorkteam.


        :param create_date: The create_date of this UpdateWorkteamResponseWorkteam.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this UpdateWorkteamResponseWorkteam.


        :return: The last_updated_date of this UpdateWorkteamResponseWorkteam.
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this UpdateWorkteamResponseWorkteam.


        :param last_updated_date: The last_updated_date of this UpdateWorkteamResponseWorkteam.
        :type last_updated_date: datetime
        """

        self._last_updated_date = last_updated_date

    @property
    def notification_configuration(self):
        """Gets the notification_configuration of this UpdateWorkteamResponseWorkteam.


        :return: The notification_configuration of this UpdateWorkteamResponseWorkteam.
        :rtype: WorkteamNotificationConfiguration
        """
        return self._notification_configuration

    @notification_configuration.setter
    def notification_configuration(self, notification_configuration):
        """Sets the notification_configuration of this UpdateWorkteamResponseWorkteam.


        :param notification_configuration: The notification_configuration of this UpdateWorkteamResponseWorkteam.
        :type notification_configuration: WorkteamNotificationConfiguration
        """

        self._notification_configuration = notification_configuration
