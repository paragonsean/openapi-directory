# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_status import EndpointStatus
from openapi_server import util


class DescribeInferenceExperimentResponseEndpointMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_name: str=None, endpoint_config_name: str=None, endpoint_status: EndpointStatus=None, failure_reason: str=None):
        """DescribeInferenceExperimentResponseEndpointMetadata - a model defined in OpenAPI

        :param endpoint_name: The endpoint_name of this DescribeInferenceExperimentResponseEndpointMetadata.
        :param endpoint_config_name: The endpoint_config_name of this DescribeInferenceExperimentResponseEndpointMetadata.
        :param endpoint_status: The endpoint_status of this DescribeInferenceExperimentResponseEndpointMetadata.
        :param failure_reason: The failure_reason of this DescribeInferenceExperimentResponseEndpointMetadata.
        """
        self.openapi_types = {
            'endpoint_name': str,
            'endpoint_config_name': str,
            'endpoint_status': EndpointStatus,
            'failure_reason': str
        }

        self.attribute_map = {
            'endpoint_name': 'EndpointName',
            'endpoint_config_name': 'EndpointConfigName',
            'endpoint_status': 'EndpointStatus',
            'failure_reason': 'FailureReason'
        }

        self._endpoint_name = endpoint_name
        self._endpoint_config_name = endpoint_config_name
        self._endpoint_status = endpoint_status
        self._failure_reason = failure_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeInferenceExperimentResponseEndpointMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeInferenceExperimentResponse_EndpointMetadata of this DescribeInferenceExperimentResponseEndpointMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this DescribeInferenceExperimentResponseEndpointMetadata.


        :return: The endpoint_name of this DescribeInferenceExperimentResponseEndpointMetadata.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this DescribeInferenceExperimentResponseEndpointMetadata.


        :param endpoint_name: The endpoint_name of this DescribeInferenceExperimentResponseEndpointMetadata.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def endpoint_config_name(self):
        """Gets the endpoint_config_name of this DescribeInferenceExperimentResponseEndpointMetadata.


        :return: The endpoint_config_name of this DescribeInferenceExperimentResponseEndpointMetadata.
        :rtype: str
        """
        return self._endpoint_config_name

    @endpoint_config_name.setter
    def endpoint_config_name(self, endpoint_config_name):
        """Sets the endpoint_config_name of this DescribeInferenceExperimentResponseEndpointMetadata.


        :param endpoint_config_name: The endpoint_config_name of this DescribeInferenceExperimentResponseEndpointMetadata.
        :type endpoint_config_name: str
        """

        self._endpoint_config_name = endpoint_config_name

    @property
    def endpoint_status(self):
        """Gets the endpoint_status of this DescribeInferenceExperimentResponseEndpointMetadata.


        :return: The endpoint_status of this DescribeInferenceExperimentResponseEndpointMetadata.
        :rtype: EndpointStatus
        """
        return self._endpoint_status

    @endpoint_status.setter
    def endpoint_status(self, endpoint_status):
        """Sets the endpoint_status of this DescribeInferenceExperimentResponseEndpointMetadata.


        :param endpoint_status: The endpoint_status of this DescribeInferenceExperimentResponseEndpointMetadata.
        :type endpoint_status: EndpointStatus
        """

        self._endpoint_status = endpoint_status

    @property
    def failure_reason(self):
        """Gets the failure_reason of this DescribeInferenceExperimentResponseEndpointMetadata.


        :return: The failure_reason of this DescribeInferenceExperimentResponseEndpointMetadata.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this DescribeInferenceExperimentResponseEndpointMetadata.


        :param failure_reason: The failure_reason of this DescribeInferenceExperimentResponseEndpointMetadata.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason
