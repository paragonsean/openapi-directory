# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_data_type import S3DataType
from openapi_server import util


class TransformDataSourceS3DataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_data_type: S3DataType=None, s3_uri: str=None):
        """TransformDataSourceS3DataSource - a model defined in OpenAPI

        :param s3_data_type: The s3_data_type of this TransformDataSourceS3DataSource.
        :param s3_uri: The s3_uri of this TransformDataSourceS3DataSource.
        """
        self.openapi_types = {
            's3_data_type': S3DataType,
            's3_uri': str
        }

        self.attribute_map = {
            's3_data_type': 'S3DataType',
            's3_uri': 'S3Uri'
        }

        self._s3_data_type = s3_data_type
        self._s3_uri = s3_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformDataSourceS3DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformDataSource_S3DataSource of this TransformDataSourceS3DataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_data_type(self):
        """Gets the s3_data_type of this TransformDataSourceS3DataSource.


        :return: The s3_data_type of this TransformDataSourceS3DataSource.
        :rtype: S3DataType
        """
        return self._s3_data_type

    @s3_data_type.setter
    def s3_data_type(self, s3_data_type):
        """Sets the s3_data_type of this TransformDataSourceS3DataSource.


        :param s3_data_type: The s3_data_type of this TransformDataSourceS3DataSource.
        :type s3_data_type: S3DataType
        """
        if s3_data_type is None:
            raise ValueError("Invalid value for `s3_data_type`, must not be `None`")

        self._s3_data_type = s3_data_type

    @property
    def s3_uri(self):
        """Gets the s3_uri of this TransformDataSourceS3DataSource.


        :return: The s3_uri of this TransformDataSourceS3DataSource.
        :rtype: str
        """
        return self._s3_uri

    @s3_uri.setter
    def s3_uri(self, s3_uri):
        """Sets the s3_uri of this TransformDataSourceS3DataSource.


        :param s3_uri: The s3_uri of this TransformDataSourceS3DataSource.
        :type s3_uri: str
        """
        if s3_uri is None:
            raise ValueError("Invalid value for `s3_uri`, must not be `None`")

        self._s3_uri = s3_uri
