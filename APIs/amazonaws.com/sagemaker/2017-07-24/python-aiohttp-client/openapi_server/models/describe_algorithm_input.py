# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeAlgorithmInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm_name: str=None):
        """DescribeAlgorithmInput - a model defined in OpenAPI

        :param algorithm_name: The algorithm_name of this DescribeAlgorithmInput.
        """
        self.openapi_types = {
            'algorithm_name': str
        }

        self.attribute_map = {
            'algorithm_name': 'AlgorithmName'
        }

        self._algorithm_name = algorithm_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAlgorithmInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAlgorithmInput of this DescribeAlgorithmInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm_name(self):
        """Gets the algorithm_name of this DescribeAlgorithmInput.


        :return: The algorithm_name of this DescribeAlgorithmInput.
        :rtype: str
        """
        return self._algorithm_name

    @algorithm_name.setter
    def algorithm_name(self, algorithm_name):
        """Sets the algorithm_name of this DescribeAlgorithmInput.


        :param algorithm_name: The algorithm_name of this DescribeAlgorithmInput.
        :type algorithm_name: str
        """
        if algorithm_name is None:
            raise ValueError("Invalid value for `algorithm_name`, must not be `None`")

        self._algorithm_name = algorithm_name
