# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetadataProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_id: str=None, repository: str=None, generated_by: str=None, project_id: str=None):
        """MetadataProperties - a model defined in OpenAPI

        :param commit_id: The commit_id of this MetadataProperties.
        :param repository: The repository of this MetadataProperties.
        :param generated_by: The generated_by of this MetadataProperties.
        :param project_id: The project_id of this MetadataProperties.
        """
        self.openapi_types = {
            'commit_id': str,
            'repository': str,
            'generated_by': str,
            'project_id': str
        }

        self.attribute_map = {
            'commit_id': 'CommitId',
            'repository': 'Repository',
            'generated_by': 'GeneratedBy',
            'project_id': 'ProjectId'
        }

        self._commit_id = commit_id
        self._repository = repository
        self._generated_by = generated_by
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetadataProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetadataProperties of this MetadataProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_id(self):
        """Gets the commit_id of this MetadataProperties.


        :return: The commit_id of this MetadataProperties.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this MetadataProperties.


        :param commit_id: The commit_id of this MetadataProperties.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def repository(self):
        """Gets the repository of this MetadataProperties.


        :return: The repository of this MetadataProperties.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this MetadataProperties.


        :param repository: The repository of this MetadataProperties.
        :type repository: str
        """

        self._repository = repository

    @property
    def generated_by(self):
        """Gets the generated_by of this MetadataProperties.


        :return: The generated_by of this MetadataProperties.
        :rtype: str
        """
        return self._generated_by

    @generated_by.setter
    def generated_by(self, generated_by):
        """Sets the generated_by of this MetadataProperties.


        :param generated_by: The generated_by of this MetadataProperties.
        :type generated_by: str
        """

        self._generated_by = generated_by

    @property
    def project_id(self):
        """Gets the project_id of this MetadataProperties.


        :return: The project_id of this MetadataProperties.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this MetadataProperties.


        :param project_id: The project_id of this MetadataProperties.
        :type project_id: str
        """

        self._project_id = project_id
