# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_transform_input_dataset_format import BatchTransformInputDatasetFormat
from openapi_server.models.processing_s3_data_distribution_type import ProcessingS3DataDistributionType
from openapi_server.models.processing_s3_input_mode import ProcessingS3InputMode
from openapi_server import util


class DataQualityJobInputBatchTransformInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_captured_destination_s3_uri: str=None, dataset_format: BatchTransformInputDatasetFormat=None, local_path: str=None, s3_input_mode: ProcessingS3InputMode=None, s3_data_distribution_type: ProcessingS3DataDistributionType=None, features_attribute: str=None, inference_attribute: str=None, probability_attribute: str=None, probability_threshold_attribute: float=None, start_time_offset: str=None, end_time_offset: str=None):
        """DataQualityJobInputBatchTransformInput - a model defined in OpenAPI

        :param data_captured_destination_s3_uri: The data_captured_destination_s3_uri of this DataQualityJobInputBatchTransformInput.
        :param dataset_format: The dataset_format of this DataQualityJobInputBatchTransformInput.
        :param local_path: The local_path of this DataQualityJobInputBatchTransformInput.
        :param s3_input_mode: The s3_input_mode of this DataQualityJobInputBatchTransformInput.
        :param s3_data_distribution_type: The s3_data_distribution_type of this DataQualityJobInputBatchTransformInput.
        :param features_attribute: The features_attribute of this DataQualityJobInputBatchTransformInput.
        :param inference_attribute: The inference_attribute of this DataQualityJobInputBatchTransformInput.
        :param probability_attribute: The probability_attribute of this DataQualityJobInputBatchTransformInput.
        :param probability_threshold_attribute: The probability_threshold_attribute of this DataQualityJobInputBatchTransformInput.
        :param start_time_offset: The start_time_offset of this DataQualityJobInputBatchTransformInput.
        :param end_time_offset: The end_time_offset of this DataQualityJobInputBatchTransformInput.
        """
        self.openapi_types = {
            'data_captured_destination_s3_uri': str,
            'dataset_format': BatchTransformInputDatasetFormat,
            'local_path': str,
            's3_input_mode': ProcessingS3InputMode,
            's3_data_distribution_type': ProcessingS3DataDistributionType,
            'features_attribute': str,
            'inference_attribute': str,
            'probability_attribute': str,
            'probability_threshold_attribute': float,
            'start_time_offset': str,
            'end_time_offset': str
        }

        self.attribute_map = {
            'data_captured_destination_s3_uri': 'DataCapturedDestinationS3Uri',
            'dataset_format': 'DatasetFormat',
            'local_path': 'LocalPath',
            's3_input_mode': 'S3InputMode',
            's3_data_distribution_type': 'S3DataDistributionType',
            'features_attribute': 'FeaturesAttribute',
            'inference_attribute': 'InferenceAttribute',
            'probability_attribute': 'ProbabilityAttribute',
            'probability_threshold_attribute': 'ProbabilityThresholdAttribute',
            'start_time_offset': 'StartTimeOffset',
            'end_time_offset': 'EndTimeOffset'
        }

        self._data_captured_destination_s3_uri = data_captured_destination_s3_uri
        self._dataset_format = dataset_format
        self._local_path = local_path
        self._s3_input_mode = s3_input_mode
        self._s3_data_distribution_type = s3_data_distribution_type
        self._features_attribute = features_attribute
        self._inference_attribute = inference_attribute
        self._probability_attribute = probability_attribute
        self._probability_threshold_attribute = probability_threshold_attribute
        self._start_time_offset = start_time_offset
        self._end_time_offset = end_time_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataQualityJobInputBatchTransformInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataQualityJobInput_BatchTransformInput of this DataQualityJobInputBatchTransformInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_captured_destination_s3_uri(self):
        """Gets the data_captured_destination_s3_uri of this DataQualityJobInputBatchTransformInput.


        :return: The data_captured_destination_s3_uri of this DataQualityJobInputBatchTransformInput.
        :rtype: str
        """
        return self._data_captured_destination_s3_uri

    @data_captured_destination_s3_uri.setter
    def data_captured_destination_s3_uri(self, data_captured_destination_s3_uri):
        """Sets the data_captured_destination_s3_uri of this DataQualityJobInputBatchTransformInput.


        :param data_captured_destination_s3_uri: The data_captured_destination_s3_uri of this DataQualityJobInputBatchTransformInput.
        :type data_captured_destination_s3_uri: str
        """
        if data_captured_destination_s3_uri is None:
            raise ValueError("Invalid value for `data_captured_destination_s3_uri`, must not be `None`")

        self._data_captured_destination_s3_uri = data_captured_destination_s3_uri

    @property
    def dataset_format(self):
        """Gets the dataset_format of this DataQualityJobInputBatchTransformInput.


        :return: The dataset_format of this DataQualityJobInputBatchTransformInput.
        :rtype: BatchTransformInputDatasetFormat
        """
        return self._dataset_format

    @dataset_format.setter
    def dataset_format(self, dataset_format):
        """Sets the dataset_format of this DataQualityJobInputBatchTransformInput.


        :param dataset_format: The dataset_format of this DataQualityJobInputBatchTransformInput.
        :type dataset_format: BatchTransformInputDatasetFormat
        """
        if dataset_format is None:
            raise ValueError("Invalid value for `dataset_format`, must not be `None`")

        self._dataset_format = dataset_format

    @property
    def local_path(self):
        """Gets the local_path of this DataQualityJobInputBatchTransformInput.


        :return: The local_path of this DataQualityJobInputBatchTransformInput.
        :rtype: str
        """
        return self._local_path

    @local_path.setter
    def local_path(self, local_path):
        """Sets the local_path of this DataQualityJobInputBatchTransformInput.


        :param local_path: The local_path of this DataQualityJobInputBatchTransformInput.
        :type local_path: str
        """
        if local_path is None:
            raise ValueError("Invalid value for `local_path`, must not be `None`")

        self._local_path = local_path

    @property
    def s3_input_mode(self):
        """Gets the s3_input_mode of this DataQualityJobInputBatchTransformInput.


        :return: The s3_input_mode of this DataQualityJobInputBatchTransformInput.
        :rtype: ProcessingS3InputMode
        """
        return self._s3_input_mode

    @s3_input_mode.setter
    def s3_input_mode(self, s3_input_mode):
        """Sets the s3_input_mode of this DataQualityJobInputBatchTransformInput.


        :param s3_input_mode: The s3_input_mode of this DataQualityJobInputBatchTransformInput.
        :type s3_input_mode: ProcessingS3InputMode
        """

        self._s3_input_mode = s3_input_mode

    @property
    def s3_data_distribution_type(self):
        """Gets the s3_data_distribution_type of this DataQualityJobInputBatchTransformInput.


        :return: The s3_data_distribution_type of this DataQualityJobInputBatchTransformInput.
        :rtype: ProcessingS3DataDistributionType
        """
        return self._s3_data_distribution_type

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, s3_data_distribution_type):
        """Sets the s3_data_distribution_type of this DataQualityJobInputBatchTransformInput.


        :param s3_data_distribution_type: The s3_data_distribution_type of this DataQualityJobInputBatchTransformInput.
        :type s3_data_distribution_type: ProcessingS3DataDistributionType
        """

        self._s3_data_distribution_type = s3_data_distribution_type

    @property
    def features_attribute(self):
        """Gets the features_attribute of this DataQualityJobInputBatchTransformInput.


        :return: The features_attribute of this DataQualityJobInputBatchTransformInput.
        :rtype: str
        """
        return self._features_attribute

    @features_attribute.setter
    def features_attribute(self, features_attribute):
        """Sets the features_attribute of this DataQualityJobInputBatchTransformInput.


        :param features_attribute: The features_attribute of this DataQualityJobInputBatchTransformInput.
        :type features_attribute: str
        """

        self._features_attribute = features_attribute

    @property
    def inference_attribute(self):
        """Gets the inference_attribute of this DataQualityJobInputBatchTransformInput.


        :return: The inference_attribute of this DataQualityJobInputBatchTransformInput.
        :rtype: str
        """
        return self._inference_attribute

    @inference_attribute.setter
    def inference_attribute(self, inference_attribute):
        """Sets the inference_attribute of this DataQualityJobInputBatchTransformInput.


        :param inference_attribute: The inference_attribute of this DataQualityJobInputBatchTransformInput.
        :type inference_attribute: str
        """

        self._inference_attribute = inference_attribute

    @property
    def probability_attribute(self):
        """Gets the probability_attribute of this DataQualityJobInputBatchTransformInput.


        :return: The probability_attribute of this DataQualityJobInputBatchTransformInput.
        :rtype: str
        """
        return self._probability_attribute

    @probability_attribute.setter
    def probability_attribute(self, probability_attribute):
        """Sets the probability_attribute of this DataQualityJobInputBatchTransformInput.


        :param probability_attribute: The probability_attribute of this DataQualityJobInputBatchTransformInput.
        :type probability_attribute: str
        """

        self._probability_attribute = probability_attribute

    @property
    def probability_threshold_attribute(self):
        """Gets the probability_threshold_attribute of this DataQualityJobInputBatchTransformInput.


        :return: The probability_threshold_attribute of this DataQualityJobInputBatchTransformInput.
        :rtype: float
        """
        return self._probability_threshold_attribute

    @probability_threshold_attribute.setter
    def probability_threshold_attribute(self, probability_threshold_attribute):
        """Sets the probability_threshold_attribute of this DataQualityJobInputBatchTransformInput.


        :param probability_threshold_attribute: The probability_threshold_attribute of this DataQualityJobInputBatchTransformInput.
        :type probability_threshold_attribute: float
        """

        self._probability_threshold_attribute = probability_threshold_attribute

    @property
    def start_time_offset(self):
        """Gets the start_time_offset of this DataQualityJobInputBatchTransformInput.


        :return: The start_time_offset of this DataQualityJobInputBatchTransformInput.
        :rtype: str
        """
        return self._start_time_offset

    @start_time_offset.setter
    def start_time_offset(self, start_time_offset):
        """Sets the start_time_offset of this DataQualityJobInputBatchTransformInput.


        :param start_time_offset: The start_time_offset of this DataQualityJobInputBatchTransformInput.
        :type start_time_offset: str
        """

        self._start_time_offset = start_time_offset

    @property
    def end_time_offset(self):
        """Gets the end_time_offset of this DataQualityJobInputBatchTransformInput.


        :return: The end_time_offset of this DataQualityJobInputBatchTransformInput.
        :rtype: str
        """
        return self._end_time_offset

    @end_time_offset.setter
    def end_time_offset(self, end_time_offset):
        """Sets the end_time_offset of this DataQualityJobInputBatchTransformInput.


        :param end_time_offset: The end_time_offset of this DataQualityJobInputBatchTransformInput.
        :type end_time_offset: str
        """

        self._end_time_offset = end_time_offset
