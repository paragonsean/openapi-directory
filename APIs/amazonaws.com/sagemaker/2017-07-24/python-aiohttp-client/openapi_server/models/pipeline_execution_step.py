# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipeline_execution_step_cache_hit_result import PipelineExecutionStepCacheHitResult
from openapi_server.models.pipeline_execution_step_metadata import PipelineExecutionStepMetadata
from openapi_server.models.pipeline_execution_step_selective_execution_result import PipelineExecutionStepSelectiveExecutionResult
from openapi_server.models.step_status import StepStatus
from openapi_server import util


class PipelineExecutionStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, step_name: str=None, step_display_name: str=None, step_description: str=None, start_time: datetime=None, end_time: datetime=None, step_status: StepStatus=None, cache_hit_result: PipelineExecutionStepCacheHitResult=None, attempt_count: int=None, failure_reason: str=None, metadata: PipelineExecutionStepMetadata=None, selective_execution_result: PipelineExecutionStepSelectiveExecutionResult=None):
        """PipelineExecutionStep - a model defined in OpenAPI

        :param step_name: The step_name of this PipelineExecutionStep.
        :param step_display_name: The step_display_name of this PipelineExecutionStep.
        :param step_description: The step_description of this PipelineExecutionStep.
        :param start_time: The start_time of this PipelineExecutionStep.
        :param end_time: The end_time of this PipelineExecutionStep.
        :param step_status: The step_status of this PipelineExecutionStep.
        :param cache_hit_result: The cache_hit_result of this PipelineExecutionStep.
        :param attempt_count: The attempt_count of this PipelineExecutionStep.
        :param failure_reason: The failure_reason of this PipelineExecutionStep.
        :param metadata: The metadata of this PipelineExecutionStep.
        :param selective_execution_result: The selective_execution_result of this PipelineExecutionStep.
        """
        self.openapi_types = {
            'step_name': str,
            'step_display_name': str,
            'step_description': str,
            'start_time': datetime,
            'end_time': datetime,
            'step_status': StepStatus,
            'cache_hit_result': PipelineExecutionStepCacheHitResult,
            'attempt_count': int,
            'failure_reason': str,
            'metadata': PipelineExecutionStepMetadata,
            'selective_execution_result': PipelineExecutionStepSelectiveExecutionResult
        }

        self.attribute_map = {
            'step_name': 'StepName',
            'step_display_name': 'StepDisplayName',
            'step_description': 'StepDescription',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'step_status': 'StepStatus',
            'cache_hit_result': 'CacheHitResult',
            'attempt_count': 'AttemptCount',
            'failure_reason': 'FailureReason',
            'metadata': 'Metadata',
            'selective_execution_result': 'SelectiveExecutionResult'
        }

        self._step_name = step_name
        self._step_display_name = step_display_name
        self._step_description = step_description
        self._start_time = start_time
        self._end_time = end_time
        self._step_status = step_status
        self._cache_hit_result = cache_hit_result
        self._attempt_count = attempt_count
        self._failure_reason = failure_reason
        self._metadata = metadata
        self._selective_execution_result = selective_execution_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineExecutionStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineExecutionStep of this PipelineExecutionStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def step_name(self):
        """Gets the step_name of this PipelineExecutionStep.


        :return: The step_name of this PipelineExecutionStep.
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this PipelineExecutionStep.


        :param step_name: The step_name of this PipelineExecutionStep.
        :type step_name: str
        """

        self._step_name = step_name

    @property
    def step_display_name(self):
        """Gets the step_display_name of this PipelineExecutionStep.


        :return: The step_display_name of this PipelineExecutionStep.
        :rtype: str
        """
        return self._step_display_name

    @step_display_name.setter
    def step_display_name(self, step_display_name):
        """Sets the step_display_name of this PipelineExecutionStep.


        :param step_display_name: The step_display_name of this PipelineExecutionStep.
        :type step_display_name: str
        """

        self._step_display_name = step_display_name

    @property
    def step_description(self):
        """Gets the step_description of this PipelineExecutionStep.


        :return: The step_description of this PipelineExecutionStep.
        :rtype: str
        """
        return self._step_description

    @step_description.setter
    def step_description(self, step_description):
        """Sets the step_description of this PipelineExecutionStep.


        :param step_description: The step_description of this PipelineExecutionStep.
        :type step_description: str
        """

        self._step_description = step_description

    @property
    def start_time(self):
        """Gets the start_time of this PipelineExecutionStep.


        :return: The start_time of this PipelineExecutionStep.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PipelineExecutionStep.


        :param start_time: The start_time of this PipelineExecutionStep.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this PipelineExecutionStep.


        :return: The end_time of this PipelineExecutionStep.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PipelineExecutionStep.


        :param end_time: The end_time of this PipelineExecutionStep.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def step_status(self):
        """Gets the step_status of this PipelineExecutionStep.


        :return: The step_status of this PipelineExecutionStep.
        :rtype: StepStatus
        """
        return self._step_status

    @step_status.setter
    def step_status(self, step_status):
        """Sets the step_status of this PipelineExecutionStep.


        :param step_status: The step_status of this PipelineExecutionStep.
        :type step_status: StepStatus
        """

        self._step_status = step_status

    @property
    def cache_hit_result(self):
        """Gets the cache_hit_result of this PipelineExecutionStep.


        :return: The cache_hit_result of this PipelineExecutionStep.
        :rtype: PipelineExecutionStepCacheHitResult
        """
        return self._cache_hit_result

    @cache_hit_result.setter
    def cache_hit_result(self, cache_hit_result):
        """Sets the cache_hit_result of this PipelineExecutionStep.


        :param cache_hit_result: The cache_hit_result of this PipelineExecutionStep.
        :type cache_hit_result: PipelineExecutionStepCacheHitResult
        """

        self._cache_hit_result = cache_hit_result

    @property
    def attempt_count(self):
        """Gets the attempt_count of this PipelineExecutionStep.


        :return: The attempt_count of this PipelineExecutionStep.
        :rtype: int
        """
        return self._attempt_count

    @attempt_count.setter
    def attempt_count(self, attempt_count):
        """Sets the attempt_count of this PipelineExecutionStep.


        :param attempt_count: The attempt_count of this PipelineExecutionStep.
        :type attempt_count: int
        """

        self._attempt_count = attempt_count

    @property
    def failure_reason(self):
        """Gets the failure_reason of this PipelineExecutionStep.


        :return: The failure_reason of this PipelineExecutionStep.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this PipelineExecutionStep.


        :param failure_reason: The failure_reason of this PipelineExecutionStep.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def metadata(self):
        """Gets the metadata of this PipelineExecutionStep.


        :return: The metadata of this PipelineExecutionStep.
        :rtype: PipelineExecutionStepMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PipelineExecutionStep.


        :param metadata: The metadata of this PipelineExecutionStep.
        :type metadata: PipelineExecutionStepMetadata
        """

        self._metadata = metadata

    @property
    def selective_execution_result(self):
        """Gets the selective_execution_result of this PipelineExecutionStep.


        :return: The selective_execution_result of this PipelineExecutionStep.
        :rtype: PipelineExecutionStepSelectiveExecutionResult
        """
        return self._selective_execution_result

    @selective_execution_result.setter
    def selective_execution_result(self, selective_execution_result):
        """Sets the selective_execution_result of this PipelineExecutionStep.


        :param selective_execution_result: The selective_execution_result of this PipelineExecutionStep.
        :type selective_execution_result: PipelineExecutionStepSelectiveExecutionResult
        """

        self._selective_execution_result = selective_execution_result
