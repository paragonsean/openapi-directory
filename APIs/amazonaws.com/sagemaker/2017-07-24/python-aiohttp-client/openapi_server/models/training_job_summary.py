# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_training_job_response_warm_pool_status import DescribeTrainingJobResponseWarmPoolStatus
from openapi_server.models.training_job_status import TrainingJobStatus
from openapi_server import util


class TrainingJobSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, training_job_name: str=None, training_job_arn: str=None, creation_time: datetime=None, training_end_time: datetime=None, last_modified_time: datetime=None, training_job_status: TrainingJobStatus=None, warm_pool_status: DescribeTrainingJobResponseWarmPoolStatus=None):
        """TrainingJobSummary - a model defined in OpenAPI

        :param training_job_name: The training_job_name of this TrainingJobSummary.
        :param training_job_arn: The training_job_arn of this TrainingJobSummary.
        :param creation_time: The creation_time of this TrainingJobSummary.
        :param training_end_time: The training_end_time of this TrainingJobSummary.
        :param last_modified_time: The last_modified_time of this TrainingJobSummary.
        :param training_job_status: The training_job_status of this TrainingJobSummary.
        :param warm_pool_status: The warm_pool_status of this TrainingJobSummary.
        """
        self.openapi_types = {
            'training_job_name': str,
            'training_job_arn': str,
            'creation_time': datetime,
            'training_end_time': datetime,
            'last_modified_time': datetime,
            'training_job_status': TrainingJobStatus,
            'warm_pool_status': DescribeTrainingJobResponseWarmPoolStatus
        }

        self.attribute_map = {
            'training_job_name': 'TrainingJobName',
            'training_job_arn': 'TrainingJobArn',
            'creation_time': 'CreationTime',
            'training_end_time': 'TrainingEndTime',
            'last_modified_time': 'LastModifiedTime',
            'training_job_status': 'TrainingJobStatus',
            'warm_pool_status': 'WarmPoolStatus'
        }

        self._training_job_name = training_job_name
        self._training_job_arn = training_job_arn
        self._creation_time = creation_time
        self._training_end_time = training_end_time
        self._last_modified_time = last_modified_time
        self._training_job_status = training_job_status
        self._warm_pool_status = warm_pool_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingJobSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainingJobSummary of this TrainingJobSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def training_job_name(self):
        """Gets the training_job_name of this TrainingJobSummary.


        :return: The training_job_name of this TrainingJobSummary.
        :rtype: str
        """
        return self._training_job_name

    @training_job_name.setter
    def training_job_name(self, training_job_name):
        """Sets the training_job_name of this TrainingJobSummary.


        :param training_job_name: The training_job_name of this TrainingJobSummary.
        :type training_job_name: str
        """
        if training_job_name is None:
            raise ValueError("Invalid value for `training_job_name`, must not be `None`")

        self._training_job_name = training_job_name

    @property
    def training_job_arn(self):
        """Gets the training_job_arn of this TrainingJobSummary.


        :return: The training_job_arn of this TrainingJobSummary.
        :rtype: str
        """
        return self._training_job_arn

    @training_job_arn.setter
    def training_job_arn(self, training_job_arn):
        """Sets the training_job_arn of this TrainingJobSummary.


        :param training_job_arn: The training_job_arn of this TrainingJobSummary.
        :type training_job_arn: str
        """
        if training_job_arn is None:
            raise ValueError("Invalid value for `training_job_arn`, must not be `None`")

        self._training_job_arn = training_job_arn

    @property
    def creation_time(self):
        """Gets the creation_time of this TrainingJobSummary.


        :return: The creation_time of this TrainingJobSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TrainingJobSummary.


        :param creation_time: The creation_time of this TrainingJobSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def training_end_time(self):
        """Gets the training_end_time of this TrainingJobSummary.


        :return: The training_end_time of this TrainingJobSummary.
        :rtype: datetime
        """
        return self._training_end_time

    @training_end_time.setter
    def training_end_time(self, training_end_time):
        """Sets the training_end_time of this TrainingJobSummary.


        :param training_end_time: The training_end_time of this TrainingJobSummary.
        :type training_end_time: datetime
        """

        self._training_end_time = training_end_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this TrainingJobSummary.


        :return: The last_modified_time of this TrainingJobSummary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this TrainingJobSummary.


        :param last_modified_time: The last_modified_time of this TrainingJobSummary.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def training_job_status(self):
        """Gets the training_job_status of this TrainingJobSummary.


        :return: The training_job_status of this TrainingJobSummary.
        :rtype: TrainingJobStatus
        """
        return self._training_job_status

    @training_job_status.setter
    def training_job_status(self, training_job_status):
        """Sets the training_job_status of this TrainingJobSummary.


        :param training_job_status: The training_job_status of this TrainingJobSummary.
        :type training_job_status: TrainingJobStatus
        """
        if training_job_status is None:
            raise ValueError("Invalid value for `training_job_status`, must not be `None`")

        self._training_job_status = training_job_status

    @property
    def warm_pool_status(self):
        """Gets the warm_pool_status of this TrainingJobSummary.


        :return: The warm_pool_status of this TrainingJobSummary.
        :rtype: DescribeTrainingJobResponseWarmPoolStatus
        """
        return self._warm_pool_status

    @warm_pool_status.setter
    def warm_pool_status(self, warm_pool_status):
        """Sets the warm_pool_status of this TrainingJobSummary.


        :param warm_pool_status: The warm_pool_status of this TrainingJobSummary.
        :type warm_pool_status: DescribeTrainingJobResponseWarmPoolStatus
        """

        self._warm_pool_status = warm_pool_status
