# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceCatalog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_catalog_arn: str=None, resource_catalog_name: str=None, description: str=None, creation_time: datetime=None):
        """ResourceCatalog - a model defined in OpenAPI

        :param resource_catalog_arn: The resource_catalog_arn of this ResourceCatalog.
        :param resource_catalog_name: The resource_catalog_name of this ResourceCatalog.
        :param description: The description of this ResourceCatalog.
        :param creation_time: The creation_time of this ResourceCatalog.
        """
        self.openapi_types = {
            'resource_catalog_arn': str,
            'resource_catalog_name': str,
            'description': str,
            'creation_time': datetime
        }

        self.attribute_map = {
            'resource_catalog_arn': 'ResourceCatalogArn',
            'resource_catalog_name': 'ResourceCatalogName',
            'description': 'Description',
            'creation_time': 'CreationTime'
        }

        self._resource_catalog_arn = resource_catalog_arn
        self._resource_catalog_name = resource_catalog_name
        self._description = description
        self._creation_time = creation_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceCatalog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceCatalog of this ResourceCatalog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_catalog_arn(self):
        """Gets the resource_catalog_arn of this ResourceCatalog.


        :return: The resource_catalog_arn of this ResourceCatalog.
        :rtype: str
        """
        return self._resource_catalog_arn

    @resource_catalog_arn.setter
    def resource_catalog_arn(self, resource_catalog_arn):
        """Sets the resource_catalog_arn of this ResourceCatalog.


        :param resource_catalog_arn: The resource_catalog_arn of this ResourceCatalog.
        :type resource_catalog_arn: str
        """
        if resource_catalog_arn is None:
            raise ValueError("Invalid value for `resource_catalog_arn`, must not be `None`")

        self._resource_catalog_arn = resource_catalog_arn

    @property
    def resource_catalog_name(self):
        """Gets the resource_catalog_name of this ResourceCatalog.


        :return: The resource_catalog_name of this ResourceCatalog.
        :rtype: str
        """
        return self._resource_catalog_name

    @resource_catalog_name.setter
    def resource_catalog_name(self, resource_catalog_name):
        """Sets the resource_catalog_name of this ResourceCatalog.


        :param resource_catalog_name: The resource_catalog_name of this ResourceCatalog.
        :type resource_catalog_name: str
        """
        if resource_catalog_name is None:
            raise ValueError("Invalid value for `resource_catalog_name`, must not be `None`")

        self._resource_catalog_name = resource_catalog_name

    @property
    def description(self):
        """Gets the description of this ResourceCatalog.


        :return: The description of this ResourceCatalog.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResourceCatalog.


        :param description: The description of this ResourceCatalog.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def creation_time(self):
        """Gets the creation_time of this ResourceCatalog.


        :return: The creation_time of this ResourceCatalog.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ResourceCatalog.


        :param creation_time: The creation_time of this ResourceCatalog.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time
