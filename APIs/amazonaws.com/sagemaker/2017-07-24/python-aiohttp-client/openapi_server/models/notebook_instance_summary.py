# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_type import InstanceType
from openapi_server.models.notebook_instance_status import NotebookInstanceStatus
from openapi_server import util


class NotebookInstanceSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notebook_instance_name: str=None, notebook_instance_arn: str=None, notebook_instance_status: NotebookInstanceStatus=None, url: str=None, instance_type: InstanceType=None, creation_time: datetime=None, last_modified_time: datetime=None, notebook_instance_lifecycle_config_name: str=None, default_code_repository: str=None, additional_code_repositories: List=None):
        """NotebookInstanceSummary - a model defined in OpenAPI

        :param notebook_instance_name: The notebook_instance_name of this NotebookInstanceSummary.
        :param notebook_instance_arn: The notebook_instance_arn of this NotebookInstanceSummary.
        :param notebook_instance_status: The notebook_instance_status of this NotebookInstanceSummary.
        :param url: The url of this NotebookInstanceSummary.
        :param instance_type: The instance_type of this NotebookInstanceSummary.
        :param creation_time: The creation_time of this NotebookInstanceSummary.
        :param last_modified_time: The last_modified_time of this NotebookInstanceSummary.
        :param notebook_instance_lifecycle_config_name: The notebook_instance_lifecycle_config_name of this NotebookInstanceSummary.
        :param default_code_repository: The default_code_repository of this NotebookInstanceSummary.
        :param additional_code_repositories: The additional_code_repositories of this NotebookInstanceSummary.
        """
        self.openapi_types = {
            'notebook_instance_name': str,
            'notebook_instance_arn': str,
            'notebook_instance_status': NotebookInstanceStatus,
            'url': str,
            'instance_type': InstanceType,
            'creation_time': datetime,
            'last_modified_time': datetime,
            'notebook_instance_lifecycle_config_name': str,
            'default_code_repository': str,
            'additional_code_repositories': List
        }

        self.attribute_map = {
            'notebook_instance_name': 'NotebookInstanceName',
            'notebook_instance_arn': 'NotebookInstanceArn',
            'notebook_instance_status': 'NotebookInstanceStatus',
            'url': 'Url',
            'instance_type': 'InstanceType',
            'creation_time': 'CreationTime',
            'last_modified_time': 'LastModifiedTime',
            'notebook_instance_lifecycle_config_name': 'NotebookInstanceLifecycleConfigName',
            'default_code_repository': 'DefaultCodeRepository',
            'additional_code_repositories': 'AdditionalCodeRepositories'
        }

        self._notebook_instance_name = notebook_instance_name
        self._notebook_instance_arn = notebook_instance_arn
        self._notebook_instance_status = notebook_instance_status
        self._url = url
        self._instance_type = instance_type
        self._creation_time = creation_time
        self._last_modified_time = last_modified_time
        self._notebook_instance_lifecycle_config_name = notebook_instance_lifecycle_config_name
        self._default_code_repository = default_code_repository
        self._additional_code_repositories = additional_code_repositories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotebookInstanceSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotebookInstanceSummary of this NotebookInstanceSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notebook_instance_name(self):
        """Gets the notebook_instance_name of this NotebookInstanceSummary.


        :return: The notebook_instance_name of this NotebookInstanceSummary.
        :rtype: str
        """
        return self._notebook_instance_name

    @notebook_instance_name.setter
    def notebook_instance_name(self, notebook_instance_name):
        """Sets the notebook_instance_name of this NotebookInstanceSummary.


        :param notebook_instance_name: The notebook_instance_name of this NotebookInstanceSummary.
        :type notebook_instance_name: str
        """
        if notebook_instance_name is None:
            raise ValueError("Invalid value for `notebook_instance_name`, must not be `None`")

        self._notebook_instance_name = notebook_instance_name

    @property
    def notebook_instance_arn(self):
        """Gets the notebook_instance_arn of this NotebookInstanceSummary.


        :return: The notebook_instance_arn of this NotebookInstanceSummary.
        :rtype: str
        """
        return self._notebook_instance_arn

    @notebook_instance_arn.setter
    def notebook_instance_arn(self, notebook_instance_arn):
        """Sets the notebook_instance_arn of this NotebookInstanceSummary.


        :param notebook_instance_arn: The notebook_instance_arn of this NotebookInstanceSummary.
        :type notebook_instance_arn: str
        """
        if notebook_instance_arn is None:
            raise ValueError("Invalid value for `notebook_instance_arn`, must not be `None`")

        self._notebook_instance_arn = notebook_instance_arn

    @property
    def notebook_instance_status(self):
        """Gets the notebook_instance_status of this NotebookInstanceSummary.


        :return: The notebook_instance_status of this NotebookInstanceSummary.
        :rtype: NotebookInstanceStatus
        """
        return self._notebook_instance_status

    @notebook_instance_status.setter
    def notebook_instance_status(self, notebook_instance_status):
        """Sets the notebook_instance_status of this NotebookInstanceSummary.


        :param notebook_instance_status: The notebook_instance_status of this NotebookInstanceSummary.
        :type notebook_instance_status: NotebookInstanceStatus
        """

        self._notebook_instance_status = notebook_instance_status

    @property
    def url(self):
        """Gets the url of this NotebookInstanceSummary.


        :return: The url of this NotebookInstanceSummary.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NotebookInstanceSummary.


        :param url: The url of this NotebookInstanceSummary.
        :type url: str
        """

        self._url = url

    @property
    def instance_type(self):
        """Gets the instance_type of this NotebookInstanceSummary.


        :return: The instance_type of this NotebookInstanceSummary.
        :rtype: InstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this NotebookInstanceSummary.


        :param instance_type: The instance_type of this NotebookInstanceSummary.
        :type instance_type: InstanceType
        """

        self._instance_type = instance_type

    @property
    def creation_time(self):
        """Gets the creation_time of this NotebookInstanceSummary.


        :return: The creation_time of this NotebookInstanceSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this NotebookInstanceSummary.


        :param creation_time: The creation_time of this NotebookInstanceSummary.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this NotebookInstanceSummary.


        :return: The last_modified_time of this NotebookInstanceSummary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this NotebookInstanceSummary.


        :param last_modified_time: The last_modified_time of this NotebookInstanceSummary.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def notebook_instance_lifecycle_config_name(self):
        """Gets the notebook_instance_lifecycle_config_name of this NotebookInstanceSummary.


        :return: The notebook_instance_lifecycle_config_name of this NotebookInstanceSummary.
        :rtype: str
        """
        return self._notebook_instance_lifecycle_config_name

    @notebook_instance_lifecycle_config_name.setter
    def notebook_instance_lifecycle_config_name(self, notebook_instance_lifecycle_config_name):
        """Sets the notebook_instance_lifecycle_config_name of this NotebookInstanceSummary.


        :param notebook_instance_lifecycle_config_name: The notebook_instance_lifecycle_config_name of this NotebookInstanceSummary.
        :type notebook_instance_lifecycle_config_name: str
        """

        self._notebook_instance_lifecycle_config_name = notebook_instance_lifecycle_config_name

    @property
    def default_code_repository(self):
        """Gets the default_code_repository of this NotebookInstanceSummary.


        :return: The default_code_repository of this NotebookInstanceSummary.
        :rtype: str
        """
        return self._default_code_repository

    @default_code_repository.setter
    def default_code_repository(self, default_code_repository):
        """Sets the default_code_repository of this NotebookInstanceSummary.


        :param default_code_repository: The default_code_repository of this NotebookInstanceSummary.
        :type default_code_repository: str
        """

        self._default_code_repository = default_code_repository

    @property
    def additional_code_repositories(self):
        """Gets the additional_code_repositories of this NotebookInstanceSummary.


        :return: The additional_code_repositories of this NotebookInstanceSummary.
        :rtype: List
        """
        return self._additional_code_repositories

    @additional_code_repositories.setter
    def additional_code_repositories(self, additional_code_repositories):
        """Sets the additional_code_repositories of this NotebookInstanceSummary.


        :param additional_code_repositories: The additional_code_repositories of this NotebookInstanceSummary.
        :type additional_code_repositories: List
        """

        self._additional_code_repositories = additional_code_repositories
