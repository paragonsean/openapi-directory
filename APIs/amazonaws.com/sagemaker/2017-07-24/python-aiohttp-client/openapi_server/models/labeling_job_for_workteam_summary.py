# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.labeling_job_for_workteam_summary_label_counters import LabelingJobForWorkteamSummaryLabelCounters
from openapi_server import util


class LabelingJobForWorkteamSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labeling_job_name: str=None, job_reference_code: str=None, work_requester_account_id: str=None, creation_time: datetime=None, label_counters: LabelingJobForWorkteamSummaryLabelCounters=None, number_of_human_workers_per_data_object: int=None):
        """LabelingJobForWorkteamSummary - a model defined in OpenAPI

        :param labeling_job_name: The labeling_job_name of this LabelingJobForWorkteamSummary.
        :param job_reference_code: The job_reference_code of this LabelingJobForWorkteamSummary.
        :param work_requester_account_id: The work_requester_account_id of this LabelingJobForWorkteamSummary.
        :param creation_time: The creation_time of this LabelingJobForWorkteamSummary.
        :param label_counters: The label_counters of this LabelingJobForWorkteamSummary.
        :param number_of_human_workers_per_data_object: The number_of_human_workers_per_data_object of this LabelingJobForWorkteamSummary.
        """
        self.openapi_types = {
            'labeling_job_name': str,
            'job_reference_code': str,
            'work_requester_account_id': str,
            'creation_time': datetime,
            'label_counters': LabelingJobForWorkteamSummaryLabelCounters,
            'number_of_human_workers_per_data_object': int
        }

        self.attribute_map = {
            'labeling_job_name': 'LabelingJobName',
            'job_reference_code': 'JobReferenceCode',
            'work_requester_account_id': 'WorkRequesterAccountId',
            'creation_time': 'CreationTime',
            'label_counters': 'LabelCounters',
            'number_of_human_workers_per_data_object': 'NumberOfHumanWorkersPerDataObject'
        }

        self._labeling_job_name = labeling_job_name
        self._job_reference_code = job_reference_code
        self._work_requester_account_id = work_requester_account_id
        self._creation_time = creation_time
        self._label_counters = label_counters
        self._number_of_human_workers_per_data_object = number_of_human_workers_per_data_object

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelingJobForWorkteamSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabelingJobForWorkteamSummary of this LabelingJobForWorkteamSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labeling_job_name(self):
        """Gets the labeling_job_name of this LabelingJobForWorkteamSummary.


        :return: The labeling_job_name of this LabelingJobForWorkteamSummary.
        :rtype: str
        """
        return self._labeling_job_name

    @labeling_job_name.setter
    def labeling_job_name(self, labeling_job_name):
        """Sets the labeling_job_name of this LabelingJobForWorkteamSummary.


        :param labeling_job_name: The labeling_job_name of this LabelingJobForWorkteamSummary.
        :type labeling_job_name: str
        """

        self._labeling_job_name = labeling_job_name

    @property
    def job_reference_code(self):
        """Gets the job_reference_code of this LabelingJobForWorkteamSummary.


        :return: The job_reference_code of this LabelingJobForWorkteamSummary.
        :rtype: str
        """
        return self._job_reference_code

    @job_reference_code.setter
    def job_reference_code(self, job_reference_code):
        """Sets the job_reference_code of this LabelingJobForWorkteamSummary.


        :param job_reference_code: The job_reference_code of this LabelingJobForWorkteamSummary.
        :type job_reference_code: str
        """
        if job_reference_code is None:
            raise ValueError("Invalid value for `job_reference_code`, must not be `None`")

        self._job_reference_code = job_reference_code

    @property
    def work_requester_account_id(self):
        """Gets the work_requester_account_id of this LabelingJobForWorkteamSummary.


        :return: The work_requester_account_id of this LabelingJobForWorkteamSummary.
        :rtype: str
        """
        return self._work_requester_account_id

    @work_requester_account_id.setter
    def work_requester_account_id(self, work_requester_account_id):
        """Sets the work_requester_account_id of this LabelingJobForWorkteamSummary.


        :param work_requester_account_id: The work_requester_account_id of this LabelingJobForWorkteamSummary.
        :type work_requester_account_id: str
        """
        if work_requester_account_id is None:
            raise ValueError("Invalid value for `work_requester_account_id`, must not be `None`")

        self._work_requester_account_id = work_requester_account_id

    @property
    def creation_time(self):
        """Gets the creation_time of this LabelingJobForWorkteamSummary.


        :return: The creation_time of this LabelingJobForWorkteamSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this LabelingJobForWorkteamSummary.


        :param creation_time: The creation_time of this LabelingJobForWorkteamSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def label_counters(self):
        """Gets the label_counters of this LabelingJobForWorkteamSummary.


        :return: The label_counters of this LabelingJobForWorkteamSummary.
        :rtype: LabelingJobForWorkteamSummaryLabelCounters
        """
        return self._label_counters

    @label_counters.setter
    def label_counters(self, label_counters):
        """Sets the label_counters of this LabelingJobForWorkteamSummary.


        :param label_counters: The label_counters of this LabelingJobForWorkteamSummary.
        :type label_counters: LabelingJobForWorkteamSummaryLabelCounters
        """

        self._label_counters = label_counters

    @property
    def number_of_human_workers_per_data_object(self):
        """Gets the number_of_human_workers_per_data_object of this LabelingJobForWorkteamSummary.


        :return: The number_of_human_workers_per_data_object of this LabelingJobForWorkteamSummary.
        :rtype: int
        """
        return self._number_of_human_workers_per_data_object

    @number_of_human_workers_per_data_object.setter
    def number_of_human_workers_per_data_object(self, number_of_human_workers_per_data_object):
        """Sets the number_of_human_workers_per_data_object of this LabelingJobForWorkteamSummary.


        :param number_of_human_workers_per_data_object: The number_of_human_workers_per_data_object of this LabelingJobForWorkteamSummary.
        :type number_of_human_workers_per_data_object: int
        """

        self._number_of_human_workers_per_data_object = number_of_human_workers_per_data_object
