# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capture_mode import CaptureMode
from openapi_server import util


class CaptureOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capture_mode: CaptureMode=None):
        """CaptureOption - a model defined in OpenAPI

        :param capture_mode: The capture_mode of this CaptureOption.
        """
        self.openapi_types = {
            'capture_mode': CaptureMode
        }

        self.attribute_map = {
            'capture_mode': 'CaptureMode'
        }

        self._capture_mode = capture_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CaptureOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaptureOption of this CaptureOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capture_mode(self):
        """Gets the capture_mode of this CaptureOption.


        :return: The capture_mode of this CaptureOption.
        :rtype: CaptureMode
        """
        return self._capture_mode

    @capture_mode.setter
    def capture_mode(self, capture_mode):
        """Sets the capture_mode of this CaptureOption.


        :param capture_mode: The capture_mode of this CaptureOption.
        :type capture_mode: CaptureMode
        """
        if capture_mode is None:
            raise ValueError("Invalid value for `capture_mode`, must not be `None`")

        self._capture_mode = capture_mode
