# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_inference_experiment_request_data_storage_config import CreateInferenceExperimentRequestDataStorageConfig
from openapi_server.models.create_inference_experiment_request_schedule import CreateInferenceExperimentRequestSchedule
from openapi_server.models.create_inference_experiment_request_shadow_mode_config import CreateInferenceExperimentRequestShadowModeConfig
from openapi_server.models.inference_experiment_type import InferenceExperimentType
from openapi_server import util


class CreateInferenceExperimentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: InferenceExperimentType=None, schedule: CreateInferenceExperimentRequestSchedule=None, description: str=None, role_arn: str=None, endpoint_name: str=None, model_variants: List=None, data_storage_config: CreateInferenceExperimentRequestDataStorageConfig=None, shadow_mode_config: CreateInferenceExperimentRequestShadowModeConfig=None, kms_key: str=None, tags: List=None):
        """CreateInferenceExperimentRequest - a model defined in OpenAPI

        :param name: The name of this CreateInferenceExperimentRequest.
        :param type: The type of this CreateInferenceExperimentRequest.
        :param schedule: The schedule of this CreateInferenceExperimentRequest.
        :param description: The description of this CreateInferenceExperimentRequest.
        :param role_arn: The role_arn of this CreateInferenceExperimentRequest.
        :param endpoint_name: The endpoint_name of this CreateInferenceExperimentRequest.
        :param model_variants: The model_variants of this CreateInferenceExperimentRequest.
        :param data_storage_config: The data_storage_config of this CreateInferenceExperimentRequest.
        :param shadow_mode_config: The shadow_mode_config of this CreateInferenceExperimentRequest.
        :param kms_key: The kms_key of this CreateInferenceExperimentRequest.
        :param tags: The tags of this CreateInferenceExperimentRequest.
        """
        self.openapi_types = {
            'name': str,
            'type': InferenceExperimentType,
            'schedule': CreateInferenceExperimentRequestSchedule,
            'description': str,
            'role_arn': str,
            'endpoint_name': str,
            'model_variants': List,
            'data_storage_config': CreateInferenceExperimentRequestDataStorageConfig,
            'shadow_mode_config': CreateInferenceExperimentRequestShadowModeConfig,
            'kms_key': str,
            'tags': List
        }

        self.attribute_map = {
            'name': 'Name',
            'type': 'Type',
            'schedule': 'Schedule',
            'description': 'Description',
            'role_arn': 'RoleArn',
            'endpoint_name': 'EndpointName',
            'model_variants': 'ModelVariants',
            'data_storage_config': 'DataStorageConfig',
            'shadow_mode_config': 'ShadowModeConfig',
            'kms_key': 'KmsKey',
            'tags': 'Tags'
        }

        self._name = name
        self._type = type
        self._schedule = schedule
        self._description = description
        self._role_arn = role_arn
        self._endpoint_name = endpoint_name
        self._model_variants = model_variants
        self._data_storage_config = data_storage_config
        self._shadow_mode_config = shadow_mode_config
        self._kms_key = kms_key
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateInferenceExperimentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateInferenceExperimentRequest of this CreateInferenceExperimentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateInferenceExperimentRequest.


        :return: The name of this CreateInferenceExperimentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateInferenceExperimentRequest.


        :param name: The name of this CreateInferenceExperimentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreateInferenceExperimentRequest.


        :return: The type of this CreateInferenceExperimentRequest.
        :rtype: InferenceExperimentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateInferenceExperimentRequest.


        :param type: The type of this CreateInferenceExperimentRequest.
        :type type: InferenceExperimentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def schedule(self):
        """Gets the schedule of this CreateInferenceExperimentRequest.


        :return: The schedule of this CreateInferenceExperimentRequest.
        :rtype: CreateInferenceExperimentRequestSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CreateInferenceExperimentRequest.


        :param schedule: The schedule of this CreateInferenceExperimentRequest.
        :type schedule: CreateInferenceExperimentRequestSchedule
        """

        self._schedule = schedule

    @property
    def description(self):
        """Gets the description of this CreateInferenceExperimentRequest.


        :return: The description of this CreateInferenceExperimentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateInferenceExperimentRequest.


        :param description: The description of this CreateInferenceExperimentRequest.
        :type description: str
        """

        self._description = description

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateInferenceExperimentRequest.


        :return: The role_arn of this CreateInferenceExperimentRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateInferenceExperimentRequest.


        :param role_arn: The role_arn of this CreateInferenceExperimentRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this CreateInferenceExperimentRequest.


        :return: The endpoint_name of this CreateInferenceExperimentRequest.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this CreateInferenceExperimentRequest.


        :param endpoint_name: The endpoint_name of this CreateInferenceExperimentRequest.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def model_variants(self):
        """Gets the model_variants of this CreateInferenceExperimentRequest.


        :return: The model_variants of this CreateInferenceExperimentRequest.
        :rtype: List
        """
        return self._model_variants

    @model_variants.setter
    def model_variants(self, model_variants):
        """Sets the model_variants of this CreateInferenceExperimentRequest.


        :param model_variants: The model_variants of this CreateInferenceExperimentRequest.
        :type model_variants: List
        """
        if model_variants is None:
            raise ValueError("Invalid value for `model_variants`, must not be `None`")

        self._model_variants = model_variants

    @property
    def data_storage_config(self):
        """Gets the data_storage_config of this CreateInferenceExperimentRequest.


        :return: The data_storage_config of this CreateInferenceExperimentRequest.
        :rtype: CreateInferenceExperimentRequestDataStorageConfig
        """
        return self._data_storage_config

    @data_storage_config.setter
    def data_storage_config(self, data_storage_config):
        """Sets the data_storage_config of this CreateInferenceExperimentRequest.


        :param data_storage_config: The data_storage_config of this CreateInferenceExperimentRequest.
        :type data_storage_config: CreateInferenceExperimentRequestDataStorageConfig
        """

        self._data_storage_config = data_storage_config

    @property
    def shadow_mode_config(self):
        """Gets the shadow_mode_config of this CreateInferenceExperimentRequest.


        :return: The shadow_mode_config of this CreateInferenceExperimentRequest.
        :rtype: CreateInferenceExperimentRequestShadowModeConfig
        """
        return self._shadow_mode_config

    @shadow_mode_config.setter
    def shadow_mode_config(self, shadow_mode_config):
        """Sets the shadow_mode_config of this CreateInferenceExperimentRequest.


        :param shadow_mode_config: The shadow_mode_config of this CreateInferenceExperimentRequest.
        :type shadow_mode_config: CreateInferenceExperimentRequestShadowModeConfig
        """
        if shadow_mode_config is None:
            raise ValueError("Invalid value for `shadow_mode_config`, must not be `None`")

        self._shadow_mode_config = shadow_mode_config

    @property
    def kms_key(self):
        """Gets the kms_key of this CreateInferenceExperimentRequest.


        :return: The kms_key of this CreateInferenceExperimentRequest.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this CreateInferenceExperimentRequest.


        :param kms_key: The kms_key of this CreateInferenceExperimentRequest.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def tags(self):
        """Gets the tags of this CreateInferenceExperimentRequest.


        :return: The tags of this CreateInferenceExperimentRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateInferenceExperimentRequest.


        :param tags: The tags of this CreateInferenceExperimentRequest.
        :type tags: List
        """

        self._tags = tags
