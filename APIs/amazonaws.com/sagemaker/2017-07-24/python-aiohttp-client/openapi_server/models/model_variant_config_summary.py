# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_variant_config_summary_infrastructure_config import ModelVariantConfigSummaryInfrastructureConfig
from openapi_server.models.model_variant_status import ModelVariantStatus
from openapi_server import util


class ModelVariantConfigSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_name: str=None, variant_name: str=None, infrastructure_config: ModelVariantConfigSummaryInfrastructureConfig=None, status: ModelVariantStatus=None):
        """ModelVariantConfigSummary - a model defined in OpenAPI

        :param model_name: The model_name of this ModelVariantConfigSummary.
        :param variant_name: The variant_name of this ModelVariantConfigSummary.
        :param infrastructure_config: The infrastructure_config of this ModelVariantConfigSummary.
        :param status: The status of this ModelVariantConfigSummary.
        """
        self.openapi_types = {
            'model_name': str,
            'variant_name': str,
            'infrastructure_config': ModelVariantConfigSummaryInfrastructureConfig,
            'status': ModelVariantStatus
        }

        self.attribute_map = {
            'model_name': 'ModelName',
            'variant_name': 'VariantName',
            'infrastructure_config': 'InfrastructureConfig',
            'status': 'Status'
        }

        self._model_name = model_name
        self._variant_name = variant_name
        self._infrastructure_config = infrastructure_config
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelVariantConfigSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelVariantConfigSummary of this ModelVariantConfigSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_name(self):
        """Gets the model_name of this ModelVariantConfigSummary.


        :return: The model_name of this ModelVariantConfigSummary.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this ModelVariantConfigSummary.


        :param model_name: The model_name of this ModelVariantConfigSummary.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def variant_name(self):
        """Gets the variant_name of this ModelVariantConfigSummary.


        :return: The variant_name of this ModelVariantConfigSummary.
        :rtype: str
        """
        return self._variant_name

    @variant_name.setter
    def variant_name(self, variant_name):
        """Sets the variant_name of this ModelVariantConfigSummary.


        :param variant_name: The variant_name of this ModelVariantConfigSummary.
        :type variant_name: str
        """
        if variant_name is None:
            raise ValueError("Invalid value for `variant_name`, must not be `None`")

        self._variant_name = variant_name

    @property
    def infrastructure_config(self):
        """Gets the infrastructure_config of this ModelVariantConfigSummary.


        :return: The infrastructure_config of this ModelVariantConfigSummary.
        :rtype: ModelVariantConfigSummaryInfrastructureConfig
        """
        return self._infrastructure_config

    @infrastructure_config.setter
    def infrastructure_config(self, infrastructure_config):
        """Sets the infrastructure_config of this ModelVariantConfigSummary.


        :param infrastructure_config: The infrastructure_config of this ModelVariantConfigSummary.
        :type infrastructure_config: ModelVariantConfigSummaryInfrastructureConfig
        """
        if infrastructure_config is None:
            raise ValueError("Invalid value for `infrastructure_config`, must not be `None`")

        self._infrastructure_config = infrastructure_config

    @property
    def status(self):
        """Gets the status of this ModelVariantConfigSummary.


        :return: The status of this ModelVariantConfigSummary.
        :rtype: ModelVariantStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelVariantConfigSummary.


        :param status: The status of this ModelVariantConfigSummary.
        :type status: ModelVariantStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
