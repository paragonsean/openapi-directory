# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabelCounters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_labeled: int=None, human_labeled: int=None, machine_labeled: int=None, failed_non_retryable_error: int=None, unlabeled: int=None):
        """LabelCounters - a model defined in OpenAPI

        :param total_labeled: The total_labeled of this LabelCounters.
        :param human_labeled: The human_labeled of this LabelCounters.
        :param machine_labeled: The machine_labeled of this LabelCounters.
        :param failed_non_retryable_error: The failed_non_retryable_error of this LabelCounters.
        :param unlabeled: The unlabeled of this LabelCounters.
        """
        self.openapi_types = {
            'total_labeled': int,
            'human_labeled': int,
            'machine_labeled': int,
            'failed_non_retryable_error': int,
            'unlabeled': int
        }

        self.attribute_map = {
            'total_labeled': 'TotalLabeled',
            'human_labeled': 'HumanLabeled',
            'machine_labeled': 'MachineLabeled',
            'failed_non_retryable_error': 'FailedNonRetryableError',
            'unlabeled': 'Unlabeled'
        }

        self._total_labeled = total_labeled
        self._human_labeled = human_labeled
        self._machine_labeled = machine_labeled
        self._failed_non_retryable_error = failed_non_retryable_error
        self._unlabeled = unlabeled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelCounters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabelCounters of this LabelCounters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_labeled(self):
        """Gets the total_labeled of this LabelCounters.


        :return: The total_labeled of this LabelCounters.
        :rtype: int
        """
        return self._total_labeled

    @total_labeled.setter
    def total_labeled(self, total_labeled):
        """Sets the total_labeled of this LabelCounters.


        :param total_labeled: The total_labeled of this LabelCounters.
        :type total_labeled: int
        """

        self._total_labeled = total_labeled

    @property
    def human_labeled(self):
        """Gets the human_labeled of this LabelCounters.


        :return: The human_labeled of this LabelCounters.
        :rtype: int
        """
        return self._human_labeled

    @human_labeled.setter
    def human_labeled(self, human_labeled):
        """Sets the human_labeled of this LabelCounters.


        :param human_labeled: The human_labeled of this LabelCounters.
        :type human_labeled: int
        """

        self._human_labeled = human_labeled

    @property
    def machine_labeled(self):
        """Gets the machine_labeled of this LabelCounters.


        :return: The machine_labeled of this LabelCounters.
        :rtype: int
        """
        return self._machine_labeled

    @machine_labeled.setter
    def machine_labeled(self, machine_labeled):
        """Sets the machine_labeled of this LabelCounters.


        :param machine_labeled: The machine_labeled of this LabelCounters.
        :type machine_labeled: int
        """

        self._machine_labeled = machine_labeled

    @property
    def failed_non_retryable_error(self):
        """Gets the failed_non_retryable_error of this LabelCounters.


        :return: The failed_non_retryable_error of this LabelCounters.
        :rtype: int
        """
        return self._failed_non_retryable_error

    @failed_non_retryable_error.setter
    def failed_non_retryable_error(self, failed_non_retryable_error):
        """Sets the failed_non_retryable_error of this LabelCounters.


        :param failed_non_retryable_error: The failed_non_retryable_error of this LabelCounters.
        :type failed_non_retryable_error: int
        """

        self._failed_non_retryable_error = failed_non_retryable_error

    @property
    def unlabeled(self):
        """Gets the unlabeled of this LabelCounters.


        :return: The unlabeled of this LabelCounters.
        :rtype: int
        """
        return self._unlabeled

    @unlabeled.setter
    def unlabeled(self, unlabeled):
        """Sets the unlabeled of this LabelCounters.


        :param unlabeled: The unlabeled of this LabelCounters.
        :type unlabeled: int
        """

        self._unlabeled = unlabeled
