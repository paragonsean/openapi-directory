# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offline_store_config_data_catalog_config import OfflineStoreConfigDataCatalogConfig
from openapi_server.models.offline_store_config_s3_storage_config import OfflineStoreConfigS3StorageConfig
from openapi_server.models.table_format import TableFormat
from openapi_server import util


class OfflineStoreConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_storage_config: OfflineStoreConfigS3StorageConfig=None, disable_glue_table_creation: bool=None, data_catalog_config: OfflineStoreConfigDataCatalogConfig=None, table_format: TableFormat=None):
        """OfflineStoreConfig - a model defined in OpenAPI

        :param s3_storage_config: The s3_storage_config of this OfflineStoreConfig.
        :param disable_glue_table_creation: The disable_glue_table_creation of this OfflineStoreConfig.
        :param data_catalog_config: The data_catalog_config of this OfflineStoreConfig.
        :param table_format: The table_format of this OfflineStoreConfig.
        """
        self.openapi_types = {
            's3_storage_config': OfflineStoreConfigS3StorageConfig,
            'disable_glue_table_creation': bool,
            'data_catalog_config': OfflineStoreConfigDataCatalogConfig,
            'table_format': TableFormat
        }

        self.attribute_map = {
            's3_storage_config': 'S3StorageConfig',
            'disable_glue_table_creation': 'DisableGlueTableCreation',
            'data_catalog_config': 'DataCatalogConfig',
            'table_format': 'TableFormat'
        }

        self._s3_storage_config = s3_storage_config
        self._disable_glue_table_creation = disable_glue_table_creation
        self._data_catalog_config = data_catalog_config
        self._table_format = table_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfflineStoreConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfflineStoreConfig of this OfflineStoreConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_storage_config(self):
        """Gets the s3_storage_config of this OfflineStoreConfig.


        :return: The s3_storage_config of this OfflineStoreConfig.
        :rtype: OfflineStoreConfigS3StorageConfig
        """
        return self._s3_storage_config

    @s3_storage_config.setter
    def s3_storage_config(self, s3_storage_config):
        """Sets the s3_storage_config of this OfflineStoreConfig.


        :param s3_storage_config: The s3_storage_config of this OfflineStoreConfig.
        :type s3_storage_config: OfflineStoreConfigS3StorageConfig
        """
        if s3_storage_config is None:
            raise ValueError("Invalid value for `s3_storage_config`, must not be `None`")

        self._s3_storage_config = s3_storage_config

    @property
    def disable_glue_table_creation(self):
        """Gets the disable_glue_table_creation of this OfflineStoreConfig.


        :return: The disable_glue_table_creation of this OfflineStoreConfig.
        :rtype: bool
        """
        return self._disable_glue_table_creation

    @disable_glue_table_creation.setter
    def disable_glue_table_creation(self, disable_glue_table_creation):
        """Sets the disable_glue_table_creation of this OfflineStoreConfig.


        :param disable_glue_table_creation: The disable_glue_table_creation of this OfflineStoreConfig.
        :type disable_glue_table_creation: bool
        """

        self._disable_glue_table_creation = disable_glue_table_creation

    @property
    def data_catalog_config(self):
        """Gets the data_catalog_config of this OfflineStoreConfig.


        :return: The data_catalog_config of this OfflineStoreConfig.
        :rtype: OfflineStoreConfigDataCatalogConfig
        """
        return self._data_catalog_config

    @data_catalog_config.setter
    def data_catalog_config(self, data_catalog_config):
        """Sets the data_catalog_config of this OfflineStoreConfig.


        :param data_catalog_config: The data_catalog_config of this OfflineStoreConfig.
        :type data_catalog_config: OfflineStoreConfigDataCatalogConfig
        """

        self._data_catalog_config = data_catalog_config

    @property
    def table_format(self):
        """Gets the table_format of this OfflineStoreConfig.


        :return: The table_format of this OfflineStoreConfig.
        :rtype: TableFormat
        """
        return self._table_format

    @table_format.setter
    def table_format(self, table_format):
        """Sets the table_format of this OfflineStoreConfig.


        :param table_format: The table_format of this OfflineStoreConfig.
        :type table_format: TableFormat
        """

        self._table_format = table_format
