# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeLabelingJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labeling_job_name: str=None):
        """DescribeLabelingJobRequest - a model defined in OpenAPI

        :param labeling_job_name: The labeling_job_name of this DescribeLabelingJobRequest.
        """
        self.openapi_types = {
            'labeling_job_name': str
        }

        self.attribute_map = {
            'labeling_job_name': 'LabelingJobName'
        }

        self._labeling_job_name = labeling_job_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeLabelingJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeLabelingJobRequest of this DescribeLabelingJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labeling_job_name(self):
        """Gets the labeling_job_name of this DescribeLabelingJobRequest.


        :return: The labeling_job_name of this DescribeLabelingJobRequest.
        :rtype: str
        """
        return self._labeling_job_name

    @labeling_job_name.setter
    def labeling_job_name(self, labeling_job_name):
        """Sets the labeling_job_name of this DescribeLabelingJobRequest.


        :param labeling_job_name: The labeling_job_name of this DescribeLabelingJobRequest.
        :type labeling_job_name: str
        """
        if labeling_job_name is None:
            raise ValueError("Invalid value for `labeling_job_name`, must not be `None`")

        self._labeling_job_name = labeling_job_name
