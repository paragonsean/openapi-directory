# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrialComponentMetricSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, source_arn: str=None, time_stamp: datetime=None, max: float=None, min: float=None, last: float=None, count: int=None, avg: float=None, std_dev: float=None):
        """TrialComponentMetricSummary - a model defined in OpenAPI

        :param metric_name: The metric_name of this TrialComponentMetricSummary.
        :param source_arn: The source_arn of this TrialComponentMetricSummary.
        :param time_stamp: The time_stamp of this TrialComponentMetricSummary.
        :param max: The max of this TrialComponentMetricSummary.
        :param min: The min of this TrialComponentMetricSummary.
        :param last: The last of this TrialComponentMetricSummary.
        :param count: The count of this TrialComponentMetricSummary.
        :param avg: The avg of this TrialComponentMetricSummary.
        :param std_dev: The std_dev of this TrialComponentMetricSummary.
        """
        self.openapi_types = {
            'metric_name': str,
            'source_arn': str,
            'time_stamp': datetime,
            'max': float,
            'min': float,
            'last': float,
            'count': int,
            'avg': float,
            'std_dev': float
        }

        self.attribute_map = {
            'metric_name': 'MetricName',
            'source_arn': 'SourceArn',
            'time_stamp': 'TimeStamp',
            'max': 'Max',
            'min': 'Min',
            'last': 'Last',
            'count': 'Count',
            'avg': 'Avg',
            'std_dev': 'StdDev'
        }

        self._metric_name = metric_name
        self._source_arn = source_arn
        self._time_stamp = time_stamp
        self._max = max
        self._min = min
        self._last = last
        self._count = count
        self._avg = avg
        self._std_dev = std_dev

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrialComponentMetricSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrialComponentMetricSummary of this TrialComponentMetricSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this TrialComponentMetricSummary.


        :return: The metric_name of this TrialComponentMetricSummary.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this TrialComponentMetricSummary.


        :param metric_name: The metric_name of this TrialComponentMetricSummary.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def source_arn(self):
        """Gets the source_arn of this TrialComponentMetricSummary.


        :return: The source_arn of this TrialComponentMetricSummary.
        :rtype: str
        """
        return self._source_arn

    @source_arn.setter
    def source_arn(self, source_arn):
        """Sets the source_arn of this TrialComponentMetricSummary.


        :param source_arn: The source_arn of this TrialComponentMetricSummary.
        :type source_arn: str
        """

        self._source_arn = source_arn

    @property
    def time_stamp(self):
        """Gets the time_stamp of this TrialComponentMetricSummary.


        :return: The time_stamp of this TrialComponentMetricSummary.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this TrialComponentMetricSummary.


        :param time_stamp: The time_stamp of this TrialComponentMetricSummary.
        :type time_stamp: datetime
        """

        self._time_stamp = time_stamp

    @property
    def max(self):
        """Gets the max of this TrialComponentMetricSummary.


        :return: The max of this TrialComponentMetricSummary.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this TrialComponentMetricSummary.


        :param max: The max of this TrialComponentMetricSummary.
        :type max: float
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this TrialComponentMetricSummary.


        :return: The min of this TrialComponentMetricSummary.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this TrialComponentMetricSummary.


        :param min: The min of this TrialComponentMetricSummary.
        :type min: float
        """

        self._min = min

    @property
    def last(self):
        """Gets the last of this TrialComponentMetricSummary.


        :return: The last of this TrialComponentMetricSummary.
        :rtype: float
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this TrialComponentMetricSummary.


        :param last: The last of this TrialComponentMetricSummary.
        :type last: float
        """

        self._last = last

    @property
    def count(self):
        """Gets the count of this TrialComponentMetricSummary.


        :return: The count of this TrialComponentMetricSummary.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TrialComponentMetricSummary.


        :param count: The count of this TrialComponentMetricSummary.
        :type count: int
        """

        self._count = count

    @property
    def avg(self):
        """Gets the avg of this TrialComponentMetricSummary.


        :return: The avg of this TrialComponentMetricSummary.
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this TrialComponentMetricSummary.


        :param avg: The avg of this TrialComponentMetricSummary.
        :type avg: float
        """

        self._avg = avg

    @property
    def std_dev(self):
        """Gets the std_dev of this TrialComponentMetricSummary.


        :return: The std_dev of this TrialComponentMetricSummary.
        :rtype: float
        """
        return self._std_dev

    @std_dev.setter
    def std_dev(self, std_dev):
        """Sets the std_dev of this TrialComponentMetricSummary.


        :param std_dev: The std_dev of this TrialComponentMetricSummary.
        :type std_dev: float
        """

        self._std_dev = std_dev
