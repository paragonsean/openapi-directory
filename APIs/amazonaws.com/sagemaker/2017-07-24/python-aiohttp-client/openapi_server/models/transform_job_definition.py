# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_strategy import BatchStrategy
from openapi_server.models.describe_transform_job_response_transform_output import DescribeTransformJobResponseTransformOutput
from openapi_server.models.transform_job_definition_transform_input import TransformJobDefinitionTransformInput
from openapi_server.models.transform_job_definition_transform_resources import TransformJobDefinitionTransformResources
from openapi_server import util


class TransformJobDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_concurrent_transforms: int=None, max_payload_in_mb: int=None, batch_strategy: BatchStrategy=None, environment: Dict=None, transform_input: TransformJobDefinitionTransformInput=None, transform_output: DescribeTransformJobResponseTransformOutput=None, transform_resources: TransformJobDefinitionTransformResources=None):
        """TransformJobDefinition - a model defined in OpenAPI

        :param max_concurrent_transforms: The max_concurrent_transforms of this TransformJobDefinition.
        :param max_payload_in_mb: The max_payload_in_mb of this TransformJobDefinition.
        :param batch_strategy: The batch_strategy of this TransformJobDefinition.
        :param environment: The environment of this TransformJobDefinition.
        :param transform_input: The transform_input of this TransformJobDefinition.
        :param transform_output: The transform_output of this TransformJobDefinition.
        :param transform_resources: The transform_resources of this TransformJobDefinition.
        """
        self.openapi_types = {
            'max_concurrent_transforms': int,
            'max_payload_in_mb': int,
            'batch_strategy': BatchStrategy,
            'environment': Dict,
            'transform_input': TransformJobDefinitionTransformInput,
            'transform_output': DescribeTransformJobResponseTransformOutput,
            'transform_resources': TransformJobDefinitionTransformResources
        }

        self.attribute_map = {
            'max_concurrent_transforms': 'MaxConcurrentTransforms',
            'max_payload_in_mb': 'MaxPayloadInMB',
            'batch_strategy': 'BatchStrategy',
            'environment': 'Environment',
            'transform_input': 'TransformInput',
            'transform_output': 'TransformOutput',
            'transform_resources': 'TransformResources'
        }

        self._max_concurrent_transforms = max_concurrent_transforms
        self._max_payload_in_mb = max_payload_in_mb
        self._batch_strategy = batch_strategy
        self._environment = environment
        self._transform_input = transform_input
        self._transform_output = transform_output
        self._transform_resources = transform_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformJobDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformJobDefinition of this TransformJobDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_concurrent_transforms(self):
        """Gets the max_concurrent_transforms of this TransformJobDefinition.


        :return: The max_concurrent_transforms of this TransformJobDefinition.
        :rtype: int
        """
        return self._max_concurrent_transforms

    @max_concurrent_transforms.setter
    def max_concurrent_transforms(self, max_concurrent_transforms):
        """Sets the max_concurrent_transforms of this TransformJobDefinition.


        :param max_concurrent_transforms: The max_concurrent_transforms of this TransformJobDefinition.
        :type max_concurrent_transforms: int
        """

        self._max_concurrent_transforms = max_concurrent_transforms

    @property
    def max_payload_in_mb(self):
        """Gets the max_payload_in_mb of this TransformJobDefinition.


        :return: The max_payload_in_mb of this TransformJobDefinition.
        :rtype: int
        """
        return self._max_payload_in_mb

    @max_payload_in_mb.setter
    def max_payload_in_mb(self, max_payload_in_mb):
        """Sets the max_payload_in_mb of this TransformJobDefinition.


        :param max_payload_in_mb: The max_payload_in_mb of this TransformJobDefinition.
        :type max_payload_in_mb: int
        """

        self._max_payload_in_mb = max_payload_in_mb

    @property
    def batch_strategy(self):
        """Gets the batch_strategy of this TransformJobDefinition.


        :return: The batch_strategy of this TransformJobDefinition.
        :rtype: BatchStrategy
        """
        return self._batch_strategy

    @batch_strategy.setter
    def batch_strategy(self, batch_strategy):
        """Sets the batch_strategy of this TransformJobDefinition.


        :param batch_strategy: The batch_strategy of this TransformJobDefinition.
        :type batch_strategy: BatchStrategy
        """

        self._batch_strategy = batch_strategy

    @property
    def environment(self):
        """Gets the environment of this TransformJobDefinition.


        :return: The environment of this TransformJobDefinition.
        :rtype: Dict
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this TransformJobDefinition.


        :param environment: The environment of this TransformJobDefinition.
        :type environment: Dict
        """

        self._environment = environment

    @property
    def transform_input(self):
        """Gets the transform_input of this TransformJobDefinition.


        :return: The transform_input of this TransformJobDefinition.
        :rtype: TransformJobDefinitionTransformInput
        """
        return self._transform_input

    @transform_input.setter
    def transform_input(self, transform_input):
        """Sets the transform_input of this TransformJobDefinition.


        :param transform_input: The transform_input of this TransformJobDefinition.
        :type transform_input: TransformJobDefinitionTransformInput
        """
        if transform_input is None:
            raise ValueError("Invalid value for `transform_input`, must not be `None`")

        self._transform_input = transform_input

    @property
    def transform_output(self):
        """Gets the transform_output of this TransformJobDefinition.


        :return: The transform_output of this TransformJobDefinition.
        :rtype: DescribeTransformJobResponseTransformOutput
        """
        return self._transform_output

    @transform_output.setter
    def transform_output(self, transform_output):
        """Sets the transform_output of this TransformJobDefinition.


        :param transform_output: The transform_output of this TransformJobDefinition.
        :type transform_output: DescribeTransformJobResponseTransformOutput
        """
        if transform_output is None:
            raise ValueError("Invalid value for `transform_output`, must not be `None`")

        self._transform_output = transform_output

    @property
    def transform_resources(self):
        """Gets the transform_resources of this TransformJobDefinition.


        :return: The transform_resources of this TransformJobDefinition.
        :rtype: TransformJobDefinitionTransformResources
        """
        return self._transform_resources

    @transform_resources.setter
    def transform_resources(self, transform_resources):
        """Sets the transform_resources of this TransformJobDefinition.


        :param transform_resources: The transform_resources of this TransformJobDefinition.
        :type transform_resources: TransformJobDefinitionTransformResources
        """
        if transform_resources is None:
            raise ValueError("Invalid value for `transform_resources`, must not be `None`")

        self._transform_resources = transform_resources
