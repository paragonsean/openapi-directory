# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.athena_result_compression_type import AthenaResultCompressionType
from openapi_server.models.athena_result_format import AthenaResultFormat
import re
from openapi_server import util


class AthenaDatasetDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog: str=None, database: str=None, query_string: str=None, work_group: str=None, output_s3_uri: str=None, kms_key_id: str=None, output_format: AthenaResultFormat=None, output_compression: AthenaResultCompressionType=None):
        """AthenaDatasetDefinition - a model defined in OpenAPI

        :param catalog: The catalog of this AthenaDatasetDefinition.
        :param database: The database of this AthenaDatasetDefinition.
        :param query_string: The query_string of this AthenaDatasetDefinition.
        :param work_group: The work_group of this AthenaDatasetDefinition.
        :param output_s3_uri: The output_s3_uri of this AthenaDatasetDefinition.
        :param kms_key_id: The kms_key_id of this AthenaDatasetDefinition.
        :param output_format: The output_format of this AthenaDatasetDefinition.
        :param output_compression: The output_compression of this AthenaDatasetDefinition.
        """
        self.openapi_types = {
            'catalog': str,
            'database': str,
            'query_string': str,
            'work_group': str,
            'output_s3_uri': str,
            'kms_key_id': str,
            'output_format': AthenaResultFormat,
            'output_compression': AthenaResultCompressionType
        }

        self.attribute_map = {
            'catalog': 'Catalog',
            'database': 'Database',
            'query_string': 'QueryString',
            'work_group': 'WorkGroup',
            'output_s3_uri': 'OutputS3Uri',
            'kms_key_id': 'KmsKeyId',
            'output_format': 'OutputFormat',
            'output_compression': 'OutputCompression'
        }

        self._catalog = catalog
        self._database = database
        self._query_string = query_string
        self._work_group = work_group
        self._output_s3_uri = output_s3_uri
        self._kms_key_id = kms_key_id
        self._output_format = output_format
        self._output_compression = output_compression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AthenaDatasetDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AthenaDatasetDefinition of this AthenaDatasetDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog(self):
        """Gets the catalog of this AthenaDatasetDefinition.

        The name of the data catalog used in Athena query execution.

        :return: The catalog of this AthenaDatasetDefinition.
        :rtype: str
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this AthenaDatasetDefinition.

        The name of the data catalog used in Athena query execution.

        :param catalog: The catalog of this AthenaDatasetDefinition.
        :type catalog: str
        """
        if catalog is None:
            raise ValueError("Invalid value for `catalog`, must not be `None`")
        if catalog is not None and len(catalog) > 256:
            raise ValueError("Invalid value for `catalog`, length must be less than or equal to `256`")
        if catalog is not None and len(catalog) < 1:
            raise ValueError("Invalid value for `catalog`, length must be greater than or equal to `1`")

        self._catalog = catalog

    @property
    def database(self):
        """Gets the database of this AthenaDatasetDefinition.

        The name of the database used in the Athena query execution.

        :return: The database of this AthenaDatasetDefinition.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this AthenaDatasetDefinition.

        The name of the database used in the Athena query execution.

        :param database: The database of this AthenaDatasetDefinition.
        :type database: str
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")
        if database is not None and len(database) > 255:
            raise ValueError("Invalid value for `database`, length must be less than or equal to `255`")
        if database is not None and len(database) < 1:
            raise ValueError("Invalid value for `database`, length must be greater than or equal to `1`")
        if database is not None and not re.search(r'.*', database):
            raise ValueError("Invalid value for `database`, must be a follow pattern or equal to `/.*/`")

        self._database = database

    @property
    def query_string(self):
        """Gets the query_string of this AthenaDatasetDefinition.

        The SQL query statements, to be executed.

        :return: The query_string of this AthenaDatasetDefinition.
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this AthenaDatasetDefinition.

        The SQL query statements, to be executed.

        :param query_string: The query_string of this AthenaDatasetDefinition.
        :type query_string: str
        """
        if query_string is None:
            raise ValueError("Invalid value for `query_string`, must not be `None`")
        if query_string is not None and len(query_string) > 4096:
            raise ValueError("Invalid value for `query_string`, length must be less than or equal to `4096`")
        if query_string is not None and len(query_string) < 1:
            raise ValueError("Invalid value for `query_string`, length must be greater than or equal to `1`")
        if query_string is not None and not re.search(r'[\s\S]+', query_string):
            raise ValueError("Invalid value for `query_string`, must be a follow pattern or equal to `/[\s\S]+/`")

        self._query_string = query_string

    @property
    def work_group(self):
        """Gets the work_group of this AthenaDatasetDefinition.

        The name of the workgroup in which the Athena query is being started.

        :return: The work_group of this AthenaDatasetDefinition.
        :rtype: str
        """
        return self._work_group

    @work_group.setter
    def work_group(self, work_group):
        """Sets the work_group of this AthenaDatasetDefinition.

        The name of the workgroup in which the Athena query is being started.

        :param work_group: The work_group of this AthenaDatasetDefinition.
        :type work_group: str
        """
        if work_group is not None and len(work_group) > 128:
            raise ValueError("Invalid value for `work_group`, length must be less than or equal to `128`")
        if work_group is not None and len(work_group) < 1:
            raise ValueError("Invalid value for `work_group`, length must be greater than or equal to `1`")
        if work_group is not None and not re.search(r'[a-zA-Z0-9._-]+', work_group):
            raise ValueError("Invalid value for `work_group`, must be a follow pattern or equal to `/[a-zA-Z0-9._-]+/`")

        self._work_group = work_group

    @property
    def output_s3_uri(self):
        """Gets the output_s3_uri of this AthenaDatasetDefinition.


        :return: The output_s3_uri of this AthenaDatasetDefinition.
        :rtype: str
        """
        return self._output_s3_uri

    @output_s3_uri.setter
    def output_s3_uri(self, output_s3_uri):
        """Sets the output_s3_uri of this AthenaDatasetDefinition.


        :param output_s3_uri: The output_s3_uri of this AthenaDatasetDefinition.
        :type output_s3_uri: str
        """
        if output_s3_uri is None:
            raise ValueError("Invalid value for `output_s3_uri`, must not be `None`")

        self._output_s3_uri = output_s3_uri

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this AthenaDatasetDefinition.


        :return: The kms_key_id of this AthenaDatasetDefinition.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this AthenaDatasetDefinition.


        :param kms_key_id: The kms_key_id of this AthenaDatasetDefinition.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def output_format(self):
        """Gets the output_format of this AthenaDatasetDefinition.


        :return: The output_format of this AthenaDatasetDefinition.
        :rtype: AthenaResultFormat
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this AthenaDatasetDefinition.


        :param output_format: The output_format of this AthenaDatasetDefinition.
        :type output_format: AthenaResultFormat
        """
        if output_format is None:
            raise ValueError("Invalid value for `output_format`, must not be `None`")

        self._output_format = output_format

    @property
    def output_compression(self):
        """Gets the output_compression of this AthenaDatasetDefinition.


        :return: The output_compression of this AthenaDatasetDefinition.
        :rtype: AthenaResultCompressionType
        """
        return self._output_compression

    @output_compression.setter
    def output_compression(self, output_compression):
        """Sets the output_compression of this AthenaDatasetDefinition.


        :param output_compression: The output_compression of this AthenaDatasetDefinition.
        :type output_compression: AthenaResultCompressionType
        """

        self._output_compression = output_compression
