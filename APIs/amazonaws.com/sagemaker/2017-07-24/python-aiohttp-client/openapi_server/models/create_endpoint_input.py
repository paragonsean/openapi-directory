# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_config import DeploymentConfig
from openapi_server import util


class CreateEndpointInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_name: str=None, endpoint_config_name: str=None, deployment_config: DeploymentConfig=None, tags: List=None):
        """CreateEndpointInput - a model defined in OpenAPI

        :param endpoint_name: The endpoint_name of this CreateEndpointInput.
        :param endpoint_config_name: The endpoint_config_name of this CreateEndpointInput.
        :param deployment_config: The deployment_config of this CreateEndpointInput.
        :param tags: The tags of this CreateEndpointInput.
        """
        self.openapi_types = {
            'endpoint_name': str,
            'endpoint_config_name': str,
            'deployment_config': DeploymentConfig,
            'tags': List
        }

        self.attribute_map = {
            'endpoint_name': 'EndpointName',
            'endpoint_config_name': 'EndpointConfigName',
            'deployment_config': 'DeploymentConfig',
            'tags': 'Tags'
        }

        self._endpoint_name = endpoint_name
        self._endpoint_config_name = endpoint_config_name
        self._deployment_config = deployment_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEndpointInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEndpointInput of this CreateEndpointInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this CreateEndpointInput.


        :return: The endpoint_name of this CreateEndpointInput.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this CreateEndpointInput.


        :param endpoint_name: The endpoint_name of this CreateEndpointInput.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def endpoint_config_name(self):
        """Gets the endpoint_config_name of this CreateEndpointInput.


        :return: The endpoint_config_name of this CreateEndpointInput.
        :rtype: str
        """
        return self._endpoint_config_name

    @endpoint_config_name.setter
    def endpoint_config_name(self, endpoint_config_name):
        """Sets the endpoint_config_name of this CreateEndpointInput.


        :param endpoint_config_name: The endpoint_config_name of this CreateEndpointInput.
        :type endpoint_config_name: str
        """
        if endpoint_config_name is None:
            raise ValueError("Invalid value for `endpoint_config_name`, must not be `None`")

        self._endpoint_config_name = endpoint_config_name

    @property
    def deployment_config(self):
        """Gets the deployment_config of this CreateEndpointInput.


        :return: The deployment_config of this CreateEndpointInput.
        :rtype: DeploymentConfig
        """
        return self._deployment_config

    @deployment_config.setter
    def deployment_config(self, deployment_config):
        """Sets the deployment_config of this CreateEndpointInput.


        :param deployment_config: The deployment_config of this CreateEndpointInput.
        :type deployment_config: DeploymentConfig
        """

        self._deployment_config = deployment_config

    @property
    def tags(self):
        """Gets the tags of this CreateEndpointInput.


        :return: The tags of this CreateEndpointInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEndpointInput.


        :param tags: The tags of this CreateEndpointInput.
        :type tags: List
        """

        self._tags = tags
