# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitoring_resources_cluster_config import MonitoringResourcesClusterConfig
from openapi_server import util


class MonitoringResources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_config: MonitoringResourcesClusterConfig=None):
        """MonitoringResources - a model defined in OpenAPI

        :param cluster_config: The cluster_config of this MonitoringResources.
        """
        self.openapi_types = {
            'cluster_config': MonitoringResourcesClusterConfig
        }

        self.attribute_map = {
            'cluster_config': 'ClusterConfig'
        }

        self._cluster_config = cluster_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringResources':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringResources of this MonitoringResources.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_config(self):
        """Gets the cluster_config of this MonitoringResources.


        :return: The cluster_config of this MonitoringResources.
        :rtype: MonitoringResourcesClusterConfig
        """
        return self._cluster_config

    @cluster_config.setter
    def cluster_config(self, cluster_config):
        """Sets the cluster_config of this MonitoringResources.


        :param cluster_config: The cluster_config of this MonitoringResources.
        :type cluster_config: MonitoringResourcesClusterConfig
        """
        if cluster_config is None:
            raise ValueError("Invalid value for `cluster_config`, must not be `None`")

        self._cluster_config = cluster_config
