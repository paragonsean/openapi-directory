# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_platform_accelerator import TargetPlatformAccelerator
from openapi_server.models.target_platform_arch import TargetPlatformArch
from openapi_server.models.target_platform_os import TargetPlatformOs
from openapi_server import util


class OutputConfigTargetPlatform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, os: TargetPlatformOs=None, arch: TargetPlatformArch=None, accelerator: TargetPlatformAccelerator=None):
        """OutputConfigTargetPlatform - a model defined in OpenAPI

        :param os: The os of this OutputConfigTargetPlatform.
        :param arch: The arch of this OutputConfigTargetPlatform.
        :param accelerator: The accelerator of this OutputConfigTargetPlatform.
        """
        self.openapi_types = {
            'os': TargetPlatformOs,
            'arch': TargetPlatformArch,
            'accelerator': TargetPlatformAccelerator
        }

        self.attribute_map = {
            'os': 'Os',
            'arch': 'Arch',
            'accelerator': 'Accelerator'
        }

        self._os = os
        self._arch = arch
        self._accelerator = accelerator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputConfigTargetPlatform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputConfig_TargetPlatform of this OutputConfigTargetPlatform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def os(self):
        """Gets the os of this OutputConfigTargetPlatform.


        :return: The os of this OutputConfigTargetPlatform.
        :rtype: TargetPlatformOs
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this OutputConfigTargetPlatform.


        :param os: The os of this OutputConfigTargetPlatform.
        :type os: TargetPlatformOs
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def arch(self):
        """Gets the arch of this OutputConfigTargetPlatform.


        :return: The arch of this OutputConfigTargetPlatform.
        :rtype: TargetPlatformArch
        """
        return self._arch

    @arch.setter
    def arch(self, arch):
        """Sets the arch of this OutputConfigTargetPlatform.


        :param arch: The arch of this OutputConfigTargetPlatform.
        :type arch: TargetPlatformArch
        """
        if arch is None:
            raise ValueError("Invalid value for `arch`, must not be `None`")

        self._arch = arch

    @property
    def accelerator(self):
        """Gets the accelerator of this OutputConfigTargetPlatform.


        :return: The accelerator of this OutputConfigTargetPlatform.
        :rtype: TargetPlatformAccelerator
        """
        return self._accelerator

    @accelerator.setter
    def accelerator(self, accelerator):
        """Sets the accelerator of this OutputConfigTargetPlatform.


        :param accelerator: The accelerator of this OutputConfigTargetPlatform.
        :type accelerator: TargetPlatformAccelerator
        """

        self._accelerator = accelerator
