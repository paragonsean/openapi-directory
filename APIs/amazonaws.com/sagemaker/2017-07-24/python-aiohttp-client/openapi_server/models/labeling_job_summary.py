# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_labeling_job_response_labeling_job_output import DescribeLabelingJobResponseLabelingJobOutput
from openapi_server.models.labeling_job_status import LabelingJobStatus
from openapi_server.models.labeling_job_summary_input_config import LabelingJobSummaryInputConfig
from openapi_server.models.labeling_job_summary_label_counters import LabelingJobSummaryLabelCounters
from openapi_server import util


class LabelingJobSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labeling_job_name: str=None, labeling_job_arn: str=None, creation_time: datetime=None, last_modified_time: datetime=None, labeling_job_status: LabelingJobStatus=None, label_counters: LabelingJobSummaryLabelCounters=None, workteam_arn: str=None, pre_human_task_lambda_arn: str=None, annotation_consolidation_lambda_arn: str=None, failure_reason: str=None, labeling_job_output: DescribeLabelingJobResponseLabelingJobOutput=None, input_config: LabelingJobSummaryInputConfig=None):
        """LabelingJobSummary - a model defined in OpenAPI

        :param labeling_job_name: The labeling_job_name of this LabelingJobSummary.
        :param labeling_job_arn: The labeling_job_arn of this LabelingJobSummary.
        :param creation_time: The creation_time of this LabelingJobSummary.
        :param last_modified_time: The last_modified_time of this LabelingJobSummary.
        :param labeling_job_status: The labeling_job_status of this LabelingJobSummary.
        :param label_counters: The label_counters of this LabelingJobSummary.
        :param workteam_arn: The workteam_arn of this LabelingJobSummary.
        :param pre_human_task_lambda_arn: The pre_human_task_lambda_arn of this LabelingJobSummary.
        :param annotation_consolidation_lambda_arn: The annotation_consolidation_lambda_arn of this LabelingJobSummary.
        :param failure_reason: The failure_reason of this LabelingJobSummary.
        :param labeling_job_output: The labeling_job_output of this LabelingJobSummary.
        :param input_config: The input_config of this LabelingJobSummary.
        """
        self.openapi_types = {
            'labeling_job_name': str,
            'labeling_job_arn': str,
            'creation_time': datetime,
            'last_modified_time': datetime,
            'labeling_job_status': LabelingJobStatus,
            'label_counters': LabelingJobSummaryLabelCounters,
            'workteam_arn': str,
            'pre_human_task_lambda_arn': str,
            'annotation_consolidation_lambda_arn': str,
            'failure_reason': str,
            'labeling_job_output': DescribeLabelingJobResponseLabelingJobOutput,
            'input_config': LabelingJobSummaryInputConfig
        }

        self.attribute_map = {
            'labeling_job_name': 'LabelingJobName',
            'labeling_job_arn': 'LabelingJobArn',
            'creation_time': 'CreationTime',
            'last_modified_time': 'LastModifiedTime',
            'labeling_job_status': 'LabelingJobStatus',
            'label_counters': 'LabelCounters',
            'workteam_arn': 'WorkteamArn',
            'pre_human_task_lambda_arn': 'PreHumanTaskLambdaArn',
            'annotation_consolidation_lambda_arn': 'AnnotationConsolidationLambdaArn',
            'failure_reason': 'FailureReason',
            'labeling_job_output': 'LabelingJobOutput',
            'input_config': 'InputConfig'
        }

        self._labeling_job_name = labeling_job_name
        self._labeling_job_arn = labeling_job_arn
        self._creation_time = creation_time
        self._last_modified_time = last_modified_time
        self._labeling_job_status = labeling_job_status
        self._label_counters = label_counters
        self._workteam_arn = workteam_arn
        self._pre_human_task_lambda_arn = pre_human_task_lambda_arn
        self._annotation_consolidation_lambda_arn = annotation_consolidation_lambda_arn
        self._failure_reason = failure_reason
        self._labeling_job_output = labeling_job_output
        self._input_config = input_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelingJobSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabelingJobSummary of this LabelingJobSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labeling_job_name(self):
        """Gets the labeling_job_name of this LabelingJobSummary.


        :return: The labeling_job_name of this LabelingJobSummary.
        :rtype: str
        """
        return self._labeling_job_name

    @labeling_job_name.setter
    def labeling_job_name(self, labeling_job_name):
        """Sets the labeling_job_name of this LabelingJobSummary.


        :param labeling_job_name: The labeling_job_name of this LabelingJobSummary.
        :type labeling_job_name: str
        """
        if labeling_job_name is None:
            raise ValueError("Invalid value for `labeling_job_name`, must not be `None`")

        self._labeling_job_name = labeling_job_name

    @property
    def labeling_job_arn(self):
        """Gets the labeling_job_arn of this LabelingJobSummary.


        :return: The labeling_job_arn of this LabelingJobSummary.
        :rtype: str
        """
        return self._labeling_job_arn

    @labeling_job_arn.setter
    def labeling_job_arn(self, labeling_job_arn):
        """Sets the labeling_job_arn of this LabelingJobSummary.


        :param labeling_job_arn: The labeling_job_arn of this LabelingJobSummary.
        :type labeling_job_arn: str
        """
        if labeling_job_arn is None:
            raise ValueError("Invalid value for `labeling_job_arn`, must not be `None`")

        self._labeling_job_arn = labeling_job_arn

    @property
    def creation_time(self):
        """Gets the creation_time of this LabelingJobSummary.


        :return: The creation_time of this LabelingJobSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this LabelingJobSummary.


        :param creation_time: The creation_time of this LabelingJobSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this LabelingJobSummary.


        :return: The last_modified_time of this LabelingJobSummary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this LabelingJobSummary.


        :param last_modified_time: The last_modified_time of this LabelingJobSummary.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def labeling_job_status(self):
        """Gets the labeling_job_status of this LabelingJobSummary.


        :return: The labeling_job_status of this LabelingJobSummary.
        :rtype: LabelingJobStatus
        """
        return self._labeling_job_status

    @labeling_job_status.setter
    def labeling_job_status(self, labeling_job_status):
        """Sets the labeling_job_status of this LabelingJobSummary.


        :param labeling_job_status: The labeling_job_status of this LabelingJobSummary.
        :type labeling_job_status: LabelingJobStatus
        """
        if labeling_job_status is None:
            raise ValueError("Invalid value for `labeling_job_status`, must not be `None`")

        self._labeling_job_status = labeling_job_status

    @property
    def label_counters(self):
        """Gets the label_counters of this LabelingJobSummary.


        :return: The label_counters of this LabelingJobSummary.
        :rtype: LabelingJobSummaryLabelCounters
        """
        return self._label_counters

    @label_counters.setter
    def label_counters(self, label_counters):
        """Sets the label_counters of this LabelingJobSummary.


        :param label_counters: The label_counters of this LabelingJobSummary.
        :type label_counters: LabelingJobSummaryLabelCounters
        """
        if label_counters is None:
            raise ValueError("Invalid value for `label_counters`, must not be `None`")

        self._label_counters = label_counters

    @property
    def workteam_arn(self):
        """Gets the workteam_arn of this LabelingJobSummary.


        :return: The workteam_arn of this LabelingJobSummary.
        :rtype: str
        """
        return self._workteam_arn

    @workteam_arn.setter
    def workteam_arn(self, workteam_arn):
        """Sets the workteam_arn of this LabelingJobSummary.


        :param workteam_arn: The workteam_arn of this LabelingJobSummary.
        :type workteam_arn: str
        """
        if workteam_arn is None:
            raise ValueError("Invalid value for `workteam_arn`, must not be `None`")

        self._workteam_arn = workteam_arn

    @property
    def pre_human_task_lambda_arn(self):
        """Gets the pre_human_task_lambda_arn of this LabelingJobSummary.


        :return: The pre_human_task_lambda_arn of this LabelingJobSummary.
        :rtype: str
        """
        return self._pre_human_task_lambda_arn

    @pre_human_task_lambda_arn.setter
    def pre_human_task_lambda_arn(self, pre_human_task_lambda_arn):
        """Sets the pre_human_task_lambda_arn of this LabelingJobSummary.


        :param pre_human_task_lambda_arn: The pre_human_task_lambda_arn of this LabelingJobSummary.
        :type pre_human_task_lambda_arn: str
        """
        if pre_human_task_lambda_arn is None:
            raise ValueError("Invalid value for `pre_human_task_lambda_arn`, must not be `None`")

        self._pre_human_task_lambda_arn = pre_human_task_lambda_arn

    @property
    def annotation_consolidation_lambda_arn(self):
        """Gets the annotation_consolidation_lambda_arn of this LabelingJobSummary.


        :return: The annotation_consolidation_lambda_arn of this LabelingJobSummary.
        :rtype: str
        """
        return self._annotation_consolidation_lambda_arn

    @annotation_consolidation_lambda_arn.setter
    def annotation_consolidation_lambda_arn(self, annotation_consolidation_lambda_arn):
        """Sets the annotation_consolidation_lambda_arn of this LabelingJobSummary.


        :param annotation_consolidation_lambda_arn: The annotation_consolidation_lambda_arn of this LabelingJobSummary.
        :type annotation_consolidation_lambda_arn: str
        """

        self._annotation_consolidation_lambda_arn = annotation_consolidation_lambda_arn

    @property
    def failure_reason(self):
        """Gets the failure_reason of this LabelingJobSummary.


        :return: The failure_reason of this LabelingJobSummary.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this LabelingJobSummary.


        :param failure_reason: The failure_reason of this LabelingJobSummary.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def labeling_job_output(self):
        """Gets the labeling_job_output of this LabelingJobSummary.


        :return: The labeling_job_output of this LabelingJobSummary.
        :rtype: DescribeLabelingJobResponseLabelingJobOutput
        """
        return self._labeling_job_output

    @labeling_job_output.setter
    def labeling_job_output(self, labeling_job_output):
        """Sets the labeling_job_output of this LabelingJobSummary.


        :param labeling_job_output: The labeling_job_output of this LabelingJobSummary.
        :type labeling_job_output: DescribeLabelingJobResponseLabelingJobOutput
        """

        self._labeling_job_output = labeling_job_output

    @property
    def input_config(self):
        """Gets the input_config of this LabelingJobSummary.


        :return: The input_config of this LabelingJobSummary.
        :rtype: LabelingJobSummaryInputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this LabelingJobSummary.


        :param input_config: The input_config of this LabelingJobSummary.
        :type input_config: LabelingJobSummaryInputConfig
        """

        self._input_config = input_config
