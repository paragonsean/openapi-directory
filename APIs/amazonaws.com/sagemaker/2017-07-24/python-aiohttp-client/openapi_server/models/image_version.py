# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_version_status import ImageVersionStatus
from openapi_server import util


class ImageVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, failure_reason: str=None, image_arn: str=None, image_version_arn: str=None, image_version_status: ImageVersionStatus=None, last_modified_time: datetime=None, version: int=None):
        """ImageVersion - a model defined in OpenAPI

        :param creation_time: The creation_time of this ImageVersion.
        :param failure_reason: The failure_reason of this ImageVersion.
        :param image_arn: The image_arn of this ImageVersion.
        :param image_version_arn: The image_version_arn of this ImageVersion.
        :param image_version_status: The image_version_status of this ImageVersion.
        :param last_modified_time: The last_modified_time of this ImageVersion.
        :param version: The version of this ImageVersion.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'failure_reason': str,
            'image_arn': str,
            'image_version_arn': str,
            'image_version_status': ImageVersionStatus,
            'last_modified_time': datetime,
            'version': int
        }

        self.attribute_map = {
            'creation_time': 'CreationTime',
            'failure_reason': 'FailureReason',
            'image_arn': 'ImageArn',
            'image_version_arn': 'ImageVersionArn',
            'image_version_status': 'ImageVersionStatus',
            'last_modified_time': 'LastModifiedTime',
            'version': 'Version'
        }

        self._creation_time = creation_time
        self._failure_reason = failure_reason
        self._image_arn = image_arn
        self._image_version_arn = image_version_arn
        self._image_version_status = image_version_status
        self._last_modified_time = last_modified_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageVersion of this ImageVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this ImageVersion.


        :return: The creation_time of this ImageVersion.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ImageVersion.


        :param creation_time: The creation_time of this ImageVersion.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def failure_reason(self):
        """Gets the failure_reason of this ImageVersion.


        :return: The failure_reason of this ImageVersion.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this ImageVersion.


        :param failure_reason: The failure_reason of this ImageVersion.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def image_arn(self):
        """Gets the image_arn of this ImageVersion.


        :return: The image_arn of this ImageVersion.
        :rtype: str
        """
        return self._image_arn

    @image_arn.setter
    def image_arn(self, image_arn):
        """Sets the image_arn of this ImageVersion.


        :param image_arn: The image_arn of this ImageVersion.
        :type image_arn: str
        """
        if image_arn is None:
            raise ValueError("Invalid value for `image_arn`, must not be `None`")

        self._image_arn = image_arn

    @property
    def image_version_arn(self):
        """Gets the image_version_arn of this ImageVersion.


        :return: The image_version_arn of this ImageVersion.
        :rtype: str
        """
        return self._image_version_arn

    @image_version_arn.setter
    def image_version_arn(self, image_version_arn):
        """Sets the image_version_arn of this ImageVersion.


        :param image_version_arn: The image_version_arn of this ImageVersion.
        :type image_version_arn: str
        """
        if image_version_arn is None:
            raise ValueError("Invalid value for `image_version_arn`, must not be `None`")

        self._image_version_arn = image_version_arn

    @property
    def image_version_status(self):
        """Gets the image_version_status of this ImageVersion.


        :return: The image_version_status of this ImageVersion.
        :rtype: ImageVersionStatus
        """
        return self._image_version_status

    @image_version_status.setter
    def image_version_status(self, image_version_status):
        """Sets the image_version_status of this ImageVersion.


        :param image_version_status: The image_version_status of this ImageVersion.
        :type image_version_status: ImageVersionStatus
        """
        if image_version_status is None:
            raise ValueError("Invalid value for `image_version_status`, must not be `None`")

        self._image_version_status = image_version_status

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ImageVersion.


        :return: The last_modified_time of this ImageVersion.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ImageVersion.


        :param last_modified_time: The last_modified_time of this ImageVersion.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def version(self):
        """Gets the version of this ImageVersion.


        :return: The version of this ImageVersion.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ImageVersion.


        :param version: The version of this ImageVersion.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
