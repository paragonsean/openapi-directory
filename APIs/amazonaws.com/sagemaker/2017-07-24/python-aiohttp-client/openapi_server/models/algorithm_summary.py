# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithm_status import AlgorithmStatus
from openapi_server import util


class AlgorithmSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm_name: str=None, algorithm_arn: str=None, algorithm_description: str=None, creation_time: datetime=None, algorithm_status: AlgorithmStatus=None):
        """AlgorithmSummary - a model defined in OpenAPI

        :param algorithm_name: The algorithm_name of this AlgorithmSummary.
        :param algorithm_arn: The algorithm_arn of this AlgorithmSummary.
        :param algorithm_description: The algorithm_description of this AlgorithmSummary.
        :param creation_time: The creation_time of this AlgorithmSummary.
        :param algorithm_status: The algorithm_status of this AlgorithmSummary.
        """
        self.openapi_types = {
            'algorithm_name': str,
            'algorithm_arn': str,
            'algorithm_description': str,
            'creation_time': datetime,
            'algorithm_status': AlgorithmStatus
        }

        self.attribute_map = {
            'algorithm_name': 'AlgorithmName',
            'algorithm_arn': 'AlgorithmArn',
            'algorithm_description': 'AlgorithmDescription',
            'creation_time': 'CreationTime',
            'algorithm_status': 'AlgorithmStatus'
        }

        self._algorithm_name = algorithm_name
        self._algorithm_arn = algorithm_arn
        self._algorithm_description = algorithm_description
        self._creation_time = creation_time
        self._algorithm_status = algorithm_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlgorithmSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlgorithmSummary of this AlgorithmSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm_name(self):
        """Gets the algorithm_name of this AlgorithmSummary.


        :return: The algorithm_name of this AlgorithmSummary.
        :rtype: str
        """
        return self._algorithm_name

    @algorithm_name.setter
    def algorithm_name(self, algorithm_name):
        """Sets the algorithm_name of this AlgorithmSummary.


        :param algorithm_name: The algorithm_name of this AlgorithmSummary.
        :type algorithm_name: str
        """
        if algorithm_name is None:
            raise ValueError("Invalid value for `algorithm_name`, must not be `None`")

        self._algorithm_name = algorithm_name

    @property
    def algorithm_arn(self):
        """Gets the algorithm_arn of this AlgorithmSummary.


        :return: The algorithm_arn of this AlgorithmSummary.
        :rtype: str
        """
        return self._algorithm_arn

    @algorithm_arn.setter
    def algorithm_arn(self, algorithm_arn):
        """Sets the algorithm_arn of this AlgorithmSummary.


        :param algorithm_arn: The algorithm_arn of this AlgorithmSummary.
        :type algorithm_arn: str
        """
        if algorithm_arn is None:
            raise ValueError("Invalid value for `algorithm_arn`, must not be `None`")

        self._algorithm_arn = algorithm_arn

    @property
    def algorithm_description(self):
        """Gets the algorithm_description of this AlgorithmSummary.


        :return: The algorithm_description of this AlgorithmSummary.
        :rtype: str
        """
        return self._algorithm_description

    @algorithm_description.setter
    def algorithm_description(self, algorithm_description):
        """Sets the algorithm_description of this AlgorithmSummary.


        :param algorithm_description: The algorithm_description of this AlgorithmSummary.
        :type algorithm_description: str
        """

        self._algorithm_description = algorithm_description

    @property
    def creation_time(self):
        """Gets the creation_time of this AlgorithmSummary.


        :return: The creation_time of this AlgorithmSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AlgorithmSummary.


        :param creation_time: The creation_time of this AlgorithmSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def algorithm_status(self):
        """Gets the algorithm_status of this AlgorithmSummary.


        :return: The algorithm_status of this AlgorithmSummary.
        :rtype: AlgorithmStatus
        """
        return self._algorithm_status

    @algorithm_status.setter
    def algorithm_status(self, algorithm_status):
        """Sets the algorithm_status of this AlgorithmSummary.


        :param algorithm_status: The algorithm_status of this AlgorithmSummary.
        :type algorithm_status: AlgorithmStatus
        """
        if algorithm_status is None:
            raise ValueError("Invalid value for `algorithm_status`, must not be `None`")

        self._algorithm_status = algorithm_status
