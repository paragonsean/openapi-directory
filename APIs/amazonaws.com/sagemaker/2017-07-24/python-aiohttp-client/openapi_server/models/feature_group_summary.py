# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_group_status import FeatureGroupStatus
from openapi_server.models.feature_group_summary_offline_store_status import FeatureGroupSummaryOfflineStoreStatus
from openapi_server import util


class FeatureGroupSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_group_name: str=None, feature_group_arn: str=None, creation_time: datetime=None, feature_group_status: FeatureGroupStatus=None, offline_store_status: FeatureGroupSummaryOfflineStoreStatus=None):
        """FeatureGroupSummary - a model defined in OpenAPI

        :param feature_group_name: The feature_group_name of this FeatureGroupSummary.
        :param feature_group_arn: The feature_group_arn of this FeatureGroupSummary.
        :param creation_time: The creation_time of this FeatureGroupSummary.
        :param feature_group_status: The feature_group_status of this FeatureGroupSummary.
        :param offline_store_status: The offline_store_status of this FeatureGroupSummary.
        """
        self.openapi_types = {
            'feature_group_name': str,
            'feature_group_arn': str,
            'creation_time': datetime,
            'feature_group_status': FeatureGroupStatus,
            'offline_store_status': FeatureGroupSummaryOfflineStoreStatus
        }

        self.attribute_map = {
            'feature_group_name': 'FeatureGroupName',
            'feature_group_arn': 'FeatureGroupArn',
            'creation_time': 'CreationTime',
            'feature_group_status': 'FeatureGroupStatus',
            'offline_store_status': 'OfflineStoreStatus'
        }

        self._feature_group_name = feature_group_name
        self._feature_group_arn = feature_group_arn
        self._creation_time = creation_time
        self._feature_group_status = feature_group_status
        self._offline_store_status = offline_store_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureGroupSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureGroupSummary of this FeatureGroupSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_group_name(self):
        """Gets the feature_group_name of this FeatureGroupSummary.


        :return: The feature_group_name of this FeatureGroupSummary.
        :rtype: str
        """
        return self._feature_group_name

    @feature_group_name.setter
    def feature_group_name(self, feature_group_name):
        """Sets the feature_group_name of this FeatureGroupSummary.


        :param feature_group_name: The feature_group_name of this FeatureGroupSummary.
        :type feature_group_name: str
        """
        if feature_group_name is None:
            raise ValueError("Invalid value for `feature_group_name`, must not be `None`")

        self._feature_group_name = feature_group_name

    @property
    def feature_group_arn(self):
        """Gets the feature_group_arn of this FeatureGroupSummary.


        :return: The feature_group_arn of this FeatureGroupSummary.
        :rtype: str
        """
        return self._feature_group_arn

    @feature_group_arn.setter
    def feature_group_arn(self, feature_group_arn):
        """Sets the feature_group_arn of this FeatureGroupSummary.


        :param feature_group_arn: The feature_group_arn of this FeatureGroupSummary.
        :type feature_group_arn: str
        """
        if feature_group_arn is None:
            raise ValueError("Invalid value for `feature_group_arn`, must not be `None`")

        self._feature_group_arn = feature_group_arn

    @property
    def creation_time(self):
        """Gets the creation_time of this FeatureGroupSummary.


        :return: The creation_time of this FeatureGroupSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this FeatureGroupSummary.


        :param creation_time: The creation_time of this FeatureGroupSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def feature_group_status(self):
        """Gets the feature_group_status of this FeatureGroupSummary.


        :return: The feature_group_status of this FeatureGroupSummary.
        :rtype: FeatureGroupStatus
        """
        return self._feature_group_status

    @feature_group_status.setter
    def feature_group_status(self, feature_group_status):
        """Sets the feature_group_status of this FeatureGroupSummary.


        :param feature_group_status: The feature_group_status of this FeatureGroupSummary.
        :type feature_group_status: FeatureGroupStatus
        """

        self._feature_group_status = feature_group_status

    @property
    def offline_store_status(self):
        """Gets the offline_store_status of this FeatureGroupSummary.


        :return: The offline_store_status of this FeatureGroupSummary.
        :rtype: FeatureGroupSummaryOfflineStoreStatus
        """
        return self._offline_store_status

    @offline_store_status.setter
    def offline_store_status(self, offline_store_status):
        """Sets the offline_store_status of this FeatureGroupSummary.


        :param offline_store_status: The offline_store_status of this FeatureGroupSummary.
        :type offline_store_status: FeatureGroupSummaryOfflineStoreStatus
        """

        self._offline_store_status = offline_store_status
