# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitoring_alert_status import MonitoringAlertStatus
from openapi_server.models.monitoring_alert_summary_actions import MonitoringAlertSummaryActions
from openapi_server import util


class MonitoringAlertSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, monitoring_alert_name: str=None, creation_time: datetime=None, last_modified_time: datetime=None, alert_status: MonitoringAlertStatus=None, datapoints_to_alert: int=None, evaluation_period: int=None, actions: MonitoringAlertSummaryActions=None):
        """MonitoringAlertSummary - a model defined in OpenAPI

        :param monitoring_alert_name: The monitoring_alert_name of this MonitoringAlertSummary.
        :param creation_time: The creation_time of this MonitoringAlertSummary.
        :param last_modified_time: The last_modified_time of this MonitoringAlertSummary.
        :param alert_status: The alert_status of this MonitoringAlertSummary.
        :param datapoints_to_alert: The datapoints_to_alert of this MonitoringAlertSummary.
        :param evaluation_period: The evaluation_period of this MonitoringAlertSummary.
        :param actions: The actions of this MonitoringAlertSummary.
        """
        self.openapi_types = {
            'monitoring_alert_name': str,
            'creation_time': datetime,
            'last_modified_time': datetime,
            'alert_status': MonitoringAlertStatus,
            'datapoints_to_alert': int,
            'evaluation_period': int,
            'actions': MonitoringAlertSummaryActions
        }

        self.attribute_map = {
            'monitoring_alert_name': 'MonitoringAlertName',
            'creation_time': 'CreationTime',
            'last_modified_time': 'LastModifiedTime',
            'alert_status': 'AlertStatus',
            'datapoints_to_alert': 'DatapointsToAlert',
            'evaluation_period': 'EvaluationPeriod',
            'actions': 'Actions'
        }

        self._monitoring_alert_name = monitoring_alert_name
        self._creation_time = creation_time
        self._last_modified_time = last_modified_time
        self._alert_status = alert_status
        self._datapoints_to_alert = datapoints_to_alert
        self._evaluation_period = evaluation_period
        self._actions = actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringAlertSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringAlertSummary of this MonitoringAlertSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monitoring_alert_name(self):
        """Gets the monitoring_alert_name of this MonitoringAlertSummary.


        :return: The monitoring_alert_name of this MonitoringAlertSummary.
        :rtype: str
        """
        return self._monitoring_alert_name

    @monitoring_alert_name.setter
    def monitoring_alert_name(self, monitoring_alert_name):
        """Sets the monitoring_alert_name of this MonitoringAlertSummary.


        :param monitoring_alert_name: The monitoring_alert_name of this MonitoringAlertSummary.
        :type monitoring_alert_name: str
        """
        if monitoring_alert_name is None:
            raise ValueError("Invalid value for `monitoring_alert_name`, must not be `None`")

        self._monitoring_alert_name = monitoring_alert_name

    @property
    def creation_time(self):
        """Gets the creation_time of this MonitoringAlertSummary.


        :return: The creation_time of this MonitoringAlertSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this MonitoringAlertSummary.


        :param creation_time: The creation_time of this MonitoringAlertSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this MonitoringAlertSummary.


        :return: The last_modified_time of this MonitoringAlertSummary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this MonitoringAlertSummary.


        :param last_modified_time: The last_modified_time of this MonitoringAlertSummary.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def alert_status(self):
        """Gets the alert_status of this MonitoringAlertSummary.


        :return: The alert_status of this MonitoringAlertSummary.
        :rtype: MonitoringAlertStatus
        """
        return self._alert_status

    @alert_status.setter
    def alert_status(self, alert_status):
        """Sets the alert_status of this MonitoringAlertSummary.


        :param alert_status: The alert_status of this MonitoringAlertSummary.
        :type alert_status: MonitoringAlertStatus
        """
        if alert_status is None:
            raise ValueError("Invalid value for `alert_status`, must not be `None`")

        self._alert_status = alert_status

    @property
    def datapoints_to_alert(self):
        """Gets the datapoints_to_alert of this MonitoringAlertSummary.


        :return: The datapoints_to_alert of this MonitoringAlertSummary.
        :rtype: int
        """
        return self._datapoints_to_alert

    @datapoints_to_alert.setter
    def datapoints_to_alert(self, datapoints_to_alert):
        """Sets the datapoints_to_alert of this MonitoringAlertSummary.


        :param datapoints_to_alert: The datapoints_to_alert of this MonitoringAlertSummary.
        :type datapoints_to_alert: int
        """
        if datapoints_to_alert is None:
            raise ValueError("Invalid value for `datapoints_to_alert`, must not be `None`")

        self._datapoints_to_alert = datapoints_to_alert

    @property
    def evaluation_period(self):
        """Gets the evaluation_period of this MonitoringAlertSummary.


        :return: The evaluation_period of this MonitoringAlertSummary.
        :rtype: int
        """
        return self._evaluation_period

    @evaluation_period.setter
    def evaluation_period(self, evaluation_period):
        """Sets the evaluation_period of this MonitoringAlertSummary.


        :param evaluation_period: The evaluation_period of this MonitoringAlertSummary.
        :type evaluation_period: int
        """
        if evaluation_period is None:
            raise ValueError("Invalid value for `evaluation_period`, must not be `None`")

        self._evaluation_period = evaluation_period

    @property
    def actions(self):
        """Gets the actions of this MonitoringAlertSummary.


        :return: The actions of this MonitoringAlertSummary.
        :rtype: MonitoringAlertSummaryActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this MonitoringAlertSummary.


        :param actions: The actions of this MonitoringAlertSummary.
        :type actions: MonitoringAlertSummaryActions
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions
