# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InferenceSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers: List=None, supported_transform_instance_types: List=None, supported_realtime_inference_instance_types: List=None, supported_content_types: List=None, supported_response_mime_types: List=None):
        """InferenceSpecification - a model defined in OpenAPI

        :param containers: The containers of this InferenceSpecification.
        :param supported_transform_instance_types: The supported_transform_instance_types of this InferenceSpecification.
        :param supported_realtime_inference_instance_types: The supported_realtime_inference_instance_types of this InferenceSpecification.
        :param supported_content_types: The supported_content_types of this InferenceSpecification.
        :param supported_response_mime_types: The supported_response_mime_types of this InferenceSpecification.
        """
        self.openapi_types = {
            'containers': List,
            'supported_transform_instance_types': List,
            'supported_realtime_inference_instance_types': List,
            'supported_content_types': List,
            'supported_response_mime_types': List
        }

        self.attribute_map = {
            'containers': 'Containers',
            'supported_transform_instance_types': 'SupportedTransformInstanceTypes',
            'supported_realtime_inference_instance_types': 'SupportedRealtimeInferenceInstanceTypes',
            'supported_content_types': 'SupportedContentTypes',
            'supported_response_mime_types': 'SupportedResponseMIMETypes'
        }

        self._containers = containers
        self._supported_transform_instance_types = supported_transform_instance_types
        self._supported_realtime_inference_instance_types = supported_realtime_inference_instance_types
        self._supported_content_types = supported_content_types
        self._supported_response_mime_types = supported_response_mime_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InferenceSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InferenceSpecification of this InferenceSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers(self):
        """Gets the containers of this InferenceSpecification.


        :return: The containers of this InferenceSpecification.
        :rtype: List
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this InferenceSpecification.


        :param containers: The containers of this InferenceSpecification.
        :type containers: List
        """
        if containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")

        self._containers = containers

    @property
    def supported_transform_instance_types(self):
        """Gets the supported_transform_instance_types of this InferenceSpecification.


        :return: The supported_transform_instance_types of this InferenceSpecification.
        :rtype: List
        """
        return self._supported_transform_instance_types

    @supported_transform_instance_types.setter
    def supported_transform_instance_types(self, supported_transform_instance_types):
        """Sets the supported_transform_instance_types of this InferenceSpecification.


        :param supported_transform_instance_types: The supported_transform_instance_types of this InferenceSpecification.
        :type supported_transform_instance_types: List
        """

        self._supported_transform_instance_types = supported_transform_instance_types

    @property
    def supported_realtime_inference_instance_types(self):
        """Gets the supported_realtime_inference_instance_types of this InferenceSpecification.


        :return: The supported_realtime_inference_instance_types of this InferenceSpecification.
        :rtype: List
        """
        return self._supported_realtime_inference_instance_types

    @supported_realtime_inference_instance_types.setter
    def supported_realtime_inference_instance_types(self, supported_realtime_inference_instance_types):
        """Sets the supported_realtime_inference_instance_types of this InferenceSpecification.


        :param supported_realtime_inference_instance_types: The supported_realtime_inference_instance_types of this InferenceSpecification.
        :type supported_realtime_inference_instance_types: List
        """

        self._supported_realtime_inference_instance_types = supported_realtime_inference_instance_types

    @property
    def supported_content_types(self):
        """Gets the supported_content_types of this InferenceSpecification.


        :return: The supported_content_types of this InferenceSpecification.
        :rtype: List
        """
        return self._supported_content_types

    @supported_content_types.setter
    def supported_content_types(self, supported_content_types):
        """Sets the supported_content_types of this InferenceSpecification.


        :param supported_content_types: The supported_content_types of this InferenceSpecification.
        :type supported_content_types: List
        """
        if supported_content_types is None:
            raise ValueError("Invalid value for `supported_content_types`, must not be `None`")

        self._supported_content_types = supported_content_types

    @property
    def supported_response_mime_types(self):
        """Gets the supported_response_mime_types of this InferenceSpecification.


        :return: The supported_response_mime_types of this InferenceSpecification.
        :rtype: List
        """
        return self._supported_response_mime_types

    @supported_response_mime_types.setter
    def supported_response_mime_types(self, supported_response_mime_types):
        """Sets the supported_response_mime_types of this InferenceSpecification.


        :param supported_response_mime_types: The supported_response_mime_types of this InferenceSpecification.
        :type supported_response_mime_types: List
        """
        if supported_response_mime_types is None:
            raise ValueError("Invalid value for `supported_response_mime_types`, must not be `None`")

        self._supported_response_mime_types = supported_response_mime_types
