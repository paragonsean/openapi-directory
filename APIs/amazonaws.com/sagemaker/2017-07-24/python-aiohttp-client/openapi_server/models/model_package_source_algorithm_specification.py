# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelPackageSourceAlgorithmSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_algorithms: List=None):
        """ModelPackageSourceAlgorithmSpecification - a model defined in OpenAPI

        :param source_algorithms: The source_algorithms of this ModelPackageSourceAlgorithmSpecification.
        """
        self.openapi_types = {
            'source_algorithms': List
        }

        self.attribute_map = {
            'source_algorithms': 'SourceAlgorithms'
        }

        self._source_algorithms = source_algorithms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelPackageSourceAlgorithmSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelPackage_SourceAlgorithmSpecification of this ModelPackageSourceAlgorithmSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_algorithms(self):
        """Gets the source_algorithms of this ModelPackageSourceAlgorithmSpecification.


        :return: The source_algorithms of this ModelPackageSourceAlgorithmSpecification.
        :rtype: List
        """
        return self._source_algorithms

    @source_algorithms.setter
    def source_algorithms(self, source_algorithms):
        """Sets the source_algorithms of this ModelPackageSourceAlgorithmSpecification.


        :param source_algorithms: The source_algorithms of this ModelPackageSourceAlgorithmSpecification.
        :type source_algorithms: List
        """
        if source_algorithms is None:
            raise ValueError("Invalid value for `source_algorithms`, must not be `None`")

        self._source_algorithms = source_algorithms
