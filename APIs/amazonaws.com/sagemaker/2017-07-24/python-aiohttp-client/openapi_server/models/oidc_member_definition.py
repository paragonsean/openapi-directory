# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OidcMemberDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groups: List=None):
        """OidcMemberDefinition - a model defined in OpenAPI

        :param groups: The groups of this OidcMemberDefinition.
        """
        self.openapi_types = {
            'groups': List
        }

        self.attribute_map = {
            'groups': 'Groups'
        }

        self._groups = groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OidcMemberDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OidcMemberDefinition of this OidcMemberDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groups(self):
        """Gets the groups of this OidcMemberDefinition.


        :return: The groups of this OidcMemberDefinition.
        :rtype: List
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this OidcMemberDefinition.


        :param groups: The groups of this OidcMemberDefinition.
        :type groups: List
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups
