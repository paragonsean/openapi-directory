# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_approval_status import ModelApprovalStatus
from openapi_server.models.model_package_status import ModelPackageStatus
from openapi_server import util


class ModelPackageSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_package_name: str=None, model_package_group_name: str=None, model_package_version: int=None, model_package_arn: str=None, model_package_description: str=None, creation_time: datetime=None, model_package_status: ModelPackageStatus=None, model_approval_status: ModelApprovalStatus=None):
        """ModelPackageSummary - a model defined in OpenAPI

        :param model_package_name: The model_package_name of this ModelPackageSummary.
        :param model_package_group_name: The model_package_group_name of this ModelPackageSummary.
        :param model_package_version: The model_package_version of this ModelPackageSummary.
        :param model_package_arn: The model_package_arn of this ModelPackageSummary.
        :param model_package_description: The model_package_description of this ModelPackageSummary.
        :param creation_time: The creation_time of this ModelPackageSummary.
        :param model_package_status: The model_package_status of this ModelPackageSummary.
        :param model_approval_status: The model_approval_status of this ModelPackageSummary.
        """
        self.openapi_types = {
            'model_package_name': str,
            'model_package_group_name': str,
            'model_package_version': int,
            'model_package_arn': str,
            'model_package_description': str,
            'creation_time': datetime,
            'model_package_status': ModelPackageStatus,
            'model_approval_status': ModelApprovalStatus
        }

        self.attribute_map = {
            'model_package_name': 'ModelPackageName',
            'model_package_group_name': 'ModelPackageGroupName',
            'model_package_version': 'ModelPackageVersion',
            'model_package_arn': 'ModelPackageArn',
            'model_package_description': 'ModelPackageDescription',
            'creation_time': 'CreationTime',
            'model_package_status': 'ModelPackageStatus',
            'model_approval_status': 'ModelApprovalStatus'
        }

        self._model_package_name = model_package_name
        self._model_package_group_name = model_package_group_name
        self._model_package_version = model_package_version
        self._model_package_arn = model_package_arn
        self._model_package_description = model_package_description
        self._creation_time = creation_time
        self._model_package_status = model_package_status
        self._model_approval_status = model_approval_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelPackageSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelPackageSummary of this ModelPackageSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_package_name(self):
        """Gets the model_package_name of this ModelPackageSummary.


        :return: The model_package_name of this ModelPackageSummary.
        :rtype: str
        """
        return self._model_package_name

    @model_package_name.setter
    def model_package_name(self, model_package_name):
        """Sets the model_package_name of this ModelPackageSummary.


        :param model_package_name: The model_package_name of this ModelPackageSummary.
        :type model_package_name: str
        """
        if model_package_name is None:
            raise ValueError("Invalid value for `model_package_name`, must not be `None`")

        self._model_package_name = model_package_name

    @property
    def model_package_group_name(self):
        """Gets the model_package_group_name of this ModelPackageSummary.


        :return: The model_package_group_name of this ModelPackageSummary.
        :rtype: str
        """
        return self._model_package_group_name

    @model_package_group_name.setter
    def model_package_group_name(self, model_package_group_name):
        """Sets the model_package_group_name of this ModelPackageSummary.


        :param model_package_group_name: The model_package_group_name of this ModelPackageSummary.
        :type model_package_group_name: str
        """

        self._model_package_group_name = model_package_group_name

    @property
    def model_package_version(self):
        """Gets the model_package_version of this ModelPackageSummary.


        :return: The model_package_version of this ModelPackageSummary.
        :rtype: int
        """
        return self._model_package_version

    @model_package_version.setter
    def model_package_version(self, model_package_version):
        """Sets the model_package_version of this ModelPackageSummary.


        :param model_package_version: The model_package_version of this ModelPackageSummary.
        :type model_package_version: int
        """

        self._model_package_version = model_package_version

    @property
    def model_package_arn(self):
        """Gets the model_package_arn of this ModelPackageSummary.


        :return: The model_package_arn of this ModelPackageSummary.
        :rtype: str
        """
        return self._model_package_arn

    @model_package_arn.setter
    def model_package_arn(self, model_package_arn):
        """Sets the model_package_arn of this ModelPackageSummary.


        :param model_package_arn: The model_package_arn of this ModelPackageSummary.
        :type model_package_arn: str
        """
        if model_package_arn is None:
            raise ValueError("Invalid value for `model_package_arn`, must not be `None`")

        self._model_package_arn = model_package_arn

    @property
    def model_package_description(self):
        """Gets the model_package_description of this ModelPackageSummary.


        :return: The model_package_description of this ModelPackageSummary.
        :rtype: str
        """
        return self._model_package_description

    @model_package_description.setter
    def model_package_description(self, model_package_description):
        """Sets the model_package_description of this ModelPackageSummary.


        :param model_package_description: The model_package_description of this ModelPackageSummary.
        :type model_package_description: str
        """

        self._model_package_description = model_package_description

    @property
    def creation_time(self):
        """Gets the creation_time of this ModelPackageSummary.


        :return: The creation_time of this ModelPackageSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ModelPackageSummary.


        :param creation_time: The creation_time of this ModelPackageSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def model_package_status(self):
        """Gets the model_package_status of this ModelPackageSummary.


        :return: The model_package_status of this ModelPackageSummary.
        :rtype: ModelPackageStatus
        """
        return self._model_package_status

    @model_package_status.setter
    def model_package_status(self, model_package_status):
        """Sets the model_package_status of this ModelPackageSummary.


        :param model_package_status: The model_package_status of this ModelPackageSummary.
        :type model_package_status: ModelPackageStatus
        """
        if model_package_status is None:
            raise ValueError("Invalid value for `model_package_status`, must not be `None`")

        self._model_package_status = model_package_status

    @property
    def model_approval_status(self):
        """Gets the model_approval_status of this ModelPackageSummary.


        :return: The model_approval_status of this ModelPackageSummary.
        :rtype: ModelApprovalStatus
        """
        return self._model_approval_status

    @model_approval_status.setter
    def model_approval_status(self, model_approval_status):
        """Sets the model_approval_status of this ModelPackageSummary.


        :param model_approval_status: The model_approval_status of this ModelPackageSummary.
        :type model_approval_status: ModelApprovalStatus
        """

        self._model_approval_status = model_approval_status
