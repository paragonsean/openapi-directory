# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DynamicScalingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_capacity: int=None, max_capacity: int=None, scale_in_cooldown: int=None, scale_out_cooldown: int=None, scaling_policies: List=None):
        """DynamicScalingConfiguration - a model defined in OpenAPI

        :param min_capacity: The min_capacity of this DynamicScalingConfiguration.
        :param max_capacity: The max_capacity of this DynamicScalingConfiguration.
        :param scale_in_cooldown: The scale_in_cooldown of this DynamicScalingConfiguration.
        :param scale_out_cooldown: The scale_out_cooldown of this DynamicScalingConfiguration.
        :param scaling_policies: The scaling_policies of this DynamicScalingConfiguration.
        """
        self.openapi_types = {
            'min_capacity': int,
            'max_capacity': int,
            'scale_in_cooldown': int,
            'scale_out_cooldown': int,
            'scaling_policies': List
        }

        self.attribute_map = {
            'min_capacity': 'MinCapacity',
            'max_capacity': 'MaxCapacity',
            'scale_in_cooldown': 'ScaleInCooldown',
            'scale_out_cooldown': 'ScaleOutCooldown',
            'scaling_policies': 'ScalingPolicies'
        }

        self._min_capacity = min_capacity
        self._max_capacity = max_capacity
        self._scale_in_cooldown = scale_in_cooldown
        self._scale_out_cooldown = scale_out_cooldown
        self._scaling_policies = scaling_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DynamicScalingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DynamicScalingConfiguration of this DynamicScalingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_capacity(self):
        """Gets the min_capacity of this DynamicScalingConfiguration.


        :return: The min_capacity of this DynamicScalingConfiguration.
        :rtype: int
        """
        return self._min_capacity

    @min_capacity.setter
    def min_capacity(self, min_capacity):
        """Sets the min_capacity of this DynamicScalingConfiguration.


        :param min_capacity: The min_capacity of this DynamicScalingConfiguration.
        :type min_capacity: int
        """

        self._min_capacity = min_capacity

    @property
    def max_capacity(self):
        """Gets the max_capacity of this DynamicScalingConfiguration.


        :return: The max_capacity of this DynamicScalingConfiguration.
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this DynamicScalingConfiguration.


        :param max_capacity: The max_capacity of this DynamicScalingConfiguration.
        :type max_capacity: int
        """

        self._max_capacity = max_capacity

    @property
    def scale_in_cooldown(self):
        """Gets the scale_in_cooldown of this DynamicScalingConfiguration.


        :return: The scale_in_cooldown of this DynamicScalingConfiguration.
        :rtype: int
        """
        return self._scale_in_cooldown

    @scale_in_cooldown.setter
    def scale_in_cooldown(self, scale_in_cooldown):
        """Sets the scale_in_cooldown of this DynamicScalingConfiguration.


        :param scale_in_cooldown: The scale_in_cooldown of this DynamicScalingConfiguration.
        :type scale_in_cooldown: int
        """

        self._scale_in_cooldown = scale_in_cooldown

    @property
    def scale_out_cooldown(self):
        """Gets the scale_out_cooldown of this DynamicScalingConfiguration.


        :return: The scale_out_cooldown of this DynamicScalingConfiguration.
        :rtype: int
        """
        return self._scale_out_cooldown

    @scale_out_cooldown.setter
    def scale_out_cooldown(self, scale_out_cooldown):
        """Sets the scale_out_cooldown of this DynamicScalingConfiguration.


        :param scale_out_cooldown: The scale_out_cooldown of this DynamicScalingConfiguration.
        :type scale_out_cooldown: int
        """

        self._scale_out_cooldown = scale_out_cooldown

    @property
    def scaling_policies(self):
        """Gets the scaling_policies of this DynamicScalingConfiguration.


        :return: The scaling_policies of this DynamicScalingConfiguration.
        :rtype: List
        """
        return self._scaling_policies

    @scaling_policies.setter
    def scaling_policies(self, scaling_policies):
        """Sets the scaling_policies of this DynamicScalingConfiguration.


        :param scaling_policies: The scaling_policies of this DynamicScalingConfiguration.
        :type scaling_policies: List
        """

        self._scaling_policies = scaling_policies
