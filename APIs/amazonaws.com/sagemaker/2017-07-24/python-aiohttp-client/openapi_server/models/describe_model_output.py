# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_model_input_inference_execution_config import CreateModelInputInferenceExecutionConfig
from openapi_server.models.describe_model_output_deployment_recommendation import DescribeModelOutputDeploymentRecommendation
from openapi_server.models.describe_model_output_primary_container import DescribeModelOutputPrimaryContainer
from openapi_server.models.describe_model_output_vpc_config import DescribeModelOutputVpcConfig
from openapi_server import util


class DescribeModelOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_name: str=None, primary_container: DescribeModelOutputPrimaryContainer=None, containers: List=None, inference_execution_config: CreateModelInputInferenceExecutionConfig=None, execution_role_arn: str=None, vpc_config: DescribeModelOutputVpcConfig=None, creation_time: datetime=None, model_arn: str=None, enable_network_isolation: bool=None, deployment_recommendation: DescribeModelOutputDeploymentRecommendation=None):
        """DescribeModelOutput - a model defined in OpenAPI

        :param model_name: The model_name of this DescribeModelOutput.
        :param primary_container: The primary_container of this DescribeModelOutput.
        :param containers: The containers of this DescribeModelOutput.
        :param inference_execution_config: The inference_execution_config of this DescribeModelOutput.
        :param execution_role_arn: The execution_role_arn of this DescribeModelOutput.
        :param vpc_config: The vpc_config of this DescribeModelOutput.
        :param creation_time: The creation_time of this DescribeModelOutput.
        :param model_arn: The model_arn of this DescribeModelOutput.
        :param enable_network_isolation: The enable_network_isolation of this DescribeModelOutput.
        :param deployment_recommendation: The deployment_recommendation of this DescribeModelOutput.
        """
        self.openapi_types = {
            'model_name': str,
            'primary_container': DescribeModelOutputPrimaryContainer,
            'containers': List,
            'inference_execution_config': CreateModelInputInferenceExecutionConfig,
            'execution_role_arn': str,
            'vpc_config': DescribeModelOutputVpcConfig,
            'creation_time': datetime,
            'model_arn': str,
            'enable_network_isolation': bool,
            'deployment_recommendation': DescribeModelOutputDeploymentRecommendation
        }

        self.attribute_map = {
            'model_name': 'ModelName',
            'primary_container': 'PrimaryContainer',
            'containers': 'Containers',
            'inference_execution_config': 'InferenceExecutionConfig',
            'execution_role_arn': 'ExecutionRoleArn',
            'vpc_config': 'VpcConfig',
            'creation_time': 'CreationTime',
            'model_arn': 'ModelArn',
            'enable_network_isolation': 'EnableNetworkIsolation',
            'deployment_recommendation': 'DeploymentRecommendation'
        }

        self._model_name = model_name
        self._primary_container = primary_container
        self._containers = containers
        self._inference_execution_config = inference_execution_config
        self._execution_role_arn = execution_role_arn
        self._vpc_config = vpc_config
        self._creation_time = creation_time
        self._model_arn = model_arn
        self._enable_network_isolation = enable_network_isolation
        self._deployment_recommendation = deployment_recommendation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeModelOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeModelOutput of this DescribeModelOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_name(self):
        """Gets the model_name of this DescribeModelOutput.


        :return: The model_name of this DescribeModelOutput.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DescribeModelOutput.


        :param model_name: The model_name of this DescribeModelOutput.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def primary_container(self):
        """Gets the primary_container of this DescribeModelOutput.


        :return: The primary_container of this DescribeModelOutput.
        :rtype: DescribeModelOutputPrimaryContainer
        """
        return self._primary_container

    @primary_container.setter
    def primary_container(self, primary_container):
        """Sets the primary_container of this DescribeModelOutput.


        :param primary_container: The primary_container of this DescribeModelOutput.
        :type primary_container: DescribeModelOutputPrimaryContainer
        """

        self._primary_container = primary_container

    @property
    def containers(self):
        """Gets the containers of this DescribeModelOutput.


        :return: The containers of this DescribeModelOutput.
        :rtype: List
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this DescribeModelOutput.


        :param containers: The containers of this DescribeModelOutput.
        :type containers: List
        """

        self._containers = containers

    @property
    def inference_execution_config(self):
        """Gets the inference_execution_config of this DescribeModelOutput.


        :return: The inference_execution_config of this DescribeModelOutput.
        :rtype: CreateModelInputInferenceExecutionConfig
        """
        return self._inference_execution_config

    @inference_execution_config.setter
    def inference_execution_config(self, inference_execution_config):
        """Sets the inference_execution_config of this DescribeModelOutput.


        :param inference_execution_config: The inference_execution_config of this DescribeModelOutput.
        :type inference_execution_config: CreateModelInputInferenceExecutionConfig
        """

        self._inference_execution_config = inference_execution_config

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this DescribeModelOutput.


        :return: The execution_role_arn of this DescribeModelOutput.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this DescribeModelOutput.


        :param execution_role_arn: The execution_role_arn of this DescribeModelOutput.
        :type execution_role_arn: str
        """
        if execution_role_arn is None:
            raise ValueError("Invalid value for `execution_role_arn`, must not be `None`")

        self._execution_role_arn = execution_role_arn

    @property
    def vpc_config(self):
        """Gets the vpc_config of this DescribeModelOutput.


        :return: The vpc_config of this DescribeModelOutput.
        :rtype: DescribeModelOutputVpcConfig
        """
        return self._vpc_config

    @vpc_config.setter
    def vpc_config(self, vpc_config):
        """Sets the vpc_config of this DescribeModelOutput.


        :param vpc_config: The vpc_config of this DescribeModelOutput.
        :type vpc_config: DescribeModelOutputVpcConfig
        """

        self._vpc_config = vpc_config

    @property
    def creation_time(self):
        """Gets the creation_time of this DescribeModelOutput.


        :return: The creation_time of this DescribeModelOutput.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DescribeModelOutput.


        :param creation_time: The creation_time of this DescribeModelOutput.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def model_arn(self):
        """Gets the model_arn of this DescribeModelOutput.


        :return: The model_arn of this DescribeModelOutput.
        :rtype: str
        """
        return self._model_arn

    @model_arn.setter
    def model_arn(self, model_arn):
        """Sets the model_arn of this DescribeModelOutput.


        :param model_arn: The model_arn of this DescribeModelOutput.
        :type model_arn: str
        """
        if model_arn is None:
            raise ValueError("Invalid value for `model_arn`, must not be `None`")

        self._model_arn = model_arn

    @property
    def enable_network_isolation(self):
        """Gets the enable_network_isolation of this DescribeModelOutput.


        :return: The enable_network_isolation of this DescribeModelOutput.
        :rtype: bool
        """
        return self._enable_network_isolation

    @enable_network_isolation.setter
    def enable_network_isolation(self, enable_network_isolation):
        """Sets the enable_network_isolation of this DescribeModelOutput.


        :param enable_network_isolation: The enable_network_isolation of this DescribeModelOutput.
        :type enable_network_isolation: bool
        """

        self._enable_network_isolation = enable_network_isolation

    @property
    def deployment_recommendation(self):
        """Gets the deployment_recommendation of this DescribeModelOutput.


        :return: The deployment_recommendation of this DescribeModelOutput.
        :rtype: DescribeModelOutputDeploymentRecommendation
        """
        return self._deployment_recommendation

    @deployment_recommendation.setter
    def deployment_recommendation(self, deployment_recommendation):
        """Sets the deployment_recommendation of this DescribeModelOutput.


        :param deployment_recommendation: The deployment_recommendation of this DescribeModelOutput.
        :type deployment_recommendation: DescribeModelOutputDeploymentRecommendation
        """

        self._deployment_recommendation = deployment_recommendation
