# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.redshift_result_compression_type import RedshiftResultCompressionType
from openapi_server.models.redshift_result_format import RedshiftResultFormat
import re
from openapi_server import util


class RedshiftDatasetDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_id: str=None, database: str=None, db_user: str=None, query_string: str=None, cluster_role_arn: str=None, output_s3_uri: str=None, kms_key_id: str=None, output_format: RedshiftResultFormat=None, output_compression: RedshiftResultCompressionType=None):
        """RedshiftDatasetDefinition - a model defined in OpenAPI

        :param cluster_id: The cluster_id of this RedshiftDatasetDefinition.
        :param database: The database of this RedshiftDatasetDefinition.
        :param db_user: The db_user of this RedshiftDatasetDefinition.
        :param query_string: The query_string of this RedshiftDatasetDefinition.
        :param cluster_role_arn: The cluster_role_arn of this RedshiftDatasetDefinition.
        :param output_s3_uri: The output_s3_uri of this RedshiftDatasetDefinition.
        :param kms_key_id: The kms_key_id of this RedshiftDatasetDefinition.
        :param output_format: The output_format of this RedshiftDatasetDefinition.
        :param output_compression: The output_compression of this RedshiftDatasetDefinition.
        """
        self.openapi_types = {
            'cluster_id': str,
            'database': str,
            'db_user': str,
            'query_string': str,
            'cluster_role_arn': str,
            'output_s3_uri': str,
            'kms_key_id': str,
            'output_format': RedshiftResultFormat,
            'output_compression': RedshiftResultCompressionType
        }

        self.attribute_map = {
            'cluster_id': 'ClusterId',
            'database': 'Database',
            'db_user': 'DbUser',
            'query_string': 'QueryString',
            'cluster_role_arn': 'ClusterRoleArn',
            'output_s3_uri': 'OutputS3Uri',
            'kms_key_id': 'KmsKeyId',
            'output_format': 'OutputFormat',
            'output_compression': 'OutputCompression'
        }

        self._cluster_id = cluster_id
        self._database = database
        self._db_user = db_user
        self._query_string = query_string
        self._cluster_role_arn = cluster_role_arn
        self._output_s3_uri = output_s3_uri
        self._kms_key_id = kms_key_id
        self._output_format = output_format
        self._output_compression = output_compression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedshiftDatasetDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedshiftDatasetDefinition of this RedshiftDatasetDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_id(self):
        """Gets the cluster_id of this RedshiftDatasetDefinition.

        The Redshift cluster Identifier.

        :return: The cluster_id of this RedshiftDatasetDefinition.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this RedshiftDatasetDefinition.

        The Redshift cluster Identifier.

        :param cluster_id: The cluster_id of this RedshiftDatasetDefinition.
        :type cluster_id: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")
        if cluster_id is not None and len(cluster_id) > 63:
            raise ValueError("Invalid value for `cluster_id`, length must be less than or equal to `63`")
        if cluster_id is not None and len(cluster_id) < 1:
            raise ValueError("Invalid value for `cluster_id`, length must be greater than or equal to `1`")
        if cluster_id is not None and not re.search(r'.*', cluster_id):
            raise ValueError("Invalid value for `cluster_id`, must be a follow pattern or equal to `/.*/`")

        self._cluster_id = cluster_id

    @property
    def database(self):
        """Gets the database of this RedshiftDatasetDefinition.

        The name of the Redshift database used in Redshift query execution.

        :return: The database of this RedshiftDatasetDefinition.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this RedshiftDatasetDefinition.

        The name of the Redshift database used in Redshift query execution.

        :param database: The database of this RedshiftDatasetDefinition.
        :type database: str
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")
        if database is not None and len(database) > 64:
            raise ValueError("Invalid value for `database`, length must be less than or equal to `64`")
        if database is not None and len(database) < 1:
            raise ValueError("Invalid value for `database`, length must be greater than or equal to `1`")
        if database is not None and not re.search(r'.*', database):
            raise ValueError("Invalid value for `database`, must be a follow pattern or equal to `/.*/`")

        self._database = database

    @property
    def db_user(self):
        """Gets the db_user of this RedshiftDatasetDefinition.

        The database user name used in Redshift query execution.

        :return: The db_user of this RedshiftDatasetDefinition.
        :rtype: str
        """
        return self._db_user

    @db_user.setter
    def db_user(self, db_user):
        """Sets the db_user of this RedshiftDatasetDefinition.

        The database user name used in Redshift query execution.

        :param db_user: The db_user of this RedshiftDatasetDefinition.
        :type db_user: str
        """
        if db_user is None:
            raise ValueError("Invalid value for `db_user`, must not be `None`")
        if db_user is not None and len(db_user) > 128:
            raise ValueError("Invalid value for `db_user`, length must be less than or equal to `128`")
        if db_user is not None and len(db_user) < 1:
            raise ValueError("Invalid value for `db_user`, length must be greater than or equal to `1`")
        if db_user is not None and not re.search(r'.*', db_user):
            raise ValueError("Invalid value for `db_user`, must be a follow pattern or equal to `/.*/`")

        self._db_user = db_user

    @property
    def query_string(self):
        """Gets the query_string of this RedshiftDatasetDefinition.

        The SQL query statements to be executed.

        :return: The query_string of this RedshiftDatasetDefinition.
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this RedshiftDatasetDefinition.

        The SQL query statements to be executed.

        :param query_string: The query_string of this RedshiftDatasetDefinition.
        :type query_string: str
        """
        if query_string is None:
            raise ValueError("Invalid value for `query_string`, must not be `None`")
        if query_string is not None and len(query_string) > 4096:
            raise ValueError("Invalid value for `query_string`, length must be less than or equal to `4096`")
        if query_string is not None and len(query_string) < 1:
            raise ValueError("Invalid value for `query_string`, length must be greater than or equal to `1`")
        if query_string is not None and not re.search(r'[\s\S]+', query_string):
            raise ValueError("Invalid value for `query_string`, must be a follow pattern or equal to `/[\s\S]+/`")

        self._query_string = query_string

    @property
    def cluster_role_arn(self):
        """Gets the cluster_role_arn of this RedshiftDatasetDefinition.


        :return: The cluster_role_arn of this RedshiftDatasetDefinition.
        :rtype: str
        """
        return self._cluster_role_arn

    @cluster_role_arn.setter
    def cluster_role_arn(self, cluster_role_arn):
        """Sets the cluster_role_arn of this RedshiftDatasetDefinition.


        :param cluster_role_arn: The cluster_role_arn of this RedshiftDatasetDefinition.
        :type cluster_role_arn: str
        """
        if cluster_role_arn is None:
            raise ValueError("Invalid value for `cluster_role_arn`, must not be `None`")

        self._cluster_role_arn = cluster_role_arn

    @property
    def output_s3_uri(self):
        """Gets the output_s3_uri of this RedshiftDatasetDefinition.


        :return: The output_s3_uri of this RedshiftDatasetDefinition.
        :rtype: str
        """
        return self._output_s3_uri

    @output_s3_uri.setter
    def output_s3_uri(self, output_s3_uri):
        """Sets the output_s3_uri of this RedshiftDatasetDefinition.


        :param output_s3_uri: The output_s3_uri of this RedshiftDatasetDefinition.
        :type output_s3_uri: str
        """
        if output_s3_uri is None:
            raise ValueError("Invalid value for `output_s3_uri`, must not be `None`")

        self._output_s3_uri = output_s3_uri

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this RedshiftDatasetDefinition.


        :return: The kms_key_id of this RedshiftDatasetDefinition.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this RedshiftDatasetDefinition.


        :param kms_key_id: The kms_key_id of this RedshiftDatasetDefinition.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def output_format(self):
        """Gets the output_format of this RedshiftDatasetDefinition.


        :return: The output_format of this RedshiftDatasetDefinition.
        :rtype: RedshiftResultFormat
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this RedshiftDatasetDefinition.


        :param output_format: The output_format of this RedshiftDatasetDefinition.
        :type output_format: RedshiftResultFormat
        """
        if output_format is None:
            raise ValueError("Invalid value for `output_format`, must not be `None`")

        self._output_format = output_format

    @property
    def output_compression(self):
        """Gets the output_compression of this RedshiftDatasetDefinition.


        :return: The output_compression of this RedshiftDatasetDefinition.
        :rtype: RedshiftResultCompressionType
        """
        return self._output_compression

    @output_compression.setter
    def output_compression(self, output_compression):
        """Sets the output_compression of this RedshiftDatasetDefinition.


        :param output_compression: The output_compression of this RedshiftDatasetDefinition.
        :type output_compression: RedshiftResultCompressionType
        """

        self._output_compression = output_compression
