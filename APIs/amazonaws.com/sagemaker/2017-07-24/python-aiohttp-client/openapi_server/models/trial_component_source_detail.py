# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trial_component_source_detail_processing_job import TrialComponentSourceDetailProcessingJob
from openapi_server.models.trial_component_source_detail_training_job import TrialComponentSourceDetailTrainingJob
from openapi_server.models.trial_component_source_detail_transform_job import TrialComponentSourceDetailTransformJob
from openapi_server import util


class TrialComponentSourceDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_arn: str=None, training_job: TrialComponentSourceDetailTrainingJob=None, processing_job: TrialComponentSourceDetailProcessingJob=None, transform_job: TrialComponentSourceDetailTransformJob=None):
        """TrialComponentSourceDetail - a model defined in OpenAPI

        :param source_arn: The source_arn of this TrialComponentSourceDetail.
        :param training_job: The training_job of this TrialComponentSourceDetail.
        :param processing_job: The processing_job of this TrialComponentSourceDetail.
        :param transform_job: The transform_job of this TrialComponentSourceDetail.
        """
        self.openapi_types = {
            'source_arn': str,
            'training_job': TrialComponentSourceDetailTrainingJob,
            'processing_job': TrialComponentSourceDetailProcessingJob,
            'transform_job': TrialComponentSourceDetailTransformJob
        }

        self.attribute_map = {
            'source_arn': 'SourceArn',
            'training_job': 'TrainingJob',
            'processing_job': 'ProcessingJob',
            'transform_job': 'TransformJob'
        }

        self._source_arn = source_arn
        self._training_job = training_job
        self._processing_job = processing_job
        self._transform_job = transform_job

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrialComponentSourceDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrialComponent_SourceDetail of this TrialComponentSourceDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_arn(self):
        """Gets the source_arn of this TrialComponentSourceDetail.


        :return: The source_arn of this TrialComponentSourceDetail.
        :rtype: str
        """
        return self._source_arn

    @source_arn.setter
    def source_arn(self, source_arn):
        """Sets the source_arn of this TrialComponentSourceDetail.


        :param source_arn: The source_arn of this TrialComponentSourceDetail.
        :type source_arn: str
        """

        self._source_arn = source_arn

    @property
    def training_job(self):
        """Gets the training_job of this TrialComponentSourceDetail.


        :return: The training_job of this TrialComponentSourceDetail.
        :rtype: TrialComponentSourceDetailTrainingJob
        """
        return self._training_job

    @training_job.setter
    def training_job(self, training_job):
        """Sets the training_job of this TrialComponentSourceDetail.


        :param training_job: The training_job of this TrialComponentSourceDetail.
        :type training_job: TrialComponentSourceDetailTrainingJob
        """

        self._training_job = training_job

    @property
    def processing_job(self):
        """Gets the processing_job of this TrialComponentSourceDetail.


        :return: The processing_job of this TrialComponentSourceDetail.
        :rtype: TrialComponentSourceDetailProcessingJob
        """
        return self._processing_job

    @processing_job.setter
    def processing_job(self, processing_job):
        """Sets the processing_job of this TrialComponentSourceDetail.


        :param processing_job: The processing_job of this TrialComponentSourceDetail.
        :type processing_job: TrialComponentSourceDetailProcessingJob
        """

        self._processing_job = processing_job

    @property
    def transform_job(self):
        """Gets the transform_job of this TrialComponentSourceDetail.


        :return: The transform_job of this TrialComponentSourceDetail.
        :rtype: TrialComponentSourceDetailTransformJob
        """
        return self._transform_job

    @transform_job.setter
    def transform_job(self, transform_job):
        """Sets the transform_job of this TrialComponentSourceDetail.


        :param transform_job: The transform_job of this TrialComponentSourceDetail.
        :type transform_job: TrialComponentSourceDetailTransformJob
        """

        self._transform_job = transform_job
