# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.studio_lifecycle_config_app_type import StudioLifecycleConfigAppType
from openapi_server import util


class CreateStudioLifecycleConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, studio_lifecycle_config_name: str=None, studio_lifecycle_config_content: str=None, studio_lifecycle_config_app_type: StudioLifecycleConfigAppType=None, tags: List=None):
        """CreateStudioLifecycleConfigRequest - a model defined in OpenAPI

        :param studio_lifecycle_config_name: The studio_lifecycle_config_name of this CreateStudioLifecycleConfigRequest.
        :param studio_lifecycle_config_content: The studio_lifecycle_config_content of this CreateStudioLifecycleConfigRequest.
        :param studio_lifecycle_config_app_type: The studio_lifecycle_config_app_type of this CreateStudioLifecycleConfigRequest.
        :param tags: The tags of this CreateStudioLifecycleConfigRequest.
        """
        self.openapi_types = {
            'studio_lifecycle_config_name': str,
            'studio_lifecycle_config_content': str,
            'studio_lifecycle_config_app_type': StudioLifecycleConfigAppType,
            'tags': List
        }

        self.attribute_map = {
            'studio_lifecycle_config_name': 'StudioLifecycleConfigName',
            'studio_lifecycle_config_content': 'StudioLifecycleConfigContent',
            'studio_lifecycle_config_app_type': 'StudioLifecycleConfigAppType',
            'tags': 'Tags'
        }

        self._studio_lifecycle_config_name = studio_lifecycle_config_name
        self._studio_lifecycle_config_content = studio_lifecycle_config_content
        self._studio_lifecycle_config_app_type = studio_lifecycle_config_app_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStudioLifecycleConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStudioLifecycleConfigRequest of this CreateStudioLifecycleConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def studio_lifecycle_config_name(self):
        """Gets the studio_lifecycle_config_name of this CreateStudioLifecycleConfigRequest.


        :return: The studio_lifecycle_config_name of this CreateStudioLifecycleConfigRequest.
        :rtype: str
        """
        return self._studio_lifecycle_config_name

    @studio_lifecycle_config_name.setter
    def studio_lifecycle_config_name(self, studio_lifecycle_config_name):
        """Sets the studio_lifecycle_config_name of this CreateStudioLifecycleConfigRequest.


        :param studio_lifecycle_config_name: The studio_lifecycle_config_name of this CreateStudioLifecycleConfigRequest.
        :type studio_lifecycle_config_name: str
        """
        if studio_lifecycle_config_name is None:
            raise ValueError("Invalid value for `studio_lifecycle_config_name`, must not be `None`")

        self._studio_lifecycle_config_name = studio_lifecycle_config_name

    @property
    def studio_lifecycle_config_content(self):
        """Gets the studio_lifecycle_config_content of this CreateStudioLifecycleConfigRequest.


        :return: The studio_lifecycle_config_content of this CreateStudioLifecycleConfigRequest.
        :rtype: str
        """
        return self._studio_lifecycle_config_content

    @studio_lifecycle_config_content.setter
    def studio_lifecycle_config_content(self, studio_lifecycle_config_content):
        """Sets the studio_lifecycle_config_content of this CreateStudioLifecycleConfigRequest.


        :param studio_lifecycle_config_content: The studio_lifecycle_config_content of this CreateStudioLifecycleConfigRequest.
        :type studio_lifecycle_config_content: str
        """
        if studio_lifecycle_config_content is None:
            raise ValueError("Invalid value for `studio_lifecycle_config_content`, must not be `None`")

        self._studio_lifecycle_config_content = studio_lifecycle_config_content

    @property
    def studio_lifecycle_config_app_type(self):
        """Gets the studio_lifecycle_config_app_type of this CreateStudioLifecycleConfigRequest.


        :return: The studio_lifecycle_config_app_type of this CreateStudioLifecycleConfigRequest.
        :rtype: StudioLifecycleConfigAppType
        """
        return self._studio_lifecycle_config_app_type

    @studio_lifecycle_config_app_type.setter
    def studio_lifecycle_config_app_type(self, studio_lifecycle_config_app_type):
        """Sets the studio_lifecycle_config_app_type of this CreateStudioLifecycleConfigRequest.


        :param studio_lifecycle_config_app_type: The studio_lifecycle_config_app_type of this CreateStudioLifecycleConfigRequest.
        :type studio_lifecycle_config_app_type: StudioLifecycleConfigAppType
        """
        if studio_lifecycle_config_app_type is None:
            raise ValueError("Invalid value for `studio_lifecycle_config_app_type`, must not be `None`")

        self._studio_lifecycle_config_app_type = studio_lifecycle_config_app_type

    @property
    def tags(self):
        """Gets the tags of this CreateStudioLifecycleConfigRequest.


        :return: The tags of this CreateStudioLifecycleConfigRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStudioLifecycleConfigRequest.


        :param tags: The tags of this CreateStudioLifecycleConfigRequest.
        :type tags: List
        """

        self._tags = tags
