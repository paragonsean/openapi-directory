# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_capture_config_summary import DataCaptureConfigSummary
from openapi_server.models.endpoint_status import EndpointStatus
from openapi_server import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_name: str=None, endpoint_arn: str=None, endpoint_config_name: str=None, production_variants: List=None, data_capture_config: DataCaptureConfigSummary=None, endpoint_status: EndpointStatus=None, failure_reason: str=None, creation_time: datetime=None, last_modified_time: datetime=None, monitoring_schedules: List=None, tags: List=None, shadow_production_variants: List=None):
        """Endpoint - a model defined in OpenAPI

        :param endpoint_name: The endpoint_name of this Endpoint.
        :param endpoint_arn: The endpoint_arn of this Endpoint.
        :param endpoint_config_name: The endpoint_config_name of this Endpoint.
        :param production_variants: The production_variants of this Endpoint.
        :param data_capture_config: The data_capture_config of this Endpoint.
        :param endpoint_status: The endpoint_status of this Endpoint.
        :param failure_reason: The failure_reason of this Endpoint.
        :param creation_time: The creation_time of this Endpoint.
        :param last_modified_time: The last_modified_time of this Endpoint.
        :param monitoring_schedules: The monitoring_schedules of this Endpoint.
        :param tags: The tags of this Endpoint.
        :param shadow_production_variants: The shadow_production_variants of this Endpoint.
        """
        self.openapi_types = {
            'endpoint_name': str,
            'endpoint_arn': str,
            'endpoint_config_name': str,
            'production_variants': List,
            'data_capture_config': DataCaptureConfigSummary,
            'endpoint_status': EndpointStatus,
            'failure_reason': str,
            'creation_time': datetime,
            'last_modified_time': datetime,
            'monitoring_schedules': List,
            'tags': List,
            'shadow_production_variants': List
        }

        self.attribute_map = {
            'endpoint_name': 'EndpointName',
            'endpoint_arn': 'EndpointArn',
            'endpoint_config_name': 'EndpointConfigName',
            'production_variants': 'ProductionVariants',
            'data_capture_config': 'DataCaptureConfig',
            'endpoint_status': 'EndpointStatus',
            'failure_reason': 'FailureReason',
            'creation_time': 'CreationTime',
            'last_modified_time': 'LastModifiedTime',
            'monitoring_schedules': 'MonitoringSchedules',
            'tags': 'Tags',
            'shadow_production_variants': 'ShadowProductionVariants'
        }

        self._endpoint_name = endpoint_name
        self._endpoint_arn = endpoint_arn
        self._endpoint_config_name = endpoint_config_name
        self._production_variants = production_variants
        self._data_capture_config = data_capture_config
        self._endpoint_status = endpoint_status
        self._failure_reason = failure_reason
        self._creation_time = creation_time
        self._last_modified_time = last_modified_time
        self._monitoring_schedules = monitoring_schedules
        self._tags = tags
        self._shadow_production_variants = shadow_production_variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this Endpoint.


        :return: The endpoint_name of this Endpoint.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this Endpoint.


        :param endpoint_name: The endpoint_name of this Endpoint.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def endpoint_arn(self):
        """Gets the endpoint_arn of this Endpoint.


        :return: The endpoint_arn of this Endpoint.
        :rtype: str
        """
        return self._endpoint_arn

    @endpoint_arn.setter
    def endpoint_arn(self, endpoint_arn):
        """Sets the endpoint_arn of this Endpoint.


        :param endpoint_arn: The endpoint_arn of this Endpoint.
        :type endpoint_arn: str
        """
        if endpoint_arn is None:
            raise ValueError("Invalid value for `endpoint_arn`, must not be `None`")

        self._endpoint_arn = endpoint_arn

    @property
    def endpoint_config_name(self):
        """Gets the endpoint_config_name of this Endpoint.


        :return: The endpoint_config_name of this Endpoint.
        :rtype: str
        """
        return self._endpoint_config_name

    @endpoint_config_name.setter
    def endpoint_config_name(self, endpoint_config_name):
        """Sets the endpoint_config_name of this Endpoint.


        :param endpoint_config_name: The endpoint_config_name of this Endpoint.
        :type endpoint_config_name: str
        """
        if endpoint_config_name is None:
            raise ValueError("Invalid value for `endpoint_config_name`, must not be `None`")

        self._endpoint_config_name = endpoint_config_name

    @property
    def production_variants(self):
        """Gets the production_variants of this Endpoint.


        :return: The production_variants of this Endpoint.
        :rtype: List
        """
        return self._production_variants

    @production_variants.setter
    def production_variants(self, production_variants):
        """Sets the production_variants of this Endpoint.


        :param production_variants: The production_variants of this Endpoint.
        :type production_variants: List
        """

        self._production_variants = production_variants

    @property
    def data_capture_config(self):
        """Gets the data_capture_config of this Endpoint.


        :return: The data_capture_config of this Endpoint.
        :rtype: DataCaptureConfigSummary
        """
        return self._data_capture_config

    @data_capture_config.setter
    def data_capture_config(self, data_capture_config):
        """Sets the data_capture_config of this Endpoint.


        :param data_capture_config: The data_capture_config of this Endpoint.
        :type data_capture_config: DataCaptureConfigSummary
        """

        self._data_capture_config = data_capture_config

    @property
    def endpoint_status(self):
        """Gets the endpoint_status of this Endpoint.


        :return: The endpoint_status of this Endpoint.
        :rtype: EndpointStatus
        """
        return self._endpoint_status

    @endpoint_status.setter
    def endpoint_status(self, endpoint_status):
        """Sets the endpoint_status of this Endpoint.


        :param endpoint_status: The endpoint_status of this Endpoint.
        :type endpoint_status: EndpointStatus
        """
        if endpoint_status is None:
            raise ValueError("Invalid value for `endpoint_status`, must not be `None`")

        self._endpoint_status = endpoint_status

    @property
    def failure_reason(self):
        """Gets the failure_reason of this Endpoint.


        :return: The failure_reason of this Endpoint.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this Endpoint.


        :param failure_reason: The failure_reason of this Endpoint.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def creation_time(self):
        """Gets the creation_time of this Endpoint.


        :return: The creation_time of this Endpoint.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Endpoint.


        :param creation_time: The creation_time of this Endpoint.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this Endpoint.


        :return: The last_modified_time of this Endpoint.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this Endpoint.


        :param last_modified_time: The last_modified_time of this Endpoint.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def monitoring_schedules(self):
        """Gets the monitoring_schedules of this Endpoint.


        :return: The monitoring_schedules of this Endpoint.
        :rtype: List
        """
        return self._monitoring_schedules

    @monitoring_schedules.setter
    def monitoring_schedules(self, monitoring_schedules):
        """Sets the monitoring_schedules of this Endpoint.


        :param monitoring_schedules: The monitoring_schedules of this Endpoint.
        :type monitoring_schedules: List
        """

        self._monitoring_schedules = monitoring_schedules

    @property
    def tags(self):
        """Gets the tags of this Endpoint.


        :return: The tags of this Endpoint.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Endpoint.


        :param tags: The tags of this Endpoint.
        :type tags: List
        """

        self._tags = tags

    @property
    def shadow_production_variants(self):
        """Gets the shadow_production_variants of this Endpoint.


        :return: The shadow_production_variants of this Endpoint.
        :rtype: List
        """
        return self._shadow_production_variants

    @shadow_production_variants.setter
    def shadow_production_variants(self, shadow_production_variants):
        """Sets the shadow_production_variants of this Endpoint.


        :param shadow_production_variants: The shadow_production_variants of this Endpoint.
        :type shadow_production_variants: List
        """

        self._shadow_production_variants = shadow_production_variants
