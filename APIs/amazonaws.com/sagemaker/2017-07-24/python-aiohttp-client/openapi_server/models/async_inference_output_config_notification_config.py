# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AsyncInferenceOutputConfigNotificationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, success_topic: str=None, error_topic: str=None, include_inference_response_in: List=None):
        """AsyncInferenceOutputConfigNotificationConfig - a model defined in OpenAPI

        :param success_topic: The success_topic of this AsyncInferenceOutputConfigNotificationConfig.
        :param error_topic: The error_topic of this AsyncInferenceOutputConfigNotificationConfig.
        :param include_inference_response_in: The include_inference_response_in of this AsyncInferenceOutputConfigNotificationConfig.
        """
        self.openapi_types = {
            'success_topic': str,
            'error_topic': str,
            'include_inference_response_in': List
        }

        self.attribute_map = {
            'success_topic': 'SuccessTopic',
            'error_topic': 'ErrorTopic',
            'include_inference_response_in': 'IncludeInferenceResponseIn'
        }

        self._success_topic = success_topic
        self._error_topic = error_topic
        self._include_inference_response_in = include_inference_response_in

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsyncInferenceOutputConfigNotificationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsyncInferenceOutputConfig_NotificationConfig of this AsyncInferenceOutputConfigNotificationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def success_topic(self):
        """Gets the success_topic of this AsyncInferenceOutputConfigNotificationConfig.


        :return: The success_topic of this AsyncInferenceOutputConfigNotificationConfig.
        :rtype: str
        """
        return self._success_topic

    @success_topic.setter
    def success_topic(self, success_topic):
        """Sets the success_topic of this AsyncInferenceOutputConfigNotificationConfig.


        :param success_topic: The success_topic of this AsyncInferenceOutputConfigNotificationConfig.
        :type success_topic: str
        """

        self._success_topic = success_topic

    @property
    def error_topic(self):
        """Gets the error_topic of this AsyncInferenceOutputConfigNotificationConfig.


        :return: The error_topic of this AsyncInferenceOutputConfigNotificationConfig.
        :rtype: str
        """
        return self._error_topic

    @error_topic.setter
    def error_topic(self, error_topic):
        """Sets the error_topic of this AsyncInferenceOutputConfigNotificationConfig.


        :param error_topic: The error_topic of this AsyncInferenceOutputConfigNotificationConfig.
        :type error_topic: str
        """

        self._error_topic = error_topic

    @property
    def include_inference_response_in(self):
        """Gets the include_inference_response_in of this AsyncInferenceOutputConfigNotificationConfig.


        :return: The include_inference_response_in of this AsyncInferenceOutputConfigNotificationConfig.
        :rtype: List
        """
        return self._include_inference_response_in

    @include_inference_response_in.setter
    def include_inference_response_in(self, include_inference_response_in):
        """Sets the include_inference_response_in of this AsyncInferenceOutputConfigNotificationConfig.


        :param include_inference_response_in: The include_inference_response_in of this AsyncInferenceOutputConfigNotificationConfig.
        :type include_inference_response_in: List
        """

        self._include_inference_response_in = include_inference_response_in
