# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inference_experiment_stop_desired_state import InferenceExperimentStopDesiredState
from openapi_server import util


class StopInferenceExperimentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, model_variant_actions: Dict=None, desired_model_variants: List=None, desired_state: InferenceExperimentStopDesiredState=None, reason: str=None):
        """StopInferenceExperimentRequest - a model defined in OpenAPI

        :param name: The name of this StopInferenceExperimentRequest.
        :param model_variant_actions: The model_variant_actions of this StopInferenceExperimentRequest.
        :param desired_model_variants: The desired_model_variants of this StopInferenceExperimentRequest.
        :param desired_state: The desired_state of this StopInferenceExperimentRequest.
        :param reason: The reason of this StopInferenceExperimentRequest.
        """
        self.openapi_types = {
            'name': str,
            'model_variant_actions': Dict,
            'desired_model_variants': List,
            'desired_state': InferenceExperimentStopDesiredState,
            'reason': str
        }

        self.attribute_map = {
            'name': 'Name',
            'model_variant_actions': 'ModelVariantActions',
            'desired_model_variants': 'DesiredModelVariants',
            'desired_state': 'DesiredState',
            'reason': 'Reason'
        }

        self._name = name
        self._model_variant_actions = model_variant_actions
        self._desired_model_variants = desired_model_variants
        self._desired_state = desired_state
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopInferenceExperimentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopInferenceExperimentRequest of this StopInferenceExperimentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this StopInferenceExperimentRequest.


        :return: The name of this StopInferenceExperimentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StopInferenceExperimentRequest.


        :param name: The name of this StopInferenceExperimentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def model_variant_actions(self):
        """Gets the model_variant_actions of this StopInferenceExperimentRequest.


        :return: The model_variant_actions of this StopInferenceExperimentRequest.
        :rtype: Dict
        """
        return self._model_variant_actions

    @model_variant_actions.setter
    def model_variant_actions(self, model_variant_actions):
        """Sets the model_variant_actions of this StopInferenceExperimentRequest.


        :param model_variant_actions: The model_variant_actions of this StopInferenceExperimentRequest.
        :type model_variant_actions: Dict
        """
        if model_variant_actions is None:
            raise ValueError("Invalid value for `model_variant_actions`, must not be `None`")

        self._model_variant_actions = model_variant_actions

    @property
    def desired_model_variants(self):
        """Gets the desired_model_variants of this StopInferenceExperimentRequest.


        :return: The desired_model_variants of this StopInferenceExperimentRequest.
        :rtype: List
        """
        return self._desired_model_variants

    @desired_model_variants.setter
    def desired_model_variants(self, desired_model_variants):
        """Sets the desired_model_variants of this StopInferenceExperimentRequest.


        :param desired_model_variants: The desired_model_variants of this StopInferenceExperimentRequest.
        :type desired_model_variants: List
        """

        self._desired_model_variants = desired_model_variants

    @property
    def desired_state(self):
        """Gets the desired_state of this StopInferenceExperimentRequest.


        :return: The desired_state of this StopInferenceExperimentRequest.
        :rtype: InferenceExperimentStopDesiredState
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this StopInferenceExperimentRequest.


        :param desired_state: The desired_state of this StopInferenceExperimentRequest.
        :type desired_state: InferenceExperimentStopDesiredState
        """

        self._desired_state = desired_state

    @property
    def reason(self):
        """Gets the reason of this StopInferenceExperimentRequest.


        :return: The reason of this StopInferenceExperimentRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this StopInferenceExperimentRequest.


        :param reason: The reason of this StopInferenceExperimentRequest.
        :type reason: str
        """

        self._reason = reason
