# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_labeling_job_request_human_task_config import CreateLabelingJobRequestHumanTaskConfig
from openapi_server.models.create_labeling_job_request_input_config import CreateLabelingJobRequestInputConfig
from openapi_server.models.create_labeling_job_request_labeling_job_algorithms_config import CreateLabelingJobRequestLabelingJobAlgorithmsConfig
from openapi_server.models.create_labeling_job_request_output_config import CreateLabelingJobRequestOutputConfig
from openapi_server.models.create_labeling_job_request_stopping_conditions import CreateLabelingJobRequestStoppingConditions
from openapi_server import util


class CreateLabelingJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labeling_job_name: str=None, label_attribute_name: str=None, input_config: CreateLabelingJobRequestInputConfig=None, output_config: CreateLabelingJobRequestOutputConfig=None, role_arn: str=None, label_category_config_s3_uri: str=None, stopping_conditions: CreateLabelingJobRequestStoppingConditions=None, labeling_job_algorithms_config: CreateLabelingJobRequestLabelingJobAlgorithmsConfig=None, human_task_config: CreateLabelingJobRequestHumanTaskConfig=None, tags: List=None):
        """CreateLabelingJobRequest - a model defined in OpenAPI

        :param labeling_job_name: The labeling_job_name of this CreateLabelingJobRequest.
        :param label_attribute_name: The label_attribute_name of this CreateLabelingJobRequest.
        :param input_config: The input_config of this CreateLabelingJobRequest.
        :param output_config: The output_config of this CreateLabelingJobRequest.
        :param role_arn: The role_arn of this CreateLabelingJobRequest.
        :param label_category_config_s3_uri: The label_category_config_s3_uri of this CreateLabelingJobRequest.
        :param stopping_conditions: The stopping_conditions of this CreateLabelingJobRequest.
        :param labeling_job_algorithms_config: The labeling_job_algorithms_config of this CreateLabelingJobRequest.
        :param human_task_config: The human_task_config of this CreateLabelingJobRequest.
        :param tags: The tags of this CreateLabelingJobRequest.
        """
        self.openapi_types = {
            'labeling_job_name': str,
            'label_attribute_name': str,
            'input_config': CreateLabelingJobRequestInputConfig,
            'output_config': CreateLabelingJobRequestOutputConfig,
            'role_arn': str,
            'label_category_config_s3_uri': str,
            'stopping_conditions': CreateLabelingJobRequestStoppingConditions,
            'labeling_job_algorithms_config': CreateLabelingJobRequestLabelingJobAlgorithmsConfig,
            'human_task_config': CreateLabelingJobRequestHumanTaskConfig,
            'tags': List
        }

        self.attribute_map = {
            'labeling_job_name': 'LabelingJobName',
            'label_attribute_name': 'LabelAttributeName',
            'input_config': 'InputConfig',
            'output_config': 'OutputConfig',
            'role_arn': 'RoleArn',
            'label_category_config_s3_uri': 'LabelCategoryConfigS3Uri',
            'stopping_conditions': 'StoppingConditions',
            'labeling_job_algorithms_config': 'LabelingJobAlgorithmsConfig',
            'human_task_config': 'HumanTaskConfig',
            'tags': 'Tags'
        }

        self._labeling_job_name = labeling_job_name
        self._label_attribute_name = label_attribute_name
        self._input_config = input_config
        self._output_config = output_config
        self._role_arn = role_arn
        self._label_category_config_s3_uri = label_category_config_s3_uri
        self._stopping_conditions = stopping_conditions
        self._labeling_job_algorithms_config = labeling_job_algorithms_config
        self._human_task_config = human_task_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLabelingJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLabelingJobRequest of this CreateLabelingJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labeling_job_name(self):
        """Gets the labeling_job_name of this CreateLabelingJobRequest.


        :return: The labeling_job_name of this CreateLabelingJobRequest.
        :rtype: str
        """
        return self._labeling_job_name

    @labeling_job_name.setter
    def labeling_job_name(self, labeling_job_name):
        """Sets the labeling_job_name of this CreateLabelingJobRequest.


        :param labeling_job_name: The labeling_job_name of this CreateLabelingJobRequest.
        :type labeling_job_name: str
        """
        if labeling_job_name is None:
            raise ValueError("Invalid value for `labeling_job_name`, must not be `None`")

        self._labeling_job_name = labeling_job_name

    @property
    def label_attribute_name(self):
        """Gets the label_attribute_name of this CreateLabelingJobRequest.


        :return: The label_attribute_name of this CreateLabelingJobRequest.
        :rtype: str
        """
        return self._label_attribute_name

    @label_attribute_name.setter
    def label_attribute_name(self, label_attribute_name):
        """Sets the label_attribute_name of this CreateLabelingJobRequest.


        :param label_attribute_name: The label_attribute_name of this CreateLabelingJobRequest.
        :type label_attribute_name: str
        """
        if label_attribute_name is None:
            raise ValueError("Invalid value for `label_attribute_name`, must not be `None`")

        self._label_attribute_name = label_attribute_name

    @property
    def input_config(self):
        """Gets the input_config of this CreateLabelingJobRequest.


        :return: The input_config of this CreateLabelingJobRequest.
        :rtype: CreateLabelingJobRequestInputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this CreateLabelingJobRequest.


        :param input_config: The input_config of this CreateLabelingJobRequest.
        :type input_config: CreateLabelingJobRequestInputConfig
        """
        if input_config is None:
            raise ValueError("Invalid value for `input_config`, must not be `None`")

        self._input_config = input_config

    @property
    def output_config(self):
        """Gets the output_config of this CreateLabelingJobRequest.


        :return: The output_config of this CreateLabelingJobRequest.
        :rtype: CreateLabelingJobRequestOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this CreateLabelingJobRequest.


        :param output_config: The output_config of this CreateLabelingJobRequest.
        :type output_config: CreateLabelingJobRequestOutputConfig
        """
        if output_config is None:
            raise ValueError("Invalid value for `output_config`, must not be `None`")

        self._output_config = output_config

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateLabelingJobRequest.


        :return: The role_arn of this CreateLabelingJobRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateLabelingJobRequest.


        :param role_arn: The role_arn of this CreateLabelingJobRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def label_category_config_s3_uri(self):
        """Gets the label_category_config_s3_uri of this CreateLabelingJobRequest.


        :return: The label_category_config_s3_uri of this CreateLabelingJobRequest.
        :rtype: str
        """
        return self._label_category_config_s3_uri

    @label_category_config_s3_uri.setter
    def label_category_config_s3_uri(self, label_category_config_s3_uri):
        """Sets the label_category_config_s3_uri of this CreateLabelingJobRequest.


        :param label_category_config_s3_uri: The label_category_config_s3_uri of this CreateLabelingJobRequest.
        :type label_category_config_s3_uri: str
        """

        self._label_category_config_s3_uri = label_category_config_s3_uri

    @property
    def stopping_conditions(self):
        """Gets the stopping_conditions of this CreateLabelingJobRequest.


        :return: The stopping_conditions of this CreateLabelingJobRequest.
        :rtype: CreateLabelingJobRequestStoppingConditions
        """
        return self._stopping_conditions

    @stopping_conditions.setter
    def stopping_conditions(self, stopping_conditions):
        """Sets the stopping_conditions of this CreateLabelingJobRequest.


        :param stopping_conditions: The stopping_conditions of this CreateLabelingJobRequest.
        :type stopping_conditions: CreateLabelingJobRequestStoppingConditions
        """

        self._stopping_conditions = stopping_conditions

    @property
    def labeling_job_algorithms_config(self):
        """Gets the labeling_job_algorithms_config of this CreateLabelingJobRequest.


        :return: The labeling_job_algorithms_config of this CreateLabelingJobRequest.
        :rtype: CreateLabelingJobRequestLabelingJobAlgorithmsConfig
        """
        return self._labeling_job_algorithms_config

    @labeling_job_algorithms_config.setter
    def labeling_job_algorithms_config(self, labeling_job_algorithms_config):
        """Sets the labeling_job_algorithms_config of this CreateLabelingJobRequest.


        :param labeling_job_algorithms_config: The labeling_job_algorithms_config of this CreateLabelingJobRequest.
        :type labeling_job_algorithms_config: CreateLabelingJobRequestLabelingJobAlgorithmsConfig
        """

        self._labeling_job_algorithms_config = labeling_job_algorithms_config

    @property
    def human_task_config(self):
        """Gets the human_task_config of this CreateLabelingJobRequest.


        :return: The human_task_config of this CreateLabelingJobRequest.
        :rtype: CreateLabelingJobRequestHumanTaskConfig
        """
        return self._human_task_config

    @human_task_config.setter
    def human_task_config(self, human_task_config):
        """Sets the human_task_config of this CreateLabelingJobRequest.


        :param human_task_config: The human_task_config of this CreateLabelingJobRequest.
        :type human_task_config: CreateLabelingJobRequestHumanTaskConfig
        """
        if human_task_config is None:
            raise ValueError("Invalid value for `human_task_config`, must not be `None`")

        self._human_task_config = human_task_config

    @property
    def tags(self):
        """Gets the tags of this CreateLabelingJobRequest.


        :return: The tags of this CreateLabelingJobRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLabelingJobRequest.


        :param tags: The tags of this CreateLabelingJobRequest.
        :type tags: List
        """

        self._tags = tags
