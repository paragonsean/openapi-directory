# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rolling_update_policy_maximum_batch_size import RollingUpdatePolicyMaximumBatchSize
from openapi_server.models.rolling_update_policy_rollback_maximum_batch_size import RollingUpdatePolicyRollbackMaximumBatchSize
from openapi_server import util


class RollingUpdatePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum_batch_size: RollingUpdatePolicyMaximumBatchSize=None, wait_interval_in_seconds: int=None, maximum_execution_timeout_in_seconds: int=None, rollback_maximum_batch_size: RollingUpdatePolicyRollbackMaximumBatchSize=None):
        """RollingUpdatePolicy - a model defined in OpenAPI

        :param maximum_batch_size: The maximum_batch_size of this RollingUpdatePolicy.
        :param wait_interval_in_seconds: The wait_interval_in_seconds of this RollingUpdatePolicy.
        :param maximum_execution_timeout_in_seconds: The maximum_execution_timeout_in_seconds of this RollingUpdatePolicy.
        :param rollback_maximum_batch_size: The rollback_maximum_batch_size of this RollingUpdatePolicy.
        """
        self.openapi_types = {
            'maximum_batch_size': RollingUpdatePolicyMaximumBatchSize,
            'wait_interval_in_seconds': int,
            'maximum_execution_timeout_in_seconds': int,
            'rollback_maximum_batch_size': RollingUpdatePolicyRollbackMaximumBatchSize
        }

        self.attribute_map = {
            'maximum_batch_size': 'MaximumBatchSize',
            'wait_interval_in_seconds': 'WaitIntervalInSeconds',
            'maximum_execution_timeout_in_seconds': 'MaximumExecutionTimeoutInSeconds',
            'rollback_maximum_batch_size': 'RollbackMaximumBatchSize'
        }

        self._maximum_batch_size = maximum_batch_size
        self._wait_interval_in_seconds = wait_interval_in_seconds
        self._maximum_execution_timeout_in_seconds = maximum_execution_timeout_in_seconds
        self._rollback_maximum_batch_size = rollback_maximum_batch_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RollingUpdatePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RollingUpdatePolicy of this RollingUpdatePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum_batch_size(self):
        """Gets the maximum_batch_size of this RollingUpdatePolicy.


        :return: The maximum_batch_size of this RollingUpdatePolicy.
        :rtype: RollingUpdatePolicyMaximumBatchSize
        """
        return self._maximum_batch_size

    @maximum_batch_size.setter
    def maximum_batch_size(self, maximum_batch_size):
        """Sets the maximum_batch_size of this RollingUpdatePolicy.


        :param maximum_batch_size: The maximum_batch_size of this RollingUpdatePolicy.
        :type maximum_batch_size: RollingUpdatePolicyMaximumBatchSize
        """
        if maximum_batch_size is None:
            raise ValueError("Invalid value for `maximum_batch_size`, must not be `None`")

        self._maximum_batch_size = maximum_batch_size

    @property
    def wait_interval_in_seconds(self):
        """Gets the wait_interval_in_seconds of this RollingUpdatePolicy.


        :return: The wait_interval_in_seconds of this RollingUpdatePolicy.
        :rtype: int
        """
        return self._wait_interval_in_seconds

    @wait_interval_in_seconds.setter
    def wait_interval_in_seconds(self, wait_interval_in_seconds):
        """Sets the wait_interval_in_seconds of this RollingUpdatePolicy.


        :param wait_interval_in_seconds: The wait_interval_in_seconds of this RollingUpdatePolicy.
        :type wait_interval_in_seconds: int
        """
        if wait_interval_in_seconds is None:
            raise ValueError("Invalid value for `wait_interval_in_seconds`, must not be `None`")

        self._wait_interval_in_seconds = wait_interval_in_seconds

    @property
    def maximum_execution_timeout_in_seconds(self):
        """Gets the maximum_execution_timeout_in_seconds of this RollingUpdatePolicy.


        :return: The maximum_execution_timeout_in_seconds of this RollingUpdatePolicy.
        :rtype: int
        """
        return self._maximum_execution_timeout_in_seconds

    @maximum_execution_timeout_in_seconds.setter
    def maximum_execution_timeout_in_seconds(self, maximum_execution_timeout_in_seconds):
        """Sets the maximum_execution_timeout_in_seconds of this RollingUpdatePolicy.


        :param maximum_execution_timeout_in_seconds: The maximum_execution_timeout_in_seconds of this RollingUpdatePolicy.
        :type maximum_execution_timeout_in_seconds: int
        """

        self._maximum_execution_timeout_in_seconds = maximum_execution_timeout_in_seconds

    @property
    def rollback_maximum_batch_size(self):
        """Gets the rollback_maximum_batch_size of this RollingUpdatePolicy.


        :return: The rollback_maximum_batch_size of this RollingUpdatePolicy.
        :rtype: RollingUpdatePolicyRollbackMaximumBatchSize
        """
        return self._rollback_maximum_batch_size

    @rollback_maximum_batch_size.setter
    def rollback_maximum_batch_size(self, rollback_maximum_batch_size):
        """Sets the rollback_maximum_batch_size of this RollingUpdatePolicy.


        :param rollback_maximum_batch_size: The rollback_maximum_batch_size of this RollingUpdatePolicy.
        :type rollback_maximum_batch_size: RollingUpdatePolicyRollbackMaximumBatchSize
        """

        self._rollback_maximum_batch_size = rollback_maximum_batch_size
