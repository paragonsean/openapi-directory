# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_compilation_job_request_input_config import CreateCompilationJobRequestInputConfig
from openapi_server.models.create_compilation_job_request_output_config import CreateCompilationJobRequestOutputConfig
from openapi_server.models.create_compilation_job_request_stopping_condition import CreateCompilationJobRequestStoppingCondition
from openapi_server.models.create_compilation_job_request_vpc_config import CreateCompilationJobRequestVpcConfig
from openapi_server import util


class CreateCompilationJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compilation_job_name: str=None, role_arn: str=None, model_package_version_arn: str=None, input_config: CreateCompilationJobRequestInputConfig=None, output_config: CreateCompilationJobRequestOutputConfig=None, vpc_config: CreateCompilationJobRequestVpcConfig=None, stopping_condition: CreateCompilationJobRequestStoppingCondition=None, tags: List=None):
        """CreateCompilationJobRequest - a model defined in OpenAPI

        :param compilation_job_name: The compilation_job_name of this CreateCompilationJobRequest.
        :param role_arn: The role_arn of this CreateCompilationJobRequest.
        :param model_package_version_arn: The model_package_version_arn of this CreateCompilationJobRequest.
        :param input_config: The input_config of this CreateCompilationJobRequest.
        :param output_config: The output_config of this CreateCompilationJobRequest.
        :param vpc_config: The vpc_config of this CreateCompilationJobRequest.
        :param stopping_condition: The stopping_condition of this CreateCompilationJobRequest.
        :param tags: The tags of this CreateCompilationJobRequest.
        """
        self.openapi_types = {
            'compilation_job_name': str,
            'role_arn': str,
            'model_package_version_arn': str,
            'input_config': CreateCompilationJobRequestInputConfig,
            'output_config': CreateCompilationJobRequestOutputConfig,
            'vpc_config': CreateCompilationJobRequestVpcConfig,
            'stopping_condition': CreateCompilationJobRequestStoppingCondition,
            'tags': List
        }

        self.attribute_map = {
            'compilation_job_name': 'CompilationJobName',
            'role_arn': 'RoleArn',
            'model_package_version_arn': 'ModelPackageVersionArn',
            'input_config': 'InputConfig',
            'output_config': 'OutputConfig',
            'vpc_config': 'VpcConfig',
            'stopping_condition': 'StoppingCondition',
            'tags': 'Tags'
        }

        self._compilation_job_name = compilation_job_name
        self._role_arn = role_arn
        self._model_package_version_arn = model_package_version_arn
        self._input_config = input_config
        self._output_config = output_config
        self._vpc_config = vpc_config
        self._stopping_condition = stopping_condition
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCompilationJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCompilationJobRequest of this CreateCompilationJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compilation_job_name(self):
        """Gets the compilation_job_name of this CreateCompilationJobRequest.


        :return: The compilation_job_name of this CreateCompilationJobRequest.
        :rtype: str
        """
        return self._compilation_job_name

    @compilation_job_name.setter
    def compilation_job_name(self, compilation_job_name):
        """Sets the compilation_job_name of this CreateCompilationJobRequest.


        :param compilation_job_name: The compilation_job_name of this CreateCompilationJobRequest.
        :type compilation_job_name: str
        """
        if compilation_job_name is None:
            raise ValueError("Invalid value for `compilation_job_name`, must not be `None`")

        self._compilation_job_name = compilation_job_name

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateCompilationJobRequest.


        :return: The role_arn of this CreateCompilationJobRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateCompilationJobRequest.


        :param role_arn: The role_arn of this CreateCompilationJobRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def model_package_version_arn(self):
        """Gets the model_package_version_arn of this CreateCompilationJobRequest.


        :return: The model_package_version_arn of this CreateCompilationJobRequest.
        :rtype: str
        """
        return self._model_package_version_arn

    @model_package_version_arn.setter
    def model_package_version_arn(self, model_package_version_arn):
        """Sets the model_package_version_arn of this CreateCompilationJobRequest.


        :param model_package_version_arn: The model_package_version_arn of this CreateCompilationJobRequest.
        :type model_package_version_arn: str
        """

        self._model_package_version_arn = model_package_version_arn

    @property
    def input_config(self):
        """Gets the input_config of this CreateCompilationJobRequest.


        :return: The input_config of this CreateCompilationJobRequest.
        :rtype: CreateCompilationJobRequestInputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this CreateCompilationJobRequest.


        :param input_config: The input_config of this CreateCompilationJobRequest.
        :type input_config: CreateCompilationJobRequestInputConfig
        """

        self._input_config = input_config

    @property
    def output_config(self):
        """Gets the output_config of this CreateCompilationJobRequest.


        :return: The output_config of this CreateCompilationJobRequest.
        :rtype: CreateCompilationJobRequestOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this CreateCompilationJobRequest.


        :param output_config: The output_config of this CreateCompilationJobRequest.
        :type output_config: CreateCompilationJobRequestOutputConfig
        """
        if output_config is None:
            raise ValueError("Invalid value for `output_config`, must not be `None`")

        self._output_config = output_config

    @property
    def vpc_config(self):
        """Gets the vpc_config of this CreateCompilationJobRequest.


        :return: The vpc_config of this CreateCompilationJobRequest.
        :rtype: CreateCompilationJobRequestVpcConfig
        """
        return self._vpc_config

    @vpc_config.setter
    def vpc_config(self, vpc_config):
        """Sets the vpc_config of this CreateCompilationJobRequest.


        :param vpc_config: The vpc_config of this CreateCompilationJobRequest.
        :type vpc_config: CreateCompilationJobRequestVpcConfig
        """

        self._vpc_config = vpc_config

    @property
    def stopping_condition(self):
        """Gets the stopping_condition of this CreateCompilationJobRequest.


        :return: The stopping_condition of this CreateCompilationJobRequest.
        :rtype: CreateCompilationJobRequestStoppingCondition
        """
        return self._stopping_condition

    @stopping_condition.setter
    def stopping_condition(self, stopping_condition):
        """Sets the stopping_condition of this CreateCompilationJobRequest.


        :param stopping_condition: The stopping_condition of this CreateCompilationJobRequest.
        :type stopping_condition: CreateCompilationJobRequestStoppingCondition
        """
        if stopping_condition is None:
            raise ValueError("Invalid value for `stopping_condition`, must not be `None`")

        self._stopping_condition = stopping_condition

    @property
    def tags(self):
        """Gets the tags of this CreateCompilationJobRequest.


        :return: The tags of this CreateCompilationJobRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCompilationJobRequest.


        :param tags: The tags of this CreateCompilationJobRequest.
        :type tags: List
        """

        self._tags = tags
