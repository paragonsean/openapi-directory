# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoMLAlgorithmConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_ml_algorithms: List=None):
        """AutoMLAlgorithmConfig - a model defined in OpenAPI

        :param auto_ml_algorithms: The auto_ml_algorithms of this AutoMLAlgorithmConfig.
        """
        self.openapi_types = {
            'auto_ml_algorithms': List
        }

        self.attribute_map = {
            'auto_ml_algorithms': 'AutoMLAlgorithms'
        }

        self._auto_ml_algorithms = auto_ml_algorithms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoMLAlgorithmConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoMLAlgorithmConfig of this AutoMLAlgorithmConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_ml_algorithms(self):
        """Gets the auto_ml_algorithms of this AutoMLAlgorithmConfig.


        :return: The auto_ml_algorithms of this AutoMLAlgorithmConfig.
        :rtype: List
        """
        return self._auto_ml_algorithms

    @auto_ml_algorithms.setter
    def auto_ml_algorithms(self, auto_ml_algorithms):
        """Sets the auto_ml_algorithms of this AutoMLAlgorithmConfig.


        :param auto_ml_algorithms: The auto_ml_algorithms of this AutoMLAlgorithmConfig.
        :type auto_ml_algorithms: List
        """
        if auto_ml_algorithms is None:
            raise ValueError("Invalid value for `auto_ml_algorithms`, must not be `None`")

        self._auto_ml_algorithms = auto_ml_algorithms
