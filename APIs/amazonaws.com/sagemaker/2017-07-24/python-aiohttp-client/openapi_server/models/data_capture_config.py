# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_capture_config_capture_content_type_header import DataCaptureConfigCaptureContentTypeHeader
from openapi_server import util


class DataCaptureConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_capture: bool=None, initial_sampling_percentage: int=None, destination_s3_uri: str=None, kms_key_id: str=None, capture_options: List=None, capture_content_type_header: DataCaptureConfigCaptureContentTypeHeader=None):
        """DataCaptureConfig - a model defined in OpenAPI

        :param enable_capture: The enable_capture of this DataCaptureConfig.
        :param initial_sampling_percentage: The initial_sampling_percentage of this DataCaptureConfig.
        :param destination_s3_uri: The destination_s3_uri of this DataCaptureConfig.
        :param kms_key_id: The kms_key_id of this DataCaptureConfig.
        :param capture_options: The capture_options of this DataCaptureConfig.
        :param capture_content_type_header: The capture_content_type_header of this DataCaptureConfig.
        """
        self.openapi_types = {
            'enable_capture': bool,
            'initial_sampling_percentage': int,
            'destination_s3_uri': str,
            'kms_key_id': str,
            'capture_options': List,
            'capture_content_type_header': DataCaptureConfigCaptureContentTypeHeader
        }

        self.attribute_map = {
            'enable_capture': 'EnableCapture',
            'initial_sampling_percentage': 'InitialSamplingPercentage',
            'destination_s3_uri': 'DestinationS3Uri',
            'kms_key_id': 'KmsKeyId',
            'capture_options': 'CaptureOptions',
            'capture_content_type_header': 'CaptureContentTypeHeader'
        }

        self._enable_capture = enable_capture
        self._initial_sampling_percentage = initial_sampling_percentage
        self._destination_s3_uri = destination_s3_uri
        self._kms_key_id = kms_key_id
        self._capture_options = capture_options
        self._capture_content_type_header = capture_content_type_header

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataCaptureConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataCaptureConfig of this DataCaptureConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_capture(self):
        """Gets the enable_capture of this DataCaptureConfig.


        :return: The enable_capture of this DataCaptureConfig.
        :rtype: bool
        """
        return self._enable_capture

    @enable_capture.setter
    def enable_capture(self, enable_capture):
        """Sets the enable_capture of this DataCaptureConfig.


        :param enable_capture: The enable_capture of this DataCaptureConfig.
        :type enable_capture: bool
        """

        self._enable_capture = enable_capture

    @property
    def initial_sampling_percentage(self):
        """Gets the initial_sampling_percentage of this DataCaptureConfig.


        :return: The initial_sampling_percentage of this DataCaptureConfig.
        :rtype: int
        """
        return self._initial_sampling_percentage

    @initial_sampling_percentage.setter
    def initial_sampling_percentage(self, initial_sampling_percentage):
        """Sets the initial_sampling_percentage of this DataCaptureConfig.


        :param initial_sampling_percentage: The initial_sampling_percentage of this DataCaptureConfig.
        :type initial_sampling_percentage: int
        """
        if initial_sampling_percentage is None:
            raise ValueError("Invalid value for `initial_sampling_percentage`, must not be `None`")

        self._initial_sampling_percentage = initial_sampling_percentage

    @property
    def destination_s3_uri(self):
        """Gets the destination_s3_uri of this DataCaptureConfig.


        :return: The destination_s3_uri of this DataCaptureConfig.
        :rtype: str
        """
        return self._destination_s3_uri

    @destination_s3_uri.setter
    def destination_s3_uri(self, destination_s3_uri):
        """Sets the destination_s3_uri of this DataCaptureConfig.


        :param destination_s3_uri: The destination_s3_uri of this DataCaptureConfig.
        :type destination_s3_uri: str
        """
        if destination_s3_uri is None:
            raise ValueError("Invalid value for `destination_s3_uri`, must not be `None`")

        self._destination_s3_uri = destination_s3_uri

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this DataCaptureConfig.


        :return: The kms_key_id of this DataCaptureConfig.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this DataCaptureConfig.


        :param kms_key_id: The kms_key_id of this DataCaptureConfig.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def capture_options(self):
        """Gets the capture_options of this DataCaptureConfig.


        :return: The capture_options of this DataCaptureConfig.
        :rtype: List
        """
        return self._capture_options

    @capture_options.setter
    def capture_options(self, capture_options):
        """Sets the capture_options of this DataCaptureConfig.


        :param capture_options: The capture_options of this DataCaptureConfig.
        :type capture_options: List
        """
        if capture_options is None:
            raise ValueError("Invalid value for `capture_options`, must not be `None`")

        self._capture_options = capture_options

    @property
    def capture_content_type_header(self):
        """Gets the capture_content_type_header of this DataCaptureConfig.


        :return: The capture_content_type_header of this DataCaptureConfig.
        :rtype: DataCaptureConfigCaptureContentTypeHeader
        """
        return self._capture_content_type_header

    @capture_content_type_header.setter
    def capture_content_type_header(self, capture_content_type_header):
        """Sets the capture_content_type_header of this DataCaptureConfig.


        :param capture_content_type_header: The capture_content_type_header of this DataCaptureConfig.
        :type capture_content_type_header: DataCaptureConfigCaptureContentTypeHeader
        """

        self._capture_content_type_header = capture_content_type_header
