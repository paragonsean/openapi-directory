# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.training_input_mode import TrainingInputMode
from openapi_server.models.training_job_definition_output_data_config import TrainingJobDefinitionOutputDataConfig
from openapi_server.models.training_job_definition_resource_config import TrainingJobDefinitionResourceConfig
from openapi_server.models.training_job_definition_stopping_condition import TrainingJobDefinitionStoppingCondition
from openapi_server import util


class AlgorithmValidationProfileTrainingJobDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, training_input_mode: TrainingInputMode=None, hyper_parameters: Dict=None, input_data_config: List=None, output_data_config: TrainingJobDefinitionOutputDataConfig=None, resource_config: TrainingJobDefinitionResourceConfig=None, stopping_condition: TrainingJobDefinitionStoppingCondition=None):
        """AlgorithmValidationProfileTrainingJobDefinition - a model defined in OpenAPI

        :param training_input_mode: The training_input_mode of this AlgorithmValidationProfileTrainingJobDefinition.
        :param hyper_parameters: The hyper_parameters of this AlgorithmValidationProfileTrainingJobDefinition.
        :param input_data_config: The input_data_config of this AlgorithmValidationProfileTrainingJobDefinition.
        :param output_data_config: The output_data_config of this AlgorithmValidationProfileTrainingJobDefinition.
        :param resource_config: The resource_config of this AlgorithmValidationProfileTrainingJobDefinition.
        :param stopping_condition: The stopping_condition of this AlgorithmValidationProfileTrainingJobDefinition.
        """
        self.openapi_types = {
            'training_input_mode': TrainingInputMode,
            'hyper_parameters': Dict,
            'input_data_config': List,
            'output_data_config': TrainingJobDefinitionOutputDataConfig,
            'resource_config': TrainingJobDefinitionResourceConfig,
            'stopping_condition': TrainingJobDefinitionStoppingCondition
        }

        self.attribute_map = {
            'training_input_mode': 'TrainingInputMode',
            'hyper_parameters': 'HyperParameters',
            'input_data_config': 'InputDataConfig',
            'output_data_config': 'OutputDataConfig',
            'resource_config': 'ResourceConfig',
            'stopping_condition': 'StoppingCondition'
        }

        self._training_input_mode = training_input_mode
        self._hyper_parameters = hyper_parameters
        self._input_data_config = input_data_config
        self._output_data_config = output_data_config
        self._resource_config = resource_config
        self._stopping_condition = stopping_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlgorithmValidationProfileTrainingJobDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlgorithmValidationProfile_TrainingJobDefinition of this AlgorithmValidationProfileTrainingJobDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def training_input_mode(self):
        """Gets the training_input_mode of this AlgorithmValidationProfileTrainingJobDefinition.


        :return: The training_input_mode of this AlgorithmValidationProfileTrainingJobDefinition.
        :rtype: TrainingInputMode
        """
        return self._training_input_mode

    @training_input_mode.setter
    def training_input_mode(self, training_input_mode):
        """Sets the training_input_mode of this AlgorithmValidationProfileTrainingJobDefinition.


        :param training_input_mode: The training_input_mode of this AlgorithmValidationProfileTrainingJobDefinition.
        :type training_input_mode: TrainingInputMode
        """
        if training_input_mode is None:
            raise ValueError("Invalid value for `training_input_mode`, must not be `None`")

        self._training_input_mode = training_input_mode

    @property
    def hyper_parameters(self):
        """Gets the hyper_parameters of this AlgorithmValidationProfileTrainingJobDefinition.


        :return: The hyper_parameters of this AlgorithmValidationProfileTrainingJobDefinition.
        :rtype: Dict
        """
        return self._hyper_parameters

    @hyper_parameters.setter
    def hyper_parameters(self, hyper_parameters):
        """Sets the hyper_parameters of this AlgorithmValidationProfileTrainingJobDefinition.


        :param hyper_parameters: The hyper_parameters of this AlgorithmValidationProfileTrainingJobDefinition.
        :type hyper_parameters: Dict
        """

        self._hyper_parameters = hyper_parameters

    @property
    def input_data_config(self):
        """Gets the input_data_config of this AlgorithmValidationProfileTrainingJobDefinition.


        :return: The input_data_config of this AlgorithmValidationProfileTrainingJobDefinition.
        :rtype: List
        """
        return self._input_data_config

    @input_data_config.setter
    def input_data_config(self, input_data_config):
        """Sets the input_data_config of this AlgorithmValidationProfileTrainingJobDefinition.


        :param input_data_config: The input_data_config of this AlgorithmValidationProfileTrainingJobDefinition.
        :type input_data_config: List
        """
        if input_data_config is None:
            raise ValueError("Invalid value for `input_data_config`, must not be `None`")

        self._input_data_config = input_data_config

    @property
    def output_data_config(self):
        """Gets the output_data_config of this AlgorithmValidationProfileTrainingJobDefinition.


        :return: The output_data_config of this AlgorithmValidationProfileTrainingJobDefinition.
        :rtype: TrainingJobDefinitionOutputDataConfig
        """
        return self._output_data_config

    @output_data_config.setter
    def output_data_config(self, output_data_config):
        """Sets the output_data_config of this AlgorithmValidationProfileTrainingJobDefinition.


        :param output_data_config: The output_data_config of this AlgorithmValidationProfileTrainingJobDefinition.
        :type output_data_config: TrainingJobDefinitionOutputDataConfig
        """
        if output_data_config is None:
            raise ValueError("Invalid value for `output_data_config`, must not be `None`")

        self._output_data_config = output_data_config

    @property
    def resource_config(self):
        """Gets the resource_config of this AlgorithmValidationProfileTrainingJobDefinition.


        :return: The resource_config of this AlgorithmValidationProfileTrainingJobDefinition.
        :rtype: TrainingJobDefinitionResourceConfig
        """
        return self._resource_config

    @resource_config.setter
    def resource_config(self, resource_config):
        """Sets the resource_config of this AlgorithmValidationProfileTrainingJobDefinition.


        :param resource_config: The resource_config of this AlgorithmValidationProfileTrainingJobDefinition.
        :type resource_config: TrainingJobDefinitionResourceConfig
        """
        if resource_config is None:
            raise ValueError("Invalid value for `resource_config`, must not be `None`")

        self._resource_config = resource_config

    @property
    def stopping_condition(self):
        """Gets the stopping_condition of this AlgorithmValidationProfileTrainingJobDefinition.


        :return: The stopping_condition of this AlgorithmValidationProfileTrainingJobDefinition.
        :rtype: TrainingJobDefinitionStoppingCondition
        """
        return self._stopping_condition

    @stopping_condition.setter
    def stopping_condition(self, stopping_condition):
        """Sets the stopping_condition of this AlgorithmValidationProfileTrainingJobDefinition.


        :param stopping_condition: The stopping_condition of this AlgorithmValidationProfileTrainingJobDefinition.
        :type stopping_condition: TrainingJobDefinitionStoppingCondition
        """
        if stopping_condition is None:
            raise ValueError("Invalid value for `stopping_condition`, must not be `None`")

        self._stopping_condition = stopping_condition
