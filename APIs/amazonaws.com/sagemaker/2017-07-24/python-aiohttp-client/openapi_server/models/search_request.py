# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cross_account_filter_option import CrossAccountFilterOption
from openapi_server.models.resource_type import ResourceType
from openapi_server.models.search_request_search_expression import SearchRequestSearchExpression
from openapi_server.models.search_sort_order import SearchSortOrder
from openapi_server import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource: ResourceType=None, search_expression: SearchRequestSearchExpression=None, sort_by: str=None, sort_order: SearchSortOrder=None, next_token: str=None, max_results: int=None, cross_account_filter_option: CrossAccountFilterOption=None):
        """SearchRequest - a model defined in OpenAPI

        :param resource: The resource of this SearchRequest.
        :param search_expression: The search_expression of this SearchRequest.
        :param sort_by: The sort_by of this SearchRequest.
        :param sort_order: The sort_order of this SearchRequest.
        :param next_token: The next_token of this SearchRequest.
        :param max_results: The max_results of this SearchRequest.
        :param cross_account_filter_option: The cross_account_filter_option of this SearchRequest.
        """
        self.openapi_types = {
            'resource': ResourceType,
            'search_expression': SearchRequestSearchExpression,
            'sort_by': str,
            'sort_order': SearchSortOrder,
            'next_token': str,
            'max_results': int,
            'cross_account_filter_option': CrossAccountFilterOption
        }

        self.attribute_map = {
            'resource': 'Resource',
            'search_expression': 'SearchExpression',
            'sort_by': 'SortBy',
            'sort_order': 'SortOrder',
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'cross_account_filter_option': 'CrossAccountFilterOption'
        }

        self._resource = resource
        self._search_expression = search_expression
        self._sort_by = sort_by
        self._sort_order = sort_order
        self._next_token = next_token
        self._max_results = max_results
        self._cross_account_filter_option = cross_account_filter_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRequest of this SearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource(self):
        """Gets the resource of this SearchRequest.


        :return: The resource of this SearchRequest.
        :rtype: ResourceType
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this SearchRequest.


        :param resource: The resource of this SearchRequest.
        :type resource: ResourceType
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def search_expression(self):
        """Gets the search_expression of this SearchRequest.


        :return: The search_expression of this SearchRequest.
        :rtype: SearchRequestSearchExpression
        """
        return self._search_expression

    @search_expression.setter
    def search_expression(self, search_expression):
        """Sets the search_expression of this SearchRequest.


        :param search_expression: The search_expression of this SearchRequest.
        :type search_expression: SearchRequestSearchExpression
        """

        self._search_expression = search_expression

    @property
    def sort_by(self):
        """Gets the sort_by of this SearchRequest.


        :return: The sort_by of this SearchRequest.
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this SearchRequest.


        :param sort_by: The sort_by of this SearchRequest.
        :type sort_by: str
        """

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this SearchRequest.


        :return: The sort_order of this SearchRequest.
        :rtype: SearchSortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SearchRequest.


        :param sort_order: The sort_order of this SearchRequest.
        :type sort_order: SearchSortOrder
        """

        self._sort_order = sort_order

    @property
    def next_token(self):
        """Gets the next_token of this SearchRequest.


        :return: The next_token of this SearchRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchRequest.


        :param next_token: The next_token of this SearchRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this SearchRequest.


        :return: The max_results of this SearchRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchRequest.


        :param max_results: The max_results of this SearchRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def cross_account_filter_option(self):
        """Gets the cross_account_filter_option of this SearchRequest.


        :return: The cross_account_filter_option of this SearchRequest.
        :rtype: CrossAccountFilterOption
        """
        return self._cross_account_filter_option

    @cross_account_filter_option.setter
    def cross_account_filter_option(self, cross_account_filter_option):
        """Sets the cross_account_filter_option of this SearchRequest.


        :param cross_account_filter_option: The cross_account_filter_option of this SearchRequest.
        :type cross_account_filter_option: CrossAccountFilterOption
        """

        self._cross_account_filter_option = cross_account_filter_option
