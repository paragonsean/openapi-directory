# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inference_recommendations_job_step_inference_benchmark import InferenceRecommendationsJobStepInferenceBenchmark
from openapi_server.models.recommendation_job_status import RecommendationJobStatus
from openapi_server.models.recommendation_step_type import RecommendationStepType
from openapi_server import util


class InferenceRecommendationsJobStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, step_type: RecommendationStepType=None, job_name: str=None, status: RecommendationJobStatus=None, inference_benchmark: InferenceRecommendationsJobStepInferenceBenchmark=None):
        """InferenceRecommendationsJobStep - a model defined in OpenAPI

        :param step_type: The step_type of this InferenceRecommendationsJobStep.
        :param job_name: The job_name of this InferenceRecommendationsJobStep.
        :param status: The status of this InferenceRecommendationsJobStep.
        :param inference_benchmark: The inference_benchmark of this InferenceRecommendationsJobStep.
        """
        self.openapi_types = {
            'step_type': RecommendationStepType,
            'job_name': str,
            'status': RecommendationJobStatus,
            'inference_benchmark': InferenceRecommendationsJobStepInferenceBenchmark
        }

        self.attribute_map = {
            'step_type': 'StepType',
            'job_name': 'JobName',
            'status': 'Status',
            'inference_benchmark': 'InferenceBenchmark'
        }

        self._step_type = step_type
        self._job_name = job_name
        self._status = status
        self._inference_benchmark = inference_benchmark

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InferenceRecommendationsJobStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InferenceRecommendationsJobStep of this InferenceRecommendationsJobStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def step_type(self):
        """Gets the step_type of this InferenceRecommendationsJobStep.


        :return: The step_type of this InferenceRecommendationsJobStep.
        :rtype: RecommendationStepType
        """
        return self._step_type

    @step_type.setter
    def step_type(self, step_type):
        """Sets the step_type of this InferenceRecommendationsJobStep.


        :param step_type: The step_type of this InferenceRecommendationsJobStep.
        :type step_type: RecommendationStepType
        """
        if step_type is None:
            raise ValueError("Invalid value for `step_type`, must not be `None`")

        self._step_type = step_type

    @property
    def job_name(self):
        """Gets the job_name of this InferenceRecommendationsJobStep.


        :return: The job_name of this InferenceRecommendationsJobStep.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this InferenceRecommendationsJobStep.


        :param job_name: The job_name of this InferenceRecommendationsJobStep.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")

        self._job_name = job_name

    @property
    def status(self):
        """Gets the status of this InferenceRecommendationsJobStep.


        :return: The status of this InferenceRecommendationsJobStep.
        :rtype: RecommendationJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InferenceRecommendationsJobStep.


        :param status: The status of this InferenceRecommendationsJobStep.
        :type status: RecommendationJobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def inference_benchmark(self):
        """Gets the inference_benchmark of this InferenceRecommendationsJobStep.


        :return: The inference_benchmark of this InferenceRecommendationsJobStep.
        :rtype: InferenceRecommendationsJobStepInferenceBenchmark
        """
        return self._inference_benchmark

    @inference_benchmark.setter
    def inference_benchmark(self, inference_benchmark):
        """Sets the inference_benchmark of this InferenceRecommendationsJobStep.


        :param inference_benchmark: The inference_benchmark of this InferenceRecommendationsJobStep.
        :type inference_benchmark: InferenceRecommendationsJobStepInferenceBenchmark
        """

        self._inference_benchmark = inference_benchmark
