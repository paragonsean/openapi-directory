# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateEdgeDeploymentPlanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edge_deployment_plan_name: str=None, model_configs: List=None, device_fleet_name: str=None, stages: List=None, tags: List=None):
        """CreateEdgeDeploymentPlanRequest - a model defined in OpenAPI

        :param edge_deployment_plan_name: The edge_deployment_plan_name of this CreateEdgeDeploymentPlanRequest.
        :param model_configs: The model_configs of this CreateEdgeDeploymentPlanRequest.
        :param device_fleet_name: The device_fleet_name of this CreateEdgeDeploymentPlanRequest.
        :param stages: The stages of this CreateEdgeDeploymentPlanRequest.
        :param tags: The tags of this CreateEdgeDeploymentPlanRequest.
        """
        self.openapi_types = {
            'edge_deployment_plan_name': str,
            'model_configs': List,
            'device_fleet_name': str,
            'stages': List,
            'tags': List
        }

        self.attribute_map = {
            'edge_deployment_plan_name': 'EdgeDeploymentPlanName',
            'model_configs': 'ModelConfigs',
            'device_fleet_name': 'DeviceFleetName',
            'stages': 'Stages',
            'tags': 'Tags'
        }

        self._edge_deployment_plan_name = edge_deployment_plan_name
        self._model_configs = model_configs
        self._device_fleet_name = device_fleet_name
        self._stages = stages
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEdgeDeploymentPlanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEdgeDeploymentPlanRequest of this CreateEdgeDeploymentPlanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edge_deployment_plan_name(self):
        """Gets the edge_deployment_plan_name of this CreateEdgeDeploymentPlanRequest.


        :return: The edge_deployment_plan_name of this CreateEdgeDeploymentPlanRequest.
        :rtype: str
        """
        return self._edge_deployment_plan_name

    @edge_deployment_plan_name.setter
    def edge_deployment_plan_name(self, edge_deployment_plan_name):
        """Sets the edge_deployment_plan_name of this CreateEdgeDeploymentPlanRequest.


        :param edge_deployment_plan_name: The edge_deployment_plan_name of this CreateEdgeDeploymentPlanRequest.
        :type edge_deployment_plan_name: str
        """
        if edge_deployment_plan_name is None:
            raise ValueError("Invalid value for `edge_deployment_plan_name`, must not be `None`")

        self._edge_deployment_plan_name = edge_deployment_plan_name

    @property
    def model_configs(self):
        """Gets the model_configs of this CreateEdgeDeploymentPlanRequest.


        :return: The model_configs of this CreateEdgeDeploymentPlanRequest.
        :rtype: List
        """
        return self._model_configs

    @model_configs.setter
    def model_configs(self, model_configs):
        """Sets the model_configs of this CreateEdgeDeploymentPlanRequest.


        :param model_configs: The model_configs of this CreateEdgeDeploymentPlanRequest.
        :type model_configs: List
        """
        if model_configs is None:
            raise ValueError("Invalid value for `model_configs`, must not be `None`")

        self._model_configs = model_configs

    @property
    def device_fleet_name(self):
        """Gets the device_fleet_name of this CreateEdgeDeploymentPlanRequest.


        :return: The device_fleet_name of this CreateEdgeDeploymentPlanRequest.
        :rtype: str
        """
        return self._device_fleet_name

    @device_fleet_name.setter
    def device_fleet_name(self, device_fleet_name):
        """Sets the device_fleet_name of this CreateEdgeDeploymentPlanRequest.


        :param device_fleet_name: The device_fleet_name of this CreateEdgeDeploymentPlanRequest.
        :type device_fleet_name: str
        """
        if device_fleet_name is None:
            raise ValueError("Invalid value for `device_fleet_name`, must not be `None`")

        self._device_fleet_name = device_fleet_name

    @property
    def stages(self):
        """Gets the stages of this CreateEdgeDeploymentPlanRequest.


        :return: The stages of this CreateEdgeDeploymentPlanRequest.
        :rtype: List
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this CreateEdgeDeploymentPlanRequest.


        :param stages: The stages of this CreateEdgeDeploymentPlanRequest.
        :type stages: List
        """

        self._stages = stages

    @property
    def tags(self):
        """Gets the tags of this CreateEdgeDeploymentPlanRequest.


        :return: The tags of this CreateEdgeDeploymentPlanRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEdgeDeploymentPlanRequest.


        :param tags: The tags of this CreateEdgeDeploymentPlanRequest.
        :type tags: List
        """

        self._tags = tags
