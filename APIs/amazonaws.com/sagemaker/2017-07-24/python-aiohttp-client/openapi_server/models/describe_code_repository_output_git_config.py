# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeCodeRepositoryOutputGitConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_url: str=None, branch: str=None, secret_arn: str=None):
        """DescribeCodeRepositoryOutputGitConfig - a model defined in OpenAPI

        :param repository_url: The repository_url of this DescribeCodeRepositoryOutputGitConfig.
        :param branch: The branch of this DescribeCodeRepositoryOutputGitConfig.
        :param secret_arn: The secret_arn of this DescribeCodeRepositoryOutputGitConfig.
        """
        self.openapi_types = {
            'repository_url': str,
            'branch': str,
            'secret_arn': str
        }

        self.attribute_map = {
            'repository_url': 'RepositoryUrl',
            'branch': 'Branch',
            'secret_arn': 'SecretArn'
        }

        self._repository_url = repository_url
        self._branch = branch
        self._secret_arn = secret_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeCodeRepositoryOutputGitConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeCodeRepositoryOutput_GitConfig of this DescribeCodeRepositoryOutputGitConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_url(self):
        """Gets the repository_url of this DescribeCodeRepositoryOutputGitConfig.


        :return: The repository_url of this DescribeCodeRepositoryOutputGitConfig.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this DescribeCodeRepositoryOutputGitConfig.


        :param repository_url: The repository_url of this DescribeCodeRepositoryOutputGitConfig.
        :type repository_url: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")

        self._repository_url = repository_url

    @property
    def branch(self):
        """Gets the branch of this DescribeCodeRepositoryOutputGitConfig.


        :return: The branch of this DescribeCodeRepositoryOutputGitConfig.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this DescribeCodeRepositoryOutputGitConfig.


        :param branch: The branch of this DescribeCodeRepositoryOutputGitConfig.
        :type branch: str
        """

        self._branch = branch

    @property
    def secret_arn(self):
        """Gets the secret_arn of this DescribeCodeRepositoryOutputGitConfig.


        :return: The secret_arn of this DescribeCodeRepositoryOutputGitConfig.
        :rtype: str
        """
        return self._secret_arn

    @secret_arn.setter
    def secret_arn(self, secret_arn):
        """Sets the secret_arn of this DescribeCodeRepositoryOutputGitConfig.


        :param secret_arn: The secret_arn of this DescribeCodeRepositoryOutputGitConfig.
        :type secret_arn: str
        """

        self._secret_arn = secret_arn
