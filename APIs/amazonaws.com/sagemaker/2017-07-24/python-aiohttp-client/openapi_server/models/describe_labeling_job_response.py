# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_labeling_job_response_human_task_config import DescribeLabelingJobResponseHumanTaskConfig
from openapi_server.models.describe_labeling_job_response_input_config import DescribeLabelingJobResponseInputConfig
from openapi_server.models.describe_labeling_job_response_label_counters import DescribeLabelingJobResponseLabelCounters
from openapi_server.models.describe_labeling_job_response_labeling_job_algorithms_config import DescribeLabelingJobResponseLabelingJobAlgorithmsConfig
from openapi_server.models.describe_labeling_job_response_labeling_job_output import DescribeLabelingJobResponseLabelingJobOutput
from openapi_server.models.describe_labeling_job_response_output_config import DescribeLabelingJobResponseOutputConfig
from openapi_server.models.describe_labeling_job_response_stopping_conditions import DescribeLabelingJobResponseStoppingConditions
from openapi_server.models.labeling_job_status import LabelingJobStatus
from openapi_server import util


class DescribeLabelingJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labeling_job_status: LabelingJobStatus=None, label_counters: DescribeLabelingJobResponseLabelCounters=None, failure_reason: str=None, creation_time: datetime=None, last_modified_time: datetime=None, job_reference_code: str=None, labeling_job_name: str=None, labeling_job_arn: str=None, label_attribute_name: str=None, input_config: DescribeLabelingJobResponseInputConfig=None, output_config: DescribeLabelingJobResponseOutputConfig=None, role_arn: str=None, label_category_config_s3_uri: str=None, stopping_conditions: DescribeLabelingJobResponseStoppingConditions=None, labeling_job_algorithms_config: DescribeLabelingJobResponseLabelingJobAlgorithmsConfig=None, human_task_config: DescribeLabelingJobResponseHumanTaskConfig=None, tags: List=None, labeling_job_output: DescribeLabelingJobResponseLabelingJobOutput=None):
        """DescribeLabelingJobResponse - a model defined in OpenAPI

        :param labeling_job_status: The labeling_job_status of this DescribeLabelingJobResponse.
        :param label_counters: The label_counters of this DescribeLabelingJobResponse.
        :param failure_reason: The failure_reason of this DescribeLabelingJobResponse.
        :param creation_time: The creation_time of this DescribeLabelingJobResponse.
        :param last_modified_time: The last_modified_time of this DescribeLabelingJobResponse.
        :param job_reference_code: The job_reference_code of this DescribeLabelingJobResponse.
        :param labeling_job_name: The labeling_job_name of this DescribeLabelingJobResponse.
        :param labeling_job_arn: The labeling_job_arn of this DescribeLabelingJobResponse.
        :param label_attribute_name: The label_attribute_name of this DescribeLabelingJobResponse.
        :param input_config: The input_config of this DescribeLabelingJobResponse.
        :param output_config: The output_config of this DescribeLabelingJobResponse.
        :param role_arn: The role_arn of this DescribeLabelingJobResponse.
        :param label_category_config_s3_uri: The label_category_config_s3_uri of this DescribeLabelingJobResponse.
        :param stopping_conditions: The stopping_conditions of this DescribeLabelingJobResponse.
        :param labeling_job_algorithms_config: The labeling_job_algorithms_config of this DescribeLabelingJobResponse.
        :param human_task_config: The human_task_config of this DescribeLabelingJobResponse.
        :param tags: The tags of this DescribeLabelingJobResponse.
        :param labeling_job_output: The labeling_job_output of this DescribeLabelingJobResponse.
        """
        self.openapi_types = {
            'labeling_job_status': LabelingJobStatus,
            'label_counters': DescribeLabelingJobResponseLabelCounters,
            'failure_reason': str,
            'creation_time': datetime,
            'last_modified_time': datetime,
            'job_reference_code': str,
            'labeling_job_name': str,
            'labeling_job_arn': str,
            'label_attribute_name': str,
            'input_config': DescribeLabelingJobResponseInputConfig,
            'output_config': DescribeLabelingJobResponseOutputConfig,
            'role_arn': str,
            'label_category_config_s3_uri': str,
            'stopping_conditions': DescribeLabelingJobResponseStoppingConditions,
            'labeling_job_algorithms_config': DescribeLabelingJobResponseLabelingJobAlgorithmsConfig,
            'human_task_config': DescribeLabelingJobResponseHumanTaskConfig,
            'tags': List,
            'labeling_job_output': DescribeLabelingJobResponseLabelingJobOutput
        }

        self.attribute_map = {
            'labeling_job_status': 'LabelingJobStatus',
            'label_counters': 'LabelCounters',
            'failure_reason': 'FailureReason',
            'creation_time': 'CreationTime',
            'last_modified_time': 'LastModifiedTime',
            'job_reference_code': 'JobReferenceCode',
            'labeling_job_name': 'LabelingJobName',
            'labeling_job_arn': 'LabelingJobArn',
            'label_attribute_name': 'LabelAttributeName',
            'input_config': 'InputConfig',
            'output_config': 'OutputConfig',
            'role_arn': 'RoleArn',
            'label_category_config_s3_uri': 'LabelCategoryConfigS3Uri',
            'stopping_conditions': 'StoppingConditions',
            'labeling_job_algorithms_config': 'LabelingJobAlgorithmsConfig',
            'human_task_config': 'HumanTaskConfig',
            'tags': 'Tags',
            'labeling_job_output': 'LabelingJobOutput'
        }

        self._labeling_job_status = labeling_job_status
        self._label_counters = label_counters
        self._failure_reason = failure_reason
        self._creation_time = creation_time
        self._last_modified_time = last_modified_time
        self._job_reference_code = job_reference_code
        self._labeling_job_name = labeling_job_name
        self._labeling_job_arn = labeling_job_arn
        self._label_attribute_name = label_attribute_name
        self._input_config = input_config
        self._output_config = output_config
        self._role_arn = role_arn
        self._label_category_config_s3_uri = label_category_config_s3_uri
        self._stopping_conditions = stopping_conditions
        self._labeling_job_algorithms_config = labeling_job_algorithms_config
        self._human_task_config = human_task_config
        self._tags = tags
        self._labeling_job_output = labeling_job_output

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeLabelingJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeLabelingJobResponse of this DescribeLabelingJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labeling_job_status(self):
        """Gets the labeling_job_status of this DescribeLabelingJobResponse.


        :return: The labeling_job_status of this DescribeLabelingJobResponse.
        :rtype: LabelingJobStatus
        """
        return self._labeling_job_status

    @labeling_job_status.setter
    def labeling_job_status(self, labeling_job_status):
        """Sets the labeling_job_status of this DescribeLabelingJobResponse.


        :param labeling_job_status: The labeling_job_status of this DescribeLabelingJobResponse.
        :type labeling_job_status: LabelingJobStatus
        """
        if labeling_job_status is None:
            raise ValueError("Invalid value for `labeling_job_status`, must not be `None`")

        self._labeling_job_status = labeling_job_status

    @property
    def label_counters(self):
        """Gets the label_counters of this DescribeLabelingJobResponse.


        :return: The label_counters of this DescribeLabelingJobResponse.
        :rtype: DescribeLabelingJobResponseLabelCounters
        """
        return self._label_counters

    @label_counters.setter
    def label_counters(self, label_counters):
        """Sets the label_counters of this DescribeLabelingJobResponse.


        :param label_counters: The label_counters of this DescribeLabelingJobResponse.
        :type label_counters: DescribeLabelingJobResponseLabelCounters
        """
        if label_counters is None:
            raise ValueError("Invalid value for `label_counters`, must not be `None`")

        self._label_counters = label_counters

    @property
    def failure_reason(self):
        """Gets the failure_reason of this DescribeLabelingJobResponse.


        :return: The failure_reason of this DescribeLabelingJobResponse.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this DescribeLabelingJobResponse.


        :param failure_reason: The failure_reason of this DescribeLabelingJobResponse.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def creation_time(self):
        """Gets the creation_time of this DescribeLabelingJobResponse.


        :return: The creation_time of this DescribeLabelingJobResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DescribeLabelingJobResponse.


        :param creation_time: The creation_time of this DescribeLabelingJobResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DescribeLabelingJobResponse.


        :return: The last_modified_time of this DescribeLabelingJobResponse.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DescribeLabelingJobResponse.


        :param last_modified_time: The last_modified_time of this DescribeLabelingJobResponse.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def job_reference_code(self):
        """Gets the job_reference_code of this DescribeLabelingJobResponse.


        :return: The job_reference_code of this DescribeLabelingJobResponse.
        :rtype: str
        """
        return self._job_reference_code

    @job_reference_code.setter
    def job_reference_code(self, job_reference_code):
        """Sets the job_reference_code of this DescribeLabelingJobResponse.


        :param job_reference_code: The job_reference_code of this DescribeLabelingJobResponse.
        :type job_reference_code: str
        """
        if job_reference_code is None:
            raise ValueError("Invalid value for `job_reference_code`, must not be `None`")

        self._job_reference_code = job_reference_code

    @property
    def labeling_job_name(self):
        """Gets the labeling_job_name of this DescribeLabelingJobResponse.


        :return: The labeling_job_name of this DescribeLabelingJobResponse.
        :rtype: str
        """
        return self._labeling_job_name

    @labeling_job_name.setter
    def labeling_job_name(self, labeling_job_name):
        """Sets the labeling_job_name of this DescribeLabelingJobResponse.


        :param labeling_job_name: The labeling_job_name of this DescribeLabelingJobResponse.
        :type labeling_job_name: str
        """
        if labeling_job_name is None:
            raise ValueError("Invalid value for `labeling_job_name`, must not be `None`")

        self._labeling_job_name = labeling_job_name

    @property
    def labeling_job_arn(self):
        """Gets the labeling_job_arn of this DescribeLabelingJobResponse.


        :return: The labeling_job_arn of this DescribeLabelingJobResponse.
        :rtype: str
        """
        return self._labeling_job_arn

    @labeling_job_arn.setter
    def labeling_job_arn(self, labeling_job_arn):
        """Sets the labeling_job_arn of this DescribeLabelingJobResponse.


        :param labeling_job_arn: The labeling_job_arn of this DescribeLabelingJobResponse.
        :type labeling_job_arn: str
        """
        if labeling_job_arn is None:
            raise ValueError("Invalid value for `labeling_job_arn`, must not be `None`")

        self._labeling_job_arn = labeling_job_arn

    @property
    def label_attribute_name(self):
        """Gets the label_attribute_name of this DescribeLabelingJobResponse.


        :return: The label_attribute_name of this DescribeLabelingJobResponse.
        :rtype: str
        """
        return self._label_attribute_name

    @label_attribute_name.setter
    def label_attribute_name(self, label_attribute_name):
        """Sets the label_attribute_name of this DescribeLabelingJobResponse.


        :param label_attribute_name: The label_attribute_name of this DescribeLabelingJobResponse.
        :type label_attribute_name: str
        """

        self._label_attribute_name = label_attribute_name

    @property
    def input_config(self):
        """Gets the input_config of this DescribeLabelingJobResponse.


        :return: The input_config of this DescribeLabelingJobResponse.
        :rtype: DescribeLabelingJobResponseInputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this DescribeLabelingJobResponse.


        :param input_config: The input_config of this DescribeLabelingJobResponse.
        :type input_config: DescribeLabelingJobResponseInputConfig
        """
        if input_config is None:
            raise ValueError("Invalid value for `input_config`, must not be `None`")

        self._input_config = input_config

    @property
    def output_config(self):
        """Gets the output_config of this DescribeLabelingJobResponse.


        :return: The output_config of this DescribeLabelingJobResponse.
        :rtype: DescribeLabelingJobResponseOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this DescribeLabelingJobResponse.


        :param output_config: The output_config of this DescribeLabelingJobResponse.
        :type output_config: DescribeLabelingJobResponseOutputConfig
        """
        if output_config is None:
            raise ValueError("Invalid value for `output_config`, must not be `None`")

        self._output_config = output_config

    @property
    def role_arn(self):
        """Gets the role_arn of this DescribeLabelingJobResponse.


        :return: The role_arn of this DescribeLabelingJobResponse.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this DescribeLabelingJobResponse.


        :param role_arn: The role_arn of this DescribeLabelingJobResponse.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def label_category_config_s3_uri(self):
        """Gets the label_category_config_s3_uri of this DescribeLabelingJobResponse.


        :return: The label_category_config_s3_uri of this DescribeLabelingJobResponse.
        :rtype: str
        """
        return self._label_category_config_s3_uri

    @label_category_config_s3_uri.setter
    def label_category_config_s3_uri(self, label_category_config_s3_uri):
        """Sets the label_category_config_s3_uri of this DescribeLabelingJobResponse.


        :param label_category_config_s3_uri: The label_category_config_s3_uri of this DescribeLabelingJobResponse.
        :type label_category_config_s3_uri: str
        """

        self._label_category_config_s3_uri = label_category_config_s3_uri

    @property
    def stopping_conditions(self):
        """Gets the stopping_conditions of this DescribeLabelingJobResponse.


        :return: The stopping_conditions of this DescribeLabelingJobResponse.
        :rtype: DescribeLabelingJobResponseStoppingConditions
        """
        return self._stopping_conditions

    @stopping_conditions.setter
    def stopping_conditions(self, stopping_conditions):
        """Sets the stopping_conditions of this DescribeLabelingJobResponse.


        :param stopping_conditions: The stopping_conditions of this DescribeLabelingJobResponse.
        :type stopping_conditions: DescribeLabelingJobResponseStoppingConditions
        """

        self._stopping_conditions = stopping_conditions

    @property
    def labeling_job_algorithms_config(self):
        """Gets the labeling_job_algorithms_config of this DescribeLabelingJobResponse.


        :return: The labeling_job_algorithms_config of this DescribeLabelingJobResponse.
        :rtype: DescribeLabelingJobResponseLabelingJobAlgorithmsConfig
        """
        return self._labeling_job_algorithms_config

    @labeling_job_algorithms_config.setter
    def labeling_job_algorithms_config(self, labeling_job_algorithms_config):
        """Sets the labeling_job_algorithms_config of this DescribeLabelingJobResponse.


        :param labeling_job_algorithms_config: The labeling_job_algorithms_config of this DescribeLabelingJobResponse.
        :type labeling_job_algorithms_config: DescribeLabelingJobResponseLabelingJobAlgorithmsConfig
        """

        self._labeling_job_algorithms_config = labeling_job_algorithms_config

    @property
    def human_task_config(self):
        """Gets the human_task_config of this DescribeLabelingJobResponse.


        :return: The human_task_config of this DescribeLabelingJobResponse.
        :rtype: DescribeLabelingJobResponseHumanTaskConfig
        """
        return self._human_task_config

    @human_task_config.setter
    def human_task_config(self, human_task_config):
        """Sets the human_task_config of this DescribeLabelingJobResponse.


        :param human_task_config: The human_task_config of this DescribeLabelingJobResponse.
        :type human_task_config: DescribeLabelingJobResponseHumanTaskConfig
        """
        if human_task_config is None:
            raise ValueError("Invalid value for `human_task_config`, must not be `None`")

        self._human_task_config = human_task_config

    @property
    def tags(self):
        """Gets the tags of this DescribeLabelingJobResponse.


        :return: The tags of this DescribeLabelingJobResponse.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribeLabelingJobResponse.


        :param tags: The tags of this DescribeLabelingJobResponse.
        :type tags: List
        """

        self._tags = tags

    @property
    def labeling_job_output(self):
        """Gets the labeling_job_output of this DescribeLabelingJobResponse.


        :return: The labeling_job_output of this DescribeLabelingJobResponse.
        :rtype: DescribeLabelingJobResponseLabelingJobOutput
        """
        return self._labeling_job_output

    @labeling_job_output.setter
    def labeling_job_output(self, labeling_job_output):
        """Sets the labeling_job_output of this DescribeLabelingJobResponse.


        :param labeling_job_output: The labeling_job_output of this DescribeLabelingJobResponse.
        :type labeling_job_output: DescribeLabelingJobResponseLabelingJobOutput
        """

        self._labeling_job_output = labeling_job_output
