# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_scaling_configuration_recommendation_request_scaling_policy_objective import GetScalingConfigurationRecommendationRequestScalingPolicyObjective
from openapi_server import util


class GetScalingConfigurationRecommendationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inference_recommendations_job_name: str=None, recommendation_id: str=None, endpoint_name: str=None, target_cpu_utilization_per_core: int=None, scaling_policy_objective: GetScalingConfigurationRecommendationRequestScalingPolicyObjective=None):
        """GetScalingConfigurationRecommendationRequest - a model defined in OpenAPI

        :param inference_recommendations_job_name: The inference_recommendations_job_name of this GetScalingConfigurationRecommendationRequest.
        :param recommendation_id: The recommendation_id of this GetScalingConfigurationRecommendationRequest.
        :param endpoint_name: The endpoint_name of this GetScalingConfigurationRecommendationRequest.
        :param target_cpu_utilization_per_core: The target_cpu_utilization_per_core of this GetScalingConfigurationRecommendationRequest.
        :param scaling_policy_objective: The scaling_policy_objective of this GetScalingConfigurationRecommendationRequest.
        """
        self.openapi_types = {
            'inference_recommendations_job_name': str,
            'recommendation_id': str,
            'endpoint_name': str,
            'target_cpu_utilization_per_core': int,
            'scaling_policy_objective': GetScalingConfigurationRecommendationRequestScalingPolicyObjective
        }

        self.attribute_map = {
            'inference_recommendations_job_name': 'InferenceRecommendationsJobName',
            'recommendation_id': 'RecommendationId',
            'endpoint_name': 'EndpointName',
            'target_cpu_utilization_per_core': 'TargetCpuUtilizationPerCore',
            'scaling_policy_objective': 'ScalingPolicyObjective'
        }

        self._inference_recommendations_job_name = inference_recommendations_job_name
        self._recommendation_id = recommendation_id
        self._endpoint_name = endpoint_name
        self._target_cpu_utilization_per_core = target_cpu_utilization_per_core
        self._scaling_policy_objective = scaling_policy_objective

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetScalingConfigurationRecommendationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetScalingConfigurationRecommendationRequest of this GetScalingConfigurationRecommendationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inference_recommendations_job_name(self):
        """Gets the inference_recommendations_job_name of this GetScalingConfigurationRecommendationRequest.


        :return: The inference_recommendations_job_name of this GetScalingConfigurationRecommendationRequest.
        :rtype: str
        """
        return self._inference_recommendations_job_name

    @inference_recommendations_job_name.setter
    def inference_recommendations_job_name(self, inference_recommendations_job_name):
        """Sets the inference_recommendations_job_name of this GetScalingConfigurationRecommendationRequest.


        :param inference_recommendations_job_name: The inference_recommendations_job_name of this GetScalingConfigurationRecommendationRequest.
        :type inference_recommendations_job_name: str
        """
        if inference_recommendations_job_name is None:
            raise ValueError("Invalid value for `inference_recommendations_job_name`, must not be `None`")

        self._inference_recommendations_job_name = inference_recommendations_job_name

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this GetScalingConfigurationRecommendationRequest.


        :return: The recommendation_id of this GetScalingConfigurationRecommendationRequest.
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this GetScalingConfigurationRecommendationRequest.


        :param recommendation_id: The recommendation_id of this GetScalingConfigurationRecommendationRequest.
        :type recommendation_id: str
        """

        self._recommendation_id = recommendation_id

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this GetScalingConfigurationRecommendationRequest.


        :return: The endpoint_name of this GetScalingConfigurationRecommendationRequest.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this GetScalingConfigurationRecommendationRequest.


        :param endpoint_name: The endpoint_name of this GetScalingConfigurationRecommendationRequest.
        :type endpoint_name: str
        """

        self._endpoint_name = endpoint_name

    @property
    def target_cpu_utilization_per_core(self):
        """Gets the target_cpu_utilization_per_core of this GetScalingConfigurationRecommendationRequest.


        :return: The target_cpu_utilization_per_core of this GetScalingConfigurationRecommendationRequest.
        :rtype: int
        """
        return self._target_cpu_utilization_per_core

    @target_cpu_utilization_per_core.setter
    def target_cpu_utilization_per_core(self, target_cpu_utilization_per_core):
        """Sets the target_cpu_utilization_per_core of this GetScalingConfigurationRecommendationRequest.


        :param target_cpu_utilization_per_core: The target_cpu_utilization_per_core of this GetScalingConfigurationRecommendationRequest.
        :type target_cpu_utilization_per_core: int
        """

        self._target_cpu_utilization_per_core = target_cpu_utilization_per_core

    @property
    def scaling_policy_objective(self):
        """Gets the scaling_policy_objective of this GetScalingConfigurationRecommendationRequest.


        :return: The scaling_policy_objective of this GetScalingConfigurationRecommendationRequest.
        :rtype: GetScalingConfigurationRecommendationRequestScalingPolicyObjective
        """
        return self._scaling_policy_objective

    @scaling_policy_objective.setter
    def scaling_policy_objective(self, scaling_policy_objective):
        """Sets the scaling_policy_objective of this GetScalingConfigurationRecommendationRequest.


        :param scaling_policy_objective: The scaling_policy_objective of this GetScalingConfigurationRecommendationRequest.
        :type scaling_policy_objective: GetScalingConfigurationRecommendationRequestScalingPolicyObjective
        """

        self._scaling_policy_objective = scaling_policy_objective
