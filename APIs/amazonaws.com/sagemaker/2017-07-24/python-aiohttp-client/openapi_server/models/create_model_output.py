# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateModelOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_arn: str=None):
        """CreateModelOutput - a model defined in OpenAPI

        :param model_arn: The model_arn of this CreateModelOutput.
        """
        self.openapi_types = {
            'model_arn': str
        }

        self.attribute_map = {
            'model_arn': 'ModelArn'
        }

        self._model_arn = model_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateModelOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateModelOutput of this CreateModelOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_arn(self):
        """Gets the model_arn of this CreateModelOutput.


        :return: The model_arn of this CreateModelOutput.
        :rtype: str
        """
        return self._model_arn

    @model_arn.setter
    def model_arn(self, model_arn):
        """Sets the model_arn of this CreateModelOutput.


        :param model_arn: The model_arn of this CreateModelOutput.
        :type model_arn: str
        """
        if model_arn is None:
            raise ValueError("Invalid value for `model_arn`, must not be `None`")

        self._model_arn = model_arn
