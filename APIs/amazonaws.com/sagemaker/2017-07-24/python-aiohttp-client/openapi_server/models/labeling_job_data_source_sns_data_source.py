# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabelingJobDataSourceSnsDataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sns_topic_arn: str=None):
        """LabelingJobDataSourceSnsDataSource - a model defined in OpenAPI

        :param sns_topic_arn: The sns_topic_arn of this LabelingJobDataSourceSnsDataSource.
        """
        self.openapi_types = {
            'sns_topic_arn': str
        }

        self.attribute_map = {
            'sns_topic_arn': 'SnsTopicArn'
        }

        self._sns_topic_arn = sns_topic_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelingJobDataSourceSnsDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabelingJobDataSource_SnsDataSource of this LabelingJobDataSourceSnsDataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sns_topic_arn(self):
        """Gets the sns_topic_arn of this LabelingJobDataSourceSnsDataSource.


        :return: The sns_topic_arn of this LabelingJobDataSourceSnsDataSource.
        :rtype: str
        """
        return self._sns_topic_arn

    @sns_topic_arn.setter
    def sns_topic_arn(self, sns_topic_arn):
        """Sets the sns_topic_arn of this LabelingJobDataSourceSnsDataSource.


        :param sns_topic_arn: The sns_topic_arn of this LabelingJobDataSourceSnsDataSource.
        :type sns_topic_arn: str
        """
        if sns_topic_arn is None:
            raise ValueError("Invalid value for `sns_topic_arn`, must not be `None`")

        self._sns_topic_arn = sns_topic_arn
