# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalInferenceSpecificationDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, containers: List=None, supported_transform_instance_types: List=None, supported_realtime_inference_instance_types: List=None, supported_content_types: List=None, supported_response_mime_types: List=None):
        """AdditionalInferenceSpecificationDefinition - a model defined in OpenAPI

        :param name: The name of this AdditionalInferenceSpecificationDefinition.
        :param description: The description of this AdditionalInferenceSpecificationDefinition.
        :param containers: The containers of this AdditionalInferenceSpecificationDefinition.
        :param supported_transform_instance_types: The supported_transform_instance_types of this AdditionalInferenceSpecificationDefinition.
        :param supported_realtime_inference_instance_types: The supported_realtime_inference_instance_types of this AdditionalInferenceSpecificationDefinition.
        :param supported_content_types: The supported_content_types of this AdditionalInferenceSpecificationDefinition.
        :param supported_response_mime_types: The supported_response_mime_types of this AdditionalInferenceSpecificationDefinition.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'containers': List,
            'supported_transform_instance_types': List,
            'supported_realtime_inference_instance_types': List,
            'supported_content_types': List,
            'supported_response_mime_types': List
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'containers': 'Containers',
            'supported_transform_instance_types': 'SupportedTransformInstanceTypes',
            'supported_realtime_inference_instance_types': 'SupportedRealtimeInferenceInstanceTypes',
            'supported_content_types': 'SupportedContentTypes',
            'supported_response_mime_types': 'SupportedResponseMIMETypes'
        }

        self._name = name
        self._description = description
        self._containers = containers
        self._supported_transform_instance_types = supported_transform_instance_types
        self._supported_realtime_inference_instance_types = supported_realtime_inference_instance_types
        self._supported_content_types = supported_content_types
        self._supported_response_mime_types = supported_response_mime_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalInferenceSpecificationDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalInferenceSpecificationDefinition of this AdditionalInferenceSpecificationDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AdditionalInferenceSpecificationDefinition.


        :return: The name of this AdditionalInferenceSpecificationDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdditionalInferenceSpecificationDefinition.


        :param name: The name of this AdditionalInferenceSpecificationDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this AdditionalInferenceSpecificationDefinition.


        :return: The description of this AdditionalInferenceSpecificationDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AdditionalInferenceSpecificationDefinition.


        :param description: The description of this AdditionalInferenceSpecificationDefinition.
        :type description: str
        """

        self._description = description

    @property
    def containers(self):
        """Gets the containers of this AdditionalInferenceSpecificationDefinition.


        :return: The containers of this AdditionalInferenceSpecificationDefinition.
        :rtype: List
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this AdditionalInferenceSpecificationDefinition.


        :param containers: The containers of this AdditionalInferenceSpecificationDefinition.
        :type containers: List
        """
        if containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")

        self._containers = containers

    @property
    def supported_transform_instance_types(self):
        """Gets the supported_transform_instance_types of this AdditionalInferenceSpecificationDefinition.


        :return: The supported_transform_instance_types of this AdditionalInferenceSpecificationDefinition.
        :rtype: List
        """
        return self._supported_transform_instance_types

    @supported_transform_instance_types.setter
    def supported_transform_instance_types(self, supported_transform_instance_types):
        """Sets the supported_transform_instance_types of this AdditionalInferenceSpecificationDefinition.


        :param supported_transform_instance_types: The supported_transform_instance_types of this AdditionalInferenceSpecificationDefinition.
        :type supported_transform_instance_types: List
        """

        self._supported_transform_instance_types = supported_transform_instance_types

    @property
    def supported_realtime_inference_instance_types(self):
        """Gets the supported_realtime_inference_instance_types of this AdditionalInferenceSpecificationDefinition.


        :return: The supported_realtime_inference_instance_types of this AdditionalInferenceSpecificationDefinition.
        :rtype: List
        """
        return self._supported_realtime_inference_instance_types

    @supported_realtime_inference_instance_types.setter
    def supported_realtime_inference_instance_types(self, supported_realtime_inference_instance_types):
        """Sets the supported_realtime_inference_instance_types of this AdditionalInferenceSpecificationDefinition.


        :param supported_realtime_inference_instance_types: The supported_realtime_inference_instance_types of this AdditionalInferenceSpecificationDefinition.
        :type supported_realtime_inference_instance_types: List
        """

        self._supported_realtime_inference_instance_types = supported_realtime_inference_instance_types

    @property
    def supported_content_types(self):
        """Gets the supported_content_types of this AdditionalInferenceSpecificationDefinition.


        :return: The supported_content_types of this AdditionalInferenceSpecificationDefinition.
        :rtype: List
        """
        return self._supported_content_types

    @supported_content_types.setter
    def supported_content_types(self, supported_content_types):
        """Sets the supported_content_types of this AdditionalInferenceSpecificationDefinition.


        :param supported_content_types: The supported_content_types of this AdditionalInferenceSpecificationDefinition.
        :type supported_content_types: List
        """

        self._supported_content_types = supported_content_types

    @property
    def supported_response_mime_types(self):
        """Gets the supported_response_mime_types of this AdditionalInferenceSpecificationDefinition.


        :return: The supported_response_mime_types of this AdditionalInferenceSpecificationDefinition.
        :rtype: List
        """
        return self._supported_response_mime_types

    @supported_response_mime_types.setter
    def supported_response_mime_types(self, supported_response_mime_types):
        """Sets the supported_response_mime_types of this AdditionalInferenceSpecificationDefinition.


        :param supported_response_mime_types: The supported_response_mime_types of this AdditionalInferenceSpecificationDefinition.
        :type supported_response_mime_types: List
        """

        self._supported_response_mime_types = supported_response_mime_types
