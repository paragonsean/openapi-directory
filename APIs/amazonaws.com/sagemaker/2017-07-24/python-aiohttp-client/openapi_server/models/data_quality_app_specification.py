# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataQualityAppSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_uri: str=None, container_entrypoint: List=None, container_arguments: List=None, record_preprocessor_source_uri: str=None, post_analytics_processor_source_uri: str=None, environment: Dict=None):
        """DataQualityAppSpecification - a model defined in OpenAPI

        :param image_uri: The image_uri of this DataQualityAppSpecification.
        :param container_entrypoint: The container_entrypoint of this DataQualityAppSpecification.
        :param container_arguments: The container_arguments of this DataQualityAppSpecification.
        :param record_preprocessor_source_uri: The record_preprocessor_source_uri of this DataQualityAppSpecification.
        :param post_analytics_processor_source_uri: The post_analytics_processor_source_uri of this DataQualityAppSpecification.
        :param environment: The environment of this DataQualityAppSpecification.
        """
        self.openapi_types = {
            'image_uri': str,
            'container_entrypoint': List,
            'container_arguments': List,
            'record_preprocessor_source_uri': str,
            'post_analytics_processor_source_uri': str,
            'environment': Dict
        }

        self.attribute_map = {
            'image_uri': 'ImageUri',
            'container_entrypoint': 'ContainerEntrypoint',
            'container_arguments': 'ContainerArguments',
            'record_preprocessor_source_uri': 'RecordPreprocessorSourceUri',
            'post_analytics_processor_source_uri': 'PostAnalyticsProcessorSourceUri',
            'environment': 'Environment'
        }

        self._image_uri = image_uri
        self._container_entrypoint = container_entrypoint
        self._container_arguments = container_arguments
        self._record_preprocessor_source_uri = record_preprocessor_source_uri
        self._post_analytics_processor_source_uri = post_analytics_processor_source_uri
        self._environment = environment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataQualityAppSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataQualityAppSpecification of this DataQualityAppSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_uri(self):
        """Gets the image_uri of this DataQualityAppSpecification.


        :return: The image_uri of this DataQualityAppSpecification.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this DataQualityAppSpecification.


        :param image_uri: The image_uri of this DataQualityAppSpecification.
        :type image_uri: str
        """
        if image_uri is None:
            raise ValueError("Invalid value for `image_uri`, must not be `None`")

        self._image_uri = image_uri

    @property
    def container_entrypoint(self):
        """Gets the container_entrypoint of this DataQualityAppSpecification.


        :return: The container_entrypoint of this DataQualityAppSpecification.
        :rtype: List
        """
        return self._container_entrypoint

    @container_entrypoint.setter
    def container_entrypoint(self, container_entrypoint):
        """Sets the container_entrypoint of this DataQualityAppSpecification.


        :param container_entrypoint: The container_entrypoint of this DataQualityAppSpecification.
        :type container_entrypoint: List
        """

        self._container_entrypoint = container_entrypoint

    @property
    def container_arguments(self):
        """Gets the container_arguments of this DataQualityAppSpecification.


        :return: The container_arguments of this DataQualityAppSpecification.
        :rtype: List
        """
        return self._container_arguments

    @container_arguments.setter
    def container_arguments(self, container_arguments):
        """Sets the container_arguments of this DataQualityAppSpecification.


        :param container_arguments: The container_arguments of this DataQualityAppSpecification.
        :type container_arguments: List
        """

        self._container_arguments = container_arguments

    @property
    def record_preprocessor_source_uri(self):
        """Gets the record_preprocessor_source_uri of this DataQualityAppSpecification.


        :return: The record_preprocessor_source_uri of this DataQualityAppSpecification.
        :rtype: str
        """
        return self._record_preprocessor_source_uri

    @record_preprocessor_source_uri.setter
    def record_preprocessor_source_uri(self, record_preprocessor_source_uri):
        """Sets the record_preprocessor_source_uri of this DataQualityAppSpecification.


        :param record_preprocessor_source_uri: The record_preprocessor_source_uri of this DataQualityAppSpecification.
        :type record_preprocessor_source_uri: str
        """

        self._record_preprocessor_source_uri = record_preprocessor_source_uri

    @property
    def post_analytics_processor_source_uri(self):
        """Gets the post_analytics_processor_source_uri of this DataQualityAppSpecification.


        :return: The post_analytics_processor_source_uri of this DataQualityAppSpecification.
        :rtype: str
        """
        return self._post_analytics_processor_source_uri

    @post_analytics_processor_source_uri.setter
    def post_analytics_processor_source_uri(self, post_analytics_processor_source_uri):
        """Sets the post_analytics_processor_source_uri of this DataQualityAppSpecification.


        :param post_analytics_processor_source_uri: The post_analytics_processor_source_uri of this DataQualityAppSpecification.
        :type post_analytics_processor_source_uri: str
        """

        self._post_analytics_processor_source_uri = post_analytics_processor_source_uri

    @property
    def environment(self):
        """Gets the environment of this DataQualityAppSpecification.


        :return: The environment of this DataQualityAppSpecification.
        :rtype: Dict
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this DataQualityAppSpecification.


        :param environment: The environment of this DataQualityAppSpecification.
        :type environment: Dict
        """

        self._environment = environment
