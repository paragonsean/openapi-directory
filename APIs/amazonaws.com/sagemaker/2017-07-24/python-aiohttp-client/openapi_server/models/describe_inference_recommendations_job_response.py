# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_inference_recommendations_job_response_input_config import DescribeInferenceRecommendationsJobResponseInputConfig
from openapi_server.models.describe_inference_recommendations_job_response_stopping_conditions import DescribeInferenceRecommendationsJobResponseStoppingConditions
from openapi_server.models.recommendation_job_status import RecommendationJobStatus
from openapi_server.models.recommendation_job_type import RecommendationJobType
from openapi_server import util


class DescribeInferenceRecommendationsJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_name: str=None, job_description: str=None, job_type: RecommendationJobType=None, job_arn: str=None, role_arn: str=None, status: RecommendationJobStatus=None, creation_time: datetime=None, completion_time: datetime=None, last_modified_time: datetime=None, failure_reason: str=None, input_config: DescribeInferenceRecommendationsJobResponseInputConfig=None, stopping_conditions: DescribeInferenceRecommendationsJobResponseStoppingConditions=None, inference_recommendations: List=None, endpoint_performances: List=None):
        """DescribeInferenceRecommendationsJobResponse - a model defined in OpenAPI

        :param job_name: The job_name of this DescribeInferenceRecommendationsJobResponse.
        :param job_description: The job_description of this DescribeInferenceRecommendationsJobResponse.
        :param job_type: The job_type of this DescribeInferenceRecommendationsJobResponse.
        :param job_arn: The job_arn of this DescribeInferenceRecommendationsJobResponse.
        :param role_arn: The role_arn of this DescribeInferenceRecommendationsJobResponse.
        :param status: The status of this DescribeInferenceRecommendationsJobResponse.
        :param creation_time: The creation_time of this DescribeInferenceRecommendationsJobResponse.
        :param completion_time: The completion_time of this DescribeInferenceRecommendationsJobResponse.
        :param last_modified_time: The last_modified_time of this DescribeInferenceRecommendationsJobResponse.
        :param failure_reason: The failure_reason of this DescribeInferenceRecommendationsJobResponse.
        :param input_config: The input_config of this DescribeInferenceRecommendationsJobResponse.
        :param stopping_conditions: The stopping_conditions of this DescribeInferenceRecommendationsJobResponse.
        :param inference_recommendations: The inference_recommendations of this DescribeInferenceRecommendationsJobResponse.
        :param endpoint_performances: The endpoint_performances of this DescribeInferenceRecommendationsJobResponse.
        """
        self.openapi_types = {
            'job_name': str,
            'job_description': str,
            'job_type': RecommendationJobType,
            'job_arn': str,
            'role_arn': str,
            'status': RecommendationJobStatus,
            'creation_time': datetime,
            'completion_time': datetime,
            'last_modified_time': datetime,
            'failure_reason': str,
            'input_config': DescribeInferenceRecommendationsJobResponseInputConfig,
            'stopping_conditions': DescribeInferenceRecommendationsJobResponseStoppingConditions,
            'inference_recommendations': List,
            'endpoint_performances': List
        }

        self.attribute_map = {
            'job_name': 'JobName',
            'job_description': 'JobDescription',
            'job_type': 'JobType',
            'job_arn': 'JobArn',
            'role_arn': 'RoleArn',
            'status': 'Status',
            'creation_time': 'CreationTime',
            'completion_time': 'CompletionTime',
            'last_modified_time': 'LastModifiedTime',
            'failure_reason': 'FailureReason',
            'input_config': 'InputConfig',
            'stopping_conditions': 'StoppingConditions',
            'inference_recommendations': 'InferenceRecommendations',
            'endpoint_performances': 'EndpointPerformances'
        }

        self._job_name = job_name
        self._job_description = job_description
        self._job_type = job_type
        self._job_arn = job_arn
        self._role_arn = role_arn
        self._status = status
        self._creation_time = creation_time
        self._completion_time = completion_time
        self._last_modified_time = last_modified_time
        self._failure_reason = failure_reason
        self._input_config = input_config
        self._stopping_conditions = stopping_conditions
        self._inference_recommendations = inference_recommendations
        self._endpoint_performances = endpoint_performances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeInferenceRecommendationsJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeInferenceRecommendationsJobResponse of this DescribeInferenceRecommendationsJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_name(self):
        """Gets the job_name of this DescribeInferenceRecommendationsJobResponse.


        :return: The job_name of this DescribeInferenceRecommendationsJobResponse.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this DescribeInferenceRecommendationsJobResponse.


        :param job_name: The job_name of this DescribeInferenceRecommendationsJobResponse.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")

        self._job_name = job_name

    @property
    def job_description(self):
        """Gets the job_description of this DescribeInferenceRecommendationsJobResponse.


        :return: The job_description of this DescribeInferenceRecommendationsJobResponse.
        :rtype: str
        """
        return self._job_description

    @job_description.setter
    def job_description(self, job_description):
        """Sets the job_description of this DescribeInferenceRecommendationsJobResponse.


        :param job_description: The job_description of this DescribeInferenceRecommendationsJobResponse.
        :type job_description: str
        """

        self._job_description = job_description

    @property
    def job_type(self):
        """Gets the job_type of this DescribeInferenceRecommendationsJobResponse.


        :return: The job_type of this DescribeInferenceRecommendationsJobResponse.
        :rtype: RecommendationJobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this DescribeInferenceRecommendationsJobResponse.


        :param job_type: The job_type of this DescribeInferenceRecommendationsJobResponse.
        :type job_type: RecommendationJobType
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")

        self._job_type = job_type

    @property
    def job_arn(self):
        """Gets the job_arn of this DescribeInferenceRecommendationsJobResponse.


        :return: The job_arn of this DescribeInferenceRecommendationsJobResponse.
        :rtype: str
        """
        return self._job_arn

    @job_arn.setter
    def job_arn(self, job_arn):
        """Sets the job_arn of this DescribeInferenceRecommendationsJobResponse.


        :param job_arn: The job_arn of this DescribeInferenceRecommendationsJobResponse.
        :type job_arn: str
        """
        if job_arn is None:
            raise ValueError("Invalid value for `job_arn`, must not be `None`")

        self._job_arn = job_arn

    @property
    def role_arn(self):
        """Gets the role_arn of this DescribeInferenceRecommendationsJobResponse.


        :return: The role_arn of this DescribeInferenceRecommendationsJobResponse.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this DescribeInferenceRecommendationsJobResponse.


        :param role_arn: The role_arn of this DescribeInferenceRecommendationsJobResponse.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def status(self):
        """Gets the status of this DescribeInferenceRecommendationsJobResponse.


        :return: The status of this DescribeInferenceRecommendationsJobResponse.
        :rtype: RecommendationJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeInferenceRecommendationsJobResponse.


        :param status: The status of this DescribeInferenceRecommendationsJobResponse.
        :type status: RecommendationJobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def creation_time(self):
        """Gets the creation_time of this DescribeInferenceRecommendationsJobResponse.


        :return: The creation_time of this DescribeInferenceRecommendationsJobResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DescribeInferenceRecommendationsJobResponse.


        :param creation_time: The creation_time of this DescribeInferenceRecommendationsJobResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def completion_time(self):
        """Gets the completion_time of this DescribeInferenceRecommendationsJobResponse.


        :return: The completion_time of this DescribeInferenceRecommendationsJobResponse.
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this DescribeInferenceRecommendationsJobResponse.


        :param completion_time: The completion_time of this DescribeInferenceRecommendationsJobResponse.
        :type completion_time: datetime
        """

        self._completion_time = completion_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DescribeInferenceRecommendationsJobResponse.


        :return: The last_modified_time of this DescribeInferenceRecommendationsJobResponse.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DescribeInferenceRecommendationsJobResponse.


        :param last_modified_time: The last_modified_time of this DescribeInferenceRecommendationsJobResponse.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def failure_reason(self):
        """Gets the failure_reason of this DescribeInferenceRecommendationsJobResponse.


        :return: The failure_reason of this DescribeInferenceRecommendationsJobResponse.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this DescribeInferenceRecommendationsJobResponse.


        :param failure_reason: The failure_reason of this DescribeInferenceRecommendationsJobResponse.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def input_config(self):
        """Gets the input_config of this DescribeInferenceRecommendationsJobResponse.


        :return: The input_config of this DescribeInferenceRecommendationsJobResponse.
        :rtype: DescribeInferenceRecommendationsJobResponseInputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this DescribeInferenceRecommendationsJobResponse.


        :param input_config: The input_config of this DescribeInferenceRecommendationsJobResponse.
        :type input_config: DescribeInferenceRecommendationsJobResponseInputConfig
        """
        if input_config is None:
            raise ValueError("Invalid value for `input_config`, must not be `None`")

        self._input_config = input_config

    @property
    def stopping_conditions(self):
        """Gets the stopping_conditions of this DescribeInferenceRecommendationsJobResponse.


        :return: The stopping_conditions of this DescribeInferenceRecommendationsJobResponse.
        :rtype: DescribeInferenceRecommendationsJobResponseStoppingConditions
        """
        return self._stopping_conditions

    @stopping_conditions.setter
    def stopping_conditions(self, stopping_conditions):
        """Sets the stopping_conditions of this DescribeInferenceRecommendationsJobResponse.


        :param stopping_conditions: The stopping_conditions of this DescribeInferenceRecommendationsJobResponse.
        :type stopping_conditions: DescribeInferenceRecommendationsJobResponseStoppingConditions
        """

        self._stopping_conditions = stopping_conditions

    @property
    def inference_recommendations(self):
        """Gets the inference_recommendations of this DescribeInferenceRecommendationsJobResponse.


        :return: The inference_recommendations of this DescribeInferenceRecommendationsJobResponse.
        :rtype: List
        """
        return self._inference_recommendations

    @inference_recommendations.setter
    def inference_recommendations(self, inference_recommendations):
        """Sets the inference_recommendations of this DescribeInferenceRecommendationsJobResponse.


        :param inference_recommendations: The inference_recommendations of this DescribeInferenceRecommendationsJobResponse.
        :type inference_recommendations: List
        """

        self._inference_recommendations = inference_recommendations

    @property
    def endpoint_performances(self):
        """Gets the endpoint_performances of this DescribeInferenceRecommendationsJobResponse.


        :return: The endpoint_performances of this DescribeInferenceRecommendationsJobResponse.
        :rtype: List
        """
        return self._endpoint_performances

    @endpoint_performances.setter
    def endpoint_performances(self, endpoint_performances):
        """Sets the endpoint_performances of this DescribeInferenceRecommendationsJobResponse.


        :param endpoint_performances: The endpoint_performances of this DescribeInferenceRecommendationsJobResponse.
        :type endpoint_performances: List
        """

        self._endpoint_performances = endpoint_performances
