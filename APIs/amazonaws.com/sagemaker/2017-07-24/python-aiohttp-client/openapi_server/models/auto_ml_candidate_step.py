# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.candidate_step_type import CandidateStepType
from openapi_server import util


class AutoMLCandidateStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_step_type: CandidateStepType=None, candidate_step_arn: str=None, candidate_step_name: str=None):
        """AutoMLCandidateStep - a model defined in OpenAPI

        :param candidate_step_type: The candidate_step_type of this AutoMLCandidateStep.
        :param candidate_step_arn: The candidate_step_arn of this AutoMLCandidateStep.
        :param candidate_step_name: The candidate_step_name of this AutoMLCandidateStep.
        """
        self.openapi_types = {
            'candidate_step_type': CandidateStepType,
            'candidate_step_arn': str,
            'candidate_step_name': str
        }

        self.attribute_map = {
            'candidate_step_type': 'CandidateStepType',
            'candidate_step_arn': 'CandidateStepArn',
            'candidate_step_name': 'CandidateStepName'
        }

        self._candidate_step_type = candidate_step_type
        self._candidate_step_arn = candidate_step_arn
        self._candidate_step_name = candidate_step_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoMLCandidateStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoMLCandidateStep of this AutoMLCandidateStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_step_type(self):
        """Gets the candidate_step_type of this AutoMLCandidateStep.


        :return: The candidate_step_type of this AutoMLCandidateStep.
        :rtype: CandidateStepType
        """
        return self._candidate_step_type

    @candidate_step_type.setter
    def candidate_step_type(self, candidate_step_type):
        """Sets the candidate_step_type of this AutoMLCandidateStep.


        :param candidate_step_type: The candidate_step_type of this AutoMLCandidateStep.
        :type candidate_step_type: CandidateStepType
        """
        if candidate_step_type is None:
            raise ValueError("Invalid value for `candidate_step_type`, must not be `None`")

        self._candidate_step_type = candidate_step_type

    @property
    def candidate_step_arn(self):
        """Gets the candidate_step_arn of this AutoMLCandidateStep.


        :return: The candidate_step_arn of this AutoMLCandidateStep.
        :rtype: str
        """
        return self._candidate_step_arn

    @candidate_step_arn.setter
    def candidate_step_arn(self, candidate_step_arn):
        """Sets the candidate_step_arn of this AutoMLCandidateStep.


        :param candidate_step_arn: The candidate_step_arn of this AutoMLCandidateStep.
        :type candidate_step_arn: str
        """
        if candidate_step_arn is None:
            raise ValueError("Invalid value for `candidate_step_arn`, must not be `None`")

        self._candidate_step_arn = candidate_step_arn

    @property
    def candidate_step_name(self):
        """Gets the candidate_step_name of this AutoMLCandidateStep.


        :return: The candidate_step_name of this AutoMLCandidateStep.
        :rtype: str
        """
        return self._candidate_step_name

    @candidate_step_name.setter
    def candidate_step_name(self, candidate_step_name):
        """Sets the candidate_step_name of this AutoMLCandidateStep.


        :param candidate_step_name: The candidate_step_name of this AutoMLCandidateStep.
        :type candidate_step_name: str
        """
        if candidate_step_name is None:
            raise ValueError("Invalid value for `candidate_step_name`, must not be `None`")

        self._candidate_step_name = candidate_step_name
