# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NestedFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nested_property_name: str=None, filters: List=None):
        """NestedFilters - a model defined in OpenAPI

        :param nested_property_name: The nested_property_name of this NestedFilters.
        :param filters: The filters of this NestedFilters.
        """
        self.openapi_types = {
            'nested_property_name': str,
            'filters': List
        }

        self.attribute_map = {
            'nested_property_name': 'NestedPropertyName',
            'filters': 'Filters'
        }

        self._nested_property_name = nested_property_name
        self._filters = filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NestedFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NestedFilters of this NestedFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nested_property_name(self):
        """Gets the nested_property_name of this NestedFilters.


        :return: The nested_property_name of this NestedFilters.
        :rtype: str
        """
        return self._nested_property_name

    @nested_property_name.setter
    def nested_property_name(self, nested_property_name):
        """Sets the nested_property_name of this NestedFilters.


        :param nested_property_name: The nested_property_name of this NestedFilters.
        :type nested_property_name: str
        """
        if nested_property_name is None:
            raise ValueError("Invalid value for `nested_property_name`, must not be `None`")

        self._nested_property_name = nested_property_name

    @property
    def filters(self):
        """Gets the filters of this NestedFilters.


        :return: The filters of this NestedFilters.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this NestedFilters.


        :param filters: The filters of this NestedFilters.
        :type filters: List
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")

        self._filters = filters
