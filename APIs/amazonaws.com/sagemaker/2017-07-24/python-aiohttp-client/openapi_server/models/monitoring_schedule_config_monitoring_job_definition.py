# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitoring_job_definition_baseline_config import MonitoringJobDefinitionBaselineConfig
from openapi_server.models.monitoring_job_definition_monitoring_app_specification import MonitoringJobDefinitionMonitoringAppSpecification
from openapi_server.models.monitoring_job_definition_monitoring_output_config import MonitoringJobDefinitionMonitoringOutputConfig
from openapi_server.models.monitoring_job_definition_monitoring_resources import MonitoringJobDefinitionMonitoringResources
from openapi_server.models.monitoring_job_definition_network_config import MonitoringJobDefinitionNetworkConfig
from openapi_server.models.monitoring_job_definition_stopping_condition import MonitoringJobDefinitionStoppingCondition
from openapi_server import util


class MonitoringScheduleConfigMonitoringJobDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, baseline_config: MonitoringJobDefinitionBaselineConfig=None, monitoring_inputs: List=None, monitoring_output_config: MonitoringJobDefinitionMonitoringOutputConfig=None, monitoring_resources: MonitoringJobDefinitionMonitoringResources=None, monitoring_app_specification: MonitoringJobDefinitionMonitoringAppSpecification=None, stopping_condition: MonitoringJobDefinitionStoppingCondition=None, environment: Dict=None, network_config: MonitoringJobDefinitionNetworkConfig=None, role_arn: str=None):
        """MonitoringScheduleConfigMonitoringJobDefinition - a model defined in OpenAPI

        :param baseline_config: The baseline_config of this MonitoringScheduleConfigMonitoringJobDefinition.
        :param monitoring_inputs: The monitoring_inputs of this MonitoringScheduleConfigMonitoringJobDefinition.
        :param monitoring_output_config: The monitoring_output_config of this MonitoringScheduleConfigMonitoringJobDefinition.
        :param monitoring_resources: The monitoring_resources of this MonitoringScheduleConfigMonitoringJobDefinition.
        :param monitoring_app_specification: The monitoring_app_specification of this MonitoringScheduleConfigMonitoringJobDefinition.
        :param stopping_condition: The stopping_condition of this MonitoringScheduleConfigMonitoringJobDefinition.
        :param environment: The environment of this MonitoringScheduleConfigMonitoringJobDefinition.
        :param network_config: The network_config of this MonitoringScheduleConfigMonitoringJobDefinition.
        :param role_arn: The role_arn of this MonitoringScheduleConfigMonitoringJobDefinition.
        """
        self.openapi_types = {
            'baseline_config': MonitoringJobDefinitionBaselineConfig,
            'monitoring_inputs': List,
            'monitoring_output_config': MonitoringJobDefinitionMonitoringOutputConfig,
            'monitoring_resources': MonitoringJobDefinitionMonitoringResources,
            'monitoring_app_specification': MonitoringJobDefinitionMonitoringAppSpecification,
            'stopping_condition': MonitoringJobDefinitionStoppingCondition,
            'environment': Dict,
            'network_config': MonitoringJobDefinitionNetworkConfig,
            'role_arn': str
        }

        self.attribute_map = {
            'baseline_config': 'BaselineConfig',
            'monitoring_inputs': 'MonitoringInputs',
            'monitoring_output_config': 'MonitoringOutputConfig',
            'monitoring_resources': 'MonitoringResources',
            'monitoring_app_specification': 'MonitoringAppSpecification',
            'stopping_condition': 'StoppingCondition',
            'environment': 'Environment',
            'network_config': 'NetworkConfig',
            'role_arn': 'RoleArn'
        }

        self._baseline_config = baseline_config
        self._monitoring_inputs = monitoring_inputs
        self._monitoring_output_config = monitoring_output_config
        self._monitoring_resources = monitoring_resources
        self._monitoring_app_specification = monitoring_app_specification
        self._stopping_condition = stopping_condition
        self._environment = environment
        self._network_config = network_config
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringScheduleConfigMonitoringJobDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringScheduleConfig_MonitoringJobDefinition of this MonitoringScheduleConfigMonitoringJobDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baseline_config(self):
        """Gets the baseline_config of this MonitoringScheduleConfigMonitoringJobDefinition.


        :return: The baseline_config of this MonitoringScheduleConfigMonitoringJobDefinition.
        :rtype: MonitoringJobDefinitionBaselineConfig
        """
        return self._baseline_config

    @baseline_config.setter
    def baseline_config(self, baseline_config):
        """Sets the baseline_config of this MonitoringScheduleConfigMonitoringJobDefinition.


        :param baseline_config: The baseline_config of this MonitoringScheduleConfigMonitoringJobDefinition.
        :type baseline_config: MonitoringJobDefinitionBaselineConfig
        """

        self._baseline_config = baseline_config

    @property
    def monitoring_inputs(self):
        """Gets the monitoring_inputs of this MonitoringScheduleConfigMonitoringJobDefinition.


        :return: The monitoring_inputs of this MonitoringScheduleConfigMonitoringJobDefinition.
        :rtype: List
        """
        return self._monitoring_inputs

    @monitoring_inputs.setter
    def monitoring_inputs(self, monitoring_inputs):
        """Sets the monitoring_inputs of this MonitoringScheduleConfigMonitoringJobDefinition.


        :param monitoring_inputs: The monitoring_inputs of this MonitoringScheduleConfigMonitoringJobDefinition.
        :type monitoring_inputs: List
        """
        if monitoring_inputs is None:
            raise ValueError("Invalid value for `monitoring_inputs`, must not be `None`")

        self._monitoring_inputs = monitoring_inputs

    @property
    def monitoring_output_config(self):
        """Gets the monitoring_output_config of this MonitoringScheduleConfigMonitoringJobDefinition.


        :return: The monitoring_output_config of this MonitoringScheduleConfigMonitoringJobDefinition.
        :rtype: MonitoringJobDefinitionMonitoringOutputConfig
        """
        return self._monitoring_output_config

    @monitoring_output_config.setter
    def monitoring_output_config(self, monitoring_output_config):
        """Sets the monitoring_output_config of this MonitoringScheduleConfigMonitoringJobDefinition.


        :param monitoring_output_config: The monitoring_output_config of this MonitoringScheduleConfigMonitoringJobDefinition.
        :type monitoring_output_config: MonitoringJobDefinitionMonitoringOutputConfig
        """
        if monitoring_output_config is None:
            raise ValueError("Invalid value for `monitoring_output_config`, must not be `None`")

        self._monitoring_output_config = monitoring_output_config

    @property
    def monitoring_resources(self):
        """Gets the monitoring_resources of this MonitoringScheduleConfigMonitoringJobDefinition.


        :return: The monitoring_resources of this MonitoringScheduleConfigMonitoringJobDefinition.
        :rtype: MonitoringJobDefinitionMonitoringResources
        """
        return self._monitoring_resources

    @monitoring_resources.setter
    def monitoring_resources(self, monitoring_resources):
        """Sets the monitoring_resources of this MonitoringScheduleConfigMonitoringJobDefinition.


        :param monitoring_resources: The monitoring_resources of this MonitoringScheduleConfigMonitoringJobDefinition.
        :type monitoring_resources: MonitoringJobDefinitionMonitoringResources
        """
        if monitoring_resources is None:
            raise ValueError("Invalid value for `monitoring_resources`, must not be `None`")

        self._monitoring_resources = monitoring_resources

    @property
    def monitoring_app_specification(self):
        """Gets the monitoring_app_specification of this MonitoringScheduleConfigMonitoringJobDefinition.


        :return: The monitoring_app_specification of this MonitoringScheduleConfigMonitoringJobDefinition.
        :rtype: MonitoringJobDefinitionMonitoringAppSpecification
        """
        return self._monitoring_app_specification

    @monitoring_app_specification.setter
    def monitoring_app_specification(self, monitoring_app_specification):
        """Sets the monitoring_app_specification of this MonitoringScheduleConfigMonitoringJobDefinition.


        :param monitoring_app_specification: The monitoring_app_specification of this MonitoringScheduleConfigMonitoringJobDefinition.
        :type monitoring_app_specification: MonitoringJobDefinitionMonitoringAppSpecification
        """
        if monitoring_app_specification is None:
            raise ValueError("Invalid value for `monitoring_app_specification`, must not be `None`")

        self._monitoring_app_specification = monitoring_app_specification

    @property
    def stopping_condition(self):
        """Gets the stopping_condition of this MonitoringScheduleConfigMonitoringJobDefinition.


        :return: The stopping_condition of this MonitoringScheduleConfigMonitoringJobDefinition.
        :rtype: MonitoringJobDefinitionStoppingCondition
        """
        return self._stopping_condition

    @stopping_condition.setter
    def stopping_condition(self, stopping_condition):
        """Sets the stopping_condition of this MonitoringScheduleConfigMonitoringJobDefinition.


        :param stopping_condition: The stopping_condition of this MonitoringScheduleConfigMonitoringJobDefinition.
        :type stopping_condition: MonitoringJobDefinitionStoppingCondition
        """

        self._stopping_condition = stopping_condition

    @property
    def environment(self):
        """Gets the environment of this MonitoringScheduleConfigMonitoringJobDefinition.


        :return: The environment of this MonitoringScheduleConfigMonitoringJobDefinition.
        :rtype: Dict
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this MonitoringScheduleConfigMonitoringJobDefinition.


        :param environment: The environment of this MonitoringScheduleConfigMonitoringJobDefinition.
        :type environment: Dict
        """

        self._environment = environment

    @property
    def network_config(self):
        """Gets the network_config of this MonitoringScheduleConfigMonitoringJobDefinition.


        :return: The network_config of this MonitoringScheduleConfigMonitoringJobDefinition.
        :rtype: MonitoringJobDefinitionNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this MonitoringScheduleConfigMonitoringJobDefinition.


        :param network_config: The network_config of this MonitoringScheduleConfigMonitoringJobDefinition.
        :type network_config: MonitoringJobDefinitionNetworkConfig
        """

        self._network_config = network_config

    @property
    def role_arn(self):
        """Gets the role_arn of this MonitoringScheduleConfigMonitoringJobDefinition.


        :return: The role_arn of this MonitoringScheduleConfigMonitoringJobDefinition.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this MonitoringScheduleConfigMonitoringJobDefinition.


        :param role_arn: The role_arn of this MonitoringScheduleConfigMonitoringJobDefinition.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn
