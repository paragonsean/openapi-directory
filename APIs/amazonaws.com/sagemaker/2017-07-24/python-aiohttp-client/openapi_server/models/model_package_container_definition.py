# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_package_container_definition_model_input import ModelPackageContainerDefinitionModelInput
from openapi_server import util


class ModelPackageContainerDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_hostname: str=None, image: str=None, image_digest: str=None, model_data_url: str=None, product_id: str=None, environment: Dict=None, model_input: ModelPackageContainerDefinitionModelInput=None, framework: str=None, framework_version: str=None, nearest_model_name: str=None):
        """ModelPackageContainerDefinition - a model defined in OpenAPI

        :param container_hostname: The container_hostname of this ModelPackageContainerDefinition.
        :param image: The image of this ModelPackageContainerDefinition.
        :param image_digest: The image_digest of this ModelPackageContainerDefinition.
        :param model_data_url: The model_data_url of this ModelPackageContainerDefinition.
        :param product_id: The product_id of this ModelPackageContainerDefinition.
        :param environment: The environment of this ModelPackageContainerDefinition.
        :param model_input: The model_input of this ModelPackageContainerDefinition.
        :param framework: The framework of this ModelPackageContainerDefinition.
        :param framework_version: The framework_version of this ModelPackageContainerDefinition.
        :param nearest_model_name: The nearest_model_name of this ModelPackageContainerDefinition.
        """
        self.openapi_types = {
            'container_hostname': str,
            'image': str,
            'image_digest': str,
            'model_data_url': str,
            'product_id': str,
            'environment': Dict,
            'model_input': ModelPackageContainerDefinitionModelInput,
            'framework': str,
            'framework_version': str,
            'nearest_model_name': str
        }

        self.attribute_map = {
            'container_hostname': 'ContainerHostname',
            'image': 'Image',
            'image_digest': 'ImageDigest',
            'model_data_url': 'ModelDataUrl',
            'product_id': 'ProductId',
            'environment': 'Environment',
            'model_input': 'ModelInput',
            'framework': 'Framework',
            'framework_version': 'FrameworkVersion',
            'nearest_model_name': 'NearestModelName'
        }

        self._container_hostname = container_hostname
        self._image = image
        self._image_digest = image_digest
        self._model_data_url = model_data_url
        self._product_id = product_id
        self._environment = environment
        self._model_input = model_input
        self._framework = framework
        self._framework_version = framework_version
        self._nearest_model_name = nearest_model_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelPackageContainerDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelPackageContainerDefinition of this ModelPackageContainerDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_hostname(self):
        """Gets the container_hostname of this ModelPackageContainerDefinition.


        :return: The container_hostname of this ModelPackageContainerDefinition.
        :rtype: str
        """
        return self._container_hostname

    @container_hostname.setter
    def container_hostname(self, container_hostname):
        """Sets the container_hostname of this ModelPackageContainerDefinition.


        :param container_hostname: The container_hostname of this ModelPackageContainerDefinition.
        :type container_hostname: str
        """

        self._container_hostname = container_hostname

    @property
    def image(self):
        """Gets the image of this ModelPackageContainerDefinition.


        :return: The image of this ModelPackageContainerDefinition.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ModelPackageContainerDefinition.


        :param image: The image of this ModelPackageContainerDefinition.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def image_digest(self):
        """Gets the image_digest of this ModelPackageContainerDefinition.


        :return: The image_digest of this ModelPackageContainerDefinition.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this ModelPackageContainerDefinition.


        :param image_digest: The image_digest of this ModelPackageContainerDefinition.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def model_data_url(self):
        """Gets the model_data_url of this ModelPackageContainerDefinition.


        :return: The model_data_url of this ModelPackageContainerDefinition.
        :rtype: str
        """
        return self._model_data_url

    @model_data_url.setter
    def model_data_url(self, model_data_url):
        """Sets the model_data_url of this ModelPackageContainerDefinition.


        :param model_data_url: The model_data_url of this ModelPackageContainerDefinition.
        :type model_data_url: str
        """

        self._model_data_url = model_data_url

    @property
    def product_id(self):
        """Gets the product_id of this ModelPackageContainerDefinition.


        :return: The product_id of this ModelPackageContainerDefinition.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ModelPackageContainerDefinition.


        :param product_id: The product_id of this ModelPackageContainerDefinition.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def environment(self):
        """Gets the environment of this ModelPackageContainerDefinition.


        :return: The environment of this ModelPackageContainerDefinition.
        :rtype: Dict
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ModelPackageContainerDefinition.


        :param environment: The environment of this ModelPackageContainerDefinition.
        :type environment: Dict
        """

        self._environment = environment

    @property
    def model_input(self):
        """Gets the model_input of this ModelPackageContainerDefinition.


        :return: The model_input of this ModelPackageContainerDefinition.
        :rtype: ModelPackageContainerDefinitionModelInput
        """
        return self._model_input

    @model_input.setter
    def model_input(self, model_input):
        """Sets the model_input of this ModelPackageContainerDefinition.


        :param model_input: The model_input of this ModelPackageContainerDefinition.
        :type model_input: ModelPackageContainerDefinitionModelInput
        """

        self._model_input = model_input

    @property
    def framework(self):
        """Gets the framework of this ModelPackageContainerDefinition.


        :return: The framework of this ModelPackageContainerDefinition.
        :rtype: str
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this ModelPackageContainerDefinition.


        :param framework: The framework of this ModelPackageContainerDefinition.
        :type framework: str
        """

        self._framework = framework

    @property
    def framework_version(self):
        """Gets the framework_version of this ModelPackageContainerDefinition.


        :return: The framework_version of this ModelPackageContainerDefinition.
        :rtype: str
        """
        return self._framework_version

    @framework_version.setter
    def framework_version(self, framework_version):
        """Sets the framework_version of this ModelPackageContainerDefinition.


        :param framework_version: The framework_version of this ModelPackageContainerDefinition.
        :type framework_version: str
        """

        self._framework_version = framework_version

    @property
    def nearest_model_name(self):
        """Gets the nearest_model_name of this ModelPackageContainerDefinition.


        :return: The nearest_model_name of this ModelPackageContainerDefinition.
        :rtype: str
        """
        return self._nearest_model_name

    @nearest_model_name.setter
    def nearest_model_name(self, nearest_model_name):
        """Sets the nearest_model_name of this ModelPackageContainerDefinition.


        :param nearest_model_name: The nearest_model_name of this ModelPackageContainerDefinition.
        :type nearest_model_name: str
        """

        self._nearest_model_name = nearest_model_name
