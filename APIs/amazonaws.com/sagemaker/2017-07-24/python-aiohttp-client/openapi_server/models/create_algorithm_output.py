# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAlgorithmOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm_arn: str=None):
        """CreateAlgorithmOutput - a model defined in OpenAPI

        :param algorithm_arn: The algorithm_arn of this CreateAlgorithmOutput.
        """
        self.openapi_types = {
            'algorithm_arn': str
        }

        self.attribute_map = {
            'algorithm_arn': 'AlgorithmArn'
        }

        self._algorithm_arn = algorithm_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAlgorithmOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAlgorithmOutput of this CreateAlgorithmOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm_arn(self):
        """Gets the algorithm_arn of this CreateAlgorithmOutput.


        :return: The algorithm_arn of this CreateAlgorithmOutput.
        :rtype: str
        """
        return self._algorithm_arn

    @algorithm_arn.setter
    def algorithm_arn(self, algorithm_arn):
        """Sets the algorithm_arn of this CreateAlgorithmOutput.


        :param algorithm_arn: The algorithm_arn of this CreateAlgorithmOutput.
        :type algorithm_arn: str
        """
        if algorithm_arn is None:
            raise ValueError("Invalid value for `algorithm_arn`, must not be `None`")

        self._algorithm_arn = algorithm_arn
