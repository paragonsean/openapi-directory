# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoMLContainerDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image: str=None, model_data_url: str=None, environment: Dict=None):
        """AutoMLContainerDefinition - a model defined in OpenAPI

        :param image: The image of this AutoMLContainerDefinition.
        :param model_data_url: The model_data_url of this AutoMLContainerDefinition.
        :param environment: The environment of this AutoMLContainerDefinition.
        """
        self.openapi_types = {
            'image': str,
            'model_data_url': str,
            'environment': Dict
        }

        self.attribute_map = {
            'image': 'Image',
            'model_data_url': 'ModelDataUrl',
            'environment': 'Environment'
        }

        self._image = image
        self._model_data_url = model_data_url
        self._environment = environment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoMLContainerDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoMLContainerDefinition of this AutoMLContainerDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self):
        """Gets the image of this AutoMLContainerDefinition.


        :return: The image of this AutoMLContainerDefinition.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this AutoMLContainerDefinition.


        :param image: The image of this AutoMLContainerDefinition.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def model_data_url(self):
        """Gets the model_data_url of this AutoMLContainerDefinition.


        :return: The model_data_url of this AutoMLContainerDefinition.
        :rtype: str
        """
        return self._model_data_url

    @model_data_url.setter
    def model_data_url(self, model_data_url):
        """Sets the model_data_url of this AutoMLContainerDefinition.


        :param model_data_url: The model_data_url of this AutoMLContainerDefinition.
        :type model_data_url: str
        """
        if model_data_url is None:
            raise ValueError("Invalid value for `model_data_url`, must not be `None`")

        self._model_data_url = model_data_url

    @property
    def environment(self):
        """Gets the environment of this AutoMLContainerDefinition.


        :return: The environment of this AutoMLContainerDefinition.
        :rtype: Dict
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this AutoMLContainerDefinition.


        :param environment: The environment of this AutoMLContainerDefinition.
        :type environment: Dict
        """

        self._environment = environment
