# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.production_variant_instance_type import ProductionVariantInstanceType
from openapi_server import util


class RealTimeInferenceRecommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recommendation_id: str=None, instance_type: ProductionVariantInstanceType=None, environment: Dict=None):
        """RealTimeInferenceRecommendation - a model defined in OpenAPI

        :param recommendation_id: The recommendation_id of this RealTimeInferenceRecommendation.
        :param instance_type: The instance_type of this RealTimeInferenceRecommendation.
        :param environment: The environment of this RealTimeInferenceRecommendation.
        """
        self.openapi_types = {
            'recommendation_id': str,
            'instance_type': ProductionVariantInstanceType,
            'environment': Dict
        }

        self.attribute_map = {
            'recommendation_id': 'RecommendationId',
            'instance_type': 'InstanceType',
            'environment': 'Environment'
        }

        self._recommendation_id = recommendation_id
        self._instance_type = instance_type
        self._environment = environment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealTimeInferenceRecommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RealTimeInferenceRecommendation of this RealTimeInferenceRecommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this RealTimeInferenceRecommendation.


        :return: The recommendation_id of this RealTimeInferenceRecommendation.
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this RealTimeInferenceRecommendation.


        :param recommendation_id: The recommendation_id of this RealTimeInferenceRecommendation.
        :type recommendation_id: str
        """
        if recommendation_id is None:
            raise ValueError("Invalid value for `recommendation_id`, must not be `None`")

        self._recommendation_id = recommendation_id

    @property
    def instance_type(self):
        """Gets the instance_type of this RealTimeInferenceRecommendation.


        :return: The instance_type of this RealTimeInferenceRecommendation.
        :rtype: ProductionVariantInstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this RealTimeInferenceRecommendation.


        :param instance_type: The instance_type of this RealTimeInferenceRecommendation.
        :type instance_type: ProductionVariantInstanceType
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")

        self._instance_type = instance_type

    @property
    def environment(self):
        """Gets the environment of this RealTimeInferenceRecommendation.


        :return: The environment of this RealTimeInferenceRecommendation.
        :rtype: Dict
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this RealTimeInferenceRecommendation.


        :param environment: The environment of this RealTimeInferenceRecommendation.
        :type environment: Dict
        """

        self._environment = environment
