# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabelingJobForWorkteamSummaryLabelCounters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, human_labeled: int=None, pending_human: int=None, total: int=None):
        """LabelingJobForWorkteamSummaryLabelCounters - a model defined in OpenAPI

        :param human_labeled: The human_labeled of this LabelingJobForWorkteamSummaryLabelCounters.
        :param pending_human: The pending_human of this LabelingJobForWorkteamSummaryLabelCounters.
        :param total: The total of this LabelingJobForWorkteamSummaryLabelCounters.
        """
        self.openapi_types = {
            'human_labeled': int,
            'pending_human': int,
            'total': int
        }

        self.attribute_map = {
            'human_labeled': 'HumanLabeled',
            'pending_human': 'PendingHuman',
            'total': 'Total'
        }

        self._human_labeled = human_labeled
        self._pending_human = pending_human
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelingJobForWorkteamSummaryLabelCounters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabelingJobForWorkteamSummary_LabelCounters of this LabelingJobForWorkteamSummaryLabelCounters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def human_labeled(self):
        """Gets the human_labeled of this LabelingJobForWorkteamSummaryLabelCounters.


        :return: The human_labeled of this LabelingJobForWorkteamSummaryLabelCounters.
        :rtype: int
        """
        return self._human_labeled

    @human_labeled.setter
    def human_labeled(self, human_labeled):
        """Sets the human_labeled of this LabelingJobForWorkteamSummaryLabelCounters.


        :param human_labeled: The human_labeled of this LabelingJobForWorkteamSummaryLabelCounters.
        :type human_labeled: int
        """

        self._human_labeled = human_labeled

    @property
    def pending_human(self):
        """Gets the pending_human of this LabelingJobForWorkteamSummaryLabelCounters.


        :return: The pending_human of this LabelingJobForWorkteamSummaryLabelCounters.
        :rtype: int
        """
        return self._pending_human

    @pending_human.setter
    def pending_human(self, pending_human):
        """Sets the pending_human of this LabelingJobForWorkteamSummaryLabelCounters.


        :param pending_human: The pending_human of this LabelingJobForWorkteamSummaryLabelCounters.
        :type pending_human: int
        """

        self._pending_human = pending_human

    @property
    def total(self):
        """Gets the total of this LabelingJobForWorkteamSummaryLabelCounters.


        :return: The total of this LabelingJobForWorkteamSummaryLabelCounters.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this LabelingJobForWorkteamSummaryLabelCounters.


        :param total: The total of this LabelingJobForWorkteamSummaryLabelCounters.
        :type total: int
        """

        self._total = total
