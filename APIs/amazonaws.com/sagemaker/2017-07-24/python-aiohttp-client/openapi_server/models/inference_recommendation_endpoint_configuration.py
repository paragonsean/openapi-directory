# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.production_variant_instance_type import ProductionVariantInstanceType
from openapi_server.models.production_variant_serverless_config import ProductionVariantServerlessConfig
from openapi_server import util


class InferenceRecommendationEndpointConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_name: str=None, variant_name: str=None, instance_type: ProductionVariantInstanceType=None, initial_instance_count: int=None, serverless_config: ProductionVariantServerlessConfig=None):
        """InferenceRecommendationEndpointConfiguration - a model defined in OpenAPI

        :param endpoint_name: The endpoint_name of this InferenceRecommendationEndpointConfiguration.
        :param variant_name: The variant_name of this InferenceRecommendationEndpointConfiguration.
        :param instance_type: The instance_type of this InferenceRecommendationEndpointConfiguration.
        :param initial_instance_count: The initial_instance_count of this InferenceRecommendationEndpointConfiguration.
        :param serverless_config: The serverless_config of this InferenceRecommendationEndpointConfiguration.
        """
        self.openapi_types = {
            'endpoint_name': str,
            'variant_name': str,
            'instance_type': ProductionVariantInstanceType,
            'initial_instance_count': int,
            'serverless_config': ProductionVariantServerlessConfig
        }

        self.attribute_map = {
            'endpoint_name': 'EndpointName',
            'variant_name': 'VariantName',
            'instance_type': 'InstanceType',
            'initial_instance_count': 'InitialInstanceCount',
            'serverless_config': 'ServerlessConfig'
        }

        self._endpoint_name = endpoint_name
        self._variant_name = variant_name
        self._instance_type = instance_type
        self._initial_instance_count = initial_instance_count
        self._serverless_config = serverless_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InferenceRecommendationEndpointConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InferenceRecommendation_EndpointConfiguration of this InferenceRecommendationEndpointConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this InferenceRecommendationEndpointConfiguration.


        :return: The endpoint_name of this InferenceRecommendationEndpointConfiguration.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this InferenceRecommendationEndpointConfiguration.


        :param endpoint_name: The endpoint_name of this InferenceRecommendationEndpointConfiguration.
        :type endpoint_name: str
        """
        if endpoint_name is None:
            raise ValueError("Invalid value for `endpoint_name`, must not be `None`")

        self._endpoint_name = endpoint_name

    @property
    def variant_name(self):
        """Gets the variant_name of this InferenceRecommendationEndpointConfiguration.


        :return: The variant_name of this InferenceRecommendationEndpointConfiguration.
        :rtype: str
        """
        return self._variant_name

    @variant_name.setter
    def variant_name(self, variant_name):
        """Sets the variant_name of this InferenceRecommendationEndpointConfiguration.


        :param variant_name: The variant_name of this InferenceRecommendationEndpointConfiguration.
        :type variant_name: str
        """
        if variant_name is None:
            raise ValueError("Invalid value for `variant_name`, must not be `None`")

        self._variant_name = variant_name

    @property
    def instance_type(self):
        """Gets the instance_type of this InferenceRecommendationEndpointConfiguration.


        :return: The instance_type of this InferenceRecommendationEndpointConfiguration.
        :rtype: ProductionVariantInstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InferenceRecommendationEndpointConfiguration.


        :param instance_type: The instance_type of this InferenceRecommendationEndpointConfiguration.
        :type instance_type: ProductionVariantInstanceType
        """

        self._instance_type = instance_type

    @property
    def initial_instance_count(self):
        """Gets the initial_instance_count of this InferenceRecommendationEndpointConfiguration.


        :return: The initial_instance_count of this InferenceRecommendationEndpointConfiguration.
        :rtype: int
        """
        return self._initial_instance_count

    @initial_instance_count.setter
    def initial_instance_count(self, initial_instance_count):
        """Sets the initial_instance_count of this InferenceRecommendationEndpointConfiguration.


        :param initial_instance_count: The initial_instance_count of this InferenceRecommendationEndpointConfiguration.
        :type initial_instance_count: int
        """

        self._initial_instance_count = initial_instance_count

    @property
    def serverless_config(self):
        """Gets the serverless_config of this InferenceRecommendationEndpointConfiguration.


        :return: The serverless_config of this InferenceRecommendationEndpointConfiguration.
        :rtype: ProductionVariantServerlessConfig
        """
        return self._serverless_config

    @serverless_config.setter
    def serverless_config(self, serverless_config):
        """Sets the serverless_config of this InferenceRecommendationEndpointConfiguration.


        :param serverless_config: The serverless_config of this InferenceRecommendationEndpointConfiguration.
        :type serverless_config: ProductionVariantServerlessConfig
        """

        self._serverless_config = serverless_config
