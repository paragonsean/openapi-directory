# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartNotebookInstanceInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notebook_instance_name: str=None):
        """StartNotebookInstanceInput - a model defined in OpenAPI

        :param notebook_instance_name: The notebook_instance_name of this StartNotebookInstanceInput.
        """
        self.openapi_types = {
            'notebook_instance_name': str
        }

        self.attribute_map = {
            'notebook_instance_name': 'NotebookInstanceName'
        }

        self._notebook_instance_name = notebook_instance_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartNotebookInstanceInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartNotebookInstanceInput of this StartNotebookInstanceInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notebook_instance_name(self):
        """Gets the notebook_instance_name of this StartNotebookInstanceInput.


        :return: The notebook_instance_name of this StartNotebookInstanceInput.
        :rtype: str
        """
        return self._notebook_instance_name

    @notebook_instance_name.setter
    def notebook_instance_name(self, notebook_instance_name):
        """Sets the notebook_instance_name of this StartNotebookInstanceInput.


        :param notebook_instance_name: The notebook_instance_name of this StartNotebookInstanceInput.
        :type notebook_instance_name: str
        """
        if notebook_instance_name is None:
            raise ValueError("Invalid value for `notebook_instance_name`, must not be `None`")

        self._notebook_instance_name = notebook_instance_name
