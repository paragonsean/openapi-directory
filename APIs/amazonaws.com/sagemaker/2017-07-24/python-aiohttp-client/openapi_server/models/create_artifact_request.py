# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_artifact_request_source import CreateArtifactRequestSource
from openapi_server.models.metadata_properties import MetadataProperties
from openapi_server import util


class CreateArtifactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_name: str=None, source: CreateArtifactRequestSource=None, artifact_type: str=None, properties: Dict=None, metadata_properties: MetadataProperties=None, tags: List=None):
        """CreateArtifactRequest - a model defined in OpenAPI

        :param artifact_name: The artifact_name of this CreateArtifactRequest.
        :param source: The source of this CreateArtifactRequest.
        :param artifact_type: The artifact_type of this CreateArtifactRequest.
        :param properties: The properties of this CreateArtifactRequest.
        :param metadata_properties: The metadata_properties of this CreateArtifactRequest.
        :param tags: The tags of this CreateArtifactRequest.
        """
        self.openapi_types = {
            'artifact_name': str,
            'source': CreateArtifactRequestSource,
            'artifact_type': str,
            'properties': Dict,
            'metadata_properties': MetadataProperties,
            'tags': List
        }

        self.attribute_map = {
            'artifact_name': 'ArtifactName',
            'source': 'Source',
            'artifact_type': 'ArtifactType',
            'properties': 'Properties',
            'metadata_properties': 'MetadataProperties',
            'tags': 'Tags'
        }

        self._artifact_name = artifact_name
        self._source = source
        self._artifact_type = artifact_type
        self._properties = properties
        self._metadata_properties = metadata_properties
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateArtifactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateArtifactRequest of this CreateArtifactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_name(self):
        """Gets the artifact_name of this CreateArtifactRequest.


        :return: The artifact_name of this CreateArtifactRequest.
        :rtype: str
        """
        return self._artifact_name

    @artifact_name.setter
    def artifact_name(self, artifact_name):
        """Sets the artifact_name of this CreateArtifactRequest.


        :param artifact_name: The artifact_name of this CreateArtifactRequest.
        :type artifact_name: str
        """

        self._artifact_name = artifact_name

    @property
    def source(self):
        """Gets the source of this CreateArtifactRequest.


        :return: The source of this CreateArtifactRequest.
        :rtype: CreateArtifactRequestSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateArtifactRequest.


        :param source: The source of this CreateArtifactRequest.
        :type source: CreateArtifactRequestSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def artifact_type(self):
        """Gets the artifact_type of this CreateArtifactRequest.


        :return: The artifact_type of this CreateArtifactRequest.
        :rtype: str
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this CreateArtifactRequest.


        :param artifact_type: The artifact_type of this CreateArtifactRequest.
        :type artifact_type: str
        """
        if artifact_type is None:
            raise ValueError("Invalid value for `artifact_type`, must not be `None`")

        self._artifact_type = artifact_type

    @property
    def properties(self):
        """Gets the properties of this CreateArtifactRequest.


        :return: The properties of this CreateArtifactRequest.
        :rtype: Dict
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CreateArtifactRequest.


        :param properties: The properties of this CreateArtifactRequest.
        :type properties: Dict
        """

        self._properties = properties

    @property
    def metadata_properties(self):
        """Gets the metadata_properties of this CreateArtifactRequest.


        :return: The metadata_properties of this CreateArtifactRequest.
        :rtype: MetadataProperties
        """
        return self._metadata_properties

    @metadata_properties.setter
    def metadata_properties(self, metadata_properties):
        """Sets the metadata_properties of this CreateArtifactRequest.


        :param metadata_properties: The metadata_properties of this CreateArtifactRequest.
        :type metadata_properties: MetadataProperties
        """

        self._metadata_properties = metadata_properties

    @property
    def tags(self):
        """Gets the tags of this CreateArtifactRequest.


        :return: The tags of this CreateArtifactRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateArtifactRequest.


        :param tags: The tags of this CreateArtifactRequest.
        :type tags: List
        """

        self._tags = tags
