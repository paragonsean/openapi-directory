# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_ml_job_completion_criteria import AutoMLJobCompletionCriteria
from openapi_server.models.time_series_forecasting_job_config_time_series_config import TimeSeriesForecastingJobConfigTimeSeriesConfig
from openapi_server.models.time_series_forecasting_job_config_transformations import TimeSeriesForecastingJobConfigTransformations
from openapi_server import util


class TimeSeriesForecastingJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_specification_s3_uri: str=None, completion_criteria: AutoMLJobCompletionCriteria=None, forecast_frequency: str=None, forecast_horizon: int=None, forecast_quantiles: List=None, transformations: TimeSeriesForecastingJobConfigTransformations=None, time_series_config: TimeSeriesForecastingJobConfigTimeSeriesConfig=None):
        """TimeSeriesForecastingJobConfig - a model defined in OpenAPI

        :param feature_specification_s3_uri: The feature_specification_s3_uri of this TimeSeriesForecastingJobConfig.
        :param completion_criteria: The completion_criteria of this TimeSeriesForecastingJobConfig.
        :param forecast_frequency: The forecast_frequency of this TimeSeriesForecastingJobConfig.
        :param forecast_horizon: The forecast_horizon of this TimeSeriesForecastingJobConfig.
        :param forecast_quantiles: The forecast_quantiles of this TimeSeriesForecastingJobConfig.
        :param transformations: The transformations of this TimeSeriesForecastingJobConfig.
        :param time_series_config: The time_series_config of this TimeSeriesForecastingJobConfig.
        """
        self.openapi_types = {
            'feature_specification_s3_uri': str,
            'completion_criteria': AutoMLJobCompletionCriteria,
            'forecast_frequency': str,
            'forecast_horizon': int,
            'forecast_quantiles': List,
            'transformations': TimeSeriesForecastingJobConfigTransformations,
            'time_series_config': TimeSeriesForecastingJobConfigTimeSeriesConfig
        }

        self.attribute_map = {
            'feature_specification_s3_uri': 'FeatureSpecificationS3Uri',
            'completion_criteria': 'CompletionCriteria',
            'forecast_frequency': 'ForecastFrequency',
            'forecast_horizon': 'ForecastHorizon',
            'forecast_quantiles': 'ForecastQuantiles',
            'transformations': 'Transformations',
            'time_series_config': 'TimeSeriesConfig'
        }

        self._feature_specification_s3_uri = feature_specification_s3_uri
        self._completion_criteria = completion_criteria
        self._forecast_frequency = forecast_frequency
        self._forecast_horizon = forecast_horizon
        self._forecast_quantiles = forecast_quantiles
        self._transformations = transformations
        self._time_series_config = time_series_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesForecastingJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesForecastingJobConfig of this TimeSeriesForecastingJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_specification_s3_uri(self):
        """Gets the feature_specification_s3_uri of this TimeSeriesForecastingJobConfig.


        :return: The feature_specification_s3_uri of this TimeSeriesForecastingJobConfig.
        :rtype: str
        """
        return self._feature_specification_s3_uri

    @feature_specification_s3_uri.setter
    def feature_specification_s3_uri(self, feature_specification_s3_uri):
        """Sets the feature_specification_s3_uri of this TimeSeriesForecastingJobConfig.


        :param feature_specification_s3_uri: The feature_specification_s3_uri of this TimeSeriesForecastingJobConfig.
        :type feature_specification_s3_uri: str
        """

        self._feature_specification_s3_uri = feature_specification_s3_uri

    @property
    def completion_criteria(self):
        """Gets the completion_criteria of this TimeSeriesForecastingJobConfig.


        :return: The completion_criteria of this TimeSeriesForecastingJobConfig.
        :rtype: AutoMLJobCompletionCriteria
        """
        return self._completion_criteria

    @completion_criteria.setter
    def completion_criteria(self, completion_criteria):
        """Sets the completion_criteria of this TimeSeriesForecastingJobConfig.


        :param completion_criteria: The completion_criteria of this TimeSeriesForecastingJobConfig.
        :type completion_criteria: AutoMLJobCompletionCriteria
        """

        self._completion_criteria = completion_criteria

    @property
    def forecast_frequency(self):
        """Gets the forecast_frequency of this TimeSeriesForecastingJobConfig.


        :return: The forecast_frequency of this TimeSeriesForecastingJobConfig.
        :rtype: str
        """
        return self._forecast_frequency

    @forecast_frequency.setter
    def forecast_frequency(self, forecast_frequency):
        """Sets the forecast_frequency of this TimeSeriesForecastingJobConfig.


        :param forecast_frequency: The forecast_frequency of this TimeSeriesForecastingJobConfig.
        :type forecast_frequency: str
        """
        if forecast_frequency is None:
            raise ValueError("Invalid value for `forecast_frequency`, must not be `None`")

        self._forecast_frequency = forecast_frequency

    @property
    def forecast_horizon(self):
        """Gets the forecast_horizon of this TimeSeriesForecastingJobConfig.


        :return: The forecast_horizon of this TimeSeriesForecastingJobConfig.
        :rtype: int
        """
        return self._forecast_horizon

    @forecast_horizon.setter
    def forecast_horizon(self, forecast_horizon):
        """Sets the forecast_horizon of this TimeSeriesForecastingJobConfig.


        :param forecast_horizon: The forecast_horizon of this TimeSeriesForecastingJobConfig.
        :type forecast_horizon: int
        """
        if forecast_horizon is None:
            raise ValueError("Invalid value for `forecast_horizon`, must not be `None`")

        self._forecast_horizon = forecast_horizon

    @property
    def forecast_quantiles(self):
        """Gets the forecast_quantiles of this TimeSeriesForecastingJobConfig.


        :return: The forecast_quantiles of this TimeSeriesForecastingJobConfig.
        :rtype: List
        """
        return self._forecast_quantiles

    @forecast_quantiles.setter
    def forecast_quantiles(self, forecast_quantiles):
        """Sets the forecast_quantiles of this TimeSeriesForecastingJobConfig.


        :param forecast_quantiles: The forecast_quantiles of this TimeSeriesForecastingJobConfig.
        :type forecast_quantiles: List
        """

        self._forecast_quantiles = forecast_quantiles

    @property
    def transformations(self):
        """Gets the transformations of this TimeSeriesForecastingJobConfig.


        :return: The transformations of this TimeSeriesForecastingJobConfig.
        :rtype: TimeSeriesForecastingJobConfigTransformations
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations):
        """Sets the transformations of this TimeSeriesForecastingJobConfig.


        :param transformations: The transformations of this TimeSeriesForecastingJobConfig.
        :type transformations: TimeSeriesForecastingJobConfigTransformations
        """

        self._transformations = transformations

    @property
    def time_series_config(self):
        """Gets the time_series_config of this TimeSeriesForecastingJobConfig.


        :return: The time_series_config of this TimeSeriesForecastingJobConfig.
        :rtype: TimeSeriesForecastingJobConfigTimeSeriesConfig
        """
        return self._time_series_config

    @time_series_config.setter
    def time_series_config(self, time_series_config):
        """Sets the time_series_config of this TimeSeriesForecastingJobConfig.


        :param time_series_config: The time_series_config of this TimeSeriesForecastingJobConfig.
        :type time_series_config: TimeSeriesForecastingJobConfigTimeSeriesConfig
        """
        if time_series_config is None:
            raise ValueError("Invalid value for `time_series_config`, must not be `None`")

        self._time_series_config = time_series_config
