# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CognitoConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool: str=None, client_id: str=None):
        """CognitoConfig - a model defined in OpenAPI

        :param user_pool: The user_pool of this CognitoConfig.
        :param client_id: The client_id of this CognitoConfig.
        """
        self.openapi_types = {
            'user_pool': str,
            'client_id': str
        }

        self.attribute_map = {
            'user_pool': 'UserPool',
            'client_id': 'ClientId'
        }

        self._user_pool = user_pool
        self._client_id = client_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CognitoConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CognitoConfig of this CognitoConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool(self):
        """Gets the user_pool of this CognitoConfig.


        :return: The user_pool of this CognitoConfig.
        :rtype: str
        """
        return self._user_pool

    @user_pool.setter
    def user_pool(self, user_pool):
        """Sets the user_pool of this CognitoConfig.


        :param user_pool: The user_pool of this CognitoConfig.
        :type user_pool: str
        """
        if user_pool is None:
            raise ValueError("Invalid value for `user_pool`, must not be `None`")

        self._user_pool = user_pool

    @property
    def client_id(self):
        """Gets the client_id of this CognitoConfig.


        :return: The client_id of this CognitoConfig.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CognitoConfig.


        :param client_id: The client_id of this CognitoConfig.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id
