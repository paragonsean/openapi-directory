# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_stage_deployment_config import DeploymentStageDeploymentConfig
from openapi_server.models.deployment_stage_device_selection_config import DeploymentStageDeviceSelectionConfig
from openapi_server import util


class DeploymentStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stage_name: str=None, device_selection_config: DeploymentStageDeviceSelectionConfig=None, deployment_config: DeploymentStageDeploymentConfig=None):
        """DeploymentStage - a model defined in OpenAPI

        :param stage_name: The stage_name of this DeploymentStage.
        :param device_selection_config: The device_selection_config of this DeploymentStage.
        :param deployment_config: The deployment_config of this DeploymentStage.
        """
        self.openapi_types = {
            'stage_name': str,
            'device_selection_config': DeploymentStageDeviceSelectionConfig,
            'deployment_config': DeploymentStageDeploymentConfig
        }

        self.attribute_map = {
            'stage_name': 'StageName',
            'device_selection_config': 'DeviceSelectionConfig',
            'deployment_config': 'DeploymentConfig'
        }

        self._stage_name = stage_name
        self._device_selection_config = device_selection_config
        self._deployment_config = deployment_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentStage of this DeploymentStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stage_name(self):
        """Gets the stage_name of this DeploymentStage.


        :return: The stage_name of this DeploymentStage.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this DeploymentStage.


        :param stage_name: The stage_name of this DeploymentStage.
        :type stage_name: str
        """
        if stage_name is None:
            raise ValueError("Invalid value for `stage_name`, must not be `None`")

        self._stage_name = stage_name

    @property
    def device_selection_config(self):
        """Gets the device_selection_config of this DeploymentStage.


        :return: The device_selection_config of this DeploymentStage.
        :rtype: DeploymentStageDeviceSelectionConfig
        """
        return self._device_selection_config

    @device_selection_config.setter
    def device_selection_config(self, device_selection_config):
        """Sets the device_selection_config of this DeploymentStage.


        :param device_selection_config: The device_selection_config of this DeploymentStage.
        :type device_selection_config: DeploymentStageDeviceSelectionConfig
        """
        if device_selection_config is None:
            raise ValueError("Invalid value for `device_selection_config`, must not be `None`")

        self._device_selection_config = device_selection_config

    @property
    def deployment_config(self):
        """Gets the deployment_config of this DeploymentStage.


        :return: The deployment_config of this DeploymentStage.
        :rtype: DeploymentStageDeploymentConfig
        """
        return self._deployment_config

    @deployment_config.setter
    def deployment_config(self, deployment_config):
        """Sets the deployment_config of this DeploymentStage.


        :param deployment_config: The deployment_config of this DeploymentStage.
        :type deployment_config: DeploymentStageDeploymentConfig
        """

        self._deployment_config = deployment_config
