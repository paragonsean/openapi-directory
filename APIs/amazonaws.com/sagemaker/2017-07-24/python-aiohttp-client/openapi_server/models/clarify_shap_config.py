# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clarify_shap_config_shap_baseline_config import ClarifyShapConfigShapBaselineConfig
from openapi_server.models.clarify_shap_config_text_config import ClarifyShapConfigTextConfig
from openapi_server import util


class ClarifyShapConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shap_baseline_config: ClarifyShapConfigShapBaselineConfig=None, number_of_samples: int=None, use_logit: bool=None, seed: int=None, text_config: ClarifyShapConfigTextConfig=None):
        """ClarifyShapConfig - a model defined in OpenAPI

        :param shap_baseline_config: The shap_baseline_config of this ClarifyShapConfig.
        :param number_of_samples: The number_of_samples of this ClarifyShapConfig.
        :param use_logit: The use_logit of this ClarifyShapConfig.
        :param seed: The seed of this ClarifyShapConfig.
        :param text_config: The text_config of this ClarifyShapConfig.
        """
        self.openapi_types = {
            'shap_baseline_config': ClarifyShapConfigShapBaselineConfig,
            'number_of_samples': int,
            'use_logit': bool,
            'seed': int,
            'text_config': ClarifyShapConfigTextConfig
        }

        self.attribute_map = {
            'shap_baseline_config': 'ShapBaselineConfig',
            'number_of_samples': 'NumberOfSamples',
            'use_logit': 'UseLogit',
            'seed': 'Seed',
            'text_config': 'TextConfig'
        }

        self._shap_baseline_config = shap_baseline_config
        self._number_of_samples = number_of_samples
        self._use_logit = use_logit
        self._seed = seed
        self._text_config = text_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClarifyShapConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClarifyShapConfig of this ClarifyShapConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shap_baseline_config(self):
        """Gets the shap_baseline_config of this ClarifyShapConfig.


        :return: The shap_baseline_config of this ClarifyShapConfig.
        :rtype: ClarifyShapConfigShapBaselineConfig
        """
        return self._shap_baseline_config

    @shap_baseline_config.setter
    def shap_baseline_config(self, shap_baseline_config):
        """Sets the shap_baseline_config of this ClarifyShapConfig.


        :param shap_baseline_config: The shap_baseline_config of this ClarifyShapConfig.
        :type shap_baseline_config: ClarifyShapConfigShapBaselineConfig
        """
        if shap_baseline_config is None:
            raise ValueError("Invalid value for `shap_baseline_config`, must not be `None`")

        self._shap_baseline_config = shap_baseline_config

    @property
    def number_of_samples(self):
        """Gets the number_of_samples of this ClarifyShapConfig.


        :return: The number_of_samples of this ClarifyShapConfig.
        :rtype: int
        """
        return self._number_of_samples

    @number_of_samples.setter
    def number_of_samples(self, number_of_samples):
        """Sets the number_of_samples of this ClarifyShapConfig.


        :param number_of_samples: The number_of_samples of this ClarifyShapConfig.
        :type number_of_samples: int
        """

        self._number_of_samples = number_of_samples

    @property
    def use_logit(self):
        """Gets the use_logit of this ClarifyShapConfig.


        :return: The use_logit of this ClarifyShapConfig.
        :rtype: bool
        """
        return self._use_logit

    @use_logit.setter
    def use_logit(self, use_logit):
        """Sets the use_logit of this ClarifyShapConfig.


        :param use_logit: The use_logit of this ClarifyShapConfig.
        :type use_logit: bool
        """

        self._use_logit = use_logit

    @property
    def seed(self):
        """Gets the seed of this ClarifyShapConfig.


        :return: The seed of this ClarifyShapConfig.
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this ClarifyShapConfig.


        :param seed: The seed of this ClarifyShapConfig.
        :type seed: int
        """

        self._seed = seed

    @property
    def text_config(self):
        """Gets the text_config of this ClarifyShapConfig.


        :return: The text_config of this ClarifyShapConfig.
        :rtype: ClarifyShapConfigTextConfig
        """
        return self._text_config

    @text_config.setter
    def text_config(self, text_config):
        """Sets the text_config of this ClarifyShapConfig.


        :param text_config: The text_config of this ClarifyShapConfig.
        :type text_config: ClarifyShapConfigTextConfig
        """

        self._text_config = text_config
