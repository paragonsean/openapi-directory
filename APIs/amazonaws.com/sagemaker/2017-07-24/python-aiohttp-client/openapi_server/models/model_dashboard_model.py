# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_dashboard_model_model import ModelDashboardModelModel
from openapi_server.models.model_dashboard_model_model_card import ModelDashboardModelModelCard
from openapi_server.models.transform_job import TransformJob
from openapi_server import util


class ModelDashboardModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model: ModelDashboardModelModel=None, endpoints: List=None, last_batch_transform_job: TransformJob=None, monitoring_schedules: List=None, model_card: ModelDashboardModelModelCard=None):
        """ModelDashboardModel - a model defined in OpenAPI

        :param model: The model of this ModelDashboardModel.
        :param endpoints: The endpoints of this ModelDashboardModel.
        :param last_batch_transform_job: The last_batch_transform_job of this ModelDashboardModel.
        :param monitoring_schedules: The monitoring_schedules of this ModelDashboardModel.
        :param model_card: The model_card of this ModelDashboardModel.
        """
        self.openapi_types = {
            'model': ModelDashboardModelModel,
            'endpoints': List,
            'last_batch_transform_job': TransformJob,
            'monitoring_schedules': List,
            'model_card': ModelDashboardModelModelCard
        }

        self.attribute_map = {
            'model': 'Model',
            'endpoints': 'Endpoints',
            'last_batch_transform_job': 'LastBatchTransformJob',
            'monitoring_schedules': 'MonitoringSchedules',
            'model_card': 'ModelCard'
        }

        self._model = model
        self._endpoints = endpoints
        self._last_batch_transform_job = last_batch_transform_job
        self._monitoring_schedules = monitoring_schedules
        self._model_card = model_card

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelDashboardModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelDashboardModel of this ModelDashboardModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self):
        """Gets the model of this ModelDashboardModel.


        :return: The model of this ModelDashboardModel.
        :rtype: ModelDashboardModelModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModelDashboardModel.


        :param model: The model of this ModelDashboardModel.
        :type model: ModelDashboardModelModel
        """

        self._model = model

    @property
    def endpoints(self):
        """Gets the endpoints of this ModelDashboardModel.


        :return: The endpoints of this ModelDashboardModel.
        :rtype: List
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ModelDashboardModel.


        :param endpoints: The endpoints of this ModelDashboardModel.
        :type endpoints: List
        """

        self._endpoints = endpoints

    @property
    def last_batch_transform_job(self):
        """Gets the last_batch_transform_job of this ModelDashboardModel.


        :return: The last_batch_transform_job of this ModelDashboardModel.
        :rtype: TransformJob
        """
        return self._last_batch_transform_job

    @last_batch_transform_job.setter
    def last_batch_transform_job(self, last_batch_transform_job):
        """Sets the last_batch_transform_job of this ModelDashboardModel.


        :param last_batch_transform_job: The last_batch_transform_job of this ModelDashboardModel.
        :type last_batch_transform_job: TransformJob
        """

        self._last_batch_transform_job = last_batch_transform_job

    @property
    def monitoring_schedules(self):
        """Gets the monitoring_schedules of this ModelDashboardModel.


        :return: The monitoring_schedules of this ModelDashboardModel.
        :rtype: List
        """
        return self._monitoring_schedules

    @monitoring_schedules.setter
    def monitoring_schedules(self, monitoring_schedules):
        """Sets the monitoring_schedules of this ModelDashboardModel.


        :param monitoring_schedules: The monitoring_schedules of this ModelDashboardModel.
        :type monitoring_schedules: List
        """

        self._monitoring_schedules = monitoring_schedules

    @property
    def model_card(self):
        """Gets the model_card of this ModelDashboardModel.


        :return: The model_card of this ModelDashboardModel.
        :rtype: ModelDashboardModelModelCard
        """
        return self._model_card

    @model_card.setter
    def model_card(self, model_card):
        """Sets the model_card of this ModelDashboardModel.


        :param model_card: The model_card of this ModelDashboardModel.
        :type model_card: ModelDashboardModelModelCard
        """

        self._model_card = model_card
