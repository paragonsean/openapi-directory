# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output_config_target_platform import OutputConfigTargetPlatform
from openapi_server.models.target_device import TargetDevice
from openapi_server import util


class OutputConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_output_location: str=None, target_device: TargetDevice=None, target_platform: OutputConfigTargetPlatform=None, compiler_options: str=None, kms_key_id: str=None):
        """OutputConfig - a model defined in OpenAPI

        :param s3_output_location: The s3_output_location of this OutputConfig.
        :param target_device: The target_device of this OutputConfig.
        :param target_platform: The target_platform of this OutputConfig.
        :param compiler_options: The compiler_options of this OutputConfig.
        :param kms_key_id: The kms_key_id of this OutputConfig.
        """
        self.openapi_types = {
            's3_output_location': str,
            'target_device': TargetDevice,
            'target_platform': OutputConfigTargetPlatform,
            'compiler_options': str,
            'kms_key_id': str
        }

        self.attribute_map = {
            's3_output_location': 'S3OutputLocation',
            'target_device': 'TargetDevice',
            'target_platform': 'TargetPlatform',
            'compiler_options': 'CompilerOptions',
            'kms_key_id': 'KmsKeyId'
        }

        self._s3_output_location = s3_output_location
        self._target_device = target_device
        self._target_platform = target_platform
        self._compiler_options = compiler_options
        self._kms_key_id = kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputConfig of this OutputConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_output_location(self):
        """Gets the s3_output_location of this OutputConfig.


        :return: The s3_output_location of this OutputConfig.
        :rtype: str
        """
        return self._s3_output_location

    @s3_output_location.setter
    def s3_output_location(self, s3_output_location):
        """Sets the s3_output_location of this OutputConfig.


        :param s3_output_location: The s3_output_location of this OutputConfig.
        :type s3_output_location: str
        """
        if s3_output_location is None:
            raise ValueError("Invalid value for `s3_output_location`, must not be `None`")

        self._s3_output_location = s3_output_location

    @property
    def target_device(self):
        """Gets the target_device of this OutputConfig.


        :return: The target_device of this OutputConfig.
        :rtype: TargetDevice
        """
        return self._target_device

    @target_device.setter
    def target_device(self, target_device):
        """Sets the target_device of this OutputConfig.


        :param target_device: The target_device of this OutputConfig.
        :type target_device: TargetDevice
        """

        self._target_device = target_device

    @property
    def target_platform(self):
        """Gets the target_platform of this OutputConfig.


        :return: The target_platform of this OutputConfig.
        :rtype: OutputConfigTargetPlatform
        """
        return self._target_platform

    @target_platform.setter
    def target_platform(self, target_platform):
        """Sets the target_platform of this OutputConfig.


        :param target_platform: The target_platform of this OutputConfig.
        :type target_platform: OutputConfigTargetPlatform
        """

        self._target_platform = target_platform

    @property
    def compiler_options(self):
        """Gets the compiler_options of this OutputConfig.


        :return: The compiler_options of this OutputConfig.
        :rtype: str
        """
        return self._compiler_options

    @compiler_options.setter
    def compiler_options(self, compiler_options):
        """Sets the compiler_options of this OutputConfig.


        :param compiler_options: The compiler_options of this OutputConfig.
        :type compiler_options: str
        """

        self._compiler_options = compiler_options

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this OutputConfig.


        :return: The kms_key_id of this OutputConfig.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this OutputConfig.


        :param kms_key_id: The kms_key_id of this OutputConfig.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id
