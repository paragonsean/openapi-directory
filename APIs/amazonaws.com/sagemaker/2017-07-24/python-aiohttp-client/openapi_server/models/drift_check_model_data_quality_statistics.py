# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DriftCheckModelDataQualityStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, content_digest: str=None, s3_uri: str=None):
        """DriftCheckModelDataQualityStatistics - a model defined in OpenAPI

        :param content_type: The content_type of this DriftCheckModelDataQualityStatistics.
        :param content_digest: The content_digest of this DriftCheckModelDataQualityStatistics.
        :param s3_uri: The s3_uri of this DriftCheckModelDataQualityStatistics.
        """
        self.openapi_types = {
            'content_type': str,
            'content_digest': str,
            's3_uri': str
        }

        self.attribute_map = {
            'content_type': 'ContentType',
            'content_digest': 'ContentDigest',
            's3_uri': 'S3Uri'
        }

        self._content_type = content_type
        self._content_digest = content_digest
        self._s3_uri = s3_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriftCheckModelDataQualityStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DriftCheckModelDataQuality_Statistics of this DriftCheckModelDataQualityStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this DriftCheckModelDataQualityStatistics.


        :return: The content_type of this DriftCheckModelDataQualityStatistics.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DriftCheckModelDataQualityStatistics.


        :param content_type: The content_type of this DriftCheckModelDataQualityStatistics.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def content_digest(self):
        """Gets the content_digest of this DriftCheckModelDataQualityStatistics.


        :return: The content_digest of this DriftCheckModelDataQualityStatistics.
        :rtype: str
        """
        return self._content_digest

    @content_digest.setter
    def content_digest(self, content_digest):
        """Sets the content_digest of this DriftCheckModelDataQualityStatistics.


        :param content_digest: The content_digest of this DriftCheckModelDataQualityStatistics.
        :type content_digest: str
        """

        self._content_digest = content_digest

    @property
    def s3_uri(self):
        """Gets the s3_uri of this DriftCheckModelDataQualityStatistics.


        :return: The s3_uri of this DriftCheckModelDataQualityStatistics.
        :rtype: str
        """
        return self._s3_uri

    @s3_uri.setter
    def s3_uri(self, s3_uri):
        """Sets the s3_uri of this DriftCheckModelDataQualityStatistics.


        :param s3_uri: The s3_uri of this DriftCheckModelDataQualityStatistics.
        :type s3_uri: str
        """
        if s3_uri is None:
            raise ValueError("Invalid value for `s3_uri`, must not be `None`")

        self._s3_uri = s3_uri
