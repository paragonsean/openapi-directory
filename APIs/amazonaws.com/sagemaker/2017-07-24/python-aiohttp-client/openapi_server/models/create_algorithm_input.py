# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_algorithm_input_inference_specification import CreateAlgorithmInputInferenceSpecification
from openapi_server.models.create_algorithm_input_training_specification import CreateAlgorithmInputTrainingSpecification
from openapi_server.models.create_algorithm_input_validation_specification import CreateAlgorithmInputValidationSpecification
from openapi_server import util


class CreateAlgorithmInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm_name: str=None, algorithm_description: str=None, training_specification: CreateAlgorithmInputTrainingSpecification=None, inference_specification: CreateAlgorithmInputInferenceSpecification=None, validation_specification: CreateAlgorithmInputValidationSpecification=None, certify_for_marketplace: bool=None, tags: List=None):
        """CreateAlgorithmInput - a model defined in OpenAPI

        :param algorithm_name: The algorithm_name of this CreateAlgorithmInput.
        :param algorithm_description: The algorithm_description of this CreateAlgorithmInput.
        :param training_specification: The training_specification of this CreateAlgorithmInput.
        :param inference_specification: The inference_specification of this CreateAlgorithmInput.
        :param validation_specification: The validation_specification of this CreateAlgorithmInput.
        :param certify_for_marketplace: The certify_for_marketplace of this CreateAlgorithmInput.
        :param tags: The tags of this CreateAlgorithmInput.
        """
        self.openapi_types = {
            'algorithm_name': str,
            'algorithm_description': str,
            'training_specification': CreateAlgorithmInputTrainingSpecification,
            'inference_specification': CreateAlgorithmInputInferenceSpecification,
            'validation_specification': CreateAlgorithmInputValidationSpecification,
            'certify_for_marketplace': bool,
            'tags': List
        }

        self.attribute_map = {
            'algorithm_name': 'AlgorithmName',
            'algorithm_description': 'AlgorithmDescription',
            'training_specification': 'TrainingSpecification',
            'inference_specification': 'InferenceSpecification',
            'validation_specification': 'ValidationSpecification',
            'certify_for_marketplace': 'CertifyForMarketplace',
            'tags': 'Tags'
        }

        self._algorithm_name = algorithm_name
        self._algorithm_description = algorithm_description
        self._training_specification = training_specification
        self._inference_specification = inference_specification
        self._validation_specification = validation_specification
        self._certify_for_marketplace = certify_for_marketplace
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAlgorithmInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAlgorithmInput of this CreateAlgorithmInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm_name(self):
        """Gets the algorithm_name of this CreateAlgorithmInput.


        :return: The algorithm_name of this CreateAlgorithmInput.
        :rtype: str
        """
        return self._algorithm_name

    @algorithm_name.setter
    def algorithm_name(self, algorithm_name):
        """Sets the algorithm_name of this CreateAlgorithmInput.


        :param algorithm_name: The algorithm_name of this CreateAlgorithmInput.
        :type algorithm_name: str
        """
        if algorithm_name is None:
            raise ValueError("Invalid value for `algorithm_name`, must not be `None`")

        self._algorithm_name = algorithm_name

    @property
    def algorithm_description(self):
        """Gets the algorithm_description of this CreateAlgorithmInput.


        :return: The algorithm_description of this CreateAlgorithmInput.
        :rtype: str
        """
        return self._algorithm_description

    @algorithm_description.setter
    def algorithm_description(self, algorithm_description):
        """Sets the algorithm_description of this CreateAlgorithmInput.


        :param algorithm_description: The algorithm_description of this CreateAlgorithmInput.
        :type algorithm_description: str
        """

        self._algorithm_description = algorithm_description

    @property
    def training_specification(self):
        """Gets the training_specification of this CreateAlgorithmInput.


        :return: The training_specification of this CreateAlgorithmInput.
        :rtype: CreateAlgorithmInputTrainingSpecification
        """
        return self._training_specification

    @training_specification.setter
    def training_specification(self, training_specification):
        """Sets the training_specification of this CreateAlgorithmInput.


        :param training_specification: The training_specification of this CreateAlgorithmInput.
        :type training_specification: CreateAlgorithmInputTrainingSpecification
        """
        if training_specification is None:
            raise ValueError("Invalid value for `training_specification`, must not be `None`")

        self._training_specification = training_specification

    @property
    def inference_specification(self):
        """Gets the inference_specification of this CreateAlgorithmInput.


        :return: The inference_specification of this CreateAlgorithmInput.
        :rtype: CreateAlgorithmInputInferenceSpecification
        """
        return self._inference_specification

    @inference_specification.setter
    def inference_specification(self, inference_specification):
        """Sets the inference_specification of this CreateAlgorithmInput.


        :param inference_specification: The inference_specification of this CreateAlgorithmInput.
        :type inference_specification: CreateAlgorithmInputInferenceSpecification
        """

        self._inference_specification = inference_specification

    @property
    def validation_specification(self):
        """Gets the validation_specification of this CreateAlgorithmInput.


        :return: The validation_specification of this CreateAlgorithmInput.
        :rtype: CreateAlgorithmInputValidationSpecification
        """
        return self._validation_specification

    @validation_specification.setter
    def validation_specification(self, validation_specification):
        """Sets the validation_specification of this CreateAlgorithmInput.


        :param validation_specification: The validation_specification of this CreateAlgorithmInput.
        :type validation_specification: CreateAlgorithmInputValidationSpecification
        """

        self._validation_specification = validation_specification

    @property
    def certify_for_marketplace(self):
        """Gets the certify_for_marketplace of this CreateAlgorithmInput.


        :return: The certify_for_marketplace of this CreateAlgorithmInput.
        :rtype: bool
        """
        return self._certify_for_marketplace

    @certify_for_marketplace.setter
    def certify_for_marketplace(self, certify_for_marketplace):
        """Sets the certify_for_marketplace of this CreateAlgorithmInput.


        :param certify_for_marketplace: The certify_for_marketplace of this CreateAlgorithmInput.
        :type certify_for_marketplace: bool
        """

        self._certify_for_marketplace = certify_for_marketplace

    @property
    def tags(self):
        """Gets the tags of this CreateAlgorithmInput.


        :return: The tags of this CreateAlgorithmInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAlgorithmInput.


        :param tags: The tags of this CreateAlgorithmInput.
        :type tags: List
        """

        self._tags = tags
