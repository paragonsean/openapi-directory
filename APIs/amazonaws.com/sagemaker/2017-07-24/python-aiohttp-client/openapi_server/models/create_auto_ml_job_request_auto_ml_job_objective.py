# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_ml_metric_enum import AutoMLMetricEnum
from openapi_server import util


class CreateAutoMLJobRequestAutoMLJobObjective(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: AutoMLMetricEnum=None):
        """CreateAutoMLJobRequestAutoMLJobObjective - a model defined in OpenAPI

        :param metric_name: The metric_name of this CreateAutoMLJobRequestAutoMLJobObjective.
        """
        self.openapi_types = {
            'metric_name': AutoMLMetricEnum
        }

        self.attribute_map = {
            'metric_name': 'MetricName'
        }

        self._metric_name = metric_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAutoMLJobRequestAutoMLJobObjective':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAutoMLJobRequest_AutoMLJobObjective of this CreateAutoMLJobRequestAutoMLJobObjective.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this CreateAutoMLJobRequestAutoMLJobObjective.


        :return: The metric_name of this CreateAutoMLJobRequestAutoMLJobObjective.
        :rtype: AutoMLMetricEnum
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this CreateAutoMLJobRequestAutoMLJobObjective.


        :param metric_name: The metric_name of this CreateAutoMLJobRequestAutoMLJobObjective.
        :type metric_name: AutoMLMetricEnum
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name
