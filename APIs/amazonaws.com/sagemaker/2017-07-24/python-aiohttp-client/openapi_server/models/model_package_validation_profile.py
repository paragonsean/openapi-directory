# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_package_validation_profile_transform_job_definition import ModelPackageValidationProfileTransformJobDefinition
from openapi_server import util


class ModelPackageValidationProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_name: str=None, transform_job_definition: ModelPackageValidationProfileTransformJobDefinition=None):
        """ModelPackageValidationProfile - a model defined in OpenAPI

        :param profile_name: The profile_name of this ModelPackageValidationProfile.
        :param transform_job_definition: The transform_job_definition of this ModelPackageValidationProfile.
        """
        self.openapi_types = {
            'profile_name': str,
            'transform_job_definition': ModelPackageValidationProfileTransformJobDefinition
        }

        self.attribute_map = {
            'profile_name': 'ProfileName',
            'transform_job_definition': 'TransformJobDefinition'
        }

        self._profile_name = profile_name
        self._transform_job_definition = transform_job_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelPackageValidationProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelPackageValidationProfile of this ModelPackageValidationProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_name(self):
        """Gets the profile_name of this ModelPackageValidationProfile.


        :return: The profile_name of this ModelPackageValidationProfile.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this ModelPackageValidationProfile.


        :param profile_name: The profile_name of this ModelPackageValidationProfile.
        :type profile_name: str
        """
        if profile_name is None:
            raise ValueError("Invalid value for `profile_name`, must not be `None`")

        self._profile_name = profile_name

    @property
    def transform_job_definition(self):
        """Gets the transform_job_definition of this ModelPackageValidationProfile.


        :return: The transform_job_definition of this ModelPackageValidationProfile.
        :rtype: ModelPackageValidationProfileTransformJobDefinition
        """
        return self._transform_job_definition

    @transform_job_definition.setter
    def transform_job_definition(self, transform_job_definition):
        """Sets the transform_job_definition of this ModelPackageValidationProfile.


        :param transform_job_definition: The transform_job_definition of this ModelPackageValidationProfile.
        :type transform_job_definition: ModelPackageValidationProfileTransformJobDefinition
        """
        if transform_job_definition is None:
            raise ValueError("Invalid value for `transform_job_definition`, must not be `None`")

        self._transform_job_definition = transform_job_definition
