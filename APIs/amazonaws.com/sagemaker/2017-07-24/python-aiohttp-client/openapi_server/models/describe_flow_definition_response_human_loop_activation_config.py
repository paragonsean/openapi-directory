# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.human_loop_activation_config_human_loop_activation_conditions_config import HumanLoopActivationConfigHumanLoopActivationConditionsConfig
from openapi_server import util


class DescribeFlowDefinitionResponseHumanLoopActivationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, human_loop_activation_conditions_config: HumanLoopActivationConfigHumanLoopActivationConditionsConfig=None):
        """DescribeFlowDefinitionResponseHumanLoopActivationConfig - a model defined in OpenAPI

        :param human_loop_activation_conditions_config: The human_loop_activation_conditions_config of this DescribeFlowDefinitionResponseHumanLoopActivationConfig.
        """
        self.openapi_types = {
            'human_loop_activation_conditions_config': HumanLoopActivationConfigHumanLoopActivationConditionsConfig
        }

        self.attribute_map = {
            'human_loop_activation_conditions_config': 'HumanLoopActivationConditionsConfig'
        }

        self._human_loop_activation_conditions_config = human_loop_activation_conditions_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeFlowDefinitionResponseHumanLoopActivationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeFlowDefinitionResponse_HumanLoopActivationConfig of this DescribeFlowDefinitionResponseHumanLoopActivationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def human_loop_activation_conditions_config(self):
        """Gets the human_loop_activation_conditions_config of this DescribeFlowDefinitionResponseHumanLoopActivationConfig.


        :return: The human_loop_activation_conditions_config of this DescribeFlowDefinitionResponseHumanLoopActivationConfig.
        :rtype: HumanLoopActivationConfigHumanLoopActivationConditionsConfig
        """
        return self._human_loop_activation_conditions_config

    @human_loop_activation_conditions_config.setter
    def human_loop_activation_conditions_config(self, human_loop_activation_conditions_config):
        """Sets the human_loop_activation_conditions_config of this DescribeFlowDefinitionResponseHumanLoopActivationConfig.


        :param human_loop_activation_conditions_config: The human_loop_activation_conditions_config of this DescribeFlowDefinitionResponseHumanLoopActivationConfig.
        :type human_loop_activation_conditions_config: HumanLoopActivationConfigHumanLoopActivationConditionsConfig
        """
        if human_loop_activation_conditions_config is None:
            raise ValueError("Invalid value for `human_loop_activation_conditions_config`, must not be `None`")

        self._human_loop_activation_conditions_config = human_loop_activation_conditions_config
