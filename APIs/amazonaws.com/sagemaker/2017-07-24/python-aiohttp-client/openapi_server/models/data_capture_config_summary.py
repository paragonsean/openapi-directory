# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capture_status import CaptureStatus
from openapi_server import util


class DataCaptureConfigSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_capture: bool=None, capture_status: CaptureStatus=None, current_sampling_percentage: int=None, destination_s3_uri: str=None, kms_key_id: str=None):
        """DataCaptureConfigSummary - a model defined in OpenAPI

        :param enable_capture: The enable_capture of this DataCaptureConfigSummary.
        :param capture_status: The capture_status of this DataCaptureConfigSummary.
        :param current_sampling_percentage: The current_sampling_percentage of this DataCaptureConfigSummary.
        :param destination_s3_uri: The destination_s3_uri of this DataCaptureConfigSummary.
        :param kms_key_id: The kms_key_id of this DataCaptureConfigSummary.
        """
        self.openapi_types = {
            'enable_capture': bool,
            'capture_status': CaptureStatus,
            'current_sampling_percentage': int,
            'destination_s3_uri': str,
            'kms_key_id': str
        }

        self.attribute_map = {
            'enable_capture': 'EnableCapture',
            'capture_status': 'CaptureStatus',
            'current_sampling_percentage': 'CurrentSamplingPercentage',
            'destination_s3_uri': 'DestinationS3Uri',
            'kms_key_id': 'KmsKeyId'
        }

        self._enable_capture = enable_capture
        self._capture_status = capture_status
        self._current_sampling_percentage = current_sampling_percentage
        self._destination_s3_uri = destination_s3_uri
        self._kms_key_id = kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataCaptureConfigSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataCaptureConfigSummary of this DataCaptureConfigSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_capture(self):
        """Gets the enable_capture of this DataCaptureConfigSummary.


        :return: The enable_capture of this DataCaptureConfigSummary.
        :rtype: bool
        """
        return self._enable_capture

    @enable_capture.setter
    def enable_capture(self, enable_capture):
        """Sets the enable_capture of this DataCaptureConfigSummary.


        :param enable_capture: The enable_capture of this DataCaptureConfigSummary.
        :type enable_capture: bool
        """
        if enable_capture is None:
            raise ValueError("Invalid value for `enable_capture`, must not be `None`")

        self._enable_capture = enable_capture

    @property
    def capture_status(self):
        """Gets the capture_status of this DataCaptureConfigSummary.


        :return: The capture_status of this DataCaptureConfigSummary.
        :rtype: CaptureStatus
        """
        return self._capture_status

    @capture_status.setter
    def capture_status(self, capture_status):
        """Sets the capture_status of this DataCaptureConfigSummary.


        :param capture_status: The capture_status of this DataCaptureConfigSummary.
        :type capture_status: CaptureStatus
        """
        if capture_status is None:
            raise ValueError("Invalid value for `capture_status`, must not be `None`")

        self._capture_status = capture_status

    @property
    def current_sampling_percentage(self):
        """Gets the current_sampling_percentage of this DataCaptureConfigSummary.


        :return: The current_sampling_percentage of this DataCaptureConfigSummary.
        :rtype: int
        """
        return self._current_sampling_percentage

    @current_sampling_percentage.setter
    def current_sampling_percentage(self, current_sampling_percentage):
        """Sets the current_sampling_percentage of this DataCaptureConfigSummary.


        :param current_sampling_percentage: The current_sampling_percentage of this DataCaptureConfigSummary.
        :type current_sampling_percentage: int
        """
        if current_sampling_percentage is None:
            raise ValueError("Invalid value for `current_sampling_percentage`, must not be `None`")

        self._current_sampling_percentage = current_sampling_percentage

    @property
    def destination_s3_uri(self):
        """Gets the destination_s3_uri of this DataCaptureConfigSummary.


        :return: The destination_s3_uri of this DataCaptureConfigSummary.
        :rtype: str
        """
        return self._destination_s3_uri

    @destination_s3_uri.setter
    def destination_s3_uri(self, destination_s3_uri):
        """Sets the destination_s3_uri of this DataCaptureConfigSummary.


        :param destination_s3_uri: The destination_s3_uri of this DataCaptureConfigSummary.
        :type destination_s3_uri: str
        """
        if destination_s3_uri is None:
            raise ValueError("Invalid value for `destination_s3_uri`, must not be `None`")

        self._destination_s3_uri = destination_s3_uri

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this DataCaptureConfigSummary.


        :return: The kms_key_id of this DataCaptureConfigSummary.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this DataCaptureConfigSummary.


        :param kms_key_id: The kms_key_id of this DataCaptureConfigSummary.
        :type kms_key_id: str
        """
        if kms_key_id is None:
            raise ValueError("Invalid value for `kms_key_id`, must not be `None`")

        self._kms_key_id = kms_key_id
