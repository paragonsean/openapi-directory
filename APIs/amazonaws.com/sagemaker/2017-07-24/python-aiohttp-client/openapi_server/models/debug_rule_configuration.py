# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.processing_instance_type import ProcessingInstanceType
from openapi_server import util


class DebugRuleConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_configuration_name: str=None, local_path: str=None, s3_output_path: str=None, rule_evaluator_image: str=None, instance_type: ProcessingInstanceType=None, volume_size_in_gb: int=None, rule_parameters: Dict=None):
        """DebugRuleConfiguration - a model defined in OpenAPI

        :param rule_configuration_name: The rule_configuration_name of this DebugRuleConfiguration.
        :param local_path: The local_path of this DebugRuleConfiguration.
        :param s3_output_path: The s3_output_path of this DebugRuleConfiguration.
        :param rule_evaluator_image: The rule_evaluator_image of this DebugRuleConfiguration.
        :param instance_type: The instance_type of this DebugRuleConfiguration.
        :param volume_size_in_gb: The volume_size_in_gb of this DebugRuleConfiguration.
        :param rule_parameters: The rule_parameters of this DebugRuleConfiguration.
        """
        self.openapi_types = {
            'rule_configuration_name': str,
            'local_path': str,
            's3_output_path': str,
            'rule_evaluator_image': str,
            'instance_type': ProcessingInstanceType,
            'volume_size_in_gb': int,
            'rule_parameters': Dict
        }

        self.attribute_map = {
            'rule_configuration_name': 'RuleConfigurationName',
            'local_path': 'LocalPath',
            's3_output_path': 'S3OutputPath',
            'rule_evaluator_image': 'RuleEvaluatorImage',
            'instance_type': 'InstanceType',
            'volume_size_in_gb': 'VolumeSizeInGB',
            'rule_parameters': 'RuleParameters'
        }

        self._rule_configuration_name = rule_configuration_name
        self._local_path = local_path
        self._s3_output_path = s3_output_path
        self._rule_evaluator_image = rule_evaluator_image
        self._instance_type = instance_type
        self._volume_size_in_gb = volume_size_in_gb
        self._rule_parameters = rule_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DebugRuleConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DebugRuleConfiguration of this DebugRuleConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_configuration_name(self):
        """Gets the rule_configuration_name of this DebugRuleConfiguration.


        :return: The rule_configuration_name of this DebugRuleConfiguration.
        :rtype: str
        """
        return self._rule_configuration_name

    @rule_configuration_name.setter
    def rule_configuration_name(self, rule_configuration_name):
        """Sets the rule_configuration_name of this DebugRuleConfiguration.


        :param rule_configuration_name: The rule_configuration_name of this DebugRuleConfiguration.
        :type rule_configuration_name: str
        """
        if rule_configuration_name is None:
            raise ValueError("Invalid value for `rule_configuration_name`, must not be `None`")

        self._rule_configuration_name = rule_configuration_name

    @property
    def local_path(self):
        """Gets the local_path of this DebugRuleConfiguration.


        :return: The local_path of this DebugRuleConfiguration.
        :rtype: str
        """
        return self._local_path

    @local_path.setter
    def local_path(self, local_path):
        """Sets the local_path of this DebugRuleConfiguration.


        :param local_path: The local_path of this DebugRuleConfiguration.
        :type local_path: str
        """

        self._local_path = local_path

    @property
    def s3_output_path(self):
        """Gets the s3_output_path of this DebugRuleConfiguration.


        :return: The s3_output_path of this DebugRuleConfiguration.
        :rtype: str
        """
        return self._s3_output_path

    @s3_output_path.setter
    def s3_output_path(self, s3_output_path):
        """Sets the s3_output_path of this DebugRuleConfiguration.


        :param s3_output_path: The s3_output_path of this DebugRuleConfiguration.
        :type s3_output_path: str
        """

        self._s3_output_path = s3_output_path

    @property
    def rule_evaluator_image(self):
        """Gets the rule_evaluator_image of this DebugRuleConfiguration.


        :return: The rule_evaluator_image of this DebugRuleConfiguration.
        :rtype: str
        """
        return self._rule_evaluator_image

    @rule_evaluator_image.setter
    def rule_evaluator_image(self, rule_evaluator_image):
        """Sets the rule_evaluator_image of this DebugRuleConfiguration.


        :param rule_evaluator_image: The rule_evaluator_image of this DebugRuleConfiguration.
        :type rule_evaluator_image: str
        """
        if rule_evaluator_image is None:
            raise ValueError("Invalid value for `rule_evaluator_image`, must not be `None`")

        self._rule_evaluator_image = rule_evaluator_image

    @property
    def instance_type(self):
        """Gets the instance_type of this DebugRuleConfiguration.


        :return: The instance_type of this DebugRuleConfiguration.
        :rtype: ProcessingInstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this DebugRuleConfiguration.


        :param instance_type: The instance_type of this DebugRuleConfiguration.
        :type instance_type: ProcessingInstanceType
        """

        self._instance_type = instance_type

    @property
    def volume_size_in_gb(self):
        """Gets the volume_size_in_gb of this DebugRuleConfiguration.


        :return: The volume_size_in_gb of this DebugRuleConfiguration.
        :rtype: int
        """
        return self._volume_size_in_gb

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, volume_size_in_gb):
        """Sets the volume_size_in_gb of this DebugRuleConfiguration.


        :param volume_size_in_gb: The volume_size_in_gb of this DebugRuleConfiguration.
        :type volume_size_in_gb: int
        """

        self._volume_size_in_gb = volume_size_in_gb

    @property
    def rule_parameters(self):
        """Gets the rule_parameters of this DebugRuleConfiguration.


        :return: The rule_parameters of this DebugRuleConfiguration.
        :rtype: Dict
        """
        return self._rule_parameters

    @rule_parameters.setter
    def rule_parameters(self, rule_parameters):
        """Sets the rule_parameters of this DebugRuleConfiguration.


        :param rule_parameters: The rule_parameters of this DebugRuleConfiguration.
        :type rule_parameters: Dict
        """

        self._rule_parameters = rule_parameters
