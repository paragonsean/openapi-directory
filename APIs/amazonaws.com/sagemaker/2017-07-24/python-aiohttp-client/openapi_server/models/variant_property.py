# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.variant_property_type import VariantPropertyType
from openapi_server import util


class VariantProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variant_property_type: VariantPropertyType=None):
        """VariantProperty - a model defined in OpenAPI

        :param variant_property_type: The variant_property_type of this VariantProperty.
        """
        self.openapi_types = {
            'variant_property_type': VariantPropertyType
        }

        self.attribute_map = {
            'variant_property_type': 'VariantPropertyType'
        }

        self._variant_property_type = variant_property_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VariantProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VariantProperty of this VariantProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variant_property_type(self):
        """Gets the variant_property_type of this VariantProperty.


        :return: The variant_property_type of this VariantProperty.
        :rtype: VariantPropertyType
        """
        return self._variant_property_type

    @variant_property_type.setter
    def variant_property_type(self, variant_property_type):
        """Sets the variant_property_type of this VariantProperty.


        :param variant_property_type: The variant_property_type of this VariantProperty.
        :type variant_property_type: VariantPropertyType
        """
        if variant_property_type is None:
            raise ValueError("Invalid value for `variant_property_type`, must not be `None`")

        self._variant_property_type = variant_property_type
