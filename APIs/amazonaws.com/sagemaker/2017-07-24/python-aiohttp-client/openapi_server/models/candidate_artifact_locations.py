# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CandidateArtifactLocations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, explainability: str=None, model_insights: str=None, backtest_results: str=None):
        """CandidateArtifactLocations - a model defined in OpenAPI

        :param explainability: The explainability of this CandidateArtifactLocations.
        :param model_insights: The model_insights of this CandidateArtifactLocations.
        :param backtest_results: The backtest_results of this CandidateArtifactLocations.
        """
        self.openapi_types = {
            'explainability': str,
            'model_insights': str,
            'backtest_results': str
        }

        self.attribute_map = {
            'explainability': 'Explainability',
            'model_insights': 'ModelInsights',
            'backtest_results': 'BacktestResults'
        }

        self._explainability = explainability
        self._model_insights = model_insights
        self._backtest_results = backtest_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CandidateArtifactLocations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CandidateArtifactLocations of this CandidateArtifactLocations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def explainability(self):
        """Gets the explainability of this CandidateArtifactLocations.


        :return: The explainability of this CandidateArtifactLocations.
        :rtype: str
        """
        return self._explainability

    @explainability.setter
    def explainability(self, explainability):
        """Sets the explainability of this CandidateArtifactLocations.


        :param explainability: The explainability of this CandidateArtifactLocations.
        :type explainability: str
        """
        if explainability is None:
            raise ValueError("Invalid value for `explainability`, must not be `None`")

        self._explainability = explainability

    @property
    def model_insights(self):
        """Gets the model_insights of this CandidateArtifactLocations.


        :return: The model_insights of this CandidateArtifactLocations.
        :rtype: str
        """
        return self._model_insights

    @model_insights.setter
    def model_insights(self, model_insights):
        """Sets the model_insights of this CandidateArtifactLocations.


        :param model_insights: The model_insights of this CandidateArtifactLocations.
        :type model_insights: str
        """

        self._model_insights = model_insights

    @property
    def backtest_results(self):
        """Gets the backtest_results of this CandidateArtifactLocations.


        :return: The backtest_results of this CandidateArtifactLocations.
        :rtype: str
        """
        return self._backtest_results

    @backtest_results.setter
    def backtest_results(self, backtest_results):
        """Sets the backtest_results of this CandidateArtifactLocations.


        :param backtest_results: The backtest_results of this CandidateArtifactLocations.
        :type backtest_results: str
        """

        self._backtest_results = backtest_results
