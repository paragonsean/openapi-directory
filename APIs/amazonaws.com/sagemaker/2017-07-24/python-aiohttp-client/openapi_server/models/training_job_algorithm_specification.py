# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithm_specification_training_image_config import AlgorithmSpecificationTrainingImageConfig
from openapi_server.models.training_input_mode import TrainingInputMode
from openapi_server import util


class TrainingJobAlgorithmSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, training_image: str=None, algorithm_name: str=None, training_input_mode: TrainingInputMode=None, metric_definitions: List=None, enable_sage_maker_metrics_time_series: bool=None, container_entrypoint: List=None, container_arguments: List=None, training_image_config: AlgorithmSpecificationTrainingImageConfig=None):
        """TrainingJobAlgorithmSpecification - a model defined in OpenAPI

        :param training_image: The training_image of this TrainingJobAlgorithmSpecification.
        :param algorithm_name: The algorithm_name of this TrainingJobAlgorithmSpecification.
        :param training_input_mode: The training_input_mode of this TrainingJobAlgorithmSpecification.
        :param metric_definitions: The metric_definitions of this TrainingJobAlgorithmSpecification.
        :param enable_sage_maker_metrics_time_series: The enable_sage_maker_metrics_time_series of this TrainingJobAlgorithmSpecification.
        :param container_entrypoint: The container_entrypoint of this TrainingJobAlgorithmSpecification.
        :param container_arguments: The container_arguments of this TrainingJobAlgorithmSpecification.
        :param training_image_config: The training_image_config of this TrainingJobAlgorithmSpecification.
        """
        self.openapi_types = {
            'training_image': str,
            'algorithm_name': str,
            'training_input_mode': TrainingInputMode,
            'metric_definitions': List,
            'enable_sage_maker_metrics_time_series': bool,
            'container_entrypoint': List,
            'container_arguments': List,
            'training_image_config': AlgorithmSpecificationTrainingImageConfig
        }

        self.attribute_map = {
            'training_image': 'TrainingImage',
            'algorithm_name': 'AlgorithmName',
            'training_input_mode': 'TrainingInputMode',
            'metric_definitions': 'MetricDefinitions',
            'enable_sage_maker_metrics_time_series': 'EnableSageMakerMetricsTimeSeries',
            'container_entrypoint': 'ContainerEntrypoint',
            'container_arguments': 'ContainerArguments',
            'training_image_config': 'TrainingImageConfig'
        }

        self._training_image = training_image
        self._algorithm_name = algorithm_name
        self._training_input_mode = training_input_mode
        self._metric_definitions = metric_definitions
        self._enable_sage_maker_metrics_time_series = enable_sage_maker_metrics_time_series
        self._container_entrypoint = container_entrypoint
        self._container_arguments = container_arguments
        self._training_image_config = training_image_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingJobAlgorithmSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainingJob_AlgorithmSpecification of this TrainingJobAlgorithmSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def training_image(self):
        """Gets the training_image of this TrainingJobAlgorithmSpecification.


        :return: The training_image of this TrainingJobAlgorithmSpecification.
        :rtype: str
        """
        return self._training_image

    @training_image.setter
    def training_image(self, training_image):
        """Sets the training_image of this TrainingJobAlgorithmSpecification.


        :param training_image: The training_image of this TrainingJobAlgorithmSpecification.
        :type training_image: str
        """

        self._training_image = training_image

    @property
    def algorithm_name(self):
        """Gets the algorithm_name of this TrainingJobAlgorithmSpecification.


        :return: The algorithm_name of this TrainingJobAlgorithmSpecification.
        :rtype: str
        """
        return self._algorithm_name

    @algorithm_name.setter
    def algorithm_name(self, algorithm_name):
        """Sets the algorithm_name of this TrainingJobAlgorithmSpecification.


        :param algorithm_name: The algorithm_name of this TrainingJobAlgorithmSpecification.
        :type algorithm_name: str
        """

        self._algorithm_name = algorithm_name

    @property
    def training_input_mode(self):
        """Gets the training_input_mode of this TrainingJobAlgorithmSpecification.


        :return: The training_input_mode of this TrainingJobAlgorithmSpecification.
        :rtype: TrainingInputMode
        """
        return self._training_input_mode

    @training_input_mode.setter
    def training_input_mode(self, training_input_mode):
        """Sets the training_input_mode of this TrainingJobAlgorithmSpecification.


        :param training_input_mode: The training_input_mode of this TrainingJobAlgorithmSpecification.
        :type training_input_mode: TrainingInputMode
        """
        if training_input_mode is None:
            raise ValueError("Invalid value for `training_input_mode`, must not be `None`")

        self._training_input_mode = training_input_mode

    @property
    def metric_definitions(self):
        """Gets the metric_definitions of this TrainingJobAlgorithmSpecification.


        :return: The metric_definitions of this TrainingJobAlgorithmSpecification.
        :rtype: List
        """
        return self._metric_definitions

    @metric_definitions.setter
    def metric_definitions(self, metric_definitions):
        """Sets the metric_definitions of this TrainingJobAlgorithmSpecification.


        :param metric_definitions: The metric_definitions of this TrainingJobAlgorithmSpecification.
        :type metric_definitions: List
        """

        self._metric_definitions = metric_definitions

    @property
    def enable_sage_maker_metrics_time_series(self):
        """Gets the enable_sage_maker_metrics_time_series of this TrainingJobAlgorithmSpecification.


        :return: The enable_sage_maker_metrics_time_series of this TrainingJobAlgorithmSpecification.
        :rtype: bool
        """
        return self._enable_sage_maker_metrics_time_series

    @enable_sage_maker_metrics_time_series.setter
    def enable_sage_maker_metrics_time_series(self, enable_sage_maker_metrics_time_series):
        """Sets the enable_sage_maker_metrics_time_series of this TrainingJobAlgorithmSpecification.


        :param enable_sage_maker_metrics_time_series: The enable_sage_maker_metrics_time_series of this TrainingJobAlgorithmSpecification.
        :type enable_sage_maker_metrics_time_series: bool
        """

        self._enable_sage_maker_metrics_time_series = enable_sage_maker_metrics_time_series

    @property
    def container_entrypoint(self):
        """Gets the container_entrypoint of this TrainingJobAlgorithmSpecification.


        :return: The container_entrypoint of this TrainingJobAlgorithmSpecification.
        :rtype: List
        """
        return self._container_entrypoint

    @container_entrypoint.setter
    def container_entrypoint(self, container_entrypoint):
        """Sets the container_entrypoint of this TrainingJobAlgorithmSpecification.


        :param container_entrypoint: The container_entrypoint of this TrainingJobAlgorithmSpecification.
        :type container_entrypoint: List
        """

        self._container_entrypoint = container_entrypoint

    @property
    def container_arguments(self):
        """Gets the container_arguments of this TrainingJobAlgorithmSpecification.


        :return: The container_arguments of this TrainingJobAlgorithmSpecification.
        :rtype: List
        """
        return self._container_arguments

    @container_arguments.setter
    def container_arguments(self, container_arguments):
        """Sets the container_arguments of this TrainingJobAlgorithmSpecification.


        :param container_arguments: The container_arguments of this TrainingJobAlgorithmSpecification.
        :type container_arguments: List
        """

        self._container_arguments = container_arguments

    @property
    def training_image_config(self):
        """Gets the training_image_config of this TrainingJobAlgorithmSpecification.


        :return: The training_image_config of this TrainingJobAlgorithmSpecification.
        :rtype: AlgorithmSpecificationTrainingImageConfig
        """
        return self._training_image_config

    @training_image_config.setter
    def training_image_config(self, training_image_config):
        """Sets the training_image_config of this TrainingJobAlgorithmSpecification.


        :param training_image_config: The training_image_config of this TrainingJobAlgorithmSpecification.
        :type training_image_config: AlgorithmSpecificationTrainingImageConfig
        """

        self._training_image_config = training_image_config
