# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_system_access_mode import FileSystemAccessMode
from openapi_server.models.file_system_type import FileSystemType
from openapi_server import util


class FileSystemDataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_id: str=None, file_system_access_mode: FileSystemAccessMode=None, file_system_type: FileSystemType=None, directory_path: str=None):
        """FileSystemDataSource - a model defined in OpenAPI

        :param file_system_id: The file_system_id of this FileSystemDataSource.
        :param file_system_access_mode: The file_system_access_mode of this FileSystemDataSource.
        :param file_system_type: The file_system_type of this FileSystemDataSource.
        :param directory_path: The directory_path of this FileSystemDataSource.
        """
        self.openapi_types = {
            'file_system_id': str,
            'file_system_access_mode': FileSystemAccessMode,
            'file_system_type': FileSystemType,
            'directory_path': str
        }

        self.attribute_map = {
            'file_system_id': 'FileSystemId',
            'file_system_access_mode': 'FileSystemAccessMode',
            'file_system_type': 'FileSystemType',
            'directory_path': 'DirectoryPath'
        }

        self._file_system_id = file_system_id
        self._file_system_access_mode = file_system_access_mode
        self._file_system_type = file_system_type
        self._directory_path = directory_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileSystemDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileSystemDataSource of this FileSystemDataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_id(self):
        """Gets the file_system_id of this FileSystemDataSource.


        :return: The file_system_id of this FileSystemDataSource.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this FileSystemDataSource.


        :param file_system_id: The file_system_id of this FileSystemDataSource.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")

        self._file_system_id = file_system_id

    @property
    def file_system_access_mode(self):
        """Gets the file_system_access_mode of this FileSystemDataSource.


        :return: The file_system_access_mode of this FileSystemDataSource.
        :rtype: FileSystemAccessMode
        """
        return self._file_system_access_mode

    @file_system_access_mode.setter
    def file_system_access_mode(self, file_system_access_mode):
        """Sets the file_system_access_mode of this FileSystemDataSource.


        :param file_system_access_mode: The file_system_access_mode of this FileSystemDataSource.
        :type file_system_access_mode: FileSystemAccessMode
        """
        if file_system_access_mode is None:
            raise ValueError("Invalid value for `file_system_access_mode`, must not be `None`")

        self._file_system_access_mode = file_system_access_mode

    @property
    def file_system_type(self):
        """Gets the file_system_type of this FileSystemDataSource.


        :return: The file_system_type of this FileSystemDataSource.
        :rtype: FileSystemType
        """
        return self._file_system_type

    @file_system_type.setter
    def file_system_type(self, file_system_type):
        """Sets the file_system_type of this FileSystemDataSource.


        :param file_system_type: The file_system_type of this FileSystemDataSource.
        :type file_system_type: FileSystemType
        """
        if file_system_type is None:
            raise ValueError("Invalid value for `file_system_type`, must not be `None`")

        self._file_system_type = file_system_type

    @property
    def directory_path(self):
        """Gets the directory_path of this FileSystemDataSource.


        :return: The directory_path of this FileSystemDataSource.
        :rtype: str
        """
        return self._directory_path

    @directory_path.setter
    def directory_path(self, directory_path):
        """Sets the directory_path of this FileSystemDataSource.


        :param directory_path: The directory_path of this FileSystemDataSource.
        :type directory_path: str
        """
        if directory_path is None:
            raise ValueError("Invalid value for `directory_path`, must not be `None`")

        self._directory_path = directory_path
