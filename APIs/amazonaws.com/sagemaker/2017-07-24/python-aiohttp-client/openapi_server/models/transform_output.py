# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assembly_type import AssemblyType
from openapi_server import util


class TransformOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_output_path: str=None, accept: str=None, assemble_with: AssemblyType=None, kms_key_id: str=None):
        """TransformOutput - a model defined in OpenAPI

        :param s3_output_path: The s3_output_path of this TransformOutput.
        :param accept: The accept of this TransformOutput.
        :param assemble_with: The assemble_with of this TransformOutput.
        :param kms_key_id: The kms_key_id of this TransformOutput.
        """
        self.openapi_types = {
            's3_output_path': str,
            'accept': str,
            'assemble_with': AssemblyType,
            'kms_key_id': str
        }

        self.attribute_map = {
            's3_output_path': 'S3OutputPath',
            'accept': 'Accept',
            'assemble_with': 'AssembleWith',
            'kms_key_id': 'KmsKeyId'
        }

        self._s3_output_path = s3_output_path
        self._accept = accept
        self._assemble_with = assemble_with
        self._kms_key_id = kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformOutput of this TransformOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_output_path(self):
        """Gets the s3_output_path of this TransformOutput.


        :return: The s3_output_path of this TransformOutput.
        :rtype: str
        """
        return self._s3_output_path

    @s3_output_path.setter
    def s3_output_path(self, s3_output_path):
        """Sets the s3_output_path of this TransformOutput.


        :param s3_output_path: The s3_output_path of this TransformOutput.
        :type s3_output_path: str
        """
        if s3_output_path is None:
            raise ValueError("Invalid value for `s3_output_path`, must not be `None`")

        self._s3_output_path = s3_output_path

    @property
    def accept(self):
        """Gets the accept of this TransformOutput.


        :return: The accept of this TransformOutput.
        :rtype: str
        """
        return self._accept

    @accept.setter
    def accept(self, accept):
        """Sets the accept of this TransformOutput.


        :param accept: The accept of this TransformOutput.
        :type accept: str
        """

        self._accept = accept

    @property
    def assemble_with(self):
        """Gets the assemble_with of this TransformOutput.


        :return: The assemble_with of this TransformOutput.
        :rtype: AssemblyType
        """
        return self._assemble_with

    @assemble_with.setter
    def assemble_with(self, assemble_with):
        """Sets the assemble_with of this TransformOutput.


        :param assemble_with: The assemble_with of this TransformOutput.
        :type assemble_with: AssemblyType
        """

        self._assemble_with = assemble_with

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this TransformOutput.


        :return: The kms_key_id of this TransformOutput.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this TransformOutput.


        :param kms_key_id: The kms_key_id of this TransformOutput.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id
