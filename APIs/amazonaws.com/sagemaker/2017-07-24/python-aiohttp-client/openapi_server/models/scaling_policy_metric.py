# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScalingPolicyMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invocations_per_instance: int=None, model_latency: int=None):
        """ScalingPolicyMetric - a model defined in OpenAPI

        :param invocations_per_instance: The invocations_per_instance of this ScalingPolicyMetric.
        :param model_latency: The model_latency of this ScalingPolicyMetric.
        """
        self.openapi_types = {
            'invocations_per_instance': int,
            'model_latency': int
        }

        self.attribute_map = {
            'invocations_per_instance': 'InvocationsPerInstance',
            'model_latency': 'ModelLatency'
        }

        self._invocations_per_instance = invocations_per_instance
        self._model_latency = model_latency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScalingPolicyMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScalingPolicyMetric of this ScalingPolicyMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invocations_per_instance(self):
        """Gets the invocations_per_instance of this ScalingPolicyMetric.


        :return: The invocations_per_instance of this ScalingPolicyMetric.
        :rtype: int
        """
        return self._invocations_per_instance

    @invocations_per_instance.setter
    def invocations_per_instance(self, invocations_per_instance):
        """Sets the invocations_per_instance of this ScalingPolicyMetric.


        :param invocations_per_instance: The invocations_per_instance of this ScalingPolicyMetric.
        :type invocations_per_instance: int
        """

        self._invocations_per_instance = invocations_per_instance

    @property
    def model_latency(self):
        """Gets the model_latency of this ScalingPolicyMetric.


        :return: The model_latency of this ScalingPolicyMetric.
        :rtype: int
        """
        return self._model_latency

    @model_latency.setter
    def model_latency(self, model_latency):
        """Sets the model_latency of this ScalingPolicyMetric.


        :param model_latency: The model_latency of this ScalingPolicyMetric.
        :type model_latency: int
        """

        self._model_latency = model_latency
