# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_infrastructure_config_real_time_inference_config import ModelInfrastructureConfigRealTimeInferenceConfig
from openapi_server.models.model_infrastructure_type import ModelInfrastructureType
from openapi_server import util


class ModelVariantConfigSummaryInfrastructureConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, infrastructure_type: ModelInfrastructureType=None, real_time_inference_config: ModelInfrastructureConfigRealTimeInferenceConfig=None):
        """ModelVariantConfigSummaryInfrastructureConfig - a model defined in OpenAPI

        :param infrastructure_type: The infrastructure_type of this ModelVariantConfigSummaryInfrastructureConfig.
        :param real_time_inference_config: The real_time_inference_config of this ModelVariantConfigSummaryInfrastructureConfig.
        """
        self.openapi_types = {
            'infrastructure_type': ModelInfrastructureType,
            'real_time_inference_config': ModelInfrastructureConfigRealTimeInferenceConfig
        }

        self.attribute_map = {
            'infrastructure_type': 'InfrastructureType',
            'real_time_inference_config': 'RealTimeInferenceConfig'
        }

        self._infrastructure_type = infrastructure_type
        self._real_time_inference_config = real_time_inference_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelVariantConfigSummaryInfrastructureConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelVariantConfigSummary_InfrastructureConfig of this ModelVariantConfigSummaryInfrastructureConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def infrastructure_type(self):
        """Gets the infrastructure_type of this ModelVariantConfigSummaryInfrastructureConfig.


        :return: The infrastructure_type of this ModelVariantConfigSummaryInfrastructureConfig.
        :rtype: ModelInfrastructureType
        """
        return self._infrastructure_type

    @infrastructure_type.setter
    def infrastructure_type(self, infrastructure_type):
        """Sets the infrastructure_type of this ModelVariantConfigSummaryInfrastructureConfig.


        :param infrastructure_type: The infrastructure_type of this ModelVariantConfigSummaryInfrastructureConfig.
        :type infrastructure_type: ModelInfrastructureType
        """
        if infrastructure_type is None:
            raise ValueError("Invalid value for `infrastructure_type`, must not be `None`")

        self._infrastructure_type = infrastructure_type

    @property
    def real_time_inference_config(self):
        """Gets the real_time_inference_config of this ModelVariantConfigSummaryInfrastructureConfig.


        :return: The real_time_inference_config of this ModelVariantConfigSummaryInfrastructureConfig.
        :rtype: ModelInfrastructureConfigRealTimeInferenceConfig
        """
        return self._real_time_inference_config

    @real_time_inference_config.setter
    def real_time_inference_config(self, real_time_inference_config):
        """Sets the real_time_inference_config of this ModelVariantConfigSummaryInfrastructureConfig.


        :param real_time_inference_config: The real_time_inference_config of this ModelVariantConfigSummaryInfrastructureConfig.
        :type real_time_inference_config: ModelInfrastructureConfigRealTimeInferenceConfig
        """
        if real_time_inference_config is None:
            raise ValueError("Invalid value for `real_time_inference_config`, must not be `None`")

        self._real_time_inference_config = real_time_inference_config
