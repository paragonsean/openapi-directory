# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_name: str=None, description: str=None, iot_thing_name: str=None):
        """Device - a model defined in OpenAPI

        :param device_name: The device_name of this Device.
        :param description: The description of this Device.
        :param iot_thing_name: The iot_thing_name of this Device.
        """
        self.openapi_types = {
            'device_name': str,
            'description': str,
            'iot_thing_name': str
        }

        self.attribute_map = {
            'device_name': 'DeviceName',
            'description': 'Description',
            'iot_thing_name': 'IotThingName'
        }

        self._device_name = device_name
        self._description = description
        self._iot_thing_name = iot_thing_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_name(self):
        """Gets the device_name of this Device.


        :return: The device_name of this Device.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Device.


        :param device_name: The device_name of this Device.
        :type device_name: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")

        self._device_name = device_name

    @property
    def description(self):
        """Gets the description of this Device.


        :return: The description of this Device.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Device.


        :param description: The description of this Device.
        :type description: str
        """

        self._description = description

    @property
    def iot_thing_name(self):
        """Gets the iot_thing_name of this Device.


        :return: The iot_thing_name of this Device.
        :rtype: str
        """
        return self._iot_thing_name

    @iot_thing_name.setter
    def iot_thing_name(self, iot_thing_name):
        """Sets the iot_thing_name of this Device.


        :param iot_thing_name: The iot_thing_name of this Device.
        :type iot_thing_name: str
        """

        self._iot_thing_name = iot_thing_name
