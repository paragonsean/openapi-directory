# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_device_fleet_request_output_config import CreateDeviceFleetRequestOutputConfig
from openapi_server import util


class CreateDeviceFleetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_fleet_name: str=None, role_arn: str=None, description: str=None, output_config: CreateDeviceFleetRequestOutputConfig=None, tags: List=None, enable_iot_role_alias: bool=None):
        """CreateDeviceFleetRequest - a model defined in OpenAPI

        :param device_fleet_name: The device_fleet_name of this CreateDeviceFleetRequest.
        :param role_arn: The role_arn of this CreateDeviceFleetRequest.
        :param description: The description of this CreateDeviceFleetRequest.
        :param output_config: The output_config of this CreateDeviceFleetRequest.
        :param tags: The tags of this CreateDeviceFleetRequest.
        :param enable_iot_role_alias: The enable_iot_role_alias of this CreateDeviceFleetRequest.
        """
        self.openapi_types = {
            'device_fleet_name': str,
            'role_arn': str,
            'description': str,
            'output_config': CreateDeviceFleetRequestOutputConfig,
            'tags': List,
            'enable_iot_role_alias': bool
        }

        self.attribute_map = {
            'device_fleet_name': 'DeviceFleetName',
            'role_arn': 'RoleArn',
            'description': 'Description',
            'output_config': 'OutputConfig',
            'tags': 'Tags',
            'enable_iot_role_alias': 'EnableIotRoleAlias'
        }

        self._device_fleet_name = device_fleet_name
        self._role_arn = role_arn
        self._description = description
        self._output_config = output_config
        self._tags = tags
        self._enable_iot_role_alias = enable_iot_role_alias

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDeviceFleetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDeviceFleetRequest of this CreateDeviceFleetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_fleet_name(self):
        """Gets the device_fleet_name of this CreateDeviceFleetRequest.


        :return: The device_fleet_name of this CreateDeviceFleetRequest.
        :rtype: str
        """
        return self._device_fleet_name

    @device_fleet_name.setter
    def device_fleet_name(self, device_fleet_name):
        """Sets the device_fleet_name of this CreateDeviceFleetRequest.


        :param device_fleet_name: The device_fleet_name of this CreateDeviceFleetRequest.
        :type device_fleet_name: str
        """
        if device_fleet_name is None:
            raise ValueError("Invalid value for `device_fleet_name`, must not be `None`")

        self._device_fleet_name = device_fleet_name

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateDeviceFleetRequest.


        :return: The role_arn of this CreateDeviceFleetRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateDeviceFleetRequest.


        :param role_arn: The role_arn of this CreateDeviceFleetRequest.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def description(self):
        """Gets the description of this CreateDeviceFleetRequest.


        :return: The description of this CreateDeviceFleetRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateDeviceFleetRequest.


        :param description: The description of this CreateDeviceFleetRequest.
        :type description: str
        """

        self._description = description

    @property
    def output_config(self):
        """Gets the output_config of this CreateDeviceFleetRequest.


        :return: The output_config of this CreateDeviceFleetRequest.
        :rtype: CreateDeviceFleetRequestOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this CreateDeviceFleetRequest.


        :param output_config: The output_config of this CreateDeviceFleetRequest.
        :type output_config: CreateDeviceFleetRequestOutputConfig
        """
        if output_config is None:
            raise ValueError("Invalid value for `output_config`, must not be `None`")

        self._output_config = output_config

    @property
    def tags(self):
        """Gets the tags of this CreateDeviceFleetRequest.


        :return: The tags of this CreateDeviceFleetRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDeviceFleetRequest.


        :param tags: The tags of this CreateDeviceFleetRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def enable_iot_role_alias(self):
        """Gets the enable_iot_role_alias of this CreateDeviceFleetRequest.


        :return: The enable_iot_role_alias of this CreateDeviceFleetRequest.
        :rtype: bool
        """
        return self._enable_iot_role_alias

    @enable_iot_role_alias.setter
    def enable_iot_role_alias(self, enable_iot_role_alias):
        """Sets the enable_iot_role_alias of this CreateDeviceFleetRequest.


        :param enable_iot_role_alias: The enable_iot_role_alias of this CreateDeviceFleetRequest.
        :type enable_iot_role_alias: bool
        """

        self._enable_iot_role_alias = enable_iot_role_alias
