# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flow_definition_status import FlowDefinitionStatus
from openapi_server import util


class FlowDefinitionSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_definition_name: str=None, flow_definition_arn: str=None, flow_definition_status: FlowDefinitionStatus=None, creation_time: datetime=None, failure_reason: str=None):
        """FlowDefinitionSummary - a model defined in OpenAPI

        :param flow_definition_name: The flow_definition_name of this FlowDefinitionSummary.
        :param flow_definition_arn: The flow_definition_arn of this FlowDefinitionSummary.
        :param flow_definition_status: The flow_definition_status of this FlowDefinitionSummary.
        :param creation_time: The creation_time of this FlowDefinitionSummary.
        :param failure_reason: The failure_reason of this FlowDefinitionSummary.
        """
        self.openapi_types = {
            'flow_definition_name': str,
            'flow_definition_arn': str,
            'flow_definition_status': FlowDefinitionStatus,
            'creation_time': datetime,
            'failure_reason': str
        }

        self.attribute_map = {
            'flow_definition_name': 'FlowDefinitionName',
            'flow_definition_arn': 'FlowDefinitionArn',
            'flow_definition_status': 'FlowDefinitionStatus',
            'creation_time': 'CreationTime',
            'failure_reason': 'FailureReason'
        }

        self._flow_definition_name = flow_definition_name
        self._flow_definition_arn = flow_definition_arn
        self._flow_definition_status = flow_definition_status
        self._creation_time = creation_time
        self._failure_reason = failure_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlowDefinitionSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlowDefinitionSummary of this FlowDefinitionSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_definition_name(self):
        """Gets the flow_definition_name of this FlowDefinitionSummary.


        :return: The flow_definition_name of this FlowDefinitionSummary.
        :rtype: str
        """
        return self._flow_definition_name

    @flow_definition_name.setter
    def flow_definition_name(self, flow_definition_name):
        """Sets the flow_definition_name of this FlowDefinitionSummary.


        :param flow_definition_name: The flow_definition_name of this FlowDefinitionSummary.
        :type flow_definition_name: str
        """
        if flow_definition_name is None:
            raise ValueError("Invalid value for `flow_definition_name`, must not be `None`")

        self._flow_definition_name = flow_definition_name

    @property
    def flow_definition_arn(self):
        """Gets the flow_definition_arn of this FlowDefinitionSummary.


        :return: The flow_definition_arn of this FlowDefinitionSummary.
        :rtype: str
        """
        return self._flow_definition_arn

    @flow_definition_arn.setter
    def flow_definition_arn(self, flow_definition_arn):
        """Sets the flow_definition_arn of this FlowDefinitionSummary.


        :param flow_definition_arn: The flow_definition_arn of this FlowDefinitionSummary.
        :type flow_definition_arn: str
        """
        if flow_definition_arn is None:
            raise ValueError("Invalid value for `flow_definition_arn`, must not be `None`")

        self._flow_definition_arn = flow_definition_arn

    @property
    def flow_definition_status(self):
        """Gets the flow_definition_status of this FlowDefinitionSummary.


        :return: The flow_definition_status of this FlowDefinitionSummary.
        :rtype: FlowDefinitionStatus
        """
        return self._flow_definition_status

    @flow_definition_status.setter
    def flow_definition_status(self, flow_definition_status):
        """Sets the flow_definition_status of this FlowDefinitionSummary.


        :param flow_definition_status: The flow_definition_status of this FlowDefinitionSummary.
        :type flow_definition_status: FlowDefinitionStatus
        """
        if flow_definition_status is None:
            raise ValueError("Invalid value for `flow_definition_status`, must not be `None`")

        self._flow_definition_status = flow_definition_status

    @property
    def creation_time(self):
        """Gets the creation_time of this FlowDefinitionSummary.


        :return: The creation_time of this FlowDefinitionSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this FlowDefinitionSummary.


        :param creation_time: The creation_time of this FlowDefinitionSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def failure_reason(self):
        """Gets the failure_reason of this FlowDefinitionSummary.


        :return: The failure_reason of this FlowDefinitionSummary.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this FlowDefinitionSummary.


        :param failure_reason: The failure_reason of this FlowDefinitionSummary.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason
