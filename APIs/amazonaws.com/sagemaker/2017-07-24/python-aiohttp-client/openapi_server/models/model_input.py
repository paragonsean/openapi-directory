# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_input_config: str=None):
        """ModelInput - a model defined in OpenAPI

        :param data_input_config: The data_input_config of this ModelInput.
        """
        self.openapi_types = {
            'data_input_config': str
        }

        self.attribute_map = {
            'data_input_config': 'DataInputConfig'
        }

        self._data_input_config = data_input_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelInput of this ModelInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_input_config(self):
        """Gets the data_input_config of this ModelInput.


        :return: The data_input_config of this ModelInput.
        :rtype: str
        """
        return self._data_input_config

    @data_input_config.setter
    def data_input_config(self, data_input_config):
        """Sets the data_input_config of this ModelInput.


        :param data_input_config: The data_input_config of this ModelInput.
        :type data_input_config: str
        """
        if data_input_config is None:
            raise ValueError("Invalid value for `data_input_config`, must not be `None`")

        self._data_input_config = data_input_config
