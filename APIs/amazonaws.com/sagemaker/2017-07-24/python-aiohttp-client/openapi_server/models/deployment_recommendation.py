# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_status import RecommendationStatus
from openapi_server import util


class DeploymentRecommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recommendation_status: RecommendationStatus=None, real_time_inference_recommendations: List=None):
        """DeploymentRecommendation - a model defined in OpenAPI

        :param recommendation_status: The recommendation_status of this DeploymentRecommendation.
        :param real_time_inference_recommendations: The real_time_inference_recommendations of this DeploymentRecommendation.
        """
        self.openapi_types = {
            'recommendation_status': RecommendationStatus,
            'real_time_inference_recommendations': List
        }

        self.attribute_map = {
            'recommendation_status': 'RecommendationStatus',
            'real_time_inference_recommendations': 'RealTimeInferenceRecommendations'
        }

        self._recommendation_status = recommendation_status
        self._real_time_inference_recommendations = real_time_inference_recommendations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentRecommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentRecommendation of this DeploymentRecommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommendation_status(self):
        """Gets the recommendation_status of this DeploymentRecommendation.


        :return: The recommendation_status of this DeploymentRecommendation.
        :rtype: RecommendationStatus
        """
        return self._recommendation_status

    @recommendation_status.setter
    def recommendation_status(self, recommendation_status):
        """Sets the recommendation_status of this DeploymentRecommendation.


        :param recommendation_status: The recommendation_status of this DeploymentRecommendation.
        :type recommendation_status: RecommendationStatus
        """
        if recommendation_status is None:
            raise ValueError("Invalid value for `recommendation_status`, must not be `None`")

        self._recommendation_status = recommendation_status

    @property
    def real_time_inference_recommendations(self):
        """Gets the real_time_inference_recommendations of this DeploymentRecommendation.


        :return: The real_time_inference_recommendations of this DeploymentRecommendation.
        :rtype: List
        """
        return self._real_time_inference_recommendations

    @real_time_inference_recommendations.setter
    def real_time_inference_recommendations(self, real_time_inference_recommendations):
        """Sets the real_time_inference_recommendations of this DeploymentRecommendation.


        :param real_time_inference_recommendations: The real_time_inference_recommendations of this DeploymentRecommendation.
        :type real_time_inference_recommendations: List
        """

        self._real_time_inference_recommendations = real_time_inference_recommendations
