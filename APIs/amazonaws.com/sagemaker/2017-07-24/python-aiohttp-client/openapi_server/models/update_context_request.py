# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateContextRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_name: str=None, description: str=None, properties: Dict=None, properties_to_remove: List=None):
        """UpdateContextRequest - a model defined in OpenAPI

        :param context_name: The context_name of this UpdateContextRequest.
        :param description: The description of this UpdateContextRequest.
        :param properties: The properties of this UpdateContextRequest.
        :param properties_to_remove: The properties_to_remove of this UpdateContextRequest.
        """
        self.openapi_types = {
            'context_name': str,
            'description': str,
            'properties': Dict,
            'properties_to_remove': List
        }

        self.attribute_map = {
            'context_name': 'ContextName',
            'description': 'Description',
            'properties': 'Properties',
            'properties_to_remove': 'PropertiesToRemove'
        }

        self._context_name = context_name
        self._description = description
        self._properties = properties
        self._properties_to_remove = properties_to_remove

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContextRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContextRequest of this UpdateContextRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_name(self):
        """Gets the context_name of this UpdateContextRequest.


        :return: The context_name of this UpdateContextRequest.
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """Sets the context_name of this UpdateContextRequest.


        :param context_name: The context_name of this UpdateContextRequest.
        :type context_name: str
        """
        if context_name is None:
            raise ValueError("Invalid value for `context_name`, must not be `None`")

        self._context_name = context_name

    @property
    def description(self):
        """Gets the description of this UpdateContextRequest.


        :return: The description of this UpdateContextRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateContextRequest.


        :param description: The description of this UpdateContextRequest.
        :type description: str
        """

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this UpdateContextRequest.


        :return: The properties of this UpdateContextRequest.
        :rtype: Dict
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this UpdateContextRequest.


        :param properties: The properties of this UpdateContextRequest.
        :type properties: Dict
        """

        self._properties = properties

    @property
    def properties_to_remove(self):
        """Gets the properties_to_remove of this UpdateContextRequest.


        :return: The properties_to_remove of this UpdateContextRequest.
        :rtype: List
        """
        return self._properties_to_remove

    @properties_to_remove.setter
    def properties_to_remove(self, properties_to_remove):
        """Sets the properties_to_remove of this UpdateContextRequest.


        :param properties_to_remove: The properties_to_remove of this UpdateContextRequest.
        :type properties_to_remove: List
        """

        self._properties_to_remove = properties_to_remove
