# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direction import Direction
from openapi_server.models.query_lineage_request_filters import QueryLineageRequestFilters
from openapi_server import util


class QueryLineageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_arns: List=None, direction: Direction=None, include_edges: bool=None, filters: QueryLineageRequestFilters=None, max_depth: int=None, max_results: int=None, next_token: str=None):
        """QueryLineageRequest - a model defined in OpenAPI

        :param start_arns: The start_arns of this QueryLineageRequest.
        :param direction: The direction of this QueryLineageRequest.
        :param include_edges: The include_edges of this QueryLineageRequest.
        :param filters: The filters of this QueryLineageRequest.
        :param max_depth: The max_depth of this QueryLineageRequest.
        :param max_results: The max_results of this QueryLineageRequest.
        :param next_token: The next_token of this QueryLineageRequest.
        """
        self.openapi_types = {
            'start_arns': List,
            'direction': Direction,
            'include_edges': bool,
            'filters': QueryLineageRequestFilters,
            'max_depth': int,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'start_arns': 'StartArns',
            'direction': 'Direction',
            'include_edges': 'IncludeEdges',
            'filters': 'Filters',
            'max_depth': 'MaxDepth',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._start_arns = start_arns
        self._direction = direction
        self._include_edges = include_edges
        self._filters = filters
        self._max_depth = max_depth
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryLineageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryLineageRequest of this QueryLineageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_arns(self):
        """Gets the start_arns of this QueryLineageRequest.


        :return: The start_arns of this QueryLineageRequest.
        :rtype: List
        """
        return self._start_arns

    @start_arns.setter
    def start_arns(self, start_arns):
        """Sets the start_arns of this QueryLineageRequest.


        :param start_arns: The start_arns of this QueryLineageRequest.
        :type start_arns: List
        """

        self._start_arns = start_arns

    @property
    def direction(self):
        """Gets the direction of this QueryLineageRequest.


        :return: The direction of this QueryLineageRequest.
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this QueryLineageRequest.


        :param direction: The direction of this QueryLineageRequest.
        :type direction: Direction
        """

        self._direction = direction

    @property
    def include_edges(self):
        """Gets the include_edges of this QueryLineageRequest.


        :return: The include_edges of this QueryLineageRequest.
        :rtype: bool
        """
        return self._include_edges

    @include_edges.setter
    def include_edges(self, include_edges):
        """Sets the include_edges of this QueryLineageRequest.


        :param include_edges: The include_edges of this QueryLineageRequest.
        :type include_edges: bool
        """

        self._include_edges = include_edges

    @property
    def filters(self):
        """Gets the filters of this QueryLineageRequest.


        :return: The filters of this QueryLineageRequest.
        :rtype: QueryLineageRequestFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this QueryLineageRequest.


        :param filters: The filters of this QueryLineageRequest.
        :type filters: QueryLineageRequestFilters
        """

        self._filters = filters

    @property
    def max_depth(self):
        """Gets the max_depth of this QueryLineageRequest.


        :return: The max_depth of this QueryLineageRequest.
        :rtype: int
        """
        return self._max_depth

    @max_depth.setter
    def max_depth(self, max_depth):
        """Sets the max_depth of this QueryLineageRequest.


        :param max_depth: The max_depth of this QueryLineageRequest.
        :type max_depth: int
        """

        self._max_depth = max_depth

    @property
    def max_results(self):
        """Gets the max_results of this QueryLineageRequest.


        :return: The max_results of this QueryLineageRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this QueryLineageRequest.


        :param max_results: The max_results of this QueryLineageRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this QueryLineageRequest.


        :return: The next_token of this QueryLineageRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this QueryLineageRequest.


        :param next_token: The next_token of this QueryLineageRequest.
        :type next_token: str
        """

        self._next_token = next_token
