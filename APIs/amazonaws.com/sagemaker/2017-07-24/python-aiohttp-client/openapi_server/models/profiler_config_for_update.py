# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfilerConfigForUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_output_path: str=None, profiling_interval_in_milliseconds: int=None, profiling_parameters: Dict=None, disable_profiler: bool=None):
        """ProfilerConfigForUpdate - a model defined in OpenAPI

        :param s3_output_path: The s3_output_path of this ProfilerConfigForUpdate.
        :param profiling_interval_in_milliseconds: The profiling_interval_in_milliseconds of this ProfilerConfigForUpdate.
        :param profiling_parameters: The profiling_parameters of this ProfilerConfigForUpdate.
        :param disable_profiler: The disable_profiler of this ProfilerConfigForUpdate.
        """
        self.openapi_types = {
            's3_output_path': str,
            'profiling_interval_in_milliseconds': int,
            'profiling_parameters': Dict,
            'disable_profiler': bool
        }

        self.attribute_map = {
            's3_output_path': 'S3OutputPath',
            'profiling_interval_in_milliseconds': 'ProfilingIntervalInMilliseconds',
            'profiling_parameters': 'ProfilingParameters',
            'disable_profiler': 'DisableProfiler'
        }

        self._s3_output_path = s3_output_path
        self._profiling_interval_in_milliseconds = profiling_interval_in_milliseconds
        self._profiling_parameters = profiling_parameters
        self._disable_profiler = disable_profiler

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfilerConfigForUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfilerConfigForUpdate of this ProfilerConfigForUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_output_path(self):
        """Gets the s3_output_path of this ProfilerConfigForUpdate.


        :return: The s3_output_path of this ProfilerConfigForUpdate.
        :rtype: str
        """
        return self._s3_output_path

    @s3_output_path.setter
    def s3_output_path(self, s3_output_path):
        """Sets the s3_output_path of this ProfilerConfigForUpdate.


        :param s3_output_path: The s3_output_path of this ProfilerConfigForUpdate.
        :type s3_output_path: str
        """

        self._s3_output_path = s3_output_path

    @property
    def profiling_interval_in_milliseconds(self):
        """Gets the profiling_interval_in_milliseconds of this ProfilerConfigForUpdate.


        :return: The profiling_interval_in_milliseconds of this ProfilerConfigForUpdate.
        :rtype: int
        """
        return self._profiling_interval_in_milliseconds

    @profiling_interval_in_milliseconds.setter
    def profiling_interval_in_milliseconds(self, profiling_interval_in_milliseconds):
        """Sets the profiling_interval_in_milliseconds of this ProfilerConfigForUpdate.


        :param profiling_interval_in_milliseconds: The profiling_interval_in_milliseconds of this ProfilerConfigForUpdate.
        :type profiling_interval_in_milliseconds: int
        """

        self._profiling_interval_in_milliseconds = profiling_interval_in_milliseconds

    @property
    def profiling_parameters(self):
        """Gets the profiling_parameters of this ProfilerConfigForUpdate.


        :return: The profiling_parameters of this ProfilerConfigForUpdate.
        :rtype: Dict
        """
        return self._profiling_parameters

    @profiling_parameters.setter
    def profiling_parameters(self, profiling_parameters):
        """Sets the profiling_parameters of this ProfilerConfigForUpdate.


        :param profiling_parameters: The profiling_parameters of this ProfilerConfigForUpdate.
        :type profiling_parameters: Dict
        """

        self._profiling_parameters = profiling_parameters

    @property
    def disable_profiler(self):
        """Gets the disable_profiler of this ProfilerConfigForUpdate.


        :return: The disable_profiler of this ProfilerConfigForUpdate.
        :rtype: bool
        """
        return self._disable_profiler

    @disable_profiler.setter
    def disable_profiler(self, disable_profiler):
        """Sets the disable_profiler of this ProfilerConfigForUpdate.


        :param disable_profiler: The disable_profiler of this ProfilerConfigForUpdate.
        :type disable_profiler: bool
        """

        self._disable_profiler = disable_profiler
