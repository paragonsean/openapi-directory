# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HumanLoopActivationConfigHumanLoopActivationConditionsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, human_loop_activation_conditions: str=None):
        """HumanLoopActivationConfigHumanLoopActivationConditionsConfig - a model defined in OpenAPI

        :param human_loop_activation_conditions: The human_loop_activation_conditions of this HumanLoopActivationConfigHumanLoopActivationConditionsConfig.
        """
        self.openapi_types = {
            'human_loop_activation_conditions': str
        }

        self.attribute_map = {
            'human_loop_activation_conditions': 'HumanLoopActivationConditions'
        }

        self._human_loop_activation_conditions = human_loop_activation_conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HumanLoopActivationConfigHumanLoopActivationConditionsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HumanLoopActivationConfig_HumanLoopActivationConditionsConfig of this HumanLoopActivationConfigHumanLoopActivationConditionsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def human_loop_activation_conditions(self):
        """Gets the human_loop_activation_conditions of this HumanLoopActivationConfigHumanLoopActivationConditionsConfig.


        :return: The human_loop_activation_conditions of this HumanLoopActivationConfigHumanLoopActivationConditionsConfig.
        :rtype: str
        """
        return self._human_loop_activation_conditions

    @human_loop_activation_conditions.setter
    def human_loop_activation_conditions(self, human_loop_activation_conditions):
        """Sets the human_loop_activation_conditions of this HumanLoopActivationConfigHumanLoopActivationConditionsConfig.


        :param human_loop_activation_conditions: The human_loop_activation_conditions of this HumanLoopActivationConfigHumanLoopActivationConditionsConfig.
        :type human_loop_activation_conditions: str
        """
        if human_loop_activation_conditions is None:
            raise ValueError("Invalid value for `human_loop_activation_conditions`, must not be `None`")

        self._human_loop_activation_conditions = human_loop_activation_conditions
