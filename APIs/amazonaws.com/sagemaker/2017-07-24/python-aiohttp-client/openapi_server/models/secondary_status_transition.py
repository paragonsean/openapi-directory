# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.secondary_status import SecondaryStatus
from openapi_server import util


class SecondaryStatusTransition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: SecondaryStatus=None, start_time: datetime=None, end_time: datetime=None, status_message: str=None):
        """SecondaryStatusTransition - a model defined in OpenAPI

        :param status: The status of this SecondaryStatusTransition.
        :param start_time: The start_time of this SecondaryStatusTransition.
        :param end_time: The end_time of this SecondaryStatusTransition.
        :param status_message: The status_message of this SecondaryStatusTransition.
        """
        self.openapi_types = {
            'status': SecondaryStatus,
            'start_time': datetime,
            'end_time': datetime,
            'status_message': str
        }

        self.attribute_map = {
            'status': 'Status',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'status_message': 'StatusMessage'
        }

        self._status = status
        self._start_time = start_time
        self._end_time = end_time
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecondaryStatusTransition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecondaryStatusTransition of this SecondaryStatusTransition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this SecondaryStatusTransition.


        :return: The status of this SecondaryStatusTransition.
        :rtype: SecondaryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SecondaryStatusTransition.


        :param status: The status of this SecondaryStatusTransition.
        :type status: SecondaryStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def start_time(self):
        """Gets the start_time of this SecondaryStatusTransition.


        :return: The start_time of this SecondaryStatusTransition.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SecondaryStatusTransition.


        :param start_time: The start_time of this SecondaryStatusTransition.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this SecondaryStatusTransition.


        :return: The end_time of this SecondaryStatusTransition.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SecondaryStatusTransition.


        :param end_time: The end_time of this SecondaryStatusTransition.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def status_message(self):
        """Gets the status_message of this SecondaryStatusTransition.


        :return: The status_message of this SecondaryStatusTransition.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this SecondaryStatusTransition.


        :param status_message: The status_message of this SecondaryStatusTransition.
        :type status_message: str
        """

        self._status_message = status_message
