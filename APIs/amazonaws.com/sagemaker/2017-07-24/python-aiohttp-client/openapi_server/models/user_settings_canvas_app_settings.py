# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.canvas_app_settings_model_register_settings import CanvasAppSettingsModelRegisterSettings
from openapi_server.models.canvas_app_settings_time_series_forecasting_settings import CanvasAppSettingsTimeSeriesForecastingSettings
from openapi_server.models.canvas_app_settings_workspace_settings import CanvasAppSettingsWorkspaceSettings
from openapi_server import util


class UserSettingsCanvasAppSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_series_forecasting_settings: CanvasAppSettingsTimeSeriesForecastingSettings=None, model_register_settings: CanvasAppSettingsModelRegisterSettings=None, workspace_settings: CanvasAppSettingsWorkspaceSettings=None):
        """UserSettingsCanvasAppSettings - a model defined in OpenAPI

        :param time_series_forecasting_settings: The time_series_forecasting_settings of this UserSettingsCanvasAppSettings.
        :param model_register_settings: The model_register_settings of this UserSettingsCanvasAppSettings.
        :param workspace_settings: The workspace_settings of this UserSettingsCanvasAppSettings.
        """
        self.openapi_types = {
            'time_series_forecasting_settings': CanvasAppSettingsTimeSeriesForecastingSettings,
            'model_register_settings': CanvasAppSettingsModelRegisterSettings,
            'workspace_settings': CanvasAppSettingsWorkspaceSettings
        }

        self.attribute_map = {
            'time_series_forecasting_settings': 'TimeSeriesForecastingSettings',
            'model_register_settings': 'ModelRegisterSettings',
            'workspace_settings': 'WorkspaceSettings'
        }

        self._time_series_forecasting_settings = time_series_forecasting_settings
        self._model_register_settings = model_register_settings
        self._workspace_settings = workspace_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserSettingsCanvasAppSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserSettings_CanvasAppSettings of this UserSettingsCanvasAppSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_series_forecasting_settings(self):
        """Gets the time_series_forecasting_settings of this UserSettingsCanvasAppSettings.


        :return: The time_series_forecasting_settings of this UserSettingsCanvasAppSettings.
        :rtype: CanvasAppSettingsTimeSeriesForecastingSettings
        """
        return self._time_series_forecasting_settings

    @time_series_forecasting_settings.setter
    def time_series_forecasting_settings(self, time_series_forecasting_settings):
        """Sets the time_series_forecasting_settings of this UserSettingsCanvasAppSettings.


        :param time_series_forecasting_settings: The time_series_forecasting_settings of this UserSettingsCanvasAppSettings.
        :type time_series_forecasting_settings: CanvasAppSettingsTimeSeriesForecastingSettings
        """

        self._time_series_forecasting_settings = time_series_forecasting_settings

    @property
    def model_register_settings(self):
        """Gets the model_register_settings of this UserSettingsCanvasAppSettings.


        :return: The model_register_settings of this UserSettingsCanvasAppSettings.
        :rtype: CanvasAppSettingsModelRegisterSettings
        """
        return self._model_register_settings

    @model_register_settings.setter
    def model_register_settings(self, model_register_settings):
        """Sets the model_register_settings of this UserSettingsCanvasAppSettings.


        :param model_register_settings: The model_register_settings of this UserSettingsCanvasAppSettings.
        :type model_register_settings: CanvasAppSettingsModelRegisterSettings
        """

        self._model_register_settings = model_register_settings

    @property
    def workspace_settings(self):
        """Gets the workspace_settings of this UserSettingsCanvasAppSettings.


        :return: The workspace_settings of this UserSettingsCanvasAppSettings.
        :rtype: CanvasAppSettingsWorkspaceSettings
        """
        return self._workspace_settings

    @workspace_settings.setter
    def workspace_settings(self, workspace_settings):
        """Sets the workspace_settings of this UserSettingsCanvasAppSettings.


        :param workspace_settings: The workspace_settings of this UserSettingsCanvasAppSettings.
        :type workspace_settings: CanvasAppSettingsWorkspaceSettings
        """

        self._workspace_settings = workspace_settings
