# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.training_image_config_training_repository_auth_config import TrainingImageConfigTrainingRepositoryAuthConfig
from openapi_server.models.training_repository_access_mode import TrainingRepositoryAccessMode
from openapi_server import util


class TrainingImageConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, training_repository_access_mode: TrainingRepositoryAccessMode=None, training_repository_auth_config: TrainingImageConfigTrainingRepositoryAuthConfig=None):
        """TrainingImageConfig - a model defined in OpenAPI

        :param training_repository_access_mode: The training_repository_access_mode of this TrainingImageConfig.
        :param training_repository_auth_config: The training_repository_auth_config of this TrainingImageConfig.
        """
        self.openapi_types = {
            'training_repository_access_mode': TrainingRepositoryAccessMode,
            'training_repository_auth_config': TrainingImageConfigTrainingRepositoryAuthConfig
        }

        self.attribute_map = {
            'training_repository_access_mode': 'TrainingRepositoryAccessMode',
            'training_repository_auth_config': 'TrainingRepositoryAuthConfig'
        }

        self._training_repository_access_mode = training_repository_access_mode
        self._training_repository_auth_config = training_repository_auth_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingImageConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrainingImageConfig of this TrainingImageConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def training_repository_access_mode(self):
        """Gets the training_repository_access_mode of this TrainingImageConfig.


        :return: The training_repository_access_mode of this TrainingImageConfig.
        :rtype: TrainingRepositoryAccessMode
        """
        return self._training_repository_access_mode

    @training_repository_access_mode.setter
    def training_repository_access_mode(self, training_repository_access_mode):
        """Sets the training_repository_access_mode of this TrainingImageConfig.


        :param training_repository_access_mode: The training_repository_access_mode of this TrainingImageConfig.
        :type training_repository_access_mode: TrainingRepositoryAccessMode
        """
        if training_repository_access_mode is None:
            raise ValueError("Invalid value for `training_repository_access_mode`, must not be `None`")

        self._training_repository_access_mode = training_repository_access_mode

    @property
    def training_repository_auth_config(self):
        """Gets the training_repository_auth_config of this TrainingImageConfig.


        :return: The training_repository_auth_config of this TrainingImageConfig.
        :rtype: TrainingImageConfigTrainingRepositoryAuthConfig
        """
        return self._training_repository_auth_config

    @training_repository_auth_config.setter
    def training_repository_auth_config(self, training_repository_auth_config):
        """Sets the training_repository_auth_config of this TrainingImageConfig.


        :param training_repository_auth_config: The training_repository_auth_config of this TrainingImageConfig.
        :type training_repository_auth_config: TrainingImageConfigTrainingRepositoryAuthConfig
        """

        self._training_repository_auth_config = training_repository_auth_config
