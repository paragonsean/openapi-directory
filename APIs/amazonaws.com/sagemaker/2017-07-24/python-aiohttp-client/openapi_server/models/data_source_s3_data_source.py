# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_data_distribution import S3DataDistribution
from openapi_server.models.s3_data_type import S3DataType
from openapi_server import util


class DataSourceS3DataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_data_type: S3DataType=None, s3_uri: str=None, s3_data_distribution_type: S3DataDistribution=None, attribute_names: List=None, instance_group_names: List=None):
        """DataSourceS3DataSource - a model defined in OpenAPI

        :param s3_data_type: The s3_data_type of this DataSourceS3DataSource.
        :param s3_uri: The s3_uri of this DataSourceS3DataSource.
        :param s3_data_distribution_type: The s3_data_distribution_type of this DataSourceS3DataSource.
        :param attribute_names: The attribute_names of this DataSourceS3DataSource.
        :param instance_group_names: The instance_group_names of this DataSourceS3DataSource.
        """
        self.openapi_types = {
            's3_data_type': S3DataType,
            's3_uri': str,
            's3_data_distribution_type': S3DataDistribution,
            'attribute_names': List,
            'instance_group_names': List
        }

        self.attribute_map = {
            's3_data_type': 'S3DataType',
            's3_uri': 'S3Uri',
            's3_data_distribution_type': 'S3DataDistributionType',
            'attribute_names': 'AttributeNames',
            'instance_group_names': 'InstanceGroupNames'
        }

        self._s3_data_type = s3_data_type
        self._s3_uri = s3_uri
        self._s3_data_distribution_type = s3_data_distribution_type
        self._attribute_names = attribute_names
        self._instance_group_names = instance_group_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSourceS3DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSource_S3DataSource of this DataSourceS3DataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_data_type(self):
        """Gets the s3_data_type of this DataSourceS3DataSource.


        :return: The s3_data_type of this DataSourceS3DataSource.
        :rtype: S3DataType
        """
        return self._s3_data_type

    @s3_data_type.setter
    def s3_data_type(self, s3_data_type):
        """Sets the s3_data_type of this DataSourceS3DataSource.


        :param s3_data_type: The s3_data_type of this DataSourceS3DataSource.
        :type s3_data_type: S3DataType
        """
        if s3_data_type is None:
            raise ValueError("Invalid value for `s3_data_type`, must not be `None`")

        self._s3_data_type = s3_data_type

    @property
    def s3_uri(self):
        """Gets the s3_uri of this DataSourceS3DataSource.


        :return: The s3_uri of this DataSourceS3DataSource.
        :rtype: str
        """
        return self._s3_uri

    @s3_uri.setter
    def s3_uri(self, s3_uri):
        """Sets the s3_uri of this DataSourceS3DataSource.


        :param s3_uri: The s3_uri of this DataSourceS3DataSource.
        :type s3_uri: str
        """
        if s3_uri is None:
            raise ValueError("Invalid value for `s3_uri`, must not be `None`")

        self._s3_uri = s3_uri

    @property
    def s3_data_distribution_type(self):
        """Gets the s3_data_distribution_type of this DataSourceS3DataSource.


        :return: The s3_data_distribution_type of this DataSourceS3DataSource.
        :rtype: S3DataDistribution
        """
        return self._s3_data_distribution_type

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, s3_data_distribution_type):
        """Sets the s3_data_distribution_type of this DataSourceS3DataSource.


        :param s3_data_distribution_type: The s3_data_distribution_type of this DataSourceS3DataSource.
        :type s3_data_distribution_type: S3DataDistribution
        """

        self._s3_data_distribution_type = s3_data_distribution_type

    @property
    def attribute_names(self):
        """Gets the attribute_names of this DataSourceS3DataSource.


        :return: The attribute_names of this DataSourceS3DataSource.
        :rtype: List
        """
        return self._attribute_names

    @attribute_names.setter
    def attribute_names(self, attribute_names):
        """Sets the attribute_names of this DataSourceS3DataSource.


        :param attribute_names: The attribute_names of this DataSourceS3DataSource.
        :type attribute_names: List
        """

        self._attribute_names = attribute_names

    @property
    def instance_group_names(self):
        """Gets the instance_group_names of this DataSourceS3DataSource.


        :return: The instance_group_names of this DataSourceS3DataSource.
        :rtype: List
        """
        return self._instance_group_names

    @instance_group_names.setter
    def instance_group_names(self, instance_group_names):
        """Sets the instance_group_names of this DataSourceS3DataSource.


        :param instance_group_names: The instance_group_names of this DataSourceS3DataSource.
        :type instance_group_names: List
        """

        self._instance_group_names = instance_group_names
