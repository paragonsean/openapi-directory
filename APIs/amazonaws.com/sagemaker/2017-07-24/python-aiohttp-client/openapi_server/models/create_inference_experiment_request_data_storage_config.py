# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capture_content_type_header import CaptureContentTypeHeader
from openapi_server import util


class CreateInferenceExperimentRequestDataStorageConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: str=None, kms_key: str=None, content_type: CaptureContentTypeHeader=None):
        """CreateInferenceExperimentRequestDataStorageConfig - a model defined in OpenAPI

        :param destination: The destination of this CreateInferenceExperimentRequestDataStorageConfig.
        :param kms_key: The kms_key of this CreateInferenceExperimentRequestDataStorageConfig.
        :param content_type: The content_type of this CreateInferenceExperimentRequestDataStorageConfig.
        """
        self.openapi_types = {
            'destination': str,
            'kms_key': str,
            'content_type': CaptureContentTypeHeader
        }

        self.attribute_map = {
            'destination': 'Destination',
            'kms_key': 'KmsKey',
            'content_type': 'ContentType'
        }

        self._destination = destination
        self._kms_key = kms_key
        self._content_type = content_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateInferenceExperimentRequestDataStorageConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateInferenceExperimentRequest_DataStorageConfig of this CreateInferenceExperimentRequestDataStorageConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this CreateInferenceExperimentRequestDataStorageConfig.


        :return: The destination of this CreateInferenceExperimentRequestDataStorageConfig.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CreateInferenceExperimentRequestDataStorageConfig.


        :param destination: The destination of this CreateInferenceExperimentRequestDataStorageConfig.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def kms_key(self):
        """Gets the kms_key of this CreateInferenceExperimentRequestDataStorageConfig.


        :return: The kms_key of this CreateInferenceExperimentRequestDataStorageConfig.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this CreateInferenceExperimentRequestDataStorageConfig.


        :param kms_key: The kms_key of this CreateInferenceExperimentRequestDataStorageConfig.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def content_type(self):
        """Gets the content_type of this CreateInferenceExperimentRequestDataStorageConfig.


        :return: The content_type of this CreateInferenceExperimentRequestDataStorageConfig.
        :rtype: CaptureContentTypeHeader
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CreateInferenceExperimentRequestDataStorageConfig.


        :param content_type: The content_type of this CreateInferenceExperimentRequestDataStorageConfig.
        :type content_type: CaptureContentTypeHeader
        """

        self._content_type = content_type
