# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ui_template import UiTemplate
from openapi_server import util


class CreateHumanTaskUiRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, human_task_ui_name: str=None, ui_template: UiTemplate=None, tags: List=None):
        """CreateHumanTaskUiRequest - a model defined in OpenAPI

        :param human_task_ui_name: The human_task_ui_name of this CreateHumanTaskUiRequest.
        :param ui_template: The ui_template of this CreateHumanTaskUiRequest.
        :param tags: The tags of this CreateHumanTaskUiRequest.
        """
        self.openapi_types = {
            'human_task_ui_name': str,
            'ui_template': UiTemplate,
            'tags': List
        }

        self.attribute_map = {
            'human_task_ui_name': 'HumanTaskUiName',
            'ui_template': 'UiTemplate',
            'tags': 'Tags'
        }

        self._human_task_ui_name = human_task_ui_name
        self._ui_template = ui_template
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateHumanTaskUiRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateHumanTaskUiRequest of this CreateHumanTaskUiRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def human_task_ui_name(self):
        """Gets the human_task_ui_name of this CreateHumanTaskUiRequest.


        :return: The human_task_ui_name of this CreateHumanTaskUiRequest.
        :rtype: str
        """
        return self._human_task_ui_name

    @human_task_ui_name.setter
    def human_task_ui_name(self, human_task_ui_name):
        """Sets the human_task_ui_name of this CreateHumanTaskUiRequest.


        :param human_task_ui_name: The human_task_ui_name of this CreateHumanTaskUiRequest.
        :type human_task_ui_name: str
        """
        if human_task_ui_name is None:
            raise ValueError("Invalid value for `human_task_ui_name`, must not be `None`")

        self._human_task_ui_name = human_task_ui_name

    @property
    def ui_template(self):
        """Gets the ui_template of this CreateHumanTaskUiRequest.


        :return: The ui_template of this CreateHumanTaskUiRequest.
        :rtype: UiTemplate
        """
        return self._ui_template

    @ui_template.setter
    def ui_template(self, ui_template):
        """Sets the ui_template of this CreateHumanTaskUiRequest.


        :param ui_template: The ui_template of this CreateHumanTaskUiRequest.
        :type ui_template: UiTemplate
        """
        if ui_template is None:
            raise ValueError("Invalid value for `ui_template`, must not be `None`")

        self._ui_template = ui_template

    @property
    def tags(self):
        """Gets the tags of this CreateHumanTaskUiRequest.


        :return: The tags of this CreateHumanTaskUiRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateHumanTaskUiRequest.


        :param tags: The tags of this CreateHumanTaskUiRequest.
        :type tags: List
        """

        self._tags = tags
