# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tuning_job_completion_criteria_best_objective_not_improving import TuningJobCompletionCriteriaBestObjectiveNotImproving
from openapi_server.models.tuning_job_completion_criteria_convergence_detected import TuningJobCompletionCriteriaConvergenceDetected
from openapi_server import util


class TuningJobCompletionCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_objective_metric_value: float=None, best_objective_not_improving: TuningJobCompletionCriteriaBestObjectiveNotImproving=None, convergence_detected: TuningJobCompletionCriteriaConvergenceDetected=None):
        """TuningJobCompletionCriteria - a model defined in OpenAPI

        :param target_objective_metric_value: The target_objective_metric_value of this TuningJobCompletionCriteria.
        :param best_objective_not_improving: The best_objective_not_improving of this TuningJobCompletionCriteria.
        :param convergence_detected: The convergence_detected of this TuningJobCompletionCriteria.
        """
        self.openapi_types = {
            'target_objective_metric_value': float,
            'best_objective_not_improving': TuningJobCompletionCriteriaBestObjectiveNotImproving,
            'convergence_detected': TuningJobCompletionCriteriaConvergenceDetected
        }

        self.attribute_map = {
            'target_objective_metric_value': 'TargetObjectiveMetricValue',
            'best_objective_not_improving': 'BestObjectiveNotImproving',
            'convergence_detected': 'ConvergenceDetected'
        }

        self._target_objective_metric_value = target_objective_metric_value
        self._best_objective_not_improving = best_objective_not_improving
        self._convergence_detected = convergence_detected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TuningJobCompletionCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TuningJobCompletionCriteria of this TuningJobCompletionCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_objective_metric_value(self):
        """Gets the target_objective_metric_value of this TuningJobCompletionCriteria.


        :return: The target_objective_metric_value of this TuningJobCompletionCriteria.
        :rtype: float
        """
        return self._target_objective_metric_value

    @target_objective_metric_value.setter
    def target_objective_metric_value(self, target_objective_metric_value):
        """Sets the target_objective_metric_value of this TuningJobCompletionCriteria.


        :param target_objective_metric_value: The target_objective_metric_value of this TuningJobCompletionCriteria.
        :type target_objective_metric_value: float
        """

        self._target_objective_metric_value = target_objective_metric_value

    @property
    def best_objective_not_improving(self):
        """Gets the best_objective_not_improving of this TuningJobCompletionCriteria.


        :return: The best_objective_not_improving of this TuningJobCompletionCriteria.
        :rtype: TuningJobCompletionCriteriaBestObjectiveNotImproving
        """
        return self._best_objective_not_improving

    @best_objective_not_improving.setter
    def best_objective_not_improving(self, best_objective_not_improving):
        """Sets the best_objective_not_improving of this TuningJobCompletionCriteria.


        :param best_objective_not_improving: The best_objective_not_improving of this TuningJobCompletionCriteria.
        :type best_objective_not_improving: TuningJobCompletionCriteriaBestObjectiveNotImproving
        """

        self._best_objective_not_improving = best_objective_not_improving

    @property
    def convergence_detected(self):
        """Gets the convergence_detected of this TuningJobCompletionCriteria.


        :return: The convergence_detected of this TuningJobCompletionCriteria.
        :rtype: TuningJobCompletionCriteriaConvergenceDetected
        """
        return self._convergence_detected

    @convergence_detected.setter
    def convergence_detected(self, convergence_detected):
        """Sets the convergence_detected of this TuningJobCompletionCriteria.


        :param convergence_detected: The convergence_detected of this TuningJobCompletionCriteria.
        :type convergence_detected: TuningJobCompletionCriteriaConvergenceDetected
        """

        self._convergence_detected = convergence_detected
