# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_config_repository_auth_config import ImageConfigRepositoryAuthConfig
from openapi_server.models.repository_access_mode import RepositoryAccessMode
from openapi_server import util


class ContainerDefinitionImageConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_access_mode: RepositoryAccessMode=None, repository_auth_config: ImageConfigRepositoryAuthConfig=None):
        """ContainerDefinitionImageConfig - a model defined in OpenAPI

        :param repository_access_mode: The repository_access_mode of this ContainerDefinitionImageConfig.
        :param repository_auth_config: The repository_auth_config of this ContainerDefinitionImageConfig.
        """
        self.openapi_types = {
            'repository_access_mode': RepositoryAccessMode,
            'repository_auth_config': ImageConfigRepositoryAuthConfig
        }

        self.attribute_map = {
            'repository_access_mode': 'RepositoryAccessMode',
            'repository_auth_config': 'RepositoryAuthConfig'
        }

        self._repository_access_mode = repository_access_mode
        self._repository_auth_config = repository_auth_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerDefinitionImageConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerDefinition_ImageConfig of this ContainerDefinitionImageConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_access_mode(self):
        """Gets the repository_access_mode of this ContainerDefinitionImageConfig.


        :return: The repository_access_mode of this ContainerDefinitionImageConfig.
        :rtype: RepositoryAccessMode
        """
        return self._repository_access_mode

    @repository_access_mode.setter
    def repository_access_mode(self, repository_access_mode):
        """Sets the repository_access_mode of this ContainerDefinitionImageConfig.


        :param repository_access_mode: The repository_access_mode of this ContainerDefinitionImageConfig.
        :type repository_access_mode: RepositoryAccessMode
        """
        if repository_access_mode is None:
            raise ValueError("Invalid value for `repository_access_mode`, must not be `None`")

        self._repository_access_mode = repository_access_mode

    @property
    def repository_auth_config(self):
        """Gets the repository_auth_config of this ContainerDefinitionImageConfig.


        :return: The repository_auth_config of this ContainerDefinitionImageConfig.
        :rtype: ImageConfigRepositoryAuthConfig
        """
        return self._repository_auth_config

    @repository_auth_config.setter
    def repository_auth_config(self, repository_auth_config):
        """Sets the repository_auth_config of this ContainerDefinitionImageConfig.


        :param repository_auth_config: The repository_auth_config of this ContainerDefinitionImageConfig.
        :type repository_auth_config: ImageConfigRepositoryAuthConfig
        """

        self._repository_auth_config = repository_auth_config
