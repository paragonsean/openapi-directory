# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_ml_job_completion_criteria import AutoMLJobCompletionCriteria
from openapi_server.models.auto_ml_job_objective import AutoMLJobObjective
from openapi_server.models.problem_type import ProblemType
from openapi_server import util


class ResolvedAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_ml_job_objective: AutoMLJobObjective=None, problem_type: ProblemType=None, completion_criteria: AutoMLJobCompletionCriteria=None):
        """ResolvedAttributes - a model defined in OpenAPI

        :param auto_ml_job_objective: The auto_ml_job_objective of this ResolvedAttributes.
        :param problem_type: The problem_type of this ResolvedAttributes.
        :param completion_criteria: The completion_criteria of this ResolvedAttributes.
        """
        self.openapi_types = {
            'auto_ml_job_objective': AutoMLJobObjective,
            'problem_type': ProblemType,
            'completion_criteria': AutoMLJobCompletionCriteria
        }

        self.attribute_map = {
            'auto_ml_job_objective': 'AutoMLJobObjective',
            'problem_type': 'ProblemType',
            'completion_criteria': 'CompletionCriteria'
        }

        self._auto_ml_job_objective = auto_ml_job_objective
        self._problem_type = problem_type
        self._completion_criteria = completion_criteria

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResolvedAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResolvedAttributes of this ResolvedAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_ml_job_objective(self):
        """Gets the auto_ml_job_objective of this ResolvedAttributes.


        :return: The auto_ml_job_objective of this ResolvedAttributes.
        :rtype: AutoMLJobObjective
        """
        return self._auto_ml_job_objective

    @auto_ml_job_objective.setter
    def auto_ml_job_objective(self, auto_ml_job_objective):
        """Sets the auto_ml_job_objective of this ResolvedAttributes.


        :param auto_ml_job_objective: The auto_ml_job_objective of this ResolvedAttributes.
        :type auto_ml_job_objective: AutoMLJobObjective
        """

        self._auto_ml_job_objective = auto_ml_job_objective

    @property
    def problem_type(self):
        """Gets the problem_type of this ResolvedAttributes.


        :return: The problem_type of this ResolvedAttributes.
        :rtype: ProblemType
        """
        return self._problem_type

    @problem_type.setter
    def problem_type(self, problem_type):
        """Sets the problem_type of this ResolvedAttributes.


        :param problem_type: The problem_type of this ResolvedAttributes.
        :type problem_type: ProblemType
        """

        self._problem_type = problem_type

    @property
    def completion_criteria(self):
        """Gets the completion_criteria of this ResolvedAttributes.


        :return: The completion_criteria of this ResolvedAttributes.
        :rtype: AutoMLJobCompletionCriteria
        """
        return self._completion_criteria

    @completion_criteria.setter
    def completion_criteria(self, completion_criteria):
        """Sets the completion_criteria of this ResolvedAttributes.


        :param completion_criteria: The completion_criteria of this ResolvedAttributes.
        :type completion_criteria: AutoMLJobCompletionCriteria
        """

        self._completion_criteria = completion_criteria
