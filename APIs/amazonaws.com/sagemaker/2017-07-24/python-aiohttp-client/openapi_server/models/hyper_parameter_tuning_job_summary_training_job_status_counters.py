# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HyperParameterTuningJobSummaryTrainingJobStatusCounters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: int=None, in_progress: int=None, retryable_error: int=None, non_retryable_error: int=None, stopped: int=None):
        """HyperParameterTuningJobSummaryTrainingJobStatusCounters - a model defined in OpenAPI

        :param completed: The completed of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :param in_progress: The in_progress of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :param retryable_error: The retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :param non_retryable_error: The non_retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :param stopped: The stopped of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        """
        self.openapi_types = {
            'completed': int,
            'in_progress': int,
            'retryable_error': int,
            'non_retryable_error': int,
            'stopped': int
        }

        self.attribute_map = {
            'completed': 'Completed',
            'in_progress': 'InProgress',
            'retryable_error': 'RetryableError',
            'non_retryable_error': 'NonRetryableError',
            'stopped': 'Stopped'
        }

        self._completed = completed
        self._in_progress = in_progress
        self._retryable_error = retryable_error
        self._non_retryable_error = non_retryable_error
        self._stopped = stopped

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HyperParameterTuningJobSummaryTrainingJobStatusCounters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HyperParameterTuningJobSummary_TrainingJobStatusCounters of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :return: The completed of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :rtype: int
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :param completed: The completed of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :type completed: int
        """

        self._completed = completed

    @property
    def in_progress(self):
        """Gets the in_progress of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :return: The in_progress of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :rtype: int
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :param in_progress: The in_progress of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :type in_progress: int
        """

        self._in_progress = in_progress

    @property
    def retryable_error(self):
        """Gets the retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :return: The retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :rtype: int
        """
        return self._retryable_error

    @retryable_error.setter
    def retryable_error(self, retryable_error):
        """Sets the retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :param retryable_error: The retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :type retryable_error: int
        """

        self._retryable_error = retryable_error

    @property
    def non_retryable_error(self):
        """Gets the non_retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :return: The non_retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :rtype: int
        """
        return self._non_retryable_error

    @non_retryable_error.setter
    def non_retryable_error(self, non_retryable_error):
        """Sets the non_retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :param non_retryable_error: The non_retryable_error of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :type non_retryable_error: int
        """

        self._non_retryable_error = non_retryable_error

    @property
    def stopped(self):
        """Gets the stopped of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :return: The stopped of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :rtype: int
        """
        return self._stopped

    @stopped.setter
    def stopped(self, stopped):
        """Sets the stopped of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.


        :param stopped: The stopped of this HyperParameterTuningJobSummaryTrainingJobStatusCounters.
        :type stopped: int
        """

        self._stopped = stopped
