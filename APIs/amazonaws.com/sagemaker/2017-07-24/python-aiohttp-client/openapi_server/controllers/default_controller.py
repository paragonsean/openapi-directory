from typing import List, Dict
from aiohttp import web

from openapi_server.models.add_association_request import AddAssociationRequest
from openapi_server.models.add_association_response import AddAssociationResponse
from openapi_server.models.add_tags_input import AddTagsInput
from openapi_server.models.add_tags_output import AddTagsOutput
from openapi_server.models.associate_trial_component_request import AssociateTrialComponentRequest
from openapi_server.models.associate_trial_component_response import AssociateTrialComponentResponse
from openapi_server.models.batch_describe_model_package_input import BatchDescribeModelPackageInput
from openapi_server.models.batch_describe_model_package_output import BatchDescribeModelPackageOutput
from openapi_server.models.create_action_request import CreateActionRequest
from openapi_server.models.create_action_response import CreateActionResponse
from openapi_server.models.create_algorithm_input import CreateAlgorithmInput
from openapi_server.models.create_algorithm_output import CreateAlgorithmOutput
from openapi_server.models.create_app_image_config_request import CreateAppImageConfigRequest
from openapi_server.models.create_app_image_config_response import CreateAppImageConfigResponse
from openapi_server.models.create_app_request import CreateAppRequest
from openapi_server.models.create_app_response import CreateAppResponse
from openapi_server.models.create_artifact_request import CreateArtifactRequest
from openapi_server.models.create_artifact_response import CreateArtifactResponse
from openapi_server.models.create_auto_ml_job_request import CreateAutoMLJobRequest
from openapi_server.models.create_auto_ml_job_response import CreateAutoMLJobResponse
from openapi_server.models.create_auto_ml_job_v2_request import CreateAutoMLJobV2Request
from openapi_server.models.create_auto_ml_job_v2_response import CreateAutoMLJobV2Response
from openapi_server.models.create_code_repository_input import CreateCodeRepositoryInput
from openapi_server.models.create_code_repository_output import CreateCodeRepositoryOutput
from openapi_server.models.create_compilation_job_request import CreateCompilationJobRequest
from openapi_server.models.create_compilation_job_response import CreateCompilationJobResponse
from openapi_server.models.create_context_request import CreateContextRequest
from openapi_server.models.create_context_response import CreateContextResponse
from openapi_server.models.create_data_quality_job_definition_request import CreateDataQualityJobDefinitionRequest
from openapi_server.models.create_data_quality_job_definition_response import CreateDataQualityJobDefinitionResponse
from openapi_server.models.create_device_fleet_request import CreateDeviceFleetRequest
from openapi_server.models.create_domain_request import CreateDomainRequest
from openapi_server.models.create_domain_response import CreateDomainResponse
from openapi_server.models.create_edge_deployment_plan_request import CreateEdgeDeploymentPlanRequest
from openapi_server.models.create_edge_deployment_plan_response import CreateEdgeDeploymentPlanResponse
from openapi_server.models.create_edge_deployment_stage_request import CreateEdgeDeploymentStageRequest
from openapi_server.models.create_edge_packaging_job_request import CreateEdgePackagingJobRequest
from openapi_server.models.create_endpoint_config_input import CreateEndpointConfigInput
from openapi_server.models.create_endpoint_config_output import CreateEndpointConfigOutput
from openapi_server.models.create_endpoint_input import CreateEndpointInput
from openapi_server.models.create_endpoint_output import CreateEndpointOutput
from openapi_server.models.create_experiment_request import CreateExperimentRequest
from openapi_server.models.create_experiment_response import CreateExperimentResponse
from openapi_server.models.create_feature_group_request import CreateFeatureGroupRequest
from openapi_server.models.create_feature_group_response import CreateFeatureGroupResponse
from openapi_server.models.create_flow_definition_request import CreateFlowDefinitionRequest
from openapi_server.models.create_flow_definition_response import CreateFlowDefinitionResponse
from openapi_server.models.create_hub_request import CreateHubRequest
from openapi_server.models.create_hub_response import CreateHubResponse
from openapi_server.models.create_human_task_ui_request import CreateHumanTaskUiRequest
from openapi_server.models.create_human_task_ui_response import CreateHumanTaskUiResponse
from openapi_server.models.create_hyper_parameter_tuning_job_request import CreateHyperParameterTuningJobRequest
from openapi_server.models.create_hyper_parameter_tuning_job_response import CreateHyperParameterTuningJobResponse
from openapi_server.models.create_image_request import CreateImageRequest
from openapi_server.models.create_image_response import CreateImageResponse
from openapi_server.models.create_image_version_request import CreateImageVersionRequest
from openapi_server.models.create_image_version_response import CreateImageVersionResponse
from openapi_server.models.create_inference_experiment_request import CreateInferenceExperimentRequest
from openapi_server.models.create_inference_experiment_response import CreateInferenceExperimentResponse
from openapi_server.models.create_inference_recommendations_job_request import CreateInferenceRecommendationsJobRequest
from openapi_server.models.create_inference_recommendations_job_response import CreateInferenceRecommendationsJobResponse
from openapi_server.models.create_labeling_job_request import CreateLabelingJobRequest
from openapi_server.models.create_labeling_job_response import CreateLabelingJobResponse
from openapi_server.models.create_model_bias_job_definition_request import CreateModelBiasJobDefinitionRequest
from openapi_server.models.create_model_bias_job_definition_response import CreateModelBiasJobDefinitionResponse
from openapi_server.models.create_model_card_export_job_request import CreateModelCardExportJobRequest
from openapi_server.models.create_model_card_export_job_response import CreateModelCardExportJobResponse
from openapi_server.models.create_model_card_request import CreateModelCardRequest
from openapi_server.models.create_model_card_response import CreateModelCardResponse
from openapi_server.models.create_model_explainability_job_definition_request import CreateModelExplainabilityJobDefinitionRequest
from openapi_server.models.create_model_explainability_job_definition_response import CreateModelExplainabilityJobDefinitionResponse
from openapi_server.models.create_model_input import CreateModelInput
from openapi_server.models.create_model_output import CreateModelOutput
from openapi_server.models.create_model_package_group_input import CreateModelPackageGroupInput
from openapi_server.models.create_model_package_group_output import CreateModelPackageGroupOutput
from openapi_server.models.create_model_package_input import CreateModelPackageInput
from openapi_server.models.create_model_package_output import CreateModelPackageOutput
from openapi_server.models.create_model_quality_job_definition_request import CreateModelQualityJobDefinitionRequest
from openapi_server.models.create_model_quality_job_definition_response import CreateModelQualityJobDefinitionResponse
from openapi_server.models.create_monitoring_schedule_request import CreateMonitoringScheduleRequest
from openapi_server.models.create_monitoring_schedule_response import CreateMonitoringScheduleResponse
from openapi_server.models.create_notebook_instance_input import CreateNotebookInstanceInput
from openapi_server.models.create_notebook_instance_lifecycle_config_input import CreateNotebookInstanceLifecycleConfigInput
from openapi_server.models.create_notebook_instance_lifecycle_config_output import CreateNotebookInstanceLifecycleConfigOutput
from openapi_server.models.create_notebook_instance_output import CreateNotebookInstanceOutput
from openapi_server.models.create_pipeline_request import CreatePipelineRequest
from openapi_server.models.create_pipeline_response import CreatePipelineResponse
from openapi_server.models.create_presigned_domain_url_request import CreatePresignedDomainUrlRequest
from openapi_server.models.create_presigned_domain_url_response import CreatePresignedDomainUrlResponse
from openapi_server.models.create_presigned_notebook_instance_url_input import CreatePresignedNotebookInstanceUrlInput
from openapi_server.models.create_presigned_notebook_instance_url_output import CreatePresignedNotebookInstanceUrlOutput
from openapi_server.models.create_processing_job_request import CreateProcessingJobRequest
from openapi_server.models.create_processing_job_response import CreateProcessingJobResponse
from openapi_server.models.create_project_input import CreateProjectInput
from openapi_server.models.create_project_output import CreateProjectOutput
from openapi_server.models.create_space_request import CreateSpaceRequest
from openapi_server.models.create_space_response import CreateSpaceResponse
from openapi_server.models.create_studio_lifecycle_config_request import CreateStudioLifecycleConfigRequest
from openapi_server.models.create_studio_lifecycle_config_response import CreateStudioLifecycleConfigResponse
from openapi_server.models.create_training_job_request import CreateTrainingJobRequest
from openapi_server.models.create_training_job_response import CreateTrainingJobResponse
from openapi_server.models.create_transform_job_request import CreateTransformJobRequest
from openapi_server.models.create_transform_job_response import CreateTransformJobResponse
from openapi_server.models.create_trial_component_request import CreateTrialComponentRequest
from openapi_server.models.create_trial_component_response import CreateTrialComponentResponse
from openapi_server.models.create_trial_request import CreateTrialRequest
from openapi_server.models.create_trial_response import CreateTrialResponse
from openapi_server.models.create_user_profile_request import CreateUserProfileRequest
from openapi_server.models.create_user_profile_response import CreateUserProfileResponse
from openapi_server.models.create_workforce_request import CreateWorkforceRequest
from openapi_server.models.create_workforce_response import CreateWorkforceResponse
from openapi_server.models.create_workteam_request import CreateWorkteamRequest
from openapi_server.models.create_workteam_response import CreateWorkteamResponse
from openapi_server.models.delete_action_request import DeleteActionRequest
from openapi_server.models.delete_action_response import DeleteActionResponse
from openapi_server.models.delete_algorithm_input import DeleteAlgorithmInput
from openapi_server.models.delete_app_image_config_request import DeleteAppImageConfigRequest
from openapi_server.models.delete_app_request import DeleteAppRequest
from openapi_server.models.delete_artifact_request import DeleteArtifactRequest
from openapi_server.models.delete_artifact_response import DeleteArtifactResponse
from openapi_server.models.delete_association_request import DeleteAssociationRequest
from openapi_server.models.delete_association_response import DeleteAssociationResponse
from openapi_server.models.delete_code_repository_input import DeleteCodeRepositoryInput
from openapi_server.models.delete_context_request import DeleteContextRequest
from openapi_server.models.delete_context_response import DeleteContextResponse
from openapi_server.models.delete_data_quality_job_definition_request import DeleteDataQualityJobDefinitionRequest
from openapi_server.models.delete_device_fleet_request import DeleteDeviceFleetRequest
from openapi_server.models.delete_domain_request import DeleteDomainRequest
from openapi_server.models.delete_edge_deployment_plan_request import DeleteEdgeDeploymentPlanRequest
from openapi_server.models.delete_edge_deployment_stage_request import DeleteEdgeDeploymentStageRequest
from openapi_server.models.delete_endpoint_config_input import DeleteEndpointConfigInput
from openapi_server.models.delete_endpoint_input import DeleteEndpointInput
from openapi_server.models.delete_experiment_request import DeleteExperimentRequest
from openapi_server.models.delete_experiment_response import DeleteExperimentResponse
from openapi_server.models.delete_feature_group_request import DeleteFeatureGroupRequest
from openapi_server.models.delete_flow_definition_request import DeleteFlowDefinitionRequest
from openapi_server.models.delete_hub_content_request import DeleteHubContentRequest
from openapi_server.models.delete_hub_request import DeleteHubRequest
from openapi_server.models.delete_human_task_ui_request import DeleteHumanTaskUiRequest
from openapi_server.models.delete_image_request import DeleteImageRequest
from openapi_server.models.delete_image_version_request import DeleteImageVersionRequest
from openapi_server.models.delete_inference_experiment_request import DeleteInferenceExperimentRequest
from openapi_server.models.delete_inference_experiment_response import DeleteInferenceExperimentResponse
from openapi_server.models.delete_model_bias_job_definition_request import DeleteModelBiasJobDefinitionRequest
from openapi_server.models.delete_model_card_request import DeleteModelCardRequest
from openapi_server.models.delete_model_explainability_job_definition_request import DeleteModelExplainabilityJobDefinitionRequest
from openapi_server.models.delete_model_input import DeleteModelInput
from openapi_server.models.delete_model_package_group_input import DeleteModelPackageGroupInput
from openapi_server.models.delete_model_package_group_policy_input import DeleteModelPackageGroupPolicyInput
from openapi_server.models.delete_model_package_input import DeleteModelPackageInput
from openapi_server.models.delete_model_quality_job_definition_request import DeleteModelQualityJobDefinitionRequest
from openapi_server.models.delete_monitoring_schedule_request import DeleteMonitoringScheduleRequest
from openapi_server.models.delete_notebook_instance_input import DeleteNotebookInstanceInput
from openapi_server.models.delete_notebook_instance_lifecycle_config_input import DeleteNotebookInstanceLifecycleConfigInput
from openapi_server.models.delete_pipeline_request import DeletePipelineRequest
from openapi_server.models.delete_pipeline_response import DeletePipelineResponse
from openapi_server.models.delete_project_input import DeleteProjectInput
from openapi_server.models.delete_space_request import DeleteSpaceRequest
from openapi_server.models.delete_studio_lifecycle_config_request import DeleteStudioLifecycleConfigRequest
from openapi_server.models.delete_tags_input import DeleteTagsInput
from openapi_server.models.delete_trial_component_request import DeleteTrialComponentRequest
from openapi_server.models.delete_trial_component_response import DeleteTrialComponentResponse
from openapi_server.models.delete_trial_request import DeleteTrialRequest
from openapi_server.models.delete_trial_response import DeleteTrialResponse
from openapi_server.models.delete_user_profile_request import DeleteUserProfileRequest
from openapi_server.models.delete_workforce_request import DeleteWorkforceRequest
from openapi_server.models.delete_workteam_request import DeleteWorkteamRequest
from openapi_server.models.delete_workteam_response import DeleteWorkteamResponse
from openapi_server.models.deregister_devices_request import DeregisterDevicesRequest
from openapi_server.models.describe_action_request import DescribeActionRequest
from openapi_server.models.describe_action_response import DescribeActionResponse
from openapi_server.models.describe_algorithm_input import DescribeAlgorithmInput
from openapi_server.models.describe_algorithm_output import DescribeAlgorithmOutput
from openapi_server.models.describe_app_image_config_request import DescribeAppImageConfigRequest
from openapi_server.models.describe_app_image_config_response import DescribeAppImageConfigResponse
from openapi_server.models.describe_app_request import DescribeAppRequest
from openapi_server.models.describe_app_response import DescribeAppResponse
from openapi_server.models.describe_artifact_request import DescribeArtifactRequest
from openapi_server.models.describe_artifact_response import DescribeArtifactResponse
from openapi_server.models.describe_auto_ml_job_request import DescribeAutoMLJobRequest
from openapi_server.models.describe_auto_ml_job_response import DescribeAutoMLJobResponse
from openapi_server.models.describe_auto_ml_job_v2_request import DescribeAutoMLJobV2Request
from openapi_server.models.describe_auto_ml_job_v2_response import DescribeAutoMLJobV2Response
from openapi_server.models.describe_code_repository_input import DescribeCodeRepositoryInput
from openapi_server.models.describe_code_repository_output import DescribeCodeRepositoryOutput
from openapi_server.models.describe_compilation_job_request import DescribeCompilationJobRequest
from openapi_server.models.describe_compilation_job_response import DescribeCompilationJobResponse
from openapi_server.models.describe_context_request import DescribeContextRequest
from openapi_server.models.describe_context_response import DescribeContextResponse
from openapi_server.models.describe_data_quality_job_definition_request import DescribeDataQualityJobDefinitionRequest
from openapi_server.models.describe_data_quality_job_definition_response import DescribeDataQualityJobDefinitionResponse
from openapi_server.models.describe_device_fleet_request import DescribeDeviceFleetRequest
from openapi_server.models.describe_device_fleet_response import DescribeDeviceFleetResponse
from openapi_server.models.describe_device_request import DescribeDeviceRequest
from openapi_server.models.describe_device_response import DescribeDeviceResponse
from openapi_server.models.describe_domain_request import DescribeDomainRequest
from openapi_server.models.describe_domain_response import DescribeDomainResponse
from openapi_server.models.describe_edge_deployment_plan_request import DescribeEdgeDeploymentPlanRequest
from openapi_server.models.describe_edge_deployment_plan_response import DescribeEdgeDeploymentPlanResponse
from openapi_server.models.describe_edge_packaging_job_request import DescribeEdgePackagingJobRequest
from openapi_server.models.describe_edge_packaging_job_response import DescribeEdgePackagingJobResponse
from openapi_server.models.describe_endpoint_config_input import DescribeEndpointConfigInput
from openapi_server.models.describe_endpoint_config_output import DescribeEndpointConfigOutput
from openapi_server.models.describe_endpoint_input import DescribeEndpointInput
from openapi_server.models.describe_endpoint_output import DescribeEndpointOutput
from openapi_server.models.describe_experiment_request import DescribeExperimentRequest
from openapi_server.models.describe_experiment_response import DescribeExperimentResponse
from openapi_server.models.describe_feature_group_request import DescribeFeatureGroupRequest
from openapi_server.models.describe_feature_group_response import DescribeFeatureGroupResponse
from openapi_server.models.describe_feature_metadata_request import DescribeFeatureMetadataRequest
from openapi_server.models.describe_feature_metadata_response import DescribeFeatureMetadataResponse
from openapi_server.models.describe_flow_definition_request import DescribeFlowDefinitionRequest
from openapi_server.models.describe_flow_definition_response import DescribeFlowDefinitionResponse
from openapi_server.models.describe_hub_content_request import DescribeHubContentRequest
from openapi_server.models.describe_hub_content_response import DescribeHubContentResponse
from openapi_server.models.describe_hub_request import DescribeHubRequest
from openapi_server.models.describe_hub_response import DescribeHubResponse
from openapi_server.models.describe_human_task_ui_request import DescribeHumanTaskUiRequest
from openapi_server.models.describe_human_task_ui_response import DescribeHumanTaskUiResponse
from openapi_server.models.describe_hyper_parameter_tuning_job_request import DescribeHyperParameterTuningJobRequest
from openapi_server.models.describe_hyper_parameter_tuning_job_response import DescribeHyperParameterTuningJobResponse
from openapi_server.models.describe_image_request import DescribeImageRequest
from openapi_server.models.describe_image_response import DescribeImageResponse
from openapi_server.models.describe_image_version_request import DescribeImageVersionRequest
from openapi_server.models.describe_image_version_response import DescribeImageVersionResponse
from openapi_server.models.describe_inference_experiment_request import DescribeInferenceExperimentRequest
from openapi_server.models.describe_inference_experiment_response import DescribeInferenceExperimentResponse
from openapi_server.models.describe_inference_recommendations_job_request import DescribeInferenceRecommendationsJobRequest
from openapi_server.models.describe_inference_recommendations_job_response import DescribeInferenceRecommendationsJobResponse
from openapi_server.models.describe_labeling_job_request import DescribeLabelingJobRequest
from openapi_server.models.describe_labeling_job_response import DescribeLabelingJobResponse
from openapi_server.models.describe_lineage_group_request import DescribeLineageGroupRequest
from openapi_server.models.describe_lineage_group_response import DescribeLineageGroupResponse
from openapi_server.models.describe_model_bias_job_definition_request import DescribeModelBiasJobDefinitionRequest
from openapi_server.models.describe_model_bias_job_definition_response import DescribeModelBiasJobDefinitionResponse
from openapi_server.models.describe_model_card_export_job_request import DescribeModelCardExportJobRequest
from openapi_server.models.describe_model_card_export_job_response import DescribeModelCardExportJobResponse
from openapi_server.models.describe_model_card_request import DescribeModelCardRequest
from openapi_server.models.describe_model_card_response import DescribeModelCardResponse
from openapi_server.models.describe_model_explainability_job_definition_request import DescribeModelExplainabilityJobDefinitionRequest
from openapi_server.models.describe_model_explainability_job_definition_response import DescribeModelExplainabilityJobDefinitionResponse
from openapi_server.models.describe_model_input import DescribeModelInput
from openapi_server.models.describe_model_output import DescribeModelOutput
from openapi_server.models.describe_model_package_group_input import DescribeModelPackageGroupInput
from openapi_server.models.describe_model_package_group_output import DescribeModelPackageGroupOutput
from openapi_server.models.describe_model_package_input import DescribeModelPackageInput
from openapi_server.models.describe_model_package_output import DescribeModelPackageOutput
from openapi_server.models.describe_model_quality_job_definition_request import DescribeModelQualityJobDefinitionRequest
from openapi_server.models.describe_model_quality_job_definition_response import DescribeModelQualityJobDefinitionResponse
from openapi_server.models.describe_monitoring_schedule_request import DescribeMonitoringScheduleRequest
from openapi_server.models.describe_monitoring_schedule_response import DescribeMonitoringScheduleResponse
from openapi_server.models.describe_notebook_instance_input import DescribeNotebookInstanceInput
from openapi_server.models.describe_notebook_instance_lifecycle_config_input import DescribeNotebookInstanceLifecycleConfigInput
from openapi_server.models.describe_notebook_instance_lifecycle_config_output import DescribeNotebookInstanceLifecycleConfigOutput
from openapi_server.models.describe_notebook_instance_output import DescribeNotebookInstanceOutput
from openapi_server.models.describe_pipeline_definition_for_execution_request import DescribePipelineDefinitionForExecutionRequest
from openapi_server.models.describe_pipeline_definition_for_execution_response import DescribePipelineDefinitionForExecutionResponse
from openapi_server.models.describe_pipeline_execution_request import DescribePipelineExecutionRequest
from openapi_server.models.describe_pipeline_execution_response import DescribePipelineExecutionResponse
from openapi_server.models.describe_pipeline_request import DescribePipelineRequest
from openapi_server.models.describe_pipeline_response import DescribePipelineResponse
from openapi_server.models.describe_processing_job_request import DescribeProcessingJobRequest
from openapi_server.models.describe_processing_job_response import DescribeProcessingJobResponse
from openapi_server.models.describe_project_input import DescribeProjectInput
from openapi_server.models.describe_project_output import DescribeProjectOutput
from openapi_server.models.describe_space_request import DescribeSpaceRequest
from openapi_server.models.describe_space_response import DescribeSpaceResponse
from openapi_server.models.describe_studio_lifecycle_config_request import DescribeStudioLifecycleConfigRequest
from openapi_server.models.describe_studio_lifecycle_config_response import DescribeStudioLifecycleConfigResponse
from openapi_server.models.describe_subscribed_workteam_request import DescribeSubscribedWorkteamRequest
from openapi_server.models.describe_subscribed_workteam_response import DescribeSubscribedWorkteamResponse
from openapi_server.models.describe_training_job_request import DescribeTrainingJobRequest
from openapi_server.models.describe_training_job_response import DescribeTrainingJobResponse
from openapi_server.models.describe_transform_job_request import DescribeTransformJobRequest
from openapi_server.models.describe_transform_job_response import DescribeTransformJobResponse
from openapi_server.models.describe_trial_component_request import DescribeTrialComponentRequest
from openapi_server.models.describe_trial_component_response import DescribeTrialComponentResponse
from openapi_server.models.describe_trial_request import DescribeTrialRequest
from openapi_server.models.describe_trial_response import DescribeTrialResponse
from openapi_server.models.describe_user_profile_request import DescribeUserProfileRequest
from openapi_server.models.describe_user_profile_response import DescribeUserProfileResponse
from openapi_server.models.describe_workforce_request import DescribeWorkforceRequest
from openapi_server.models.describe_workforce_response import DescribeWorkforceResponse
from openapi_server.models.describe_workteam_request import DescribeWorkteamRequest
from openapi_server.models.describe_workteam_response import DescribeWorkteamResponse
from openapi_server.models.disassociate_trial_component_request import DisassociateTrialComponentRequest
from openapi_server.models.disassociate_trial_component_response import DisassociateTrialComponentResponse
from openapi_server.models.get_device_fleet_report_request import GetDeviceFleetReportRequest
from openapi_server.models.get_device_fleet_report_response import GetDeviceFleetReportResponse
from openapi_server.models.get_lineage_group_policy_request import GetLineageGroupPolicyRequest
from openapi_server.models.get_lineage_group_policy_response import GetLineageGroupPolicyResponse
from openapi_server.models.get_model_package_group_policy_input import GetModelPackageGroupPolicyInput
from openapi_server.models.get_model_package_group_policy_output import GetModelPackageGroupPolicyOutput
from openapi_server.models.get_sagemaker_servicecatalog_portfolio_status_output import GetSagemakerServicecatalogPortfolioStatusOutput
from openapi_server.models.get_scaling_configuration_recommendation_request import GetScalingConfigurationRecommendationRequest
from openapi_server.models.get_scaling_configuration_recommendation_response import GetScalingConfigurationRecommendationResponse
from openapi_server.models.get_search_suggestions_request import GetSearchSuggestionsRequest
from openapi_server.models.get_search_suggestions_response import GetSearchSuggestionsResponse
from openapi_server.models.import_hub_content_request import ImportHubContentRequest
from openapi_server.models.import_hub_content_response import ImportHubContentResponse
from openapi_server.models.list_actions_request import ListActionsRequest
from openapi_server.models.list_actions_response import ListActionsResponse
from openapi_server.models.list_algorithms_input import ListAlgorithmsInput
from openapi_server.models.list_algorithms_output import ListAlgorithmsOutput
from openapi_server.models.list_aliases_request import ListAliasesRequest
from openapi_server.models.list_aliases_response import ListAliasesResponse
from openapi_server.models.list_app_image_configs_request import ListAppImageConfigsRequest
from openapi_server.models.list_app_image_configs_response import ListAppImageConfigsResponse
from openapi_server.models.list_apps_request import ListAppsRequest
from openapi_server.models.list_apps_response import ListAppsResponse
from openapi_server.models.list_artifacts_request import ListArtifactsRequest
from openapi_server.models.list_artifacts_response import ListArtifactsResponse
from openapi_server.models.list_associations_request import ListAssociationsRequest
from openapi_server.models.list_associations_response import ListAssociationsResponse
from openapi_server.models.list_auto_ml_jobs_request import ListAutoMLJobsRequest
from openapi_server.models.list_auto_ml_jobs_response import ListAutoMLJobsResponse
from openapi_server.models.list_candidates_for_auto_ml_job_request import ListCandidatesForAutoMLJobRequest
from openapi_server.models.list_candidates_for_auto_ml_job_response import ListCandidatesForAutoMLJobResponse
from openapi_server.models.list_code_repositories_input import ListCodeRepositoriesInput
from openapi_server.models.list_code_repositories_output import ListCodeRepositoriesOutput
from openapi_server.models.list_compilation_jobs_request import ListCompilationJobsRequest
from openapi_server.models.list_compilation_jobs_response import ListCompilationJobsResponse
from openapi_server.models.list_contexts_request import ListContextsRequest
from openapi_server.models.list_contexts_response import ListContextsResponse
from openapi_server.models.list_data_quality_job_definitions_request import ListDataQualityJobDefinitionsRequest
from openapi_server.models.list_data_quality_job_definitions_response import ListDataQualityJobDefinitionsResponse
from openapi_server.models.list_device_fleets_request import ListDeviceFleetsRequest
from openapi_server.models.list_device_fleets_response import ListDeviceFleetsResponse
from openapi_server.models.list_devices_request import ListDevicesRequest
from openapi_server.models.list_devices_response import ListDevicesResponse
from openapi_server.models.list_domains_request import ListDomainsRequest
from openapi_server.models.list_domains_response import ListDomainsResponse
from openapi_server.models.list_edge_deployment_plans_request import ListEdgeDeploymentPlansRequest
from openapi_server.models.list_edge_deployment_plans_response import ListEdgeDeploymentPlansResponse
from openapi_server.models.list_edge_packaging_jobs_request import ListEdgePackagingJobsRequest
from openapi_server.models.list_edge_packaging_jobs_response import ListEdgePackagingJobsResponse
from openapi_server.models.list_endpoint_configs_input import ListEndpointConfigsInput
from openapi_server.models.list_endpoint_configs_output import ListEndpointConfigsOutput
from openapi_server.models.list_endpoints_input import ListEndpointsInput
from openapi_server.models.list_endpoints_output import ListEndpointsOutput
from openapi_server.models.list_experiments_request import ListExperimentsRequest
from openapi_server.models.list_experiments_response import ListExperimentsResponse
from openapi_server.models.list_feature_groups_request import ListFeatureGroupsRequest
from openapi_server.models.list_feature_groups_response import ListFeatureGroupsResponse
from openapi_server.models.list_flow_definitions_request import ListFlowDefinitionsRequest
from openapi_server.models.list_flow_definitions_response import ListFlowDefinitionsResponse
from openapi_server.models.list_hub_content_versions_request import ListHubContentVersionsRequest
from openapi_server.models.list_hub_content_versions_response import ListHubContentVersionsResponse
from openapi_server.models.list_hub_contents_request import ListHubContentsRequest
from openapi_server.models.list_hub_contents_response import ListHubContentsResponse
from openapi_server.models.list_hubs_request import ListHubsRequest
from openapi_server.models.list_hubs_response import ListHubsResponse
from openapi_server.models.list_human_task_uis_request import ListHumanTaskUisRequest
from openapi_server.models.list_human_task_uis_response import ListHumanTaskUisResponse
from openapi_server.models.list_hyper_parameter_tuning_jobs_request import ListHyperParameterTuningJobsRequest
from openapi_server.models.list_hyper_parameter_tuning_jobs_response import ListHyperParameterTuningJobsResponse
from openapi_server.models.list_image_versions_request import ListImageVersionsRequest
from openapi_server.models.list_image_versions_response import ListImageVersionsResponse
from openapi_server.models.list_images_request import ListImagesRequest
from openapi_server.models.list_images_response import ListImagesResponse
from openapi_server.models.list_inference_experiments_request import ListInferenceExperimentsRequest
from openapi_server.models.list_inference_experiments_response import ListInferenceExperimentsResponse
from openapi_server.models.list_inference_recommendations_job_steps_request import ListInferenceRecommendationsJobStepsRequest
from openapi_server.models.list_inference_recommendations_job_steps_response import ListInferenceRecommendationsJobStepsResponse
from openapi_server.models.list_inference_recommendations_jobs_request import ListInferenceRecommendationsJobsRequest
from openapi_server.models.list_inference_recommendations_jobs_response import ListInferenceRecommendationsJobsResponse
from openapi_server.models.list_labeling_jobs_for_workteam_request import ListLabelingJobsForWorkteamRequest
from openapi_server.models.list_labeling_jobs_for_workteam_response import ListLabelingJobsForWorkteamResponse
from openapi_server.models.list_labeling_jobs_request import ListLabelingJobsRequest
from openapi_server.models.list_labeling_jobs_response import ListLabelingJobsResponse
from openapi_server.models.list_lineage_groups_request import ListLineageGroupsRequest
from openapi_server.models.list_lineage_groups_response import ListLineageGroupsResponse
from openapi_server.models.list_model_bias_job_definitions_request import ListModelBiasJobDefinitionsRequest
from openapi_server.models.list_model_bias_job_definitions_response import ListModelBiasJobDefinitionsResponse
from openapi_server.models.list_model_card_export_jobs_request import ListModelCardExportJobsRequest
from openapi_server.models.list_model_card_export_jobs_response import ListModelCardExportJobsResponse
from openapi_server.models.list_model_card_versions_request import ListModelCardVersionsRequest
from openapi_server.models.list_model_card_versions_response import ListModelCardVersionsResponse
from openapi_server.models.list_model_cards_request import ListModelCardsRequest
from openapi_server.models.list_model_cards_response import ListModelCardsResponse
from openapi_server.models.list_model_explainability_job_definitions_request import ListModelExplainabilityJobDefinitionsRequest
from openapi_server.models.list_model_explainability_job_definitions_response import ListModelExplainabilityJobDefinitionsResponse
from openapi_server.models.list_model_metadata_request import ListModelMetadataRequest
from openapi_server.models.list_model_metadata_response import ListModelMetadataResponse
from openapi_server.models.list_model_package_groups_input import ListModelPackageGroupsInput
from openapi_server.models.list_model_package_groups_output import ListModelPackageGroupsOutput
from openapi_server.models.list_model_packages_input import ListModelPackagesInput
from openapi_server.models.list_model_packages_output import ListModelPackagesOutput
from openapi_server.models.list_model_quality_job_definitions_request import ListModelQualityJobDefinitionsRequest
from openapi_server.models.list_model_quality_job_definitions_response import ListModelQualityJobDefinitionsResponse
from openapi_server.models.list_models_input import ListModelsInput
from openapi_server.models.list_models_output import ListModelsOutput
from openapi_server.models.list_monitoring_alert_history_request import ListMonitoringAlertHistoryRequest
from openapi_server.models.list_monitoring_alert_history_response import ListMonitoringAlertHistoryResponse
from openapi_server.models.list_monitoring_alerts_request import ListMonitoringAlertsRequest
from openapi_server.models.list_monitoring_alerts_response import ListMonitoringAlertsResponse
from openapi_server.models.list_monitoring_executions_request import ListMonitoringExecutionsRequest
from openapi_server.models.list_monitoring_executions_response import ListMonitoringExecutionsResponse
from openapi_server.models.list_monitoring_schedules_request import ListMonitoringSchedulesRequest
from openapi_server.models.list_monitoring_schedules_response import ListMonitoringSchedulesResponse
from openapi_server.models.list_notebook_instance_lifecycle_configs_input import ListNotebookInstanceLifecycleConfigsInput
from openapi_server.models.list_notebook_instance_lifecycle_configs_output import ListNotebookInstanceLifecycleConfigsOutput
from openapi_server.models.list_notebook_instances_input import ListNotebookInstancesInput
from openapi_server.models.list_notebook_instances_output import ListNotebookInstancesOutput
from openapi_server.models.list_pipeline_execution_steps_request import ListPipelineExecutionStepsRequest
from openapi_server.models.list_pipeline_execution_steps_response import ListPipelineExecutionStepsResponse
from openapi_server.models.list_pipeline_executions_request import ListPipelineExecutionsRequest
from openapi_server.models.list_pipeline_executions_response import ListPipelineExecutionsResponse
from openapi_server.models.list_pipeline_parameters_for_execution_request import ListPipelineParametersForExecutionRequest
from openapi_server.models.list_pipeline_parameters_for_execution_response import ListPipelineParametersForExecutionResponse
from openapi_server.models.list_pipelines_request import ListPipelinesRequest
from openapi_server.models.list_pipelines_response import ListPipelinesResponse
from openapi_server.models.list_processing_jobs_request import ListProcessingJobsRequest
from openapi_server.models.list_processing_jobs_response import ListProcessingJobsResponse
from openapi_server.models.list_projects_input import ListProjectsInput
from openapi_server.models.list_projects_output import ListProjectsOutput
from openapi_server.models.list_resource_catalogs_request import ListResourceCatalogsRequest
from openapi_server.models.list_resource_catalogs_response import ListResourceCatalogsResponse
from openapi_server.models.list_spaces_request import ListSpacesRequest
from openapi_server.models.list_spaces_response import ListSpacesResponse
from openapi_server.models.list_stage_devices_request import ListStageDevicesRequest
from openapi_server.models.list_stage_devices_response import ListStageDevicesResponse
from openapi_server.models.list_studio_lifecycle_configs_request import ListStudioLifecycleConfigsRequest
from openapi_server.models.list_studio_lifecycle_configs_response import ListStudioLifecycleConfigsResponse
from openapi_server.models.list_subscribed_workteams_request import ListSubscribedWorkteamsRequest
from openapi_server.models.list_subscribed_workteams_response import ListSubscribedWorkteamsResponse
from openapi_server.models.list_tags_input import ListTagsInput
from openapi_server.models.list_tags_output import ListTagsOutput
from openapi_server.models.list_training_jobs_for_hyper_parameter_tuning_job_request import ListTrainingJobsForHyperParameterTuningJobRequest
from openapi_server.models.list_training_jobs_for_hyper_parameter_tuning_job_response import ListTrainingJobsForHyperParameterTuningJobResponse
from openapi_server.models.list_training_jobs_request import ListTrainingJobsRequest
from openapi_server.models.list_training_jobs_response import ListTrainingJobsResponse
from openapi_server.models.list_transform_jobs_request import ListTransformJobsRequest
from openapi_server.models.list_transform_jobs_response import ListTransformJobsResponse
from openapi_server.models.list_trial_components_request import ListTrialComponentsRequest
from openapi_server.models.list_trial_components_response import ListTrialComponentsResponse
from openapi_server.models.list_trials_request import ListTrialsRequest
from openapi_server.models.list_trials_response import ListTrialsResponse
from openapi_server.models.list_user_profiles_request import ListUserProfilesRequest
from openapi_server.models.list_user_profiles_response import ListUserProfilesResponse
from openapi_server.models.list_workforces_request import ListWorkforcesRequest
from openapi_server.models.list_workforces_response import ListWorkforcesResponse
from openapi_server.models.list_workteams_request import ListWorkteamsRequest
from openapi_server.models.list_workteams_response import ListWorkteamsResponse
from openapi_server.models.put_model_package_group_policy_input import PutModelPackageGroupPolicyInput
from openapi_server.models.put_model_package_group_policy_output import PutModelPackageGroupPolicyOutput
from openapi_server.models.query_lineage_request import QueryLineageRequest
from openapi_server.models.query_lineage_response import QueryLineageResponse
from openapi_server.models.register_devices_request import RegisterDevicesRequest
from openapi_server.models.render_ui_template_request import RenderUiTemplateRequest
from openapi_server.models.render_ui_template_response import RenderUiTemplateResponse
from openapi_server.models.retry_pipeline_execution_request import RetryPipelineExecutionRequest
from openapi_server.models.retry_pipeline_execution_response import RetryPipelineExecutionResponse
from openapi_server.models.search_request import SearchRequest
from openapi_server.models.search_response import SearchResponse
from openapi_server.models.send_pipeline_execution_step_failure_request import SendPipelineExecutionStepFailureRequest
from openapi_server.models.send_pipeline_execution_step_failure_response import SendPipelineExecutionStepFailureResponse
from openapi_server.models.send_pipeline_execution_step_success_request import SendPipelineExecutionStepSuccessRequest
from openapi_server.models.send_pipeline_execution_step_success_response import SendPipelineExecutionStepSuccessResponse
from openapi_server.models.start_edge_deployment_stage_request import StartEdgeDeploymentStageRequest
from openapi_server.models.start_inference_experiment_request import StartInferenceExperimentRequest
from openapi_server.models.start_inference_experiment_response import StartInferenceExperimentResponse
from openapi_server.models.start_monitoring_schedule_request import StartMonitoringScheduleRequest
from openapi_server.models.start_notebook_instance_input import StartNotebookInstanceInput
from openapi_server.models.start_pipeline_execution_request import StartPipelineExecutionRequest
from openapi_server.models.start_pipeline_execution_response import StartPipelineExecutionResponse
from openapi_server.models.stop_auto_ml_job_request import StopAutoMLJobRequest
from openapi_server.models.stop_compilation_job_request import StopCompilationJobRequest
from openapi_server.models.stop_edge_deployment_stage_request import StopEdgeDeploymentStageRequest
from openapi_server.models.stop_edge_packaging_job_request import StopEdgePackagingJobRequest
from openapi_server.models.stop_hyper_parameter_tuning_job_request import StopHyperParameterTuningJobRequest
from openapi_server.models.stop_inference_experiment_request import StopInferenceExperimentRequest
from openapi_server.models.stop_inference_experiment_response import StopInferenceExperimentResponse
from openapi_server.models.stop_inference_recommendations_job_request import StopInferenceRecommendationsJobRequest
from openapi_server.models.stop_labeling_job_request import StopLabelingJobRequest
from openapi_server.models.stop_monitoring_schedule_request import StopMonitoringScheduleRequest
from openapi_server.models.stop_notebook_instance_input import StopNotebookInstanceInput
from openapi_server.models.stop_pipeline_execution_request import StopPipelineExecutionRequest
from openapi_server.models.stop_pipeline_execution_response import StopPipelineExecutionResponse
from openapi_server.models.stop_processing_job_request import StopProcessingJobRequest
from openapi_server.models.stop_training_job_request import StopTrainingJobRequest
from openapi_server.models.stop_transform_job_request import StopTransformJobRequest
from openapi_server.models.update_action_request import UpdateActionRequest
from openapi_server.models.update_action_response import UpdateActionResponse
from openapi_server.models.update_app_image_config_request import UpdateAppImageConfigRequest
from openapi_server.models.update_app_image_config_response import UpdateAppImageConfigResponse
from openapi_server.models.update_artifact_request import UpdateArtifactRequest
from openapi_server.models.update_artifact_response import UpdateArtifactResponse
from openapi_server.models.update_code_repository_input import UpdateCodeRepositoryInput
from openapi_server.models.update_code_repository_output import UpdateCodeRepositoryOutput
from openapi_server.models.update_context_request import UpdateContextRequest
from openapi_server.models.update_context_response import UpdateContextResponse
from openapi_server.models.update_device_fleet_request import UpdateDeviceFleetRequest
from openapi_server.models.update_devices_request import UpdateDevicesRequest
from openapi_server.models.update_domain_request import UpdateDomainRequest
from openapi_server.models.update_domain_response import UpdateDomainResponse
from openapi_server.models.update_endpoint_input import UpdateEndpointInput
from openapi_server.models.update_endpoint_output import UpdateEndpointOutput
from openapi_server.models.update_endpoint_weights_and_capacities_input import UpdateEndpointWeightsAndCapacitiesInput
from openapi_server.models.update_endpoint_weights_and_capacities_output import UpdateEndpointWeightsAndCapacitiesOutput
from openapi_server.models.update_experiment_request import UpdateExperimentRequest
from openapi_server.models.update_experiment_response import UpdateExperimentResponse
from openapi_server.models.update_feature_group_request import UpdateFeatureGroupRequest
from openapi_server.models.update_feature_group_response import UpdateFeatureGroupResponse
from openapi_server.models.update_feature_metadata_request import UpdateFeatureMetadataRequest
from openapi_server.models.update_hub_request import UpdateHubRequest
from openapi_server.models.update_hub_response import UpdateHubResponse
from openapi_server.models.update_image_request import UpdateImageRequest
from openapi_server.models.update_image_response import UpdateImageResponse
from openapi_server.models.update_image_version_request import UpdateImageVersionRequest
from openapi_server.models.update_image_version_response import UpdateImageVersionResponse
from openapi_server.models.update_inference_experiment_request import UpdateInferenceExperimentRequest
from openapi_server.models.update_inference_experiment_response import UpdateInferenceExperimentResponse
from openapi_server.models.update_model_card_request import UpdateModelCardRequest
from openapi_server.models.update_model_card_response import UpdateModelCardResponse
from openapi_server.models.update_model_package_input import UpdateModelPackageInput
from openapi_server.models.update_model_package_output import UpdateModelPackageOutput
from openapi_server.models.update_monitoring_alert_request import UpdateMonitoringAlertRequest
from openapi_server.models.update_monitoring_alert_response import UpdateMonitoringAlertResponse
from openapi_server.models.update_monitoring_schedule_request import UpdateMonitoringScheduleRequest
from openapi_server.models.update_monitoring_schedule_response import UpdateMonitoringScheduleResponse
from openapi_server.models.update_notebook_instance_input import UpdateNotebookInstanceInput
from openapi_server.models.update_notebook_instance_lifecycle_config_input import UpdateNotebookInstanceLifecycleConfigInput
from openapi_server.models.update_pipeline_execution_request import UpdatePipelineExecutionRequest
from openapi_server.models.update_pipeline_execution_response import UpdatePipelineExecutionResponse
from openapi_server.models.update_pipeline_request import UpdatePipelineRequest
from openapi_server.models.update_pipeline_response import UpdatePipelineResponse
from openapi_server.models.update_project_input import UpdateProjectInput
from openapi_server.models.update_project_output import UpdateProjectOutput
from openapi_server.models.update_space_request import UpdateSpaceRequest
from openapi_server.models.update_space_response import UpdateSpaceResponse
from openapi_server.models.update_training_job_request import UpdateTrainingJobRequest
from openapi_server.models.update_training_job_response import UpdateTrainingJobResponse
from openapi_server.models.update_trial_component_request import UpdateTrialComponentRequest
from openapi_server.models.update_trial_component_response import UpdateTrialComponentResponse
from openapi_server.models.update_trial_request import UpdateTrialRequest
from openapi_server.models.update_trial_response import UpdateTrialResponse
from openapi_server.models.update_user_profile_request import UpdateUserProfileRequest
from openapi_server.models.update_user_profile_response import UpdateUserProfileResponse
from openapi_server.models.update_workforce_request import UpdateWorkforceRequest
from openapi_server.models.update_workforce_response import UpdateWorkforceResponse
from openapi_server.models.update_workteam_request import UpdateWorkteamRequest
from openapi_server.models.update_workteam_response import UpdateWorkteamResponse
from openapi_server import util


async def add_association(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """add_association

    Creates an &lt;i&gt;association&lt;/i&gt; between the source and the destination. A source can be associated with multiple destinations, and a destination can be associated with multiple sources. An association is a lineage tracking entity. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\&quot;&gt;Amazon SageMaker ML Lineage Tracking&lt;/a&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = AddAssociationRequest.from_dict(body)
    return web.Response(status=200)


async def add_tags(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """add_tags

    &lt;p&gt;Adds or overwrites one or more tags for the specified SageMaker resource. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/answers/account-management/aws-tagging-strategies/\&quot;&gt;Amazon Web Services Tagging Strategies&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Tags that you add to a hyperparameter tuning job by calling this API are also added to any training jobs that the hyperparameter tuning job launches after you call this API, but not to training jobs that the hyperparameter tuning job launched before you called this API. To make sure that the tags associated with a hyperparameter tuning job are also added to all training jobs that the hyperparameter tuning job launches, add the tags when you first create the tuning job by specifying them in the &lt;code&gt;Tags&lt;/code&gt; parameter of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html\&quot;&gt;CreateHyperParameterTuningJob&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Tags that you add to a SageMaker Studio Domain or User Profile by calling this API are also added to any Apps that the Domain or User Profile launches after you call this API, but not to Apps that the Domain or User Profile launched before you called this API. To make sure that the tags associated with a Domain or User Profile are also added to all Apps that the Domain or User Profile launches, add the tags when you first create the Domain or User Profile by specifying them in the &lt;code&gt;Tags&lt;/code&gt; parameter of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html\&quot;&gt;CreateDomain&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html\&quot;&gt;CreateUserProfile&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = AddTagsInput.from_dict(body)
    return web.Response(status=200)


async def associate_trial_component(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """associate_trial_component

    Associates a trial component with a trial. A trial component can be associated with multiple trials. To disassociate a trial component from a trial, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html\&quot;&gt;DisassociateTrialComponent&lt;/a&gt; API.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = AssociateTrialComponentRequest.from_dict(body)
    return web.Response(status=200)


async def batch_describe_model_package(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """batch_describe_model_package

    This action batch describes a list of versioned model packages

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = BatchDescribeModelPackageInput.from_dict(body)
    return web.Response(status=200)


async def create_action(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_action

    Creates an &lt;i&gt;action&lt;/i&gt;. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\&quot;&gt;Amazon SageMaker ML Lineage Tracking&lt;/a&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateActionRequest.from_dict(body)
    return web.Response(status=200)


async def create_algorithm(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_algorithm

    Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateAlgorithmInput.from_dict(body)
    return web.Response(status=200)


async def create_app(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_app

    Creates a running app for the specified UserProfile. This operation is automatically invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateAppRequest.from_dict(body)
    return web.Response(status=200)


async def create_app_image_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_app_image_config

    Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateAppImageConfigRequest.from_dict(body)
    return web.Response(status=200)


async def create_artifact(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_artifact

    Creates an &lt;i&gt;artifact&lt;/i&gt;. An artifact is a lineage tracking entity that represents a URI addressable object or data. Some examples are the S3 URI of a dataset and the ECR registry path of an image. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\&quot;&gt;Amazon SageMaker ML Lineage Tracking&lt;/a&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateArtifactRequest.from_dict(body)
    return web.Response(status=200)


async def create_auto_ml_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_auto_ml_job

    &lt;p&gt;Creates an Autopilot job also referred to as Autopilot experiment or AutoML job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend using the new versions &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\&quot;&gt;CreateAutoMLJobV2&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\&quot;&gt;DescribeAutoMLJobV2&lt;/a&gt;, which offer backward compatibility.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt; can manage tabular problem types identical to those of its previous version &lt;code&gt;CreateAutoMLJob&lt;/code&gt;, as well as non-tabular problem types such as image or text classification.&lt;/p&gt; &lt;p&gt;Find guidelines about how to migrate a &lt;code&gt;CreateAutoMLJob&lt;/code&gt; to &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2\&quot;&gt;Migrate a CreateAutoMLJob to CreateAutoMLJobV2&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can find the best-performing model after you run an AutoML job by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\&quot;&gt;DescribeAutoMLJobV2&lt;/a&gt; (recommended) or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html\&quot;&gt;DescribeAutoMLJob&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateAutoMLJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_auto_ml_job_v2(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_auto_ml_job_v2

    &lt;p&gt;Creates an Autopilot job also referred to as Autopilot experiment or AutoML job V2.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\&quot;&gt;CreateAutoMLJobV2&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\&quot;&gt;DescribeAutoMLJobV2&lt;/a&gt; are new versions of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html\&quot;&gt;CreateAutoMLJob&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html\&quot;&gt;DescribeAutoMLJob&lt;/a&gt; which offer backward compatibility.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt; can manage tabular problem types identical to those of its previous version &lt;code&gt;CreateAutoMLJob&lt;/code&gt;, as well as non-tabular problem types such as image or text classification.&lt;/p&gt; &lt;p&gt;Find guidelines about how to migrate a &lt;code&gt;CreateAutoMLJob&lt;/code&gt; to &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2\&quot;&gt;Migrate a CreateAutoMLJob to CreateAutoMLJobV2&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For the list of available problem types supported by &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLProblemTypeConfig.html\&quot;&gt;AutoMLProblemTypeConfig&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can find the best-performing model after you run an AutoML job V2 by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\&quot;&gt;DescribeAutoMLJobV2&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateAutoMLJobV2Request.from_dict(body)
    return web.Response(status=200)


async def create_code_repository(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_code_repository

    &lt;p&gt;Creates a Git repository as a resource in your SageMaker account. You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with.&lt;/p&gt; &lt;p&gt;The repository can be hosted either in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\&quot;&gt;Amazon Web Services CodeCommit&lt;/a&gt; or in any other Git repository.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateCodeRepositoryInput.from_dict(body)
    return web.Response(status=200)


async def create_compilation_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_compilation_job

    &lt;p&gt;Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. &lt;/p&gt; &lt;p&gt;If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with Amazon Web Services IoT Greengrass. In that case, deploy them as an ML resource.&lt;/p&gt; &lt;p&gt;In the request body, you provide the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name for the compilation job&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; Information about the input model artifacts &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The output location for the compiled model and the device (target) that the model runs on &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can also provide a &lt;code&gt;Tag&lt;/code&gt; to track the model compilation job&#39;s resource use and costs. The response body contains the &lt;code&gt;CompilationJobArn&lt;/code&gt; for the compiled job.&lt;/p&gt; &lt;p&gt;To stop a model compilation job, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopCompilationJob.html\&quot;&gt;StopCompilationJob&lt;/a&gt;. To get information about a particular model compilation job, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html\&quot;&gt;DescribeCompilationJob&lt;/a&gt;. To get information about multiple model compilation jobs, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html\&quot;&gt;ListCompilationJobs&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateCompilationJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_context(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_context

    Creates a &lt;i&gt;context&lt;/i&gt;. A context is a lineage tracking entity that represents a logical grouping of other tracking or experiment entities. Some examples are an endpoint and a model package. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\&quot;&gt;Amazon SageMaker ML Lineage Tracking&lt;/a&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateContextRequest.from_dict(body)
    return web.Response(status=200)


async def create_data_quality_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_data_quality_job_definition

    Creates a definition for a job that monitors data quality and drift. For information about model monitor, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html\&quot;&gt;Amazon SageMaker Model Monitor&lt;/a&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateDataQualityJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def create_device_fleet(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_device_fleet

    Creates a device fleet.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateDeviceFleetRequest.from_dict(body)
    return web.Response(status=200)


async def create_domain(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_domain

    &lt;p&gt;Creates a &lt;code&gt;Domain&lt;/code&gt; used by Amazon SageMaker Studio. A domain consists of an associated Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. Users within a domain can share notebook files and other artifacts with each other.&lt;/p&gt; &lt;p&gt; &lt;b&gt;EFS storage&lt;/b&gt; &lt;/p&gt; &lt;p&gt;When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files.&lt;/p&gt; &lt;p&gt;SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, you can specify a customer managed key. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html\&quot;&gt;Protect Data at Rest Using Encryption&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;VPC configuration&lt;/b&gt; &lt;/p&gt; &lt;p&gt;All SageMaker Studio traffic between the domain and the EFS volume is through the specified VPC and subnets. For other Studio traffic, you can specify the &lt;code&gt;AppNetworkAccessType&lt;/code&gt; parameter. &lt;code&gt;AppNetworkAccessType&lt;/code&gt; corresponds to the network access type that you choose when you onboard to Studio. The following options are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PublicInternetOnly&lt;/code&gt; - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VpcOnly&lt;/code&gt; - All Studio traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway.&lt;/p&gt; &lt;p&gt;When internet access is disabled, you won&#39;t be able to run a Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt;NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a SageMaker Studio app successfully.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html\&quot;&gt;Connect SageMaker Studio Notebooks to Resources in a VPC&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateDomainRequest.from_dict(body)
    return web.Response(status=200)


async def create_edge_deployment_plan(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_edge_deployment_plan

    Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateEdgeDeploymentPlanRequest.from_dict(body)
    return web.Response(status=200)


async def create_edge_deployment_stage(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_edge_deployment_stage

    Creates a new stage in an existing edge deployment plan.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateEdgeDeploymentStageRequest.from_dict(body)
    return web.Response(status=200)


async def create_edge_packaging_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_edge_packaging_job

    Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateEdgePackagingJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_endpoint(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_endpoint

    &lt;p&gt;Creates an endpoint using the endpoint configuration specified in the request. SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html\&quot;&gt;CreateEndpointConfig&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt; Use this API to deploy models using SageMaker hosting services. &lt;/p&gt; &lt;p&gt;For an example that calls this method when deploying a model to SageMaker hosting services, see the &lt;a href&#x3D;\&quot;https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb\&quot;&gt;Create Endpoint example notebook.&lt;/a&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt; You must not delete an &lt;code&gt;EndpointConfig&lt;/code&gt; that is in use by an endpoint that is live or while the &lt;code&gt;UpdateEndpoint&lt;/code&gt; or &lt;code&gt;CreateEndpoint&lt;/code&gt; operations are being performed on the endpoint. To update an endpoint, you must create a new &lt;code&gt;EndpointConfig&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. &lt;/p&gt; &lt;p&gt;When it receives the request, SageMaker creates the endpoint, launches the resources (ML compute instances), and deploys the model(s) on them. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt;, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html\&quot;&gt; &lt;code&gt;Eventually Consistent Reads&lt;/code&gt; &lt;/a&gt;, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html\&quot;&gt;DescribeEndpointConfig&lt;/a&gt; before calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; to minimize the potential impact of a DynamoDB eventually consistent read.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;When SageMaker receives the request, it sets the endpoint status to &lt;code&gt;Creating&lt;/code&gt;. After it creates the endpoint, it sets the status to &lt;code&gt;InService&lt;/code&gt;. SageMaker can then process incoming requests for inferences. To check the status of an endpoint, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html\&quot;&gt;DescribeEndpoint&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If any of the models hosted at this endpoint get model data from an Amazon S3 location, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provided. Amazon Web Services STS is activated in your Amazon Web Services account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html\&quot;&gt;Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; To add the IAM role policies for using this API operation, go to the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/iam/\&quot;&gt;IAM console&lt;/a&gt;, and choose Roles in the left navigation pane. Search the IAM role that you want to grant access to use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html\&quot;&gt;CreateEndpointConfig&lt;/a&gt; API operations, add the following policies to the role. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Option 1: For a full SageMaker access, search and attach the &lt;code&gt;AmazonSageMakerFullAccess&lt;/code&gt; policy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Option 2: For granting a limited access to an IAM role, paste the following Action elements manually into the JSON file of the IAM role: &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Action\&quot;: [\&quot;sagemaker:CreateEndpoint\&quot;, \&quot;sagemaker:CreateEndpointConfig\&quot;]&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Resource\&quot;: [&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;arn:aws:sagemaker:region:account-id:endpoint/endpointName\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;]&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html\&quot;&gt;SageMaker API Permissions: Actions, Permissions, and Resources Reference&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateEndpointInput.from_dict(body)
    return web.Response(status=200)


async def create_endpoint_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_endpoint_config

    &lt;p&gt;Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In the configuration, you identify one or more models, created using the &lt;code&gt;CreateModel&lt;/code&gt; API, to deploy and the resources that you want SageMaker to provision. Then you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; API.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Use this API if you want to use SageMaker hosting services to deploy models into production. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;In the request, you define a &lt;code&gt;ProductionVariant&lt;/code&gt;, for each model that you want to deploy. Each &lt;code&gt;ProductionVariant&lt;/code&gt; parameter also describes the resources that you want SageMaker to provision. This includes the number and type of ML compute instances to deploy. &lt;/p&gt; &lt;p&gt;If you are hosting multiple models, you also assign a &lt;code&gt;VariantWeight&lt;/code&gt; to specify how much traffic you want to allocate to each model. For example, suppose that you want to host two models, A and B, and you assign traffic weight 2 for model A and 1 for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to model B. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt;, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html\&quot;&gt; &lt;code&gt;Eventually Consistent Reads&lt;/code&gt; &lt;/a&gt;, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html\&quot;&gt;DescribeEndpointConfig&lt;/a&gt; before calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; to minimize the potential impact of a DynamoDB eventually consistent read.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateEndpointConfigInput.from_dict(body)
    return web.Response(status=200)


async def create_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_experiment

    &lt;p&gt;Creates a SageMaker &lt;i&gt;experiment&lt;/i&gt;. An experiment is a collection of &lt;i&gt;trials&lt;/i&gt; that are observed, compared and evaluated as a group. A trial is a set of steps, called &lt;i&gt;trial components&lt;/i&gt;, that produce a machine learning model.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the Studio UI, trials are referred to as &lt;i&gt;run groups&lt;/i&gt; and trial components are referred to as &lt;i&gt;runs&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The goal of an experiment is to determine the components that produce the best model. Multiple trials are performed, each one isolating and measuring the impact of a change to one or more inputs, while keeping the remaining inputs constant.&lt;/p&gt; &lt;p&gt;When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.&lt;/p&gt; &lt;p&gt;You can add tags to experiments, trials, trial components and then use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API to search for the tags.&lt;/p&gt; &lt;p&gt;To add a description to an experiment, specify the optional &lt;code&gt;Description&lt;/code&gt; parameter. To add a description later, or to change the description, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateExperiment.html\&quot;&gt;UpdateExperiment&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;To get a list of all your experiments, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListExperiments.html\&quot;&gt;ListExperiments&lt;/a&gt; API. To view an experiment&#39;s properties, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html\&quot;&gt;DescribeExperiment&lt;/a&gt; API. To get a list of all the trials associated with an experiment, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html\&quot;&gt;ListTrials&lt;/a&gt; API. To create a trial call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrial.html\&quot;&gt;CreateTrial&lt;/a&gt; API.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def create_feature_group(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_feature_group

    &lt;p&gt;Create a new &lt;code&gt;FeatureGroup&lt;/code&gt;. A &lt;code&gt;FeatureGroup&lt;/code&gt; is a group of &lt;code&gt;Features&lt;/code&gt; defined in the &lt;code&gt;FeatureStore&lt;/code&gt; to describe a &lt;code&gt;Record&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;FeatureGroup&lt;/code&gt; defines the schema and features contained in the FeatureGroup. A &lt;code&gt;FeatureGroup&lt;/code&gt; definition is composed of a list of &lt;code&gt;Features&lt;/code&gt;, a &lt;code&gt;RecordIdentifierFeatureName&lt;/code&gt;, an &lt;code&gt;EventTimeFeatureName&lt;/code&gt; and configurations for its &lt;code&gt;OnlineStore&lt;/code&gt; and &lt;code&gt;OfflineStore&lt;/code&gt;. Check &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Web Services service quotas&lt;/a&gt; to see the &lt;code&gt;FeatureGroup&lt;/code&gt;s quota for your Amazon Web Services account.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must include at least one of &lt;code&gt;OnlineStoreConfig&lt;/code&gt; and &lt;code&gt;OfflineStoreConfig&lt;/code&gt; to create a &lt;code&gt;FeatureGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateFeatureGroupRequest.from_dict(body)
    return web.Response(status=200)


async def create_flow_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_flow_definition

    Creates a flow definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateFlowDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def create_hub(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_hub

    &lt;p&gt;Create a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateHubRequest.from_dict(body)
    return web.Response(status=200)


async def create_human_task_ui(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_human_task_ui

    Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateHumanTaskUiRequest.from_dict(body)
    return web.Response(status=200)


async def create_hyper_parameter_tuning_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_hyper_parameter_tuning_job

    &lt;p&gt;Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version of a model by running many training jobs on your dataset using the algorithm you choose and values for hyperparameters within ranges that you specify. It then chooses the hyperparameter values that result in a model that performs the best, as measured by an objective metric that you choose.&lt;/p&gt; &lt;p&gt;A hyperparameter tuning job automatically creates Amazon SageMaker experiments, trials, and trial components for each training job that it runs. You can view these entities in Amazon SageMaker Studio. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/experiments-view-compare.html#experiments-view\&quot;&gt;View Experiments, Trials, and Trial Components&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.&lt;/p&gt; &lt;/important&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateHyperParameterTuningJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_image(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_image

    Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html\&quot;&gt;Bring your own SageMaker image&lt;/a&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateImageRequest.from_dict(body)
    return web.Response(status=200)


async def create_image_version(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_image_version

    Creates a version of the SageMaker image specified by &lt;code&gt;ImageName&lt;/code&gt;. The version represents the Amazon Elastic Container Registry (ECR) container image specified by &lt;code&gt;BaseImage&lt;/code&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateImageVersionRequest.from_dict(body)
    return web.Response(status=200)


async def create_inference_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_inference_experiment

    &lt;p&gt; Creates an inference experiment using the configurations specified in the request. &lt;/p&gt; &lt;p&gt; Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html\&quot;&gt;Shadow tests&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint&#39;s model variants based on your specified configuration. &lt;/p&gt; &lt;p&gt; While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html\&quot;&gt;View, monitor, and edit shadow tests&lt;/a&gt;. &lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateInferenceExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def create_inference_recommendations_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_inference_recommendations_job

    Starts a recommendation job. You can create either an instance recommendation or load test job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateInferenceRecommendationsJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_labeling_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_labeling_job

    &lt;p&gt;Creates a job that uses workers to label the data objects in your input dataset. You can use the labeled data to train machine learning models. &lt;/p&gt; &lt;p&gt;You can select your workforce from one of three providers:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A private workforce that you create. It can include employees, contractors, and outside experts. Use a private workforce when want the data to stay within your organization or when a specific set of skills is required.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide expertise in specific areas. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Amazon Mechanical Turk workforce. This is the largest workforce, but it should only be used for public data or data that has been stripped of any personally identifiable information.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can also use &lt;i&gt;automated data labeling&lt;/i&gt; to reduce the number of data objects that need to be labeled by a human. Automated data labeling uses &lt;i&gt;active learning&lt;/i&gt; to determine if a data object can be labeled by machine or if it needs to be sent to a human worker. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html\&quot;&gt;Using Automated Data Labeling&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The data objects to be labeled are contained in an Amazon S3 bucket. You create a &lt;i&gt;manifest file&lt;/i&gt; that describes the location of each object. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html\&quot;&gt;Using Input and Output Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The output can be used as the manifest file for another labeling job or as training data for your machine learning models.&lt;/p&gt; &lt;p&gt;You can use this operation to create a static labeling job or a streaming labeling job. A static labeling job stops if all data objects in the input manifest file identified in &lt;code&gt;ManifestS3Uri&lt;/code&gt; have been labeled. A streaming labeling job runs perpetually until it is manually stopped, or remains idle for 10 days. You can send new data objects to an active (&lt;code&gt;InProgress&lt;/code&gt;) streaming labeling job in real time. To learn how to create a static labeling job, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html\&quot;&gt;Create a Labeling Job (API) &lt;/a&gt; in the Amazon SageMaker Developer Guide. To learn how to create a streaming labeling job, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html\&quot;&gt;Create a Streaming Labeling Job&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateLabelingJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_model(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_model

    &lt;p&gt;Creates a model in SageMaker. In the request, you name the model and describe a primary container. For the primary container, you specify the Docker image that contains inference code, artifacts (from prior training), and a custom environment map that the inference code uses when you deploy the model for predictions.&lt;/p&gt; &lt;p&gt;Use this API to create a model if you want to use SageMaker hosting services or run a batch transform job.&lt;/p&gt; &lt;p&gt;To host your model, you create an endpoint configuration with the &lt;code&gt;CreateEndpointConfig&lt;/code&gt; API, and then create an endpoint with the &lt;code&gt;CreateEndpoint&lt;/code&gt; API. SageMaker then deploys all of the containers that you defined for the model in the hosting environment. &lt;/p&gt; &lt;p&gt;For an example that calls this method when deploying a model to SageMaker hosting services, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model\&quot;&gt;Create a Model (Amazon Web Services SDK for Python (Boto 3)).&lt;/a&gt; &lt;/p&gt; &lt;p&gt;To run a batch transform using your model, you start a job with the &lt;code&gt;CreateTransformJob&lt;/code&gt; API. SageMaker uses your model and your dataset to get inferences which are then saved to a specified S3 location.&lt;/p&gt; &lt;p&gt;In the request, you also provide an IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute hosting instances or for batch transform jobs. In addition, you also use the IAM role to manage permissions the inference code needs. For example, if the inference code access any other Amazon Web Services resources, you grant necessary permissions via this role.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateModelInput.from_dict(body)
    return web.Response(status=200)


async def create_model_bias_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_model_bias_job_definition

    Creates the definition for a model bias job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateModelBiasJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def create_model_card(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_model_card

    &lt;p&gt;Creates an Amazon SageMaker Model Card.&lt;/p&gt; &lt;p&gt;For information about how to use model cards, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html\&quot;&gt;Amazon SageMaker Model Card&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateModelCardRequest.from_dict(body)
    return web.Response(status=200)


async def create_model_card_export_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_model_card_export_job

    Creates an Amazon SageMaker Model Card export job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateModelCardExportJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_model_explainability_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_model_explainability_job_definition

    Creates the definition for a model explainability job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateModelExplainabilityJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def create_model_package(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_model_package

    &lt;p&gt;Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.&lt;/p&gt; &lt;p&gt;To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for &lt;code&gt;InferenceSpecification&lt;/code&gt;. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for &lt;code&gt;SourceAlgorithmSpecification&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;There are two types of model packages:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Versioned - a model that is part of a model group in the model registry.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Unversioned - a model package that is not part of a model group.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateModelPackageInput.from_dict(body)
    return web.Response(status=200)


async def create_model_package_group(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_model_package_group

    Creates a model group. A model group contains a group of model versions.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateModelPackageGroupInput.from_dict(body)
    return web.Response(status=200)


async def create_model_quality_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_model_quality_job_definition

    Creates a definition for a job that monitors model quality and drift. For information about model monitor, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html\&quot;&gt;Amazon SageMaker Model Monitor&lt;/a&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateModelQualityJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def create_monitoring_schedule(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_monitoring_schedule

    Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data captured for an Amazon SageMaker Endpoint.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateMonitoringScheduleRequest.from_dict(body)
    return web.Response(status=200)


async def create_notebook_instance(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_notebook_instance

    &lt;p&gt;Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook. &lt;/p&gt; &lt;p&gt;In a &lt;code&gt;CreateNotebookInstance&lt;/code&gt; request, specify the type of ML compute instance that you want to run. SageMaker launches the instance, installs common libraries that you can use to explore datasets for model training, and attaches an ML storage volume to the notebook instance. &lt;/p&gt; &lt;p&gt;SageMaker also provides a set of example notebooks. Each notebook demonstrates how to use SageMaker with a specific algorithm or with a machine learning framework. &lt;/p&gt; &lt;p&gt;After receiving the request, SageMaker does the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Creates a network interface in the SageMaker VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Option) If you specified &lt;code&gt;SubnetId&lt;/code&gt;, SageMaker creates a network interface in your own VPC, which is inferred from the subnet ID that you provide in the input. When creating this network interface, SageMaker attaches the security group that you specified in the request to the network interface that it creates in your VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Launches an EC2 instance of the type specified in the request in the SageMaker VPC. If you specified &lt;code&gt;SubnetId&lt;/code&gt; of your VPC, SageMaker specifies both network interfaces when launching this instance. This enables inbound traffic from your own VPC to the notebook instance, assuming that the security groups allow it.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN). You can&#39;t change the name of a notebook instance after you create it.&lt;/p&gt; &lt;p&gt;After SageMaker creates the notebook instance, you can connect to the Jupyter server and work in Jupyter notebooks. For example, you can write code to explore a dataset that you can use for model training, train a model, host models by creating SageMaker endpoints, and validate hosted models. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html\&quot;&gt;How It Works&lt;/a&gt;. &lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateNotebookInstanceInput.from_dict(body)
    return web.Response(status=200)


async def create_notebook_instance_lifecycle_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_notebook_instance_lifecycle_config

    &lt;p&gt;Creates a lifecycle configuration that you can associate with a notebook instance. A &lt;i&gt;lifecycle configuration&lt;/i&gt; is a collection of shell scripts that run when you create or start a notebook instance.&lt;/p&gt; &lt;p&gt;Each lifecycle configuration script has a limit of 16384 characters.&lt;/p&gt; &lt;p&gt;The value of the &lt;code&gt;$PATH&lt;/code&gt; environment variable that is available to both scripts is &lt;code&gt;/sbin:bin:/usr/sbin:/usr/bin&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;View CloudWatch Logs for notebook instance lifecycle configurations in log group &lt;code&gt;/aws/sagemaker/NotebookInstances&lt;/code&gt; in log stream &lt;code&gt;[notebook-instance-name]/[LifecycleConfigHook]&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.&lt;/p&gt; &lt;p&gt;For information about notebook instance lifestyle configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\&quot;&gt;Step 2.1: (Optional) Customize a Notebook Instance&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateNotebookInstanceLifecycleConfigInput.from_dict(body)
    return web.Response(status=200)


async def create_pipeline(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_pipeline

    Creates a pipeline using a JSON pipeline definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreatePipelineRequest.from_dict(body)
    return web.Response(status=200)


async def create_presigned_domain_url(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_presigned_domain_url

    &lt;p&gt;Creates a URL for a specified UserProfile in a Domain. When accessed in a web browser, the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of the Apps and files associated with the Domain&#39;s Amazon Elastic File System (EFS) volume. This operation can only be called when the authentication mode equals IAM. &lt;/p&gt; &lt;p&gt;The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app.&lt;/p&gt; &lt;p&gt;You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html\&quot;&gt;Connect to SageMaker Studio Through an Interface VPC Endpoint&lt;/a&gt; .&lt;/p&gt; &lt;note&gt; &lt;p&gt;The URL that you get from a call to &lt;code&gt;CreatePresignedDomainUrl&lt;/code&gt; has a default timeout of 5 minutes. You can configure this value using &lt;code&gt;ExpiresInSeconds&lt;/code&gt;. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreatePresignedDomainUrlRequest.from_dict(body)
    return web.Response(status=200)


async def create_presigned_notebook_instance_url(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_presigned_notebook_instance_url

    &lt;p&gt;Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose &lt;code&gt;Open&lt;/code&gt; next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page.&lt;/p&gt; &lt;p&gt; The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance.&lt;/p&gt; &lt;p&gt;You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the &lt;code&gt;NotIpAddress&lt;/code&gt; condition operator and the &lt;code&gt;aws:SourceIP&lt;/code&gt; condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter\&quot;&gt;Limit Access to a Notebook Instance by IP Address&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The URL that you get from a call to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreatePresignedNotebookInstanceUrl.html\&quot;&gt;CreatePresignedNotebookInstanceUrl&lt;/a&gt; is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreatePresignedNotebookInstanceUrlInput.from_dict(body)
    return web.Response(status=200)


async def create_processing_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_processing_job

    Creates a processing job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateProcessingJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_project(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_project

    Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateProjectInput.from_dict(body)
    return web.Response(status=200)


async def create_space(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_space

    Creates a space used for real time collaboration in a Domain.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateSpaceRequest.from_dict(body)
    return web.Response(status=200)


async def create_studio_lifecycle_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_studio_lifecycle_config

    Creates a new Studio Lifecycle Configuration.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateStudioLifecycleConfigRequest.from_dict(body)
    return web.Response(status=200)


async def create_training_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_training_job

    &lt;p&gt;Starts a model training job. After training completes, SageMaker saves the resulting model artifacts to an Amazon S3 location that you specify. &lt;/p&gt; &lt;p&gt;If you choose to host your model using SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts in a machine learning service other than SageMaker, provided that you know how to use them for inference. &lt;/p&gt; &lt;p&gt;In the request body, you provide the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlgorithmSpecification&lt;/code&gt; - Identifies the training algorithm to use. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HyperParameters&lt;/code&gt; - Specify these algorithm-specific parameters to enable the estimation of model parameters during training. Hyperparameters can be tuned to optimize this learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\&quot;&gt;Algorithms&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InputDataConfig&lt;/code&gt; - Describes the input required by the training job and the Amazon S3, EFS, or FSx location where it is stored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OutputDataConfig&lt;/code&gt; - Identifies the Amazon S3 bucket where you want SageMaker to save the results of model training. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ResourceConfig&lt;/code&gt; - Identifies the resources, ML compute instances, and ML storage volumes to deploy for model training. In distributed training, you specify more than one instance. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EnableManagedSpotTraining&lt;/code&gt; - Optimize the cost of training machine learning models by up to 80% by using Amazon EC2 Spot instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html\&quot;&gt;Managed Spot Training&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RoleArn&lt;/code&gt; - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during model training. You must grant this role the necessary permissions so that SageMaker can successfully complete model training. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StoppingCondition&lt;/code&gt; - To help cap training costs, use &lt;code&gt;MaxRuntimeInSeconds&lt;/code&gt; to set a time limit for training. Use &lt;code&gt;MaxWaitTimeInSeconds&lt;/code&gt; to specify how long a managed spot training job has to complete. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Environment&lt;/code&gt; - The environment variables to set in the Docker container.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RetryStrategy&lt;/code&gt; - The number of times to retry the job when the job fails due to an &lt;code&gt;InternalServerError&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information about SageMaker, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html\&quot;&gt;How It Works&lt;/a&gt;. &lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateTrainingJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_transform_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_transform_job

    &lt;p&gt;Starts a transform job. A transform job uses a trained model to get inferences on a dataset and saves these results to an Amazon S3 location that you specify.&lt;/p&gt; &lt;p&gt;To perform batch transformations, you create a transform job and use the data that you have readily available.&lt;/p&gt; &lt;p&gt;In the request body, you provide the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TransformJobName&lt;/code&gt; - Identifies the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ModelName&lt;/code&gt; - Identifies the model to use. &lt;code&gt;ModelName&lt;/code&gt; must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services account. For information on creating a model, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html\&quot;&gt;CreateModel&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TransformInput&lt;/code&gt; - Describes the dataset to be transformed and the Amazon S3 location where it is stored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TransformOutput&lt;/code&gt; - Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TransformResources&lt;/code&gt; - Identifies the ML compute instances for the transform job.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how batch transformation works, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html\&quot;&gt;Batch Transform&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateTransformJobRequest.from_dict(body)
    return web.Response(status=200)


async def create_trial(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_trial

    &lt;p&gt;Creates an SageMaker &lt;i&gt;trial&lt;/i&gt;. A trial is a set of steps called &lt;i&gt;trial components&lt;/i&gt; that produce a machine learning model. A trial is part of a single SageMaker &lt;i&gt;experiment&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.&lt;/p&gt; &lt;p&gt;You can add tags to a trial and then use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API to search for the tags.&lt;/p&gt; &lt;p&gt;To get a list of all your trials, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html\&quot;&gt;ListTrials&lt;/a&gt; API. To view a trial&#39;s properties, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html\&quot;&gt;DescribeTrial&lt;/a&gt; API. To create a trial component, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html\&quot;&gt;CreateTrialComponent&lt;/a&gt; API.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateTrialRequest.from_dict(body)
    return web.Response(status=200)


async def create_trial_component(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_trial_component

    &lt;p&gt;Creates a &lt;i&gt;trial component&lt;/i&gt;, which is a stage of a machine learning &lt;i&gt;trial&lt;/i&gt;. A trial is composed of one or more trial components. A trial component can be used in multiple trials.&lt;/p&gt; &lt;p&gt;Trial components include pre-processing jobs, training jobs, and batch transform jobs.&lt;/p&gt; &lt;p&gt;When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.&lt;/p&gt; &lt;p&gt;You can add tags to a trial component and then use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API to search for the tags.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateTrialComponentRequest.from_dict(body)
    return web.Response(status=200)


async def create_user_profile(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_user_profile

    Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a \&quot;person\&quot; for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user&#39;s private Amazon Elastic File System (EFS) home directory. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateUserProfileRequest.from_dict(body)
    return web.Response(status=200)


async def create_workforce(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_workforce

    &lt;p&gt;Use this operation to create a workforce. This operation will return an error if a workforce already exists in the Amazon Web Services Region that you specify. You can only create one workforce in each Amazon Web Services Region per Amazon Web Services account.&lt;/p&gt; &lt;p&gt;If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkforce.html\&quot;&gt;DeleteWorkforce&lt;/a&gt; API operation to delete the existing workforce and then use &lt;code&gt;CreateWorkforce&lt;/code&gt; to create a new workforce.&lt;/p&gt; &lt;p&gt;To create a private workforce using Amazon Cognito, you must specify a Cognito user pool in &lt;code&gt;CognitoConfig&lt;/code&gt;. You can also create an Amazon Cognito workforce using the Amazon SageMaker console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html\&quot;&gt; Create a Private Workforce (Amazon Cognito)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP configuration in &lt;code&gt;OidcConfig&lt;/code&gt;. Your OIDC IdP must support &lt;i&gt;groups&lt;/i&gt; because groups are used by Ground Truth and Amazon A2I to create work teams. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html\&quot;&gt; Create a Private Workforce (OIDC IdP)&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateWorkforceRequest.from_dict(body)
    return web.Response(status=200)


async def create_workteam(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """create_workteam

    &lt;p&gt;Creates a new work team for labeling your data. A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team.&lt;/p&gt; &lt;p&gt;You cannot create more than 25 work teams in an account and region.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = CreateWorkteamRequest.from_dict(body)
    return web.Response(status=200)


async def delete_action(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_action

    Deletes an action.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteActionRequest.from_dict(body)
    return web.Response(status=200)


async def delete_algorithm(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_algorithm

    Removes the specified algorithm from your account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteAlgorithmInput.from_dict(body)
    return web.Response(status=200)


async def delete_app(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_app

    Used to stop and delete an app.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteAppRequest.from_dict(body)
    return web.Response(status=200)


async def delete_app_image_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_app_image_config

    Deletes an AppImageConfig.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteAppImageConfigRequest.from_dict(body)
    return web.Response(status=200)


async def delete_artifact(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_artifact

    Deletes an artifact. Either &lt;code&gt;ArtifactArn&lt;/code&gt; or &lt;code&gt;Source&lt;/code&gt; must be specified.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteArtifactRequest.from_dict(body)
    return web.Response(status=200)


async def delete_association(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_association

    Deletes an association.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteAssociationRequest.from_dict(body)
    return web.Response(status=200)


async def delete_code_repository(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_code_repository

    Deletes the specified Git repository from your account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteCodeRepositoryInput.from_dict(body)
    return web.Response(status=200)


async def delete_context(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_context

    Deletes an context.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteContextRequest.from_dict(body)
    return web.Response(status=200)


async def delete_data_quality_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_data_quality_job_definition

    Deletes a data quality monitoring job definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteDataQualityJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def delete_device_fleet(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_device_fleet

    Deletes a fleet.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteDeviceFleetRequest.from_dict(body)
    return web.Response(status=200)


async def delete_domain(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_domain

    Used to delete a domain. If you onboarded with IAM mode, you will need to delete your domain to onboard again using IAM Identity Center. Use with caution. All of the members of the domain will lose access to their EFS volume, including data, notebooks, and other artifacts. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteDomainRequest.from_dict(body)
    return web.Response(status=200)


async def delete_edge_deployment_plan(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_edge_deployment_plan

    Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteEdgeDeploymentPlanRequest.from_dict(body)
    return web.Response(status=200)


async def delete_edge_deployment_stage(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_edge_deployment_stage

    Delete a stage in an edge deployment plan if (and only if) the stage is inactive.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteEdgeDeploymentStageRequest.from_dict(body)
    return web.Response(status=200)


async def delete_endpoint(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_endpoint

    &lt;p&gt;Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the endpoint was created. &lt;/p&gt; &lt;p&gt;SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don&#39;t need to use the &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html\&quot;&gt;RevokeGrant&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants. You might still see these resources in your account for a few minutes after deleting your endpoint. Do not delete or revoke the permissions for your &lt;code&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn\&quot;&gt;ExecutionRoleArn&lt;/a&gt; &lt;/code&gt;, otherwise SageMaker cannot delete these resources.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteEndpointInput.from_dict(body)
    return web.Response(status=200)


async def delete_endpoint_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_endpoint_config

    &lt;p&gt;Deletes an endpoint configuration. The &lt;code&gt;DeleteEndpointConfig&lt;/code&gt; API deletes only the specified configuration. It does not delete endpoints created using the configuration. &lt;/p&gt; &lt;p&gt;You must not delete an &lt;code&gt;EndpointConfig&lt;/code&gt; in use by an endpoint that is live or while the &lt;code&gt;UpdateEndpoint&lt;/code&gt; or &lt;code&gt;CreateEndpoint&lt;/code&gt; operations are being performed on the endpoint. If you delete the &lt;code&gt;EndpointConfig&lt;/code&gt; of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteEndpointConfigInput.from_dict(body)
    return web.Response(status=200)


async def delete_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_experiment

    Deletes an SageMaker experiment. All trials associated with the experiment must be deleted first. Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html\&quot;&gt;ListTrials&lt;/a&gt; API to get a list of the trials associated with the experiment.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def delete_feature_group(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_feature_group

    &lt;p&gt;Delete the &lt;code&gt;FeatureGroup&lt;/code&gt; and any data that was written to the &lt;code&gt;OnlineStore&lt;/code&gt; of the &lt;code&gt;FeatureGroup&lt;/code&gt;. Data cannot be accessed from the &lt;code&gt;OnlineStore&lt;/code&gt; immediately after &lt;code&gt;DeleteFeatureGroup&lt;/code&gt; is called. &lt;/p&gt; &lt;p&gt;Data written into the &lt;code&gt;OfflineStore&lt;/code&gt; will not be deleted. The Amazon Web Services Glue database and tables that are automatically created for your &lt;code&gt;OfflineStore&lt;/code&gt; are not deleted. &lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteFeatureGroupRequest.from_dict(body)
    return web.Response(status=200)


async def delete_flow_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_flow_definition

    Deletes the specified flow definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteFlowDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def delete_hub(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_hub

    &lt;p&gt;Delete a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteHubRequest.from_dict(body)
    return web.Response(status=200)


async def delete_hub_content(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_hub_content

    &lt;p&gt;Delete the contents of a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteHubContentRequest.from_dict(body)
    return web.Response(status=200)


async def delete_human_task_ui(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_human_task_ui

    &lt;p&gt;Use this operation to delete a human task user interface (worker task template).&lt;/p&gt; &lt;p&gt; To see a list of human task user interfaces (work task templates) in your account, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListHumanTaskUis.html\&quot;&gt;ListHumanTaskUis&lt;/a&gt;. When you delete a worker task template, it no longer appears when you call &lt;code&gt;ListHumanTaskUis&lt;/code&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteHumanTaskUiRequest.from_dict(body)
    return web.Response(status=200)


async def delete_image(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_image

    Deletes a SageMaker image and all versions of the image. The container images aren&#39;t deleted.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteImageRequest.from_dict(body)
    return web.Response(status=200)


async def delete_image_version(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_image_version

    Deletes a version of a SageMaker image. The container image the version represents isn&#39;t deleted.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteImageVersionRequest.from_dict(body)
    return web.Response(status=200)


async def delete_inference_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_inference_experiment

    &lt;p&gt;Deletes an inference experiment.&lt;/p&gt; &lt;note&gt; &lt;p&gt; This operation does not delete your endpoint, variants, or any underlying resources. This operation only deletes the metadata of your experiment. &lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteInferenceExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def delete_model(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_model

    Deletes a model. The &lt;code&gt;DeleteModel&lt;/code&gt; API deletes only the model entry that was created in SageMaker when you called the &lt;code&gt;CreateModel&lt;/code&gt; API. It does not delete model artifacts, inference code, or the IAM role that you specified when creating the model. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteModelInput.from_dict(body)
    return web.Response(status=200)


async def delete_model_bias_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_model_bias_job_definition

    Deletes an Amazon SageMaker model bias job definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteModelBiasJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def delete_model_card(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_model_card

    Deletes an Amazon SageMaker Model Card.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteModelCardRequest.from_dict(body)
    return web.Response(status=200)


async def delete_model_explainability_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_model_explainability_job_definition

    Deletes an Amazon SageMaker model explainability job definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteModelExplainabilityJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def delete_model_package(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_model_package

    &lt;p&gt;Deletes a model package.&lt;/p&gt; &lt;p&gt;A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteModelPackageInput.from_dict(body)
    return web.Response(status=200)


async def delete_model_package_group(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_model_package_group

    Deletes the specified model group.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteModelPackageGroupInput.from_dict(body)
    return web.Response(status=200)


async def delete_model_package_group_policy(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_model_package_group_policy

    Deletes a model group resource policy.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteModelPackageGroupPolicyInput.from_dict(body)
    return web.Response(status=200)


async def delete_model_quality_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_model_quality_job_definition

    Deletes the secified model quality monitoring job definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteModelQualityJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def delete_monitoring_schedule(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_monitoring_schedule

    Deletes a monitoring schedule. Also stops the schedule had not already been stopped. This does not delete the job execution history of the monitoring schedule. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteMonitoringScheduleRequest.from_dict(body)
    return web.Response(status=200)


async def delete_notebook_instance(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_notebook_instance

    &lt;p&gt; Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you must call the &lt;code&gt;StopNotebookInstance&lt;/code&gt; API. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you delete a notebook instance, you lose all of your data. SageMaker removes the ML compute instance, and deletes the ML storage volume and the network interface associated with the notebook instance. &lt;/p&gt; &lt;/important&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteNotebookInstanceInput.from_dict(body)
    return web.Response(status=200)


async def delete_notebook_instance_lifecycle_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_notebook_instance_lifecycle_config

    Deletes a notebook instance lifecycle configuration.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteNotebookInstanceLifecycleConfigInput.from_dict(body)
    return web.Response(status=200)


async def delete_pipeline(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_pipeline

    Deletes a pipeline if there are no running instances of the pipeline. To delete a pipeline, you must stop all running instances of the pipeline using the &lt;code&gt;StopPipelineExecution&lt;/code&gt; API. When you delete a pipeline, all instances of the pipeline are deleted.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeletePipelineRequest.from_dict(body)
    return web.Response(status=200)


async def delete_project(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_project

    Delete the specified project.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteProjectInput.from_dict(body)
    return web.Response(status=200)


async def delete_space(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_space

    Used to delete a space.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteSpaceRequest.from_dict(body)
    return web.Response(status=200)


async def delete_studio_lifecycle_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_studio_lifecycle_config

    Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteStudioLifecycleConfigRequest.from_dict(body)
    return web.Response(status=200)


async def delete_tags(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_tags

    &lt;p&gt;Deletes the specified tags from an SageMaker resource.&lt;/p&gt; &lt;p&gt;To list a resource&#39;s tags, use the &lt;code&gt;ListTags&lt;/code&gt; API. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you call this API to delete tags from a hyperparameter tuning job, the deleted tags are not removed from training jobs that the hyperparameter tuning job launched before you called this API.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;When you call this API to delete tags from a SageMaker Studio Domain or User Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain or User Profile launched before you called this API.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteTagsInput.from_dict(body)
    return web.Response(status=200)


async def delete_trial(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_trial

    Deletes the specified trial. All trial components that make up the trial must be deleted first. Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html\&quot;&gt;DescribeTrialComponent&lt;/a&gt; API to get the list of trial components.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteTrialRequest.from_dict(body)
    return web.Response(status=200)


async def delete_trial_component(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_trial_component

    Deletes the specified trial component. A trial component must be disassociated from all trials before the trial component can be deleted. To disassociate a trial component from a trial, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html\&quot;&gt;DisassociateTrialComponent&lt;/a&gt; API.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteTrialComponentRequest.from_dict(body)
    return web.Response(status=200)


async def delete_user_profile(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_user_profile

    Deletes a user profile. When a user profile is deleted, the user loses access to their EFS volume, including data, notebooks, and other artifacts.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteUserProfileRequest.from_dict(body)
    return web.Response(status=200)


async def delete_workforce(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_workforce

    &lt;p&gt;Use this operation to delete a workforce.&lt;/p&gt; &lt;p&gt;If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use this operation to delete the existing workforce and then use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateWorkforce.html\&quot;&gt;CreateWorkforce&lt;/a&gt; to create a new workforce.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If a private workforce contains one or more work teams, you must use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html\&quot;&gt;DeleteWorkteam&lt;/a&gt; operation to delete all work teams before you delete the workforce. If you try to delete a workforce that contains one or more work teams, you will recieve a &lt;code&gt;ResourceInUse&lt;/code&gt; error.&lt;/p&gt; &lt;/important&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteWorkforceRequest.from_dict(body)
    return web.Response(status=200)


async def delete_workteam(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """delete_workteam

    Deletes an existing work team. This operation can&#39;t be undone.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeleteWorkteamRequest.from_dict(body)
    return web.Response(status=200)


async def deregister_devices(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """deregister_devices

    Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DeregisterDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def describe_action(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_action

    Describes an action.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeActionRequest.from_dict(body)
    return web.Response(status=200)


async def describe_algorithm(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_algorithm

    Returns a description of the specified algorithm that is in your account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeAlgorithmInput.from_dict(body)
    return web.Response(status=200)


async def describe_app(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_app

    Describes the app.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeAppRequest.from_dict(body)
    return web.Response(status=200)


async def describe_app_image_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_app_image_config

    Describes an AppImageConfig.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeAppImageConfigRequest.from_dict(body)
    return web.Response(status=200)


async def describe_artifact(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_artifact

    Describes an artifact.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeArtifactRequest.from_dict(body)
    return web.Response(status=200)


async def describe_auto_ml_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_auto_ml_job

    &lt;p&gt;Returns information about an AutoML job created by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html\&quot;&gt;CreateAutoMLJob&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;AutoML jobs created by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\&quot;&gt;CreateAutoMLJobV2&lt;/a&gt; cannot be described by &lt;code&gt;DescribeAutoMLJob&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeAutoMLJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_auto_ml_job_v2(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_auto_ml_job_v2

    Returns information about an AutoML job created by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\&quot;&gt;CreateAutoMLJobV2&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html\&quot;&gt;CreateAutoMLJob&lt;/a&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeAutoMLJobV2Request.from_dict(body)
    return web.Response(status=200)


async def describe_code_repository(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_code_repository

    Gets details about the specified Git repository.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeCodeRepositoryInput.from_dict(body)
    return web.Response(status=200)


async def describe_compilation_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_compilation_job

    &lt;p&gt;Returns information about a model compilation job.&lt;/p&gt; &lt;p&gt;To create a model compilation job, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html\&quot;&gt;CreateCompilationJob&lt;/a&gt;. To get information about multiple model compilation jobs, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html\&quot;&gt;ListCompilationJobs&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeCompilationJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_context(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_context

    Describes a context.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeContextRequest.from_dict(body)
    return web.Response(status=200)


async def describe_data_quality_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_data_quality_job_definition

    Gets the details of a data quality monitoring job definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeDataQualityJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def describe_device(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_device

    Describes the device.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeDeviceRequest.from_dict(body)
    return web.Response(status=200)


async def describe_device_fleet(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_device_fleet

    A description of the fleet the device belongs to.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeDeviceFleetRequest.from_dict(body)
    return web.Response(status=200)


async def describe_domain(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_domain

    The description of the domain.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeDomainRequest.from_dict(body)
    return web.Response(status=200)


async def describe_edge_deployment_plan(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_edge_deployment_plan

    Describes an edge deployment plan with deployment status per stage.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeEdgeDeploymentPlanRequest.from_dict(body)
    return web.Response(status=200)


async def describe_edge_packaging_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_edge_packaging_job

    A description of edge packaging jobs.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeEdgePackagingJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_endpoint(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_endpoint

    Returns the description of an endpoint.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeEndpointInput.from_dict(body)
    return web.Response(status=200)


async def describe_endpoint_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_endpoint_config

    Returns the description of an endpoint configuration created using the &lt;code&gt;CreateEndpointConfig&lt;/code&gt; API.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeEndpointConfigInput.from_dict(body)
    return web.Response(status=200)


async def describe_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_experiment

    Provides a list of an experiment&#39;s properties.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def describe_feature_group(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_feature_group

    Use this operation to describe a &lt;code&gt;FeatureGroup&lt;/code&gt;. The response includes information on the creation time, &lt;code&gt;FeatureGroup&lt;/code&gt; name, the unique identifier for each &lt;code&gt;FeatureGroup&lt;/code&gt;, and more.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeFeatureGroupRequest.from_dict(body)
    return web.Response(status=200)


async def describe_feature_metadata(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_feature_metadata

    Shows the metadata for a feature within a feature group.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeFeatureMetadataRequest.from_dict(body)
    return web.Response(status=200)


async def describe_flow_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_flow_definition

    Returns information about the specified flow definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeFlowDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def describe_hub(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_hub

    &lt;p&gt;Describe a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeHubRequest.from_dict(body)
    return web.Response(status=200)


async def describe_hub_content(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_hub_content

    &lt;p&gt;Describe the content of a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeHubContentRequest.from_dict(body)
    return web.Response(status=200)


async def describe_human_task_ui(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_human_task_ui

    Returns information about the requested human task user interface (worker task template).

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeHumanTaskUiRequest.from_dict(body)
    return web.Response(status=200)


async def describe_hyper_parameter_tuning_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_hyper_parameter_tuning_job

    Returns a description of a hyperparameter tuning job, depending on the fields selected. These fields can include the name, Amazon Resource Name (ARN), job status of your tuning job and more.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeHyperParameterTuningJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_image(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_image

    Describes a SageMaker image.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeImageRequest.from_dict(body)
    return web.Response(status=200)


async def describe_image_version(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_image_version

    Describes a version of a SageMaker image.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeImageVersionRequest.from_dict(body)
    return web.Response(status=200)


async def describe_inference_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_inference_experiment

    Returns details about an inference experiment.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeInferenceExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def describe_inference_recommendations_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_inference_recommendations_job

    Provides the results of the Inference Recommender job. One or more recommendation jobs are returned.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeInferenceRecommendationsJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_labeling_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_labeling_job

    Gets information about a labeling job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeLabelingJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_lineage_group(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_lineage_group

    Provides a list of properties for the requested lineage group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html\&quot;&gt; Cross-Account Lineage Tracking &lt;/a&gt; in the &lt;i&gt;Amazon SageMaker Developer Guide&lt;/i&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeLineageGroupRequest.from_dict(body)
    return web.Response(status=200)


async def describe_model(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_model

    Describes a model that you created using the &lt;code&gt;CreateModel&lt;/code&gt; API.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeModelInput.from_dict(body)
    return web.Response(status=200)


async def describe_model_bias_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_model_bias_job_definition

    Returns a description of a model bias job definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeModelBiasJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def describe_model_card(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_model_card

    Describes the content, creation time, and security configuration of an Amazon SageMaker Model Card.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeModelCardRequest.from_dict(body)
    return web.Response(status=200)


async def describe_model_card_export_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_model_card_export_job

    Describes an Amazon SageMaker Model Card export job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeModelCardExportJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_model_explainability_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_model_explainability_job_definition

    Returns a description of a model explainability job definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeModelExplainabilityJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def describe_model_package(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_model_package

    &lt;p&gt;Returns a description of the specified model package, which is used to create SageMaker models or list them on Amazon Web Services Marketplace.&lt;/p&gt; &lt;p&gt;To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services Marketplace.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeModelPackageInput.from_dict(body)
    return web.Response(status=200)


async def describe_model_package_group(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_model_package_group

    Gets a description for the specified model group.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeModelPackageGroupInput.from_dict(body)
    return web.Response(status=200)


async def describe_model_quality_job_definition(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_model_quality_job_definition

    Returns a description of a model quality job definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeModelQualityJobDefinitionRequest.from_dict(body)
    return web.Response(status=200)


async def describe_monitoring_schedule(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_monitoring_schedule

    Describes the schedule for a monitoring job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeMonitoringScheduleRequest.from_dict(body)
    return web.Response(status=200)


async def describe_notebook_instance(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_notebook_instance

    Returns information about a notebook instance.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeNotebookInstanceInput.from_dict(body)
    return web.Response(status=200)


async def describe_notebook_instance_lifecycle_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_notebook_instance_lifecycle_config

    &lt;p&gt;Returns a description of a notebook instance lifecycle configuration.&lt;/p&gt; &lt;p&gt;For information about notebook instance lifestyle configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\&quot;&gt;Step 2.1: (Optional) Customize a Notebook Instance&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeNotebookInstanceLifecycleConfigInput.from_dict(body)
    return web.Response(status=200)


async def describe_pipeline(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_pipeline

    Describes the details of a pipeline.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribePipelineRequest.from_dict(body)
    return web.Response(status=200)


async def describe_pipeline_definition_for_execution(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_pipeline_definition_for_execution

    Describes the details of an execution&#39;s pipeline definition.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribePipelineDefinitionForExecutionRequest.from_dict(body)
    return web.Response(status=200)


async def describe_pipeline_execution(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_pipeline_execution

    Describes the details of a pipeline execution.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribePipelineExecutionRequest.from_dict(body)
    return web.Response(status=200)


async def describe_processing_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_processing_job

    Returns a description of a processing job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeProcessingJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_project(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_project

    Describes the details of a project.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeProjectInput.from_dict(body)
    return web.Response(status=200)


async def describe_space(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_space

    Describes the space.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeSpaceRequest.from_dict(body)
    return web.Response(status=200)


async def describe_studio_lifecycle_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_studio_lifecycle_config

    Describes the Studio Lifecycle Configuration.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeStudioLifecycleConfigRequest.from_dict(body)
    return web.Response(status=200)


async def describe_subscribed_workteam(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_subscribed_workteam

    Gets information about a work team provided by a vendor. It returns details about the subscription with a vendor in the Amazon Web Services Marketplace.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeSubscribedWorkteamRequest.from_dict(body)
    return web.Response(status=200)


async def describe_training_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_training_job

    &lt;p&gt;Returns information about a training job. &lt;/p&gt; &lt;p&gt;Some of the attributes below only appear if the training job successfully starts. If the training job fails, &lt;code&gt;TrainingJobStatus&lt;/code&gt; is &lt;code&gt;Failed&lt;/code&gt; and, depending on the &lt;code&gt;FailureReason&lt;/code&gt;, attributes like &lt;code&gt;TrainingStartTime&lt;/code&gt;, &lt;code&gt;TrainingTimeInSeconds&lt;/code&gt;, &lt;code&gt;TrainingEndTime&lt;/code&gt;, and &lt;code&gt;BillableTimeInSeconds&lt;/code&gt; may not be present in the response.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeTrainingJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_transform_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_transform_job

    Returns information about a transform job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeTransformJobRequest.from_dict(body)
    return web.Response(status=200)


async def describe_trial(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_trial

    Provides a list of a trial&#39;s properties.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeTrialRequest.from_dict(body)
    return web.Response(status=200)


async def describe_trial_component(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_trial_component

    Provides a list of a trials component&#39;s properties.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeTrialComponentRequest.from_dict(body)
    return web.Response(status=200)


async def describe_user_profile(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_user_profile

    Describes a user profile. For more information, see &lt;code&gt;CreateUserProfile&lt;/code&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeUserProfileRequest.from_dict(body)
    return web.Response(status=200)


async def describe_workforce(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_workforce

    &lt;p&gt;Lists private workforce information, including workforce name, Amazon Resource Name (ARN), and, if applicable, allowed IP address ranges (&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;CIDRs&lt;/a&gt;). Allowable IP address ranges are the IP addresses that workers can use to access tasks. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation applies only to private workforces.&lt;/p&gt; &lt;/important&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeWorkforceRequest.from_dict(body)
    return web.Response(status=200)


async def describe_workteam(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """describe_workteam

    Gets information about a specific work team. You can see information such as the create date, the last updated date, membership information, and the work team&#39;s Amazon Resource Name (ARN).

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DescribeWorkteamRequest.from_dict(body)
    return web.Response(status=200)


async def disable_sagemaker_servicecatalog_portfolio(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """disable_sagemaker_servicecatalog_portfolio

    Disables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: 
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    return web.Response(status=200)


async def disassociate_trial_component(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """disassociate_trial_component

    &lt;p&gt;Disassociates a trial component from a trial. This doesn&#39;t effect other trials the component is associated with. Before you can delete a component, you must disassociate the component from all trials it is associated with. To associate a trial component with a trial, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AssociateTrialComponent.html\&quot;&gt;AssociateTrialComponent&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;To get a list of the trials a component is associated with, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API. Specify &lt;code&gt;ExperimentTrialComponent&lt;/code&gt; for the &lt;code&gt;Resource&lt;/code&gt; parameter. The list appears in the response under &lt;code&gt;Results.TrialComponent.Parents&lt;/code&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = DisassociateTrialComponentRequest.from_dict(body)
    return web.Response(status=200)


async def enable_sagemaker_servicecatalog_portfolio(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """enable_sagemaker_servicecatalog_portfolio

    Enables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: 
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    return web.Response(status=200)


async def get_device_fleet_report(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """get_device_fleet_report

    Describes a fleet.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = GetDeviceFleetReportRequest.from_dict(body)
    return web.Response(status=200)


async def get_lineage_group_policy(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """get_lineage_group_policy

    The resource policy for the lineage group.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = GetLineageGroupPolicyRequest.from_dict(body)
    return web.Response(status=200)


async def get_model_package_group_policy(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """get_model_package_group_policy

    Gets a resource policy that manages access for a model group. For information about resource policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html\&quot;&gt;Identity-based policies and resource-based policies&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide.&lt;/i&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = GetModelPackageGroupPolicyInput.from_dict(body)
    return web.Response(status=200)


async def get_sagemaker_servicecatalog_portfolio_status(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """get_sagemaker_servicecatalog_portfolio_status

    Gets the status of Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: 
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    return web.Response(status=200)


async def get_scaling_configuration_recommendation(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """get_scaling_configuration_recommendation

    Starts an Amazon SageMaker Inference Recommender autoscaling recommendation job. Returns recommendations for autoscaling policies that you can apply to your SageMaker endpoint.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = GetScalingConfigurationRecommendationRequest.from_dict(body)
    return web.Response(status=200)


async def get_search_suggestions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """get_search_suggestions

    An auto-complete API for the search functionality in the SageMaker console. It returns suggestions of possible matches for the property name to use in &lt;code&gt;Search&lt;/code&gt; queries. Provides suggestions for &lt;code&gt;HyperParameters&lt;/code&gt;, &lt;code&gt;Tags&lt;/code&gt;, and &lt;code&gt;Metrics&lt;/code&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = GetSearchSuggestionsRequest.from_dict(body)
    return web.Response(status=200)


async def import_hub_content(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """import_hub_content

    &lt;p&gt;Import hub content.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = ImportHubContentRequest.from_dict(body)
    return web.Response(status=200)


async def list_actions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_actions

    Lists the actions in your account and their properties.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListActionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_algorithms(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_algorithms

    Lists the machine learning algorithms that have been created.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListAlgorithmsInput.from_dict(body)
    return web.Response(status=200)


async def list_aliases(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_aliases

    Lists the aliases of a specified image or image version.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListAliasesRequest.from_dict(body)
    return web.Response(status=200)


async def list_app_image_configs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_app_image_configs

    Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListAppImageConfigsRequest.from_dict(body)
    return web.Response(status=200)


async def list_apps(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_apps

    Lists apps.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListAppsRequest.from_dict(body)
    return web.Response(status=200)


async def list_artifacts(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_artifacts

    Lists the artifacts in your account and their properties.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListArtifactsRequest.from_dict(body)
    return web.Response(status=200)


async def list_associations(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_associations

    Lists the associations in your account and their properties.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListAssociationsRequest.from_dict(body)
    return web.Response(status=200)


async def list_auto_ml_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_auto_ml_jobs

    Request a list of jobs.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListAutoMLJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_candidates_for_auto_ml_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_candidates_for_auto_ml_job

    List the candidates created for the job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListCandidatesForAutoMLJobRequest.from_dict(body)
    return web.Response(status=200)


async def list_code_repositories(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_code_repositories

    Gets a list of the Git repositories in your account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListCodeRepositoriesInput.from_dict(body)
    return web.Response(status=200)


async def list_compilation_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_compilation_jobs

    &lt;p&gt;Lists model compilation jobs that satisfy various filters.&lt;/p&gt; &lt;p&gt;To create a model compilation job, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html\&quot;&gt;CreateCompilationJob&lt;/a&gt;. To get information about a particular model compilation job you have created, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html\&quot;&gt;DescribeCompilationJob&lt;/a&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListCompilationJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_contexts(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_contexts

    Lists the contexts in your account and their properties.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListContextsRequest.from_dict(body)
    return web.Response(status=200)


async def list_data_quality_job_definitions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_data_quality_job_definitions

    Lists the data quality job definitions in your account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListDataQualityJobDefinitionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_device_fleets(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_device_fleets

    Returns a list of devices in the fleet.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListDeviceFleetsRequest.from_dict(body)
    return web.Response(status=200)


async def list_devices(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_devices

    A list of devices.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def list_domains(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_domains

    Lists the domains.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListDomainsRequest.from_dict(body)
    return web.Response(status=200)


async def list_edge_deployment_plans(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_edge_deployment_plans

    Lists all edge deployment plans.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListEdgeDeploymentPlansRequest.from_dict(body)
    return web.Response(status=200)


async def list_edge_packaging_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_edge_packaging_jobs

    Returns a list of edge packaging jobs.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListEdgePackagingJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_endpoint_configs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_endpoint_configs

    Lists endpoint configurations.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListEndpointConfigsInput.from_dict(body)
    return web.Response(status=200)


async def list_endpoints(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_endpoints

    Lists endpoints.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListEndpointsInput.from_dict(body)
    return web.Response(status=200)


async def list_experiments(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_experiments

    Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListExperimentsRequest.from_dict(body)
    return web.Response(status=200)


async def list_feature_groups(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_feature_groups

    List &lt;code&gt;FeatureGroup&lt;/code&gt;s based on given filter and order.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListFeatureGroupsRequest.from_dict(body)
    return web.Response(status=200)


async def list_flow_definitions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_flow_definitions

    Returns information about the flow definitions in your account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListFlowDefinitionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_hub_content_versions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """list_hub_content_versions

    &lt;p&gt;List hub content versions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = ListHubContentVersionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_hub_contents(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """list_hub_contents

    &lt;p&gt;List the contents of a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = ListHubContentsRequest.from_dict(body)
    return web.Response(status=200)


async def list_hubs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """list_hubs

    &lt;p&gt;List all existing hubs.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = ListHubsRequest.from_dict(body)
    return web.Response(status=200)


async def list_human_task_uis(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_human_task_uis

    Returns information about the human task user interfaces in your account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListHumanTaskUisRequest.from_dict(body)
    return web.Response(status=200)


async def list_hyper_parameter_tuning_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_hyper_parameter_tuning_jobs

    Gets a list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobSummary.html\&quot;&gt;HyperParameterTuningJobSummary&lt;/a&gt; objects that describe the hyperparameter tuning jobs launched in your account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListHyperParameterTuningJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_image_versions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_image_versions

    Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListImageVersionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_images(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_images

    Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListImagesRequest.from_dict(body)
    return web.Response(status=200)


async def list_inference_experiments(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_inference_experiments

    Returns the list of all inference experiments.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListInferenceExperimentsRequest.from_dict(body)
    return web.Response(status=200)


async def list_inference_recommendations_job_steps(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_inference_recommendations_job_steps

    &lt;p&gt;Returns a list of the subtasks for an Inference Recommender job.&lt;/p&gt; &lt;p&gt;The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListInferenceRecommendationsJobStepsRequest.from_dict(body)
    return web.Response(status=200)


async def list_inference_recommendations_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_inference_recommendations_jobs

    Lists recommendation jobs that satisfy various filters.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListInferenceRecommendationsJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_labeling_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_labeling_jobs

    Gets a list of labeling jobs.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListLabelingJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_labeling_jobs_for_workteam(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_labeling_jobs_for_workteam

    Gets a list of labeling jobs assigned to a specified work team.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListLabelingJobsForWorkteamRequest.from_dict(body)
    return web.Response(status=200)


async def list_lineage_groups(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_lineage_groups

    A list of lineage groups shared with your Amazon Web Services account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html\&quot;&gt; Cross-Account Lineage Tracking &lt;/a&gt; in the &lt;i&gt;Amazon SageMaker Developer Guide&lt;/i&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListLineageGroupsRequest.from_dict(body)
    return web.Response(status=200)


async def list_model_bias_job_definitions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_model_bias_job_definitions

    Lists model bias jobs definitions that satisfy various filters.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelBiasJobDefinitionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_model_card_export_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_model_card_export_jobs

    List the export jobs for the Amazon SageMaker Model Card.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelCardExportJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_model_card_versions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_model_card_versions

    List existing versions of an Amazon SageMaker Model Card.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelCardVersionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_model_cards(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_model_cards

    List existing model cards.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelCardsRequest.from_dict(body)
    return web.Response(status=200)


async def list_model_explainability_job_definitions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_model_explainability_job_definitions

    Lists model explainability job definitions that satisfy various filters.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelExplainabilityJobDefinitionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_model_metadata(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_model_metadata

    Lists the domain, framework, task, and model name of standard machine learning models found in common model zoos.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelMetadataRequest.from_dict(body)
    return web.Response(status=200)


async def list_model_package_groups(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_model_package_groups

    Gets a list of the model groups in your Amazon Web Services account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelPackageGroupsInput.from_dict(body)
    return web.Response(status=200)


async def list_model_packages(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_model_packages

    Lists the model packages that have been created.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelPackagesInput.from_dict(body)
    return web.Response(status=200)


async def list_model_quality_job_definitions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_model_quality_job_definitions

    Gets a list of model quality monitoring job definitions in your account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelQualityJobDefinitionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_models(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_models

    Lists models created with the &lt;code&gt;CreateModel&lt;/code&gt; API.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListModelsInput.from_dict(body)
    return web.Response(status=200)


async def list_monitoring_alert_history(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_monitoring_alert_history

    Gets a list of past alerts in a model monitoring schedule.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListMonitoringAlertHistoryRequest.from_dict(body)
    return web.Response(status=200)


async def list_monitoring_alerts(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_monitoring_alerts

    Gets the alerts for a single monitoring schedule.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListMonitoringAlertsRequest.from_dict(body)
    return web.Response(status=200)


async def list_monitoring_executions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_monitoring_executions

    Returns list of all monitoring job executions.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListMonitoringExecutionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_monitoring_schedules(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_monitoring_schedules

    Returns list of all monitoring schedules.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListMonitoringSchedulesRequest.from_dict(body)
    return web.Response(status=200)


async def list_notebook_instance_lifecycle_configs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_notebook_instance_lifecycle_configs

    Lists notebook instance lifestyle configurations created with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html\&quot;&gt;CreateNotebookInstanceLifecycleConfig&lt;/a&gt; API.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListNotebookInstanceLifecycleConfigsInput.from_dict(body)
    return web.Response(status=200)


async def list_notebook_instances(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_notebook_instances

    Returns a list of the SageMaker notebook instances in the requester&#39;s account in an Amazon Web Services Region. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListNotebookInstancesInput.from_dict(body)
    return web.Response(status=200)


async def list_pipeline_execution_steps(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_pipeline_execution_steps

    Gets a list of &lt;code&gt;PipeLineExecutionStep&lt;/code&gt; objects.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListPipelineExecutionStepsRequest.from_dict(body)
    return web.Response(status=200)


async def list_pipeline_executions(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_pipeline_executions

    Gets a list of the pipeline executions.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListPipelineExecutionsRequest.from_dict(body)
    return web.Response(status=200)


async def list_pipeline_parameters_for_execution(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_pipeline_parameters_for_execution

    Gets a list of parameters for a pipeline execution.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListPipelineParametersForExecutionRequest.from_dict(body)
    return web.Response(status=200)


async def list_pipelines(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_pipelines

    Gets a list of pipelines.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListPipelinesRequest.from_dict(body)
    return web.Response(status=200)


async def list_processing_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_processing_jobs

    Lists processing jobs that satisfy various filters.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListProcessingJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_projects(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_projects

    Gets a list of the projects in an Amazon Web Services account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListProjectsInput.from_dict(body)
    return web.Response(status=200)


async def list_resource_catalogs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_resource_catalogs

     Lists Amazon SageMaker Catalogs based on given filters and orders. The maximum number of &lt;code&gt;ResourceCatalog&lt;/code&gt;s viewable is 1000. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListResourceCatalogsRequest.from_dict(body)
    return web.Response(status=200)


async def list_spaces(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_spaces

    Lists spaces.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListSpacesRequest.from_dict(body)
    return web.Response(status=200)


async def list_stage_devices(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_stage_devices

    Lists devices allocated to the stage, containing detailed device information and deployment status.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListStageDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def list_studio_lifecycle_configs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_studio_lifecycle_configs

    Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListStudioLifecycleConfigsRequest.from_dict(body)
    return web.Response(status=200)


async def list_subscribed_workteams(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_subscribed_workteams

    Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the &lt;code&gt;NameContains&lt;/code&gt; parameter.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListSubscribedWorkteamsRequest.from_dict(body)
    return web.Response(status=200)


async def list_tags(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_tags

    Returns the tags for the specified SageMaker resource.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListTagsInput.from_dict(body)
    return web.Response(status=200)


async def list_training_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_training_jobs

    &lt;p&gt;Lists training jobs.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When &lt;code&gt;StatusEquals&lt;/code&gt; and &lt;code&gt;MaxResults&lt;/code&gt; are set at the same time, the &lt;code&gt;MaxResults&lt;/code&gt; number of training jobs are first retrieved ignoring the &lt;code&gt;StatusEquals&lt;/code&gt; parameter and then they are filtered by the &lt;code&gt;StatusEquals&lt;/code&gt; parameter, which is returned as a response.&lt;/p&gt; &lt;p&gt;For example, if &lt;code&gt;ListTrainingJobs&lt;/code&gt; is invoked with the following parameters:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ ... MaxResults: 100, StatusEquals: InProgress ... }&lt;/code&gt; &lt;/p&gt; &lt;p&gt;First, 100 trainings jobs with any status, including those other than &lt;code&gt;InProgress&lt;/code&gt;, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of &lt;code&gt;InProgress&lt;/code&gt; are returned.&lt;/p&gt; &lt;p&gt;You can quickly test the API using the following Amazon Web Services CLI code.&lt;/p&gt; &lt;p&gt; &lt;code&gt;aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress&lt;/code&gt; &lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListTrainingJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_training_jobs_for_hyper_parameter_tuning_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_training_jobs_for_hyper_parameter_tuning_job

    Gets a list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html\&quot;&gt;TrainingJobSummary&lt;/a&gt; objects that describe the training jobs that a hyperparameter tuning job launched.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListTrainingJobsForHyperParameterTuningJobRequest.from_dict(body)
    return web.Response(status=200)


async def list_transform_jobs(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_transform_jobs

    Lists transform jobs.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListTransformJobsRequest.from_dict(body)
    return web.Response(status=200)


async def list_trial_components(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_trial_components

    &lt;p&gt;Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExperimentName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceArn&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TrialName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListTrialComponentsRequest.from_dict(body)
    return web.Response(status=200)


async def list_trials(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_trials

    Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListTrialsRequest.from_dict(body)
    return web.Response(status=200)


async def list_user_profiles(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_user_profiles

    Lists user profiles.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListUserProfilesRequest.from_dict(body)
    return web.Response(status=200)


async def list_workforces(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_workforces

    Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only have one private workforce per Amazon Web Services Region.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListWorkforcesRequest.from_dict(body)
    return web.Response(status=200)


async def list_workteams(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """list_workteams

    Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the &lt;code&gt;NameContains&lt;/code&gt; parameter.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = ListWorkteamsRequest.from_dict(body)
    return web.Response(status=200)


async def put_model_package_group_policy(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """put_model_package_group_policy

    Adds a resouce policy to control access to a model group. For information about resoure policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html\&quot;&gt;Identity-based policies and resource-based policies&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide.&lt;/i&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = PutModelPackageGroupPolicyInput.from_dict(body)
    return web.Response(status=200)


async def query_lineage(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """query_lineage

    Use this action to inspect your lineage and discover relationships between entities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html\&quot;&gt; Querying Lineage Entities&lt;/a&gt; in the &lt;i&gt;Amazon SageMaker Developer Guide&lt;/i&gt;.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = QueryLineageRequest.from_dict(body)
    return web.Response(status=200)


async def register_devices(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """register_devices

    Register devices.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = RegisterDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def render_ui_template(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """render_ui_template

    Renders the UI template so that you can preview the worker&#39;s experience. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = RenderUiTemplateRequest.from_dict(body)
    return web.Response(status=200)


async def retry_pipeline_execution(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """retry_pipeline_execution

    Retry the execution of the pipeline.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = RetryPipelineExecutionRequest.from_dict(body)
    return web.Response(status=200)


async def search(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None, max_results=None, next_token=None) -> web.Response:
    """search

    &lt;p&gt;Finds SageMaker resources that match a search query. Matching resources are returned as a list of &lt;code&gt;SearchRecord&lt;/code&gt; objects in the response. You can sort the search results by any resource property in a ascending or descending order.&lt;/p&gt; &lt;p&gt;You can query against the following value types: numeric, text, Boolean, and timestamp.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Search API may provide access to otherwise restricted data. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html\&quot;&gt;Amazon SageMaker API Permissions: Actions, Permissions, and Resources Reference&lt;/a&gt; for more information.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str
    :param max_results: Pagination limit
    :type max_results: str
    :param next_token: Pagination token
    :type next_token: str

    """
    body = SearchRequest.from_dict(body)
    return web.Response(status=200)


async def send_pipeline_execution_step_failure(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """send_pipeline_execution_step_failure

    Notifies the pipeline that the execution of a callback step failed, along with a message describing why. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = SendPipelineExecutionStepFailureRequest.from_dict(body)
    return web.Response(status=200)


async def send_pipeline_execution_step_success(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """send_pipeline_execution_step_success

    Notifies the pipeline that the execution of a callback step succeeded and provides a list of the step&#39;s output parameters. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = SendPipelineExecutionStepSuccessRequest.from_dict(body)
    return web.Response(status=200)


async def start_edge_deployment_stage(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """start_edge_deployment_stage

    Starts a stage in an edge deployment plan.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StartEdgeDeploymentStageRequest.from_dict(body)
    return web.Response(status=200)


async def start_inference_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """start_inference_experiment

    Starts an inference experiment.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StartInferenceExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def start_monitoring_schedule(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """start_monitoring_schedule

    &lt;p&gt;Starts a previously stopped monitoring schedule.&lt;/p&gt; &lt;note&gt; &lt;p&gt;By default, when you successfully create a new schedule, the status of a monitoring schedule is &lt;code&gt;scheduled&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StartMonitoringScheduleRequest.from_dict(body)
    return web.Response(status=200)


async def start_notebook_instance(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """start_notebook_instance

    Launches an ML compute instance with the latest version of the libraries and attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the notebook instance status to &lt;code&gt;InService&lt;/code&gt;. A notebook instance&#39;s status must be &lt;code&gt;InService&lt;/code&gt; before you can connect to your Jupyter notebook. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StartNotebookInstanceInput.from_dict(body)
    return web.Response(status=200)


async def start_pipeline_execution(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """start_pipeline_execution

    Starts a pipeline execution.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StartPipelineExecutionRequest.from_dict(body)
    return web.Response(status=200)


async def stop_auto_ml_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_auto_ml_job

    A method for forcing a running job to shut down.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopAutoMLJobRequest.from_dict(body)
    return web.Response(status=200)


async def stop_compilation_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_compilation_job

    &lt;p&gt;Stops a model compilation job.&lt;/p&gt; &lt;p&gt; To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the job down. If the job hasn&#39;t stopped, it sends the SIGKILL signal.&lt;/p&gt; &lt;p&gt;When it receives a &lt;code&gt;StopCompilationJob&lt;/code&gt; request, Amazon SageMaker changes the &lt;code&gt;CompilationJobStatus&lt;/code&gt; of the job to &lt;code&gt;Stopping&lt;/code&gt;. After Amazon SageMaker stops the job, it sets the &lt;code&gt;CompilationJobStatus&lt;/code&gt; to &lt;code&gt;Stopped&lt;/code&gt;. &lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopCompilationJobRequest.from_dict(body)
    return web.Response(status=200)


async def stop_edge_deployment_stage(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_edge_deployment_stage

    Stops a stage in an edge deployment plan.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopEdgeDeploymentStageRequest.from_dict(body)
    return web.Response(status=200)


async def stop_edge_packaging_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_edge_packaging_job

    Request to stop an edge packaging job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopEdgePackagingJobRequest.from_dict(body)
    return web.Response(status=200)


async def stop_hyper_parameter_tuning_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_hyper_parameter_tuning_job

    &lt;p&gt;Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched.&lt;/p&gt; &lt;p&gt;All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the &lt;code&gt;Stopped&lt;/code&gt; state, it releases all reserved resources for the tuning job.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopHyperParameterTuningJobRequest.from_dict(body)
    return web.Response(status=200)


async def stop_inference_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_inference_experiment

    Stops an inference experiment.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopInferenceExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def stop_inference_recommendations_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_inference_recommendations_job

    Stops an Inference Recommender job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopInferenceRecommendationsJobRequest.from_dict(body)
    return web.Response(status=200)


async def stop_labeling_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_labeling_job

    Stops a running labeling job. A job that is stopped cannot be restarted. Any results obtained before the job is stopped are placed in the Amazon S3 output bucket.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopLabelingJobRequest.from_dict(body)
    return web.Response(status=200)


async def stop_monitoring_schedule(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_monitoring_schedule

    Stops a previously started monitoring schedule.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopMonitoringScheduleRequest.from_dict(body)
    return web.Response(status=200)


async def stop_notebook_instance(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_notebook_instance

    &lt;p&gt;Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call &lt;code&gt;StopNotebookInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To access data on the ML storage volume for a notebook instance that has been terminated, call the &lt;code&gt;StartNotebookInstance&lt;/code&gt; API. &lt;code&gt;StartNotebookInstance&lt;/code&gt; launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work. &lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopNotebookInstanceInput.from_dict(body)
    return web.Response(status=200)


async def stop_pipeline_execution(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_pipeline_execution

    &lt;p&gt;Stops a pipeline execution.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Callback Step&lt;/b&gt; &lt;/p&gt; &lt;p&gt;A pipeline execution won&#39;t stop while a callback step is running. When you call &lt;code&gt;StopPipelineExecution&lt;/code&gt; on a pipeline execution with a running callback step, SageMaker Pipelines sends an additional Amazon SQS message to the specified SQS queue. The body of the SQS message contains a \&quot;Status\&quot; field which is set to \&quot;Stopping\&quot;.&lt;/p&gt; &lt;p&gt;You should add logic to your Amazon SQS message consumer to take any needed action (for example, resource cleanup) upon receipt of the message followed by a call to &lt;code&gt;SendPipelineExecutionStepSuccess&lt;/code&gt; or &lt;code&gt;SendPipelineExecutionStepFailure&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Lambda Step&lt;/b&gt; &lt;/p&gt; &lt;p&gt;A pipeline execution can&#39;t be stopped while a lambda step is running because the Lambda function invoked by the lambda step can&#39;t be stopped. If you attempt to stop the execution while the Lambda function is running, the pipeline waits for the Lambda function to finish or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function finishes, the pipeline execution status is &lt;code&gt;Stopped&lt;/code&gt;. If the timeout is hit the pipeline execution status is &lt;code&gt;Failed&lt;/code&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopPipelineExecutionRequest.from_dict(body)
    return web.Response(status=200)


async def stop_processing_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_processing_job

    Stops a processing job.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopProcessingJobRequest.from_dict(body)
    return web.Response(status=200)


async def stop_training_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_training_job

    &lt;p&gt;Stops a training job. To stop a job, SageMaker sends the algorithm the &lt;code&gt;SIGTERM&lt;/code&gt; signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts, so the results of the training is not lost. &lt;/p&gt; &lt;p&gt;When it receives a &lt;code&gt;StopTrainingJob&lt;/code&gt; request, SageMaker changes the status of the job to &lt;code&gt;Stopping&lt;/code&gt;. After SageMaker stops the job, it sets the status to &lt;code&gt;Stopped&lt;/code&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopTrainingJobRequest.from_dict(body)
    return web.Response(status=200)


async def stop_transform_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """stop_transform_job

    &lt;p&gt;Stops a batch transform job.&lt;/p&gt; &lt;p&gt;When Amazon SageMaker receives a &lt;code&gt;StopTransformJob&lt;/code&gt; request, the status of the job changes to &lt;code&gt;Stopping&lt;/code&gt;. After Amazon SageMaker stops the job, the status is set to &lt;code&gt;Stopped&lt;/code&gt;. When you stop a batch transform job before it is completed, Amazon SageMaker doesn&#39;t store the job&#39;s output in Amazon S3.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = StopTransformJobRequest.from_dict(body)
    return web.Response(status=200)


async def update_action(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_action

    Updates an action.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateActionRequest.from_dict(body)
    return web.Response(status=200)


async def update_app_image_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_app_image_config

    Updates the properties of an AppImageConfig.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateAppImageConfigRequest.from_dict(body)
    return web.Response(status=200)


async def update_artifact(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_artifact

    Updates an artifact.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateArtifactRequest.from_dict(body)
    return web.Response(status=200)


async def update_code_repository(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_code_repository

    Updates the specified Git repository with the specified values.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateCodeRepositoryInput.from_dict(body)
    return web.Response(status=200)


async def update_context(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_context

    Updates a context.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateContextRequest.from_dict(body)
    return web.Response(status=200)


async def update_device_fleet(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_device_fleet

    Updates a fleet of devices.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateDeviceFleetRequest.from_dict(body)
    return web.Response(status=200)


async def update_devices(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_devices

    Updates one or more devices in a fleet.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateDevicesRequest.from_dict(body)
    return web.Response(status=200)


async def update_domain(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_domain

    Updates the default settings for new user profiles in the domain.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateDomainRequest.from_dict(body)
    return web.Response(status=200)


async def update_endpoint(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_endpoint

    &lt;p&gt;Deploys the new &lt;code&gt;EndpointConfig&lt;/code&gt; specified in the request, switches to using newly created endpoint, and then deletes resources provisioned for the endpoint using the previous &lt;code&gt;EndpointConfig&lt;/code&gt; (there is no availability loss). &lt;/p&gt; &lt;p&gt;When SageMaker receives the request, it sets the endpoint status to &lt;code&gt;Updating&lt;/code&gt;. After updating the endpoint, it sets the status to &lt;code&gt;InService&lt;/code&gt;. To check the status of an endpoint, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html\&quot;&gt;DescribeEndpoint&lt;/a&gt; API. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You must not delete an &lt;code&gt;EndpointConfig&lt;/code&gt; in use by an endpoint that is live or while the &lt;code&gt;UpdateEndpoint&lt;/code&gt; or &lt;code&gt;CreateEndpoint&lt;/code&gt; operations are being performed on the endpoint. To update an endpoint, you must create a new &lt;code&gt;EndpointConfig&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you delete the &lt;code&gt;EndpointConfig&lt;/code&gt; of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateEndpointInput.from_dict(body)
    return web.Response(status=200)


async def update_endpoint_weights_and_capacities(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_endpoint_weights_and_capacities

    Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to &lt;code&gt;Updating&lt;/code&gt;. After updating the endpoint, it sets the status to &lt;code&gt;InService&lt;/code&gt;. To check the status of an endpoint, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html\&quot;&gt;DescribeEndpoint&lt;/a&gt; API. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateEndpointWeightsAndCapacitiesInput.from_dict(body)
    return web.Response(status=200)


async def update_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_experiment

    Adds, updates, or removes the description of an experiment. Updates the display name of an experiment.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def update_feature_group(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_feature_group

    &lt;p&gt;Updates the feature group by either adding features or updating the online store configuration. Use one of the following request parameters at a time while using the &lt;code&gt;UpdateFeatureGroup&lt;/code&gt; API.&lt;/p&gt; &lt;p&gt;You can add features for your feature group using the &lt;code&gt;FeatureAdditions&lt;/code&gt; request parameter. Features cannot be removed from a feature group.&lt;/p&gt; &lt;p&gt;You can update the online store configuration by using the &lt;code&gt;OnlineStoreConfig&lt;/code&gt; request parameter. If a &lt;code&gt;TtlDuration&lt;/code&gt; is specified, the default &lt;code&gt;TtlDuration&lt;/code&gt; applies for all records added to the feature group &lt;i&gt;after the feature group is updated&lt;/i&gt;. If a record level &lt;code&gt;TtlDuration&lt;/code&gt; exists from using the &lt;code&gt;PutRecord&lt;/code&gt; API, the record level &lt;code&gt;TtlDuration&lt;/code&gt; applies to that record instead of the default &lt;code&gt;TtlDuration&lt;/code&gt;.&lt;/p&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateFeatureGroupRequest.from_dict(body)
    return web.Response(status=200)


async def update_feature_metadata(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_feature_metadata

    Updates the description and parameters of the feature group.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateFeatureMetadataRequest.from_dict(body)
    return web.Response(status=200)


async def update_hub(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_hub

    &lt;p&gt;Update a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateHubRequest.from_dict(body)
    return web.Response(status=200)


async def update_image(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_image

    Updates the properties of a SageMaker image. To change the image&#39;s tags, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html\&quot;&gt;AddTags&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteTags.html\&quot;&gt;DeleteTags&lt;/a&gt; APIs.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateImageRequest.from_dict(body)
    return web.Response(status=200)


async def update_image_version(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_image_version

    Updates the properties of a SageMaker image version.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateImageVersionRequest.from_dict(body)
    return web.Response(status=200)


async def update_inference_experiment(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_inference_experiment

     Updates an inference experiment that you created. The status of the inference experiment has to be either &lt;code&gt;Created&lt;/code&gt;, &lt;code&gt;Running&lt;/code&gt;. For more information on the status of an inference experiment, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeInferenceExperiment.html\&quot;&gt;DescribeInferenceExperiment&lt;/a&gt;. 

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateInferenceExperimentRequest.from_dict(body)
    return web.Response(status=200)


async def update_model_card(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_model_card

    &lt;p&gt;Update an Amazon SageMaker Model Card.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You cannot update both model card content and model card status in a single call.&lt;/p&gt; &lt;/important&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateModelCardRequest.from_dict(body)
    return web.Response(status=200)


async def update_model_package(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_model_package

    Updates a versioned model.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateModelPackageInput.from_dict(body)
    return web.Response(status=200)


async def update_monitoring_alert(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_monitoring_alert

    Update the parameters of a model monitor alert.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateMonitoringAlertRequest.from_dict(body)
    return web.Response(status=200)


async def update_monitoring_schedule(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_monitoring_schedule

    Updates a previously created schedule.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateMonitoringScheduleRequest.from_dict(body)
    return web.Response(status=200)


async def update_notebook_instance(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_notebook_instance

    Updates a notebook instance. NotebookInstance updates include upgrading or downgrading the ML compute instance used for your notebook instance to accommodate changes in your workload requirements.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateNotebookInstanceInput.from_dict(body)
    return web.Response(status=200)


async def update_notebook_instance_lifecycle_config(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_notebook_instance_lifecycle_config

    Updates a notebook instance lifecycle configuration created with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html\&quot;&gt;CreateNotebookInstanceLifecycleConfig&lt;/a&gt; API.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateNotebookInstanceLifecycleConfigInput.from_dict(body)
    return web.Response(status=200)


async def update_pipeline(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_pipeline

    Updates a pipeline.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdatePipelineRequest.from_dict(body)
    return web.Response(status=200)


async def update_pipeline_execution(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_pipeline_execution

    Updates a pipeline execution.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdatePipelineExecutionRequest.from_dict(body)
    return web.Response(status=200)


async def update_project(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_project

    &lt;p&gt;Updates a machine learning (ML) project that is created from a template that sets up an ML pipeline from training to deploying an approved model.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must not update a project that is in use. If you update the &lt;code&gt;ServiceCatalogProvisioningUpdateDetails&lt;/code&gt; of a project that is active or being created, or updated, you may lose resources already created by the project.&lt;/p&gt; &lt;/note&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateProjectInput.from_dict(body)
    return web.Response(status=200)


async def update_space(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_space

    Updates the settings of a space.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateSpaceRequest.from_dict(body)
    return web.Response(status=200)


async def update_training_job(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_training_job

    Update a model training job to request a new Debugger profiling configuration or to change warm pool retention length.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateTrainingJobRequest.from_dict(body)
    return web.Response(status=200)


async def update_trial(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_trial

    Updates the display name of a trial.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateTrialRequest.from_dict(body)
    return web.Response(status=200)


async def update_trial_component(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_trial_component

    Updates one or more properties of a trial component.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateTrialComponentRequest.from_dict(body)
    return web.Response(status=200)


async def update_user_profile(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_user_profile

    Updates a user profile.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateUserProfileRequest.from_dict(body)
    return web.Response(status=200)


async def update_workforce(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_workforce

    &lt;p&gt;Use this operation to update your workforce. You can use this operation to require that workers use specific IP addresses to work on tasks and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.&lt;/p&gt; &lt;p&gt;The worker portal is now supported in VPC and public internet.&lt;/p&gt; &lt;p&gt; Use &lt;code&gt;SourceIpConfig&lt;/code&gt; to restrict worker access to tasks to a specific range of IP addresses. You specify allowed IP addresses by creating a list of up to ten &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;CIDRs&lt;/a&gt;. By default, a workforce isn&#39;t restricted to specific IP addresses. If you specify a range of IP addresses, workers who attempt to access tasks using any IP address outside the specified range are denied and get a &lt;code&gt;Not Found&lt;/code&gt; error message on the worker portal.&lt;/p&gt; &lt;p&gt;To restrict access to all the workers in public internet, add the &lt;code&gt;SourceIpConfig&lt;/code&gt; CIDR value as \&quot;10.0.0.0/16\&quot;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Use &lt;code&gt;OidcConfig&lt;/code&gt; to update the configuration of a workforce created using your own OIDC IdP. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can only update your OIDC IdP configuration when there are no work teams associated with your workforce. You can delete work teams using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html\&quot;&gt;DeleteWorkteam&lt;/a&gt; operation.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you can view details about your update workforce using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeWorkforce.html\&quot;&gt;DescribeWorkforce&lt;/a&gt; operation.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to private workforces.&lt;/p&gt; &lt;/important&gt;

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateWorkforceRequest.from_dict(body)
    return web.Response(status=200)


async def update_workteam(request: web.Request, x_amz_target, body, x_amz_content_sha256=None, x_amz_date=None, x_amz_algorithm=None, x_amz_credential=None, x_amz_security_token=None, x_amz_signature=None, x_amz_signed_headers=None) -> web.Response:
    """update_workteam

    Updates an existing work team with new member definitions or description.

    :param x_amz_target: 
    :type x_amz_target: str
    :param body: 
    :type body: dict | bytes
    :param x_amz_content_sha256: 
    :type x_amz_content_sha256: str
    :param x_amz_date: 
    :type x_amz_date: str
    :param x_amz_algorithm: 
    :type x_amz_algorithm: str
    :param x_amz_credential: 
    :type x_amz_credential: str
    :param x_amz_security_token: 
    :type x_amz_security_token: str
    :param x_amz_signature: 
    :type x_amz_signature: str
    :param x_amz_signed_headers: 
    :type x_amz_signed_headers: str

    """
    body = UpdateWorkteamRequest.from_dict(body)
    return web.Response(status=200)
