/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePipelineRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePipelineRequest::OAICreatePipelineRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePipelineRequest::OAICreatePipelineRequest() {
    this->initializeModel();
}

OAICreatePipelineRequest::~OAICreatePipelineRequest() {}

void OAICreatePipelineRequest::initializeModel() {

    m_pipeline_name_isSet = false;
    m_pipeline_name_isValid = false;

    m_pipeline_display_name_isSet = false;
    m_pipeline_display_name_isValid = false;

    m_pipeline_definition_isSet = false;
    m_pipeline_definition_isValid = false;

    m_pipeline_definition_s3_location_isSet = false;
    m_pipeline_definition_s3_location_isValid = false;

    m_pipeline_description_isSet = false;
    m_pipeline_description_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_parallelism_configuration_isSet = false;
    m_parallelism_configuration_isValid = false;
}

void OAICreatePipelineRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePipelineRequest::fromJsonObject(QJsonObject json) {

    m_pipeline_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_name, json[QString("PipelineName")]);
    m_pipeline_name_isSet = !json[QString("PipelineName")].isNull() && m_pipeline_name_isValid;

    m_pipeline_display_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_display_name, json[QString("PipelineDisplayName")]);
    m_pipeline_display_name_isSet = !json[QString("PipelineDisplayName")].isNull() && m_pipeline_display_name_isValid;

    m_pipeline_definition_isValid = ::OpenAPI::fromJsonValue(m_pipeline_definition, json[QString("PipelineDefinition")]);
    m_pipeline_definition_isSet = !json[QString("PipelineDefinition")].isNull() && m_pipeline_definition_isValid;

    m_pipeline_definition_s3_location_isValid = ::OpenAPI::fromJsonValue(m_pipeline_definition_s3_location, json[QString("PipelineDefinitionS3Location")]);
    m_pipeline_definition_s3_location_isSet = !json[QString("PipelineDefinitionS3Location")].isNull() && m_pipeline_definition_s3_location_isValid;

    m_pipeline_description_isValid = ::OpenAPI::fromJsonValue(m_pipeline_description, json[QString("PipelineDescription")]);
    m_pipeline_description_isSet = !json[QString("PipelineDescription")].isNull() && m_pipeline_description_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_parallelism_configuration_isValid = ::OpenAPI::fromJsonValue(m_parallelism_configuration, json[QString("ParallelismConfiguration")]);
    m_parallelism_configuration_isSet = !json[QString("ParallelismConfiguration")].isNull() && m_parallelism_configuration_isValid;
}

QString OAICreatePipelineRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePipelineRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_pipeline_name_isSet) {
        obj.insert(QString("PipelineName"), ::OpenAPI::toJsonValue(m_pipeline_name));
    }
    if (m_pipeline_display_name_isSet) {
        obj.insert(QString("PipelineDisplayName"), ::OpenAPI::toJsonValue(m_pipeline_display_name));
    }
    if (m_pipeline_definition_isSet) {
        obj.insert(QString("PipelineDefinition"), ::OpenAPI::toJsonValue(m_pipeline_definition));
    }
    if (m_pipeline_definition_s3_location.isSet()) {
        obj.insert(QString("PipelineDefinitionS3Location"), ::OpenAPI::toJsonValue(m_pipeline_definition_s3_location));
    }
    if (m_pipeline_description_isSet) {
        obj.insert(QString("PipelineDescription"), ::OpenAPI::toJsonValue(m_pipeline_description));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_parallelism_configuration.isSet()) {
        obj.insert(QString("ParallelismConfiguration"), ::OpenAPI::toJsonValue(m_parallelism_configuration));
    }
    return obj;
}

QString OAICreatePipelineRequest::getPipelineName() const {
    return m_pipeline_name;
}
void OAICreatePipelineRequest::setPipelineName(const QString &pipeline_name) {
    m_pipeline_name = pipeline_name;
    m_pipeline_name_isSet = true;
}

bool OAICreatePipelineRequest::is_pipeline_name_Set() const{
    return m_pipeline_name_isSet;
}

bool OAICreatePipelineRequest::is_pipeline_name_Valid() const{
    return m_pipeline_name_isValid;
}

QString OAICreatePipelineRequest::getPipelineDisplayName() const {
    return m_pipeline_display_name;
}
void OAICreatePipelineRequest::setPipelineDisplayName(const QString &pipeline_display_name) {
    m_pipeline_display_name = pipeline_display_name;
    m_pipeline_display_name_isSet = true;
}

bool OAICreatePipelineRequest::is_pipeline_display_name_Set() const{
    return m_pipeline_display_name_isSet;
}

bool OAICreatePipelineRequest::is_pipeline_display_name_Valid() const{
    return m_pipeline_display_name_isValid;
}

QString OAICreatePipelineRequest::getPipelineDefinition() const {
    return m_pipeline_definition;
}
void OAICreatePipelineRequest::setPipelineDefinition(const QString &pipeline_definition) {
    m_pipeline_definition = pipeline_definition;
    m_pipeline_definition_isSet = true;
}

bool OAICreatePipelineRequest::is_pipeline_definition_Set() const{
    return m_pipeline_definition_isSet;
}

bool OAICreatePipelineRequest::is_pipeline_definition_Valid() const{
    return m_pipeline_definition_isValid;
}

OAICreatePipelineRequest_PipelineDefinitionS3Location OAICreatePipelineRequest::getPipelineDefinitionS3Location() const {
    return m_pipeline_definition_s3_location;
}
void OAICreatePipelineRequest::setPipelineDefinitionS3Location(const OAICreatePipelineRequest_PipelineDefinitionS3Location &pipeline_definition_s3_location) {
    m_pipeline_definition_s3_location = pipeline_definition_s3_location;
    m_pipeline_definition_s3_location_isSet = true;
}

bool OAICreatePipelineRequest::is_pipeline_definition_s3_location_Set() const{
    return m_pipeline_definition_s3_location_isSet;
}

bool OAICreatePipelineRequest::is_pipeline_definition_s3_location_Valid() const{
    return m_pipeline_definition_s3_location_isValid;
}

QString OAICreatePipelineRequest::getPipelineDescription() const {
    return m_pipeline_description;
}
void OAICreatePipelineRequest::setPipelineDescription(const QString &pipeline_description) {
    m_pipeline_description = pipeline_description;
    m_pipeline_description_isSet = true;
}

bool OAICreatePipelineRequest::is_pipeline_description_Set() const{
    return m_pipeline_description_isSet;
}

bool OAICreatePipelineRequest::is_pipeline_description_Valid() const{
    return m_pipeline_description_isValid;
}

QString OAICreatePipelineRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreatePipelineRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreatePipelineRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreatePipelineRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAICreatePipelineRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreatePipelineRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreatePipelineRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreatePipelineRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAICreatePipelineRequest::getTags() const {
    return m_tags;
}
void OAICreatePipelineRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePipelineRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePipelineRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreatePipelineRequest_ParallelismConfiguration OAICreatePipelineRequest::getParallelismConfiguration() const {
    return m_parallelism_configuration;
}
void OAICreatePipelineRequest::setParallelismConfiguration(const OAICreatePipelineRequest_ParallelismConfiguration &parallelism_configuration) {
    m_parallelism_configuration = parallelism_configuration;
    m_parallelism_configuration_isSet = true;
}

bool OAICreatePipelineRequest::is_parallelism_configuration_Set() const{
    return m_parallelism_configuration_isSet;
}

bool OAICreatePipelineRequest::is_parallelism_configuration_Valid() const{
    return m_parallelism_configuration_isValid;
}

bool OAICreatePipelineRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pipeline_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_definition_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePipelineRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pipeline_name_isValid && m_client_request_token_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
