/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoMLJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoMLJobSummary::OAIAutoMLJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoMLJobSummary::OAIAutoMLJobSummary() {
    this->initializeModel();
}

OAIAutoMLJobSummary::~OAIAutoMLJobSummary() {}

void OAIAutoMLJobSummary::initializeModel() {

    m_auto_ml_job_name_isSet = false;
    m_auto_ml_job_name_isValid = false;

    m_auto_ml_job_arn_isSet = false;
    m_auto_ml_job_arn_isValid = false;

    m_auto_ml_job_status_isSet = false;
    m_auto_ml_job_status_isValid = false;

    m_auto_ml_job_secondary_status_isSet = false;
    m_auto_ml_job_secondary_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_partial_failure_reasons_isSet = false;
    m_partial_failure_reasons_isValid = false;
}

void OAIAutoMLJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoMLJobSummary::fromJsonObject(QJsonObject json) {

    m_auto_ml_job_name_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_name, json[QString("AutoMLJobName")]);
    m_auto_ml_job_name_isSet = !json[QString("AutoMLJobName")].isNull() && m_auto_ml_job_name_isValid;

    m_auto_ml_job_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_arn, json[QString("AutoMLJobArn")]);
    m_auto_ml_job_arn_isSet = !json[QString("AutoMLJobArn")].isNull() && m_auto_ml_job_arn_isValid;

    m_auto_ml_job_status_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_status, json[QString("AutoMLJobStatus")]);
    m_auto_ml_job_status_isSet = !json[QString("AutoMLJobStatus")].isNull() && m_auto_ml_job_status_isValid;

    m_auto_ml_job_secondary_status_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_secondary_status, json[QString("AutoMLJobSecondaryStatus")]);
    m_auto_ml_job_secondary_status_isSet = !json[QString("AutoMLJobSecondaryStatus")].isNull() && m_auto_ml_job_secondary_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_partial_failure_reasons_isValid = ::OpenAPI::fromJsonValue(m_partial_failure_reasons, json[QString("PartialFailureReasons")]);
    m_partial_failure_reasons_isSet = !json[QString("PartialFailureReasons")].isNull() && m_partial_failure_reasons_isValid;
}

QString OAIAutoMLJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoMLJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_ml_job_name_isSet) {
        obj.insert(QString("AutoMLJobName"), ::OpenAPI::toJsonValue(m_auto_ml_job_name));
    }
    if (m_auto_ml_job_arn_isSet) {
        obj.insert(QString("AutoMLJobArn"), ::OpenAPI::toJsonValue(m_auto_ml_job_arn));
    }
    if (m_auto_ml_job_status.isSet()) {
        obj.insert(QString("AutoMLJobStatus"), ::OpenAPI::toJsonValue(m_auto_ml_job_status));
    }
    if (m_auto_ml_job_secondary_status.isSet()) {
        obj.insert(QString("AutoMLJobSecondaryStatus"), ::OpenAPI::toJsonValue(m_auto_ml_job_secondary_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_partial_failure_reasons.isSet()) {
        obj.insert(QString("PartialFailureReasons"), ::OpenAPI::toJsonValue(m_partial_failure_reasons));
    }
    return obj;
}

QString OAIAutoMLJobSummary::getAutoMlJobName() const {
    return m_auto_ml_job_name;
}
void OAIAutoMLJobSummary::setAutoMlJobName(const QString &auto_ml_job_name) {
    m_auto_ml_job_name = auto_ml_job_name;
    m_auto_ml_job_name_isSet = true;
}

bool OAIAutoMLJobSummary::is_auto_ml_job_name_Set() const{
    return m_auto_ml_job_name_isSet;
}

bool OAIAutoMLJobSummary::is_auto_ml_job_name_Valid() const{
    return m_auto_ml_job_name_isValid;
}

QString OAIAutoMLJobSummary::getAutoMlJobArn() const {
    return m_auto_ml_job_arn;
}
void OAIAutoMLJobSummary::setAutoMlJobArn(const QString &auto_ml_job_arn) {
    m_auto_ml_job_arn = auto_ml_job_arn;
    m_auto_ml_job_arn_isSet = true;
}

bool OAIAutoMLJobSummary::is_auto_ml_job_arn_Set() const{
    return m_auto_ml_job_arn_isSet;
}

bool OAIAutoMLJobSummary::is_auto_ml_job_arn_Valid() const{
    return m_auto_ml_job_arn_isValid;
}

OAIAutoMLJobStatus OAIAutoMLJobSummary::getAutoMlJobStatus() const {
    return m_auto_ml_job_status;
}
void OAIAutoMLJobSummary::setAutoMlJobStatus(const OAIAutoMLJobStatus &auto_ml_job_status) {
    m_auto_ml_job_status = auto_ml_job_status;
    m_auto_ml_job_status_isSet = true;
}

bool OAIAutoMLJobSummary::is_auto_ml_job_status_Set() const{
    return m_auto_ml_job_status_isSet;
}

bool OAIAutoMLJobSummary::is_auto_ml_job_status_Valid() const{
    return m_auto_ml_job_status_isValid;
}

OAIAutoMLJobSecondaryStatus OAIAutoMLJobSummary::getAutoMlJobSecondaryStatus() const {
    return m_auto_ml_job_secondary_status;
}
void OAIAutoMLJobSummary::setAutoMlJobSecondaryStatus(const OAIAutoMLJobSecondaryStatus &auto_ml_job_secondary_status) {
    m_auto_ml_job_secondary_status = auto_ml_job_secondary_status;
    m_auto_ml_job_secondary_status_isSet = true;
}

bool OAIAutoMLJobSummary::is_auto_ml_job_secondary_status_Set() const{
    return m_auto_ml_job_secondary_status_isSet;
}

bool OAIAutoMLJobSummary::is_auto_ml_job_secondary_status_Valid() const{
    return m_auto_ml_job_secondary_status_isValid;
}

QDateTime OAIAutoMLJobSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIAutoMLJobSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAutoMLJobSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAutoMLJobSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIAutoMLJobSummary::getEndTime() const {
    return m_end_time;
}
void OAIAutoMLJobSummary::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAutoMLJobSummary::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAutoMLJobSummary::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIAutoMLJobSummary::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIAutoMLJobSummary::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIAutoMLJobSummary::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIAutoMLJobSummary::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIAutoMLJobSummary::getFailureReason() const {
    return m_failure_reason;
}
void OAIAutoMLJobSummary::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIAutoMLJobSummary::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIAutoMLJobSummary::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QList OAIAutoMLJobSummary::getPartialFailureReasons() const {
    return m_partial_failure_reasons;
}
void OAIAutoMLJobSummary::setPartialFailureReasons(const QList &partial_failure_reasons) {
    m_partial_failure_reasons = partial_failure_reasons;
    m_partial_failure_reasons_isSet = true;
}

bool OAIAutoMLJobSummary::is_partial_failure_reasons_Set() const{
    return m_partial_failure_reasons_isSet;
}

bool OAIAutoMLJobSummary::is_partial_failure_reasons_Valid() const{
    return m_partial_failure_reasons_isValid;
}

bool OAIAutoMLJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_ml_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_secondary_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_failure_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoMLJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_ml_job_name_isValid && m_auto_ml_job_arn_isValid && m_auto_ml_job_status_isValid && m_auto_ml_job_secondary_status_isValid && m_creation_time_isValid && m_last_modified_time_isValid && true;
}

} // namespace OpenAPI
