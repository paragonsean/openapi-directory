/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDebugRuleConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDebugRuleConfiguration::OAIDebugRuleConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDebugRuleConfiguration::OAIDebugRuleConfiguration() {
    this->initializeModel();
}

OAIDebugRuleConfiguration::~OAIDebugRuleConfiguration() {}

void OAIDebugRuleConfiguration::initializeModel() {

    m_rule_configuration_name_isSet = false;
    m_rule_configuration_name_isValid = false;

    m_local_path_isSet = false;
    m_local_path_isValid = false;

    m_s3_output_path_isSet = false;
    m_s3_output_path_isValid = false;

    m_rule_evaluator_image_isSet = false;
    m_rule_evaluator_image_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_volume_size_in_gb_isSet = false;
    m_volume_size_in_gb_isValid = false;

    m_rule_parameters_isSet = false;
    m_rule_parameters_isValid = false;
}

void OAIDebugRuleConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDebugRuleConfiguration::fromJsonObject(QJsonObject json) {

    m_rule_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_rule_configuration_name, json[QString("RuleConfigurationName")]);
    m_rule_configuration_name_isSet = !json[QString("RuleConfigurationName")].isNull() && m_rule_configuration_name_isValid;

    m_local_path_isValid = ::OpenAPI::fromJsonValue(m_local_path, json[QString("LocalPath")]);
    m_local_path_isSet = !json[QString("LocalPath")].isNull() && m_local_path_isValid;

    m_s3_output_path_isValid = ::OpenAPI::fromJsonValue(m_s3_output_path, json[QString("S3OutputPath")]);
    m_s3_output_path_isSet = !json[QString("S3OutputPath")].isNull() && m_s3_output_path_isValid;

    m_rule_evaluator_image_isValid = ::OpenAPI::fromJsonValue(m_rule_evaluator_image, json[QString("RuleEvaluatorImage")]);
    m_rule_evaluator_image_isSet = !json[QString("RuleEvaluatorImage")].isNull() && m_rule_evaluator_image_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_volume_size_in_gb_isValid = ::OpenAPI::fromJsonValue(m_volume_size_in_gb, json[QString("VolumeSizeInGB")]);
    m_volume_size_in_gb_isSet = !json[QString("VolumeSizeInGB")].isNull() && m_volume_size_in_gb_isValid;

    m_rule_parameters_isValid = ::OpenAPI::fromJsonValue(m_rule_parameters, json[QString("RuleParameters")]);
    m_rule_parameters_isSet = !json[QString("RuleParameters")].isNull() && m_rule_parameters_isValid;
}

QString OAIDebugRuleConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDebugRuleConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_configuration_name_isSet) {
        obj.insert(QString("RuleConfigurationName"), ::OpenAPI::toJsonValue(m_rule_configuration_name));
    }
    if (m_local_path_isSet) {
        obj.insert(QString("LocalPath"), ::OpenAPI::toJsonValue(m_local_path));
    }
    if (m_s3_output_path_isSet) {
        obj.insert(QString("S3OutputPath"), ::OpenAPI::toJsonValue(m_s3_output_path));
    }
    if (m_rule_evaluator_image_isSet) {
        obj.insert(QString("RuleEvaluatorImage"), ::OpenAPI::toJsonValue(m_rule_evaluator_image));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_volume_size_in_gb_isSet) {
        obj.insert(QString("VolumeSizeInGB"), ::OpenAPI::toJsonValue(m_volume_size_in_gb));
    }
    if (m_rule_parameters.isSet()) {
        obj.insert(QString("RuleParameters"), ::OpenAPI::toJsonValue(m_rule_parameters));
    }
    return obj;
}

QString OAIDebugRuleConfiguration::getRuleConfigurationName() const {
    return m_rule_configuration_name;
}
void OAIDebugRuleConfiguration::setRuleConfigurationName(const QString &rule_configuration_name) {
    m_rule_configuration_name = rule_configuration_name;
    m_rule_configuration_name_isSet = true;
}

bool OAIDebugRuleConfiguration::is_rule_configuration_name_Set() const{
    return m_rule_configuration_name_isSet;
}

bool OAIDebugRuleConfiguration::is_rule_configuration_name_Valid() const{
    return m_rule_configuration_name_isValid;
}

QString OAIDebugRuleConfiguration::getLocalPath() const {
    return m_local_path;
}
void OAIDebugRuleConfiguration::setLocalPath(const QString &local_path) {
    m_local_path = local_path;
    m_local_path_isSet = true;
}

bool OAIDebugRuleConfiguration::is_local_path_Set() const{
    return m_local_path_isSet;
}

bool OAIDebugRuleConfiguration::is_local_path_Valid() const{
    return m_local_path_isValid;
}

QString OAIDebugRuleConfiguration::getS3OutputPath() const {
    return m_s3_output_path;
}
void OAIDebugRuleConfiguration::setS3OutputPath(const QString &s3_output_path) {
    m_s3_output_path = s3_output_path;
    m_s3_output_path_isSet = true;
}

bool OAIDebugRuleConfiguration::is_s3_output_path_Set() const{
    return m_s3_output_path_isSet;
}

bool OAIDebugRuleConfiguration::is_s3_output_path_Valid() const{
    return m_s3_output_path_isValid;
}

QString OAIDebugRuleConfiguration::getRuleEvaluatorImage() const {
    return m_rule_evaluator_image;
}
void OAIDebugRuleConfiguration::setRuleEvaluatorImage(const QString &rule_evaluator_image) {
    m_rule_evaluator_image = rule_evaluator_image;
    m_rule_evaluator_image_isSet = true;
}

bool OAIDebugRuleConfiguration::is_rule_evaluator_image_Set() const{
    return m_rule_evaluator_image_isSet;
}

bool OAIDebugRuleConfiguration::is_rule_evaluator_image_Valid() const{
    return m_rule_evaluator_image_isValid;
}

OAIProcessingInstanceType OAIDebugRuleConfiguration::getInstanceType() const {
    return m_instance_type;
}
void OAIDebugRuleConfiguration::setInstanceType(const OAIProcessingInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIDebugRuleConfiguration::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIDebugRuleConfiguration::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

qint32 OAIDebugRuleConfiguration::getVolumeSizeInGb() const {
    return m_volume_size_in_gb;
}
void OAIDebugRuleConfiguration::setVolumeSizeInGb(const qint32 &volume_size_in_gb) {
    m_volume_size_in_gb = volume_size_in_gb;
    m_volume_size_in_gb_isSet = true;
}

bool OAIDebugRuleConfiguration::is_volume_size_in_gb_Set() const{
    return m_volume_size_in_gb_isSet;
}

bool OAIDebugRuleConfiguration::is_volume_size_in_gb_Valid() const{
    return m_volume_size_in_gb_isValid;
}

QMap OAIDebugRuleConfiguration::getRuleParameters() const {
    return m_rule_parameters;
}
void OAIDebugRuleConfiguration::setRuleParameters(const QMap &rule_parameters) {
    m_rule_parameters = rule_parameters;
    m_rule_parameters_isSet = true;
}

bool OAIDebugRuleConfiguration::is_rule_parameters_Set() const{
    return m_rule_parameters_isSet;
}

bool OAIDebugRuleConfiguration::is_rule_parameters_Valid() const{
    return m_rule_parameters_isValid;
}

bool OAIDebugRuleConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_output_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_evaluator_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDebugRuleConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_configuration_name_isValid && m_rule_evaluator_image_isValid && true;
}

} // namespace OpenAPI
