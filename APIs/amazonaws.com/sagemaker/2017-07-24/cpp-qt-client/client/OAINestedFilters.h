/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINestedFilters.h
 *
 * &lt;p&gt;A list of nested &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Filter.html\&quot;&gt;Filter&lt;/a&gt; objects. A resource must satisfy the conditions of all filters to be included in the results returned from the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;For example, to filter on a training job&#39;s &lt;code&gt;InputDataConfig&lt;/code&gt; property with a specific channel name and &lt;code&gt;S3Uri&lt;/code&gt; prefix, define the following filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&#39;{Name:\&quot;InputDataConfig.ChannelName\&quot;, \&quot;Operator\&quot;:\&quot;Equals\&quot;, \&quot;Value\&quot;:\&quot;train\&quot;}&#39;,&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&#39;{Name:\&quot;InputDataConfig.DataSource.S3DataSource.S3Uri\&quot;, \&quot;Operator\&quot;:\&quot;Contains\&quot;, \&quot;Value\&quot;:\&quot;mybucket/catdata\&quot;}&#39;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAINestedFilters_H
#define OAINestedFilters_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINestedFilters : public OAIObject {
public:
    OAINestedFilters();
    OAINestedFilters(QString json);
    ~OAINestedFilters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNestedPropertyName() const;
    void setNestedPropertyName(const QString &nested_property_name);
    bool is_nested_property_name_Set() const;
    bool is_nested_property_name_Valid() const;

    QList getFilters() const;
    void setFilters(const QList &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_nested_property_name;
    bool m_nested_property_name_isSet;
    bool m_nested_property_name_isValid;

    QList m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINestedFilters)

#endif // OAINestedFilters_H
