/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSource_FileSystemDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSource_FileSystemDataSource::OAIDataSource_FileSystemDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSource_FileSystemDataSource::OAIDataSource_FileSystemDataSource() {
    this->initializeModel();
}

OAIDataSource_FileSystemDataSource::~OAIDataSource_FileSystemDataSource() {}

void OAIDataSource_FileSystemDataSource::initializeModel() {

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_file_system_access_mode_isSet = false;
    m_file_system_access_mode_isValid = false;

    m_file_system_type_isSet = false;
    m_file_system_type_isValid = false;

    m_directory_path_isSet = false;
    m_directory_path_isValid = false;
}

void OAIDataSource_FileSystemDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSource_FileSystemDataSource::fromJsonObject(QJsonObject json) {

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_file_system_access_mode_isValid = ::OpenAPI::fromJsonValue(m_file_system_access_mode, json[QString("FileSystemAccessMode")]);
    m_file_system_access_mode_isSet = !json[QString("FileSystemAccessMode")].isNull() && m_file_system_access_mode_isValid;

    m_file_system_type_isValid = ::OpenAPI::fromJsonValue(m_file_system_type, json[QString("FileSystemType")]);
    m_file_system_type_isSet = !json[QString("FileSystemType")].isNull() && m_file_system_type_isValid;

    m_directory_path_isValid = ::OpenAPI::fromJsonValue(m_directory_path, json[QString("DirectoryPath")]);
    m_directory_path_isSet = !json[QString("DirectoryPath")].isNull() && m_directory_path_isValid;
}

QString OAIDataSource_FileSystemDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSource_FileSystemDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_file_system_access_mode.isSet()) {
        obj.insert(QString("FileSystemAccessMode"), ::OpenAPI::toJsonValue(m_file_system_access_mode));
    }
    if (m_file_system_type.isSet()) {
        obj.insert(QString("FileSystemType"), ::OpenAPI::toJsonValue(m_file_system_type));
    }
    if (m_directory_path_isSet) {
        obj.insert(QString("DirectoryPath"), ::OpenAPI::toJsonValue(m_directory_path));
    }
    return obj;
}

QString OAIDataSource_FileSystemDataSource::getFileSystemId() const {
    return m_file_system_id;
}
void OAIDataSource_FileSystemDataSource::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIDataSource_FileSystemDataSource::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIDataSource_FileSystemDataSource::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

OAIFileSystemAccessMode OAIDataSource_FileSystemDataSource::getFileSystemAccessMode() const {
    return m_file_system_access_mode;
}
void OAIDataSource_FileSystemDataSource::setFileSystemAccessMode(const OAIFileSystemAccessMode &file_system_access_mode) {
    m_file_system_access_mode = file_system_access_mode;
    m_file_system_access_mode_isSet = true;
}

bool OAIDataSource_FileSystemDataSource::is_file_system_access_mode_Set() const{
    return m_file_system_access_mode_isSet;
}

bool OAIDataSource_FileSystemDataSource::is_file_system_access_mode_Valid() const{
    return m_file_system_access_mode_isValid;
}

OAIFileSystemType OAIDataSource_FileSystemDataSource::getFileSystemType() const {
    return m_file_system_type;
}
void OAIDataSource_FileSystemDataSource::setFileSystemType(const OAIFileSystemType &file_system_type) {
    m_file_system_type = file_system_type;
    m_file_system_type_isSet = true;
}

bool OAIDataSource_FileSystemDataSource::is_file_system_type_Set() const{
    return m_file_system_type_isSet;
}

bool OAIDataSource_FileSystemDataSource::is_file_system_type_Valid() const{
    return m_file_system_type_isValid;
}

QString OAIDataSource_FileSystemDataSource::getDirectoryPath() const {
    return m_directory_path;
}
void OAIDataSource_FileSystemDataSource::setDirectoryPath(const QString &directory_path) {
    m_directory_path = directory_path;
    m_directory_path_isSet = true;
}

bool OAIDataSource_FileSystemDataSource::is_directory_path_Set() const{
    return m_directory_path_isSet;
}

bool OAIDataSource_FileSystemDataSource::is_directory_path_Valid() const{
    return m_directory_path_isValid;
}

bool OAIDataSource_FileSystemDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_access_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSource_FileSystemDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_id_isValid && m_file_system_access_mode_isValid && m_file_system_type_isValid && m_directory_path_isValid && true;
}

} // namespace OpenAPI
