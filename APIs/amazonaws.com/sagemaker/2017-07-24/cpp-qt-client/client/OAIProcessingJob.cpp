/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessingJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessingJob::OAIProcessingJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessingJob::OAIProcessingJob() {
    this->initializeModel();
}

OAIProcessingJob::~OAIProcessingJob() {}

void OAIProcessingJob::initializeModel() {

    m_processing_inputs_isSet = false;
    m_processing_inputs_isValid = false;

    m_processing_output_config_isSet = false;
    m_processing_output_config_isValid = false;

    m_processing_job_name_isSet = false;
    m_processing_job_name_isValid = false;

    m_processing_resources_isSet = false;
    m_processing_resources_isValid = false;

    m_stopping_condition_isSet = false;
    m_stopping_condition_isValid = false;

    m_app_specification_isSet = false;
    m_app_specification_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_experiment_config_isSet = false;
    m_experiment_config_isValid = false;

    m_processing_job_arn_isSet = false;
    m_processing_job_arn_isValid = false;

    m_processing_job_status_isSet = false;
    m_processing_job_status_isValid = false;

    m_exit_message_isSet = false;
    m_exit_message_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_processing_end_time_isSet = false;
    m_processing_end_time_isValid = false;

    m_processing_start_time_isSet = false;
    m_processing_start_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_monitoring_schedule_arn_isSet = false;
    m_monitoring_schedule_arn_isValid = false;

    m_auto_ml_job_arn_isSet = false;
    m_auto_ml_job_arn_isValid = false;

    m_training_job_arn_isSet = false;
    m_training_job_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIProcessingJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessingJob::fromJsonObject(QJsonObject json) {

    m_processing_inputs_isValid = ::OpenAPI::fromJsonValue(m_processing_inputs, json[QString("ProcessingInputs")]);
    m_processing_inputs_isSet = !json[QString("ProcessingInputs")].isNull() && m_processing_inputs_isValid;

    m_processing_output_config_isValid = ::OpenAPI::fromJsonValue(m_processing_output_config, json[QString("ProcessingOutputConfig")]);
    m_processing_output_config_isSet = !json[QString("ProcessingOutputConfig")].isNull() && m_processing_output_config_isValid;

    m_processing_job_name_isValid = ::OpenAPI::fromJsonValue(m_processing_job_name, json[QString("ProcessingJobName")]);
    m_processing_job_name_isSet = !json[QString("ProcessingJobName")].isNull() && m_processing_job_name_isValid;

    m_processing_resources_isValid = ::OpenAPI::fromJsonValue(m_processing_resources, json[QString("ProcessingResources")]);
    m_processing_resources_isSet = !json[QString("ProcessingResources")].isNull() && m_processing_resources_isValid;

    m_stopping_condition_isValid = ::OpenAPI::fromJsonValue(m_stopping_condition, json[QString("StoppingCondition")]);
    m_stopping_condition_isSet = !json[QString("StoppingCondition")].isNull() && m_stopping_condition_isValid;

    m_app_specification_isValid = ::OpenAPI::fromJsonValue(m_app_specification, json[QString("AppSpecification")]);
    m_app_specification_isSet = !json[QString("AppSpecification")].isNull() && m_app_specification_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("NetworkConfig")]);
    m_network_config_isSet = !json[QString("NetworkConfig")].isNull() && m_network_config_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_experiment_config_isValid = ::OpenAPI::fromJsonValue(m_experiment_config, json[QString("ExperimentConfig")]);
    m_experiment_config_isSet = !json[QString("ExperimentConfig")].isNull() && m_experiment_config_isValid;

    m_processing_job_arn_isValid = ::OpenAPI::fromJsonValue(m_processing_job_arn, json[QString("ProcessingJobArn")]);
    m_processing_job_arn_isSet = !json[QString("ProcessingJobArn")].isNull() && m_processing_job_arn_isValid;

    m_processing_job_status_isValid = ::OpenAPI::fromJsonValue(m_processing_job_status, json[QString("ProcessingJobStatus")]);
    m_processing_job_status_isSet = !json[QString("ProcessingJobStatus")].isNull() && m_processing_job_status_isValid;

    m_exit_message_isValid = ::OpenAPI::fromJsonValue(m_exit_message, json[QString("ExitMessage")]);
    m_exit_message_isSet = !json[QString("ExitMessage")].isNull() && m_exit_message_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_processing_end_time_isValid = ::OpenAPI::fromJsonValue(m_processing_end_time, json[QString("ProcessingEndTime")]);
    m_processing_end_time_isSet = !json[QString("ProcessingEndTime")].isNull() && m_processing_end_time_isValid;

    m_processing_start_time_isValid = ::OpenAPI::fromJsonValue(m_processing_start_time, json[QString("ProcessingStartTime")]);
    m_processing_start_time_isSet = !json[QString("ProcessingStartTime")].isNull() && m_processing_start_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_monitoring_schedule_arn_isValid = ::OpenAPI::fromJsonValue(m_monitoring_schedule_arn, json[QString("MonitoringScheduleArn")]);
    m_monitoring_schedule_arn_isSet = !json[QString("MonitoringScheduleArn")].isNull() && m_monitoring_schedule_arn_isValid;

    m_auto_ml_job_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_arn, json[QString("AutoMLJobArn")]);
    m_auto_ml_job_arn_isSet = !json[QString("AutoMLJobArn")].isNull() && m_auto_ml_job_arn_isValid;

    m_training_job_arn_isValid = ::OpenAPI::fromJsonValue(m_training_job_arn, json[QString("TrainingJobArn")]);
    m_training_job_arn_isSet = !json[QString("TrainingJobArn")].isNull() && m_training_job_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIProcessingJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessingJob::asJsonObject() const {
    QJsonObject obj;
    if (m_processing_inputs.isSet()) {
        obj.insert(QString("ProcessingInputs"), ::OpenAPI::toJsonValue(m_processing_inputs));
    }
    if (m_processing_output_config.isSet()) {
        obj.insert(QString("ProcessingOutputConfig"), ::OpenAPI::toJsonValue(m_processing_output_config));
    }
    if (m_processing_job_name_isSet) {
        obj.insert(QString("ProcessingJobName"), ::OpenAPI::toJsonValue(m_processing_job_name));
    }
    if (m_processing_resources.isSet()) {
        obj.insert(QString("ProcessingResources"), ::OpenAPI::toJsonValue(m_processing_resources));
    }
    if (m_stopping_condition.isSet()) {
        obj.insert(QString("StoppingCondition"), ::OpenAPI::toJsonValue(m_stopping_condition));
    }
    if (m_app_specification.isSet()) {
        obj.insert(QString("AppSpecification"), ::OpenAPI::toJsonValue(m_app_specification));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("NetworkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_experiment_config.isSet()) {
        obj.insert(QString("ExperimentConfig"), ::OpenAPI::toJsonValue(m_experiment_config));
    }
    if (m_processing_job_arn_isSet) {
        obj.insert(QString("ProcessingJobArn"), ::OpenAPI::toJsonValue(m_processing_job_arn));
    }
    if (m_processing_job_status.isSet()) {
        obj.insert(QString("ProcessingJobStatus"), ::OpenAPI::toJsonValue(m_processing_job_status));
    }
    if (m_exit_message_isSet) {
        obj.insert(QString("ExitMessage"), ::OpenAPI::toJsonValue(m_exit_message));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_processing_end_time_isSet) {
        obj.insert(QString("ProcessingEndTime"), ::OpenAPI::toJsonValue(m_processing_end_time));
    }
    if (m_processing_start_time_isSet) {
        obj.insert(QString("ProcessingStartTime"), ::OpenAPI::toJsonValue(m_processing_start_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_monitoring_schedule_arn_isSet) {
        obj.insert(QString("MonitoringScheduleArn"), ::OpenAPI::toJsonValue(m_monitoring_schedule_arn));
    }
    if (m_auto_ml_job_arn_isSet) {
        obj.insert(QString("AutoMLJobArn"), ::OpenAPI::toJsonValue(m_auto_ml_job_arn));
    }
    if (m_training_job_arn_isSet) {
        obj.insert(QString("TrainingJobArn"), ::OpenAPI::toJsonValue(m_training_job_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList OAIProcessingJob::getProcessingInputs() const {
    return m_processing_inputs;
}
void OAIProcessingJob::setProcessingInputs(const QList &processing_inputs) {
    m_processing_inputs = processing_inputs;
    m_processing_inputs_isSet = true;
}

bool OAIProcessingJob::is_processing_inputs_Set() const{
    return m_processing_inputs_isSet;
}

bool OAIProcessingJob::is_processing_inputs_Valid() const{
    return m_processing_inputs_isValid;
}

OAIProcessingOutputConfig OAIProcessingJob::getProcessingOutputConfig() const {
    return m_processing_output_config;
}
void OAIProcessingJob::setProcessingOutputConfig(const OAIProcessingOutputConfig &processing_output_config) {
    m_processing_output_config = processing_output_config;
    m_processing_output_config_isSet = true;
}

bool OAIProcessingJob::is_processing_output_config_Set() const{
    return m_processing_output_config_isSet;
}

bool OAIProcessingJob::is_processing_output_config_Valid() const{
    return m_processing_output_config_isValid;
}

QString OAIProcessingJob::getProcessingJobName() const {
    return m_processing_job_name;
}
void OAIProcessingJob::setProcessingJobName(const QString &processing_job_name) {
    m_processing_job_name = processing_job_name;
    m_processing_job_name_isSet = true;
}

bool OAIProcessingJob::is_processing_job_name_Set() const{
    return m_processing_job_name_isSet;
}

bool OAIProcessingJob::is_processing_job_name_Valid() const{
    return m_processing_job_name_isValid;
}

OAIProcessingResources OAIProcessingJob::getProcessingResources() const {
    return m_processing_resources;
}
void OAIProcessingJob::setProcessingResources(const OAIProcessingResources &processing_resources) {
    m_processing_resources = processing_resources;
    m_processing_resources_isSet = true;
}

bool OAIProcessingJob::is_processing_resources_Set() const{
    return m_processing_resources_isSet;
}

bool OAIProcessingJob::is_processing_resources_Valid() const{
    return m_processing_resources_isValid;
}

OAIProcessingStoppingCondition OAIProcessingJob::getStoppingCondition() const {
    return m_stopping_condition;
}
void OAIProcessingJob::setStoppingCondition(const OAIProcessingStoppingCondition &stopping_condition) {
    m_stopping_condition = stopping_condition;
    m_stopping_condition_isSet = true;
}

bool OAIProcessingJob::is_stopping_condition_Set() const{
    return m_stopping_condition_isSet;
}

bool OAIProcessingJob::is_stopping_condition_Valid() const{
    return m_stopping_condition_isValid;
}

OAIAppSpecification OAIProcessingJob::getAppSpecification() const {
    return m_app_specification;
}
void OAIProcessingJob::setAppSpecification(const OAIAppSpecification &app_specification) {
    m_app_specification = app_specification;
    m_app_specification_isSet = true;
}

bool OAIProcessingJob::is_app_specification_Set() const{
    return m_app_specification_isSet;
}

bool OAIProcessingJob::is_app_specification_Valid() const{
    return m_app_specification_isValid;
}

QMap OAIProcessingJob::getEnvironment() const {
    return m_environment;
}
void OAIProcessingJob::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIProcessingJob::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIProcessingJob::is_environment_Valid() const{
    return m_environment_isValid;
}

OAINetworkConfig OAIProcessingJob::getNetworkConfig() const {
    return m_network_config;
}
void OAIProcessingJob::setNetworkConfig(const OAINetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAIProcessingJob::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAIProcessingJob::is_network_config_Valid() const{
    return m_network_config_isValid;
}

QString OAIProcessingJob::getRoleArn() const {
    return m_role_arn;
}
void OAIProcessingJob::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIProcessingJob::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIProcessingJob::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIExperimentConfig OAIProcessingJob::getExperimentConfig() const {
    return m_experiment_config;
}
void OAIProcessingJob::setExperimentConfig(const OAIExperimentConfig &experiment_config) {
    m_experiment_config = experiment_config;
    m_experiment_config_isSet = true;
}

bool OAIProcessingJob::is_experiment_config_Set() const{
    return m_experiment_config_isSet;
}

bool OAIProcessingJob::is_experiment_config_Valid() const{
    return m_experiment_config_isValid;
}

QString OAIProcessingJob::getProcessingJobArn() const {
    return m_processing_job_arn;
}
void OAIProcessingJob::setProcessingJobArn(const QString &processing_job_arn) {
    m_processing_job_arn = processing_job_arn;
    m_processing_job_arn_isSet = true;
}

bool OAIProcessingJob::is_processing_job_arn_Set() const{
    return m_processing_job_arn_isSet;
}

bool OAIProcessingJob::is_processing_job_arn_Valid() const{
    return m_processing_job_arn_isValid;
}

OAIProcessingJobStatus OAIProcessingJob::getProcessingJobStatus() const {
    return m_processing_job_status;
}
void OAIProcessingJob::setProcessingJobStatus(const OAIProcessingJobStatus &processing_job_status) {
    m_processing_job_status = processing_job_status;
    m_processing_job_status_isSet = true;
}

bool OAIProcessingJob::is_processing_job_status_Set() const{
    return m_processing_job_status_isSet;
}

bool OAIProcessingJob::is_processing_job_status_Valid() const{
    return m_processing_job_status_isValid;
}

QString OAIProcessingJob::getExitMessage() const {
    return m_exit_message;
}
void OAIProcessingJob::setExitMessage(const QString &exit_message) {
    m_exit_message = exit_message;
    m_exit_message_isSet = true;
}

bool OAIProcessingJob::is_exit_message_Set() const{
    return m_exit_message_isSet;
}

bool OAIProcessingJob::is_exit_message_Valid() const{
    return m_exit_message_isValid;
}

QString OAIProcessingJob::getFailureReason() const {
    return m_failure_reason;
}
void OAIProcessingJob::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIProcessingJob::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIProcessingJob::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QDateTime OAIProcessingJob::getProcessingEndTime() const {
    return m_processing_end_time;
}
void OAIProcessingJob::setProcessingEndTime(const QDateTime &processing_end_time) {
    m_processing_end_time = processing_end_time;
    m_processing_end_time_isSet = true;
}

bool OAIProcessingJob::is_processing_end_time_Set() const{
    return m_processing_end_time_isSet;
}

bool OAIProcessingJob::is_processing_end_time_Valid() const{
    return m_processing_end_time_isValid;
}

QDateTime OAIProcessingJob::getProcessingStartTime() const {
    return m_processing_start_time;
}
void OAIProcessingJob::setProcessingStartTime(const QDateTime &processing_start_time) {
    m_processing_start_time = processing_start_time;
    m_processing_start_time_isSet = true;
}

bool OAIProcessingJob::is_processing_start_time_Set() const{
    return m_processing_start_time_isSet;
}

bool OAIProcessingJob::is_processing_start_time_Valid() const{
    return m_processing_start_time_isValid;
}

QDateTime OAIProcessingJob::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIProcessingJob::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIProcessingJob::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIProcessingJob::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QDateTime OAIProcessingJob::getCreationTime() const {
    return m_creation_time;
}
void OAIProcessingJob::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIProcessingJob::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIProcessingJob::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIProcessingJob::getMonitoringScheduleArn() const {
    return m_monitoring_schedule_arn;
}
void OAIProcessingJob::setMonitoringScheduleArn(const QString &monitoring_schedule_arn) {
    m_monitoring_schedule_arn = monitoring_schedule_arn;
    m_monitoring_schedule_arn_isSet = true;
}

bool OAIProcessingJob::is_monitoring_schedule_arn_Set() const{
    return m_monitoring_schedule_arn_isSet;
}

bool OAIProcessingJob::is_monitoring_schedule_arn_Valid() const{
    return m_monitoring_schedule_arn_isValid;
}

QString OAIProcessingJob::getAutoMlJobArn() const {
    return m_auto_ml_job_arn;
}
void OAIProcessingJob::setAutoMlJobArn(const QString &auto_ml_job_arn) {
    m_auto_ml_job_arn = auto_ml_job_arn;
    m_auto_ml_job_arn_isSet = true;
}

bool OAIProcessingJob::is_auto_ml_job_arn_Set() const{
    return m_auto_ml_job_arn_isSet;
}

bool OAIProcessingJob::is_auto_ml_job_arn_Valid() const{
    return m_auto_ml_job_arn_isValid;
}

QString OAIProcessingJob::getTrainingJobArn() const {
    return m_training_job_arn;
}
void OAIProcessingJob::setTrainingJobArn(const QString &training_job_arn) {
    m_training_job_arn = training_job_arn;
    m_training_job_arn_isSet = true;
}

bool OAIProcessingJob::is_training_job_arn_Set() const{
    return m_training_job_arn_isSet;
}

bool OAIProcessingJob::is_training_job_arn_Valid() const{
    return m_training_job_arn_isValid;
}

QList OAIProcessingJob::getTags() const {
    return m_tags;
}
void OAIProcessingJob::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProcessingJob::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProcessingJob::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIProcessingJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_processing_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_schedule_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessingJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
