/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineDefinitionS3Location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineDefinitionS3Location::OAIPipelineDefinitionS3Location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineDefinitionS3Location::OAIPipelineDefinitionS3Location() {
    this->initializeModel();
}

OAIPipelineDefinitionS3Location::~OAIPipelineDefinitionS3Location() {}

void OAIPipelineDefinitionS3Location::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_object_key_isSet = false;
    m_object_key_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIPipelineDefinitionS3Location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineDefinitionS3Location::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_object_key_isValid = ::OpenAPI::fromJsonValue(m_object_key, json[QString("ObjectKey")]);
    m_object_key_isSet = !json[QString("ObjectKey")].isNull() && m_object_key_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;
}

QString OAIPipelineDefinitionS3Location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineDefinitionS3Location::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_object_key_isSet) {
        obj.insert(QString("ObjectKey"), ::OpenAPI::toJsonValue(m_object_key));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIPipelineDefinitionS3Location::getBucket() const {
    return m_bucket;
}
void OAIPipelineDefinitionS3Location::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIPipelineDefinitionS3Location::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIPipelineDefinitionS3Location::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIPipelineDefinitionS3Location::getObjectKey() const {
    return m_object_key;
}
void OAIPipelineDefinitionS3Location::setObjectKey(const QString &object_key) {
    m_object_key = object_key;
    m_object_key_isSet = true;
}

bool OAIPipelineDefinitionS3Location::is_object_key_Set() const{
    return m_object_key_isSet;
}

bool OAIPipelineDefinitionS3Location::is_object_key_Valid() const{
    return m_object_key_isValid;
}

QString OAIPipelineDefinitionS3Location::getVersionId() const {
    return m_version_id;
}
void OAIPipelineDefinitionS3Location::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIPipelineDefinitionS3Location::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIPipelineDefinitionS3Location::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIPipelineDefinitionS3Location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineDefinitionS3Location::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_object_key_isValid && true;
}

} // namespace OpenAPI
