/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeFeatureGroupResponse_OfflineStoreConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeFeatureGroupResponse_OfflineStoreConfig::OAIDescribeFeatureGroupResponse_OfflineStoreConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeFeatureGroupResponse_OfflineStoreConfig::OAIDescribeFeatureGroupResponse_OfflineStoreConfig() {
    this->initializeModel();
}

OAIDescribeFeatureGroupResponse_OfflineStoreConfig::~OAIDescribeFeatureGroupResponse_OfflineStoreConfig() {}

void OAIDescribeFeatureGroupResponse_OfflineStoreConfig::initializeModel() {

    m_s3_storage_config_isSet = false;
    m_s3_storage_config_isValid = false;

    m_disable_glue_table_creation_isSet = false;
    m_disable_glue_table_creation_isValid = false;

    m_data_catalog_config_isSet = false;
    m_data_catalog_config_isValid = false;

    m_table_format_isSet = false;
    m_table_format_isValid = false;
}

void OAIDescribeFeatureGroupResponse_OfflineStoreConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeFeatureGroupResponse_OfflineStoreConfig::fromJsonObject(QJsonObject json) {

    m_s3_storage_config_isValid = ::OpenAPI::fromJsonValue(m_s3_storage_config, json[QString("S3StorageConfig")]);
    m_s3_storage_config_isSet = !json[QString("S3StorageConfig")].isNull() && m_s3_storage_config_isValid;

    m_disable_glue_table_creation_isValid = ::OpenAPI::fromJsonValue(m_disable_glue_table_creation, json[QString("DisableGlueTableCreation")]);
    m_disable_glue_table_creation_isSet = !json[QString("DisableGlueTableCreation")].isNull() && m_disable_glue_table_creation_isValid;

    m_data_catalog_config_isValid = ::OpenAPI::fromJsonValue(m_data_catalog_config, json[QString("DataCatalogConfig")]);
    m_data_catalog_config_isSet = !json[QString("DataCatalogConfig")].isNull() && m_data_catalog_config_isValid;

    m_table_format_isValid = ::OpenAPI::fromJsonValue(m_table_format, json[QString("TableFormat")]);
    m_table_format_isSet = !json[QString("TableFormat")].isNull() && m_table_format_isValid;
}

QString OAIDescribeFeatureGroupResponse_OfflineStoreConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeFeatureGroupResponse_OfflineStoreConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_storage_config.isSet()) {
        obj.insert(QString("S3StorageConfig"), ::OpenAPI::toJsonValue(m_s3_storage_config));
    }
    if (m_disable_glue_table_creation_isSet) {
        obj.insert(QString("DisableGlueTableCreation"), ::OpenAPI::toJsonValue(m_disable_glue_table_creation));
    }
    if (m_data_catalog_config.isSet()) {
        obj.insert(QString("DataCatalogConfig"), ::OpenAPI::toJsonValue(m_data_catalog_config));
    }
    if (m_table_format.isSet()) {
        obj.insert(QString("TableFormat"), ::OpenAPI::toJsonValue(m_table_format));
    }
    return obj;
}

OAIOfflineStoreConfig_S3StorageConfig OAIDescribeFeatureGroupResponse_OfflineStoreConfig::getS3StorageConfig() const {
    return m_s3_storage_config;
}
void OAIDescribeFeatureGroupResponse_OfflineStoreConfig::setS3StorageConfig(const OAIOfflineStoreConfig_S3StorageConfig &s3_storage_config) {
    m_s3_storage_config = s3_storage_config;
    m_s3_storage_config_isSet = true;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::is_s3_storage_config_Set() const{
    return m_s3_storage_config_isSet;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::is_s3_storage_config_Valid() const{
    return m_s3_storage_config_isValid;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::getDisableGlueTableCreation() const {
    return m_disable_glue_table_creation;
}
void OAIDescribeFeatureGroupResponse_OfflineStoreConfig::setDisableGlueTableCreation(const bool &disable_glue_table_creation) {
    m_disable_glue_table_creation = disable_glue_table_creation;
    m_disable_glue_table_creation_isSet = true;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::is_disable_glue_table_creation_Set() const{
    return m_disable_glue_table_creation_isSet;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::is_disable_glue_table_creation_Valid() const{
    return m_disable_glue_table_creation_isValid;
}

OAIOfflineStoreConfig_DataCatalogConfig OAIDescribeFeatureGroupResponse_OfflineStoreConfig::getDataCatalogConfig() const {
    return m_data_catalog_config;
}
void OAIDescribeFeatureGroupResponse_OfflineStoreConfig::setDataCatalogConfig(const OAIOfflineStoreConfig_DataCatalogConfig &data_catalog_config) {
    m_data_catalog_config = data_catalog_config;
    m_data_catalog_config_isSet = true;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::is_data_catalog_config_Set() const{
    return m_data_catalog_config_isSet;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::is_data_catalog_config_Valid() const{
    return m_data_catalog_config_isValid;
}

OAITableFormat OAIDescribeFeatureGroupResponse_OfflineStoreConfig::getTableFormat() const {
    return m_table_format;
}
void OAIDescribeFeatureGroupResponse_OfflineStoreConfig::setTableFormat(const OAITableFormat &table_format) {
    m_table_format = table_format;
    m_table_format_isSet = true;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::is_table_format_Set() const{
    return m_table_format_isSet;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::is_table_format_Valid() const{
    return m_table_format_isValid;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_storage_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_glue_table_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_catalog_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeFeatureGroupResponse_OfflineStoreConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_storage_config_isValid && true;
}

} // namespace OpenAPI
