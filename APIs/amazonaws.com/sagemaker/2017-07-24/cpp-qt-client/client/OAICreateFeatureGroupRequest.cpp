/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFeatureGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFeatureGroupRequest::OAICreateFeatureGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFeatureGroupRequest::OAICreateFeatureGroupRequest() {
    this->initializeModel();
}

OAICreateFeatureGroupRequest::~OAICreateFeatureGroupRequest() {}

void OAICreateFeatureGroupRequest::initializeModel() {

    m_feature_group_name_isSet = false;
    m_feature_group_name_isValid = false;

    m_record_identifier_feature_name_isSet = false;
    m_record_identifier_feature_name_isValid = false;

    m_event_time_feature_name_isSet = false;
    m_event_time_feature_name_isValid = false;

    m_feature_definitions_isSet = false;
    m_feature_definitions_isValid = false;

    m_online_store_config_isSet = false;
    m_online_store_config_isValid = false;

    m_offline_store_config_isSet = false;
    m_offline_store_config_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateFeatureGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFeatureGroupRequest::fromJsonObject(QJsonObject json) {

    m_feature_group_name_isValid = ::OpenAPI::fromJsonValue(m_feature_group_name, json[QString("FeatureGroupName")]);
    m_feature_group_name_isSet = !json[QString("FeatureGroupName")].isNull() && m_feature_group_name_isValid;

    m_record_identifier_feature_name_isValid = ::OpenAPI::fromJsonValue(m_record_identifier_feature_name, json[QString("RecordIdentifierFeatureName")]);
    m_record_identifier_feature_name_isSet = !json[QString("RecordIdentifierFeatureName")].isNull() && m_record_identifier_feature_name_isValid;

    m_event_time_feature_name_isValid = ::OpenAPI::fromJsonValue(m_event_time_feature_name, json[QString("EventTimeFeatureName")]);
    m_event_time_feature_name_isSet = !json[QString("EventTimeFeatureName")].isNull() && m_event_time_feature_name_isValid;

    m_feature_definitions_isValid = ::OpenAPI::fromJsonValue(m_feature_definitions, json[QString("FeatureDefinitions")]);
    m_feature_definitions_isSet = !json[QString("FeatureDefinitions")].isNull() && m_feature_definitions_isValid;

    m_online_store_config_isValid = ::OpenAPI::fromJsonValue(m_online_store_config, json[QString("OnlineStoreConfig")]);
    m_online_store_config_isSet = !json[QString("OnlineStoreConfig")].isNull() && m_online_store_config_isValid;

    m_offline_store_config_isValid = ::OpenAPI::fromJsonValue(m_offline_store_config, json[QString("OfflineStoreConfig")]);
    m_offline_store_config_isSet = !json[QString("OfflineStoreConfig")].isNull() && m_offline_store_config_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateFeatureGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFeatureGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_group_name_isSet) {
        obj.insert(QString("FeatureGroupName"), ::OpenAPI::toJsonValue(m_feature_group_name));
    }
    if (m_record_identifier_feature_name_isSet) {
        obj.insert(QString("RecordIdentifierFeatureName"), ::OpenAPI::toJsonValue(m_record_identifier_feature_name));
    }
    if (m_event_time_feature_name_isSet) {
        obj.insert(QString("EventTimeFeatureName"), ::OpenAPI::toJsonValue(m_event_time_feature_name));
    }
    if (m_feature_definitions.isSet()) {
        obj.insert(QString("FeatureDefinitions"), ::OpenAPI::toJsonValue(m_feature_definitions));
    }
    if (m_online_store_config.isSet()) {
        obj.insert(QString("OnlineStoreConfig"), ::OpenAPI::toJsonValue(m_online_store_config));
    }
    if (m_offline_store_config.isSet()) {
        obj.insert(QString("OfflineStoreConfig"), ::OpenAPI::toJsonValue(m_offline_store_config));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateFeatureGroupRequest::getFeatureGroupName() const {
    return m_feature_group_name;
}
void OAICreateFeatureGroupRequest::setFeatureGroupName(const QString &feature_group_name) {
    m_feature_group_name = feature_group_name;
    m_feature_group_name_isSet = true;
}

bool OAICreateFeatureGroupRequest::is_feature_group_name_Set() const{
    return m_feature_group_name_isSet;
}

bool OAICreateFeatureGroupRequest::is_feature_group_name_Valid() const{
    return m_feature_group_name_isValid;
}

QString OAICreateFeatureGroupRequest::getRecordIdentifierFeatureName() const {
    return m_record_identifier_feature_name;
}
void OAICreateFeatureGroupRequest::setRecordIdentifierFeatureName(const QString &record_identifier_feature_name) {
    m_record_identifier_feature_name = record_identifier_feature_name;
    m_record_identifier_feature_name_isSet = true;
}

bool OAICreateFeatureGroupRequest::is_record_identifier_feature_name_Set() const{
    return m_record_identifier_feature_name_isSet;
}

bool OAICreateFeatureGroupRequest::is_record_identifier_feature_name_Valid() const{
    return m_record_identifier_feature_name_isValid;
}

QString OAICreateFeatureGroupRequest::getEventTimeFeatureName() const {
    return m_event_time_feature_name;
}
void OAICreateFeatureGroupRequest::setEventTimeFeatureName(const QString &event_time_feature_name) {
    m_event_time_feature_name = event_time_feature_name;
    m_event_time_feature_name_isSet = true;
}

bool OAICreateFeatureGroupRequest::is_event_time_feature_name_Set() const{
    return m_event_time_feature_name_isSet;
}

bool OAICreateFeatureGroupRequest::is_event_time_feature_name_Valid() const{
    return m_event_time_feature_name_isValid;
}

QList OAICreateFeatureGroupRequest::getFeatureDefinitions() const {
    return m_feature_definitions;
}
void OAICreateFeatureGroupRequest::setFeatureDefinitions(const QList &feature_definitions) {
    m_feature_definitions = feature_definitions;
    m_feature_definitions_isSet = true;
}

bool OAICreateFeatureGroupRequest::is_feature_definitions_Set() const{
    return m_feature_definitions_isSet;
}

bool OAICreateFeatureGroupRequest::is_feature_definitions_Valid() const{
    return m_feature_definitions_isValid;
}

OAICreateFeatureGroupRequest_OnlineStoreConfig OAICreateFeatureGroupRequest::getOnlineStoreConfig() const {
    return m_online_store_config;
}
void OAICreateFeatureGroupRequest::setOnlineStoreConfig(const OAICreateFeatureGroupRequest_OnlineStoreConfig &online_store_config) {
    m_online_store_config = online_store_config;
    m_online_store_config_isSet = true;
}

bool OAICreateFeatureGroupRequest::is_online_store_config_Set() const{
    return m_online_store_config_isSet;
}

bool OAICreateFeatureGroupRequest::is_online_store_config_Valid() const{
    return m_online_store_config_isValid;
}

OAICreateFeatureGroupRequest_OfflineStoreConfig OAICreateFeatureGroupRequest::getOfflineStoreConfig() const {
    return m_offline_store_config;
}
void OAICreateFeatureGroupRequest::setOfflineStoreConfig(const OAICreateFeatureGroupRequest_OfflineStoreConfig &offline_store_config) {
    m_offline_store_config = offline_store_config;
    m_offline_store_config_isSet = true;
}

bool OAICreateFeatureGroupRequest::is_offline_store_config_Set() const{
    return m_offline_store_config_isSet;
}

bool OAICreateFeatureGroupRequest::is_offline_store_config_Valid() const{
    return m_offline_store_config_isValid;
}

QString OAICreateFeatureGroupRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateFeatureGroupRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateFeatureGroupRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateFeatureGroupRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAICreateFeatureGroupRequest::getDescription() const {
    return m_description;
}
void OAICreateFeatureGroupRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateFeatureGroupRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateFeatureGroupRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateFeatureGroupRequest::getTags() const {
    return m_tags;
}
void OAICreateFeatureGroupRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFeatureGroupRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFeatureGroupRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateFeatureGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_identifier_feature_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_feature_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_store_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_store_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFeatureGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_feature_group_name_isValid && m_record_identifier_feature_name_isValid && m_event_time_feature_name_isValid && m_feature_definitions_isValid && true;
}

} // namespace OpenAPI
