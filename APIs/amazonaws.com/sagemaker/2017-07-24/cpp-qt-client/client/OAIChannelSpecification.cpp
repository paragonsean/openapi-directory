/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelSpecification::OAIChannelSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelSpecification::OAIChannelSpecification() {
    this->initializeModel();
}

OAIChannelSpecification::~OAIChannelSpecification() {}

void OAIChannelSpecification::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_supported_content_types_isSet = false;
    m_supported_content_types_isValid = false;

    m_supported_compression_types_isSet = false;
    m_supported_compression_types_isValid = false;

    m_supported_input_modes_isSet = false;
    m_supported_input_modes_isValid = false;
}

void OAIChannelSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelSpecification::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("IsRequired")]);
    m_is_required_isSet = !json[QString("IsRequired")].isNull() && m_is_required_isValid;

    m_supported_content_types_isValid = ::OpenAPI::fromJsonValue(m_supported_content_types, json[QString("SupportedContentTypes")]);
    m_supported_content_types_isSet = !json[QString("SupportedContentTypes")].isNull() && m_supported_content_types_isValid;

    m_supported_compression_types_isValid = ::OpenAPI::fromJsonValue(m_supported_compression_types, json[QString("SupportedCompressionTypes")]);
    m_supported_compression_types_isSet = !json[QString("SupportedCompressionTypes")].isNull() && m_supported_compression_types_isValid;

    m_supported_input_modes_isValid = ::OpenAPI::fromJsonValue(m_supported_input_modes, json[QString("SupportedInputModes")]);
    m_supported_input_modes_isSet = !json[QString("SupportedInputModes")].isNull() && m_supported_input_modes_isValid;
}

QString OAIChannelSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("IsRequired"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_supported_content_types.isSet()) {
        obj.insert(QString("SupportedContentTypes"), ::OpenAPI::toJsonValue(m_supported_content_types));
    }
    if (m_supported_compression_types.isSet()) {
        obj.insert(QString("SupportedCompressionTypes"), ::OpenAPI::toJsonValue(m_supported_compression_types));
    }
    if (m_supported_input_modes.isSet()) {
        obj.insert(QString("SupportedInputModes"), ::OpenAPI::toJsonValue(m_supported_input_modes));
    }
    return obj;
}

QString OAIChannelSpecification::getName() const {
    return m_name;
}
void OAIChannelSpecification::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChannelSpecification::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChannelSpecification::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIChannelSpecification::getDescription() const {
    return m_description;
}
void OAIChannelSpecification::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIChannelSpecification::is_description_Set() const{
    return m_description_isSet;
}

bool OAIChannelSpecification::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIChannelSpecification::getIsRequired() const {
    return m_is_required;
}
void OAIChannelSpecification::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIChannelSpecification::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIChannelSpecification::is_is_required_Valid() const{
    return m_is_required_isValid;
}

QList OAIChannelSpecification::getSupportedContentTypes() const {
    return m_supported_content_types;
}
void OAIChannelSpecification::setSupportedContentTypes(const QList &supported_content_types) {
    m_supported_content_types = supported_content_types;
    m_supported_content_types_isSet = true;
}

bool OAIChannelSpecification::is_supported_content_types_Set() const{
    return m_supported_content_types_isSet;
}

bool OAIChannelSpecification::is_supported_content_types_Valid() const{
    return m_supported_content_types_isValid;
}

QList OAIChannelSpecification::getSupportedCompressionTypes() const {
    return m_supported_compression_types;
}
void OAIChannelSpecification::setSupportedCompressionTypes(const QList &supported_compression_types) {
    m_supported_compression_types = supported_compression_types;
    m_supported_compression_types_isSet = true;
}

bool OAIChannelSpecification::is_supported_compression_types_Set() const{
    return m_supported_compression_types_isSet;
}

bool OAIChannelSpecification::is_supported_compression_types_Valid() const{
    return m_supported_compression_types_isValid;
}

QList OAIChannelSpecification::getSupportedInputModes() const {
    return m_supported_input_modes;
}
void OAIChannelSpecification::setSupportedInputModes(const QList &supported_input_modes) {
    m_supported_input_modes = supported_input_modes;
    m_supported_input_modes_isSet = true;
}

bool OAIChannelSpecification::is_supported_input_modes_Set() const{
    return m_supported_input_modes_isSet;
}

bool OAIChannelSpecification::is_supported_input_modes_Valid() const{
    return m_supported_input_modes_isValid;
}

bool OAIChannelSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_content_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_compression_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_input_modes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_supported_content_types_isValid && m_supported_input_modes_isValid && true;
}

} // namespace OpenAPI
