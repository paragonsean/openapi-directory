/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStoppingCondition.h
 *
 * &lt;p&gt;Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.&lt;/p&gt; &lt;p&gt;To stop a training job, SageMaker sends the algorithm the &lt;code&gt;SIGTERM&lt;/code&gt; signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. &lt;/p&gt; &lt;p&gt;The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with &lt;code&gt;CreateModel&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.&lt;/p&gt; &lt;/note&gt;
 */

#ifndef OAIStoppingCondition_H
#define OAIStoppingCondition_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStoppingCondition : public OAIObject {
public:
    OAIStoppingCondition();
    OAIStoppingCondition(QString json);
    ~OAIStoppingCondition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMaxRuntimeInSeconds() const;
    void setMaxRuntimeInSeconds(const qint32 &max_runtime_in_seconds);
    bool is_max_runtime_in_seconds_Set() const;
    bool is_max_runtime_in_seconds_Valid() const;

    qint32 getMaxWaitTimeInSeconds() const;
    void setMaxWaitTimeInSeconds(const qint32 &max_wait_time_in_seconds);
    bool is_max_wait_time_in_seconds_Set() const;
    bool is_max_wait_time_in_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_max_runtime_in_seconds;
    bool m_max_runtime_in_seconds_isSet;
    bool m_max_runtime_in_seconds_isValid;

    qint32 m_max_wait_time_in_seconds;
    bool m_max_wait_time_in_seconds_isSet;
    bool m_max_wait_time_in_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStoppingCondition)

#endif // OAIStoppingCondition_H
