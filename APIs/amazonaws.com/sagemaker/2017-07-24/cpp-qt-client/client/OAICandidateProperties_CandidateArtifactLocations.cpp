/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICandidateProperties_CandidateArtifactLocations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICandidateProperties_CandidateArtifactLocations::OAICandidateProperties_CandidateArtifactLocations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICandidateProperties_CandidateArtifactLocations::OAICandidateProperties_CandidateArtifactLocations() {
    this->initializeModel();
}

OAICandidateProperties_CandidateArtifactLocations::~OAICandidateProperties_CandidateArtifactLocations() {}

void OAICandidateProperties_CandidateArtifactLocations::initializeModel() {

    m_explainability_isSet = false;
    m_explainability_isValid = false;

    m_model_insights_isSet = false;
    m_model_insights_isValid = false;

    m_backtest_results_isSet = false;
    m_backtest_results_isValid = false;
}

void OAICandidateProperties_CandidateArtifactLocations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICandidateProperties_CandidateArtifactLocations::fromJsonObject(QJsonObject json) {

    m_explainability_isValid = ::OpenAPI::fromJsonValue(m_explainability, json[QString("Explainability")]);
    m_explainability_isSet = !json[QString("Explainability")].isNull() && m_explainability_isValid;

    m_model_insights_isValid = ::OpenAPI::fromJsonValue(m_model_insights, json[QString("ModelInsights")]);
    m_model_insights_isSet = !json[QString("ModelInsights")].isNull() && m_model_insights_isValid;

    m_backtest_results_isValid = ::OpenAPI::fromJsonValue(m_backtest_results, json[QString("BacktestResults")]);
    m_backtest_results_isSet = !json[QString("BacktestResults")].isNull() && m_backtest_results_isValid;
}

QString OAICandidateProperties_CandidateArtifactLocations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICandidateProperties_CandidateArtifactLocations::asJsonObject() const {
    QJsonObject obj;
    if (m_explainability_isSet) {
        obj.insert(QString("Explainability"), ::OpenAPI::toJsonValue(m_explainability));
    }
    if (m_model_insights_isSet) {
        obj.insert(QString("ModelInsights"), ::OpenAPI::toJsonValue(m_model_insights));
    }
    if (m_backtest_results_isSet) {
        obj.insert(QString("BacktestResults"), ::OpenAPI::toJsonValue(m_backtest_results));
    }
    return obj;
}

QString OAICandidateProperties_CandidateArtifactLocations::getExplainability() const {
    return m_explainability;
}
void OAICandidateProperties_CandidateArtifactLocations::setExplainability(const QString &explainability) {
    m_explainability = explainability;
    m_explainability_isSet = true;
}

bool OAICandidateProperties_CandidateArtifactLocations::is_explainability_Set() const{
    return m_explainability_isSet;
}

bool OAICandidateProperties_CandidateArtifactLocations::is_explainability_Valid() const{
    return m_explainability_isValid;
}

QString OAICandidateProperties_CandidateArtifactLocations::getModelInsights() const {
    return m_model_insights;
}
void OAICandidateProperties_CandidateArtifactLocations::setModelInsights(const QString &model_insights) {
    m_model_insights = model_insights;
    m_model_insights_isSet = true;
}

bool OAICandidateProperties_CandidateArtifactLocations::is_model_insights_Set() const{
    return m_model_insights_isSet;
}

bool OAICandidateProperties_CandidateArtifactLocations::is_model_insights_Valid() const{
    return m_model_insights_isValid;
}

QString OAICandidateProperties_CandidateArtifactLocations::getBacktestResults() const {
    return m_backtest_results;
}
void OAICandidateProperties_CandidateArtifactLocations::setBacktestResults(const QString &backtest_results) {
    m_backtest_results = backtest_results;
    m_backtest_results_isSet = true;
}

bool OAICandidateProperties_CandidateArtifactLocations::is_backtest_results_Set() const{
    return m_backtest_results_isSet;
}

bool OAICandidateProperties_CandidateArtifactLocations::is_backtest_results_Valid() const{
    return m_backtest_results_isValid;
}

bool OAICandidateProperties_CandidateArtifactLocations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explainability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_insights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backtest_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICandidateProperties_CandidateArtifactLocations::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_explainability_isValid && true;
}

} // namespace OpenAPI
