/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppType::OAIAppType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppType::OAIAppType() {
    this->initializeModel();
}

OAIAppType::~OAIAppType() {}

void OAIAppType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("JupyterServer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::JUPYTERSERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KernelGateway", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::KERNELGATEWAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TensorBoard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::TENSORBOARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RStudioServerPro", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::RSTUDIOSERVERPRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RSessionGateway", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppType::RSESSIONGATEWAY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppType::JUPYTERSERVER:
            val = "JupyterServer";
            break;
        case eOAIAppType::KERNELGATEWAY:
            val = "KernelGateway";
            break;
        case eOAIAppType::TENSORBOARD:
            val = "TensorBoard";
            break;
        case eOAIAppType::RSTUDIOSERVERPRO:
            val = "RStudioServerPro";
            break;
        case eOAIAppType::RSESSIONGATEWAY:
            val = "RSessionGateway";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppType::eOAIAppType OAIAppType::getValue() const {
    return m_value;
}

void OAIAppType::setValue(const OAIAppType::eOAIAppType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
