/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftDatasetDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftDatasetDefinition::OAIRedshiftDatasetDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftDatasetDefinition::OAIRedshiftDatasetDefinition() {
    this->initializeModel();
}

OAIRedshiftDatasetDefinition::~OAIRedshiftDatasetDefinition() {}

void OAIRedshiftDatasetDefinition::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_db_user_isSet = false;
    m_db_user_isValid = false;

    m_query_string_isSet = false;
    m_query_string_isValid = false;

    m_cluster_role_arn_isSet = false;
    m_cluster_role_arn_isValid = false;

    m_output_s3_uri_isSet = false;
    m_output_s3_uri_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_output_format_isSet = false;
    m_output_format_isValid = false;

    m_output_compression_isSet = false;
    m_output_compression_isValid = false;
}

void OAIRedshiftDatasetDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftDatasetDefinition::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("ClusterId")]);
    m_cluster_id_isSet = !json[QString("ClusterId")].isNull() && m_cluster_id_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_db_user_isValid = ::OpenAPI::fromJsonValue(m_db_user, json[QString("DbUser")]);
    m_db_user_isSet = !json[QString("DbUser")].isNull() && m_db_user_isValid;

    m_query_string_isValid = ::OpenAPI::fromJsonValue(m_query_string, json[QString("QueryString")]);
    m_query_string_isSet = !json[QString("QueryString")].isNull() && m_query_string_isValid;

    m_cluster_role_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_role_arn, json[QString("ClusterRoleArn")]);
    m_cluster_role_arn_isSet = !json[QString("ClusterRoleArn")].isNull() && m_cluster_role_arn_isValid;

    m_output_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_output_s3_uri, json[QString("OutputS3Uri")]);
    m_output_s3_uri_isSet = !json[QString("OutputS3Uri")].isNull() && m_output_s3_uri_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_output_format_isValid = ::OpenAPI::fromJsonValue(m_output_format, json[QString("OutputFormat")]);
    m_output_format_isSet = !json[QString("OutputFormat")].isNull() && m_output_format_isValid;

    m_output_compression_isValid = ::OpenAPI::fromJsonValue(m_output_compression, json[QString("OutputCompression")]);
    m_output_compression_isSet = !json[QString("OutputCompression")].isNull() && m_output_compression_isValid;
}

QString OAIRedshiftDatasetDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftDatasetDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("ClusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_db_user_isSet) {
        obj.insert(QString("DbUser"), ::OpenAPI::toJsonValue(m_db_user));
    }
    if (m_query_string_isSet) {
        obj.insert(QString("QueryString"), ::OpenAPI::toJsonValue(m_query_string));
    }
    if (m_cluster_role_arn_isSet) {
        obj.insert(QString("ClusterRoleArn"), ::OpenAPI::toJsonValue(m_cluster_role_arn));
    }
    if (m_output_s3_uri_isSet) {
        obj.insert(QString("OutputS3Uri"), ::OpenAPI::toJsonValue(m_output_s3_uri));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_output_format.isSet()) {
        obj.insert(QString("OutputFormat"), ::OpenAPI::toJsonValue(m_output_format));
    }
    if (m_output_compression.isSet()) {
        obj.insert(QString("OutputCompression"), ::OpenAPI::toJsonValue(m_output_compression));
    }
    return obj;
}

QString OAIRedshiftDatasetDefinition::getClusterId() const {
    return m_cluster_id;
}
void OAIRedshiftDatasetDefinition::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIRedshiftDatasetDefinition::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIRedshiftDatasetDefinition::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QString OAIRedshiftDatasetDefinition::getDatabase() const {
    return m_database;
}
void OAIRedshiftDatasetDefinition::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIRedshiftDatasetDefinition::is_database_Set() const{
    return m_database_isSet;
}

bool OAIRedshiftDatasetDefinition::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIRedshiftDatasetDefinition::getDbUser() const {
    return m_db_user;
}
void OAIRedshiftDatasetDefinition::setDbUser(const QString &db_user) {
    m_db_user = db_user;
    m_db_user_isSet = true;
}

bool OAIRedshiftDatasetDefinition::is_db_user_Set() const{
    return m_db_user_isSet;
}

bool OAIRedshiftDatasetDefinition::is_db_user_Valid() const{
    return m_db_user_isValid;
}

QString OAIRedshiftDatasetDefinition::getQueryString() const {
    return m_query_string;
}
void OAIRedshiftDatasetDefinition::setQueryString(const QString &query_string) {
    m_query_string = query_string;
    m_query_string_isSet = true;
}

bool OAIRedshiftDatasetDefinition::is_query_string_Set() const{
    return m_query_string_isSet;
}

bool OAIRedshiftDatasetDefinition::is_query_string_Valid() const{
    return m_query_string_isValid;
}

QString OAIRedshiftDatasetDefinition::getClusterRoleArn() const {
    return m_cluster_role_arn;
}
void OAIRedshiftDatasetDefinition::setClusterRoleArn(const QString &cluster_role_arn) {
    m_cluster_role_arn = cluster_role_arn;
    m_cluster_role_arn_isSet = true;
}

bool OAIRedshiftDatasetDefinition::is_cluster_role_arn_Set() const{
    return m_cluster_role_arn_isSet;
}

bool OAIRedshiftDatasetDefinition::is_cluster_role_arn_Valid() const{
    return m_cluster_role_arn_isValid;
}

QString OAIRedshiftDatasetDefinition::getOutputS3Uri() const {
    return m_output_s3_uri;
}
void OAIRedshiftDatasetDefinition::setOutputS3Uri(const QString &output_s3_uri) {
    m_output_s3_uri = output_s3_uri;
    m_output_s3_uri_isSet = true;
}

bool OAIRedshiftDatasetDefinition::is_output_s3_uri_Set() const{
    return m_output_s3_uri_isSet;
}

bool OAIRedshiftDatasetDefinition::is_output_s3_uri_Valid() const{
    return m_output_s3_uri_isValid;
}

QString OAIRedshiftDatasetDefinition::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIRedshiftDatasetDefinition::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIRedshiftDatasetDefinition::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIRedshiftDatasetDefinition::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

OAIRedshiftResultFormat OAIRedshiftDatasetDefinition::getOutputFormat() const {
    return m_output_format;
}
void OAIRedshiftDatasetDefinition::setOutputFormat(const OAIRedshiftResultFormat &output_format) {
    m_output_format = output_format;
    m_output_format_isSet = true;
}

bool OAIRedshiftDatasetDefinition::is_output_format_Set() const{
    return m_output_format_isSet;
}

bool OAIRedshiftDatasetDefinition::is_output_format_Valid() const{
    return m_output_format_isValid;
}

OAIRedshiftResultCompressionType OAIRedshiftDatasetDefinition::getOutputCompression() const {
    return m_output_compression;
}
void OAIRedshiftDatasetDefinition::setOutputCompression(const OAIRedshiftResultCompressionType &output_compression) {
    m_output_compression = output_compression;
    m_output_compression_isSet = true;
}

bool OAIRedshiftDatasetDefinition::is_output_compression_Set() const{
    return m_output_compression_isSet;
}

bool OAIRedshiftDatasetDefinition::is_output_compression_Valid() const{
    return m_output_compression_isValid;
}

bool OAIRedshiftDatasetDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftDatasetDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_id_isValid && m_database_isValid && m_db_user_isValid && m_query_string_isValid && m_cluster_role_arn_isValid && m_output_s3_uri_isValid && m_output_format_isValid && true;
}

} // namespace OpenAPI
