/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoMLAlgorithm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoMLAlgorithm::OAIAutoMLAlgorithm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoMLAlgorithm::OAIAutoMLAlgorithm() {
    this->initializeModel();
}

OAIAutoMLAlgorithm::~OAIAutoMLAlgorithm() {}

void OAIAutoMLAlgorithm::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAutoMLAlgorithm::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAutoMLAlgorithm::fromJson(QString jsonString) {
    
    if ( jsonString.compare("xgboost", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLAlgorithm::XGBOOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("linear-learner", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLAlgorithm::LINEAR_LEARNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mlp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLAlgorithm::MLP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lightgbm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLAlgorithm::LIGHTGBM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("catboost", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLAlgorithm::CATBOOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("randomforest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLAlgorithm::RANDOMFOREST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("extra-trees", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLAlgorithm::EXTRA_TREES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nn-torch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLAlgorithm::NN_TORCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fastai", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLAlgorithm::FASTAI;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAutoMLAlgorithm::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAutoMLAlgorithm::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAutoMLAlgorithm::XGBOOST:
            val = "xgboost";
            break;
        case eOAIAutoMLAlgorithm::LINEAR_LEARNER:
            val = "linear-learner";
            break;
        case eOAIAutoMLAlgorithm::MLP:
            val = "mlp";
            break;
        case eOAIAutoMLAlgorithm::LIGHTGBM:
            val = "lightgbm";
            break;
        case eOAIAutoMLAlgorithm::CATBOOST:
            val = "catboost";
            break;
        case eOAIAutoMLAlgorithm::RANDOMFOREST:
            val = "randomforest";
            break;
        case eOAIAutoMLAlgorithm::EXTRA_TREES:
            val = "extra-trees";
            break;
        case eOAIAutoMLAlgorithm::NN_TORCH:
            val = "nn-torch";
            break;
        case eOAIAutoMLAlgorithm::FASTAI:
            val = "fastai";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAutoMLAlgorithm::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAutoMLAlgorithm::eOAIAutoMLAlgorithm OAIAutoMLAlgorithm::getValue() const {
    return m_value;
}

void OAIAutoMLAlgorithm::setValue(const OAIAutoMLAlgorithm::eOAIAutoMLAlgorithm& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAutoMLAlgorithm::isSet() const {
    
    return m_value_isSet;
}

bool OAIAutoMLAlgorithm::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
