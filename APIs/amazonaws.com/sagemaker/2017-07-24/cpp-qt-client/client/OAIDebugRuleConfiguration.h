/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDebugRuleConfiguration.h
 *
 * Configuration information for SageMaker Debugger rules for debugging. To learn more about how to configure the &lt;code&gt;DebugRuleConfiguration&lt;/code&gt; parameter, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html\&quot;&gt;Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job&lt;/a&gt;.
 */

#ifndef OAIDebugRuleConfiguration_H
#define OAIDebugRuleConfiguration_H

#include <QJsonObject>

#include "OAIProcessingInstanceType.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDebugRuleConfiguration : public OAIObject {
public:
    OAIDebugRuleConfiguration();
    OAIDebugRuleConfiguration(QString json);
    ~OAIDebugRuleConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRuleConfigurationName() const;
    void setRuleConfigurationName(const QString &rule_configuration_name);
    bool is_rule_configuration_name_Set() const;
    bool is_rule_configuration_name_Valid() const;

    QString getLocalPath() const;
    void setLocalPath(const QString &local_path);
    bool is_local_path_Set() const;
    bool is_local_path_Valid() const;

    QString getS3OutputPath() const;
    void setS3OutputPath(const QString &s3_output_path);
    bool is_s3_output_path_Set() const;
    bool is_s3_output_path_Valid() const;

    QString getRuleEvaluatorImage() const;
    void setRuleEvaluatorImage(const QString &rule_evaluator_image);
    bool is_rule_evaluator_image_Set() const;
    bool is_rule_evaluator_image_Valid() const;

    OAIProcessingInstanceType getInstanceType() const;
    void setInstanceType(const OAIProcessingInstanceType &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    qint32 getVolumeSizeInGb() const;
    void setVolumeSizeInGb(const qint32 &volume_size_in_gb);
    bool is_volume_size_in_gb_Set() const;
    bool is_volume_size_in_gb_Valid() const;

    QMap getRuleParameters() const;
    void setRuleParameters(const QMap &rule_parameters);
    bool is_rule_parameters_Set() const;
    bool is_rule_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_rule_configuration_name;
    bool m_rule_configuration_name_isSet;
    bool m_rule_configuration_name_isValid;

    QString m_local_path;
    bool m_local_path_isSet;
    bool m_local_path_isValid;

    QString m_s3_output_path;
    bool m_s3_output_path_isSet;
    bool m_s3_output_path_isValid;

    QString m_rule_evaluator_image;
    bool m_rule_evaluator_image_isSet;
    bool m_rule_evaluator_image_isValid;

    OAIProcessingInstanceType m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    qint32 m_volume_size_in_gb;
    bool m_volume_size_in_gb_isSet;
    bool m_volume_size_in_gb_isValid;

    QMap m_rule_parameters;
    bool m_rule_parameters_isSet;
    bool m_rule_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDebugRuleConfiguration)

#endif // OAIDebugRuleConfiguration_H
