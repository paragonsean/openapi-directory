/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClarifyTextConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClarifyTextConfig::OAIClarifyTextConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClarifyTextConfig::OAIClarifyTextConfig() {
    this->initializeModel();
}

OAIClarifyTextConfig::~OAIClarifyTextConfig() {}

void OAIClarifyTextConfig::initializeModel() {

    m_language_isSet = false;
    m_language_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;
}

void OAIClarifyTextConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClarifyTextConfig::fromJsonObject(QJsonObject json) {

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("Granularity")]);
    m_granularity_isSet = !json[QString("Granularity")].isNull() && m_granularity_isValid;
}

QString OAIClarifyTextConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClarifyTextConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_language.isSet()) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_granularity.isSet()) {
        obj.insert(QString("Granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    return obj;
}

OAIClarifyTextLanguage OAIClarifyTextConfig::getLanguage() const {
    return m_language;
}
void OAIClarifyTextConfig::setLanguage(const OAIClarifyTextLanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIClarifyTextConfig::is_language_Set() const{
    return m_language_isSet;
}

bool OAIClarifyTextConfig::is_language_Valid() const{
    return m_language_isValid;
}

OAIClarifyTextGranularity OAIClarifyTextConfig::getGranularity() const {
    return m_granularity;
}
void OAIClarifyTextConfig::setGranularity(const OAIClarifyTextGranularity &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAIClarifyTextConfig::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAIClarifyTextConfig::is_granularity_Valid() const{
    return m_granularity_isValid;
}

bool OAIClarifyTextConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClarifyTextConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_language_isValid && m_granularity_isValid && true;
}

} // namespace OpenAPI
