/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateModelPackageInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateModelPackageInput::OAIUpdateModelPackageInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateModelPackageInput::OAIUpdateModelPackageInput() {
    this->initializeModel();
}

OAIUpdateModelPackageInput::~OAIUpdateModelPackageInput() {}

void OAIUpdateModelPackageInput::initializeModel() {

    m_model_package_arn_isSet = false;
    m_model_package_arn_isValid = false;

    m_model_approval_status_isSet = false;
    m_model_approval_status_isValid = false;

    m_approval_description_isSet = false;
    m_approval_description_isValid = false;

    m_customer_metadata_properties_isSet = false;
    m_customer_metadata_properties_isValid = false;

    m_customer_metadata_properties_to_remove_isSet = false;
    m_customer_metadata_properties_to_remove_isValid = false;

    m_additional_inference_specifications_to_add_isSet = false;
    m_additional_inference_specifications_to_add_isValid = false;
}

void OAIUpdateModelPackageInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateModelPackageInput::fromJsonObject(QJsonObject json) {

    m_model_package_arn_isValid = ::OpenAPI::fromJsonValue(m_model_package_arn, json[QString("ModelPackageArn")]);
    m_model_package_arn_isSet = !json[QString("ModelPackageArn")].isNull() && m_model_package_arn_isValid;

    m_model_approval_status_isValid = ::OpenAPI::fromJsonValue(m_model_approval_status, json[QString("ModelApprovalStatus")]);
    m_model_approval_status_isSet = !json[QString("ModelApprovalStatus")].isNull() && m_model_approval_status_isValid;

    m_approval_description_isValid = ::OpenAPI::fromJsonValue(m_approval_description, json[QString("ApprovalDescription")]);
    m_approval_description_isSet = !json[QString("ApprovalDescription")].isNull() && m_approval_description_isValid;

    m_customer_metadata_properties_isValid = ::OpenAPI::fromJsonValue(m_customer_metadata_properties, json[QString("CustomerMetadataProperties")]);
    m_customer_metadata_properties_isSet = !json[QString("CustomerMetadataProperties")].isNull() && m_customer_metadata_properties_isValid;

    m_customer_metadata_properties_to_remove_isValid = ::OpenAPI::fromJsonValue(m_customer_metadata_properties_to_remove, json[QString("CustomerMetadataPropertiesToRemove")]);
    m_customer_metadata_properties_to_remove_isSet = !json[QString("CustomerMetadataPropertiesToRemove")].isNull() && m_customer_metadata_properties_to_remove_isValid;

    m_additional_inference_specifications_to_add_isValid = ::OpenAPI::fromJsonValue(m_additional_inference_specifications_to_add, json[QString("AdditionalInferenceSpecificationsToAdd")]);
    m_additional_inference_specifications_to_add_isSet = !json[QString("AdditionalInferenceSpecificationsToAdd")].isNull() && m_additional_inference_specifications_to_add_isValid;
}

QString OAIUpdateModelPackageInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateModelPackageInput::asJsonObject() const {
    QJsonObject obj;
    if (m_model_package_arn_isSet) {
        obj.insert(QString("ModelPackageArn"), ::OpenAPI::toJsonValue(m_model_package_arn));
    }
    if (m_model_approval_status.isSet()) {
        obj.insert(QString("ModelApprovalStatus"), ::OpenAPI::toJsonValue(m_model_approval_status));
    }
    if (m_approval_description_isSet) {
        obj.insert(QString("ApprovalDescription"), ::OpenAPI::toJsonValue(m_approval_description));
    }
    if (m_customer_metadata_properties.isSet()) {
        obj.insert(QString("CustomerMetadataProperties"), ::OpenAPI::toJsonValue(m_customer_metadata_properties));
    }
    if (m_customer_metadata_properties_to_remove.isSet()) {
        obj.insert(QString("CustomerMetadataPropertiesToRemove"), ::OpenAPI::toJsonValue(m_customer_metadata_properties_to_remove));
    }
    if (m_additional_inference_specifications_to_add.isSet()) {
        obj.insert(QString("AdditionalInferenceSpecificationsToAdd"), ::OpenAPI::toJsonValue(m_additional_inference_specifications_to_add));
    }
    return obj;
}

QString OAIUpdateModelPackageInput::getModelPackageArn() const {
    return m_model_package_arn;
}
void OAIUpdateModelPackageInput::setModelPackageArn(const QString &model_package_arn) {
    m_model_package_arn = model_package_arn;
    m_model_package_arn_isSet = true;
}

bool OAIUpdateModelPackageInput::is_model_package_arn_Set() const{
    return m_model_package_arn_isSet;
}

bool OAIUpdateModelPackageInput::is_model_package_arn_Valid() const{
    return m_model_package_arn_isValid;
}

OAIModelApprovalStatus OAIUpdateModelPackageInput::getModelApprovalStatus() const {
    return m_model_approval_status;
}
void OAIUpdateModelPackageInput::setModelApprovalStatus(const OAIModelApprovalStatus &model_approval_status) {
    m_model_approval_status = model_approval_status;
    m_model_approval_status_isSet = true;
}

bool OAIUpdateModelPackageInput::is_model_approval_status_Set() const{
    return m_model_approval_status_isSet;
}

bool OAIUpdateModelPackageInput::is_model_approval_status_Valid() const{
    return m_model_approval_status_isValid;
}

QString OAIUpdateModelPackageInput::getApprovalDescription() const {
    return m_approval_description;
}
void OAIUpdateModelPackageInput::setApprovalDescription(const QString &approval_description) {
    m_approval_description = approval_description;
    m_approval_description_isSet = true;
}

bool OAIUpdateModelPackageInput::is_approval_description_Set() const{
    return m_approval_description_isSet;
}

bool OAIUpdateModelPackageInput::is_approval_description_Valid() const{
    return m_approval_description_isValid;
}

QMap OAIUpdateModelPackageInput::getCustomerMetadataProperties() const {
    return m_customer_metadata_properties;
}
void OAIUpdateModelPackageInput::setCustomerMetadataProperties(const QMap &customer_metadata_properties) {
    m_customer_metadata_properties = customer_metadata_properties;
    m_customer_metadata_properties_isSet = true;
}

bool OAIUpdateModelPackageInput::is_customer_metadata_properties_Set() const{
    return m_customer_metadata_properties_isSet;
}

bool OAIUpdateModelPackageInput::is_customer_metadata_properties_Valid() const{
    return m_customer_metadata_properties_isValid;
}

QList OAIUpdateModelPackageInput::getCustomerMetadataPropertiesToRemove() const {
    return m_customer_metadata_properties_to_remove;
}
void OAIUpdateModelPackageInput::setCustomerMetadataPropertiesToRemove(const QList &customer_metadata_properties_to_remove) {
    m_customer_metadata_properties_to_remove = customer_metadata_properties_to_remove;
    m_customer_metadata_properties_to_remove_isSet = true;
}

bool OAIUpdateModelPackageInput::is_customer_metadata_properties_to_remove_Set() const{
    return m_customer_metadata_properties_to_remove_isSet;
}

bool OAIUpdateModelPackageInput::is_customer_metadata_properties_to_remove_Valid() const{
    return m_customer_metadata_properties_to_remove_isValid;
}

QList OAIUpdateModelPackageInput::getAdditionalInferenceSpecificationsToAdd() const {
    return m_additional_inference_specifications_to_add;
}
void OAIUpdateModelPackageInput::setAdditionalInferenceSpecificationsToAdd(const QList &additional_inference_specifications_to_add) {
    m_additional_inference_specifications_to_add = additional_inference_specifications_to_add;
    m_additional_inference_specifications_to_add_isSet = true;
}

bool OAIUpdateModelPackageInput::is_additional_inference_specifications_to_add_Set() const{
    return m_additional_inference_specifications_to_add_isSet;
}

bool OAIUpdateModelPackageInput::is_additional_inference_specifications_to_add_Valid() const{
    return m_additional_inference_specifications_to_add_isValid;
}

bool OAIUpdateModelPackageInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_package_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_approval_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_metadata_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_metadata_properties_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_inference_specifications_to_add.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateModelPackageInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_package_arn_isValid && true;
}

} // namespace OpenAPI
