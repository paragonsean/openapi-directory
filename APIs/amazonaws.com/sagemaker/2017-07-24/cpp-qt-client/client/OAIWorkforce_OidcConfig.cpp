/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkforce_OidcConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkforce_OidcConfig::OAIWorkforce_OidcConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkforce_OidcConfig::OAIWorkforce_OidcConfig() {
    this->initializeModel();
}

OAIWorkforce_OidcConfig::~OAIWorkforce_OidcConfig() {}

void OAIWorkforce_OidcConfig::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_authorization_endpoint_isSet = false;
    m_authorization_endpoint_isValid = false;

    m_token_endpoint_isSet = false;
    m_token_endpoint_isValid = false;

    m_user_info_endpoint_isSet = false;
    m_user_info_endpoint_isValid = false;

    m_logout_endpoint_isSet = false;
    m_logout_endpoint_isValid = false;

    m_jwks_uri_isSet = false;
    m_jwks_uri_isValid = false;
}

void OAIWorkforce_OidcConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkforce_OidcConfig::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientId")]);
    m_client_id_isSet = !json[QString("ClientId")].isNull() && m_client_id_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("Issuer")]);
    m_issuer_isSet = !json[QString("Issuer")].isNull() && m_issuer_isValid;

    m_authorization_endpoint_isValid = ::OpenAPI::fromJsonValue(m_authorization_endpoint, json[QString("AuthorizationEndpoint")]);
    m_authorization_endpoint_isSet = !json[QString("AuthorizationEndpoint")].isNull() && m_authorization_endpoint_isValid;

    m_token_endpoint_isValid = ::OpenAPI::fromJsonValue(m_token_endpoint, json[QString("TokenEndpoint")]);
    m_token_endpoint_isSet = !json[QString("TokenEndpoint")].isNull() && m_token_endpoint_isValid;

    m_user_info_endpoint_isValid = ::OpenAPI::fromJsonValue(m_user_info_endpoint, json[QString("UserInfoEndpoint")]);
    m_user_info_endpoint_isSet = !json[QString("UserInfoEndpoint")].isNull() && m_user_info_endpoint_isValid;

    m_logout_endpoint_isValid = ::OpenAPI::fromJsonValue(m_logout_endpoint, json[QString("LogoutEndpoint")]);
    m_logout_endpoint_isSet = !json[QString("LogoutEndpoint")].isNull() && m_logout_endpoint_isValid;

    m_jwks_uri_isValid = ::OpenAPI::fromJsonValue(m_jwks_uri, json[QString("JwksUri")]);
    m_jwks_uri_isSet = !json[QString("JwksUri")].isNull() && m_jwks_uri_isValid;
}

QString OAIWorkforce_OidcConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkforce_OidcConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("ClientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("Issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_authorization_endpoint_isSet) {
        obj.insert(QString("AuthorizationEndpoint"), ::OpenAPI::toJsonValue(m_authorization_endpoint));
    }
    if (m_token_endpoint_isSet) {
        obj.insert(QString("TokenEndpoint"), ::OpenAPI::toJsonValue(m_token_endpoint));
    }
    if (m_user_info_endpoint_isSet) {
        obj.insert(QString("UserInfoEndpoint"), ::OpenAPI::toJsonValue(m_user_info_endpoint));
    }
    if (m_logout_endpoint_isSet) {
        obj.insert(QString("LogoutEndpoint"), ::OpenAPI::toJsonValue(m_logout_endpoint));
    }
    if (m_jwks_uri_isSet) {
        obj.insert(QString("JwksUri"), ::OpenAPI::toJsonValue(m_jwks_uri));
    }
    return obj;
}

QString OAIWorkforce_OidcConfig::getClientId() const {
    return m_client_id;
}
void OAIWorkforce_OidcConfig::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIWorkforce_OidcConfig::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIWorkforce_OidcConfig::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIWorkforce_OidcConfig::getIssuer() const {
    return m_issuer;
}
void OAIWorkforce_OidcConfig::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIWorkforce_OidcConfig::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIWorkforce_OidcConfig::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIWorkforce_OidcConfig::getAuthorizationEndpoint() const {
    return m_authorization_endpoint;
}
void OAIWorkforce_OidcConfig::setAuthorizationEndpoint(const QString &authorization_endpoint) {
    m_authorization_endpoint = authorization_endpoint;
    m_authorization_endpoint_isSet = true;
}

bool OAIWorkforce_OidcConfig::is_authorization_endpoint_Set() const{
    return m_authorization_endpoint_isSet;
}

bool OAIWorkforce_OidcConfig::is_authorization_endpoint_Valid() const{
    return m_authorization_endpoint_isValid;
}

QString OAIWorkforce_OidcConfig::getTokenEndpoint() const {
    return m_token_endpoint;
}
void OAIWorkforce_OidcConfig::setTokenEndpoint(const QString &token_endpoint) {
    m_token_endpoint = token_endpoint;
    m_token_endpoint_isSet = true;
}

bool OAIWorkforce_OidcConfig::is_token_endpoint_Set() const{
    return m_token_endpoint_isSet;
}

bool OAIWorkforce_OidcConfig::is_token_endpoint_Valid() const{
    return m_token_endpoint_isValid;
}

QString OAIWorkforce_OidcConfig::getUserInfoEndpoint() const {
    return m_user_info_endpoint;
}
void OAIWorkforce_OidcConfig::setUserInfoEndpoint(const QString &user_info_endpoint) {
    m_user_info_endpoint = user_info_endpoint;
    m_user_info_endpoint_isSet = true;
}

bool OAIWorkforce_OidcConfig::is_user_info_endpoint_Set() const{
    return m_user_info_endpoint_isSet;
}

bool OAIWorkforce_OidcConfig::is_user_info_endpoint_Valid() const{
    return m_user_info_endpoint_isValid;
}

QString OAIWorkforce_OidcConfig::getLogoutEndpoint() const {
    return m_logout_endpoint;
}
void OAIWorkforce_OidcConfig::setLogoutEndpoint(const QString &logout_endpoint) {
    m_logout_endpoint = logout_endpoint;
    m_logout_endpoint_isSet = true;
}

bool OAIWorkforce_OidcConfig::is_logout_endpoint_Set() const{
    return m_logout_endpoint_isSet;
}

bool OAIWorkforce_OidcConfig::is_logout_endpoint_Valid() const{
    return m_logout_endpoint_isValid;
}

QString OAIWorkforce_OidcConfig::getJwksUri() const {
    return m_jwks_uri;
}
void OAIWorkforce_OidcConfig::setJwksUri(const QString &jwks_uri) {
    m_jwks_uri = jwks_uri;
    m_jwks_uri_isSet = true;
}

bool OAIWorkforce_OidcConfig::is_jwks_uri_Set() const{
    return m_jwks_uri_isSet;
}

bool OAIWorkforce_OidcConfig::is_jwks_uri_Valid() const{
    return m_jwks_uri_isValid;
}

bool OAIWorkforce_OidcConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logout_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwks_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkforce_OidcConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
