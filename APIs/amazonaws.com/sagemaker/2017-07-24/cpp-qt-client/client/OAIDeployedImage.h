/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeployedImage.h
 *
 * &lt;p&gt;Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html\&quot;&gt;ProductionVariant&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you used the &lt;code&gt;registry/repository[:tag]&lt;/code&gt; form to specify the image path of the primary container when you created the model hosted in this &lt;code&gt;ProductionVariant&lt;/code&gt;, the path resolves to a path of the form &lt;code&gt;registry/repository[@digest]&lt;/code&gt;. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html\&quot;&gt;Pulling an Image&lt;/a&gt; in the &lt;i&gt;Amazon ECR User Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIDeployedImage_H
#define OAIDeployedImage_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDeployedImage : public OAIObject {
public:
    OAIDeployedImage();
    OAIDeployedImage(QString json);
    ~OAIDeployedImage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSpecifiedImage() const;
    void setSpecifiedImage(const QString &specified_image);
    bool is_specified_image_Set() const;
    bool is_specified_image_Valid() const;

    QString getResolvedImage() const;
    void setResolvedImage(const QString &resolved_image);
    bool is_resolved_image_Set() const;
    bool is_resolved_image_Valid() const;

    QDateTime getResolutionTime() const;
    void setResolutionTime(const QDateTime &resolution_time);
    bool is_resolution_time_Set() const;
    bool is_resolution_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_specified_image;
    bool m_specified_image_isSet;
    bool m_specified_image_isValid;

    QString m_resolved_image;
    bool m_resolved_image_isSet;
    bool m_resolved_image_isValid;

    QDateTime m_resolution_time;
    bool m_resolution_time_isSet;
    bool m_resolution_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeployedImage)

#endif // OAIDeployedImage_H
