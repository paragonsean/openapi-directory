/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelPackageContainerDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelPackageContainerDefinition::OAIModelPackageContainerDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelPackageContainerDefinition::OAIModelPackageContainerDefinition() {
    this->initializeModel();
}

OAIModelPackageContainerDefinition::~OAIModelPackageContainerDefinition() {}

void OAIModelPackageContainerDefinition::initializeModel() {

    m_container_hostname_isSet = false;
    m_container_hostname_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_model_data_url_isSet = false;
    m_model_data_url_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_model_input_isSet = false;
    m_model_input_isValid = false;

    m_framework_isSet = false;
    m_framework_isValid = false;

    m_framework_version_isSet = false;
    m_framework_version_isValid = false;

    m_nearest_model_name_isSet = false;
    m_nearest_model_name_isValid = false;
}

void OAIModelPackageContainerDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelPackageContainerDefinition::fromJsonObject(QJsonObject json) {

    m_container_hostname_isValid = ::OpenAPI::fromJsonValue(m_container_hostname, json[QString("ContainerHostname")]);
    m_container_hostname_isSet = !json[QString("ContainerHostname")].isNull() && m_container_hostname_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("Image")]);
    m_image_isSet = !json[QString("Image")].isNull() && m_image_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("ImageDigest")]);
    m_image_digest_isSet = !json[QString("ImageDigest")].isNull() && m_image_digest_isValid;

    m_model_data_url_isValid = ::OpenAPI::fromJsonValue(m_model_data_url, json[QString("ModelDataUrl")]);
    m_model_data_url_isSet = !json[QString("ModelDataUrl")].isNull() && m_model_data_url_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_model_input_isValid = ::OpenAPI::fromJsonValue(m_model_input, json[QString("ModelInput")]);
    m_model_input_isSet = !json[QString("ModelInput")].isNull() && m_model_input_isValid;

    m_framework_isValid = ::OpenAPI::fromJsonValue(m_framework, json[QString("Framework")]);
    m_framework_isSet = !json[QString("Framework")].isNull() && m_framework_isValid;

    m_framework_version_isValid = ::OpenAPI::fromJsonValue(m_framework_version, json[QString("FrameworkVersion")]);
    m_framework_version_isSet = !json[QString("FrameworkVersion")].isNull() && m_framework_version_isValid;

    m_nearest_model_name_isValid = ::OpenAPI::fromJsonValue(m_nearest_model_name, json[QString("NearestModelName")]);
    m_nearest_model_name_isSet = !json[QString("NearestModelName")].isNull() && m_nearest_model_name_isValid;
}

QString OAIModelPackageContainerDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelPackageContainerDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_container_hostname_isSet) {
        obj.insert(QString("ContainerHostname"), ::OpenAPI::toJsonValue(m_container_hostname));
    }
    if (m_image_isSet) {
        obj.insert(QString("Image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("ImageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_model_data_url_isSet) {
        obj.insert(QString("ModelDataUrl"), ::OpenAPI::toJsonValue(m_model_data_url));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_model_input.isSet()) {
        obj.insert(QString("ModelInput"), ::OpenAPI::toJsonValue(m_model_input));
    }
    if (m_framework_isSet) {
        obj.insert(QString("Framework"), ::OpenAPI::toJsonValue(m_framework));
    }
    if (m_framework_version_isSet) {
        obj.insert(QString("FrameworkVersion"), ::OpenAPI::toJsonValue(m_framework_version));
    }
    if (m_nearest_model_name_isSet) {
        obj.insert(QString("NearestModelName"), ::OpenAPI::toJsonValue(m_nearest_model_name));
    }
    return obj;
}

QString OAIModelPackageContainerDefinition::getContainerHostname() const {
    return m_container_hostname;
}
void OAIModelPackageContainerDefinition::setContainerHostname(const QString &container_hostname) {
    m_container_hostname = container_hostname;
    m_container_hostname_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_container_hostname_Set() const{
    return m_container_hostname_isSet;
}

bool OAIModelPackageContainerDefinition::is_container_hostname_Valid() const{
    return m_container_hostname_isValid;
}

QString OAIModelPackageContainerDefinition::getImage() const {
    return m_image;
}
void OAIModelPackageContainerDefinition::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_image_Set() const{
    return m_image_isSet;
}

bool OAIModelPackageContainerDefinition::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIModelPackageContainerDefinition::getImageDigest() const {
    return m_image_digest;
}
void OAIModelPackageContainerDefinition::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIModelPackageContainerDefinition::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QString OAIModelPackageContainerDefinition::getModelDataUrl() const {
    return m_model_data_url;
}
void OAIModelPackageContainerDefinition::setModelDataUrl(const QString &model_data_url) {
    m_model_data_url = model_data_url;
    m_model_data_url_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_model_data_url_Set() const{
    return m_model_data_url_isSet;
}

bool OAIModelPackageContainerDefinition::is_model_data_url_Valid() const{
    return m_model_data_url_isValid;
}

QString OAIModelPackageContainerDefinition::getProductId() const {
    return m_product_id;
}
void OAIModelPackageContainerDefinition::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIModelPackageContainerDefinition::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QMap OAIModelPackageContainerDefinition::getEnvironment() const {
    return m_environment;
}
void OAIModelPackageContainerDefinition::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIModelPackageContainerDefinition::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIModelPackageContainerDefinition_ModelInput OAIModelPackageContainerDefinition::getModelInput() const {
    return m_model_input;
}
void OAIModelPackageContainerDefinition::setModelInput(const OAIModelPackageContainerDefinition_ModelInput &model_input) {
    m_model_input = model_input;
    m_model_input_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_model_input_Set() const{
    return m_model_input_isSet;
}

bool OAIModelPackageContainerDefinition::is_model_input_Valid() const{
    return m_model_input_isValid;
}

QString OAIModelPackageContainerDefinition::getFramework() const {
    return m_framework;
}
void OAIModelPackageContainerDefinition::setFramework(const QString &framework) {
    m_framework = framework;
    m_framework_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_framework_Set() const{
    return m_framework_isSet;
}

bool OAIModelPackageContainerDefinition::is_framework_Valid() const{
    return m_framework_isValid;
}

QString OAIModelPackageContainerDefinition::getFrameworkVersion() const {
    return m_framework_version;
}
void OAIModelPackageContainerDefinition::setFrameworkVersion(const QString &framework_version) {
    m_framework_version = framework_version;
    m_framework_version_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_framework_version_Set() const{
    return m_framework_version_isSet;
}

bool OAIModelPackageContainerDefinition::is_framework_version_Valid() const{
    return m_framework_version_isValid;
}

QString OAIModelPackageContainerDefinition::getNearestModelName() const {
    return m_nearest_model_name;
}
void OAIModelPackageContainerDefinition::setNearestModelName(const QString &nearest_model_name) {
    m_nearest_model_name = nearest_model_name;
    m_nearest_model_name_isSet = true;
}

bool OAIModelPackageContainerDefinition::is_nearest_model_name_Set() const{
    return m_nearest_model_name_isSet;
}

bool OAIModelPackageContainerDefinition::is_nearest_model_name_Valid() const{
    return m_nearest_model_name_isValid;
}

bool OAIModelPackageContainerDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_data_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nearest_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelPackageContainerDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_isValid && true;
}

} // namespace OpenAPI
