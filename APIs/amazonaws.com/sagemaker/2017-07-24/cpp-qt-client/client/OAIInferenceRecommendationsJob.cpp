/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferenceRecommendationsJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferenceRecommendationsJob::OAIInferenceRecommendationsJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferenceRecommendationsJob::OAIInferenceRecommendationsJob() {
    this->initializeModel();
}

OAIInferenceRecommendationsJob::~OAIInferenceRecommendationsJob() {}

void OAIInferenceRecommendationsJob::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_description_isSet = false;
    m_job_description_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_job_arn_isSet = false;
    m_job_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_sample_payload_url_isSet = false;
    m_sample_payload_url_isValid = false;

    m_model_package_version_arn_isSet = false;
    m_model_package_version_arn_isValid = false;
}

void OAIInferenceRecommendationsJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInferenceRecommendationsJob::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_description_isValid = ::OpenAPI::fromJsonValue(m_job_description, json[QString("JobDescription")]);
    m_job_description_isSet = !json[QString("JobDescription")].isNull() && m_job_description_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_job_arn_isValid = ::OpenAPI::fromJsonValue(m_job_arn, json[QString("JobArn")]);
    m_job_arn_isSet = !json[QString("JobArn")].isNull() && m_job_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("CompletionTime")]);
    m_completion_time_isSet = !json[QString("CompletionTime")].isNull() && m_completion_time_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_sample_payload_url_isValid = ::OpenAPI::fromJsonValue(m_sample_payload_url, json[QString("SamplePayloadUrl")]);
    m_sample_payload_url_isSet = !json[QString("SamplePayloadUrl")].isNull() && m_sample_payload_url_isValid;

    m_model_package_version_arn_isValid = ::OpenAPI::fromJsonValue(m_model_package_version_arn, json[QString("ModelPackageVersionArn")]);
    m_model_package_version_arn_isSet = !json[QString("ModelPackageVersionArn")].isNull() && m_model_package_version_arn_isValid;
}

QString OAIInferenceRecommendationsJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInferenceRecommendationsJob::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_description_isSet) {
        obj.insert(QString("JobDescription"), ::OpenAPI::toJsonValue(m_job_description));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_job_arn_isSet) {
        obj.insert(QString("JobArn"), ::OpenAPI::toJsonValue(m_job_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("CompletionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_sample_payload_url_isSet) {
        obj.insert(QString("SamplePayloadUrl"), ::OpenAPI::toJsonValue(m_sample_payload_url));
    }
    if (m_model_package_version_arn_isSet) {
        obj.insert(QString("ModelPackageVersionArn"), ::OpenAPI::toJsonValue(m_model_package_version_arn));
    }
    return obj;
}

QString OAIInferenceRecommendationsJob::getJobName() const {
    return m_job_name;
}
void OAIInferenceRecommendationsJob::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIInferenceRecommendationsJob::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAIInferenceRecommendationsJob::getJobDescription() const {
    return m_job_description;
}
void OAIInferenceRecommendationsJob::setJobDescription(const QString &job_description) {
    m_job_description = job_description;
    m_job_description_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_job_description_Set() const{
    return m_job_description_isSet;
}

bool OAIInferenceRecommendationsJob::is_job_description_Valid() const{
    return m_job_description_isValid;
}

OAIRecommendationJobType OAIInferenceRecommendationsJob::getJobType() const {
    return m_job_type;
}
void OAIInferenceRecommendationsJob::setJobType(const OAIRecommendationJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIInferenceRecommendationsJob::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAIInferenceRecommendationsJob::getJobArn() const {
    return m_job_arn;
}
void OAIInferenceRecommendationsJob::setJobArn(const QString &job_arn) {
    m_job_arn = job_arn;
    m_job_arn_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_job_arn_Set() const{
    return m_job_arn_isSet;
}

bool OAIInferenceRecommendationsJob::is_job_arn_Valid() const{
    return m_job_arn_isValid;
}

OAIRecommendationJobStatus OAIInferenceRecommendationsJob::getStatus() const {
    return m_status;
}
void OAIInferenceRecommendationsJob::setStatus(const OAIRecommendationJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInferenceRecommendationsJob::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIInferenceRecommendationsJob::getCreationTime() const {
    return m_creation_time;
}
void OAIInferenceRecommendationsJob::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIInferenceRecommendationsJob::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIInferenceRecommendationsJob::getCompletionTime() const {
    return m_completion_time;
}
void OAIInferenceRecommendationsJob::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIInferenceRecommendationsJob::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QString OAIInferenceRecommendationsJob::getRoleArn() const {
    return m_role_arn;
}
void OAIInferenceRecommendationsJob::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIInferenceRecommendationsJob::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QDateTime OAIInferenceRecommendationsJob::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIInferenceRecommendationsJob::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIInferenceRecommendationsJob::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIInferenceRecommendationsJob::getFailureReason() const {
    return m_failure_reason;
}
void OAIInferenceRecommendationsJob::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIInferenceRecommendationsJob::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIInferenceRecommendationsJob::getModelName() const {
    return m_model_name;
}
void OAIInferenceRecommendationsJob::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIInferenceRecommendationsJob::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIInferenceRecommendationsJob::getSamplePayloadUrl() const {
    return m_sample_payload_url;
}
void OAIInferenceRecommendationsJob::setSamplePayloadUrl(const QString &sample_payload_url) {
    m_sample_payload_url = sample_payload_url;
    m_sample_payload_url_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_sample_payload_url_Set() const{
    return m_sample_payload_url_isSet;
}

bool OAIInferenceRecommendationsJob::is_sample_payload_url_Valid() const{
    return m_sample_payload_url_isValid;
}

QString OAIInferenceRecommendationsJob::getModelPackageVersionArn() const {
    return m_model_package_version_arn;
}
void OAIInferenceRecommendationsJob::setModelPackageVersionArn(const QString &model_package_version_arn) {
    m_model_package_version_arn = model_package_version_arn;
    m_model_package_version_arn_isSet = true;
}

bool OAIInferenceRecommendationsJob::is_model_package_version_arn_Set() const{
    return m_model_package_version_arn_isSet;
}

bool OAIInferenceRecommendationsJob::is_model_package_version_arn_Valid() const{
    return m_model_package_version_arn_isValid;
}

bool OAIInferenceRecommendationsJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_payload_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInferenceRecommendationsJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_name_isValid && m_job_description_isValid && m_job_type_isValid && m_job_arn_isValid && m_status_isValid && m_creation_time_isValid && m_role_arn_isValid && m_last_modified_time_isValid && true;
}

} // namespace OpenAPI
