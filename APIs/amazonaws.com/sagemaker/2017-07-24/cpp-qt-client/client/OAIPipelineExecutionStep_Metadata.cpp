/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineExecutionStep_Metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineExecutionStep_Metadata::OAIPipelineExecutionStep_Metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineExecutionStep_Metadata::OAIPipelineExecutionStep_Metadata() {
    this->initializeModel();
}

OAIPipelineExecutionStep_Metadata::~OAIPipelineExecutionStep_Metadata() {}

void OAIPipelineExecutionStep_Metadata::initializeModel() {

    m_training_job_isSet = false;
    m_training_job_isValid = false;

    m_processing_job_isSet = false;
    m_processing_job_isValid = false;

    m_transform_job_isSet = false;
    m_transform_job_isValid = false;

    m_tuning_job_isSet = false;
    m_tuning_job_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_register_model_isSet = false;
    m_register_model_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_callback_isSet = false;
    m_callback_isValid = false;

    m_lambda_isSet = false;
    m_lambda_isValid = false;

    m_quality_check_isSet = false;
    m_quality_check_isValid = false;

    m_clarify_check_isSet = false;
    m_clarify_check_isValid = false;

    m_emr_isSet = false;
    m_emr_isValid = false;

    m_fail_isSet = false;
    m_fail_isValid = false;

    m_auto_ml_job_isSet = false;
    m_auto_ml_job_isValid = false;
}

void OAIPipelineExecutionStep_Metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineExecutionStep_Metadata::fromJsonObject(QJsonObject json) {

    m_training_job_isValid = ::OpenAPI::fromJsonValue(m_training_job, json[QString("TrainingJob")]);
    m_training_job_isSet = !json[QString("TrainingJob")].isNull() && m_training_job_isValid;

    m_processing_job_isValid = ::OpenAPI::fromJsonValue(m_processing_job, json[QString("ProcessingJob")]);
    m_processing_job_isSet = !json[QString("ProcessingJob")].isNull() && m_processing_job_isValid;

    m_transform_job_isValid = ::OpenAPI::fromJsonValue(m_transform_job, json[QString("TransformJob")]);
    m_transform_job_isSet = !json[QString("TransformJob")].isNull() && m_transform_job_isValid;

    m_tuning_job_isValid = ::OpenAPI::fromJsonValue(m_tuning_job, json[QString("TuningJob")]);
    m_tuning_job_isSet = !json[QString("TuningJob")].isNull() && m_tuning_job_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("Model")]);
    m_model_isSet = !json[QString("Model")].isNull() && m_model_isValid;

    m_register_model_isValid = ::OpenAPI::fromJsonValue(m_register_model, json[QString("RegisterModel")]);
    m_register_model_isSet = !json[QString("RegisterModel")].isNull() && m_register_model_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("Condition")]);
    m_condition_isSet = !json[QString("Condition")].isNull() && m_condition_isValid;

    m_callback_isValid = ::OpenAPI::fromJsonValue(m_callback, json[QString("Callback")]);
    m_callback_isSet = !json[QString("Callback")].isNull() && m_callback_isValid;

    m_lambda_isValid = ::OpenAPI::fromJsonValue(m_lambda, json[QString("Lambda")]);
    m_lambda_isSet = !json[QString("Lambda")].isNull() && m_lambda_isValid;

    m_quality_check_isValid = ::OpenAPI::fromJsonValue(m_quality_check, json[QString("QualityCheck")]);
    m_quality_check_isSet = !json[QString("QualityCheck")].isNull() && m_quality_check_isValid;

    m_clarify_check_isValid = ::OpenAPI::fromJsonValue(m_clarify_check, json[QString("ClarifyCheck")]);
    m_clarify_check_isSet = !json[QString("ClarifyCheck")].isNull() && m_clarify_check_isValid;

    m_emr_isValid = ::OpenAPI::fromJsonValue(m_emr, json[QString("EMR")]);
    m_emr_isSet = !json[QString("EMR")].isNull() && m_emr_isValid;

    m_fail_isValid = ::OpenAPI::fromJsonValue(m_fail, json[QString("Fail")]);
    m_fail_isSet = !json[QString("Fail")].isNull() && m_fail_isValid;

    m_auto_ml_job_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job, json[QString("AutoMLJob")]);
    m_auto_ml_job_isSet = !json[QString("AutoMLJob")].isNull() && m_auto_ml_job_isValid;
}

QString OAIPipelineExecutionStep_Metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineExecutionStep_Metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_training_job.isSet()) {
        obj.insert(QString("TrainingJob"), ::OpenAPI::toJsonValue(m_training_job));
    }
    if (m_processing_job.isSet()) {
        obj.insert(QString("ProcessingJob"), ::OpenAPI::toJsonValue(m_processing_job));
    }
    if (m_transform_job.isSet()) {
        obj.insert(QString("TransformJob"), ::OpenAPI::toJsonValue(m_transform_job));
    }
    if (m_tuning_job.isSet()) {
        obj.insert(QString("TuningJob"), ::OpenAPI::toJsonValue(m_tuning_job));
    }
    if (m_model.isSet()) {
        obj.insert(QString("Model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_register_model.isSet()) {
        obj.insert(QString("RegisterModel"), ::OpenAPI::toJsonValue(m_register_model));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("Condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_callback.isSet()) {
        obj.insert(QString("Callback"), ::OpenAPI::toJsonValue(m_callback));
    }
    if (m_lambda.isSet()) {
        obj.insert(QString("Lambda"), ::OpenAPI::toJsonValue(m_lambda));
    }
    if (m_quality_check.isSet()) {
        obj.insert(QString("QualityCheck"), ::OpenAPI::toJsonValue(m_quality_check));
    }
    if (m_clarify_check.isSet()) {
        obj.insert(QString("ClarifyCheck"), ::OpenAPI::toJsonValue(m_clarify_check));
    }
    if (m_emr.isSet()) {
        obj.insert(QString("EMR"), ::OpenAPI::toJsonValue(m_emr));
    }
    if (m_fail.isSet()) {
        obj.insert(QString("Fail"), ::OpenAPI::toJsonValue(m_fail));
    }
    if (m_auto_ml_job.isSet()) {
        obj.insert(QString("AutoMLJob"), ::OpenAPI::toJsonValue(m_auto_ml_job));
    }
    return obj;
}

OAIPipelineExecutionStepMetadata_TrainingJob OAIPipelineExecutionStep_Metadata::getTrainingJob() const {
    return m_training_job;
}
void OAIPipelineExecutionStep_Metadata::setTrainingJob(const OAIPipelineExecutionStepMetadata_TrainingJob &training_job) {
    m_training_job = training_job;
    m_training_job_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_training_job_Set() const{
    return m_training_job_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_training_job_Valid() const{
    return m_training_job_isValid;
}

OAIPipelineExecutionStepMetadata_ProcessingJob OAIPipelineExecutionStep_Metadata::getProcessingJob() const {
    return m_processing_job;
}
void OAIPipelineExecutionStep_Metadata::setProcessingJob(const OAIPipelineExecutionStepMetadata_ProcessingJob &processing_job) {
    m_processing_job = processing_job;
    m_processing_job_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_processing_job_Set() const{
    return m_processing_job_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_processing_job_Valid() const{
    return m_processing_job_isValid;
}

OAIPipelineExecutionStepMetadata_TransformJob OAIPipelineExecutionStep_Metadata::getTransformJob() const {
    return m_transform_job;
}
void OAIPipelineExecutionStep_Metadata::setTransformJob(const OAIPipelineExecutionStepMetadata_TransformJob &transform_job) {
    m_transform_job = transform_job;
    m_transform_job_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_transform_job_Set() const{
    return m_transform_job_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_transform_job_Valid() const{
    return m_transform_job_isValid;
}

OAIPipelineExecutionStepMetadata_TuningJob OAIPipelineExecutionStep_Metadata::getTuningJob() const {
    return m_tuning_job;
}
void OAIPipelineExecutionStep_Metadata::setTuningJob(const OAIPipelineExecutionStepMetadata_TuningJob &tuning_job) {
    m_tuning_job = tuning_job;
    m_tuning_job_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_tuning_job_Set() const{
    return m_tuning_job_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_tuning_job_Valid() const{
    return m_tuning_job_isValid;
}

OAIPipelineExecutionStepMetadata_Model OAIPipelineExecutionStep_Metadata::getModel() const {
    return m_model;
}
void OAIPipelineExecutionStep_Metadata::setModel(const OAIPipelineExecutionStepMetadata_Model &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_model_Set() const{
    return m_model_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_model_Valid() const{
    return m_model_isValid;
}

OAIPipelineExecutionStepMetadata_RegisterModel OAIPipelineExecutionStep_Metadata::getRegisterModel() const {
    return m_register_model;
}
void OAIPipelineExecutionStep_Metadata::setRegisterModel(const OAIPipelineExecutionStepMetadata_RegisterModel &register_model) {
    m_register_model = register_model;
    m_register_model_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_register_model_Set() const{
    return m_register_model_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_register_model_Valid() const{
    return m_register_model_isValid;
}

OAIPipelineExecutionStepMetadata_Condition OAIPipelineExecutionStep_Metadata::getCondition() const {
    return m_condition;
}
void OAIPipelineExecutionStep_Metadata::setCondition(const OAIPipelineExecutionStepMetadata_Condition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_condition_Valid() const{
    return m_condition_isValid;
}

OAIPipelineExecutionStepMetadata_Callback OAIPipelineExecutionStep_Metadata::getCallback() const {
    return m_callback;
}
void OAIPipelineExecutionStep_Metadata::setCallback(const OAIPipelineExecutionStepMetadata_Callback &callback) {
    m_callback = callback;
    m_callback_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_callback_Set() const{
    return m_callback_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_callback_Valid() const{
    return m_callback_isValid;
}

OAIPipelineExecutionStepMetadata_Lambda OAIPipelineExecutionStep_Metadata::getLambda() const {
    return m_lambda;
}
void OAIPipelineExecutionStep_Metadata::setLambda(const OAIPipelineExecutionStepMetadata_Lambda &lambda) {
    m_lambda = lambda;
    m_lambda_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_lambda_Set() const{
    return m_lambda_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_lambda_Valid() const{
    return m_lambda_isValid;
}

OAIPipelineExecutionStepMetadata_QualityCheck OAIPipelineExecutionStep_Metadata::getQualityCheck() const {
    return m_quality_check;
}
void OAIPipelineExecutionStep_Metadata::setQualityCheck(const OAIPipelineExecutionStepMetadata_QualityCheck &quality_check) {
    m_quality_check = quality_check;
    m_quality_check_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_quality_check_Set() const{
    return m_quality_check_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_quality_check_Valid() const{
    return m_quality_check_isValid;
}

OAIPipelineExecutionStepMetadata_ClarifyCheck OAIPipelineExecutionStep_Metadata::getClarifyCheck() const {
    return m_clarify_check;
}
void OAIPipelineExecutionStep_Metadata::setClarifyCheck(const OAIPipelineExecutionStepMetadata_ClarifyCheck &clarify_check) {
    m_clarify_check = clarify_check;
    m_clarify_check_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_clarify_check_Set() const{
    return m_clarify_check_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_clarify_check_Valid() const{
    return m_clarify_check_isValid;
}

OAIPipelineExecutionStepMetadata_EMR OAIPipelineExecutionStep_Metadata::getEmr() const {
    return m_emr;
}
void OAIPipelineExecutionStep_Metadata::setEmr(const OAIPipelineExecutionStepMetadata_EMR &emr) {
    m_emr = emr;
    m_emr_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_emr_Set() const{
    return m_emr_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_emr_Valid() const{
    return m_emr_isValid;
}

OAIPipelineExecutionStepMetadata_Fail OAIPipelineExecutionStep_Metadata::getFail() const {
    return m_fail;
}
void OAIPipelineExecutionStep_Metadata::setFail(const OAIPipelineExecutionStepMetadata_Fail &fail) {
    m_fail = fail;
    m_fail_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_fail_Set() const{
    return m_fail_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_fail_Valid() const{
    return m_fail_isValid;
}

OAIPipelineExecutionStepMetadata_AutoMLJob OAIPipelineExecutionStep_Metadata::getAutoMlJob() const {
    return m_auto_ml_job;
}
void OAIPipelineExecutionStep_Metadata::setAutoMlJob(const OAIPipelineExecutionStepMetadata_AutoMLJob &auto_ml_job) {
    m_auto_ml_job = auto_ml_job;
    m_auto_ml_job_isSet = true;
}

bool OAIPipelineExecutionStep_Metadata::is_auto_ml_job_Set() const{
    return m_auto_ml_job_isSet;
}

bool OAIPipelineExecutionStep_Metadata::is_auto_ml_job_Valid() const{
    return m_auto_ml_job_isValid;
}

bool OAIPipelineExecutionStep_Metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_training_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuning_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_register_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clarify_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineExecutionStep_Metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
