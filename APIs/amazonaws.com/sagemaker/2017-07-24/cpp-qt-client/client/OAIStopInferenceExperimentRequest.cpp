/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopInferenceExperimentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopInferenceExperimentRequest::OAIStopInferenceExperimentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopInferenceExperimentRequest::OAIStopInferenceExperimentRequest() {
    this->initializeModel();
}

OAIStopInferenceExperimentRequest::~OAIStopInferenceExperimentRequest() {}

void OAIStopInferenceExperimentRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_model_variant_actions_isSet = false;
    m_model_variant_actions_isValid = false;

    m_desired_model_variants_isSet = false;
    m_desired_model_variants_isValid = false;

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIStopInferenceExperimentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopInferenceExperimentRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_model_variant_actions_isValid = ::OpenAPI::fromJsonValue(m_model_variant_actions, json[QString("ModelVariantActions")]);
    m_model_variant_actions_isSet = !json[QString("ModelVariantActions")].isNull() && m_model_variant_actions_isValid;

    m_desired_model_variants_isValid = ::OpenAPI::fromJsonValue(m_desired_model_variants, json[QString("DesiredModelVariants")]);
    m_desired_model_variants_isSet = !json[QString("DesiredModelVariants")].isNull() && m_desired_model_variants_isValid;

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("DesiredState")]);
    m_desired_state_isSet = !json[QString("DesiredState")].isNull() && m_desired_state_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("Reason")]);
    m_reason_isSet = !json[QString("Reason")].isNull() && m_reason_isValid;
}

QString OAIStopInferenceExperimentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopInferenceExperimentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_model_variant_actions.isSet()) {
        obj.insert(QString("ModelVariantActions"), ::OpenAPI::toJsonValue(m_model_variant_actions));
    }
    if (m_desired_model_variants.isSet()) {
        obj.insert(QString("DesiredModelVariants"), ::OpenAPI::toJsonValue(m_desired_model_variants));
    }
    if (m_desired_state.isSet()) {
        obj.insert(QString("DesiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_reason_isSet) {
        obj.insert(QString("Reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIStopInferenceExperimentRequest::getName() const {
    return m_name;
}
void OAIStopInferenceExperimentRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStopInferenceExperimentRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStopInferenceExperimentRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAIStopInferenceExperimentRequest::getModelVariantActions() const {
    return m_model_variant_actions;
}
void OAIStopInferenceExperimentRequest::setModelVariantActions(const QMap &model_variant_actions) {
    m_model_variant_actions = model_variant_actions;
    m_model_variant_actions_isSet = true;
}

bool OAIStopInferenceExperimentRequest::is_model_variant_actions_Set() const{
    return m_model_variant_actions_isSet;
}

bool OAIStopInferenceExperimentRequest::is_model_variant_actions_Valid() const{
    return m_model_variant_actions_isValid;
}

QList OAIStopInferenceExperimentRequest::getDesiredModelVariants() const {
    return m_desired_model_variants;
}
void OAIStopInferenceExperimentRequest::setDesiredModelVariants(const QList &desired_model_variants) {
    m_desired_model_variants = desired_model_variants;
    m_desired_model_variants_isSet = true;
}

bool OAIStopInferenceExperimentRequest::is_desired_model_variants_Set() const{
    return m_desired_model_variants_isSet;
}

bool OAIStopInferenceExperimentRequest::is_desired_model_variants_Valid() const{
    return m_desired_model_variants_isValid;
}

OAIInferenceExperimentStopDesiredState OAIStopInferenceExperimentRequest::getDesiredState() const {
    return m_desired_state;
}
void OAIStopInferenceExperimentRequest::setDesiredState(const OAIInferenceExperimentStopDesiredState &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAIStopInferenceExperimentRequest::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAIStopInferenceExperimentRequest::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

QString OAIStopInferenceExperimentRequest::getReason() const {
    return m_reason;
}
void OAIStopInferenceExperimentRequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIStopInferenceExperimentRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIStopInferenceExperimentRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIStopInferenceExperimentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_variant_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_model_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopInferenceExperimentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_model_variant_actions_isValid && true;
}

} // namespace OpenAPI
