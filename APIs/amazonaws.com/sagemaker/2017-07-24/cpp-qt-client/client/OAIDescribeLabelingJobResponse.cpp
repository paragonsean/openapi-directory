/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLabelingJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLabelingJobResponse::OAIDescribeLabelingJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLabelingJobResponse::OAIDescribeLabelingJobResponse() {
    this->initializeModel();
}

OAIDescribeLabelingJobResponse::~OAIDescribeLabelingJobResponse() {}

void OAIDescribeLabelingJobResponse::initializeModel() {

    m_labeling_job_status_isSet = false;
    m_labeling_job_status_isValid = false;

    m_label_counters_isSet = false;
    m_label_counters_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_job_reference_code_isSet = false;
    m_job_reference_code_isValid = false;

    m_labeling_job_name_isSet = false;
    m_labeling_job_name_isValid = false;

    m_labeling_job_arn_isSet = false;
    m_labeling_job_arn_isValid = false;

    m_label_attribute_name_isSet = false;
    m_label_attribute_name_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_label_category_config_s3_uri_isSet = false;
    m_label_category_config_s3_uri_isValid = false;

    m_stopping_conditions_isSet = false;
    m_stopping_conditions_isValid = false;

    m_labeling_job_algorithms_config_isSet = false;
    m_labeling_job_algorithms_config_isValid = false;

    m_human_task_config_isSet = false;
    m_human_task_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_labeling_job_output_isSet = false;
    m_labeling_job_output_isValid = false;
}

void OAIDescribeLabelingJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLabelingJobResponse::fromJsonObject(QJsonObject json) {

    m_labeling_job_status_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_status, json[QString("LabelingJobStatus")]);
    m_labeling_job_status_isSet = !json[QString("LabelingJobStatus")].isNull() && m_labeling_job_status_isValid;

    m_label_counters_isValid = ::OpenAPI::fromJsonValue(m_label_counters, json[QString("LabelCounters")]);
    m_label_counters_isSet = !json[QString("LabelCounters")].isNull() && m_label_counters_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_job_reference_code_isValid = ::OpenAPI::fromJsonValue(m_job_reference_code, json[QString("JobReferenceCode")]);
    m_job_reference_code_isSet = !json[QString("JobReferenceCode")].isNull() && m_job_reference_code_isValid;

    m_labeling_job_name_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_name, json[QString("LabelingJobName")]);
    m_labeling_job_name_isSet = !json[QString("LabelingJobName")].isNull() && m_labeling_job_name_isValid;

    m_labeling_job_arn_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_arn, json[QString("LabelingJobArn")]);
    m_labeling_job_arn_isSet = !json[QString("LabelingJobArn")].isNull() && m_labeling_job_arn_isValid;

    m_label_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_label_attribute_name, json[QString("LabelAttributeName")]);
    m_label_attribute_name_isSet = !json[QString("LabelAttributeName")].isNull() && m_label_attribute_name_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("InputConfig")]);
    m_input_config_isSet = !json[QString("InputConfig")].isNull() && m_input_config_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("OutputConfig")]);
    m_output_config_isSet = !json[QString("OutputConfig")].isNull() && m_output_config_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_label_category_config_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_label_category_config_s3_uri, json[QString("LabelCategoryConfigS3Uri")]);
    m_label_category_config_s3_uri_isSet = !json[QString("LabelCategoryConfigS3Uri")].isNull() && m_label_category_config_s3_uri_isValid;

    m_stopping_conditions_isValid = ::OpenAPI::fromJsonValue(m_stopping_conditions, json[QString("StoppingConditions")]);
    m_stopping_conditions_isSet = !json[QString("StoppingConditions")].isNull() && m_stopping_conditions_isValid;

    m_labeling_job_algorithms_config_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_algorithms_config, json[QString("LabelingJobAlgorithmsConfig")]);
    m_labeling_job_algorithms_config_isSet = !json[QString("LabelingJobAlgorithmsConfig")].isNull() && m_labeling_job_algorithms_config_isValid;

    m_human_task_config_isValid = ::OpenAPI::fromJsonValue(m_human_task_config, json[QString("HumanTaskConfig")]);
    m_human_task_config_isSet = !json[QString("HumanTaskConfig")].isNull() && m_human_task_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_labeling_job_output_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_output, json[QString("LabelingJobOutput")]);
    m_labeling_job_output_isSet = !json[QString("LabelingJobOutput")].isNull() && m_labeling_job_output_isValid;
}

QString OAIDescribeLabelingJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLabelingJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_labeling_job_status.isSet()) {
        obj.insert(QString("LabelingJobStatus"), ::OpenAPI::toJsonValue(m_labeling_job_status));
    }
    if (m_label_counters.isSet()) {
        obj.insert(QString("LabelCounters"), ::OpenAPI::toJsonValue(m_label_counters));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_job_reference_code_isSet) {
        obj.insert(QString("JobReferenceCode"), ::OpenAPI::toJsonValue(m_job_reference_code));
    }
    if (m_labeling_job_name_isSet) {
        obj.insert(QString("LabelingJobName"), ::OpenAPI::toJsonValue(m_labeling_job_name));
    }
    if (m_labeling_job_arn_isSet) {
        obj.insert(QString("LabelingJobArn"), ::OpenAPI::toJsonValue(m_labeling_job_arn));
    }
    if (m_label_attribute_name_isSet) {
        obj.insert(QString("LabelAttributeName"), ::OpenAPI::toJsonValue(m_label_attribute_name));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("InputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("OutputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_label_category_config_s3_uri_isSet) {
        obj.insert(QString("LabelCategoryConfigS3Uri"), ::OpenAPI::toJsonValue(m_label_category_config_s3_uri));
    }
    if (m_stopping_conditions.isSet()) {
        obj.insert(QString("StoppingConditions"), ::OpenAPI::toJsonValue(m_stopping_conditions));
    }
    if (m_labeling_job_algorithms_config.isSet()) {
        obj.insert(QString("LabelingJobAlgorithmsConfig"), ::OpenAPI::toJsonValue(m_labeling_job_algorithms_config));
    }
    if (m_human_task_config.isSet()) {
        obj.insert(QString("HumanTaskConfig"), ::OpenAPI::toJsonValue(m_human_task_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_labeling_job_output.isSet()) {
        obj.insert(QString("LabelingJobOutput"), ::OpenAPI::toJsonValue(m_labeling_job_output));
    }
    return obj;
}

OAILabelingJobStatus OAIDescribeLabelingJobResponse::getLabelingJobStatus() const {
    return m_labeling_job_status;
}
void OAIDescribeLabelingJobResponse::setLabelingJobStatus(const OAILabelingJobStatus &labeling_job_status) {
    m_labeling_job_status = labeling_job_status;
    m_labeling_job_status_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_status_Set() const{
    return m_labeling_job_status_isSet;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_status_Valid() const{
    return m_labeling_job_status_isValid;
}

OAIDescribeLabelingJobResponse_LabelCounters OAIDescribeLabelingJobResponse::getLabelCounters() const {
    return m_label_counters;
}
void OAIDescribeLabelingJobResponse::setLabelCounters(const OAIDescribeLabelingJobResponse_LabelCounters &label_counters) {
    m_label_counters = label_counters;
    m_label_counters_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_label_counters_Set() const{
    return m_label_counters_isSet;
}

bool OAIDescribeLabelingJobResponse::is_label_counters_Valid() const{
    return m_label_counters_isValid;
}

QString OAIDescribeLabelingJobResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIDescribeLabelingJobResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDescribeLabelingJobResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QDateTime OAIDescribeLabelingJobResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeLabelingJobResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeLabelingJobResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeLabelingJobResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeLabelingJobResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeLabelingJobResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIDescribeLabelingJobResponse::getJobReferenceCode() const {
    return m_job_reference_code;
}
void OAIDescribeLabelingJobResponse::setJobReferenceCode(const QString &job_reference_code) {
    m_job_reference_code = job_reference_code;
    m_job_reference_code_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_job_reference_code_Set() const{
    return m_job_reference_code_isSet;
}

bool OAIDescribeLabelingJobResponse::is_job_reference_code_Valid() const{
    return m_job_reference_code_isValid;
}

QString OAIDescribeLabelingJobResponse::getLabelingJobName() const {
    return m_labeling_job_name;
}
void OAIDescribeLabelingJobResponse::setLabelingJobName(const QString &labeling_job_name) {
    m_labeling_job_name = labeling_job_name;
    m_labeling_job_name_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_name_Set() const{
    return m_labeling_job_name_isSet;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_name_Valid() const{
    return m_labeling_job_name_isValid;
}

QString OAIDescribeLabelingJobResponse::getLabelingJobArn() const {
    return m_labeling_job_arn;
}
void OAIDescribeLabelingJobResponse::setLabelingJobArn(const QString &labeling_job_arn) {
    m_labeling_job_arn = labeling_job_arn;
    m_labeling_job_arn_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_arn_Set() const{
    return m_labeling_job_arn_isSet;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_arn_Valid() const{
    return m_labeling_job_arn_isValid;
}

QString OAIDescribeLabelingJobResponse::getLabelAttributeName() const {
    return m_label_attribute_name;
}
void OAIDescribeLabelingJobResponse::setLabelAttributeName(const QString &label_attribute_name) {
    m_label_attribute_name = label_attribute_name;
    m_label_attribute_name_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_label_attribute_name_Set() const{
    return m_label_attribute_name_isSet;
}

bool OAIDescribeLabelingJobResponse::is_label_attribute_name_Valid() const{
    return m_label_attribute_name_isValid;
}

OAIDescribeLabelingJobResponse_InputConfig OAIDescribeLabelingJobResponse::getInputConfig() const {
    return m_input_config;
}
void OAIDescribeLabelingJobResponse::setInputConfig(const OAIDescribeLabelingJobResponse_InputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIDescribeLabelingJobResponse::is_input_config_Valid() const{
    return m_input_config_isValid;
}

OAIDescribeLabelingJobResponse_OutputConfig OAIDescribeLabelingJobResponse::getOutputConfig() const {
    return m_output_config;
}
void OAIDescribeLabelingJobResponse::setOutputConfig(const OAIDescribeLabelingJobResponse_OutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIDescribeLabelingJobResponse::is_output_config_Valid() const{
    return m_output_config_isValid;
}

QString OAIDescribeLabelingJobResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeLabelingJobResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeLabelingJobResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIDescribeLabelingJobResponse::getLabelCategoryConfigS3Uri() const {
    return m_label_category_config_s3_uri;
}
void OAIDescribeLabelingJobResponse::setLabelCategoryConfigS3Uri(const QString &label_category_config_s3_uri) {
    m_label_category_config_s3_uri = label_category_config_s3_uri;
    m_label_category_config_s3_uri_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_label_category_config_s3_uri_Set() const{
    return m_label_category_config_s3_uri_isSet;
}

bool OAIDescribeLabelingJobResponse::is_label_category_config_s3_uri_Valid() const{
    return m_label_category_config_s3_uri_isValid;
}

OAIDescribeLabelingJobResponse_StoppingConditions OAIDescribeLabelingJobResponse::getStoppingConditions() const {
    return m_stopping_conditions;
}
void OAIDescribeLabelingJobResponse::setStoppingConditions(const OAIDescribeLabelingJobResponse_StoppingConditions &stopping_conditions) {
    m_stopping_conditions = stopping_conditions;
    m_stopping_conditions_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_stopping_conditions_Set() const{
    return m_stopping_conditions_isSet;
}

bool OAIDescribeLabelingJobResponse::is_stopping_conditions_Valid() const{
    return m_stopping_conditions_isValid;
}

OAIDescribeLabelingJobResponse_LabelingJobAlgorithmsConfig OAIDescribeLabelingJobResponse::getLabelingJobAlgorithmsConfig() const {
    return m_labeling_job_algorithms_config;
}
void OAIDescribeLabelingJobResponse::setLabelingJobAlgorithmsConfig(const OAIDescribeLabelingJobResponse_LabelingJobAlgorithmsConfig &labeling_job_algorithms_config) {
    m_labeling_job_algorithms_config = labeling_job_algorithms_config;
    m_labeling_job_algorithms_config_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_algorithms_config_Set() const{
    return m_labeling_job_algorithms_config_isSet;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_algorithms_config_Valid() const{
    return m_labeling_job_algorithms_config_isValid;
}

OAIDescribeLabelingJobResponse_HumanTaskConfig OAIDescribeLabelingJobResponse::getHumanTaskConfig() const {
    return m_human_task_config;
}
void OAIDescribeLabelingJobResponse::setHumanTaskConfig(const OAIDescribeLabelingJobResponse_HumanTaskConfig &human_task_config) {
    m_human_task_config = human_task_config;
    m_human_task_config_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_human_task_config_Set() const{
    return m_human_task_config_isSet;
}

bool OAIDescribeLabelingJobResponse::is_human_task_config_Valid() const{
    return m_human_task_config_isValid;
}

QList OAIDescribeLabelingJobResponse::getTags() const {
    return m_tags;
}
void OAIDescribeLabelingJobResponse::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeLabelingJobResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDescribeLabelingJobResponse_LabelingJobOutput OAIDescribeLabelingJobResponse::getLabelingJobOutput() const {
    return m_labeling_job_output;
}
void OAIDescribeLabelingJobResponse::setLabelingJobOutput(const OAIDescribeLabelingJobResponse_LabelingJobOutput &labeling_job_output) {
    m_labeling_job_output = labeling_job_output;
    m_labeling_job_output_isSet = true;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_output_Set() const{
    return m_labeling_job_output_isSet;
}

bool OAIDescribeLabelingJobResponse::is_labeling_job_output_Valid() const{
    return m_labeling_job_output_isValid;
}

bool OAIDescribeLabelingJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labeling_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_counters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_reference_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_category_config_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_algorithms_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_task_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_output.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLabelingJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_labeling_job_status_isValid && m_label_counters_isValid && m_creation_time_isValid && m_last_modified_time_isValid && m_job_reference_code_isValid && m_labeling_job_name_isValid && m_labeling_job_arn_isValid && m_input_config_isValid && m_output_config_isValid && m_role_arn_isValid && m_human_task_config_isValid && true;
}

} // namespace OpenAPI
