/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTransformJobRequest_DataProcessing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTransformJobRequest_DataProcessing::OAICreateTransformJobRequest_DataProcessing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTransformJobRequest_DataProcessing::OAICreateTransformJobRequest_DataProcessing() {
    this->initializeModel();
}

OAICreateTransformJobRequest_DataProcessing::~OAICreateTransformJobRequest_DataProcessing() {}

void OAICreateTransformJobRequest_DataProcessing::initializeModel() {

    m_input_filter_isSet = false;
    m_input_filter_isValid = false;

    m_output_filter_isSet = false;
    m_output_filter_isValid = false;

    m_join_source_isSet = false;
    m_join_source_isValid = false;
}

void OAICreateTransformJobRequest_DataProcessing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTransformJobRequest_DataProcessing::fromJsonObject(QJsonObject json) {

    m_input_filter_isValid = ::OpenAPI::fromJsonValue(m_input_filter, json[QString("InputFilter")]);
    m_input_filter_isSet = !json[QString("InputFilter")].isNull() && m_input_filter_isValid;

    m_output_filter_isValid = ::OpenAPI::fromJsonValue(m_output_filter, json[QString("OutputFilter")]);
    m_output_filter_isSet = !json[QString("OutputFilter")].isNull() && m_output_filter_isValid;

    m_join_source_isValid = ::OpenAPI::fromJsonValue(m_join_source, json[QString("JoinSource")]);
    m_join_source_isSet = !json[QString("JoinSource")].isNull() && m_join_source_isValid;
}

QString OAICreateTransformJobRequest_DataProcessing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTransformJobRequest_DataProcessing::asJsonObject() const {
    QJsonObject obj;
    if (m_input_filter_isSet) {
        obj.insert(QString("InputFilter"), ::OpenAPI::toJsonValue(m_input_filter));
    }
    if (m_output_filter_isSet) {
        obj.insert(QString("OutputFilter"), ::OpenAPI::toJsonValue(m_output_filter));
    }
    if (m_join_source.isSet()) {
        obj.insert(QString("JoinSource"), ::OpenAPI::toJsonValue(m_join_source));
    }
    return obj;
}

QString OAICreateTransformJobRequest_DataProcessing::getInputFilter() const {
    return m_input_filter;
}
void OAICreateTransformJobRequest_DataProcessing::setInputFilter(const QString &input_filter) {
    m_input_filter = input_filter;
    m_input_filter_isSet = true;
}

bool OAICreateTransformJobRequest_DataProcessing::is_input_filter_Set() const{
    return m_input_filter_isSet;
}

bool OAICreateTransformJobRequest_DataProcessing::is_input_filter_Valid() const{
    return m_input_filter_isValid;
}

QString OAICreateTransformJobRequest_DataProcessing::getOutputFilter() const {
    return m_output_filter;
}
void OAICreateTransformJobRequest_DataProcessing::setOutputFilter(const QString &output_filter) {
    m_output_filter = output_filter;
    m_output_filter_isSet = true;
}

bool OAICreateTransformJobRequest_DataProcessing::is_output_filter_Set() const{
    return m_output_filter_isSet;
}

bool OAICreateTransformJobRequest_DataProcessing::is_output_filter_Valid() const{
    return m_output_filter_isValid;
}

OAIJoinSource OAICreateTransformJobRequest_DataProcessing::getJoinSource() const {
    return m_join_source;
}
void OAICreateTransformJobRequest_DataProcessing::setJoinSource(const OAIJoinSource &join_source) {
    m_join_source = join_source;
    m_join_source_isSet = true;
}

bool OAICreateTransformJobRequest_DataProcessing::is_join_source_Set() const{
    return m_join_source_isSet;
}

bool OAICreateTransformJobRequest_DataProcessing::is_join_source_Valid() const{
    return m_join_source_isValid;
}

bool OAICreateTransformJobRequest_DataProcessing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTransformJobRequest_DataProcessing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
