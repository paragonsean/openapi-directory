/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpaceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpaceDetails::OAISpaceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpaceDetails::OAISpaceDetails() {
    this->initializeModel();
}

OAISpaceDetails::~OAISpaceDetails() {}

void OAISpaceDetails::initializeModel() {

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_space_name_isSet = false;
    m_space_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;
}

void OAISpaceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpaceDetails::fromJsonObject(QJsonObject json) {

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("DomainId")]);
    m_domain_id_isSet = !json[QString("DomainId")].isNull() && m_domain_id_isValid;

    m_space_name_isValid = ::OpenAPI::fromJsonValue(m_space_name, json[QString("SpaceName")]);
    m_space_name_isSet = !json[QString("SpaceName")].isNull() && m_space_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;
}

QString OAISpaceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpaceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_id_isSet) {
        obj.insert(QString("DomainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_space_name_isSet) {
        obj.insert(QString("SpaceName"), ::OpenAPI::toJsonValue(m_space_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    return obj;
}

QString OAISpaceDetails::getDomainId() const {
    return m_domain_id;
}
void OAISpaceDetails::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAISpaceDetails::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAISpaceDetails::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

QString OAISpaceDetails::getSpaceName() const {
    return m_space_name;
}
void OAISpaceDetails::setSpaceName(const QString &space_name) {
    m_space_name = space_name;
    m_space_name_isSet = true;
}

bool OAISpaceDetails::is_space_name_Set() const{
    return m_space_name_isSet;
}

bool OAISpaceDetails::is_space_name_Valid() const{
    return m_space_name_isValid;
}

OAISpaceStatus OAISpaceDetails::getStatus() const {
    return m_status;
}
void OAISpaceDetails::setStatus(const OAISpaceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISpaceDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAISpaceDetails::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAISpaceDetails::getCreationTime() const {
    return m_creation_time;
}
void OAISpaceDetails::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISpaceDetails::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISpaceDetails::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAISpaceDetails::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAISpaceDetails::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAISpaceDetails::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAISpaceDetails::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAISpaceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpaceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
