/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfflineStoreConfig_S3StorageConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfflineStoreConfig_S3StorageConfig::OAIOfflineStoreConfig_S3StorageConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfflineStoreConfig_S3StorageConfig::OAIOfflineStoreConfig_S3StorageConfig() {
    this->initializeModel();
}

OAIOfflineStoreConfig_S3StorageConfig::~OAIOfflineStoreConfig_S3StorageConfig() {}

void OAIOfflineStoreConfig_S3StorageConfig::initializeModel() {

    m_s3_uri_isSet = false;
    m_s3_uri_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_resolved_output_s3_uri_isSet = false;
    m_resolved_output_s3_uri_isValid = false;
}

void OAIOfflineStoreConfig_S3StorageConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfflineStoreConfig_S3StorageConfig::fromJsonObject(QJsonObject json) {

    m_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_s3_uri, json[QString("S3Uri")]);
    m_s3_uri_isSet = !json[QString("S3Uri")].isNull() && m_s3_uri_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_resolved_output_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_resolved_output_s3_uri, json[QString("ResolvedOutputS3Uri")]);
    m_resolved_output_s3_uri_isSet = !json[QString("ResolvedOutputS3Uri")].isNull() && m_resolved_output_s3_uri_isValid;
}

QString OAIOfflineStoreConfig_S3StorageConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfflineStoreConfig_S3StorageConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_uri_isSet) {
        obj.insert(QString("S3Uri"), ::OpenAPI::toJsonValue(m_s3_uri));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_resolved_output_s3_uri_isSet) {
        obj.insert(QString("ResolvedOutputS3Uri"), ::OpenAPI::toJsonValue(m_resolved_output_s3_uri));
    }
    return obj;
}

QString OAIOfflineStoreConfig_S3StorageConfig::getS3Uri() const {
    return m_s3_uri;
}
void OAIOfflineStoreConfig_S3StorageConfig::setS3Uri(const QString &s3_uri) {
    m_s3_uri = s3_uri;
    m_s3_uri_isSet = true;
}

bool OAIOfflineStoreConfig_S3StorageConfig::is_s3_uri_Set() const{
    return m_s3_uri_isSet;
}

bool OAIOfflineStoreConfig_S3StorageConfig::is_s3_uri_Valid() const{
    return m_s3_uri_isValid;
}

QString OAIOfflineStoreConfig_S3StorageConfig::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIOfflineStoreConfig_S3StorageConfig::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIOfflineStoreConfig_S3StorageConfig::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIOfflineStoreConfig_S3StorageConfig::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIOfflineStoreConfig_S3StorageConfig::getResolvedOutputS3Uri() const {
    return m_resolved_output_s3_uri;
}
void OAIOfflineStoreConfig_S3StorageConfig::setResolvedOutputS3Uri(const QString &resolved_output_s3_uri) {
    m_resolved_output_s3_uri = resolved_output_s3_uri;
    m_resolved_output_s3_uri_isSet = true;
}

bool OAIOfflineStoreConfig_S3StorageConfig::is_resolved_output_s3_uri_Set() const{
    return m_resolved_output_s3_uri_isSet;
}

bool OAIOfflineStoreConfig_S3StorageConfig::is_resolved_output_s3_uri_Valid() const{
    return m_resolved_output_s3_uri_isValid;
}

bool OAIOfflineStoreConfig_S3StorageConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_output_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfflineStoreConfig_S3StorageConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_uri_isValid && true;
}

} // namespace OpenAPI
