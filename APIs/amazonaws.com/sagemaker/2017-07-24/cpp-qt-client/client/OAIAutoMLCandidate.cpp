/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoMLCandidate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoMLCandidate::OAIAutoMLCandidate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoMLCandidate::OAIAutoMLCandidate() {
    this->initializeModel();
}

OAIAutoMLCandidate::~OAIAutoMLCandidate() {}

void OAIAutoMLCandidate::initializeModel() {

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_final_auto_ml_job_objective_metric_isSet = false;
    m_final_auto_ml_job_objective_metric_isValid = false;

    m_objective_status_isSet = false;
    m_objective_status_isValid = false;

    m_candidate_steps_isSet = false;
    m_candidate_steps_isValid = false;

    m_candidate_status_isSet = false;
    m_candidate_status_isValid = false;

    m_inference_containers_isSet = false;
    m_inference_containers_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_candidate_properties_isSet = false;
    m_candidate_properties_isValid = false;

    m_inference_container_definitions_isSet = false;
    m_inference_container_definitions_isValid = false;
}

void OAIAutoMLCandidate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoMLCandidate::fromJsonObject(QJsonObject json) {

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("CandidateName")]);
    m_candidate_name_isSet = !json[QString("CandidateName")].isNull() && m_candidate_name_isValid;

    m_final_auto_ml_job_objective_metric_isValid = ::OpenAPI::fromJsonValue(m_final_auto_ml_job_objective_metric, json[QString("FinalAutoMLJobObjectiveMetric")]);
    m_final_auto_ml_job_objective_metric_isSet = !json[QString("FinalAutoMLJobObjectiveMetric")].isNull() && m_final_auto_ml_job_objective_metric_isValid;

    m_objective_status_isValid = ::OpenAPI::fromJsonValue(m_objective_status, json[QString("ObjectiveStatus")]);
    m_objective_status_isSet = !json[QString("ObjectiveStatus")].isNull() && m_objective_status_isValid;

    m_candidate_steps_isValid = ::OpenAPI::fromJsonValue(m_candidate_steps, json[QString("CandidateSteps")]);
    m_candidate_steps_isSet = !json[QString("CandidateSteps")].isNull() && m_candidate_steps_isValid;

    m_candidate_status_isValid = ::OpenAPI::fromJsonValue(m_candidate_status, json[QString("CandidateStatus")]);
    m_candidate_status_isSet = !json[QString("CandidateStatus")].isNull() && m_candidate_status_isValid;

    m_inference_containers_isValid = ::OpenAPI::fromJsonValue(m_inference_containers, json[QString("InferenceContainers")]);
    m_inference_containers_isSet = !json[QString("InferenceContainers")].isNull() && m_inference_containers_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_candidate_properties_isValid = ::OpenAPI::fromJsonValue(m_candidate_properties, json[QString("CandidateProperties")]);
    m_candidate_properties_isSet = !json[QString("CandidateProperties")].isNull() && m_candidate_properties_isValid;

    m_inference_container_definitions_isValid = ::OpenAPI::fromJsonValue(m_inference_container_definitions, json[QString("InferenceContainerDefinitions")]);
    m_inference_container_definitions_isSet = !json[QString("InferenceContainerDefinitions")].isNull() && m_inference_container_definitions_isValid;
}

QString OAIAutoMLCandidate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoMLCandidate::asJsonObject() const {
    QJsonObject obj;
    if (m_candidate_name_isSet) {
        obj.insert(QString("CandidateName"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_final_auto_ml_job_objective_metric.isSet()) {
        obj.insert(QString("FinalAutoMLJobObjectiveMetric"), ::OpenAPI::toJsonValue(m_final_auto_ml_job_objective_metric));
    }
    if (m_objective_status.isSet()) {
        obj.insert(QString("ObjectiveStatus"), ::OpenAPI::toJsonValue(m_objective_status));
    }
    if (m_candidate_steps.isSet()) {
        obj.insert(QString("CandidateSteps"), ::OpenAPI::toJsonValue(m_candidate_steps));
    }
    if (m_candidate_status.isSet()) {
        obj.insert(QString("CandidateStatus"), ::OpenAPI::toJsonValue(m_candidate_status));
    }
    if (m_inference_containers.isSet()) {
        obj.insert(QString("InferenceContainers"), ::OpenAPI::toJsonValue(m_inference_containers));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_candidate_properties.isSet()) {
        obj.insert(QString("CandidateProperties"), ::OpenAPI::toJsonValue(m_candidate_properties));
    }
    if (m_inference_container_definitions.isSet()) {
        obj.insert(QString("InferenceContainerDefinitions"), ::OpenAPI::toJsonValue(m_inference_container_definitions));
    }
    return obj;
}

QString OAIAutoMLCandidate::getCandidateName() const {
    return m_candidate_name;
}
void OAIAutoMLCandidate::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAIAutoMLCandidate::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAIAutoMLCandidate::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

OAIFinalAutoMLJobObjectiveMetric OAIAutoMLCandidate::getFinalAutoMlJobObjectiveMetric() const {
    return m_final_auto_ml_job_objective_metric;
}
void OAIAutoMLCandidate::setFinalAutoMlJobObjectiveMetric(const OAIFinalAutoMLJobObjectiveMetric &final_auto_ml_job_objective_metric) {
    m_final_auto_ml_job_objective_metric = final_auto_ml_job_objective_metric;
    m_final_auto_ml_job_objective_metric_isSet = true;
}

bool OAIAutoMLCandidate::is_final_auto_ml_job_objective_metric_Set() const{
    return m_final_auto_ml_job_objective_metric_isSet;
}

bool OAIAutoMLCandidate::is_final_auto_ml_job_objective_metric_Valid() const{
    return m_final_auto_ml_job_objective_metric_isValid;
}

OAIObjectiveStatus OAIAutoMLCandidate::getObjectiveStatus() const {
    return m_objective_status;
}
void OAIAutoMLCandidate::setObjectiveStatus(const OAIObjectiveStatus &objective_status) {
    m_objective_status = objective_status;
    m_objective_status_isSet = true;
}

bool OAIAutoMLCandidate::is_objective_status_Set() const{
    return m_objective_status_isSet;
}

bool OAIAutoMLCandidate::is_objective_status_Valid() const{
    return m_objective_status_isValid;
}

QList OAIAutoMLCandidate::getCandidateSteps() const {
    return m_candidate_steps;
}
void OAIAutoMLCandidate::setCandidateSteps(const QList &candidate_steps) {
    m_candidate_steps = candidate_steps;
    m_candidate_steps_isSet = true;
}

bool OAIAutoMLCandidate::is_candidate_steps_Set() const{
    return m_candidate_steps_isSet;
}

bool OAIAutoMLCandidate::is_candidate_steps_Valid() const{
    return m_candidate_steps_isValid;
}

OAICandidateStatus OAIAutoMLCandidate::getCandidateStatus() const {
    return m_candidate_status;
}
void OAIAutoMLCandidate::setCandidateStatus(const OAICandidateStatus &candidate_status) {
    m_candidate_status = candidate_status;
    m_candidate_status_isSet = true;
}

bool OAIAutoMLCandidate::is_candidate_status_Set() const{
    return m_candidate_status_isSet;
}

bool OAIAutoMLCandidate::is_candidate_status_Valid() const{
    return m_candidate_status_isValid;
}

QList OAIAutoMLCandidate::getInferenceContainers() const {
    return m_inference_containers;
}
void OAIAutoMLCandidate::setInferenceContainers(const QList &inference_containers) {
    m_inference_containers = inference_containers;
    m_inference_containers_isSet = true;
}

bool OAIAutoMLCandidate::is_inference_containers_Set() const{
    return m_inference_containers_isSet;
}

bool OAIAutoMLCandidate::is_inference_containers_Valid() const{
    return m_inference_containers_isValid;
}

QDateTime OAIAutoMLCandidate::getCreationTime() const {
    return m_creation_time;
}
void OAIAutoMLCandidate::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAutoMLCandidate::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAutoMLCandidate::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIAutoMLCandidate::getEndTime() const {
    return m_end_time;
}
void OAIAutoMLCandidate::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAutoMLCandidate::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAutoMLCandidate::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIAutoMLCandidate::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIAutoMLCandidate::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIAutoMLCandidate::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIAutoMLCandidate::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIAutoMLCandidate::getFailureReason() const {
    return m_failure_reason;
}
void OAIAutoMLCandidate::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIAutoMLCandidate::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIAutoMLCandidate::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIAutoMLCandidate_CandidateProperties OAIAutoMLCandidate::getCandidateProperties() const {
    return m_candidate_properties;
}
void OAIAutoMLCandidate::setCandidateProperties(const OAIAutoMLCandidate_CandidateProperties &candidate_properties) {
    m_candidate_properties = candidate_properties;
    m_candidate_properties_isSet = true;
}

bool OAIAutoMLCandidate::is_candidate_properties_Set() const{
    return m_candidate_properties_isSet;
}

bool OAIAutoMLCandidate::is_candidate_properties_Valid() const{
    return m_candidate_properties_isValid;
}

QMap OAIAutoMLCandidate::getInferenceContainerDefinitions() const {
    return m_inference_container_definitions;
}
void OAIAutoMLCandidate::setInferenceContainerDefinitions(const QMap &inference_container_definitions) {
    m_inference_container_definitions = inference_container_definitions;
    m_inference_container_definitions_isSet = true;
}

bool OAIAutoMLCandidate::is_inference_container_definitions_Set() const{
    return m_inference_container_definitions_isSet;
}

bool OAIAutoMLCandidate::is_inference_container_definitions_Valid() const{
    return m_inference_container_definitions_isValid;
}

bool OAIAutoMLCandidate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_auto_ml_job_objective_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_steps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_containers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_container_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoMLCandidate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_candidate_name_isValid && m_objective_status_isValid && m_candidate_steps_isValid && m_candidate_status_isValid && m_creation_time_isValid && m_last_modified_time_isValid && true;
}

} // namespace OpenAPI
