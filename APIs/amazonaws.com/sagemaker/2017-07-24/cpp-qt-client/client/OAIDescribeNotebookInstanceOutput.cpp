/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeNotebookInstanceOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeNotebookInstanceOutput::OAIDescribeNotebookInstanceOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeNotebookInstanceOutput::OAIDescribeNotebookInstanceOutput() {
    this->initializeModel();
}

OAIDescribeNotebookInstanceOutput::~OAIDescribeNotebookInstanceOutput() {}

void OAIDescribeNotebookInstanceOutput::initializeModel() {

    m_notebook_instance_arn_isSet = false;
    m_notebook_instance_arn_isValid = false;

    m_notebook_instance_name_isSet = false;
    m_notebook_instance_name_isValid = false;

    m_notebook_instance_status_isSet = false;
    m_notebook_instance_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_network_interface_id_isSet = false;
    m_network_interface_id_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_notebook_instance_lifecycle_config_name_isSet = false;
    m_notebook_instance_lifecycle_config_name_isValid = false;

    m_direct_internet_access_isSet = false;
    m_direct_internet_access_isValid = false;

    m_volume_size_in_gb_isSet = false;
    m_volume_size_in_gb_isValid = false;

    m_accelerator_types_isSet = false;
    m_accelerator_types_isValid = false;

    m_default_code_repository_isSet = false;
    m_default_code_repository_isValid = false;

    m_additional_code_repositories_isSet = false;
    m_additional_code_repositories_isValid = false;

    m_root_access_isSet = false;
    m_root_access_isValid = false;

    m_platform_identifier_isSet = false;
    m_platform_identifier_isValid = false;

    m_instance_metadata_service_configuration_isSet = false;
    m_instance_metadata_service_configuration_isValid = false;
}

void OAIDescribeNotebookInstanceOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeNotebookInstanceOutput::fromJsonObject(QJsonObject json) {

    m_notebook_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_notebook_instance_arn, json[QString("NotebookInstanceArn")]);
    m_notebook_instance_arn_isSet = !json[QString("NotebookInstanceArn")].isNull() && m_notebook_instance_arn_isValid;

    m_notebook_instance_name_isValid = ::OpenAPI::fromJsonValue(m_notebook_instance_name, json[QString("NotebookInstanceName")]);
    m_notebook_instance_name_isSet = !json[QString("NotebookInstanceName")].isNull() && m_notebook_instance_name_isValid;

    m_notebook_instance_status_isValid = ::OpenAPI::fromJsonValue(m_notebook_instance_status, json[QString("NotebookInstanceStatus")]);
    m_notebook_instance_status_isSet = !json[QString("NotebookInstanceStatus")].isNull() && m_notebook_instance_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_network_interface_id_isValid = ::OpenAPI::fromJsonValue(m_network_interface_id, json[QString("NetworkInterfaceId")]);
    m_network_interface_id_isSet = !json[QString("NetworkInterfaceId")].isNull() && m_network_interface_id_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_notebook_instance_lifecycle_config_name_isValid = ::OpenAPI::fromJsonValue(m_notebook_instance_lifecycle_config_name, json[QString("NotebookInstanceLifecycleConfigName")]);
    m_notebook_instance_lifecycle_config_name_isSet = !json[QString("NotebookInstanceLifecycleConfigName")].isNull() && m_notebook_instance_lifecycle_config_name_isValid;

    m_direct_internet_access_isValid = ::OpenAPI::fromJsonValue(m_direct_internet_access, json[QString("DirectInternetAccess")]);
    m_direct_internet_access_isSet = !json[QString("DirectInternetAccess")].isNull() && m_direct_internet_access_isValid;

    m_volume_size_in_gb_isValid = ::OpenAPI::fromJsonValue(m_volume_size_in_gb, json[QString("VolumeSizeInGB")]);
    m_volume_size_in_gb_isSet = !json[QString("VolumeSizeInGB")].isNull() && m_volume_size_in_gb_isValid;

    m_accelerator_types_isValid = ::OpenAPI::fromJsonValue(m_accelerator_types, json[QString("AcceleratorTypes")]);
    m_accelerator_types_isSet = !json[QString("AcceleratorTypes")].isNull() && m_accelerator_types_isValid;

    m_default_code_repository_isValid = ::OpenAPI::fromJsonValue(m_default_code_repository, json[QString("DefaultCodeRepository")]);
    m_default_code_repository_isSet = !json[QString("DefaultCodeRepository")].isNull() && m_default_code_repository_isValid;

    m_additional_code_repositories_isValid = ::OpenAPI::fromJsonValue(m_additional_code_repositories, json[QString("AdditionalCodeRepositories")]);
    m_additional_code_repositories_isSet = !json[QString("AdditionalCodeRepositories")].isNull() && m_additional_code_repositories_isValid;

    m_root_access_isValid = ::OpenAPI::fromJsonValue(m_root_access, json[QString("RootAccess")]);
    m_root_access_isSet = !json[QString("RootAccess")].isNull() && m_root_access_isValid;

    m_platform_identifier_isValid = ::OpenAPI::fromJsonValue(m_platform_identifier, json[QString("PlatformIdentifier")]);
    m_platform_identifier_isSet = !json[QString("PlatformIdentifier")].isNull() && m_platform_identifier_isValid;

    m_instance_metadata_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_instance_metadata_service_configuration, json[QString("InstanceMetadataServiceConfiguration")]);
    m_instance_metadata_service_configuration_isSet = !json[QString("InstanceMetadataServiceConfiguration")].isNull() && m_instance_metadata_service_configuration_isValid;
}

QString OAIDescribeNotebookInstanceOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeNotebookInstanceOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_notebook_instance_arn_isSet) {
        obj.insert(QString("NotebookInstanceArn"), ::OpenAPI::toJsonValue(m_notebook_instance_arn));
    }
    if (m_notebook_instance_name_isSet) {
        obj.insert(QString("NotebookInstanceName"), ::OpenAPI::toJsonValue(m_notebook_instance_name));
    }
    if (m_notebook_instance_status.isSet()) {
        obj.insert(QString("NotebookInstanceStatus"), ::OpenAPI::toJsonValue(m_notebook_instance_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_network_interface_id_isSet) {
        obj.insert(QString("NetworkInterfaceId"), ::OpenAPI::toJsonValue(m_network_interface_id));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_notebook_instance_lifecycle_config_name_isSet) {
        obj.insert(QString("NotebookInstanceLifecycleConfigName"), ::OpenAPI::toJsonValue(m_notebook_instance_lifecycle_config_name));
    }
    if (m_direct_internet_access.isSet()) {
        obj.insert(QString("DirectInternetAccess"), ::OpenAPI::toJsonValue(m_direct_internet_access));
    }
    if (m_volume_size_in_gb_isSet) {
        obj.insert(QString("VolumeSizeInGB"), ::OpenAPI::toJsonValue(m_volume_size_in_gb));
    }
    if (m_accelerator_types.isSet()) {
        obj.insert(QString("AcceleratorTypes"), ::OpenAPI::toJsonValue(m_accelerator_types));
    }
    if (m_default_code_repository_isSet) {
        obj.insert(QString("DefaultCodeRepository"), ::OpenAPI::toJsonValue(m_default_code_repository));
    }
    if (m_additional_code_repositories.isSet()) {
        obj.insert(QString("AdditionalCodeRepositories"), ::OpenAPI::toJsonValue(m_additional_code_repositories));
    }
    if (m_root_access.isSet()) {
        obj.insert(QString("RootAccess"), ::OpenAPI::toJsonValue(m_root_access));
    }
    if (m_platform_identifier_isSet) {
        obj.insert(QString("PlatformIdentifier"), ::OpenAPI::toJsonValue(m_platform_identifier));
    }
    if (m_instance_metadata_service_configuration.isSet()) {
        obj.insert(QString("InstanceMetadataServiceConfiguration"), ::OpenAPI::toJsonValue(m_instance_metadata_service_configuration));
    }
    return obj;
}

QString OAIDescribeNotebookInstanceOutput::getNotebookInstanceArn() const {
    return m_notebook_instance_arn;
}
void OAIDescribeNotebookInstanceOutput::setNotebookInstanceArn(const QString &notebook_instance_arn) {
    m_notebook_instance_arn = notebook_instance_arn;
    m_notebook_instance_arn_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_notebook_instance_arn_Set() const{
    return m_notebook_instance_arn_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_notebook_instance_arn_Valid() const{
    return m_notebook_instance_arn_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getNotebookInstanceName() const {
    return m_notebook_instance_name;
}
void OAIDescribeNotebookInstanceOutput::setNotebookInstanceName(const QString &notebook_instance_name) {
    m_notebook_instance_name = notebook_instance_name;
    m_notebook_instance_name_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_notebook_instance_name_Set() const{
    return m_notebook_instance_name_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_notebook_instance_name_Valid() const{
    return m_notebook_instance_name_isValid;
}

OAINotebookInstanceStatus OAIDescribeNotebookInstanceOutput::getNotebookInstanceStatus() const {
    return m_notebook_instance_status;
}
void OAIDescribeNotebookInstanceOutput::setNotebookInstanceStatus(const OAINotebookInstanceStatus &notebook_instance_status) {
    m_notebook_instance_status = notebook_instance_status;
    m_notebook_instance_status_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_notebook_instance_status_Set() const{
    return m_notebook_instance_status_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_notebook_instance_status_Valid() const{
    return m_notebook_instance_status_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getFailureReason() const {
    return m_failure_reason;
}
void OAIDescribeNotebookInstanceOutput::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getUrl() const {
    return m_url;
}
void OAIDescribeNotebookInstanceOutput::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_url_Valid() const{
    return m_url_isValid;
}

OAIInstanceType OAIDescribeNotebookInstanceOutput::getInstanceType() const {
    return m_instance_type;
}
void OAIDescribeNotebookInstanceOutput::setInstanceType(const OAIInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getSubnetId() const {
    return m_subnet_id;
}
void OAIDescribeNotebookInstanceOutput::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QList OAIDescribeNotebookInstanceOutput::getSecurityGroups() const {
    return m_security_groups;
}
void OAIDescribeNotebookInstanceOutput::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeNotebookInstanceOutput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDescribeNotebookInstanceOutput::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getNetworkInterfaceId() const {
    return m_network_interface_id;
}
void OAIDescribeNotebookInstanceOutput::setNetworkInterfaceId(const QString &network_interface_id) {
    m_network_interface_id = network_interface_id;
    m_network_interface_id_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_network_interface_id_Set() const{
    return m_network_interface_id_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_network_interface_id_Valid() const{
    return m_network_interface_id_isValid;
}

QDateTime OAIDescribeNotebookInstanceOutput::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeNotebookInstanceOutput::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QDateTime OAIDescribeNotebookInstanceOutput::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeNotebookInstanceOutput::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getNotebookInstanceLifecycleConfigName() const {
    return m_notebook_instance_lifecycle_config_name;
}
void OAIDescribeNotebookInstanceOutput::setNotebookInstanceLifecycleConfigName(const QString &notebook_instance_lifecycle_config_name) {
    m_notebook_instance_lifecycle_config_name = notebook_instance_lifecycle_config_name;
    m_notebook_instance_lifecycle_config_name_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_notebook_instance_lifecycle_config_name_Set() const{
    return m_notebook_instance_lifecycle_config_name_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_notebook_instance_lifecycle_config_name_Valid() const{
    return m_notebook_instance_lifecycle_config_name_isValid;
}

OAIDirectInternetAccess OAIDescribeNotebookInstanceOutput::getDirectInternetAccess() const {
    return m_direct_internet_access;
}
void OAIDescribeNotebookInstanceOutput::setDirectInternetAccess(const OAIDirectInternetAccess &direct_internet_access) {
    m_direct_internet_access = direct_internet_access;
    m_direct_internet_access_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_direct_internet_access_Set() const{
    return m_direct_internet_access_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_direct_internet_access_Valid() const{
    return m_direct_internet_access_isValid;
}

qint32 OAIDescribeNotebookInstanceOutput::getVolumeSizeInGb() const {
    return m_volume_size_in_gb;
}
void OAIDescribeNotebookInstanceOutput::setVolumeSizeInGb(const qint32 &volume_size_in_gb) {
    m_volume_size_in_gb = volume_size_in_gb;
    m_volume_size_in_gb_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_volume_size_in_gb_Set() const{
    return m_volume_size_in_gb_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_volume_size_in_gb_Valid() const{
    return m_volume_size_in_gb_isValid;
}

QList OAIDescribeNotebookInstanceOutput::getAcceleratorTypes() const {
    return m_accelerator_types;
}
void OAIDescribeNotebookInstanceOutput::setAcceleratorTypes(const QList &accelerator_types) {
    m_accelerator_types = accelerator_types;
    m_accelerator_types_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_accelerator_types_Set() const{
    return m_accelerator_types_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_accelerator_types_Valid() const{
    return m_accelerator_types_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getDefaultCodeRepository() const {
    return m_default_code_repository;
}
void OAIDescribeNotebookInstanceOutput::setDefaultCodeRepository(const QString &default_code_repository) {
    m_default_code_repository = default_code_repository;
    m_default_code_repository_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_default_code_repository_Set() const{
    return m_default_code_repository_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_default_code_repository_Valid() const{
    return m_default_code_repository_isValid;
}

QList OAIDescribeNotebookInstanceOutput::getAdditionalCodeRepositories() const {
    return m_additional_code_repositories;
}
void OAIDescribeNotebookInstanceOutput::setAdditionalCodeRepositories(const QList &additional_code_repositories) {
    m_additional_code_repositories = additional_code_repositories;
    m_additional_code_repositories_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_additional_code_repositories_Set() const{
    return m_additional_code_repositories_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_additional_code_repositories_Valid() const{
    return m_additional_code_repositories_isValid;
}

OAIRootAccess OAIDescribeNotebookInstanceOutput::getRootAccess() const {
    return m_root_access;
}
void OAIDescribeNotebookInstanceOutput::setRootAccess(const OAIRootAccess &root_access) {
    m_root_access = root_access;
    m_root_access_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_root_access_Set() const{
    return m_root_access_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_root_access_Valid() const{
    return m_root_access_isValid;
}

QString OAIDescribeNotebookInstanceOutput::getPlatformIdentifier() const {
    return m_platform_identifier;
}
void OAIDescribeNotebookInstanceOutput::setPlatformIdentifier(const QString &platform_identifier) {
    m_platform_identifier = platform_identifier;
    m_platform_identifier_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_platform_identifier_Set() const{
    return m_platform_identifier_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_platform_identifier_Valid() const{
    return m_platform_identifier_isValid;
}

OAICreateNotebookInstanceInput_InstanceMetadataServiceConfiguration OAIDescribeNotebookInstanceOutput::getInstanceMetadataServiceConfiguration() const {
    return m_instance_metadata_service_configuration;
}
void OAIDescribeNotebookInstanceOutput::setInstanceMetadataServiceConfiguration(const OAICreateNotebookInstanceInput_InstanceMetadataServiceConfiguration &instance_metadata_service_configuration) {
    m_instance_metadata_service_configuration = instance_metadata_service_configuration;
    m_instance_metadata_service_configuration_isSet = true;
}

bool OAIDescribeNotebookInstanceOutput::is_instance_metadata_service_configuration_Set() const{
    return m_instance_metadata_service_configuration_isSet;
}

bool OAIDescribeNotebookInstanceOutput::is_instance_metadata_service_configuration_Valid() const{
    return m_instance_metadata_service_configuration_isValid;
}

bool OAIDescribeNotebookInstanceOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notebook_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_instance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_instance_lifecycle_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_internet_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_code_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_code_repositories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_metadata_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeNotebookInstanceOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
