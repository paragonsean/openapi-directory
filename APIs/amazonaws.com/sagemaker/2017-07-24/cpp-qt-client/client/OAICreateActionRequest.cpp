/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateActionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateActionRequest::OAICreateActionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateActionRequest::OAICreateActionRequest() {
    this->initializeModel();
}

OAICreateActionRequest::~OAICreateActionRequest() {}

void OAICreateActionRequest::initializeModel() {

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_metadata_properties_isSet = false;
    m_metadata_properties_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateActionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateActionRequest::fromJsonObject(QJsonObject json) {

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("ActionName")]);
    m_action_name_isSet = !json[QString("ActionName")].isNull() && m_action_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("ActionType")]);
    m_action_type_isSet = !json[QString("ActionType")].isNull() && m_action_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;

    m_metadata_properties_isValid = ::OpenAPI::fromJsonValue(m_metadata_properties, json[QString("MetadataProperties")]);
    m_metadata_properties_isSet = !json[QString("MetadataProperties")].isNull() && m_metadata_properties_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateActionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateActionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_name_isSet) {
        obj.insert(QString("ActionName"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_action_type_isSet) {
        obj.insert(QString("ActionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_metadata_properties.isSet()) {
        obj.insert(QString("MetadataProperties"), ::OpenAPI::toJsonValue(m_metadata_properties));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateActionRequest::getActionName() const {
    return m_action_name;
}
void OAICreateActionRequest::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAICreateActionRequest::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAICreateActionRequest::is_action_name_Valid() const{
    return m_action_name_isValid;
}

OAICreateActionRequest_Source OAICreateActionRequest::getSource() const {
    return m_source;
}
void OAICreateActionRequest::setSource(const OAICreateActionRequest_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICreateActionRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAICreateActionRequest::is_source_Valid() const{
    return m_source_isValid;
}

QString OAICreateActionRequest::getActionType() const {
    return m_action_type;
}
void OAICreateActionRequest::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAICreateActionRequest::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAICreateActionRequest::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAICreateActionRequest::getDescription() const {
    return m_description;
}
void OAICreateActionRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateActionRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateActionRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIActionStatus OAICreateActionRequest::getStatus() const {
    return m_status;
}
void OAICreateActionRequest::setStatus(const OAIActionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateActionRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateActionRequest::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAICreateActionRequest::getProperties() const {
    return m_properties;
}
void OAICreateActionRequest::setProperties(const QMap &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICreateActionRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICreateActionRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIMetadataProperties OAICreateActionRequest::getMetadataProperties() const {
    return m_metadata_properties;
}
void OAICreateActionRequest::setMetadataProperties(const OAIMetadataProperties &metadata_properties) {
    m_metadata_properties = metadata_properties;
    m_metadata_properties_isSet = true;
}

bool OAICreateActionRequest::is_metadata_properties_Set() const{
    return m_metadata_properties_isSet;
}

bool OAICreateActionRequest::is_metadata_properties_Valid() const{
    return m_metadata_properties_isValid;
}

QList OAICreateActionRequest::getTags() const {
    return m_tags;
}
void OAICreateActionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateActionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateActionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateActionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateActionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_name_isValid && m_source_isValid && m_action_type_isValid && true;
}

} // namespace OpenAPI
