/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateArtifactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateArtifactRequest::OAICreateArtifactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateArtifactRequest::OAICreateArtifactRequest() {
    this->initializeModel();
}

OAICreateArtifactRequest::~OAICreateArtifactRequest() {}

void OAICreateArtifactRequest::initializeModel() {

    m_artifact_name_isSet = false;
    m_artifact_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_artifact_type_isSet = false;
    m_artifact_type_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_metadata_properties_isSet = false;
    m_metadata_properties_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateArtifactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateArtifactRequest::fromJsonObject(QJsonObject json) {

    m_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_artifact_name, json[QString("ArtifactName")]);
    m_artifact_name_isSet = !json[QString("ArtifactName")].isNull() && m_artifact_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_artifact_type_isValid = ::OpenAPI::fromJsonValue(m_artifact_type, json[QString("ArtifactType")]);
    m_artifact_type_isSet = !json[QString("ArtifactType")].isNull() && m_artifact_type_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;

    m_metadata_properties_isValid = ::OpenAPI::fromJsonValue(m_metadata_properties, json[QString("MetadataProperties")]);
    m_metadata_properties_isSet = !json[QString("MetadataProperties")].isNull() && m_metadata_properties_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateArtifactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateArtifactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_name_isSet) {
        obj.insert(QString("ArtifactName"), ::OpenAPI::toJsonValue(m_artifact_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_artifact_type_isSet) {
        obj.insert(QString("ArtifactType"), ::OpenAPI::toJsonValue(m_artifact_type));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_metadata_properties.isSet()) {
        obj.insert(QString("MetadataProperties"), ::OpenAPI::toJsonValue(m_metadata_properties));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateArtifactRequest::getArtifactName() const {
    return m_artifact_name;
}
void OAICreateArtifactRequest::setArtifactName(const QString &artifact_name) {
    m_artifact_name = artifact_name;
    m_artifact_name_isSet = true;
}

bool OAICreateArtifactRequest::is_artifact_name_Set() const{
    return m_artifact_name_isSet;
}

bool OAICreateArtifactRequest::is_artifact_name_Valid() const{
    return m_artifact_name_isValid;
}

OAICreateArtifactRequest_Source OAICreateArtifactRequest::getSource() const {
    return m_source;
}
void OAICreateArtifactRequest::setSource(const OAICreateArtifactRequest_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICreateArtifactRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAICreateArtifactRequest::is_source_Valid() const{
    return m_source_isValid;
}

QString OAICreateArtifactRequest::getArtifactType() const {
    return m_artifact_type;
}
void OAICreateArtifactRequest::setArtifactType(const QString &artifact_type) {
    m_artifact_type = artifact_type;
    m_artifact_type_isSet = true;
}

bool OAICreateArtifactRequest::is_artifact_type_Set() const{
    return m_artifact_type_isSet;
}

bool OAICreateArtifactRequest::is_artifact_type_Valid() const{
    return m_artifact_type_isValid;
}

QMap OAICreateArtifactRequest::getProperties() const {
    return m_properties;
}
void OAICreateArtifactRequest::setProperties(const QMap &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICreateArtifactRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICreateArtifactRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIMetadataProperties OAICreateArtifactRequest::getMetadataProperties() const {
    return m_metadata_properties;
}
void OAICreateArtifactRequest::setMetadataProperties(const OAIMetadataProperties &metadata_properties) {
    m_metadata_properties = metadata_properties;
    m_metadata_properties_isSet = true;
}

bool OAICreateArtifactRequest::is_metadata_properties_Set() const{
    return m_metadata_properties_isSet;
}

bool OAICreateArtifactRequest::is_metadata_properties_Valid() const{
    return m_metadata_properties_isValid;
}

QList OAICreateArtifactRequest::getTags() const {
    return m_tags;
}
void OAICreateArtifactRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateArtifactRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateArtifactRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateArtifactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateArtifactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && m_artifact_type_isValid && true;
}

} // namespace OpenAPI
