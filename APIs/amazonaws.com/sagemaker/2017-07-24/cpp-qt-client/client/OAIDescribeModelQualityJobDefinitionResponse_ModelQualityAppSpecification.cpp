/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification() {
    this->initializeModel();
}

OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::~OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification() {}

void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::initializeModel() {

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_container_entrypoint_isSet = false;
    m_container_entrypoint_isValid = false;

    m_container_arguments_isSet = false;
    m_container_arguments_isValid = false;

    m_record_preprocessor_source_uri_isSet = false;
    m_record_preprocessor_source_uri_isValid = false;

    m_post_analytics_processor_source_uri_isSet = false;
    m_post_analytics_processor_source_uri_isValid = false;

    m_problem_type_isSet = false;
    m_problem_type_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;
}

void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::fromJsonObject(QJsonObject json) {

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("ImageUri")]);
    m_image_uri_isSet = !json[QString("ImageUri")].isNull() && m_image_uri_isValid;

    m_container_entrypoint_isValid = ::OpenAPI::fromJsonValue(m_container_entrypoint, json[QString("ContainerEntrypoint")]);
    m_container_entrypoint_isSet = !json[QString("ContainerEntrypoint")].isNull() && m_container_entrypoint_isValid;

    m_container_arguments_isValid = ::OpenAPI::fromJsonValue(m_container_arguments, json[QString("ContainerArguments")]);
    m_container_arguments_isSet = !json[QString("ContainerArguments")].isNull() && m_container_arguments_isValid;

    m_record_preprocessor_source_uri_isValid = ::OpenAPI::fromJsonValue(m_record_preprocessor_source_uri, json[QString("RecordPreprocessorSourceUri")]);
    m_record_preprocessor_source_uri_isSet = !json[QString("RecordPreprocessorSourceUri")].isNull() && m_record_preprocessor_source_uri_isValid;

    m_post_analytics_processor_source_uri_isValid = ::OpenAPI::fromJsonValue(m_post_analytics_processor_source_uri, json[QString("PostAnalyticsProcessorSourceUri")]);
    m_post_analytics_processor_source_uri_isSet = !json[QString("PostAnalyticsProcessorSourceUri")].isNull() && m_post_analytics_processor_source_uri_isValid;

    m_problem_type_isValid = ::OpenAPI::fromJsonValue(m_problem_type, json[QString("ProblemType")]);
    m_problem_type_isSet = !json[QString("ProblemType")].isNull() && m_problem_type_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;
}

QString OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_image_uri_isSet) {
        obj.insert(QString("ImageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_container_entrypoint.isSet()) {
        obj.insert(QString("ContainerEntrypoint"), ::OpenAPI::toJsonValue(m_container_entrypoint));
    }
    if (m_container_arguments.isSet()) {
        obj.insert(QString("ContainerArguments"), ::OpenAPI::toJsonValue(m_container_arguments));
    }
    if (m_record_preprocessor_source_uri_isSet) {
        obj.insert(QString("RecordPreprocessorSourceUri"), ::OpenAPI::toJsonValue(m_record_preprocessor_source_uri));
    }
    if (m_post_analytics_processor_source_uri_isSet) {
        obj.insert(QString("PostAnalyticsProcessorSourceUri"), ::OpenAPI::toJsonValue(m_post_analytics_processor_source_uri));
    }
    if (m_problem_type.isSet()) {
        obj.insert(QString("ProblemType"), ::OpenAPI::toJsonValue(m_problem_type));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    return obj;
}

QString OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::getImageUri() const {
    return m_image_uri;
}
void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QList OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::getContainerEntrypoint() const {
    return m_container_entrypoint;
}
void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::setContainerEntrypoint(const QList &container_entrypoint) {
    m_container_entrypoint = container_entrypoint;
    m_container_entrypoint_isSet = true;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_container_entrypoint_Set() const{
    return m_container_entrypoint_isSet;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_container_entrypoint_Valid() const{
    return m_container_entrypoint_isValid;
}

QList OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::getContainerArguments() const {
    return m_container_arguments;
}
void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::setContainerArguments(const QList &container_arguments) {
    m_container_arguments = container_arguments;
    m_container_arguments_isSet = true;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_container_arguments_Set() const{
    return m_container_arguments_isSet;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_container_arguments_Valid() const{
    return m_container_arguments_isValid;
}

QString OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::getRecordPreprocessorSourceUri() const {
    return m_record_preprocessor_source_uri;
}
void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::setRecordPreprocessorSourceUri(const QString &record_preprocessor_source_uri) {
    m_record_preprocessor_source_uri = record_preprocessor_source_uri;
    m_record_preprocessor_source_uri_isSet = true;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_record_preprocessor_source_uri_Set() const{
    return m_record_preprocessor_source_uri_isSet;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_record_preprocessor_source_uri_Valid() const{
    return m_record_preprocessor_source_uri_isValid;
}

QString OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::getPostAnalyticsProcessorSourceUri() const {
    return m_post_analytics_processor_source_uri;
}
void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::setPostAnalyticsProcessorSourceUri(const QString &post_analytics_processor_source_uri) {
    m_post_analytics_processor_source_uri = post_analytics_processor_source_uri;
    m_post_analytics_processor_source_uri_isSet = true;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_post_analytics_processor_source_uri_Set() const{
    return m_post_analytics_processor_source_uri_isSet;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_post_analytics_processor_source_uri_Valid() const{
    return m_post_analytics_processor_source_uri_isValid;
}

OAIMonitoringProblemType OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::getProblemType() const {
    return m_problem_type;
}
void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::setProblemType(const OAIMonitoringProblemType &problem_type) {
    m_problem_type = problem_type;
    m_problem_type_isSet = true;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_problem_type_Set() const{
    return m_problem_type_isSet;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_problem_type_Valid() const{
    return m_problem_type_isValid;
}

QMap OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::getEnvironment() const {
    return m_environment;
}
void OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::is_environment_Valid() const{
    return m_environment_isValid;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_entrypoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_preprocessor_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_analytics_processor_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_problem_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeModelQualityJobDefinitionResponse_ModelQualityAppSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_uri_isValid && true;
}

} // namespace OpenAPI
