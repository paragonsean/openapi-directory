/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_primary_container_isSet = false;
    m_primary_container_isValid = false;

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_inference_execution_config_isSet = false;
    m_inference_execution_config_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_model_arn_isSet = false;
    m_model_arn_isValid = false;

    m_enable_network_isolation_isSet = false;
    m_enable_network_isolation_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_deployment_recommendation_isSet = false;
    m_deployment_recommendation_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_primary_container_isValid = ::OpenAPI::fromJsonValue(m_primary_container, json[QString("PrimaryContainer")]);
    m_primary_container_isSet = !json[QString("PrimaryContainer")].isNull() && m_primary_container_isValid;

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("Containers")]);
    m_containers_isSet = !json[QString("Containers")].isNull() && m_containers_isValid;

    m_inference_execution_config_isValid = ::OpenAPI::fromJsonValue(m_inference_execution_config, json[QString("InferenceExecutionConfig")]);
    m_inference_execution_config_isSet = !json[QString("InferenceExecutionConfig")].isNull() && m_inference_execution_config_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("ExecutionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("ExecutionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_model_arn_isValid = ::OpenAPI::fromJsonValue(m_model_arn, json[QString("ModelArn")]);
    m_model_arn_isSet = !json[QString("ModelArn")].isNull() && m_model_arn_isValid;

    m_enable_network_isolation_isValid = ::OpenAPI::fromJsonValue(m_enable_network_isolation, json[QString("EnableNetworkIsolation")]);
    m_enable_network_isolation_isSet = !json[QString("EnableNetworkIsolation")].isNull() && m_enable_network_isolation_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_deployment_recommendation_isValid = ::OpenAPI::fromJsonValue(m_deployment_recommendation, json[QString("DeploymentRecommendation")]);
    m_deployment_recommendation_isSet = !json[QString("DeploymentRecommendation")].isNull() && m_deployment_recommendation_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_primary_container.isSet()) {
        obj.insert(QString("PrimaryContainer"), ::OpenAPI::toJsonValue(m_primary_container));
    }
    if (m_containers.isSet()) {
        obj.insert(QString("Containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_inference_execution_config.isSet()) {
        obj.insert(QString("InferenceExecutionConfig"), ::OpenAPI::toJsonValue(m_inference_execution_config));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("ExecutionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_model_arn_isSet) {
        obj.insert(QString("ModelArn"), ::OpenAPI::toJsonValue(m_model_arn));
    }
    if (m_enable_network_isolation_isSet) {
        obj.insert(QString("EnableNetworkIsolation"), ::OpenAPI::toJsonValue(m_enable_network_isolation));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_deployment_recommendation.isSet()) {
        obj.insert(QString("DeploymentRecommendation"), ::OpenAPI::toJsonValue(m_deployment_recommendation));
    }
    return obj;
}

QString OAIModel::getModelName() const {
    return m_model_name;
}
void OAIModel::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIModel::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIModel::is_model_name_Valid() const{
    return m_model_name_isValid;
}

OAIContainerDefinition OAIModel::getPrimaryContainer() const {
    return m_primary_container;
}
void OAIModel::setPrimaryContainer(const OAIContainerDefinition &primary_container) {
    m_primary_container = primary_container;
    m_primary_container_isSet = true;
}

bool OAIModel::is_primary_container_Set() const{
    return m_primary_container_isSet;
}

bool OAIModel::is_primary_container_Valid() const{
    return m_primary_container_isValid;
}

QList OAIModel::getContainers() const {
    return m_containers;
}
void OAIModel::setContainers(const QList &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIModel::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIModel::is_containers_Valid() const{
    return m_containers_isValid;
}

OAIInferenceExecutionConfig OAIModel::getInferenceExecutionConfig() const {
    return m_inference_execution_config;
}
void OAIModel::setInferenceExecutionConfig(const OAIInferenceExecutionConfig &inference_execution_config) {
    m_inference_execution_config = inference_execution_config;
    m_inference_execution_config_isSet = true;
}

bool OAIModel::is_inference_execution_config_Set() const{
    return m_inference_execution_config_isSet;
}

bool OAIModel::is_inference_execution_config_Valid() const{
    return m_inference_execution_config_isValid;
}

QString OAIModel::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIModel::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIModel::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIModel::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

OAIVpcConfig OAIModel::getVpcConfig() const {
    return m_vpc_config;
}
void OAIModel::setVpcConfig(const OAIVpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIModel::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIModel::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

QDateTime OAIModel::getCreationTime() const {
    return m_creation_time;
}
void OAIModel::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIModel::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIModel::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIModel::getModelArn() const {
    return m_model_arn;
}
void OAIModel::setModelArn(const QString &model_arn) {
    m_model_arn = model_arn;
    m_model_arn_isSet = true;
}

bool OAIModel::is_model_arn_Set() const{
    return m_model_arn_isSet;
}

bool OAIModel::is_model_arn_Valid() const{
    return m_model_arn_isValid;
}

bool OAIModel::getEnableNetworkIsolation() const {
    return m_enable_network_isolation;
}
void OAIModel::setEnableNetworkIsolation(const bool &enable_network_isolation) {
    m_enable_network_isolation = enable_network_isolation;
    m_enable_network_isolation_isSet = true;
}

bool OAIModel::is_enable_network_isolation_Set() const{
    return m_enable_network_isolation_isSet;
}

bool OAIModel::is_enable_network_isolation_Valid() const{
    return m_enable_network_isolation_isValid;
}

QList OAIModel::getTags() const {
    return m_tags;
}
void OAIModel::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIModel::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIModel::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDescribeModelOutput_DeploymentRecommendation OAIModel::getDeploymentRecommendation() const {
    return m_deployment_recommendation;
}
void OAIModel::setDeploymentRecommendation(const OAIDescribeModelOutput_DeploymentRecommendation &deployment_recommendation) {
    m_deployment_recommendation = deployment_recommendation;
    m_deployment_recommendation_isSet = true;
}

bool OAIModel::is_deployment_recommendation_Set() const{
    return m_deployment_recommendation_isSet;
}

bool OAIModel::is_deployment_recommendation_Valid() const{
    return m_deployment_recommendation_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_containers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_execution_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_network_isolation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_recommendation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
