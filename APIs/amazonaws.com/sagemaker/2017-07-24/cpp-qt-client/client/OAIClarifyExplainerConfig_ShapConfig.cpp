/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClarifyExplainerConfig_ShapConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClarifyExplainerConfig_ShapConfig::OAIClarifyExplainerConfig_ShapConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClarifyExplainerConfig_ShapConfig::OAIClarifyExplainerConfig_ShapConfig() {
    this->initializeModel();
}

OAIClarifyExplainerConfig_ShapConfig::~OAIClarifyExplainerConfig_ShapConfig() {}

void OAIClarifyExplainerConfig_ShapConfig::initializeModel() {

    m_shap_baseline_config_isSet = false;
    m_shap_baseline_config_isValid = false;

    m_number_of_samples_isSet = false;
    m_number_of_samples_isValid = false;

    m_use_logit_isSet = false;
    m_use_logit_isValid = false;

    m_seed_isSet = false;
    m_seed_isValid = false;

    m_text_config_isSet = false;
    m_text_config_isValid = false;
}

void OAIClarifyExplainerConfig_ShapConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClarifyExplainerConfig_ShapConfig::fromJsonObject(QJsonObject json) {

    m_shap_baseline_config_isValid = ::OpenAPI::fromJsonValue(m_shap_baseline_config, json[QString("ShapBaselineConfig")]);
    m_shap_baseline_config_isSet = !json[QString("ShapBaselineConfig")].isNull() && m_shap_baseline_config_isValid;

    m_number_of_samples_isValid = ::OpenAPI::fromJsonValue(m_number_of_samples, json[QString("NumberOfSamples")]);
    m_number_of_samples_isSet = !json[QString("NumberOfSamples")].isNull() && m_number_of_samples_isValid;

    m_use_logit_isValid = ::OpenAPI::fromJsonValue(m_use_logit, json[QString("UseLogit")]);
    m_use_logit_isSet = !json[QString("UseLogit")].isNull() && m_use_logit_isValid;

    m_seed_isValid = ::OpenAPI::fromJsonValue(m_seed, json[QString("Seed")]);
    m_seed_isSet = !json[QString("Seed")].isNull() && m_seed_isValid;

    m_text_config_isValid = ::OpenAPI::fromJsonValue(m_text_config, json[QString("TextConfig")]);
    m_text_config_isSet = !json[QString("TextConfig")].isNull() && m_text_config_isValid;
}

QString OAIClarifyExplainerConfig_ShapConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClarifyExplainerConfig_ShapConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_shap_baseline_config.isSet()) {
        obj.insert(QString("ShapBaselineConfig"), ::OpenAPI::toJsonValue(m_shap_baseline_config));
    }
    if (m_number_of_samples_isSet) {
        obj.insert(QString("NumberOfSamples"), ::OpenAPI::toJsonValue(m_number_of_samples));
    }
    if (m_use_logit_isSet) {
        obj.insert(QString("UseLogit"), ::OpenAPI::toJsonValue(m_use_logit));
    }
    if (m_seed_isSet) {
        obj.insert(QString("Seed"), ::OpenAPI::toJsonValue(m_seed));
    }
    if (m_text_config.isSet()) {
        obj.insert(QString("TextConfig"), ::OpenAPI::toJsonValue(m_text_config));
    }
    return obj;
}

OAIClarifyShapConfig_ShapBaselineConfig OAIClarifyExplainerConfig_ShapConfig::getShapBaselineConfig() const {
    return m_shap_baseline_config;
}
void OAIClarifyExplainerConfig_ShapConfig::setShapBaselineConfig(const OAIClarifyShapConfig_ShapBaselineConfig &shap_baseline_config) {
    m_shap_baseline_config = shap_baseline_config;
    m_shap_baseline_config_isSet = true;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_shap_baseline_config_Set() const{
    return m_shap_baseline_config_isSet;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_shap_baseline_config_Valid() const{
    return m_shap_baseline_config_isValid;
}

qint32 OAIClarifyExplainerConfig_ShapConfig::getNumberOfSamples() const {
    return m_number_of_samples;
}
void OAIClarifyExplainerConfig_ShapConfig::setNumberOfSamples(const qint32 &number_of_samples) {
    m_number_of_samples = number_of_samples;
    m_number_of_samples_isSet = true;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_number_of_samples_Set() const{
    return m_number_of_samples_isSet;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_number_of_samples_Valid() const{
    return m_number_of_samples_isValid;
}

bool OAIClarifyExplainerConfig_ShapConfig::getUseLogit() const {
    return m_use_logit;
}
void OAIClarifyExplainerConfig_ShapConfig::setUseLogit(const bool &use_logit) {
    m_use_logit = use_logit;
    m_use_logit_isSet = true;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_use_logit_Set() const{
    return m_use_logit_isSet;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_use_logit_Valid() const{
    return m_use_logit_isValid;
}

qint32 OAIClarifyExplainerConfig_ShapConfig::getSeed() const {
    return m_seed;
}
void OAIClarifyExplainerConfig_ShapConfig::setSeed(const qint32 &seed) {
    m_seed = seed;
    m_seed_isSet = true;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_seed_Set() const{
    return m_seed_isSet;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_seed_Valid() const{
    return m_seed_isValid;
}

OAIClarifyShapConfig_TextConfig OAIClarifyExplainerConfig_ShapConfig::getTextConfig() const {
    return m_text_config;
}
void OAIClarifyExplainerConfig_ShapConfig::setTextConfig(const OAIClarifyShapConfig_TextConfig &text_config) {
    m_text_config = text_config;
    m_text_config_isSet = true;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_text_config_Set() const{
    return m_text_config_isSet;
}

bool OAIClarifyExplainerConfig_ShapConfig::is_text_config_Valid() const{
    return m_text_config_isValid;
}

bool OAIClarifyExplainerConfig_ShapConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shap_baseline_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_samples_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_logit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClarifyExplainerConfig_ShapConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_shap_baseline_config_isValid && true;
}

} // namespace OpenAPI
