/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint::OAIEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint::OAIEndpoint() {
    this->initializeModel();
}

OAIEndpoint::~OAIEndpoint() {}

void OAIEndpoint::initializeModel() {

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_endpoint_arn_isSet = false;
    m_endpoint_arn_isValid = false;

    m_endpoint_config_name_isSet = false;
    m_endpoint_config_name_isValid = false;

    m_production_variants_isSet = false;
    m_production_variants_isValid = false;

    m_data_capture_config_isSet = false;
    m_data_capture_config_isValid = false;

    m_endpoint_status_isSet = false;
    m_endpoint_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_monitoring_schedules_isSet = false;
    m_monitoring_schedules_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_shadow_production_variants_isSet = false;
    m_shadow_production_variants_isValid = false;
}

void OAIEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint::fromJsonObject(QJsonObject json) {

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("EndpointName")]);
    m_endpoint_name_isSet = !json[QString("EndpointName")].isNull() && m_endpoint_name_isValid;

    m_endpoint_arn_isValid = ::OpenAPI::fromJsonValue(m_endpoint_arn, json[QString("EndpointArn")]);
    m_endpoint_arn_isSet = !json[QString("EndpointArn")].isNull() && m_endpoint_arn_isValid;

    m_endpoint_config_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_config_name, json[QString("EndpointConfigName")]);
    m_endpoint_config_name_isSet = !json[QString("EndpointConfigName")].isNull() && m_endpoint_config_name_isValid;

    m_production_variants_isValid = ::OpenAPI::fromJsonValue(m_production_variants, json[QString("ProductionVariants")]);
    m_production_variants_isSet = !json[QString("ProductionVariants")].isNull() && m_production_variants_isValid;

    m_data_capture_config_isValid = ::OpenAPI::fromJsonValue(m_data_capture_config, json[QString("DataCaptureConfig")]);
    m_data_capture_config_isSet = !json[QString("DataCaptureConfig")].isNull() && m_data_capture_config_isValid;

    m_endpoint_status_isValid = ::OpenAPI::fromJsonValue(m_endpoint_status, json[QString("EndpointStatus")]);
    m_endpoint_status_isSet = !json[QString("EndpointStatus")].isNull() && m_endpoint_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_monitoring_schedules_isValid = ::OpenAPI::fromJsonValue(m_monitoring_schedules, json[QString("MonitoringSchedules")]);
    m_monitoring_schedules_isSet = !json[QString("MonitoringSchedules")].isNull() && m_monitoring_schedules_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_shadow_production_variants_isValid = ::OpenAPI::fromJsonValue(m_shadow_production_variants, json[QString("ShadowProductionVariants")]);
    m_shadow_production_variants_isSet = !json[QString("ShadowProductionVariants")].isNull() && m_shadow_production_variants_isValid;
}

QString OAIEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_name_isSet) {
        obj.insert(QString("EndpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_endpoint_arn_isSet) {
        obj.insert(QString("EndpointArn"), ::OpenAPI::toJsonValue(m_endpoint_arn));
    }
    if (m_endpoint_config_name_isSet) {
        obj.insert(QString("EndpointConfigName"), ::OpenAPI::toJsonValue(m_endpoint_config_name));
    }
    if (m_production_variants.isSet()) {
        obj.insert(QString("ProductionVariants"), ::OpenAPI::toJsonValue(m_production_variants));
    }
    if (m_data_capture_config.isSet()) {
        obj.insert(QString("DataCaptureConfig"), ::OpenAPI::toJsonValue(m_data_capture_config));
    }
    if (m_endpoint_status.isSet()) {
        obj.insert(QString("EndpointStatus"), ::OpenAPI::toJsonValue(m_endpoint_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_monitoring_schedules.isSet()) {
        obj.insert(QString("MonitoringSchedules"), ::OpenAPI::toJsonValue(m_monitoring_schedules));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_shadow_production_variants.isSet()) {
        obj.insert(QString("ShadowProductionVariants"), ::OpenAPI::toJsonValue(m_shadow_production_variants));
    }
    return obj;
}

QString OAIEndpoint::getEndpointName() const {
    return m_endpoint_name;
}
void OAIEndpoint::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIEndpoint::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIEndpoint::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

QString OAIEndpoint::getEndpointArn() const {
    return m_endpoint_arn;
}
void OAIEndpoint::setEndpointArn(const QString &endpoint_arn) {
    m_endpoint_arn = endpoint_arn;
    m_endpoint_arn_isSet = true;
}

bool OAIEndpoint::is_endpoint_arn_Set() const{
    return m_endpoint_arn_isSet;
}

bool OAIEndpoint::is_endpoint_arn_Valid() const{
    return m_endpoint_arn_isValid;
}

QString OAIEndpoint::getEndpointConfigName() const {
    return m_endpoint_config_name;
}
void OAIEndpoint::setEndpointConfigName(const QString &endpoint_config_name) {
    m_endpoint_config_name = endpoint_config_name;
    m_endpoint_config_name_isSet = true;
}

bool OAIEndpoint::is_endpoint_config_name_Set() const{
    return m_endpoint_config_name_isSet;
}

bool OAIEndpoint::is_endpoint_config_name_Valid() const{
    return m_endpoint_config_name_isValid;
}

QList OAIEndpoint::getProductionVariants() const {
    return m_production_variants;
}
void OAIEndpoint::setProductionVariants(const QList &production_variants) {
    m_production_variants = production_variants;
    m_production_variants_isSet = true;
}

bool OAIEndpoint::is_production_variants_Set() const{
    return m_production_variants_isSet;
}

bool OAIEndpoint::is_production_variants_Valid() const{
    return m_production_variants_isValid;
}

OAIDataCaptureConfigSummary OAIEndpoint::getDataCaptureConfig() const {
    return m_data_capture_config;
}
void OAIEndpoint::setDataCaptureConfig(const OAIDataCaptureConfigSummary &data_capture_config) {
    m_data_capture_config = data_capture_config;
    m_data_capture_config_isSet = true;
}

bool OAIEndpoint::is_data_capture_config_Set() const{
    return m_data_capture_config_isSet;
}

bool OAIEndpoint::is_data_capture_config_Valid() const{
    return m_data_capture_config_isValid;
}

OAIEndpointStatus OAIEndpoint::getEndpointStatus() const {
    return m_endpoint_status;
}
void OAIEndpoint::setEndpointStatus(const OAIEndpointStatus &endpoint_status) {
    m_endpoint_status = endpoint_status;
    m_endpoint_status_isSet = true;
}

bool OAIEndpoint::is_endpoint_status_Set() const{
    return m_endpoint_status_isSet;
}

bool OAIEndpoint::is_endpoint_status_Valid() const{
    return m_endpoint_status_isValid;
}

QString OAIEndpoint::getFailureReason() const {
    return m_failure_reason;
}
void OAIEndpoint::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIEndpoint::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIEndpoint::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QDateTime OAIEndpoint::getCreationTime() const {
    return m_creation_time;
}
void OAIEndpoint::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIEndpoint::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIEndpoint::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIEndpoint::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIEndpoint::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIEndpoint::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIEndpoint::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QList OAIEndpoint::getMonitoringSchedules() const {
    return m_monitoring_schedules;
}
void OAIEndpoint::setMonitoringSchedules(const QList &monitoring_schedules) {
    m_monitoring_schedules = monitoring_schedules;
    m_monitoring_schedules_isSet = true;
}

bool OAIEndpoint::is_monitoring_schedules_Set() const{
    return m_monitoring_schedules_isSet;
}

bool OAIEndpoint::is_monitoring_schedules_Valid() const{
    return m_monitoring_schedules_isValid;
}

QList OAIEndpoint::getTags() const {
    return m_tags;
}
void OAIEndpoint::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIEndpoint::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIEndpoint::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIEndpoint::getShadowProductionVariants() const {
    return m_shadow_production_variants;
}
void OAIEndpoint::setShadowProductionVariants(const QList &shadow_production_variants) {
    m_shadow_production_variants = shadow_production_variants;
    m_shadow_production_variants_isSet = true;
}

bool OAIEndpoint::is_shadow_production_variants_Set() const{
    return m_shadow_production_variants_isSet;
}

bool OAIEndpoint::is_shadow_production_variants_Valid() const{
    return m_shadow_production_variants_isValid;
}

bool OAIEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_capture_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_schedules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_production_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_name_isValid && m_endpoint_arn_isValid && m_endpoint_config_name_isValid && m_endpoint_status_isValid && m_creation_time_isValid && m_last_modified_time_isValid && true;
}

} // namespace OpenAPI
