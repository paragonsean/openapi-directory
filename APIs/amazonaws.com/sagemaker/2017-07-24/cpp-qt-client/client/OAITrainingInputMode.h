/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrainingInputMode.h
 *
 * &lt;p&gt;The training input mode that the algorithm supports. For more information about input modes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\&quot;&gt;Algorithms&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Pipe mode&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If an algorithm supports &lt;code&gt;Pipe&lt;/code&gt; mode, Amazon SageMaker streams data directly from Amazon S3 to the container.&lt;/p&gt; &lt;p&gt; &lt;b&gt;File mode&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If an algorithm supports &lt;code&gt;File&lt;/code&gt; mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.&lt;/p&gt; &lt;p&gt;You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.&lt;/p&gt; &lt;p&gt;For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won&#39;t be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.&lt;/p&gt; &lt;p&gt; &lt;b&gt;FastFile mode&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If an algorithm supports &lt;code&gt;FastFile&lt;/code&gt; mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.&lt;/p&gt; &lt;p&gt; &lt;code&gt;FastFile&lt;/code&gt; mode works best when the data is read sequentially. Augmented manifest files aren&#39;t supported. The startup time is lower when there are fewer files in the S3 bucket provided.&lt;/p&gt;
 */

#ifndef OAITrainingInputMode_H
#define OAITrainingInputMode_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITrainingInputMode : public OAIEnum {
public:
    OAITrainingInputMode();
    OAITrainingInputMode(QString json);
    ~OAITrainingInputMode() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAITrainingInputMode {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        PIPE, 
        FILE, 
        FASTFILE
    };
    OAITrainingInputMode::eOAITrainingInputMode getValue() const;
    void setValue(const OAITrainingInputMode::eOAITrainingInputMode& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAITrainingInputMode m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrainingInputMode)

#endif // OAITrainingInputMode_H
