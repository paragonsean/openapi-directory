/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsyncInferenceOutputConfig_NotificationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsyncInferenceOutputConfig_NotificationConfig::OAIAsyncInferenceOutputConfig_NotificationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsyncInferenceOutputConfig_NotificationConfig::OAIAsyncInferenceOutputConfig_NotificationConfig() {
    this->initializeModel();
}

OAIAsyncInferenceOutputConfig_NotificationConfig::~OAIAsyncInferenceOutputConfig_NotificationConfig() {}

void OAIAsyncInferenceOutputConfig_NotificationConfig::initializeModel() {

    m_success_topic_isSet = false;
    m_success_topic_isValid = false;

    m_error_topic_isSet = false;
    m_error_topic_isValid = false;

    m_include_inference_response_in_isSet = false;
    m_include_inference_response_in_isValid = false;
}

void OAIAsyncInferenceOutputConfig_NotificationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsyncInferenceOutputConfig_NotificationConfig::fromJsonObject(QJsonObject json) {

    m_success_topic_isValid = ::OpenAPI::fromJsonValue(m_success_topic, json[QString("SuccessTopic")]);
    m_success_topic_isSet = !json[QString("SuccessTopic")].isNull() && m_success_topic_isValid;

    m_error_topic_isValid = ::OpenAPI::fromJsonValue(m_error_topic, json[QString("ErrorTopic")]);
    m_error_topic_isSet = !json[QString("ErrorTopic")].isNull() && m_error_topic_isValid;

    m_include_inference_response_in_isValid = ::OpenAPI::fromJsonValue(m_include_inference_response_in, json[QString("IncludeInferenceResponseIn")]);
    m_include_inference_response_in_isSet = !json[QString("IncludeInferenceResponseIn")].isNull() && m_include_inference_response_in_isValid;
}

QString OAIAsyncInferenceOutputConfig_NotificationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsyncInferenceOutputConfig_NotificationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_success_topic_isSet) {
        obj.insert(QString("SuccessTopic"), ::OpenAPI::toJsonValue(m_success_topic));
    }
    if (m_error_topic_isSet) {
        obj.insert(QString("ErrorTopic"), ::OpenAPI::toJsonValue(m_error_topic));
    }
    if (m_include_inference_response_in.isSet()) {
        obj.insert(QString("IncludeInferenceResponseIn"), ::OpenAPI::toJsonValue(m_include_inference_response_in));
    }
    return obj;
}

QString OAIAsyncInferenceOutputConfig_NotificationConfig::getSuccessTopic() const {
    return m_success_topic;
}
void OAIAsyncInferenceOutputConfig_NotificationConfig::setSuccessTopic(const QString &success_topic) {
    m_success_topic = success_topic;
    m_success_topic_isSet = true;
}

bool OAIAsyncInferenceOutputConfig_NotificationConfig::is_success_topic_Set() const{
    return m_success_topic_isSet;
}

bool OAIAsyncInferenceOutputConfig_NotificationConfig::is_success_topic_Valid() const{
    return m_success_topic_isValid;
}

QString OAIAsyncInferenceOutputConfig_NotificationConfig::getErrorTopic() const {
    return m_error_topic;
}
void OAIAsyncInferenceOutputConfig_NotificationConfig::setErrorTopic(const QString &error_topic) {
    m_error_topic = error_topic;
    m_error_topic_isSet = true;
}

bool OAIAsyncInferenceOutputConfig_NotificationConfig::is_error_topic_Set() const{
    return m_error_topic_isSet;
}

bool OAIAsyncInferenceOutputConfig_NotificationConfig::is_error_topic_Valid() const{
    return m_error_topic_isValid;
}

QList OAIAsyncInferenceOutputConfig_NotificationConfig::getIncludeInferenceResponseIn() const {
    return m_include_inference_response_in;
}
void OAIAsyncInferenceOutputConfig_NotificationConfig::setIncludeInferenceResponseIn(const QList &include_inference_response_in) {
    m_include_inference_response_in = include_inference_response_in;
    m_include_inference_response_in_isSet = true;
}

bool OAIAsyncInferenceOutputConfig_NotificationConfig::is_include_inference_response_in_Set() const{
    return m_include_inference_response_in_isSet;
}

bool OAIAsyncInferenceOutputConfig_NotificationConfig::is_include_inference_response_in_Valid() const{
    return m_include_inference_response_in_isValid;
}

bool OAIAsyncInferenceOutputConfig_NotificationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_success_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_inference_response_in.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsyncInferenceOutputConfig_NotificationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
