/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperParameterTuningJobConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperParameterTuningJobConfig::OAIHyperParameterTuningJobConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperParameterTuningJobConfig::OAIHyperParameterTuningJobConfig() {
    this->initializeModel();
}

OAIHyperParameterTuningJobConfig::~OAIHyperParameterTuningJobConfig() {}

void OAIHyperParameterTuningJobConfig::initializeModel() {

    m_strategy_isSet = false;
    m_strategy_isValid = false;

    m_strategy_config_isSet = false;
    m_strategy_config_isValid = false;

    m_hyper_parameter_tuning_job_objective_isSet = false;
    m_hyper_parameter_tuning_job_objective_isValid = false;

    m_resource_limits_isSet = false;
    m_resource_limits_isValid = false;

    m_parameter_ranges_isSet = false;
    m_parameter_ranges_isValid = false;

    m_training_job_early_stopping_type_isSet = false;
    m_training_job_early_stopping_type_isValid = false;

    m_tuning_job_completion_criteria_isSet = false;
    m_tuning_job_completion_criteria_isValid = false;

    m_random_seed_isSet = false;
    m_random_seed_isValid = false;
}

void OAIHyperParameterTuningJobConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperParameterTuningJobConfig::fromJsonObject(QJsonObject json) {

    m_strategy_isValid = ::OpenAPI::fromJsonValue(m_strategy, json[QString("Strategy")]);
    m_strategy_isSet = !json[QString("Strategy")].isNull() && m_strategy_isValid;

    m_strategy_config_isValid = ::OpenAPI::fromJsonValue(m_strategy_config, json[QString("StrategyConfig")]);
    m_strategy_config_isSet = !json[QString("StrategyConfig")].isNull() && m_strategy_config_isValid;

    m_hyper_parameter_tuning_job_objective_isValid = ::OpenAPI::fromJsonValue(m_hyper_parameter_tuning_job_objective, json[QString("HyperParameterTuningJobObjective")]);
    m_hyper_parameter_tuning_job_objective_isSet = !json[QString("HyperParameterTuningJobObjective")].isNull() && m_hyper_parameter_tuning_job_objective_isValid;

    m_resource_limits_isValid = ::OpenAPI::fromJsonValue(m_resource_limits, json[QString("ResourceLimits")]);
    m_resource_limits_isSet = !json[QString("ResourceLimits")].isNull() && m_resource_limits_isValid;

    m_parameter_ranges_isValid = ::OpenAPI::fromJsonValue(m_parameter_ranges, json[QString("ParameterRanges")]);
    m_parameter_ranges_isSet = !json[QString("ParameterRanges")].isNull() && m_parameter_ranges_isValid;

    m_training_job_early_stopping_type_isValid = ::OpenAPI::fromJsonValue(m_training_job_early_stopping_type, json[QString("TrainingJobEarlyStoppingType")]);
    m_training_job_early_stopping_type_isSet = !json[QString("TrainingJobEarlyStoppingType")].isNull() && m_training_job_early_stopping_type_isValid;

    m_tuning_job_completion_criteria_isValid = ::OpenAPI::fromJsonValue(m_tuning_job_completion_criteria, json[QString("TuningJobCompletionCriteria")]);
    m_tuning_job_completion_criteria_isSet = !json[QString("TuningJobCompletionCriteria")].isNull() && m_tuning_job_completion_criteria_isValid;

    m_random_seed_isValid = ::OpenAPI::fromJsonValue(m_random_seed, json[QString("RandomSeed")]);
    m_random_seed_isSet = !json[QString("RandomSeed")].isNull() && m_random_seed_isValid;
}

QString OAIHyperParameterTuningJobConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperParameterTuningJobConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_strategy.isSet()) {
        obj.insert(QString("Strategy"), ::OpenAPI::toJsonValue(m_strategy));
    }
    if (m_strategy_config.isSet()) {
        obj.insert(QString("StrategyConfig"), ::OpenAPI::toJsonValue(m_strategy_config));
    }
    if (m_hyper_parameter_tuning_job_objective.isSet()) {
        obj.insert(QString("HyperParameterTuningJobObjective"), ::OpenAPI::toJsonValue(m_hyper_parameter_tuning_job_objective));
    }
    if (m_resource_limits.isSet()) {
        obj.insert(QString("ResourceLimits"), ::OpenAPI::toJsonValue(m_resource_limits));
    }
    if (m_parameter_ranges.isSet()) {
        obj.insert(QString("ParameterRanges"), ::OpenAPI::toJsonValue(m_parameter_ranges));
    }
    if (m_training_job_early_stopping_type.isSet()) {
        obj.insert(QString("TrainingJobEarlyStoppingType"), ::OpenAPI::toJsonValue(m_training_job_early_stopping_type));
    }
    if (m_tuning_job_completion_criteria.isSet()) {
        obj.insert(QString("TuningJobCompletionCriteria"), ::OpenAPI::toJsonValue(m_tuning_job_completion_criteria));
    }
    if (m_random_seed_isSet) {
        obj.insert(QString("RandomSeed"), ::OpenAPI::toJsonValue(m_random_seed));
    }
    return obj;
}

OAIHyperParameterTuningJobStrategyType OAIHyperParameterTuningJobConfig::getStrategy() const {
    return m_strategy;
}
void OAIHyperParameterTuningJobConfig::setStrategy(const OAIHyperParameterTuningJobStrategyType &strategy) {
    m_strategy = strategy;
    m_strategy_isSet = true;
}

bool OAIHyperParameterTuningJobConfig::is_strategy_Set() const{
    return m_strategy_isSet;
}

bool OAIHyperParameterTuningJobConfig::is_strategy_Valid() const{
    return m_strategy_isValid;
}

OAIHyperParameterTuningJobConfig_StrategyConfig OAIHyperParameterTuningJobConfig::getStrategyConfig() const {
    return m_strategy_config;
}
void OAIHyperParameterTuningJobConfig::setStrategyConfig(const OAIHyperParameterTuningJobConfig_StrategyConfig &strategy_config) {
    m_strategy_config = strategy_config;
    m_strategy_config_isSet = true;
}

bool OAIHyperParameterTuningJobConfig::is_strategy_config_Set() const{
    return m_strategy_config_isSet;
}

bool OAIHyperParameterTuningJobConfig::is_strategy_config_Valid() const{
    return m_strategy_config_isValid;
}

OAIHyperParameterTuningJobConfig_HyperParameterTuningJobObjective OAIHyperParameterTuningJobConfig::getHyperParameterTuningJobObjective() const {
    return m_hyper_parameter_tuning_job_objective;
}
void OAIHyperParameterTuningJobConfig::setHyperParameterTuningJobObjective(const OAIHyperParameterTuningJobConfig_HyperParameterTuningJobObjective &hyper_parameter_tuning_job_objective) {
    m_hyper_parameter_tuning_job_objective = hyper_parameter_tuning_job_objective;
    m_hyper_parameter_tuning_job_objective_isSet = true;
}

bool OAIHyperParameterTuningJobConfig::is_hyper_parameter_tuning_job_objective_Set() const{
    return m_hyper_parameter_tuning_job_objective_isSet;
}

bool OAIHyperParameterTuningJobConfig::is_hyper_parameter_tuning_job_objective_Valid() const{
    return m_hyper_parameter_tuning_job_objective_isValid;
}

OAIHyperParameterTuningJobConfig_ResourceLimits OAIHyperParameterTuningJobConfig::getResourceLimits() const {
    return m_resource_limits;
}
void OAIHyperParameterTuningJobConfig::setResourceLimits(const OAIHyperParameterTuningJobConfig_ResourceLimits &resource_limits) {
    m_resource_limits = resource_limits;
    m_resource_limits_isSet = true;
}

bool OAIHyperParameterTuningJobConfig::is_resource_limits_Set() const{
    return m_resource_limits_isSet;
}

bool OAIHyperParameterTuningJobConfig::is_resource_limits_Valid() const{
    return m_resource_limits_isValid;
}

OAIHyperParameterTuningJobConfig_ParameterRanges OAIHyperParameterTuningJobConfig::getParameterRanges() const {
    return m_parameter_ranges;
}
void OAIHyperParameterTuningJobConfig::setParameterRanges(const OAIHyperParameterTuningJobConfig_ParameterRanges &parameter_ranges) {
    m_parameter_ranges = parameter_ranges;
    m_parameter_ranges_isSet = true;
}

bool OAIHyperParameterTuningJobConfig::is_parameter_ranges_Set() const{
    return m_parameter_ranges_isSet;
}

bool OAIHyperParameterTuningJobConfig::is_parameter_ranges_Valid() const{
    return m_parameter_ranges_isValid;
}

OAITrainingJobEarlyStoppingType OAIHyperParameterTuningJobConfig::getTrainingJobEarlyStoppingType() const {
    return m_training_job_early_stopping_type;
}
void OAIHyperParameterTuningJobConfig::setTrainingJobEarlyStoppingType(const OAITrainingJobEarlyStoppingType &training_job_early_stopping_type) {
    m_training_job_early_stopping_type = training_job_early_stopping_type;
    m_training_job_early_stopping_type_isSet = true;
}

bool OAIHyperParameterTuningJobConfig::is_training_job_early_stopping_type_Set() const{
    return m_training_job_early_stopping_type_isSet;
}

bool OAIHyperParameterTuningJobConfig::is_training_job_early_stopping_type_Valid() const{
    return m_training_job_early_stopping_type_isValid;
}

OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria OAIHyperParameterTuningJobConfig::getTuningJobCompletionCriteria() const {
    return m_tuning_job_completion_criteria;
}
void OAIHyperParameterTuningJobConfig::setTuningJobCompletionCriteria(const OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria &tuning_job_completion_criteria) {
    m_tuning_job_completion_criteria = tuning_job_completion_criteria;
    m_tuning_job_completion_criteria_isSet = true;
}

bool OAIHyperParameterTuningJobConfig::is_tuning_job_completion_criteria_Set() const{
    return m_tuning_job_completion_criteria_isSet;
}

bool OAIHyperParameterTuningJobConfig::is_tuning_job_completion_criteria_Valid() const{
    return m_tuning_job_completion_criteria_isValid;
}

qint32 OAIHyperParameterTuningJobConfig::getRandomSeed() const {
    return m_random_seed;
}
void OAIHyperParameterTuningJobConfig::setRandomSeed(const qint32 &random_seed) {
    m_random_seed = random_seed;
    m_random_seed_isSet = true;
}

bool OAIHyperParameterTuningJobConfig::is_random_seed_Set() const{
    return m_random_seed_isSet;
}

bool OAIHyperParameterTuningJobConfig::is_random_seed_Valid() const{
    return m_random_seed_isValid;
}

bool OAIHyperParameterTuningJobConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyper_parameter_tuning_job_objective.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_ranges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_job_early_stopping_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuning_job_completion_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_random_seed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperParameterTuningJobConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_strategy_isValid && m_resource_limits_isValid && true;
}

} // namespace OpenAPI
