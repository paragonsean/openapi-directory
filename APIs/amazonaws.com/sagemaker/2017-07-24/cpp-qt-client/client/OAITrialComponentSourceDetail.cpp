/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrialComponentSourceDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrialComponentSourceDetail::OAITrialComponentSourceDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrialComponentSourceDetail::OAITrialComponentSourceDetail() {
    this->initializeModel();
}

OAITrialComponentSourceDetail::~OAITrialComponentSourceDetail() {}

void OAITrialComponentSourceDetail::initializeModel() {

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_training_job_isSet = false;
    m_training_job_isValid = false;

    m_processing_job_isSet = false;
    m_processing_job_isValid = false;

    m_transform_job_isSet = false;
    m_transform_job_isValid = false;
}

void OAITrialComponentSourceDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrialComponentSourceDetail::fromJsonObject(QJsonObject json) {

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("SourceArn")]);
    m_source_arn_isSet = !json[QString("SourceArn")].isNull() && m_source_arn_isValid;

    m_training_job_isValid = ::OpenAPI::fromJsonValue(m_training_job, json[QString("TrainingJob")]);
    m_training_job_isSet = !json[QString("TrainingJob")].isNull() && m_training_job_isValid;

    m_processing_job_isValid = ::OpenAPI::fromJsonValue(m_processing_job, json[QString("ProcessingJob")]);
    m_processing_job_isSet = !json[QString("ProcessingJob")].isNull() && m_processing_job_isValid;

    m_transform_job_isValid = ::OpenAPI::fromJsonValue(m_transform_job, json[QString("TransformJob")]);
    m_transform_job_isSet = !json[QString("TransformJob")].isNull() && m_transform_job_isValid;
}

QString OAITrialComponentSourceDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrialComponentSourceDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_source_arn_isSet) {
        obj.insert(QString("SourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_training_job.isSet()) {
        obj.insert(QString("TrainingJob"), ::OpenAPI::toJsonValue(m_training_job));
    }
    if (m_processing_job.isSet()) {
        obj.insert(QString("ProcessingJob"), ::OpenAPI::toJsonValue(m_processing_job));
    }
    if (m_transform_job.isSet()) {
        obj.insert(QString("TransformJob"), ::OpenAPI::toJsonValue(m_transform_job));
    }
    return obj;
}

QString OAITrialComponentSourceDetail::getSourceArn() const {
    return m_source_arn;
}
void OAITrialComponentSourceDetail::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAITrialComponentSourceDetail::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAITrialComponentSourceDetail::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

OAITrialComponentSourceDetail_TrainingJob OAITrialComponentSourceDetail::getTrainingJob() const {
    return m_training_job;
}
void OAITrialComponentSourceDetail::setTrainingJob(const OAITrialComponentSourceDetail_TrainingJob &training_job) {
    m_training_job = training_job;
    m_training_job_isSet = true;
}

bool OAITrialComponentSourceDetail::is_training_job_Set() const{
    return m_training_job_isSet;
}

bool OAITrialComponentSourceDetail::is_training_job_Valid() const{
    return m_training_job_isValid;
}

OAITrialComponentSourceDetail_ProcessingJob OAITrialComponentSourceDetail::getProcessingJob() const {
    return m_processing_job;
}
void OAITrialComponentSourceDetail::setProcessingJob(const OAITrialComponentSourceDetail_ProcessingJob &processing_job) {
    m_processing_job = processing_job;
    m_processing_job_isSet = true;
}

bool OAITrialComponentSourceDetail::is_processing_job_Set() const{
    return m_processing_job_isSet;
}

bool OAITrialComponentSourceDetail::is_processing_job_Valid() const{
    return m_processing_job_isValid;
}

OAITrialComponentSourceDetail_TransformJob OAITrialComponentSourceDetail::getTransformJob() const {
    return m_transform_job;
}
void OAITrialComponentSourceDetail::setTransformJob(const OAITrialComponentSourceDetail_TransformJob &transform_job) {
    m_transform_job = transform_job;
    m_transform_job_isSet = true;
}

bool OAITrialComponentSourceDetail::is_transform_job_Set() const{
    return m_transform_job_isSet;
}

bool OAITrialComponentSourceDetail::is_transform_job_Valid() const{
    return m_transform_job_isValid;
}

bool OAITrialComponentSourceDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_job.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrialComponentSourceDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
