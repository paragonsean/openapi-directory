/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeInferenceRecommendationsJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeInferenceRecommendationsJobResponse::OAIDescribeInferenceRecommendationsJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeInferenceRecommendationsJobResponse::OAIDescribeInferenceRecommendationsJobResponse() {
    this->initializeModel();
}

OAIDescribeInferenceRecommendationsJobResponse::~OAIDescribeInferenceRecommendationsJobResponse() {}

void OAIDescribeInferenceRecommendationsJobResponse::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_description_isSet = false;
    m_job_description_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_job_arn_isSet = false;
    m_job_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_stopping_conditions_isSet = false;
    m_stopping_conditions_isValid = false;

    m_inference_recommendations_isSet = false;
    m_inference_recommendations_isValid = false;

    m_endpoint_performances_isSet = false;
    m_endpoint_performances_isValid = false;
}

void OAIDescribeInferenceRecommendationsJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeInferenceRecommendationsJobResponse::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_description_isValid = ::OpenAPI::fromJsonValue(m_job_description, json[QString("JobDescription")]);
    m_job_description_isSet = !json[QString("JobDescription")].isNull() && m_job_description_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_job_arn_isValid = ::OpenAPI::fromJsonValue(m_job_arn, json[QString("JobArn")]);
    m_job_arn_isSet = !json[QString("JobArn")].isNull() && m_job_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("CompletionTime")]);
    m_completion_time_isSet = !json[QString("CompletionTime")].isNull() && m_completion_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("InputConfig")]);
    m_input_config_isSet = !json[QString("InputConfig")].isNull() && m_input_config_isValid;

    m_stopping_conditions_isValid = ::OpenAPI::fromJsonValue(m_stopping_conditions, json[QString("StoppingConditions")]);
    m_stopping_conditions_isSet = !json[QString("StoppingConditions")].isNull() && m_stopping_conditions_isValid;

    m_inference_recommendations_isValid = ::OpenAPI::fromJsonValue(m_inference_recommendations, json[QString("InferenceRecommendations")]);
    m_inference_recommendations_isSet = !json[QString("InferenceRecommendations")].isNull() && m_inference_recommendations_isValid;

    m_endpoint_performances_isValid = ::OpenAPI::fromJsonValue(m_endpoint_performances, json[QString("EndpointPerformances")]);
    m_endpoint_performances_isSet = !json[QString("EndpointPerformances")].isNull() && m_endpoint_performances_isValid;
}

QString OAIDescribeInferenceRecommendationsJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeInferenceRecommendationsJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_description_isSet) {
        obj.insert(QString("JobDescription"), ::OpenAPI::toJsonValue(m_job_description));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_job_arn_isSet) {
        obj.insert(QString("JobArn"), ::OpenAPI::toJsonValue(m_job_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("CompletionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("InputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_stopping_conditions.isSet()) {
        obj.insert(QString("StoppingConditions"), ::OpenAPI::toJsonValue(m_stopping_conditions));
    }
    if (m_inference_recommendations.isSet()) {
        obj.insert(QString("InferenceRecommendations"), ::OpenAPI::toJsonValue(m_inference_recommendations));
    }
    if (m_endpoint_performances.isSet()) {
        obj.insert(QString("EndpointPerformances"), ::OpenAPI::toJsonValue(m_endpoint_performances));
    }
    return obj;
}

QString OAIDescribeInferenceRecommendationsJobResponse::getJobName() const {
    return m_job_name;
}
void OAIDescribeInferenceRecommendationsJobResponse::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAIDescribeInferenceRecommendationsJobResponse::getJobDescription() const {
    return m_job_description;
}
void OAIDescribeInferenceRecommendationsJobResponse::setJobDescription(const QString &job_description) {
    m_job_description = job_description;
    m_job_description_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_job_description_Set() const{
    return m_job_description_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_job_description_Valid() const{
    return m_job_description_isValid;
}

OAIRecommendationJobType OAIDescribeInferenceRecommendationsJobResponse::getJobType() const {
    return m_job_type;
}
void OAIDescribeInferenceRecommendationsJobResponse::setJobType(const OAIRecommendationJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAIDescribeInferenceRecommendationsJobResponse::getJobArn() const {
    return m_job_arn;
}
void OAIDescribeInferenceRecommendationsJobResponse::setJobArn(const QString &job_arn) {
    m_job_arn = job_arn;
    m_job_arn_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_job_arn_Set() const{
    return m_job_arn_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_job_arn_Valid() const{
    return m_job_arn_isValid;
}

QString OAIDescribeInferenceRecommendationsJobResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeInferenceRecommendationsJobResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIRecommendationJobStatus OAIDescribeInferenceRecommendationsJobResponse::getStatus() const {
    return m_status;
}
void OAIDescribeInferenceRecommendationsJobResponse::setStatus(const OAIRecommendationJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeInferenceRecommendationsJobResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeInferenceRecommendationsJobResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeInferenceRecommendationsJobResponse::getCompletionTime() const {
    return m_completion_time;
}
void OAIDescribeInferenceRecommendationsJobResponse::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QDateTime OAIDescribeInferenceRecommendationsJobResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeInferenceRecommendationsJobResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIDescribeInferenceRecommendationsJobResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIDescribeInferenceRecommendationsJobResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIDescribeInferenceRecommendationsJobResponse_InputConfig OAIDescribeInferenceRecommendationsJobResponse::getInputConfig() const {
    return m_input_config;
}
void OAIDescribeInferenceRecommendationsJobResponse::setInputConfig(const OAIDescribeInferenceRecommendationsJobResponse_InputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_input_config_Valid() const{
    return m_input_config_isValid;
}

OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions OAIDescribeInferenceRecommendationsJobResponse::getStoppingConditions() const {
    return m_stopping_conditions;
}
void OAIDescribeInferenceRecommendationsJobResponse::setStoppingConditions(const OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions &stopping_conditions) {
    m_stopping_conditions = stopping_conditions;
    m_stopping_conditions_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_stopping_conditions_Set() const{
    return m_stopping_conditions_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_stopping_conditions_Valid() const{
    return m_stopping_conditions_isValid;
}

QList OAIDescribeInferenceRecommendationsJobResponse::getInferenceRecommendations() const {
    return m_inference_recommendations;
}
void OAIDescribeInferenceRecommendationsJobResponse::setInferenceRecommendations(const QList &inference_recommendations) {
    m_inference_recommendations = inference_recommendations;
    m_inference_recommendations_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_inference_recommendations_Set() const{
    return m_inference_recommendations_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_inference_recommendations_Valid() const{
    return m_inference_recommendations_isValid;
}

QList OAIDescribeInferenceRecommendationsJobResponse::getEndpointPerformances() const {
    return m_endpoint_performances;
}
void OAIDescribeInferenceRecommendationsJobResponse::setEndpointPerformances(const QList &endpoint_performances) {
    m_endpoint_performances = endpoint_performances;
    m_endpoint_performances_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_endpoint_performances_Set() const{
    return m_endpoint_performances_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse::is_endpoint_performances_Valid() const{
    return m_endpoint_performances_isValid;
}

bool OAIDescribeInferenceRecommendationsJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_recommendations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_performances.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeInferenceRecommendationsJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_name_isValid && m_job_type_isValid && m_job_arn_isValid && m_role_arn_isValid && m_status_isValid && m_creation_time_isValid && m_last_modified_time_isValid && m_input_config_isValid && true;
}

} // namespace OpenAPI
