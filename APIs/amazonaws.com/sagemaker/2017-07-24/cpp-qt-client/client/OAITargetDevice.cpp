/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetDevice::OAITargetDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetDevice::OAITargetDevice() {
    this->initializeModel();
}

OAITargetDevice::~OAITargetDevice() {}

void OAITargetDevice::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITargetDevice::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITargetDevice::fromJson(QString jsonString) {
    
    if ( jsonString.compare("lambda", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::LAMBDA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_m4", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_M4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_m5", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_M5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_c4", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_C4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_c5", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_C5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_p2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_P2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_p3", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_P3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_g4dn", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_G4DN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_inf1", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_INF1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_inf2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_INF2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_trn1", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_TRN1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml_eia2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::ML_EIA2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("jetson_tx1", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::JETSON_TX1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("jetson_tx2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::JETSON_TX2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("jetson_nano", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::JETSON_NANO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("jetson_xavier", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::JETSON_XAVIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rasp3b", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::RASP3B;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("imx8qm", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::IMX8QM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("deeplens", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::DEEPLENS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rk3399", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::RK3399;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rk3288", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::RK3288;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("aisage", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::AISAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sbe_c", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::SBE_C;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("qcs605", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::QCS605;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("qcs603", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::QCS603;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sitara_am57x", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::SITARA_AM57X;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("amba_cv2", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::AMBA_CV2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("amba_cv22", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::AMBA_CV22;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("amba_cv25", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::AMBA_CV25;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("x86_win32", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::X86_WIN32;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("x86_win64", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::X86_WIN64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("coreml", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::COREML;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("jacinto_tda4vm", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::JACINTO_TDA4VM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("imx8mplus", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetDevice::IMX8MPLUS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITargetDevice::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITargetDevice::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITargetDevice::LAMBDA:
            val = "lambda";
            break;
        case eOAITargetDevice::ML_M4:
            val = "ml_m4";
            break;
        case eOAITargetDevice::ML_M5:
            val = "ml_m5";
            break;
        case eOAITargetDevice::ML_C4:
            val = "ml_c4";
            break;
        case eOAITargetDevice::ML_C5:
            val = "ml_c5";
            break;
        case eOAITargetDevice::ML_P2:
            val = "ml_p2";
            break;
        case eOAITargetDevice::ML_P3:
            val = "ml_p3";
            break;
        case eOAITargetDevice::ML_G4DN:
            val = "ml_g4dn";
            break;
        case eOAITargetDevice::ML_INF1:
            val = "ml_inf1";
            break;
        case eOAITargetDevice::ML_INF2:
            val = "ml_inf2";
            break;
        case eOAITargetDevice::ML_TRN1:
            val = "ml_trn1";
            break;
        case eOAITargetDevice::ML_EIA2:
            val = "ml_eia2";
            break;
        case eOAITargetDevice::JETSON_TX1:
            val = "jetson_tx1";
            break;
        case eOAITargetDevice::JETSON_TX2:
            val = "jetson_tx2";
            break;
        case eOAITargetDevice::JETSON_NANO:
            val = "jetson_nano";
            break;
        case eOAITargetDevice::JETSON_XAVIER:
            val = "jetson_xavier";
            break;
        case eOAITargetDevice::RASP3B:
            val = "rasp3b";
            break;
        case eOAITargetDevice::IMX8QM:
            val = "imx8qm";
            break;
        case eOAITargetDevice::DEEPLENS:
            val = "deeplens";
            break;
        case eOAITargetDevice::RK3399:
            val = "rk3399";
            break;
        case eOAITargetDevice::RK3288:
            val = "rk3288";
            break;
        case eOAITargetDevice::AISAGE:
            val = "aisage";
            break;
        case eOAITargetDevice::SBE_C:
            val = "sbe_c";
            break;
        case eOAITargetDevice::QCS605:
            val = "qcs605";
            break;
        case eOAITargetDevice::QCS603:
            val = "qcs603";
            break;
        case eOAITargetDevice::SITARA_AM57X:
            val = "sitara_am57x";
            break;
        case eOAITargetDevice::AMBA_CV2:
            val = "amba_cv2";
            break;
        case eOAITargetDevice::AMBA_CV22:
            val = "amba_cv22";
            break;
        case eOAITargetDevice::AMBA_CV25:
            val = "amba_cv25";
            break;
        case eOAITargetDevice::X86_WIN32:
            val = "x86_win32";
            break;
        case eOAITargetDevice::X86_WIN64:
            val = "x86_win64";
            break;
        case eOAITargetDevice::COREML:
            val = "coreml";
            break;
        case eOAITargetDevice::JACINTO_TDA4VM:
            val = "jacinto_tda4vm";
            break;
        case eOAITargetDevice::IMX8MPLUS:
            val = "imx8mplus";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITargetDevice::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITargetDevice::eOAITargetDevice OAITargetDevice::getValue() const {
    return m_value;
}

void OAITargetDevice::setValue(const OAITargetDevice::eOAITargetDevice& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITargetDevice::isSet() const {
    
    return m_value_isSet;
}

bool OAITargetDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
