/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProductionVariant.h
 *
 *  Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic among the models by specifying variant weights. For more information on production variants, check &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html\&quot;&gt; Production variants&lt;/a&gt;. 
 */

#ifndef OAIProductionVariant_H
#define OAIProductionVariant_H

#include <QJsonObject>

#include "OAIProductionVariantAcceleratorType.h"
#include "OAIProductionVariantInstanceType.h"
#include "OAIProductionVariant_CoreDumpConfig.h"
#include "OAIProductionVariant_ServerlessConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProductionVariant_CoreDumpConfig;
class OAIProductionVariant_ServerlessConfig;

class OAIProductionVariant : public OAIObject {
public:
    OAIProductionVariant();
    OAIProductionVariant(QString json);
    ~OAIProductionVariant() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getVariantName() const;
    void setVariantName(const QString &variant_name);
    bool is_variant_name_Set() const;
    bool is_variant_name_Valid() const;

    QString getModelName() const;
    void setModelName(const QString &model_name);
    bool is_model_name_Set() const;
    bool is_model_name_Valid() const;

    qint32 getInitialInstanceCount() const;
    void setInitialInstanceCount(const qint32 &initial_instance_count);
    bool is_initial_instance_count_Set() const;
    bool is_initial_instance_count_Valid() const;

    OAIProductionVariantInstanceType getInstanceType() const;
    void setInstanceType(const OAIProductionVariantInstanceType &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    float getInitialVariantWeight() const;
    void setInitialVariantWeight(const float &initial_variant_weight);
    bool is_initial_variant_weight_Set() const;
    bool is_initial_variant_weight_Valid() const;

    OAIProductionVariantAcceleratorType getAcceleratorType() const;
    void setAcceleratorType(const OAIProductionVariantAcceleratorType &accelerator_type);
    bool is_accelerator_type_Set() const;
    bool is_accelerator_type_Valid() const;

    OAIProductionVariant_CoreDumpConfig getCoreDumpConfig() const;
    void setCoreDumpConfig(const OAIProductionVariant_CoreDumpConfig &core_dump_config);
    bool is_core_dump_config_Set() const;
    bool is_core_dump_config_Valid() const;

    OAIProductionVariant_ServerlessConfig getServerlessConfig() const;
    void setServerlessConfig(const OAIProductionVariant_ServerlessConfig &serverless_config);
    bool is_serverless_config_Set() const;
    bool is_serverless_config_Valid() const;

    qint32 getVolumeSizeInGb() const;
    void setVolumeSizeInGb(const qint32 &volume_size_in_gb);
    bool is_volume_size_in_gb_Set() const;
    bool is_volume_size_in_gb_Valid() const;

    qint32 getModelDataDownloadTimeoutInSeconds() const;
    void setModelDataDownloadTimeoutInSeconds(const qint32 &model_data_download_timeout_in_seconds);
    bool is_model_data_download_timeout_in_seconds_Set() const;
    bool is_model_data_download_timeout_in_seconds_Valid() const;

    qint32 getContainerStartupHealthCheckTimeoutInSeconds() const;
    void setContainerStartupHealthCheckTimeoutInSeconds(const qint32 &container_startup_health_check_timeout_in_seconds);
    bool is_container_startup_health_check_timeout_in_seconds_Set() const;
    bool is_container_startup_health_check_timeout_in_seconds_Valid() const;

    bool getEnableSsmAccess() const;
    void setEnableSsmAccess(const bool &enable_ssm_access);
    bool is_enable_ssm_access_Set() const;
    bool is_enable_ssm_access_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_variant_name;
    bool m_variant_name_isSet;
    bool m_variant_name_isValid;

    QString m_model_name;
    bool m_model_name_isSet;
    bool m_model_name_isValid;

    qint32 m_initial_instance_count;
    bool m_initial_instance_count_isSet;
    bool m_initial_instance_count_isValid;

    OAIProductionVariantInstanceType m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    float m_initial_variant_weight;
    bool m_initial_variant_weight_isSet;
    bool m_initial_variant_weight_isValid;

    OAIProductionVariantAcceleratorType m_accelerator_type;
    bool m_accelerator_type_isSet;
    bool m_accelerator_type_isValid;

    OAIProductionVariant_CoreDumpConfig m_core_dump_config;
    bool m_core_dump_config_isSet;
    bool m_core_dump_config_isValid;

    OAIProductionVariant_ServerlessConfig m_serverless_config;
    bool m_serverless_config_isSet;
    bool m_serverless_config_isValid;

    qint32 m_volume_size_in_gb;
    bool m_volume_size_in_gb_isSet;
    bool m_volume_size_in_gb_isValid;

    qint32 m_model_data_download_timeout_in_seconds;
    bool m_model_data_download_timeout_in_seconds_isSet;
    bool m_model_data_download_timeout_in_seconds_isValid;

    qint32 m_container_startup_health_check_timeout_in_seconds;
    bool m_container_startup_health_check_timeout_in_seconds_isSet;
    bool m_container_startup_health_check_timeout_in_seconds_isValid;

    bool m_enable_ssm_access;
    bool m_enable_ssm_access_isSet;
    bool m_enable_ssm_access_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProductionVariant)

#endif // OAIProductionVariant_H
