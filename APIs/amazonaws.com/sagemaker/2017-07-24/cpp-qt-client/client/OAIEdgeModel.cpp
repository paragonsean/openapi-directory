/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdgeModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdgeModel::OAIEdgeModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdgeModel::OAIEdgeModel() {
    this->initializeModel();
}

OAIEdgeModel::~OAIEdgeModel() {}

void OAIEdgeModel::initializeModel() {

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_latest_sample_time_isSet = false;
    m_latest_sample_time_isValid = false;

    m_latest_inference_isSet = false;
    m_latest_inference_isValid = false;
}

void OAIEdgeModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdgeModel::fromJsonObject(QJsonObject json) {

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("ModelVersion")]);
    m_model_version_isSet = !json[QString("ModelVersion")].isNull() && m_model_version_isValid;

    m_latest_sample_time_isValid = ::OpenAPI::fromJsonValue(m_latest_sample_time, json[QString("LatestSampleTime")]);
    m_latest_sample_time_isSet = !json[QString("LatestSampleTime")].isNull() && m_latest_sample_time_isValid;

    m_latest_inference_isValid = ::OpenAPI::fromJsonValue(m_latest_inference, json[QString("LatestInference")]);
    m_latest_inference_isSet = !json[QString("LatestInference")].isNull() && m_latest_inference_isValid;
}

QString OAIEdgeModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdgeModel::asJsonObject() const {
    QJsonObject obj;
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_model_version_isSet) {
        obj.insert(QString("ModelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_latest_sample_time_isSet) {
        obj.insert(QString("LatestSampleTime"), ::OpenAPI::toJsonValue(m_latest_sample_time));
    }
    if (m_latest_inference_isSet) {
        obj.insert(QString("LatestInference"), ::OpenAPI::toJsonValue(m_latest_inference));
    }
    return obj;
}

QString OAIEdgeModel::getModelName() const {
    return m_model_name;
}
void OAIEdgeModel::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIEdgeModel::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIEdgeModel::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIEdgeModel::getModelVersion() const {
    return m_model_version;
}
void OAIEdgeModel::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIEdgeModel::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIEdgeModel::is_model_version_Valid() const{
    return m_model_version_isValid;
}

QDateTime OAIEdgeModel::getLatestSampleTime() const {
    return m_latest_sample_time;
}
void OAIEdgeModel::setLatestSampleTime(const QDateTime &latest_sample_time) {
    m_latest_sample_time = latest_sample_time;
    m_latest_sample_time_isSet = true;
}

bool OAIEdgeModel::is_latest_sample_time_Set() const{
    return m_latest_sample_time_isSet;
}

bool OAIEdgeModel::is_latest_sample_time_Valid() const{
    return m_latest_sample_time_isValid;
}

QDateTime OAIEdgeModel::getLatestInference() const {
    return m_latest_inference;
}
void OAIEdgeModel::setLatestInference(const QDateTime &latest_inference) {
    m_latest_inference = latest_inference;
    m_latest_inference_isSet = true;
}

bool OAIEdgeModel::is_latest_inference_Set() const{
    return m_latest_inference_isSet;
}

bool OAIEdgeModel::is_latest_inference_Valid() const{
    return m_latest_inference_isValid;
}

bool OAIEdgeModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_sample_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_inference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdgeModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_name_isValid && m_model_version_isValid && true;
}

} // namespace OpenAPI
