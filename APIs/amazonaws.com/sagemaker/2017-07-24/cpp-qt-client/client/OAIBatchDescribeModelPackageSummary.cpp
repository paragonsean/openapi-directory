/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDescribeModelPackageSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDescribeModelPackageSummary::OAIBatchDescribeModelPackageSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDescribeModelPackageSummary::OAIBatchDescribeModelPackageSummary() {
    this->initializeModel();
}

OAIBatchDescribeModelPackageSummary::~OAIBatchDescribeModelPackageSummary() {}

void OAIBatchDescribeModelPackageSummary::initializeModel() {

    m_model_package_group_name_isSet = false;
    m_model_package_group_name_isValid = false;

    m_model_package_version_isSet = false;
    m_model_package_version_isValid = false;

    m_model_package_arn_isSet = false;
    m_model_package_arn_isValid = false;

    m_model_package_description_isSet = false;
    m_model_package_description_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_inference_specification_isSet = false;
    m_inference_specification_isValid = false;

    m_model_package_status_isSet = false;
    m_model_package_status_isValid = false;

    m_model_approval_status_isSet = false;
    m_model_approval_status_isValid = false;
}

void OAIBatchDescribeModelPackageSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDescribeModelPackageSummary::fromJsonObject(QJsonObject json) {

    m_model_package_group_name_isValid = ::OpenAPI::fromJsonValue(m_model_package_group_name, json[QString("ModelPackageGroupName")]);
    m_model_package_group_name_isSet = !json[QString("ModelPackageGroupName")].isNull() && m_model_package_group_name_isValid;

    m_model_package_version_isValid = ::OpenAPI::fromJsonValue(m_model_package_version, json[QString("ModelPackageVersion")]);
    m_model_package_version_isSet = !json[QString("ModelPackageVersion")].isNull() && m_model_package_version_isValid;

    m_model_package_arn_isValid = ::OpenAPI::fromJsonValue(m_model_package_arn, json[QString("ModelPackageArn")]);
    m_model_package_arn_isSet = !json[QString("ModelPackageArn")].isNull() && m_model_package_arn_isValid;

    m_model_package_description_isValid = ::OpenAPI::fromJsonValue(m_model_package_description, json[QString("ModelPackageDescription")]);
    m_model_package_description_isSet = !json[QString("ModelPackageDescription")].isNull() && m_model_package_description_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_inference_specification_isValid = ::OpenAPI::fromJsonValue(m_inference_specification, json[QString("InferenceSpecification")]);
    m_inference_specification_isSet = !json[QString("InferenceSpecification")].isNull() && m_inference_specification_isValid;

    m_model_package_status_isValid = ::OpenAPI::fromJsonValue(m_model_package_status, json[QString("ModelPackageStatus")]);
    m_model_package_status_isSet = !json[QString("ModelPackageStatus")].isNull() && m_model_package_status_isValid;

    m_model_approval_status_isValid = ::OpenAPI::fromJsonValue(m_model_approval_status, json[QString("ModelApprovalStatus")]);
    m_model_approval_status_isSet = !json[QString("ModelApprovalStatus")].isNull() && m_model_approval_status_isValid;
}

QString OAIBatchDescribeModelPackageSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDescribeModelPackageSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_model_package_group_name_isSet) {
        obj.insert(QString("ModelPackageGroupName"), ::OpenAPI::toJsonValue(m_model_package_group_name));
    }
    if (m_model_package_version_isSet) {
        obj.insert(QString("ModelPackageVersion"), ::OpenAPI::toJsonValue(m_model_package_version));
    }
    if (m_model_package_arn_isSet) {
        obj.insert(QString("ModelPackageArn"), ::OpenAPI::toJsonValue(m_model_package_arn));
    }
    if (m_model_package_description_isSet) {
        obj.insert(QString("ModelPackageDescription"), ::OpenAPI::toJsonValue(m_model_package_description));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_inference_specification.isSet()) {
        obj.insert(QString("InferenceSpecification"), ::OpenAPI::toJsonValue(m_inference_specification));
    }
    if (m_model_package_status.isSet()) {
        obj.insert(QString("ModelPackageStatus"), ::OpenAPI::toJsonValue(m_model_package_status));
    }
    if (m_model_approval_status.isSet()) {
        obj.insert(QString("ModelApprovalStatus"), ::OpenAPI::toJsonValue(m_model_approval_status));
    }
    return obj;
}

QString OAIBatchDescribeModelPackageSummary::getModelPackageGroupName() const {
    return m_model_package_group_name;
}
void OAIBatchDescribeModelPackageSummary::setModelPackageGroupName(const QString &model_package_group_name) {
    m_model_package_group_name = model_package_group_name;
    m_model_package_group_name_isSet = true;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_group_name_Set() const{
    return m_model_package_group_name_isSet;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_group_name_Valid() const{
    return m_model_package_group_name_isValid;
}

qint32 OAIBatchDescribeModelPackageSummary::getModelPackageVersion() const {
    return m_model_package_version;
}
void OAIBatchDescribeModelPackageSummary::setModelPackageVersion(const qint32 &model_package_version) {
    m_model_package_version = model_package_version;
    m_model_package_version_isSet = true;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_version_Set() const{
    return m_model_package_version_isSet;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_version_Valid() const{
    return m_model_package_version_isValid;
}

QString OAIBatchDescribeModelPackageSummary::getModelPackageArn() const {
    return m_model_package_arn;
}
void OAIBatchDescribeModelPackageSummary::setModelPackageArn(const QString &model_package_arn) {
    m_model_package_arn = model_package_arn;
    m_model_package_arn_isSet = true;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_arn_Set() const{
    return m_model_package_arn_isSet;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_arn_Valid() const{
    return m_model_package_arn_isValid;
}

QString OAIBatchDescribeModelPackageSummary::getModelPackageDescription() const {
    return m_model_package_description;
}
void OAIBatchDescribeModelPackageSummary::setModelPackageDescription(const QString &model_package_description) {
    m_model_package_description = model_package_description;
    m_model_package_description_isSet = true;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_description_Set() const{
    return m_model_package_description_isSet;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_description_Valid() const{
    return m_model_package_description_isValid;
}

QDateTime OAIBatchDescribeModelPackageSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIBatchDescribeModelPackageSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIBatchDescribeModelPackageSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIBatchDescribeModelPackageSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIInferenceSpecification OAIBatchDescribeModelPackageSummary::getInferenceSpecification() const {
    return m_inference_specification;
}
void OAIBatchDescribeModelPackageSummary::setInferenceSpecification(const OAIInferenceSpecification &inference_specification) {
    m_inference_specification = inference_specification;
    m_inference_specification_isSet = true;
}

bool OAIBatchDescribeModelPackageSummary::is_inference_specification_Set() const{
    return m_inference_specification_isSet;
}

bool OAIBatchDescribeModelPackageSummary::is_inference_specification_Valid() const{
    return m_inference_specification_isValid;
}

OAIModelPackageStatus OAIBatchDescribeModelPackageSummary::getModelPackageStatus() const {
    return m_model_package_status;
}
void OAIBatchDescribeModelPackageSummary::setModelPackageStatus(const OAIModelPackageStatus &model_package_status) {
    m_model_package_status = model_package_status;
    m_model_package_status_isSet = true;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_status_Set() const{
    return m_model_package_status_isSet;
}

bool OAIBatchDescribeModelPackageSummary::is_model_package_status_Valid() const{
    return m_model_package_status_isValid;
}

OAIModelApprovalStatus OAIBatchDescribeModelPackageSummary::getModelApprovalStatus() const {
    return m_model_approval_status;
}
void OAIBatchDescribeModelPackageSummary::setModelApprovalStatus(const OAIModelApprovalStatus &model_approval_status) {
    m_model_approval_status = model_approval_status;
    m_model_approval_status_isSet = true;
}

bool OAIBatchDescribeModelPackageSummary::is_model_approval_status_Set() const{
    return m_model_approval_status_isSet;
}

bool OAIBatchDescribeModelPackageSummary::is_model_approval_status_Valid() const{
    return m_model_approval_status_isValid;
}

bool OAIBatchDescribeModelPackageSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_package_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_approval_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDescribeModelPackageSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_package_group_name_isValid && m_model_package_arn_isValid && m_creation_time_isValid && m_inference_specification_isValid && m_model_package_status_isValid && true;
}

} // namespace OpenAPI
