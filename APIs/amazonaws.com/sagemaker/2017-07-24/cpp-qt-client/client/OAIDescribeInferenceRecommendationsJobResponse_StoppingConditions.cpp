/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions() {
    this->initializeModel();
}

OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::~OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions() {}

void OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::initializeModel() {

    m_max_invocations_isSet = false;
    m_max_invocations_isValid = false;

    m_model_latency_thresholds_isSet = false;
    m_model_latency_thresholds_isValid = false;

    m_flat_invocations_isSet = false;
    m_flat_invocations_isValid = false;
}

void OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::fromJsonObject(QJsonObject json) {

    m_max_invocations_isValid = ::OpenAPI::fromJsonValue(m_max_invocations, json[QString("MaxInvocations")]);
    m_max_invocations_isSet = !json[QString("MaxInvocations")].isNull() && m_max_invocations_isValid;

    m_model_latency_thresholds_isValid = ::OpenAPI::fromJsonValue(m_model_latency_thresholds, json[QString("ModelLatencyThresholds")]);
    m_model_latency_thresholds_isSet = !json[QString("ModelLatencyThresholds")].isNull() && m_model_latency_thresholds_isValid;

    m_flat_invocations_isValid = ::OpenAPI::fromJsonValue(m_flat_invocations, json[QString("FlatInvocations")]);
    m_flat_invocations_isSet = !json[QString("FlatInvocations")].isNull() && m_flat_invocations_isValid;
}

QString OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_max_invocations_isSet) {
        obj.insert(QString("MaxInvocations"), ::OpenAPI::toJsonValue(m_max_invocations));
    }
    if (m_model_latency_thresholds.isSet()) {
        obj.insert(QString("ModelLatencyThresholds"), ::OpenAPI::toJsonValue(m_model_latency_thresholds));
    }
    if (m_flat_invocations.isSet()) {
        obj.insert(QString("FlatInvocations"), ::OpenAPI::toJsonValue(m_flat_invocations));
    }
    return obj;
}

qint32 OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::getMaxInvocations() const {
    return m_max_invocations;
}
void OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::setMaxInvocations(const qint32 &max_invocations) {
    m_max_invocations = max_invocations;
    m_max_invocations_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::is_max_invocations_Set() const{
    return m_max_invocations_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::is_max_invocations_Valid() const{
    return m_max_invocations_isValid;
}

QList OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::getModelLatencyThresholds() const {
    return m_model_latency_thresholds;
}
void OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::setModelLatencyThresholds(const QList &model_latency_thresholds) {
    m_model_latency_thresholds = model_latency_thresholds;
    m_model_latency_thresholds_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::is_model_latency_thresholds_Set() const{
    return m_model_latency_thresholds_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::is_model_latency_thresholds_Valid() const{
    return m_model_latency_thresholds_isValid;
}

OAIFlatInvocations OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::getFlatInvocations() const {
    return m_flat_invocations;
}
void OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::setFlatInvocations(const OAIFlatInvocations &flat_invocations) {
    m_flat_invocations = flat_invocations;
    m_flat_invocations_isSet = true;
}

bool OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::is_flat_invocations_Set() const{
    return m_flat_invocations_isSet;
}

bool OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::is_flat_invocations_Valid() const{
    return m_flat_invocations_isValid;
}

bool OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_invocations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_latency_thresholds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flat_invocations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeInferenceRecommendationsJobResponse_StoppingConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
