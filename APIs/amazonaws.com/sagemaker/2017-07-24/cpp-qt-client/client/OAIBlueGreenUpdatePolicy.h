/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBlueGreenUpdatePolicy.h
 *
 * Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
 */

#ifndef OAIBlueGreenUpdatePolicy_H
#define OAIBlueGreenUpdatePolicy_H

#include <QJsonObject>

#include "OAIBlueGreenUpdatePolicy_TrafficRoutingConfiguration.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBlueGreenUpdatePolicy_TrafficRoutingConfiguration;

class OAIBlueGreenUpdatePolicy : public OAIObject {
public:
    OAIBlueGreenUpdatePolicy();
    OAIBlueGreenUpdatePolicy(QString json);
    ~OAIBlueGreenUpdatePolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBlueGreenUpdatePolicy_TrafficRoutingConfiguration getTrafficRoutingConfiguration() const;
    void setTrafficRoutingConfiguration(const OAIBlueGreenUpdatePolicy_TrafficRoutingConfiguration &traffic_routing_configuration);
    bool is_traffic_routing_configuration_Set() const;
    bool is_traffic_routing_configuration_Valid() const;

    qint32 getTerminationWaitInSeconds() const;
    void setTerminationWaitInSeconds(const qint32 &termination_wait_in_seconds);
    bool is_termination_wait_in_seconds_Set() const;
    bool is_termination_wait_in_seconds_Valid() const;

    qint32 getMaximumExecutionTimeoutInSeconds() const;
    void setMaximumExecutionTimeoutInSeconds(const qint32 &maximum_execution_timeout_in_seconds);
    bool is_maximum_execution_timeout_in_seconds_Set() const;
    bool is_maximum_execution_timeout_in_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBlueGreenUpdatePolicy_TrafficRoutingConfiguration m_traffic_routing_configuration;
    bool m_traffic_routing_configuration_isSet;
    bool m_traffic_routing_configuration_isValid;

    qint32 m_termination_wait_in_seconds;
    bool m_termination_wait_in_seconds_isSet;
    bool m_termination_wait_in_seconds_isValid;

    qint32 m_maximum_execution_timeout_in_seconds;
    bool m_maximum_execution_timeout_in_seconds_isSet;
    bool m_maximum_execution_timeout_in_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBlueGreenUpdatePolicy)

#endif // OAIBlueGreenUpdatePolicy_H
