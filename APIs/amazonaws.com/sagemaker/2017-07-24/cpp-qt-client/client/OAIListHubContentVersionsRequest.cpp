/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListHubContentVersionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListHubContentVersionsRequest::OAIListHubContentVersionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListHubContentVersionsRequest::OAIListHubContentVersionsRequest() {
    this->initializeModel();
}

OAIListHubContentVersionsRequest::~OAIListHubContentVersionsRequest() {}

void OAIListHubContentVersionsRequest::initializeModel() {

    m_hub_name_isSet = false;
    m_hub_name_isValid = false;

    m_hub_content_type_isSet = false;
    m_hub_content_type_isValid = false;

    m_hub_content_name_isSet = false;
    m_hub_content_name_isValid = false;

    m_min_version_isSet = false;
    m_min_version_isValid = false;

    m_max_schema_version_isSet = false;
    m_max_schema_version_isValid = false;

    m_creation_time_before_isSet = false;
    m_creation_time_before_isValid = false;

    m_creation_time_after_isSet = false;
    m_creation_time_after_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListHubContentVersionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListHubContentVersionsRequest::fromJsonObject(QJsonObject json) {

    m_hub_name_isValid = ::OpenAPI::fromJsonValue(m_hub_name, json[QString("HubName")]);
    m_hub_name_isSet = !json[QString("HubName")].isNull() && m_hub_name_isValid;

    m_hub_content_type_isValid = ::OpenAPI::fromJsonValue(m_hub_content_type, json[QString("HubContentType")]);
    m_hub_content_type_isSet = !json[QString("HubContentType")].isNull() && m_hub_content_type_isValid;

    m_hub_content_name_isValid = ::OpenAPI::fromJsonValue(m_hub_content_name, json[QString("HubContentName")]);
    m_hub_content_name_isSet = !json[QString("HubContentName")].isNull() && m_hub_content_name_isValid;

    m_min_version_isValid = ::OpenAPI::fromJsonValue(m_min_version, json[QString("MinVersion")]);
    m_min_version_isSet = !json[QString("MinVersion")].isNull() && m_min_version_isValid;

    m_max_schema_version_isValid = ::OpenAPI::fromJsonValue(m_max_schema_version, json[QString("MaxSchemaVersion")]);
    m_max_schema_version_isSet = !json[QString("MaxSchemaVersion")].isNull() && m_max_schema_version_isValid;

    m_creation_time_before_isValid = ::OpenAPI::fromJsonValue(m_creation_time_before, json[QString("CreationTimeBefore")]);
    m_creation_time_before_isSet = !json[QString("CreationTimeBefore")].isNull() && m_creation_time_before_isValid;

    m_creation_time_after_isValid = ::OpenAPI::fromJsonValue(m_creation_time_after, json[QString("CreationTimeAfter")]);
    m_creation_time_after_isSet = !json[QString("CreationTimeAfter")].isNull() && m_creation_time_after_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListHubContentVersionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListHubContentVersionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_hub_name_isSet) {
        obj.insert(QString("HubName"), ::OpenAPI::toJsonValue(m_hub_name));
    }
    if (m_hub_content_type.isSet()) {
        obj.insert(QString("HubContentType"), ::OpenAPI::toJsonValue(m_hub_content_type));
    }
    if (m_hub_content_name_isSet) {
        obj.insert(QString("HubContentName"), ::OpenAPI::toJsonValue(m_hub_content_name));
    }
    if (m_min_version_isSet) {
        obj.insert(QString("MinVersion"), ::OpenAPI::toJsonValue(m_min_version));
    }
    if (m_max_schema_version_isSet) {
        obj.insert(QString("MaxSchemaVersion"), ::OpenAPI::toJsonValue(m_max_schema_version));
    }
    if (m_creation_time_before_isSet) {
        obj.insert(QString("CreationTimeBefore"), ::OpenAPI::toJsonValue(m_creation_time_before));
    }
    if (m_creation_time_after_isSet) {
        obj.insert(QString("CreationTimeAfter"), ::OpenAPI::toJsonValue(m_creation_time_after));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListHubContentVersionsRequest::getHubName() const {
    return m_hub_name;
}
void OAIListHubContentVersionsRequest::setHubName(const QString &hub_name) {
    m_hub_name = hub_name;
    m_hub_name_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_hub_name_Set() const{
    return m_hub_name_isSet;
}

bool OAIListHubContentVersionsRequest::is_hub_name_Valid() const{
    return m_hub_name_isValid;
}

OAIHubContentType OAIListHubContentVersionsRequest::getHubContentType() const {
    return m_hub_content_type;
}
void OAIListHubContentVersionsRequest::setHubContentType(const OAIHubContentType &hub_content_type) {
    m_hub_content_type = hub_content_type;
    m_hub_content_type_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_hub_content_type_Set() const{
    return m_hub_content_type_isSet;
}

bool OAIListHubContentVersionsRequest::is_hub_content_type_Valid() const{
    return m_hub_content_type_isValid;
}

QString OAIListHubContentVersionsRequest::getHubContentName() const {
    return m_hub_content_name;
}
void OAIListHubContentVersionsRequest::setHubContentName(const QString &hub_content_name) {
    m_hub_content_name = hub_content_name;
    m_hub_content_name_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_hub_content_name_Set() const{
    return m_hub_content_name_isSet;
}

bool OAIListHubContentVersionsRequest::is_hub_content_name_Valid() const{
    return m_hub_content_name_isValid;
}

QString OAIListHubContentVersionsRequest::getMinVersion() const {
    return m_min_version;
}
void OAIListHubContentVersionsRequest::setMinVersion(const QString &min_version) {
    m_min_version = min_version;
    m_min_version_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_min_version_Set() const{
    return m_min_version_isSet;
}

bool OAIListHubContentVersionsRequest::is_min_version_Valid() const{
    return m_min_version_isValid;
}

QString OAIListHubContentVersionsRequest::getMaxSchemaVersion() const {
    return m_max_schema_version;
}
void OAIListHubContentVersionsRequest::setMaxSchemaVersion(const QString &max_schema_version) {
    m_max_schema_version = max_schema_version;
    m_max_schema_version_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_max_schema_version_Set() const{
    return m_max_schema_version_isSet;
}

bool OAIListHubContentVersionsRequest::is_max_schema_version_Valid() const{
    return m_max_schema_version_isValid;
}

QDateTime OAIListHubContentVersionsRequest::getCreationTimeBefore() const {
    return m_creation_time_before;
}
void OAIListHubContentVersionsRequest::setCreationTimeBefore(const QDateTime &creation_time_before) {
    m_creation_time_before = creation_time_before;
    m_creation_time_before_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_creation_time_before_Set() const{
    return m_creation_time_before_isSet;
}

bool OAIListHubContentVersionsRequest::is_creation_time_before_Valid() const{
    return m_creation_time_before_isValid;
}

QDateTime OAIListHubContentVersionsRequest::getCreationTimeAfter() const {
    return m_creation_time_after;
}
void OAIListHubContentVersionsRequest::setCreationTimeAfter(const QDateTime &creation_time_after) {
    m_creation_time_after = creation_time_after;
    m_creation_time_after_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_creation_time_after_Set() const{
    return m_creation_time_after_isSet;
}

bool OAIListHubContentVersionsRequest::is_creation_time_after_Valid() const{
    return m_creation_time_after_isValid;
}

OAIHubContentSortBy OAIListHubContentVersionsRequest::getSortBy() const {
    return m_sort_by;
}
void OAIListHubContentVersionsRequest::setSortBy(const OAIHubContentSortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListHubContentVersionsRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIListHubContentVersionsRequest::getSortOrder() const {
    return m_sort_order;
}
void OAIListHubContentVersionsRequest::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListHubContentVersionsRequest::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

qint32 OAIListHubContentVersionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListHubContentVersionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListHubContentVersionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListHubContentVersionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListHubContentVersionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListHubContentVersionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListHubContentVersionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListHubContentVersionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hub_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_content_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListHubContentVersionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hub_name_isValid && m_hub_content_type_isValid && m_hub_content_name_isValid && true;
}

} // namespace OpenAPI
