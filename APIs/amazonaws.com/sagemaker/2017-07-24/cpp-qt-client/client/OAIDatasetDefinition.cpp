/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetDefinition::OAIDatasetDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetDefinition::OAIDatasetDefinition() {
    this->initializeModel();
}

OAIDatasetDefinition::~OAIDatasetDefinition() {}

void OAIDatasetDefinition::initializeModel() {

    m_athena_dataset_definition_isSet = false;
    m_athena_dataset_definition_isValid = false;

    m_redshift_dataset_definition_isSet = false;
    m_redshift_dataset_definition_isValid = false;

    m_local_path_isSet = false;
    m_local_path_isValid = false;

    m_data_distribution_type_isSet = false;
    m_data_distribution_type_isValid = false;

    m_input_mode_isSet = false;
    m_input_mode_isValid = false;
}

void OAIDatasetDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetDefinition::fromJsonObject(QJsonObject json) {

    m_athena_dataset_definition_isValid = ::OpenAPI::fromJsonValue(m_athena_dataset_definition, json[QString("AthenaDatasetDefinition")]);
    m_athena_dataset_definition_isSet = !json[QString("AthenaDatasetDefinition")].isNull() && m_athena_dataset_definition_isValid;

    m_redshift_dataset_definition_isValid = ::OpenAPI::fromJsonValue(m_redshift_dataset_definition, json[QString("RedshiftDatasetDefinition")]);
    m_redshift_dataset_definition_isSet = !json[QString("RedshiftDatasetDefinition")].isNull() && m_redshift_dataset_definition_isValid;

    m_local_path_isValid = ::OpenAPI::fromJsonValue(m_local_path, json[QString("LocalPath")]);
    m_local_path_isSet = !json[QString("LocalPath")].isNull() && m_local_path_isValid;

    m_data_distribution_type_isValid = ::OpenAPI::fromJsonValue(m_data_distribution_type, json[QString("DataDistributionType")]);
    m_data_distribution_type_isSet = !json[QString("DataDistributionType")].isNull() && m_data_distribution_type_isValid;

    m_input_mode_isValid = ::OpenAPI::fromJsonValue(m_input_mode, json[QString("InputMode")]);
    m_input_mode_isSet = !json[QString("InputMode")].isNull() && m_input_mode_isValid;
}

QString OAIDatasetDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_athena_dataset_definition.isSet()) {
        obj.insert(QString("AthenaDatasetDefinition"), ::OpenAPI::toJsonValue(m_athena_dataset_definition));
    }
    if (m_redshift_dataset_definition.isSet()) {
        obj.insert(QString("RedshiftDatasetDefinition"), ::OpenAPI::toJsonValue(m_redshift_dataset_definition));
    }
    if (m_local_path_isSet) {
        obj.insert(QString("LocalPath"), ::OpenAPI::toJsonValue(m_local_path));
    }
    if (m_data_distribution_type.isSet()) {
        obj.insert(QString("DataDistributionType"), ::OpenAPI::toJsonValue(m_data_distribution_type));
    }
    if (m_input_mode.isSet()) {
        obj.insert(QString("InputMode"), ::OpenAPI::toJsonValue(m_input_mode));
    }
    return obj;
}

OAIAthenaDatasetDefinition OAIDatasetDefinition::getAthenaDatasetDefinition() const {
    return m_athena_dataset_definition;
}
void OAIDatasetDefinition::setAthenaDatasetDefinition(const OAIAthenaDatasetDefinition &athena_dataset_definition) {
    m_athena_dataset_definition = athena_dataset_definition;
    m_athena_dataset_definition_isSet = true;
}

bool OAIDatasetDefinition::is_athena_dataset_definition_Set() const{
    return m_athena_dataset_definition_isSet;
}

bool OAIDatasetDefinition::is_athena_dataset_definition_Valid() const{
    return m_athena_dataset_definition_isValid;
}

OAIRedshiftDatasetDefinition OAIDatasetDefinition::getRedshiftDatasetDefinition() const {
    return m_redshift_dataset_definition;
}
void OAIDatasetDefinition::setRedshiftDatasetDefinition(const OAIRedshiftDatasetDefinition &redshift_dataset_definition) {
    m_redshift_dataset_definition = redshift_dataset_definition;
    m_redshift_dataset_definition_isSet = true;
}

bool OAIDatasetDefinition::is_redshift_dataset_definition_Set() const{
    return m_redshift_dataset_definition_isSet;
}

bool OAIDatasetDefinition::is_redshift_dataset_definition_Valid() const{
    return m_redshift_dataset_definition_isValid;
}

QString OAIDatasetDefinition::getLocalPath() const {
    return m_local_path;
}
void OAIDatasetDefinition::setLocalPath(const QString &local_path) {
    m_local_path = local_path;
    m_local_path_isSet = true;
}

bool OAIDatasetDefinition::is_local_path_Set() const{
    return m_local_path_isSet;
}

bool OAIDatasetDefinition::is_local_path_Valid() const{
    return m_local_path_isValid;
}

OAIDataDistributionType OAIDatasetDefinition::getDataDistributionType() const {
    return m_data_distribution_type;
}
void OAIDatasetDefinition::setDataDistributionType(const OAIDataDistributionType &data_distribution_type) {
    m_data_distribution_type = data_distribution_type;
    m_data_distribution_type_isSet = true;
}

bool OAIDatasetDefinition::is_data_distribution_type_Set() const{
    return m_data_distribution_type_isSet;
}

bool OAIDatasetDefinition::is_data_distribution_type_Valid() const{
    return m_data_distribution_type_isValid;
}

OAIInputMode OAIDatasetDefinition::getInputMode() const {
    return m_input_mode;
}
void OAIDatasetDefinition::setInputMode(const OAIInputMode &input_mode) {
    m_input_mode = input_mode;
    m_input_mode_isSet = true;
}

bool OAIDatasetDefinition::is_input_mode_Set() const{
    return m_input_mode_isSet;
}

bool OAIDatasetDefinition::is_input_mode_Valid() const{
    return m_input_mode_isValid;
}

bool OAIDatasetDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_athena_dataset_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_dataset_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_distribution_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
