/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperator::OAIOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperator::OAIOperator() {
    this->initializeModel();
}

OAIOperator::~OAIOperator() {}

void OAIOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Equals", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::EQUALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotEquals", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::NOTEQUALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GreaterThan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::GREATERTHAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GreaterThanOrEqualTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::GREATERTHANOREQUALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LessThan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::LESSTHAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LessThanOrEqualTo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::LESSTHANOREQUALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Contains", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::CONTAINS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Exists", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotExists", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::NOTEXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("In", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperator::IN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperator::EQUALS:
            val = "Equals";
            break;
        case eOAIOperator::NOTEQUALS:
            val = "NotEquals";
            break;
        case eOAIOperator::GREATERTHAN:
            val = "GreaterThan";
            break;
        case eOAIOperator::GREATERTHANOREQUALTO:
            val = "GreaterThanOrEqualTo";
            break;
        case eOAIOperator::LESSTHAN:
            val = "LessThan";
            break;
        case eOAIOperator::LESSTHANOREQUALTO:
            val = "LessThanOrEqualTo";
            break;
        case eOAIOperator::CONTAINS:
            val = "Contains";
            break;
        case eOAIOperator::EXISTS:
            val = "Exists";
            break;
        case eOAIOperator::NOTEXISTS:
            val = "NotExists";
            break;
        case eOAIOperator::IN:
            val = "In";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperator::eOAIOperator OAIOperator::getValue() const {
    return m_value;
}

void OAIOperator::setValue(const OAIOperator::eOAIOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperator::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
