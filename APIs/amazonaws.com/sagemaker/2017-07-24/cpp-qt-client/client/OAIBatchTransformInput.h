/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBatchTransformInput.h
 *
 * Input object for the batch transform job.
 */

#ifndef OAIBatchTransformInput_H
#define OAIBatchTransformInput_H

#include <QJsonObject>

#include "OAIBatchTransformInput_DatasetFormat.h"
#include "OAIProcessingS3DataDistributionType.h"
#include "OAIProcessingS3InputMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBatchTransformInput_DatasetFormat;

class OAIBatchTransformInput : public OAIObject {
public:
    OAIBatchTransformInput();
    OAIBatchTransformInput(QString json);
    ~OAIBatchTransformInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataCapturedDestinationS3Uri() const;
    void setDataCapturedDestinationS3Uri(const QString &data_captured_destination_s3_uri);
    bool is_data_captured_destination_s3_uri_Set() const;
    bool is_data_captured_destination_s3_uri_Valid() const;

    OAIBatchTransformInput_DatasetFormat getDatasetFormat() const;
    void setDatasetFormat(const OAIBatchTransformInput_DatasetFormat &dataset_format);
    bool is_dataset_format_Set() const;
    bool is_dataset_format_Valid() const;

    QString getLocalPath() const;
    void setLocalPath(const QString &local_path);
    bool is_local_path_Set() const;
    bool is_local_path_Valid() const;

    OAIProcessingS3InputMode getS3InputMode() const;
    void setS3InputMode(const OAIProcessingS3InputMode &s3_input_mode);
    bool is_s3_input_mode_Set() const;
    bool is_s3_input_mode_Valid() const;

    OAIProcessingS3DataDistributionType getS3DataDistributionType() const;
    void setS3DataDistributionType(const OAIProcessingS3DataDistributionType &s3_data_distribution_type);
    bool is_s3_data_distribution_type_Set() const;
    bool is_s3_data_distribution_type_Valid() const;

    QString getFeaturesAttribute() const;
    void setFeaturesAttribute(const QString &features_attribute);
    bool is_features_attribute_Set() const;
    bool is_features_attribute_Valid() const;

    QString getInferenceAttribute() const;
    void setInferenceAttribute(const QString &inference_attribute);
    bool is_inference_attribute_Set() const;
    bool is_inference_attribute_Valid() const;

    QString getProbabilityAttribute() const;
    void setProbabilityAttribute(const QString &probability_attribute);
    bool is_probability_attribute_Set() const;
    bool is_probability_attribute_Valid() const;

    double getProbabilityThresholdAttribute() const;
    void setProbabilityThresholdAttribute(const double &probability_threshold_attribute);
    bool is_probability_threshold_attribute_Set() const;
    bool is_probability_threshold_attribute_Valid() const;

    QString getStartTimeOffset() const;
    void setStartTimeOffset(const QString &start_time_offset);
    bool is_start_time_offset_Set() const;
    bool is_start_time_offset_Valid() const;

    QString getEndTimeOffset() const;
    void setEndTimeOffset(const QString &end_time_offset);
    bool is_end_time_offset_Set() const;
    bool is_end_time_offset_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_data_captured_destination_s3_uri;
    bool m_data_captured_destination_s3_uri_isSet;
    bool m_data_captured_destination_s3_uri_isValid;

    OAIBatchTransformInput_DatasetFormat m_dataset_format;
    bool m_dataset_format_isSet;
    bool m_dataset_format_isValid;

    QString m_local_path;
    bool m_local_path_isSet;
    bool m_local_path_isValid;

    OAIProcessingS3InputMode m_s3_input_mode;
    bool m_s3_input_mode_isSet;
    bool m_s3_input_mode_isValid;

    OAIProcessingS3DataDistributionType m_s3_data_distribution_type;
    bool m_s3_data_distribution_type_isSet;
    bool m_s3_data_distribution_type_isValid;

    QString m_features_attribute;
    bool m_features_attribute_isSet;
    bool m_features_attribute_isValid;

    QString m_inference_attribute;
    bool m_inference_attribute_isSet;
    bool m_inference_attribute_isValid;

    QString m_probability_attribute;
    bool m_probability_attribute_isSet;
    bool m_probability_attribute_isValid;

    double m_probability_threshold_attribute;
    bool m_probability_threshold_attribute_isSet;
    bool m_probability_threshold_attribute_isValid;

    QString m_start_time_offset;
    bool m_start_time_offset_isSet;
    bool m_start_time_offset_isValid;

    QString m_end_time_offset;
    bool m_end_time_offset_isSet;
    bool m_end_time_offset_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBatchTransformInput)

#endif // OAIBatchTransformInput_H
