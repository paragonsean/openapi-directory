/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficPattern.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficPattern::OAITrafficPattern(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficPattern::OAITrafficPattern() {
    this->initializeModel();
}

OAITrafficPattern::~OAITrafficPattern() {}

void OAITrafficPattern::initializeModel() {

    m_traffic_type_isSet = false;
    m_traffic_type_isValid = false;

    m_phases_isSet = false;
    m_phases_isValid = false;

    m_stairs_isSet = false;
    m_stairs_isValid = false;
}

void OAITrafficPattern::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficPattern::fromJsonObject(QJsonObject json) {

    m_traffic_type_isValid = ::OpenAPI::fromJsonValue(m_traffic_type, json[QString("TrafficType")]);
    m_traffic_type_isSet = !json[QString("TrafficType")].isNull() && m_traffic_type_isValid;

    m_phases_isValid = ::OpenAPI::fromJsonValue(m_phases, json[QString("Phases")]);
    m_phases_isSet = !json[QString("Phases")].isNull() && m_phases_isValid;

    m_stairs_isValid = ::OpenAPI::fromJsonValue(m_stairs, json[QString("Stairs")]);
    m_stairs_isSet = !json[QString("Stairs")].isNull() && m_stairs_isValid;
}

QString OAITrafficPattern::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficPattern::asJsonObject() const {
    QJsonObject obj;
    if (m_traffic_type.isSet()) {
        obj.insert(QString("TrafficType"), ::OpenAPI::toJsonValue(m_traffic_type));
    }
    if (m_phases.isSet()) {
        obj.insert(QString("Phases"), ::OpenAPI::toJsonValue(m_phases));
    }
    if (m_stairs.isSet()) {
        obj.insert(QString("Stairs"), ::OpenAPI::toJsonValue(m_stairs));
    }
    return obj;
}

OAITrafficType OAITrafficPattern::getTrafficType() const {
    return m_traffic_type;
}
void OAITrafficPattern::setTrafficType(const OAITrafficType &traffic_type) {
    m_traffic_type = traffic_type;
    m_traffic_type_isSet = true;
}

bool OAITrafficPattern::is_traffic_type_Set() const{
    return m_traffic_type_isSet;
}

bool OAITrafficPattern::is_traffic_type_Valid() const{
    return m_traffic_type_isValid;
}

QList OAITrafficPattern::getPhases() const {
    return m_phases;
}
void OAITrafficPattern::setPhases(const QList &phases) {
    m_phases = phases;
    m_phases_isSet = true;
}

bool OAITrafficPattern::is_phases_Set() const{
    return m_phases_isSet;
}

bool OAITrafficPattern::is_phases_Valid() const{
    return m_phases_isValid;
}

OAITrafficPattern_Stairs OAITrafficPattern::getStairs() const {
    return m_stairs;
}
void OAITrafficPattern::setStairs(const OAITrafficPattern_Stairs &stairs) {
    m_stairs = stairs;
    m_stairs_isSet = true;
}

bool OAITrafficPattern::is_stairs_Set() const{
    return m_stairs_isSet;
}

bool OAITrafficPattern::is_stairs_Valid() const{
    return m_stairs_isValid;
}

bool OAITrafficPattern::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_traffic_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stairs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficPattern::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
