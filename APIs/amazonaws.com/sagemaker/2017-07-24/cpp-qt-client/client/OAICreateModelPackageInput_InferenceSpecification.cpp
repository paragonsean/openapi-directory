/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateModelPackageInput_InferenceSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateModelPackageInput_InferenceSpecification::OAICreateModelPackageInput_InferenceSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateModelPackageInput_InferenceSpecification::OAICreateModelPackageInput_InferenceSpecification() {
    this->initializeModel();
}

OAICreateModelPackageInput_InferenceSpecification::~OAICreateModelPackageInput_InferenceSpecification() {}

void OAICreateModelPackageInput_InferenceSpecification::initializeModel() {

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_supported_transform_instance_types_isSet = false;
    m_supported_transform_instance_types_isValid = false;

    m_supported_realtime_inference_instance_types_isSet = false;
    m_supported_realtime_inference_instance_types_isValid = false;

    m_supported_content_types_isSet = false;
    m_supported_content_types_isValid = false;

    m_supported_response_mime_types_isSet = false;
    m_supported_response_mime_types_isValid = false;
}

void OAICreateModelPackageInput_InferenceSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateModelPackageInput_InferenceSpecification::fromJsonObject(QJsonObject json) {

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("Containers")]);
    m_containers_isSet = !json[QString("Containers")].isNull() && m_containers_isValid;

    m_supported_transform_instance_types_isValid = ::OpenAPI::fromJsonValue(m_supported_transform_instance_types, json[QString("SupportedTransformInstanceTypes")]);
    m_supported_transform_instance_types_isSet = !json[QString("SupportedTransformInstanceTypes")].isNull() && m_supported_transform_instance_types_isValid;

    m_supported_realtime_inference_instance_types_isValid = ::OpenAPI::fromJsonValue(m_supported_realtime_inference_instance_types, json[QString("SupportedRealtimeInferenceInstanceTypes")]);
    m_supported_realtime_inference_instance_types_isSet = !json[QString("SupportedRealtimeInferenceInstanceTypes")].isNull() && m_supported_realtime_inference_instance_types_isValid;

    m_supported_content_types_isValid = ::OpenAPI::fromJsonValue(m_supported_content_types, json[QString("SupportedContentTypes")]);
    m_supported_content_types_isSet = !json[QString("SupportedContentTypes")].isNull() && m_supported_content_types_isValid;

    m_supported_response_mime_types_isValid = ::OpenAPI::fromJsonValue(m_supported_response_mime_types, json[QString("SupportedResponseMIMETypes")]);
    m_supported_response_mime_types_isSet = !json[QString("SupportedResponseMIMETypes")].isNull() && m_supported_response_mime_types_isValid;
}

QString OAICreateModelPackageInput_InferenceSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateModelPackageInput_InferenceSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_containers.isSet()) {
        obj.insert(QString("Containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_supported_transform_instance_types.isSet()) {
        obj.insert(QString("SupportedTransformInstanceTypes"), ::OpenAPI::toJsonValue(m_supported_transform_instance_types));
    }
    if (m_supported_realtime_inference_instance_types.isSet()) {
        obj.insert(QString("SupportedRealtimeInferenceInstanceTypes"), ::OpenAPI::toJsonValue(m_supported_realtime_inference_instance_types));
    }
    if (m_supported_content_types.isSet()) {
        obj.insert(QString("SupportedContentTypes"), ::OpenAPI::toJsonValue(m_supported_content_types));
    }
    if (m_supported_response_mime_types.isSet()) {
        obj.insert(QString("SupportedResponseMIMETypes"), ::OpenAPI::toJsonValue(m_supported_response_mime_types));
    }
    return obj;
}

QList OAICreateModelPackageInput_InferenceSpecification::getContainers() const {
    return m_containers;
}
void OAICreateModelPackageInput_InferenceSpecification::setContainers(const QList &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_containers_Valid() const{
    return m_containers_isValid;
}

QList OAICreateModelPackageInput_InferenceSpecification::getSupportedTransformInstanceTypes() const {
    return m_supported_transform_instance_types;
}
void OAICreateModelPackageInput_InferenceSpecification::setSupportedTransformInstanceTypes(const QList &supported_transform_instance_types) {
    m_supported_transform_instance_types = supported_transform_instance_types;
    m_supported_transform_instance_types_isSet = true;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_supported_transform_instance_types_Set() const{
    return m_supported_transform_instance_types_isSet;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_supported_transform_instance_types_Valid() const{
    return m_supported_transform_instance_types_isValid;
}

QList OAICreateModelPackageInput_InferenceSpecification::getSupportedRealtimeInferenceInstanceTypes() const {
    return m_supported_realtime_inference_instance_types;
}
void OAICreateModelPackageInput_InferenceSpecification::setSupportedRealtimeInferenceInstanceTypes(const QList &supported_realtime_inference_instance_types) {
    m_supported_realtime_inference_instance_types = supported_realtime_inference_instance_types;
    m_supported_realtime_inference_instance_types_isSet = true;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_supported_realtime_inference_instance_types_Set() const{
    return m_supported_realtime_inference_instance_types_isSet;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_supported_realtime_inference_instance_types_Valid() const{
    return m_supported_realtime_inference_instance_types_isValid;
}

QList OAICreateModelPackageInput_InferenceSpecification::getSupportedContentTypes() const {
    return m_supported_content_types;
}
void OAICreateModelPackageInput_InferenceSpecification::setSupportedContentTypes(const QList &supported_content_types) {
    m_supported_content_types = supported_content_types;
    m_supported_content_types_isSet = true;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_supported_content_types_Set() const{
    return m_supported_content_types_isSet;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_supported_content_types_Valid() const{
    return m_supported_content_types_isValid;
}

QList OAICreateModelPackageInput_InferenceSpecification::getSupportedResponseMimeTypes() const {
    return m_supported_response_mime_types;
}
void OAICreateModelPackageInput_InferenceSpecification::setSupportedResponseMimeTypes(const QList &supported_response_mime_types) {
    m_supported_response_mime_types = supported_response_mime_types;
    m_supported_response_mime_types_isSet = true;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_supported_response_mime_types_Set() const{
    return m_supported_response_mime_types_isSet;
}

bool OAICreateModelPackageInput_InferenceSpecification::is_supported_response_mime_types_Valid() const{
    return m_supported_response_mime_types_isValid;
}

bool OAICreateModelPackageInput_InferenceSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_containers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_transform_instance_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_realtime_inference_instance_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_content_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_response_mime_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateModelPackageInput_InferenceSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_containers_isValid && m_supported_content_types_isValid && m_supported_response_mime_types_isValid && true;
}

} // namespace OpenAPI
