/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscribedWorkteam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscribedWorkteam::OAISubscribedWorkteam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscribedWorkteam::OAISubscribedWorkteam() {
    this->initializeModel();
}

OAISubscribedWorkteam::~OAISubscribedWorkteam() {}

void OAISubscribedWorkteam::initializeModel() {

    m_workteam_arn_isSet = false;
    m_workteam_arn_isValid = false;

    m_marketplace_title_isSet = false;
    m_marketplace_title_isValid = false;

    m_seller_name_isSet = false;
    m_seller_name_isValid = false;

    m_marketplace_description_isSet = false;
    m_marketplace_description_isValid = false;

    m_listing_id_isSet = false;
    m_listing_id_isValid = false;
}

void OAISubscribedWorkteam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscribedWorkteam::fromJsonObject(QJsonObject json) {

    m_workteam_arn_isValid = ::OpenAPI::fromJsonValue(m_workteam_arn, json[QString("WorkteamArn")]);
    m_workteam_arn_isSet = !json[QString("WorkteamArn")].isNull() && m_workteam_arn_isValid;

    m_marketplace_title_isValid = ::OpenAPI::fromJsonValue(m_marketplace_title, json[QString("MarketplaceTitle")]);
    m_marketplace_title_isSet = !json[QString("MarketplaceTitle")].isNull() && m_marketplace_title_isValid;

    m_seller_name_isValid = ::OpenAPI::fromJsonValue(m_seller_name, json[QString("SellerName")]);
    m_seller_name_isSet = !json[QString("SellerName")].isNull() && m_seller_name_isValid;

    m_marketplace_description_isValid = ::OpenAPI::fromJsonValue(m_marketplace_description, json[QString("MarketplaceDescription")]);
    m_marketplace_description_isSet = !json[QString("MarketplaceDescription")].isNull() && m_marketplace_description_isValid;

    m_listing_id_isValid = ::OpenAPI::fromJsonValue(m_listing_id, json[QString("ListingId")]);
    m_listing_id_isSet = !json[QString("ListingId")].isNull() && m_listing_id_isValid;
}

QString OAISubscribedWorkteam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscribedWorkteam::asJsonObject() const {
    QJsonObject obj;
    if (m_workteam_arn_isSet) {
        obj.insert(QString("WorkteamArn"), ::OpenAPI::toJsonValue(m_workteam_arn));
    }
    if (m_marketplace_title_isSet) {
        obj.insert(QString("MarketplaceTitle"), ::OpenAPI::toJsonValue(m_marketplace_title));
    }
    if (m_seller_name_isSet) {
        obj.insert(QString("SellerName"), ::OpenAPI::toJsonValue(m_seller_name));
    }
    if (m_marketplace_description_isSet) {
        obj.insert(QString("MarketplaceDescription"), ::OpenAPI::toJsonValue(m_marketplace_description));
    }
    if (m_listing_id_isSet) {
        obj.insert(QString("ListingId"), ::OpenAPI::toJsonValue(m_listing_id));
    }
    return obj;
}

QString OAISubscribedWorkteam::getWorkteamArn() const {
    return m_workteam_arn;
}
void OAISubscribedWorkteam::setWorkteamArn(const QString &workteam_arn) {
    m_workteam_arn = workteam_arn;
    m_workteam_arn_isSet = true;
}

bool OAISubscribedWorkteam::is_workteam_arn_Set() const{
    return m_workteam_arn_isSet;
}

bool OAISubscribedWorkteam::is_workteam_arn_Valid() const{
    return m_workteam_arn_isValid;
}

QString OAISubscribedWorkteam::getMarketplaceTitle() const {
    return m_marketplace_title;
}
void OAISubscribedWorkteam::setMarketplaceTitle(const QString &marketplace_title) {
    m_marketplace_title = marketplace_title;
    m_marketplace_title_isSet = true;
}

bool OAISubscribedWorkteam::is_marketplace_title_Set() const{
    return m_marketplace_title_isSet;
}

bool OAISubscribedWorkteam::is_marketplace_title_Valid() const{
    return m_marketplace_title_isValid;
}

QString OAISubscribedWorkteam::getSellerName() const {
    return m_seller_name;
}
void OAISubscribedWorkteam::setSellerName(const QString &seller_name) {
    m_seller_name = seller_name;
    m_seller_name_isSet = true;
}

bool OAISubscribedWorkteam::is_seller_name_Set() const{
    return m_seller_name_isSet;
}

bool OAISubscribedWorkteam::is_seller_name_Valid() const{
    return m_seller_name_isValid;
}

QString OAISubscribedWorkteam::getMarketplaceDescription() const {
    return m_marketplace_description;
}
void OAISubscribedWorkteam::setMarketplaceDescription(const QString &marketplace_description) {
    m_marketplace_description = marketplace_description;
    m_marketplace_description_isSet = true;
}

bool OAISubscribedWorkteam::is_marketplace_description_Set() const{
    return m_marketplace_description_isSet;
}

bool OAISubscribedWorkteam::is_marketplace_description_Valid() const{
    return m_marketplace_description_isValid;
}

QString OAISubscribedWorkteam::getListingId() const {
    return m_listing_id;
}
void OAISubscribedWorkteam::setListingId(const QString &listing_id) {
    m_listing_id = listing_id;
    m_listing_id_isSet = true;
}

bool OAISubscribedWorkteam::is_listing_id_Set() const{
    return m_listing_id_isSet;
}

bool OAISubscribedWorkteam::is_listing_id_Valid() const{
    return m_listing_id_isValid;
}

bool OAISubscribedWorkteam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workteam_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscribedWorkteam::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workteam_arn_isValid && true;
}

} // namespace OpenAPI
