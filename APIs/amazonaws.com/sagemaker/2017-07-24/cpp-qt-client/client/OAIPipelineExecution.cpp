/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineExecution::OAIPipelineExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineExecution::OAIPipelineExecution() {
    this->initializeModel();
}

OAIPipelineExecution::~OAIPipelineExecution() {}

void OAIPipelineExecution::initializeModel() {

    m_pipeline_arn_isSet = false;
    m_pipeline_arn_isValid = false;

    m_pipeline_execution_arn_isSet = false;
    m_pipeline_execution_arn_isValid = false;

    m_pipeline_execution_display_name_isSet = false;
    m_pipeline_execution_display_name_isValid = false;

    m_pipeline_execution_status_isSet = false;
    m_pipeline_execution_status_isValid = false;

    m_pipeline_execution_description_isSet = false;
    m_pipeline_execution_description_isValid = false;

    m_pipeline_experiment_config_isSet = false;
    m_pipeline_experiment_config_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_parallelism_configuration_isSet = false;
    m_parallelism_configuration_isValid = false;

    m_pipeline_parameters_isSet = false;
    m_pipeline_parameters_isValid = false;

    m_selective_execution_config_isSet = false;
    m_selective_execution_config_isValid = false;
}

void OAIPipelineExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineExecution::fromJsonObject(QJsonObject json) {

    m_pipeline_arn_isValid = ::OpenAPI::fromJsonValue(m_pipeline_arn, json[QString("PipelineArn")]);
    m_pipeline_arn_isSet = !json[QString("PipelineArn")].isNull() && m_pipeline_arn_isValid;

    m_pipeline_execution_arn_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution_arn, json[QString("PipelineExecutionArn")]);
    m_pipeline_execution_arn_isSet = !json[QString("PipelineExecutionArn")].isNull() && m_pipeline_execution_arn_isValid;

    m_pipeline_execution_display_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution_display_name, json[QString("PipelineExecutionDisplayName")]);
    m_pipeline_execution_display_name_isSet = !json[QString("PipelineExecutionDisplayName")].isNull() && m_pipeline_execution_display_name_isValid;

    m_pipeline_execution_status_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution_status, json[QString("PipelineExecutionStatus")]);
    m_pipeline_execution_status_isSet = !json[QString("PipelineExecutionStatus")].isNull() && m_pipeline_execution_status_isValid;

    m_pipeline_execution_description_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution_description, json[QString("PipelineExecutionDescription")]);
    m_pipeline_execution_description_isSet = !json[QString("PipelineExecutionDescription")].isNull() && m_pipeline_execution_description_isValid;

    m_pipeline_experiment_config_isValid = ::OpenAPI::fromJsonValue(m_pipeline_experiment_config, json[QString("PipelineExperimentConfig")]);
    m_pipeline_experiment_config_isSet = !json[QString("PipelineExperimentConfig")].isNull() && m_pipeline_experiment_config_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_parallelism_configuration_isValid = ::OpenAPI::fromJsonValue(m_parallelism_configuration, json[QString("ParallelismConfiguration")]);
    m_parallelism_configuration_isSet = !json[QString("ParallelismConfiguration")].isNull() && m_parallelism_configuration_isValid;

    m_pipeline_parameters_isValid = ::OpenAPI::fromJsonValue(m_pipeline_parameters, json[QString("PipelineParameters")]);
    m_pipeline_parameters_isSet = !json[QString("PipelineParameters")].isNull() && m_pipeline_parameters_isValid;

    m_selective_execution_config_isValid = ::OpenAPI::fromJsonValue(m_selective_execution_config, json[QString("SelectiveExecutionConfig")]);
    m_selective_execution_config_isSet = !json[QString("SelectiveExecutionConfig")].isNull() && m_selective_execution_config_isValid;
}

QString OAIPipelineExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_pipeline_arn_isSet) {
        obj.insert(QString("PipelineArn"), ::OpenAPI::toJsonValue(m_pipeline_arn));
    }
    if (m_pipeline_execution_arn_isSet) {
        obj.insert(QString("PipelineExecutionArn"), ::OpenAPI::toJsonValue(m_pipeline_execution_arn));
    }
    if (m_pipeline_execution_display_name_isSet) {
        obj.insert(QString("PipelineExecutionDisplayName"), ::OpenAPI::toJsonValue(m_pipeline_execution_display_name));
    }
    if (m_pipeline_execution_status.isSet()) {
        obj.insert(QString("PipelineExecutionStatus"), ::OpenAPI::toJsonValue(m_pipeline_execution_status));
    }
    if (m_pipeline_execution_description_isSet) {
        obj.insert(QString("PipelineExecutionDescription"), ::OpenAPI::toJsonValue(m_pipeline_execution_description));
    }
    if (m_pipeline_experiment_config.isSet()) {
        obj.insert(QString("PipelineExperimentConfig"), ::OpenAPI::toJsonValue(m_pipeline_experiment_config));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_last_modified_by.isSet()) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_parallelism_configuration.isSet()) {
        obj.insert(QString("ParallelismConfiguration"), ::OpenAPI::toJsonValue(m_parallelism_configuration));
    }
    if (m_pipeline_parameters.isSet()) {
        obj.insert(QString("PipelineParameters"), ::OpenAPI::toJsonValue(m_pipeline_parameters));
    }
    if (m_selective_execution_config.isSet()) {
        obj.insert(QString("SelectiveExecutionConfig"), ::OpenAPI::toJsonValue(m_selective_execution_config));
    }
    return obj;
}

QString OAIPipelineExecution::getPipelineArn() const {
    return m_pipeline_arn;
}
void OAIPipelineExecution::setPipelineArn(const QString &pipeline_arn) {
    m_pipeline_arn = pipeline_arn;
    m_pipeline_arn_isSet = true;
}

bool OAIPipelineExecution::is_pipeline_arn_Set() const{
    return m_pipeline_arn_isSet;
}

bool OAIPipelineExecution::is_pipeline_arn_Valid() const{
    return m_pipeline_arn_isValid;
}

QString OAIPipelineExecution::getPipelineExecutionArn() const {
    return m_pipeline_execution_arn;
}
void OAIPipelineExecution::setPipelineExecutionArn(const QString &pipeline_execution_arn) {
    m_pipeline_execution_arn = pipeline_execution_arn;
    m_pipeline_execution_arn_isSet = true;
}

bool OAIPipelineExecution::is_pipeline_execution_arn_Set() const{
    return m_pipeline_execution_arn_isSet;
}

bool OAIPipelineExecution::is_pipeline_execution_arn_Valid() const{
    return m_pipeline_execution_arn_isValid;
}

QString OAIPipelineExecution::getPipelineExecutionDisplayName() const {
    return m_pipeline_execution_display_name;
}
void OAIPipelineExecution::setPipelineExecutionDisplayName(const QString &pipeline_execution_display_name) {
    m_pipeline_execution_display_name = pipeline_execution_display_name;
    m_pipeline_execution_display_name_isSet = true;
}

bool OAIPipelineExecution::is_pipeline_execution_display_name_Set() const{
    return m_pipeline_execution_display_name_isSet;
}

bool OAIPipelineExecution::is_pipeline_execution_display_name_Valid() const{
    return m_pipeline_execution_display_name_isValid;
}

OAIPipelineExecutionStatus OAIPipelineExecution::getPipelineExecutionStatus() const {
    return m_pipeline_execution_status;
}
void OAIPipelineExecution::setPipelineExecutionStatus(const OAIPipelineExecutionStatus &pipeline_execution_status) {
    m_pipeline_execution_status = pipeline_execution_status;
    m_pipeline_execution_status_isSet = true;
}

bool OAIPipelineExecution::is_pipeline_execution_status_Set() const{
    return m_pipeline_execution_status_isSet;
}

bool OAIPipelineExecution::is_pipeline_execution_status_Valid() const{
    return m_pipeline_execution_status_isValid;
}

QString OAIPipelineExecution::getPipelineExecutionDescription() const {
    return m_pipeline_execution_description;
}
void OAIPipelineExecution::setPipelineExecutionDescription(const QString &pipeline_execution_description) {
    m_pipeline_execution_description = pipeline_execution_description;
    m_pipeline_execution_description_isSet = true;
}

bool OAIPipelineExecution::is_pipeline_execution_description_Set() const{
    return m_pipeline_execution_description_isSet;
}

bool OAIPipelineExecution::is_pipeline_execution_description_Valid() const{
    return m_pipeline_execution_description_isValid;
}

OAIPipelineExperimentConfig OAIPipelineExecution::getPipelineExperimentConfig() const {
    return m_pipeline_experiment_config;
}
void OAIPipelineExecution::setPipelineExperimentConfig(const OAIPipelineExperimentConfig &pipeline_experiment_config) {
    m_pipeline_experiment_config = pipeline_experiment_config;
    m_pipeline_experiment_config_isSet = true;
}

bool OAIPipelineExecution::is_pipeline_experiment_config_Set() const{
    return m_pipeline_experiment_config_isSet;
}

bool OAIPipelineExecution::is_pipeline_experiment_config_Valid() const{
    return m_pipeline_experiment_config_isValid;
}

QString OAIPipelineExecution::getFailureReason() const {
    return m_failure_reason;
}
void OAIPipelineExecution::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIPipelineExecution::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIPipelineExecution::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QDateTime OAIPipelineExecution::getCreationTime() const {
    return m_creation_time;
}
void OAIPipelineExecution::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIPipelineExecution::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIPipelineExecution::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIPipelineExecution::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIPipelineExecution::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIPipelineExecution::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIPipelineExecution::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIUserContext OAIPipelineExecution::getCreatedBy() const {
    return m_created_by;
}
void OAIPipelineExecution::setCreatedBy(const OAIUserContext &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIPipelineExecution::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIPipelineExecution::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIUserContext OAIPipelineExecution::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIPipelineExecution::setLastModifiedBy(const OAIUserContext &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIPipelineExecution::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIPipelineExecution::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

OAIPipelineExecution_ParallelismConfiguration OAIPipelineExecution::getParallelismConfiguration() const {
    return m_parallelism_configuration;
}
void OAIPipelineExecution::setParallelismConfiguration(const OAIPipelineExecution_ParallelismConfiguration &parallelism_configuration) {
    m_parallelism_configuration = parallelism_configuration;
    m_parallelism_configuration_isSet = true;
}

bool OAIPipelineExecution::is_parallelism_configuration_Set() const{
    return m_parallelism_configuration_isSet;
}

bool OAIPipelineExecution::is_parallelism_configuration_Valid() const{
    return m_parallelism_configuration_isValid;
}

QList OAIPipelineExecution::getPipelineParameters() const {
    return m_pipeline_parameters;
}
void OAIPipelineExecution::setPipelineParameters(const QList &pipeline_parameters) {
    m_pipeline_parameters = pipeline_parameters;
    m_pipeline_parameters_isSet = true;
}

bool OAIPipelineExecution::is_pipeline_parameters_Set() const{
    return m_pipeline_parameters_isSet;
}

bool OAIPipelineExecution::is_pipeline_parameters_Valid() const{
    return m_pipeline_parameters_isValid;
}

OAIDescribePipelineExecutionResponse_SelectiveExecutionConfig OAIPipelineExecution::getSelectiveExecutionConfig() const {
    return m_selective_execution_config;
}
void OAIPipelineExecution::setSelectiveExecutionConfig(const OAIDescribePipelineExecutionResponse_SelectiveExecutionConfig &selective_execution_config) {
    m_selective_execution_config = selective_execution_config;
    m_selective_execution_config_isSet = true;
}

bool OAIPipelineExecution::is_selective_execution_config_Set() const{
    return m_selective_execution_config_isSet;
}

bool OAIPipelineExecution::is_selective_execution_config_Valid() const{
    return m_selective_execution_config_isValid;
}

bool OAIPipelineExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pipeline_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_execution_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_execution_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_execution_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_experiment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selective_execution_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
