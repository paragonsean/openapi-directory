/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTrialComponentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTrialComponentRequest::OAICreateTrialComponentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTrialComponentRequest::OAICreateTrialComponentRequest() {
    this->initializeModel();
}

OAICreateTrialComponentRequest::~OAICreateTrialComponentRequest() {}

void OAICreateTrialComponentRequest::initializeModel() {

    m_trial_component_name_isSet = false;
    m_trial_component_name_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_input_artifacts_isSet = false;
    m_input_artifacts_isValid = false;

    m_output_artifacts_isSet = false;
    m_output_artifacts_isValid = false;

    m_metadata_properties_isSet = false;
    m_metadata_properties_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateTrialComponentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTrialComponentRequest::fromJsonObject(QJsonObject json) {

    m_trial_component_name_isValid = ::OpenAPI::fromJsonValue(m_trial_component_name, json[QString("TrialComponentName")]);
    m_trial_component_name_isSet = !json[QString("TrialComponentName")].isNull() && m_trial_component_name_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_input_artifacts_isValid = ::OpenAPI::fromJsonValue(m_input_artifacts, json[QString("InputArtifacts")]);
    m_input_artifacts_isSet = !json[QString("InputArtifacts")].isNull() && m_input_artifacts_isValid;

    m_output_artifacts_isValid = ::OpenAPI::fromJsonValue(m_output_artifacts, json[QString("OutputArtifacts")]);
    m_output_artifacts_isSet = !json[QString("OutputArtifacts")].isNull() && m_output_artifacts_isValid;

    m_metadata_properties_isValid = ::OpenAPI::fromJsonValue(m_metadata_properties, json[QString("MetadataProperties")]);
    m_metadata_properties_isSet = !json[QString("MetadataProperties")].isNull() && m_metadata_properties_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateTrialComponentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTrialComponentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_trial_component_name_isSet) {
        obj.insert(QString("TrialComponentName"), ::OpenAPI::toJsonValue(m_trial_component_name));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_input_artifacts.isSet()) {
        obj.insert(QString("InputArtifacts"), ::OpenAPI::toJsonValue(m_input_artifacts));
    }
    if (m_output_artifacts.isSet()) {
        obj.insert(QString("OutputArtifacts"), ::OpenAPI::toJsonValue(m_output_artifacts));
    }
    if (m_metadata_properties.isSet()) {
        obj.insert(QString("MetadataProperties"), ::OpenAPI::toJsonValue(m_metadata_properties));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateTrialComponentRequest::getTrialComponentName() const {
    return m_trial_component_name;
}
void OAICreateTrialComponentRequest::setTrialComponentName(const QString &trial_component_name) {
    m_trial_component_name = trial_component_name;
    m_trial_component_name_isSet = true;
}

bool OAICreateTrialComponentRequest::is_trial_component_name_Set() const{
    return m_trial_component_name_isSet;
}

bool OAICreateTrialComponentRequest::is_trial_component_name_Valid() const{
    return m_trial_component_name_isValid;
}

QString OAICreateTrialComponentRequest::getDisplayName() const {
    return m_display_name;
}
void OAICreateTrialComponentRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateTrialComponentRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateTrialComponentRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAICreateTrialComponentRequest_Status OAICreateTrialComponentRequest::getStatus() const {
    return m_status;
}
void OAICreateTrialComponentRequest::setStatus(const OAICreateTrialComponentRequest_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateTrialComponentRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateTrialComponentRequest::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAICreateTrialComponentRequest::getStartTime() const {
    return m_start_time;
}
void OAICreateTrialComponentRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreateTrialComponentRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreateTrialComponentRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAICreateTrialComponentRequest::getEndTime() const {
    return m_end_time;
}
void OAICreateTrialComponentRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICreateTrialComponentRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICreateTrialComponentRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QMap OAICreateTrialComponentRequest::getParameters() const {
    return m_parameters;
}
void OAICreateTrialComponentRequest::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateTrialComponentRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateTrialComponentRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QMap OAICreateTrialComponentRequest::getInputArtifacts() const {
    return m_input_artifacts;
}
void OAICreateTrialComponentRequest::setInputArtifacts(const QMap &input_artifacts) {
    m_input_artifacts = input_artifacts;
    m_input_artifacts_isSet = true;
}

bool OAICreateTrialComponentRequest::is_input_artifacts_Set() const{
    return m_input_artifacts_isSet;
}

bool OAICreateTrialComponentRequest::is_input_artifacts_Valid() const{
    return m_input_artifacts_isValid;
}

QMap OAICreateTrialComponentRequest::getOutputArtifacts() const {
    return m_output_artifacts;
}
void OAICreateTrialComponentRequest::setOutputArtifacts(const QMap &output_artifacts) {
    m_output_artifacts = output_artifacts;
    m_output_artifacts_isSet = true;
}

bool OAICreateTrialComponentRequest::is_output_artifacts_Set() const{
    return m_output_artifacts_isSet;
}

bool OAICreateTrialComponentRequest::is_output_artifacts_Valid() const{
    return m_output_artifacts_isValid;
}

OAIMetadataProperties OAICreateTrialComponentRequest::getMetadataProperties() const {
    return m_metadata_properties;
}
void OAICreateTrialComponentRequest::setMetadataProperties(const OAIMetadataProperties &metadata_properties) {
    m_metadata_properties = metadata_properties;
    m_metadata_properties_isSet = true;
}

bool OAICreateTrialComponentRequest::is_metadata_properties_Set() const{
    return m_metadata_properties_isSet;
}

bool OAICreateTrialComponentRequest::is_metadata_properties_Valid() const{
    return m_metadata_properties_isValid;
}

QList OAICreateTrialComponentRequest::getTags() const {
    return m_tags;
}
void OAICreateTrialComponentRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTrialComponentRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTrialComponentRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateTrialComponentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trial_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTrialComponentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_trial_component_name_isValid && true;
}

} // namespace OpenAPI
