/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentStageStatusSummary_DeploymentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentStageStatusSummary_DeploymentStatus::OAIDeploymentStageStatusSummary_DeploymentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentStageStatusSummary_DeploymentStatus::OAIDeploymentStageStatusSummary_DeploymentStatus() {
    this->initializeModel();
}

OAIDeploymentStageStatusSummary_DeploymentStatus::~OAIDeploymentStageStatusSummary_DeploymentStatus() {}

void OAIDeploymentStageStatusSummary_DeploymentStatus::initializeModel() {

    m_stage_status_isSet = false;
    m_stage_status_isValid = false;

    m_edge_deployment_success_in_stage_isSet = false;
    m_edge_deployment_success_in_stage_isValid = false;

    m_edge_deployment_pending_in_stage_isSet = false;
    m_edge_deployment_pending_in_stage_isValid = false;

    m_edge_deployment_failed_in_stage_isSet = false;
    m_edge_deployment_failed_in_stage_isValid = false;

    m_edge_deployment_status_message_isSet = false;
    m_edge_deployment_status_message_isValid = false;

    m_edge_deployment_stage_start_time_isSet = false;
    m_edge_deployment_stage_start_time_isValid = false;
}

void OAIDeploymentStageStatusSummary_DeploymentStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentStageStatusSummary_DeploymentStatus::fromJsonObject(QJsonObject json) {

    m_stage_status_isValid = ::OpenAPI::fromJsonValue(m_stage_status, json[QString("StageStatus")]);
    m_stage_status_isSet = !json[QString("StageStatus")].isNull() && m_stage_status_isValid;

    m_edge_deployment_success_in_stage_isValid = ::OpenAPI::fromJsonValue(m_edge_deployment_success_in_stage, json[QString("EdgeDeploymentSuccessInStage")]);
    m_edge_deployment_success_in_stage_isSet = !json[QString("EdgeDeploymentSuccessInStage")].isNull() && m_edge_deployment_success_in_stage_isValid;

    m_edge_deployment_pending_in_stage_isValid = ::OpenAPI::fromJsonValue(m_edge_deployment_pending_in_stage, json[QString("EdgeDeploymentPendingInStage")]);
    m_edge_deployment_pending_in_stage_isSet = !json[QString("EdgeDeploymentPendingInStage")].isNull() && m_edge_deployment_pending_in_stage_isValid;

    m_edge_deployment_failed_in_stage_isValid = ::OpenAPI::fromJsonValue(m_edge_deployment_failed_in_stage, json[QString("EdgeDeploymentFailedInStage")]);
    m_edge_deployment_failed_in_stage_isSet = !json[QString("EdgeDeploymentFailedInStage")].isNull() && m_edge_deployment_failed_in_stage_isValid;

    m_edge_deployment_status_message_isValid = ::OpenAPI::fromJsonValue(m_edge_deployment_status_message, json[QString("EdgeDeploymentStatusMessage")]);
    m_edge_deployment_status_message_isSet = !json[QString("EdgeDeploymentStatusMessage")].isNull() && m_edge_deployment_status_message_isValid;

    m_edge_deployment_stage_start_time_isValid = ::OpenAPI::fromJsonValue(m_edge_deployment_stage_start_time, json[QString("EdgeDeploymentStageStartTime")]);
    m_edge_deployment_stage_start_time_isSet = !json[QString("EdgeDeploymentStageStartTime")].isNull() && m_edge_deployment_stage_start_time_isValid;
}

QString OAIDeploymentStageStatusSummary_DeploymentStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentStageStatusSummary_DeploymentStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_stage_status.isSet()) {
        obj.insert(QString("StageStatus"), ::OpenAPI::toJsonValue(m_stage_status));
    }
    if (m_edge_deployment_success_in_stage_isSet) {
        obj.insert(QString("EdgeDeploymentSuccessInStage"), ::OpenAPI::toJsonValue(m_edge_deployment_success_in_stage));
    }
    if (m_edge_deployment_pending_in_stage_isSet) {
        obj.insert(QString("EdgeDeploymentPendingInStage"), ::OpenAPI::toJsonValue(m_edge_deployment_pending_in_stage));
    }
    if (m_edge_deployment_failed_in_stage_isSet) {
        obj.insert(QString("EdgeDeploymentFailedInStage"), ::OpenAPI::toJsonValue(m_edge_deployment_failed_in_stage));
    }
    if (m_edge_deployment_status_message_isSet) {
        obj.insert(QString("EdgeDeploymentStatusMessage"), ::OpenAPI::toJsonValue(m_edge_deployment_status_message));
    }
    if (m_edge_deployment_stage_start_time_isSet) {
        obj.insert(QString("EdgeDeploymentStageStartTime"), ::OpenAPI::toJsonValue(m_edge_deployment_stage_start_time));
    }
    return obj;
}

OAIStageStatus OAIDeploymentStageStatusSummary_DeploymentStatus::getStageStatus() const {
    return m_stage_status;
}
void OAIDeploymentStageStatusSummary_DeploymentStatus::setStageStatus(const OAIStageStatus &stage_status) {
    m_stage_status = stage_status;
    m_stage_status_isSet = true;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_stage_status_Set() const{
    return m_stage_status_isSet;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_stage_status_Valid() const{
    return m_stage_status_isValid;
}

qint32 OAIDeploymentStageStatusSummary_DeploymentStatus::getEdgeDeploymentSuccessInStage() const {
    return m_edge_deployment_success_in_stage;
}
void OAIDeploymentStageStatusSummary_DeploymentStatus::setEdgeDeploymentSuccessInStage(const qint32 &edge_deployment_success_in_stage) {
    m_edge_deployment_success_in_stage = edge_deployment_success_in_stage;
    m_edge_deployment_success_in_stage_isSet = true;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_success_in_stage_Set() const{
    return m_edge_deployment_success_in_stage_isSet;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_success_in_stage_Valid() const{
    return m_edge_deployment_success_in_stage_isValid;
}

qint32 OAIDeploymentStageStatusSummary_DeploymentStatus::getEdgeDeploymentPendingInStage() const {
    return m_edge_deployment_pending_in_stage;
}
void OAIDeploymentStageStatusSummary_DeploymentStatus::setEdgeDeploymentPendingInStage(const qint32 &edge_deployment_pending_in_stage) {
    m_edge_deployment_pending_in_stage = edge_deployment_pending_in_stage;
    m_edge_deployment_pending_in_stage_isSet = true;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_pending_in_stage_Set() const{
    return m_edge_deployment_pending_in_stage_isSet;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_pending_in_stage_Valid() const{
    return m_edge_deployment_pending_in_stage_isValid;
}

qint32 OAIDeploymentStageStatusSummary_DeploymentStatus::getEdgeDeploymentFailedInStage() const {
    return m_edge_deployment_failed_in_stage;
}
void OAIDeploymentStageStatusSummary_DeploymentStatus::setEdgeDeploymentFailedInStage(const qint32 &edge_deployment_failed_in_stage) {
    m_edge_deployment_failed_in_stage = edge_deployment_failed_in_stage;
    m_edge_deployment_failed_in_stage_isSet = true;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_failed_in_stage_Set() const{
    return m_edge_deployment_failed_in_stage_isSet;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_failed_in_stage_Valid() const{
    return m_edge_deployment_failed_in_stage_isValid;
}

QString OAIDeploymentStageStatusSummary_DeploymentStatus::getEdgeDeploymentStatusMessage() const {
    return m_edge_deployment_status_message;
}
void OAIDeploymentStageStatusSummary_DeploymentStatus::setEdgeDeploymentStatusMessage(const QString &edge_deployment_status_message) {
    m_edge_deployment_status_message = edge_deployment_status_message;
    m_edge_deployment_status_message_isSet = true;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_status_message_Set() const{
    return m_edge_deployment_status_message_isSet;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_status_message_Valid() const{
    return m_edge_deployment_status_message_isValid;
}

QDateTime OAIDeploymentStageStatusSummary_DeploymentStatus::getEdgeDeploymentStageStartTime() const {
    return m_edge_deployment_stage_start_time;
}
void OAIDeploymentStageStatusSummary_DeploymentStatus::setEdgeDeploymentStageStartTime(const QDateTime &edge_deployment_stage_start_time) {
    m_edge_deployment_stage_start_time = edge_deployment_stage_start_time;
    m_edge_deployment_stage_start_time_isSet = true;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_stage_start_time_Set() const{
    return m_edge_deployment_stage_start_time_isSet;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::is_edge_deployment_stage_start_time_Valid() const{
    return m_edge_deployment_stage_start_time_isValid;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stage_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_deployment_success_in_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_deployment_pending_in_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_deployment_failed_in_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_deployment_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_deployment_stage_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentStageStatusSummary_DeploymentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stage_status_isValid && m_edge_deployment_success_in_stage_isValid && m_edge_deployment_pending_in_stage_isValid && m_edge_deployment_failed_in_stage_isValid && true;
}

} // namespace OpenAPI
