/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoMLJobSecondaryStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoMLJobSecondaryStatus::OAIAutoMLJobSecondaryStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoMLJobSecondaryStatus::OAIAutoMLJobSecondaryStatus() {
    this->initializeModel();
}

OAIAutoMLJobSecondaryStatus::~OAIAutoMLJobSecondaryStatus() {}

void OAIAutoMLJobSecondaryStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAutoMLJobSecondaryStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAutoMLJobSecondaryStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Starting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AnalyzingData", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::ANALYZINGDATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FeatureEngineering", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::FEATUREENGINEERING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ModelTuning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::MODELTUNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MaxCandidatesReached", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::MAXCANDIDATESREACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MaxAutoMLJobRuntimeReached", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::MAXAUTOMLJOBRUNTIMEREACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopping", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CandidateDefinitionsGenerated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::CANDIDATEDEFINITIONSGENERATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GeneratingExplainabilityReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::GENERATINGEXPLAINABILITYREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExplainabilityError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::EXPLAINABILITYERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeployingModel", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::DEPLOYINGMODEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ModelDeploymentError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::MODELDEPLOYMENTERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GeneratingModelInsightsReport", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::GENERATINGMODELINSIGHTSREPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ModelInsightsError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::MODELINSIGHTSERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TrainingModels", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::TRAININGMODELS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreTraining", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLJobSecondaryStatus::PRETRAINING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAutoMLJobSecondaryStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAutoMLJobSecondaryStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAutoMLJobSecondaryStatus::STARTING:
            val = "Starting";
            break;
        case eOAIAutoMLJobSecondaryStatus::ANALYZINGDATA:
            val = "AnalyzingData";
            break;
        case eOAIAutoMLJobSecondaryStatus::FEATUREENGINEERING:
            val = "FeatureEngineering";
            break;
        case eOAIAutoMLJobSecondaryStatus::MODELTUNING:
            val = "ModelTuning";
            break;
        case eOAIAutoMLJobSecondaryStatus::MAXCANDIDATESREACHED:
            val = "MaxCandidatesReached";
            break;
        case eOAIAutoMLJobSecondaryStatus::FAILED:
            val = "Failed";
            break;
        case eOAIAutoMLJobSecondaryStatus::STOPPED:
            val = "Stopped";
            break;
        case eOAIAutoMLJobSecondaryStatus::MAXAUTOMLJOBRUNTIMEREACHED:
            val = "MaxAutoMLJobRuntimeReached";
            break;
        case eOAIAutoMLJobSecondaryStatus::STOPPING:
            val = "Stopping";
            break;
        case eOAIAutoMLJobSecondaryStatus::CANDIDATEDEFINITIONSGENERATED:
            val = "CandidateDefinitionsGenerated";
            break;
        case eOAIAutoMLJobSecondaryStatus::GENERATINGEXPLAINABILITYREPORT:
            val = "GeneratingExplainabilityReport";
            break;
        case eOAIAutoMLJobSecondaryStatus::COMPLETED:
            val = "Completed";
            break;
        case eOAIAutoMLJobSecondaryStatus::EXPLAINABILITYERROR:
            val = "ExplainabilityError";
            break;
        case eOAIAutoMLJobSecondaryStatus::DEPLOYINGMODEL:
            val = "DeployingModel";
            break;
        case eOAIAutoMLJobSecondaryStatus::MODELDEPLOYMENTERROR:
            val = "ModelDeploymentError";
            break;
        case eOAIAutoMLJobSecondaryStatus::GENERATINGMODELINSIGHTSREPORT:
            val = "GeneratingModelInsightsReport";
            break;
        case eOAIAutoMLJobSecondaryStatus::MODELINSIGHTSERROR:
            val = "ModelInsightsError";
            break;
        case eOAIAutoMLJobSecondaryStatus::TRAININGMODELS:
            val = "TrainingModels";
            break;
        case eOAIAutoMLJobSecondaryStatus::PRETRAINING:
            val = "PreTraining";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAutoMLJobSecondaryStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAutoMLJobSecondaryStatus::eOAIAutoMLJobSecondaryStatus OAIAutoMLJobSecondaryStatus::getValue() const {
    return m_value;
}

void OAIAutoMLJobSecondaryStatus::setValue(const OAIAutoMLJobSecondaryStatus::eOAIAutoMLJobSecondaryStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAutoMLJobSecondaryStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIAutoMLJobSecondaryStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
