/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrialComponentArtifact.h
 *
 * &lt;p&gt;Represents an input or output artifact of a trial component. You specify &lt;code&gt;TrialComponentArtifact&lt;/code&gt; as part of the &lt;code&gt;InputArtifacts&lt;/code&gt; and &lt;code&gt;OutputArtifacts&lt;/code&gt; parameters in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html\&quot;&gt;CreateTrialComponent&lt;/a&gt; request.&lt;/p&gt; &lt;p&gt;Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types. Examples of output artifacts are metrics, snapshots, logs, and images.&lt;/p&gt;
 */

#ifndef OAITrialComponentArtifact_H
#define OAITrialComponentArtifact_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITrialComponentArtifact : public OAIObject {
public:
    OAITrialComponentArtifact();
    OAITrialComponentArtifact(QString json);
    ~OAITrialComponentArtifact() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMediaType() const;
    void setMediaType(const QString &media_type);
    bool is_media_type_Set() const;
    bool is_media_type_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_media_type;
    bool m_media_type_isSet;
    bool m_media_type_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrialComponentArtifact)

#endif // OAITrialComponentArtifact_H
