/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLabelingJobResponse_LabelCounters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLabelingJobResponse_LabelCounters::OAIDescribeLabelingJobResponse_LabelCounters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLabelingJobResponse_LabelCounters::OAIDescribeLabelingJobResponse_LabelCounters() {
    this->initializeModel();
}

OAIDescribeLabelingJobResponse_LabelCounters::~OAIDescribeLabelingJobResponse_LabelCounters() {}

void OAIDescribeLabelingJobResponse_LabelCounters::initializeModel() {

    m_total_labeled_isSet = false;
    m_total_labeled_isValid = false;

    m_human_labeled_isSet = false;
    m_human_labeled_isValid = false;

    m_machine_labeled_isSet = false;
    m_machine_labeled_isValid = false;

    m_failed_non_retryable_error_isSet = false;
    m_failed_non_retryable_error_isValid = false;

    m_unlabeled_isSet = false;
    m_unlabeled_isValid = false;
}

void OAIDescribeLabelingJobResponse_LabelCounters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLabelingJobResponse_LabelCounters::fromJsonObject(QJsonObject json) {

    m_total_labeled_isValid = ::OpenAPI::fromJsonValue(m_total_labeled, json[QString("TotalLabeled")]);
    m_total_labeled_isSet = !json[QString("TotalLabeled")].isNull() && m_total_labeled_isValid;

    m_human_labeled_isValid = ::OpenAPI::fromJsonValue(m_human_labeled, json[QString("HumanLabeled")]);
    m_human_labeled_isSet = !json[QString("HumanLabeled")].isNull() && m_human_labeled_isValid;

    m_machine_labeled_isValid = ::OpenAPI::fromJsonValue(m_machine_labeled, json[QString("MachineLabeled")]);
    m_machine_labeled_isSet = !json[QString("MachineLabeled")].isNull() && m_machine_labeled_isValid;

    m_failed_non_retryable_error_isValid = ::OpenAPI::fromJsonValue(m_failed_non_retryable_error, json[QString("FailedNonRetryableError")]);
    m_failed_non_retryable_error_isSet = !json[QString("FailedNonRetryableError")].isNull() && m_failed_non_retryable_error_isValid;

    m_unlabeled_isValid = ::OpenAPI::fromJsonValue(m_unlabeled, json[QString("Unlabeled")]);
    m_unlabeled_isSet = !json[QString("Unlabeled")].isNull() && m_unlabeled_isValid;
}

QString OAIDescribeLabelingJobResponse_LabelCounters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLabelingJobResponse_LabelCounters::asJsonObject() const {
    QJsonObject obj;
    if (m_total_labeled_isSet) {
        obj.insert(QString("TotalLabeled"), ::OpenAPI::toJsonValue(m_total_labeled));
    }
    if (m_human_labeled_isSet) {
        obj.insert(QString("HumanLabeled"), ::OpenAPI::toJsonValue(m_human_labeled));
    }
    if (m_machine_labeled_isSet) {
        obj.insert(QString("MachineLabeled"), ::OpenAPI::toJsonValue(m_machine_labeled));
    }
    if (m_failed_non_retryable_error_isSet) {
        obj.insert(QString("FailedNonRetryableError"), ::OpenAPI::toJsonValue(m_failed_non_retryable_error));
    }
    if (m_unlabeled_isSet) {
        obj.insert(QString("Unlabeled"), ::OpenAPI::toJsonValue(m_unlabeled));
    }
    return obj;
}

qint32 OAIDescribeLabelingJobResponse_LabelCounters::getTotalLabeled() const {
    return m_total_labeled;
}
void OAIDescribeLabelingJobResponse_LabelCounters::setTotalLabeled(const qint32 &total_labeled) {
    m_total_labeled = total_labeled;
    m_total_labeled_isSet = true;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_total_labeled_Set() const{
    return m_total_labeled_isSet;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_total_labeled_Valid() const{
    return m_total_labeled_isValid;
}

qint32 OAIDescribeLabelingJobResponse_LabelCounters::getHumanLabeled() const {
    return m_human_labeled;
}
void OAIDescribeLabelingJobResponse_LabelCounters::setHumanLabeled(const qint32 &human_labeled) {
    m_human_labeled = human_labeled;
    m_human_labeled_isSet = true;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_human_labeled_Set() const{
    return m_human_labeled_isSet;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_human_labeled_Valid() const{
    return m_human_labeled_isValid;
}

qint32 OAIDescribeLabelingJobResponse_LabelCounters::getMachineLabeled() const {
    return m_machine_labeled;
}
void OAIDescribeLabelingJobResponse_LabelCounters::setMachineLabeled(const qint32 &machine_labeled) {
    m_machine_labeled = machine_labeled;
    m_machine_labeled_isSet = true;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_machine_labeled_Set() const{
    return m_machine_labeled_isSet;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_machine_labeled_Valid() const{
    return m_machine_labeled_isValid;
}

qint32 OAIDescribeLabelingJobResponse_LabelCounters::getFailedNonRetryableError() const {
    return m_failed_non_retryable_error;
}
void OAIDescribeLabelingJobResponse_LabelCounters::setFailedNonRetryableError(const qint32 &failed_non_retryable_error) {
    m_failed_non_retryable_error = failed_non_retryable_error;
    m_failed_non_retryable_error_isSet = true;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_failed_non_retryable_error_Set() const{
    return m_failed_non_retryable_error_isSet;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_failed_non_retryable_error_Valid() const{
    return m_failed_non_retryable_error_isValid;
}

qint32 OAIDescribeLabelingJobResponse_LabelCounters::getUnlabeled() const {
    return m_unlabeled;
}
void OAIDescribeLabelingJobResponse_LabelCounters::setUnlabeled(const qint32 &unlabeled) {
    m_unlabeled = unlabeled;
    m_unlabeled_isSet = true;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_unlabeled_Set() const{
    return m_unlabeled_isSet;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::is_unlabeled_Valid() const{
    return m_unlabeled_isValid;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_labeled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_labeled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_labeled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_non_retryable_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlabeled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLabelingJobResponse_LabelCounters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
