/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformInput::OAITransformInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformInput::OAITransformInput() {
    this->initializeModel();
}

OAITransformInput::~OAITransformInput() {}

void OAITransformInput::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_compression_type_isSet = false;
    m_compression_type_isValid = false;

    m_split_type_isSet = false;
    m_split_type_isValid = false;
}

void OAITransformInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformInput::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_compression_type_isValid = ::OpenAPI::fromJsonValue(m_compression_type, json[QString("CompressionType")]);
    m_compression_type_isSet = !json[QString("CompressionType")].isNull() && m_compression_type_isValid;

    m_split_type_isValid = ::OpenAPI::fromJsonValue(m_split_type, json[QString("SplitType")]);
    m_split_type_isSet = !json[QString("SplitType")].isNull() && m_split_type_isValid;
}

QString OAITransformInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformInput::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_compression_type.isSet()) {
        obj.insert(QString("CompressionType"), ::OpenAPI::toJsonValue(m_compression_type));
    }
    if (m_split_type.isSet()) {
        obj.insert(QString("SplitType"), ::OpenAPI::toJsonValue(m_split_type));
    }
    return obj;
}

OAITransformInput_DataSource OAITransformInput::getDataSource() const {
    return m_data_source;
}
void OAITransformInput::setDataSource(const OAITransformInput_DataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAITransformInput::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAITransformInput::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAITransformInput::getContentType() const {
    return m_content_type;
}
void OAITransformInput::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAITransformInput::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAITransformInput::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAICompressionType OAITransformInput::getCompressionType() const {
    return m_compression_type;
}
void OAITransformInput::setCompressionType(const OAICompressionType &compression_type) {
    m_compression_type = compression_type;
    m_compression_type_isSet = true;
}

bool OAITransformInput::is_compression_type_Set() const{
    return m_compression_type_isSet;
}

bool OAITransformInput::is_compression_type_Valid() const{
    return m_compression_type_isValid;
}

OAISplitType OAITransformInput::getSplitType() const {
    return m_split_type;
}
void OAITransformInput::setSplitType(const OAISplitType &split_type) {
    m_split_type = split_type;
    m_split_type_isSet = true;
}

bool OAITransformInput::is_split_type_Set() const{
    return m_split_type_isSet;
}

bool OAITransformInput::is_split_type_Valid() const{
    return m_split_type_isValid;
}

bool OAITransformInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_isValid && true;
}

} // namespace OpenAPI
