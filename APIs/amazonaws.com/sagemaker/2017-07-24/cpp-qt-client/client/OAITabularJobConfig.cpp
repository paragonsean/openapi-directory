/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITabularJobConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITabularJobConfig::OAITabularJobConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITabularJobConfig::OAITabularJobConfig() {
    this->initializeModel();
}

OAITabularJobConfig::~OAITabularJobConfig() {}

void OAITabularJobConfig::initializeModel() {

    m_candidate_generation_config_isSet = false;
    m_candidate_generation_config_isValid = false;

    m_completion_criteria_isSet = false;
    m_completion_criteria_isValid = false;

    m_feature_specification_s3_uri_isSet = false;
    m_feature_specification_s3_uri_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_generate_candidate_definitions_only_isSet = false;
    m_generate_candidate_definitions_only_isValid = false;

    m_problem_type_isSet = false;
    m_problem_type_isValid = false;

    m_target_attribute_name_isSet = false;
    m_target_attribute_name_isValid = false;

    m_sample_weight_attribute_name_isSet = false;
    m_sample_weight_attribute_name_isValid = false;
}

void OAITabularJobConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITabularJobConfig::fromJsonObject(QJsonObject json) {

    m_candidate_generation_config_isValid = ::OpenAPI::fromJsonValue(m_candidate_generation_config, json[QString("CandidateGenerationConfig")]);
    m_candidate_generation_config_isSet = !json[QString("CandidateGenerationConfig")].isNull() && m_candidate_generation_config_isValid;

    m_completion_criteria_isValid = ::OpenAPI::fromJsonValue(m_completion_criteria, json[QString("CompletionCriteria")]);
    m_completion_criteria_isSet = !json[QString("CompletionCriteria")].isNull() && m_completion_criteria_isValid;

    m_feature_specification_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_feature_specification_s3_uri, json[QString("FeatureSpecificationS3Uri")]);
    m_feature_specification_s3_uri_isSet = !json[QString("FeatureSpecificationS3Uri")].isNull() && m_feature_specification_s3_uri_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_generate_candidate_definitions_only_isValid = ::OpenAPI::fromJsonValue(m_generate_candidate_definitions_only, json[QString("GenerateCandidateDefinitionsOnly")]);
    m_generate_candidate_definitions_only_isSet = !json[QString("GenerateCandidateDefinitionsOnly")].isNull() && m_generate_candidate_definitions_only_isValid;

    m_problem_type_isValid = ::OpenAPI::fromJsonValue(m_problem_type, json[QString("ProblemType")]);
    m_problem_type_isSet = !json[QString("ProblemType")].isNull() && m_problem_type_isValid;

    m_target_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_target_attribute_name, json[QString("TargetAttributeName")]);
    m_target_attribute_name_isSet = !json[QString("TargetAttributeName")].isNull() && m_target_attribute_name_isValid;

    m_sample_weight_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_sample_weight_attribute_name, json[QString("SampleWeightAttributeName")]);
    m_sample_weight_attribute_name_isSet = !json[QString("SampleWeightAttributeName")].isNull() && m_sample_weight_attribute_name_isValid;
}

QString OAITabularJobConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITabularJobConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_candidate_generation_config.isSet()) {
        obj.insert(QString("CandidateGenerationConfig"), ::OpenAPI::toJsonValue(m_candidate_generation_config));
    }
    if (m_completion_criteria.isSet()) {
        obj.insert(QString("CompletionCriteria"), ::OpenAPI::toJsonValue(m_completion_criteria));
    }
    if (m_feature_specification_s3_uri_isSet) {
        obj.insert(QString("FeatureSpecificationS3Uri"), ::OpenAPI::toJsonValue(m_feature_specification_s3_uri));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_generate_candidate_definitions_only_isSet) {
        obj.insert(QString("GenerateCandidateDefinitionsOnly"), ::OpenAPI::toJsonValue(m_generate_candidate_definitions_only));
    }
    if (m_problem_type.isSet()) {
        obj.insert(QString("ProblemType"), ::OpenAPI::toJsonValue(m_problem_type));
    }
    if (m_target_attribute_name_isSet) {
        obj.insert(QString("TargetAttributeName"), ::OpenAPI::toJsonValue(m_target_attribute_name));
    }
    if (m_sample_weight_attribute_name_isSet) {
        obj.insert(QString("SampleWeightAttributeName"), ::OpenAPI::toJsonValue(m_sample_weight_attribute_name));
    }
    return obj;
}

OAITabularJobConfig_CandidateGenerationConfig OAITabularJobConfig::getCandidateGenerationConfig() const {
    return m_candidate_generation_config;
}
void OAITabularJobConfig::setCandidateGenerationConfig(const OAITabularJobConfig_CandidateGenerationConfig &candidate_generation_config) {
    m_candidate_generation_config = candidate_generation_config;
    m_candidate_generation_config_isSet = true;
}

bool OAITabularJobConfig::is_candidate_generation_config_Set() const{
    return m_candidate_generation_config_isSet;
}

bool OAITabularJobConfig::is_candidate_generation_config_Valid() const{
    return m_candidate_generation_config_isValid;
}

OAIAutoMLJobCompletionCriteria OAITabularJobConfig::getCompletionCriteria() const {
    return m_completion_criteria;
}
void OAITabularJobConfig::setCompletionCriteria(const OAIAutoMLJobCompletionCriteria &completion_criteria) {
    m_completion_criteria = completion_criteria;
    m_completion_criteria_isSet = true;
}

bool OAITabularJobConfig::is_completion_criteria_Set() const{
    return m_completion_criteria_isSet;
}

bool OAITabularJobConfig::is_completion_criteria_Valid() const{
    return m_completion_criteria_isValid;
}

QString OAITabularJobConfig::getFeatureSpecificationS3Uri() const {
    return m_feature_specification_s3_uri;
}
void OAITabularJobConfig::setFeatureSpecificationS3Uri(const QString &feature_specification_s3_uri) {
    m_feature_specification_s3_uri = feature_specification_s3_uri;
    m_feature_specification_s3_uri_isSet = true;
}

bool OAITabularJobConfig::is_feature_specification_s3_uri_Set() const{
    return m_feature_specification_s3_uri_isSet;
}

bool OAITabularJobConfig::is_feature_specification_s3_uri_Valid() const{
    return m_feature_specification_s3_uri_isValid;
}

OAIAutoMLMode OAITabularJobConfig::getMode() const {
    return m_mode;
}
void OAITabularJobConfig::setMode(const OAIAutoMLMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAITabularJobConfig::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAITabularJobConfig::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAITabularJobConfig::getGenerateCandidateDefinitionsOnly() const {
    return m_generate_candidate_definitions_only;
}
void OAITabularJobConfig::setGenerateCandidateDefinitionsOnly(const bool &generate_candidate_definitions_only) {
    m_generate_candidate_definitions_only = generate_candidate_definitions_only;
    m_generate_candidate_definitions_only_isSet = true;
}

bool OAITabularJobConfig::is_generate_candidate_definitions_only_Set() const{
    return m_generate_candidate_definitions_only_isSet;
}

bool OAITabularJobConfig::is_generate_candidate_definitions_only_Valid() const{
    return m_generate_candidate_definitions_only_isValid;
}

OAIProblemType OAITabularJobConfig::getProblemType() const {
    return m_problem_type;
}
void OAITabularJobConfig::setProblemType(const OAIProblemType &problem_type) {
    m_problem_type = problem_type;
    m_problem_type_isSet = true;
}

bool OAITabularJobConfig::is_problem_type_Set() const{
    return m_problem_type_isSet;
}

bool OAITabularJobConfig::is_problem_type_Valid() const{
    return m_problem_type_isValid;
}

QString OAITabularJobConfig::getTargetAttributeName() const {
    return m_target_attribute_name;
}
void OAITabularJobConfig::setTargetAttributeName(const QString &target_attribute_name) {
    m_target_attribute_name = target_attribute_name;
    m_target_attribute_name_isSet = true;
}

bool OAITabularJobConfig::is_target_attribute_name_Set() const{
    return m_target_attribute_name_isSet;
}

bool OAITabularJobConfig::is_target_attribute_name_Valid() const{
    return m_target_attribute_name_isValid;
}

QString OAITabularJobConfig::getSampleWeightAttributeName() const {
    return m_sample_weight_attribute_name;
}
void OAITabularJobConfig::setSampleWeightAttributeName(const QString &sample_weight_attribute_name) {
    m_sample_weight_attribute_name = sample_weight_attribute_name;
    m_sample_weight_attribute_name_isSet = true;
}

bool OAITabularJobConfig::is_sample_weight_attribute_name_Set() const{
    return m_sample_weight_attribute_name_isSet;
}

bool OAITabularJobConfig::is_sample_weight_attribute_name_Valid() const{
    return m_sample_weight_attribute_name_isValid;
}

bool OAITabularJobConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidate_generation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_specification_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_candidate_definitions_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_problem_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_weight_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITabularJobConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_attribute_name_isValid && true;
}

} // namespace OpenAPI
