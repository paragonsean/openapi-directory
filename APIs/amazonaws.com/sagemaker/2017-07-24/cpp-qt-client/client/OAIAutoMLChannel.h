/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAutoMLChannel.h
 *
 * &lt;p&gt;A channel is a named input source that training algorithms can consume. The validation dataset size is limited to less than 2 GB. The training dataset size must be less than 100 GB. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Channel.html\&quot;&gt; Channel&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A validation dataset must contain the same headers as the training dataset.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
 */

#ifndef OAIAutoMLChannel_H
#define OAIAutoMLChannel_H

#include <QJsonObject>

#include "OAIAutoMLChannelType.h"
#include "OAIAutoMLChannel_DataSource.h"
#include "OAICompressionType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAutoMLChannel_DataSource;

class OAIAutoMLChannel : public OAIObject {
public:
    OAIAutoMLChannel();
    OAIAutoMLChannel(QString json);
    ~OAIAutoMLChannel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAutoMLChannel_DataSource getDataSource() const;
    void setDataSource(const OAIAutoMLChannel_DataSource &data_source);
    bool is_data_source_Set() const;
    bool is_data_source_Valid() const;

    OAICompressionType getCompressionType() const;
    void setCompressionType(const OAICompressionType &compression_type);
    bool is_compression_type_Set() const;
    bool is_compression_type_Valid() const;

    QString getTargetAttributeName() const;
    void setTargetAttributeName(const QString &target_attribute_name);
    bool is_target_attribute_name_Set() const;
    bool is_target_attribute_name_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    OAIAutoMLChannelType getChannelType() const;
    void setChannelType(const OAIAutoMLChannelType &channel_type);
    bool is_channel_type_Set() const;
    bool is_channel_type_Valid() const;

    QString getSampleWeightAttributeName() const;
    void setSampleWeightAttributeName(const QString &sample_weight_attribute_name);
    bool is_sample_weight_attribute_name_Set() const;
    bool is_sample_weight_attribute_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAutoMLChannel_DataSource m_data_source;
    bool m_data_source_isSet;
    bool m_data_source_isValid;

    OAICompressionType m_compression_type;
    bool m_compression_type_isSet;
    bool m_compression_type_isValid;

    QString m_target_attribute_name;
    bool m_target_attribute_name_isSet;
    bool m_target_attribute_name_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    OAIAutoMLChannelType m_channel_type;
    bool m_channel_type_isSet;
    bool m_channel_type_isValid;

    QString m_sample_weight_attribute_name;
    bool m_sample_weight_attribute_name_isSet;
    bool m_sample_weight_attribute_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAutoMLChannel)

#endif // OAIAutoMLChannel_H
