/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataProcessing.h
 *
 * The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html\&quot;&gt;Associate Prediction Results with their Corresponding Input Records&lt;/a&gt;.
 */

#ifndef OAIDataProcessing_H
#define OAIDataProcessing_H

#include <QJsonObject>

#include "OAIJoinSource.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDataProcessing : public OAIObject {
public:
    OAIDataProcessing();
    OAIDataProcessing(QString json);
    ~OAIDataProcessing() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInputFilter() const;
    void setInputFilter(const QString &input_filter);
    bool is_input_filter_Set() const;
    bool is_input_filter_Valid() const;

    QString getOutputFilter() const;
    void setOutputFilter(const QString &output_filter);
    bool is_output_filter_Set() const;
    bool is_output_filter_Valid() const;

    OAIJoinSource getJoinSource() const;
    void setJoinSource(const OAIJoinSource &join_source);
    bool is_join_source_Set() const;
    bool is_join_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_input_filter;
    bool m_input_filter_isSet;
    bool m_input_filter_isValid;

    QString m_output_filter;
    bool m_output_filter_isSet;
    bool m_output_filter_isValid;

    OAIJoinSource m_join_source;
    bool m_join_source_isSet;
    bool m_join_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataProcessing)

#endif // OAIDataProcessing_H
