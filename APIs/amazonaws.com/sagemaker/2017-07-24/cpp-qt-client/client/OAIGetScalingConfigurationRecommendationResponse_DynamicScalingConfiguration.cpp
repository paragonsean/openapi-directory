/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration() {
    this->initializeModel();
}

OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::~OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration() {}

void OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::initializeModel() {

    m_min_capacity_isSet = false;
    m_min_capacity_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_scale_in_cooldown_isSet = false;
    m_scale_in_cooldown_isValid = false;

    m_scale_out_cooldown_isSet = false;
    m_scale_out_cooldown_isValid = false;

    m_scaling_policies_isSet = false;
    m_scaling_policies_isValid = false;
}

void OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::fromJsonObject(QJsonObject json) {

    m_min_capacity_isValid = ::OpenAPI::fromJsonValue(m_min_capacity, json[QString("MinCapacity")]);
    m_min_capacity_isSet = !json[QString("MinCapacity")].isNull() && m_min_capacity_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("MaxCapacity")]);
    m_max_capacity_isSet = !json[QString("MaxCapacity")].isNull() && m_max_capacity_isValid;

    m_scale_in_cooldown_isValid = ::OpenAPI::fromJsonValue(m_scale_in_cooldown, json[QString("ScaleInCooldown")]);
    m_scale_in_cooldown_isSet = !json[QString("ScaleInCooldown")].isNull() && m_scale_in_cooldown_isValid;

    m_scale_out_cooldown_isValid = ::OpenAPI::fromJsonValue(m_scale_out_cooldown, json[QString("ScaleOutCooldown")]);
    m_scale_out_cooldown_isSet = !json[QString("ScaleOutCooldown")].isNull() && m_scale_out_cooldown_isValid;

    m_scaling_policies_isValid = ::OpenAPI::fromJsonValue(m_scaling_policies, json[QString("ScalingPolicies")]);
    m_scaling_policies_isSet = !json[QString("ScalingPolicies")].isNull() && m_scaling_policies_isValid;
}

QString OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_min_capacity_isSet) {
        obj.insert(QString("MinCapacity"), ::OpenAPI::toJsonValue(m_min_capacity));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("MaxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_scale_in_cooldown_isSet) {
        obj.insert(QString("ScaleInCooldown"), ::OpenAPI::toJsonValue(m_scale_in_cooldown));
    }
    if (m_scale_out_cooldown_isSet) {
        obj.insert(QString("ScaleOutCooldown"), ::OpenAPI::toJsonValue(m_scale_out_cooldown));
    }
    if (m_scaling_policies.isSet()) {
        obj.insert(QString("ScalingPolicies"), ::OpenAPI::toJsonValue(m_scaling_policies));
    }
    return obj;
}

qint32 OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::getMinCapacity() const {
    return m_min_capacity;
}
void OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::setMinCapacity(const qint32 &min_capacity) {
    m_min_capacity = min_capacity;
    m_min_capacity_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_min_capacity_Set() const{
    return m_min_capacity_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_min_capacity_Valid() const{
    return m_min_capacity_isValid;
}

qint32 OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::setMaxCapacity(const qint32 &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

qint32 OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::getScaleInCooldown() const {
    return m_scale_in_cooldown;
}
void OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::setScaleInCooldown(const qint32 &scale_in_cooldown) {
    m_scale_in_cooldown = scale_in_cooldown;
    m_scale_in_cooldown_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_scale_in_cooldown_Set() const{
    return m_scale_in_cooldown_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_scale_in_cooldown_Valid() const{
    return m_scale_in_cooldown_isValid;
}

qint32 OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::getScaleOutCooldown() const {
    return m_scale_out_cooldown;
}
void OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::setScaleOutCooldown(const qint32 &scale_out_cooldown) {
    m_scale_out_cooldown = scale_out_cooldown;
    m_scale_out_cooldown_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_scale_out_cooldown_Set() const{
    return m_scale_out_cooldown_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_scale_out_cooldown_Valid() const{
    return m_scale_out_cooldown_isValid;
}

QList OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::getScalingPolicies() const {
    return m_scaling_policies;
}
void OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::setScalingPolicies(const QList &scaling_policies) {
    m_scaling_policies = scaling_policies;
    m_scaling_policies_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_scaling_policies_Set() const{
    return m_scaling_policies_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::is_scaling_policies_Valid() const{
    return m_scaling_policies_isValid;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_in_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_out_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
