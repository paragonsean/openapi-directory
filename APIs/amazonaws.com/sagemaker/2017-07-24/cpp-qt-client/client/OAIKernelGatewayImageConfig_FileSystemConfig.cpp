/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKernelGatewayImageConfig_FileSystemConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKernelGatewayImageConfig_FileSystemConfig::OAIKernelGatewayImageConfig_FileSystemConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKernelGatewayImageConfig_FileSystemConfig::OAIKernelGatewayImageConfig_FileSystemConfig() {
    this->initializeModel();
}

OAIKernelGatewayImageConfig_FileSystemConfig::~OAIKernelGatewayImageConfig_FileSystemConfig() {}

void OAIKernelGatewayImageConfig_FileSystemConfig::initializeModel() {

    m_mount_path_isSet = false;
    m_mount_path_isValid = false;

    m_default_uid_isSet = false;
    m_default_uid_isValid = false;

    m_default_gid_isSet = false;
    m_default_gid_isValid = false;
}

void OAIKernelGatewayImageConfig_FileSystemConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKernelGatewayImageConfig_FileSystemConfig::fromJsonObject(QJsonObject json) {

    m_mount_path_isValid = ::OpenAPI::fromJsonValue(m_mount_path, json[QString("MountPath")]);
    m_mount_path_isSet = !json[QString("MountPath")].isNull() && m_mount_path_isValid;

    m_default_uid_isValid = ::OpenAPI::fromJsonValue(m_default_uid, json[QString("DefaultUid")]);
    m_default_uid_isSet = !json[QString("DefaultUid")].isNull() && m_default_uid_isValid;

    m_default_gid_isValid = ::OpenAPI::fromJsonValue(m_default_gid, json[QString("DefaultGid")]);
    m_default_gid_isSet = !json[QString("DefaultGid")].isNull() && m_default_gid_isValid;
}

QString OAIKernelGatewayImageConfig_FileSystemConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKernelGatewayImageConfig_FileSystemConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_mount_path_isSet) {
        obj.insert(QString("MountPath"), ::OpenAPI::toJsonValue(m_mount_path));
    }
    if (m_default_uid_isSet) {
        obj.insert(QString("DefaultUid"), ::OpenAPI::toJsonValue(m_default_uid));
    }
    if (m_default_gid_isSet) {
        obj.insert(QString("DefaultGid"), ::OpenAPI::toJsonValue(m_default_gid));
    }
    return obj;
}

QString OAIKernelGatewayImageConfig_FileSystemConfig::getMountPath() const {
    return m_mount_path;
}
void OAIKernelGatewayImageConfig_FileSystemConfig::setMountPath(const QString &mount_path) {
    m_mount_path = mount_path;
    m_mount_path_isSet = true;
}

bool OAIKernelGatewayImageConfig_FileSystemConfig::is_mount_path_Set() const{
    return m_mount_path_isSet;
}

bool OAIKernelGatewayImageConfig_FileSystemConfig::is_mount_path_Valid() const{
    return m_mount_path_isValid;
}

qint32 OAIKernelGatewayImageConfig_FileSystemConfig::getDefaultUid() const {
    return m_default_uid;
}
void OAIKernelGatewayImageConfig_FileSystemConfig::setDefaultUid(const qint32 &default_uid) {
    m_default_uid = default_uid;
    m_default_uid_isSet = true;
}

bool OAIKernelGatewayImageConfig_FileSystemConfig::is_default_uid_Set() const{
    return m_default_uid_isSet;
}

bool OAIKernelGatewayImageConfig_FileSystemConfig::is_default_uid_Valid() const{
    return m_default_uid_isValid;
}

qint32 OAIKernelGatewayImageConfig_FileSystemConfig::getDefaultGid() const {
    return m_default_gid;
}
void OAIKernelGatewayImageConfig_FileSystemConfig::setDefaultGid(const qint32 &default_gid) {
    m_default_gid = default_gid;
    m_default_gid_isSet = true;
}

bool OAIKernelGatewayImageConfig_FileSystemConfig::is_default_gid_Set() const{
    return m_default_gid_isSet;
}

bool OAIKernelGatewayImageConfig_FileSystemConfig::is_default_gid_Valid() const{
    return m_default_gid_isValid;
}

bool OAIKernelGatewayImageConfig_FileSystemConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mount_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_gid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKernelGatewayImageConfig_FileSystemConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
