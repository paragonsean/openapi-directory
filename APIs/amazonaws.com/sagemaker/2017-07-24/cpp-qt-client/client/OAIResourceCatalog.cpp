/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceCatalog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceCatalog::OAIResourceCatalog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceCatalog::OAIResourceCatalog() {
    this->initializeModel();
}

OAIResourceCatalog::~OAIResourceCatalog() {}

void OAIResourceCatalog::initializeModel() {

    m_resource_catalog_arn_isSet = false;
    m_resource_catalog_arn_isValid = false;

    m_resource_catalog_name_isSet = false;
    m_resource_catalog_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAIResourceCatalog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceCatalog::fromJsonObject(QJsonObject json) {

    m_resource_catalog_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_catalog_arn, json[QString("ResourceCatalogArn")]);
    m_resource_catalog_arn_isSet = !json[QString("ResourceCatalogArn")].isNull() && m_resource_catalog_arn_isValid;

    m_resource_catalog_name_isValid = ::OpenAPI::fromJsonValue(m_resource_catalog_name, json[QString("ResourceCatalogName")]);
    m_resource_catalog_name_isSet = !json[QString("ResourceCatalogName")].isNull() && m_resource_catalog_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAIResourceCatalog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceCatalog::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_catalog_arn_isSet) {
        obj.insert(QString("ResourceCatalogArn"), ::OpenAPI::toJsonValue(m_resource_catalog_arn));
    }
    if (m_resource_catalog_name_isSet) {
        obj.insert(QString("ResourceCatalogName"), ::OpenAPI::toJsonValue(m_resource_catalog_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAIResourceCatalog::getResourceCatalogArn() const {
    return m_resource_catalog_arn;
}
void OAIResourceCatalog::setResourceCatalogArn(const QString &resource_catalog_arn) {
    m_resource_catalog_arn = resource_catalog_arn;
    m_resource_catalog_arn_isSet = true;
}

bool OAIResourceCatalog::is_resource_catalog_arn_Set() const{
    return m_resource_catalog_arn_isSet;
}

bool OAIResourceCatalog::is_resource_catalog_arn_Valid() const{
    return m_resource_catalog_arn_isValid;
}

QString OAIResourceCatalog::getResourceCatalogName() const {
    return m_resource_catalog_name;
}
void OAIResourceCatalog::setResourceCatalogName(const QString &resource_catalog_name) {
    m_resource_catalog_name = resource_catalog_name;
    m_resource_catalog_name_isSet = true;
}

bool OAIResourceCatalog::is_resource_catalog_name_Set() const{
    return m_resource_catalog_name_isSet;
}

bool OAIResourceCatalog::is_resource_catalog_name_Valid() const{
    return m_resource_catalog_name_isValid;
}

QString OAIResourceCatalog::getDescription() const {
    return m_description;
}
void OAIResourceCatalog::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIResourceCatalog::is_description_Set() const{
    return m_description_isSet;
}

bool OAIResourceCatalog::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIResourceCatalog::getCreationTime() const {
    return m_creation_time;
}
void OAIResourceCatalog::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIResourceCatalog::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIResourceCatalog::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIResourceCatalog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_catalog_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_catalog_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceCatalog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_catalog_arn_isValid && m_resource_catalog_name_isValid && m_description_isValid && m_creation_time_isValid && true;
}

} // namespace OpenAPI
