/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResourceCatalog.h
 *
 *  A resource catalog containing all of the resources of a specific resource type within a resource owner account. For an example on sharing the Amazon SageMaker Feature Store &lt;code&gt;DefaultFeatureGroupCatalog&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/feature-store-cross-account-discoverability-share-sagemaker-catalog.html\&quot;&gt;Share Amazon SageMaker Catalog resource type&lt;/a&gt; in the Amazon SageMaker Developer Guide. 
 */

#ifndef OAIResourceCatalog_H
#define OAIResourceCatalog_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResourceCatalog : public OAIObject {
public:
    OAIResourceCatalog();
    OAIResourceCatalog(QString json);
    ~OAIResourceCatalog() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getResourceCatalogArn() const;
    void setResourceCatalogArn(const QString &resource_catalog_arn);
    bool is_resource_catalog_arn_Set() const;
    bool is_resource_catalog_arn_Valid() const;

    QString getResourceCatalogName() const;
    void setResourceCatalogName(const QString &resource_catalog_name);
    bool is_resource_catalog_name_Set() const;
    bool is_resource_catalog_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_resource_catalog_arn;
    bool m_resource_catalog_arn_isSet;
    bool m_resource_catalog_arn_isValid;

    QString m_resource_catalog_name;
    bool m_resource_catalog_name_isSet;
    bool m_resource_catalog_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResourceCatalog)

#endif // OAIResourceCatalog_H
