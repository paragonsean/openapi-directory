/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelMetadataSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelMetadataSummary::OAIModelMetadataSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelMetadataSummary::OAIModelMetadataSummary() {
    this->initializeModel();
}

OAIModelMetadataSummary::~OAIModelMetadataSummary() {}

void OAIModelMetadataSummary::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_framework_isSet = false;
    m_framework_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_framework_version_isSet = false;
    m_framework_version_isValid = false;
}

void OAIModelMetadataSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelMetadataSummary::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_framework_isValid = ::OpenAPI::fromJsonValue(m_framework, json[QString("Framework")]);
    m_framework_isSet = !json[QString("Framework")].isNull() && m_framework_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("Task")]);
    m_task_isSet = !json[QString("Task")].isNull() && m_task_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("Model")]);
    m_model_isSet = !json[QString("Model")].isNull() && m_model_isValid;

    m_framework_version_isValid = ::OpenAPI::fromJsonValue(m_framework_version, json[QString("FrameworkVersion")]);
    m_framework_version_isSet = !json[QString("FrameworkVersion")].isNull() && m_framework_version_isValid;
}

QString OAIModelMetadataSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelMetadataSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_framework_isSet) {
        obj.insert(QString("Framework"), ::OpenAPI::toJsonValue(m_framework));
    }
    if (m_task_isSet) {
        obj.insert(QString("Task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_model_isSet) {
        obj.insert(QString("Model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_framework_version_isSet) {
        obj.insert(QString("FrameworkVersion"), ::OpenAPI::toJsonValue(m_framework_version));
    }
    return obj;
}

QString OAIModelMetadataSummary::getDomain() const {
    return m_domain;
}
void OAIModelMetadataSummary::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIModelMetadataSummary::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIModelMetadataSummary::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIModelMetadataSummary::getFramework() const {
    return m_framework;
}
void OAIModelMetadataSummary::setFramework(const QString &framework) {
    m_framework = framework;
    m_framework_isSet = true;
}

bool OAIModelMetadataSummary::is_framework_Set() const{
    return m_framework_isSet;
}

bool OAIModelMetadataSummary::is_framework_Valid() const{
    return m_framework_isValid;
}

QString OAIModelMetadataSummary::getTask() const {
    return m_task;
}
void OAIModelMetadataSummary::setTask(const QString &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAIModelMetadataSummary::is_task_Set() const{
    return m_task_isSet;
}

bool OAIModelMetadataSummary::is_task_Valid() const{
    return m_task_isValid;
}

QString OAIModelMetadataSummary::getModel() const {
    return m_model;
}
void OAIModelMetadataSummary::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIModelMetadataSummary::is_model_Set() const{
    return m_model_isSet;
}

bool OAIModelMetadataSummary::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIModelMetadataSummary::getFrameworkVersion() const {
    return m_framework_version;
}
void OAIModelMetadataSummary::setFrameworkVersion(const QString &framework_version) {
    m_framework_version = framework_version;
    m_framework_version_isSet = true;
}

bool OAIModelMetadataSummary::is_framework_version_Set() const{
    return m_framework_version_isSet;
}

bool OAIModelMetadataSummary::is_framework_version_Valid() const{
    return m_framework_version_isValid;
}

bool OAIModelMetadataSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelMetadataSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_framework_isValid && m_task_isValid && m_model_isValid && m_framework_version_isValid && true;
}

} // namespace OpenAPI
