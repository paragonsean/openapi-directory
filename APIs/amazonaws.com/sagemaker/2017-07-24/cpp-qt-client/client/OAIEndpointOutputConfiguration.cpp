/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointOutputConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointOutputConfiguration::OAIEndpointOutputConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointOutputConfiguration::OAIEndpointOutputConfiguration() {
    this->initializeModel();
}

OAIEndpointOutputConfiguration::~OAIEndpointOutputConfiguration() {}

void OAIEndpointOutputConfiguration::initializeModel() {

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_variant_name_isSet = false;
    m_variant_name_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_initial_instance_count_isSet = false;
    m_initial_instance_count_isValid = false;

    m_serverless_config_isSet = false;
    m_serverless_config_isValid = false;
}

void OAIEndpointOutputConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointOutputConfiguration::fromJsonObject(QJsonObject json) {

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("EndpointName")]);
    m_endpoint_name_isSet = !json[QString("EndpointName")].isNull() && m_endpoint_name_isValid;

    m_variant_name_isValid = ::OpenAPI::fromJsonValue(m_variant_name, json[QString("VariantName")]);
    m_variant_name_isSet = !json[QString("VariantName")].isNull() && m_variant_name_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_initial_instance_count_isValid = ::OpenAPI::fromJsonValue(m_initial_instance_count, json[QString("InitialInstanceCount")]);
    m_initial_instance_count_isSet = !json[QString("InitialInstanceCount")].isNull() && m_initial_instance_count_isValid;

    m_serverless_config_isValid = ::OpenAPI::fromJsonValue(m_serverless_config, json[QString("ServerlessConfig")]);
    m_serverless_config_isSet = !json[QString("ServerlessConfig")].isNull() && m_serverless_config_isValid;
}

QString OAIEndpointOutputConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointOutputConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_name_isSet) {
        obj.insert(QString("EndpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_variant_name_isSet) {
        obj.insert(QString("VariantName"), ::OpenAPI::toJsonValue(m_variant_name));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_initial_instance_count_isSet) {
        obj.insert(QString("InitialInstanceCount"), ::OpenAPI::toJsonValue(m_initial_instance_count));
    }
    if (m_serverless_config.isSet()) {
        obj.insert(QString("ServerlessConfig"), ::OpenAPI::toJsonValue(m_serverless_config));
    }
    return obj;
}

QString OAIEndpointOutputConfiguration::getEndpointName() const {
    return m_endpoint_name;
}
void OAIEndpointOutputConfiguration::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIEndpointOutputConfiguration::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIEndpointOutputConfiguration::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

QString OAIEndpointOutputConfiguration::getVariantName() const {
    return m_variant_name;
}
void OAIEndpointOutputConfiguration::setVariantName(const QString &variant_name) {
    m_variant_name = variant_name;
    m_variant_name_isSet = true;
}

bool OAIEndpointOutputConfiguration::is_variant_name_Set() const{
    return m_variant_name_isSet;
}

bool OAIEndpointOutputConfiguration::is_variant_name_Valid() const{
    return m_variant_name_isValid;
}

OAIProductionVariantInstanceType OAIEndpointOutputConfiguration::getInstanceType() const {
    return m_instance_type;
}
void OAIEndpointOutputConfiguration::setInstanceType(const OAIProductionVariantInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIEndpointOutputConfiguration::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIEndpointOutputConfiguration::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

qint32 OAIEndpointOutputConfiguration::getInitialInstanceCount() const {
    return m_initial_instance_count;
}
void OAIEndpointOutputConfiguration::setInitialInstanceCount(const qint32 &initial_instance_count) {
    m_initial_instance_count = initial_instance_count;
    m_initial_instance_count_isSet = true;
}

bool OAIEndpointOutputConfiguration::is_initial_instance_count_Set() const{
    return m_initial_instance_count_isSet;
}

bool OAIEndpointOutputConfiguration::is_initial_instance_count_Valid() const{
    return m_initial_instance_count_isValid;
}

OAIProductionVariantServerlessConfig OAIEndpointOutputConfiguration::getServerlessConfig() const {
    return m_serverless_config;
}
void OAIEndpointOutputConfiguration::setServerlessConfig(const OAIProductionVariantServerlessConfig &serverless_config) {
    m_serverless_config = serverless_config;
    m_serverless_config_isSet = true;
}

bool OAIEndpointOutputConfiguration::is_serverless_config_Set() const{
    return m_serverless_config_isSet;
}

bool OAIEndpointOutputConfiguration::is_serverless_config_Valid() const{
    return m_serverless_config_isValid;
}

bool OAIEndpointOutputConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointOutputConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_name_isValid && m_variant_name_isValid && true;
}

} // namespace OpenAPI
