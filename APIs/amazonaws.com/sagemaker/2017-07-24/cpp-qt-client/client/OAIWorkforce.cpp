/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkforce.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkforce::OAIWorkforce(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkforce::OAIWorkforce() {
    this->initializeModel();
}

OAIWorkforce::~OAIWorkforce() {}

void OAIWorkforce::initializeModel() {

    m_workforce_name_isSet = false;
    m_workforce_name_isValid = false;

    m_workforce_arn_isSet = false;
    m_workforce_arn_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_source_ip_config_isSet = false;
    m_source_ip_config_isValid = false;

    m_sub_domain_isSet = false;
    m_sub_domain_isValid = false;

    m_cognito_config_isSet = false;
    m_cognito_config_isValid = false;

    m_oidc_config_isSet = false;
    m_oidc_config_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_workforce_vpc_config_isSet = false;
    m_workforce_vpc_config_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;
}

void OAIWorkforce::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkforce::fromJsonObject(QJsonObject json) {

    m_workforce_name_isValid = ::OpenAPI::fromJsonValue(m_workforce_name, json[QString("WorkforceName")]);
    m_workforce_name_isSet = !json[QString("WorkforceName")].isNull() && m_workforce_name_isValid;

    m_workforce_arn_isValid = ::OpenAPI::fromJsonValue(m_workforce_arn, json[QString("WorkforceArn")]);
    m_workforce_arn_isSet = !json[QString("WorkforceArn")].isNull() && m_workforce_arn_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("LastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("LastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_source_ip_config_isValid = ::OpenAPI::fromJsonValue(m_source_ip_config, json[QString("SourceIpConfig")]);
    m_source_ip_config_isSet = !json[QString("SourceIpConfig")].isNull() && m_source_ip_config_isValid;

    m_sub_domain_isValid = ::OpenAPI::fromJsonValue(m_sub_domain, json[QString("SubDomain")]);
    m_sub_domain_isSet = !json[QString("SubDomain")].isNull() && m_sub_domain_isValid;

    m_cognito_config_isValid = ::OpenAPI::fromJsonValue(m_cognito_config, json[QString("CognitoConfig")]);
    m_cognito_config_isSet = !json[QString("CognitoConfig")].isNull() && m_cognito_config_isValid;

    m_oidc_config_isValid = ::OpenAPI::fromJsonValue(m_oidc_config, json[QString("OidcConfig")]);
    m_oidc_config_isSet = !json[QString("OidcConfig")].isNull() && m_oidc_config_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("CreateDate")]);
    m_create_date_isSet = !json[QString("CreateDate")].isNull() && m_create_date_isValid;

    m_workforce_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_workforce_vpc_config, json[QString("WorkforceVpcConfig")]);
    m_workforce_vpc_config_isSet = !json[QString("WorkforceVpcConfig")].isNull() && m_workforce_vpc_config_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;
}

QString OAIWorkforce::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkforce::asJsonObject() const {
    QJsonObject obj;
    if (m_workforce_name_isSet) {
        obj.insert(QString("WorkforceName"), ::OpenAPI::toJsonValue(m_workforce_name));
    }
    if (m_workforce_arn_isSet) {
        obj.insert(QString("WorkforceArn"), ::OpenAPI::toJsonValue(m_workforce_arn));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("LastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_source_ip_config.isSet()) {
        obj.insert(QString("SourceIpConfig"), ::OpenAPI::toJsonValue(m_source_ip_config));
    }
    if (m_sub_domain_isSet) {
        obj.insert(QString("SubDomain"), ::OpenAPI::toJsonValue(m_sub_domain));
    }
    if (m_cognito_config.isSet()) {
        obj.insert(QString("CognitoConfig"), ::OpenAPI::toJsonValue(m_cognito_config));
    }
    if (m_oidc_config.isSet()) {
        obj.insert(QString("OidcConfig"), ::OpenAPI::toJsonValue(m_oidc_config));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("CreateDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_workforce_vpc_config.isSet()) {
        obj.insert(QString("WorkforceVpcConfig"), ::OpenAPI::toJsonValue(m_workforce_vpc_config));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    return obj;
}

QString OAIWorkforce::getWorkforceName() const {
    return m_workforce_name;
}
void OAIWorkforce::setWorkforceName(const QString &workforce_name) {
    m_workforce_name = workforce_name;
    m_workforce_name_isSet = true;
}

bool OAIWorkforce::is_workforce_name_Set() const{
    return m_workforce_name_isSet;
}

bool OAIWorkforce::is_workforce_name_Valid() const{
    return m_workforce_name_isValid;
}

QString OAIWorkforce::getWorkforceArn() const {
    return m_workforce_arn;
}
void OAIWorkforce::setWorkforceArn(const QString &workforce_arn) {
    m_workforce_arn = workforce_arn;
    m_workforce_arn_isSet = true;
}

bool OAIWorkforce::is_workforce_arn_Set() const{
    return m_workforce_arn_isSet;
}

bool OAIWorkforce::is_workforce_arn_Valid() const{
    return m_workforce_arn_isValid;
}

QDateTime OAIWorkforce::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAIWorkforce::setLastUpdatedDate(const QDateTime &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAIWorkforce::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAIWorkforce::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

OAIWorkforce_SourceIpConfig OAIWorkforce::getSourceIpConfig() const {
    return m_source_ip_config;
}
void OAIWorkforce::setSourceIpConfig(const OAIWorkforce_SourceIpConfig &source_ip_config) {
    m_source_ip_config = source_ip_config;
    m_source_ip_config_isSet = true;
}

bool OAIWorkforce::is_source_ip_config_Set() const{
    return m_source_ip_config_isSet;
}

bool OAIWorkforce::is_source_ip_config_Valid() const{
    return m_source_ip_config_isValid;
}

QString OAIWorkforce::getSubDomain() const {
    return m_sub_domain;
}
void OAIWorkforce::setSubDomain(const QString &sub_domain) {
    m_sub_domain = sub_domain;
    m_sub_domain_isSet = true;
}

bool OAIWorkforce::is_sub_domain_Set() const{
    return m_sub_domain_isSet;
}

bool OAIWorkforce::is_sub_domain_Valid() const{
    return m_sub_domain_isValid;
}

OAIWorkforce_CognitoConfig OAIWorkforce::getCognitoConfig() const {
    return m_cognito_config;
}
void OAIWorkforce::setCognitoConfig(const OAIWorkforce_CognitoConfig &cognito_config) {
    m_cognito_config = cognito_config;
    m_cognito_config_isSet = true;
}

bool OAIWorkforce::is_cognito_config_Set() const{
    return m_cognito_config_isSet;
}

bool OAIWorkforce::is_cognito_config_Valid() const{
    return m_cognito_config_isValid;
}

OAIWorkforce_OidcConfig OAIWorkforce::getOidcConfig() const {
    return m_oidc_config;
}
void OAIWorkforce::setOidcConfig(const OAIWorkforce_OidcConfig &oidc_config) {
    m_oidc_config = oidc_config;
    m_oidc_config_isSet = true;
}

bool OAIWorkforce::is_oidc_config_Set() const{
    return m_oidc_config_isSet;
}

bool OAIWorkforce::is_oidc_config_Valid() const{
    return m_oidc_config_isValid;
}

QDateTime OAIWorkforce::getCreateDate() const {
    return m_create_date;
}
void OAIWorkforce::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIWorkforce::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIWorkforce::is_create_date_Valid() const{
    return m_create_date_isValid;
}

OAIWorkforce_WorkforceVpcConfig OAIWorkforce::getWorkforceVpcConfig() const {
    return m_workforce_vpc_config;
}
void OAIWorkforce::setWorkforceVpcConfig(const OAIWorkforce_WorkforceVpcConfig &workforce_vpc_config) {
    m_workforce_vpc_config = workforce_vpc_config;
    m_workforce_vpc_config_isSet = true;
}

bool OAIWorkforce::is_workforce_vpc_config_Set() const{
    return m_workforce_vpc_config_isSet;
}

bool OAIWorkforce::is_workforce_vpc_config_Valid() const{
    return m_workforce_vpc_config_isValid;
}

OAIWorkforceStatus OAIWorkforce::getStatus() const {
    return m_status;
}
void OAIWorkforce::setStatus(const OAIWorkforceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkforce::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkforce::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWorkforce::getFailureReason() const {
    return m_failure_reason;
}
void OAIWorkforce::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIWorkforce::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIWorkforce::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

bool OAIWorkforce::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workforce_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workforce_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cognito_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oidc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workforce_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkforce::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workforce_name_isValid && m_workforce_arn_isValid && true;
}

} // namespace OpenAPI
