/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFlowDefinitionRequest_HumanLoopConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFlowDefinitionRequest_HumanLoopConfig::OAICreateFlowDefinitionRequest_HumanLoopConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFlowDefinitionRequest_HumanLoopConfig::OAICreateFlowDefinitionRequest_HumanLoopConfig() {
    this->initializeModel();
}

OAICreateFlowDefinitionRequest_HumanLoopConfig::~OAICreateFlowDefinitionRequest_HumanLoopConfig() {}

void OAICreateFlowDefinitionRequest_HumanLoopConfig::initializeModel() {

    m_workteam_arn_isSet = false;
    m_workteam_arn_isValid = false;

    m_human_task_ui_arn_isSet = false;
    m_human_task_ui_arn_isValid = false;

    m_task_title_isSet = false;
    m_task_title_isValid = false;

    m_task_description_isSet = false;
    m_task_description_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_task_availability_lifetime_in_seconds_isSet = false;
    m_task_availability_lifetime_in_seconds_isValid = false;

    m_task_time_limit_in_seconds_isSet = false;
    m_task_time_limit_in_seconds_isValid = false;

    m_task_keywords_isSet = false;
    m_task_keywords_isValid = false;

    m_public_workforce_task_price_isSet = false;
    m_public_workforce_task_price_isValid = false;
}

void OAICreateFlowDefinitionRequest_HumanLoopConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFlowDefinitionRequest_HumanLoopConfig::fromJsonObject(QJsonObject json) {

    m_workteam_arn_isValid = ::OpenAPI::fromJsonValue(m_workteam_arn, json[QString("WorkteamArn")]);
    m_workteam_arn_isSet = !json[QString("WorkteamArn")].isNull() && m_workteam_arn_isValid;

    m_human_task_ui_arn_isValid = ::OpenAPI::fromJsonValue(m_human_task_ui_arn, json[QString("HumanTaskUiArn")]);
    m_human_task_ui_arn_isSet = !json[QString("HumanTaskUiArn")].isNull() && m_human_task_ui_arn_isValid;

    m_task_title_isValid = ::OpenAPI::fromJsonValue(m_task_title, json[QString("TaskTitle")]);
    m_task_title_isSet = !json[QString("TaskTitle")].isNull() && m_task_title_isValid;

    m_task_description_isValid = ::OpenAPI::fromJsonValue(m_task_description, json[QString("TaskDescription")]);
    m_task_description_isSet = !json[QString("TaskDescription")].isNull() && m_task_description_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("TaskCount")]);
    m_task_count_isSet = !json[QString("TaskCount")].isNull() && m_task_count_isValid;

    m_task_availability_lifetime_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_task_availability_lifetime_in_seconds, json[QString("TaskAvailabilityLifetimeInSeconds")]);
    m_task_availability_lifetime_in_seconds_isSet = !json[QString("TaskAvailabilityLifetimeInSeconds")].isNull() && m_task_availability_lifetime_in_seconds_isValid;

    m_task_time_limit_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_task_time_limit_in_seconds, json[QString("TaskTimeLimitInSeconds")]);
    m_task_time_limit_in_seconds_isSet = !json[QString("TaskTimeLimitInSeconds")].isNull() && m_task_time_limit_in_seconds_isValid;

    m_task_keywords_isValid = ::OpenAPI::fromJsonValue(m_task_keywords, json[QString("TaskKeywords")]);
    m_task_keywords_isSet = !json[QString("TaskKeywords")].isNull() && m_task_keywords_isValid;

    m_public_workforce_task_price_isValid = ::OpenAPI::fromJsonValue(m_public_workforce_task_price, json[QString("PublicWorkforceTaskPrice")]);
    m_public_workforce_task_price_isSet = !json[QString("PublicWorkforceTaskPrice")].isNull() && m_public_workforce_task_price_isValid;
}

QString OAICreateFlowDefinitionRequest_HumanLoopConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFlowDefinitionRequest_HumanLoopConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_workteam_arn_isSet) {
        obj.insert(QString("WorkteamArn"), ::OpenAPI::toJsonValue(m_workteam_arn));
    }
    if (m_human_task_ui_arn_isSet) {
        obj.insert(QString("HumanTaskUiArn"), ::OpenAPI::toJsonValue(m_human_task_ui_arn));
    }
    if (m_task_title_isSet) {
        obj.insert(QString("TaskTitle"), ::OpenAPI::toJsonValue(m_task_title));
    }
    if (m_task_description_isSet) {
        obj.insert(QString("TaskDescription"), ::OpenAPI::toJsonValue(m_task_description));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("TaskCount"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_task_availability_lifetime_in_seconds_isSet) {
        obj.insert(QString("TaskAvailabilityLifetimeInSeconds"), ::OpenAPI::toJsonValue(m_task_availability_lifetime_in_seconds));
    }
    if (m_task_time_limit_in_seconds_isSet) {
        obj.insert(QString("TaskTimeLimitInSeconds"), ::OpenAPI::toJsonValue(m_task_time_limit_in_seconds));
    }
    if (m_task_keywords.isSet()) {
        obj.insert(QString("TaskKeywords"), ::OpenAPI::toJsonValue(m_task_keywords));
    }
    if (m_public_workforce_task_price.isSet()) {
        obj.insert(QString("PublicWorkforceTaskPrice"), ::OpenAPI::toJsonValue(m_public_workforce_task_price));
    }
    return obj;
}

QString OAICreateFlowDefinitionRequest_HumanLoopConfig::getWorkteamArn() const {
    return m_workteam_arn;
}
void OAICreateFlowDefinitionRequest_HumanLoopConfig::setWorkteamArn(const QString &workteam_arn) {
    m_workteam_arn = workteam_arn;
    m_workteam_arn_isSet = true;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_workteam_arn_Set() const{
    return m_workteam_arn_isSet;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_workteam_arn_Valid() const{
    return m_workteam_arn_isValid;
}

QString OAICreateFlowDefinitionRequest_HumanLoopConfig::getHumanTaskUiArn() const {
    return m_human_task_ui_arn;
}
void OAICreateFlowDefinitionRequest_HumanLoopConfig::setHumanTaskUiArn(const QString &human_task_ui_arn) {
    m_human_task_ui_arn = human_task_ui_arn;
    m_human_task_ui_arn_isSet = true;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_human_task_ui_arn_Set() const{
    return m_human_task_ui_arn_isSet;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_human_task_ui_arn_Valid() const{
    return m_human_task_ui_arn_isValid;
}

QString OAICreateFlowDefinitionRequest_HumanLoopConfig::getTaskTitle() const {
    return m_task_title;
}
void OAICreateFlowDefinitionRequest_HumanLoopConfig::setTaskTitle(const QString &task_title) {
    m_task_title = task_title;
    m_task_title_isSet = true;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_title_Set() const{
    return m_task_title_isSet;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_title_Valid() const{
    return m_task_title_isValid;
}

QString OAICreateFlowDefinitionRequest_HumanLoopConfig::getTaskDescription() const {
    return m_task_description;
}
void OAICreateFlowDefinitionRequest_HumanLoopConfig::setTaskDescription(const QString &task_description) {
    m_task_description = task_description;
    m_task_description_isSet = true;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_description_Set() const{
    return m_task_description_isSet;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_description_Valid() const{
    return m_task_description_isValid;
}

qint32 OAICreateFlowDefinitionRequest_HumanLoopConfig::getTaskCount() const {
    return m_task_count;
}
void OAICreateFlowDefinitionRequest_HumanLoopConfig::setTaskCount(const qint32 &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_count_Valid() const{
    return m_task_count_isValid;
}

qint32 OAICreateFlowDefinitionRequest_HumanLoopConfig::getTaskAvailabilityLifetimeInSeconds() const {
    return m_task_availability_lifetime_in_seconds;
}
void OAICreateFlowDefinitionRequest_HumanLoopConfig::setTaskAvailabilityLifetimeInSeconds(const qint32 &task_availability_lifetime_in_seconds) {
    m_task_availability_lifetime_in_seconds = task_availability_lifetime_in_seconds;
    m_task_availability_lifetime_in_seconds_isSet = true;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_availability_lifetime_in_seconds_Set() const{
    return m_task_availability_lifetime_in_seconds_isSet;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_availability_lifetime_in_seconds_Valid() const{
    return m_task_availability_lifetime_in_seconds_isValid;
}

qint32 OAICreateFlowDefinitionRequest_HumanLoopConfig::getTaskTimeLimitInSeconds() const {
    return m_task_time_limit_in_seconds;
}
void OAICreateFlowDefinitionRequest_HumanLoopConfig::setTaskTimeLimitInSeconds(const qint32 &task_time_limit_in_seconds) {
    m_task_time_limit_in_seconds = task_time_limit_in_seconds;
    m_task_time_limit_in_seconds_isSet = true;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_time_limit_in_seconds_Set() const{
    return m_task_time_limit_in_seconds_isSet;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_time_limit_in_seconds_Valid() const{
    return m_task_time_limit_in_seconds_isValid;
}

QList OAICreateFlowDefinitionRequest_HumanLoopConfig::getTaskKeywords() const {
    return m_task_keywords;
}
void OAICreateFlowDefinitionRequest_HumanLoopConfig::setTaskKeywords(const QList &task_keywords) {
    m_task_keywords = task_keywords;
    m_task_keywords_isSet = true;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_keywords_Set() const{
    return m_task_keywords_isSet;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_task_keywords_Valid() const{
    return m_task_keywords_isValid;
}

OAIPublicWorkforceTaskPrice OAICreateFlowDefinitionRequest_HumanLoopConfig::getPublicWorkforceTaskPrice() const {
    return m_public_workforce_task_price;
}
void OAICreateFlowDefinitionRequest_HumanLoopConfig::setPublicWorkforceTaskPrice(const OAIPublicWorkforceTaskPrice &public_workforce_task_price) {
    m_public_workforce_task_price = public_workforce_task_price;
    m_public_workforce_task_price_isSet = true;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_public_workforce_task_price_Set() const{
    return m_public_workforce_task_price_isSet;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::is_public_workforce_task_price_Valid() const{
    return m_public_workforce_task_price_isValid;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workteam_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_task_ui_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_availability_lifetime_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_time_limit_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_keywords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_workforce_task_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFlowDefinitionRequest_HumanLoopConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workteam_arn_isValid && m_human_task_ui_arn_isValid && m_task_title_isValid && m_task_description_isValid && m_task_count_isValid && true;
}

} // namespace OpenAPI
