/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessingInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessingInput::OAIProcessingInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessingInput::OAIProcessingInput() {
    this->initializeModel();
}

OAIProcessingInput::~OAIProcessingInput() {}

void OAIProcessingInput::initializeModel() {

    m_input_name_isSet = false;
    m_input_name_isValid = false;

    m_app_managed_isSet = false;
    m_app_managed_isValid = false;

    m_s3_input_isSet = false;
    m_s3_input_isValid = false;

    m_dataset_definition_isSet = false;
    m_dataset_definition_isValid = false;
}

void OAIProcessingInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessingInput::fromJsonObject(QJsonObject json) {

    m_input_name_isValid = ::OpenAPI::fromJsonValue(m_input_name, json[QString("InputName")]);
    m_input_name_isSet = !json[QString("InputName")].isNull() && m_input_name_isValid;

    m_app_managed_isValid = ::OpenAPI::fromJsonValue(m_app_managed, json[QString("AppManaged")]);
    m_app_managed_isSet = !json[QString("AppManaged")].isNull() && m_app_managed_isValid;

    m_s3_input_isValid = ::OpenAPI::fromJsonValue(m_s3_input, json[QString("S3Input")]);
    m_s3_input_isSet = !json[QString("S3Input")].isNull() && m_s3_input_isValid;

    m_dataset_definition_isValid = ::OpenAPI::fromJsonValue(m_dataset_definition, json[QString("DatasetDefinition")]);
    m_dataset_definition_isSet = !json[QString("DatasetDefinition")].isNull() && m_dataset_definition_isValid;
}

QString OAIProcessingInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessingInput::asJsonObject() const {
    QJsonObject obj;
    if (m_input_name_isSet) {
        obj.insert(QString("InputName"), ::OpenAPI::toJsonValue(m_input_name));
    }
    if (m_app_managed_isSet) {
        obj.insert(QString("AppManaged"), ::OpenAPI::toJsonValue(m_app_managed));
    }
    if (m_s3_input.isSet()) {
        obj.insert(QString("S3Input"), ::OpenAPI::toJsonValue(m_s3_input));
    }
    if (m_dataset_definition.isSet()) {
        obj.insert(QString("DatasetDefinition"), ::OpenAPI::toJsonValue(m_dataset_definition));
    }
    return obj;
}

QString OAIProcessingInput::getInputName() const {
    return m_input_name;
}
void OAIProcessingInput::setInputName(const QString &input_name) {
    m_input_name = input_name;
    m_input_name_isSet = true;
}

bool OAIProcessingInput::is_input_name_Set() const{
    return m_input_name_isSet;
}

bool OAIProcessingInput::is_input_name_Valid() const{
    return m_input_name_isValid;
}

bool OAIProcessingInput::getAppManaged() const {
    return m_app_managed;
}
void OAIProcessingInput::setAppManaged(const bool &app_managed) {
    m_app_managed = app_managed;
    m_app_managed_isSet = true;
}

bool OAIProcessingInput::is_app_managed_Set() const{
    return m_app_managed_isSet;
}

bool OAIProcessingInput::is_app_managed_Valid() const{
    return m_app_managed_isValid;
}

OAIProcessingInput_S3Input OAIProcessingInput::getS3Input() const {
    return m_s3_input;
}
void OAIProcessingInput::setS3Input(const OAIProcessingInput_S3Input &s3_input) {
    m_s3_input = s3_input;
    m_s3_input_isSet = true;
}

bool OAIProcessingInput::is_s3_input_Set() const{
    return m_s3_input_isSet;
}

bool OAIProcessingInput::is_s3_input_Valid() const{
    return m_s3_input_isValid;
}

OAIProcessingInput_DatasetDefinition OAIProcessingInput::getDatasetDefinition() const {
    return m_dataset_definition;
}
void OAIProcessingInput::setDatasetDefinition(const OAIProcessingInput_DatasetDefinition &dataset_definition) {
    m_dataset_definition = dataset_definition;
    m_dataset_definition_isSet = true;
}

bool OAIProcessingInput::is_dataset_definition_Set() const{
    return m_dataset_definition_isSet;
}

bool OAIProcessingInput::is_dataset_definition_Valid() const{
    return m_dataset_definition_isValid;
}

bool OAIProcessingInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessingInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_name_isValid && true;
}

} // namespace OpenAPI
