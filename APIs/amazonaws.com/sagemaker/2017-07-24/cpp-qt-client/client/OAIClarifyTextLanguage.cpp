/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClarifyTextLanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClarifyTextLanguage::OAIClarifyTextLanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClarifyTextLanguage::OAIClarifyTextLanguage() {
    this->initializeModel();
}

OAIClarifyTextLanguage::~OAIClarifyTextLanguage() {}

void OAIClarifyTextLanguage::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIClarifyTextLanguage::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIClarifyTextLanguage::fromJson(QString jsonString) {
    
    if ( jsonString.compare("af", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::AF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sq", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::SQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ar", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::AR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::HY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::EU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::BN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bg", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::BG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ca", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::CA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::ZH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::HR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cs", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::CS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("da", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::DA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nl", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::NL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::EN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("et", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::ET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fi", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::FI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("el", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::EL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::GU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("he", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::HE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hi", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::HI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::HU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("is", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::IS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ga", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::GA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("it", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("kn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::KN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ky", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::KY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lv", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::LV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::LT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lb", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::LB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mk", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::MK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::ML;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::MR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ne", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::NE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nb", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::NB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::FA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pl", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::PL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::PT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ro", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::RO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ru", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::RU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::SA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::SR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::TN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("si", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::SI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sk", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::SK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sl", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::SL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sv", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::SV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tl", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::TL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ta", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::TA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::TT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("te", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::TE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::TR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uk", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::UK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ur", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::UR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("yo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::YO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lij", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::LIJ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("xx", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClarifyTextLanguage::XX;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIClarifyTextLanguage::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIClarifyTextLanguage::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIClarifyTextLanguage::AF:
            val = "af";
            break;
        case eOAIClarifyTextLanguage::SQ:
            val = "sq";
            break;
        case eOAIClarifyTextLanguage::AR:
            val = "ar";
            break;
        case eOAIClarifyTextLanguage::HY:
            val = "hy";
            break;
        case eOAIClarifyTextLanguage::EU:
            val = "eu";
            break;
        case eOAIClarifyTextLanguage::BN:
            val = "bn";
            break;
        case eOAIClarifyTextLanguage::BG:
            val = "bg";
            break;
        case eOAIClarifyTextLanguage::CA:
            val = "ca";
            break;
        case eOAIClarifyTextLanguage::ZH:
            val = "zh";
            break;
        case eOAIClarifyTextLanguage::HR:
            val = "hr";
            break;
        case eOAIClarifyTextLanguage::CS:
            val = "cs";
            break;
        case eOAIClarifyTextLanguage::DA:
            val = "da";
            break;
        case eOAIClarifyTextLanguage::NL:
            val = "nl";
            break;
        case eOAIClarifyTextLanguage::EN:
            val = "en";
            break;
        case eOAIClarifyTextLanguage::ET:
            val = "et";
            break;
        case eOAIClarifyTextLanguage::FI:
            val = "fi";
            break;
        case eOAIClarifyTextLanguage::FR:
            val = "fr";
            break;
        case eOAIClarifyTextLanguage::DE:
            val = "de";
            break;
        case eOAIClarifyTextLanguage::EL:
            val = "el";
            break;
        case eOAIClarifyTextLanguage::GU:
            val = "gu";
            break;
        case eOAIClarifyTextLanguage::HE:
            val = "he";
            break;
        case eOAIClarifyTextLanguage::HI:
            val = "hi";
            break;
        case eOAIClarifyTextLanguage::HU:
            val = "hu";
            break;
        case eOAIClarifyTextLanguage::IS:
            val = "is";
            break;
        case eOAIClarifyTextLanguage::ID:
            val = "id";
            break;
        case eOAIClarifyTextLanguage::GA:
            val = "ga";
            break;
        case eOAIClarifyTextLanguage::IT:
            val = "it";
            break;
        case eOAIClarifyTextLanguage::KN:
            val = "kn";
            break;
        case eOAIClarifyTextLanguage::KY:
            val = "ky";
            break;
        case eOAIClarifyTextLanguage::LV:
            val = "lv";
            break;
        case eOAIClarifyTextLanguage::LT:
            val = "lt";
            break;
        case eOAIClarifyTextLanguage::LB:
            val = "lb";
            break;
        case eOAIClarifyTextLanguage::MK:
            val = "mk";
            break;
        case eOAIClarifyTextLanguage::ML:
            val = "ml";
            break;
        case eOAIClarifyTextLanguage::MR:
            val = "mr";
            break;
        case eOAIClarifyTextLanguage::NE:
            val = "ne";
            break;
        case eOAIClarifyTextLanguage::NB:
            val = "nb";
            break;
        case eOAIClarifyTextLanguage::FA:
            val = "fa";
            break;
        case eOAIClarifyTextLanguage::PL:
            val = "pl";
            break;
        case eOAIClarifyTextLanguage::PT:
            val = "pt";
            break;
        case eOAIClarifyTextLanguage::RO:
            val = "ro";
            break;
        case eOAIClarifyTextLanguage::RU:
            val = "ru";
            break;
        case eOAIClarifyTextLanguage::SA:
            val = "sa";
            break;
        case eOAIClarifyTextLanguage::SR:
            val = "sr";
            break;
        case eOAIClarifyTextLanguage::TN:
            val = "tn";
            break;
        case eOAIClarifyTextLanguage::SI:
            val = "si";
            break;
        case eOAIClarifyTextLanguage::SK:
            val = "sk";
            break;
        case eOAIClarifyTextLanguage::SL:
            val = "sl";
            break;
        case eOAIClarifyTextLanguage::ES:
            val = "es";
            break;
        case eOAIClarifyTextLanguage::SV:
            val = "sv";
            break;
        case eOAIClarifyTextLanguage::TL:
            val = "tl";
            break;
        case eOAIClarifyTextLanguage::TA:
            val = "ta";
            break;
        case eOAIClarifyTextLanguage::TT:
            val = "tt";
            break;
        case eOAIClarifyTextLanguage::TE:
            val = "te";
            break;
        case eOAIClarifyTextLanguage::TR:
            val = "tr";
            break;
        case eOAIClarifyTextLanguage::UK:
            val = "uk";
            break;
        case eOAIClarifyTextLanguage::UR:
            val = "ur";
            break;
        case eOAIClarifyTextLanguage::YO:
            val = "yo";
            break;
        case eOAIClarifyTextLanguage::LIJ:
            val = "lij";
            break;
        case eOAIClarifyTextLanguage::XX:
            val = "xx";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIClarifyTextLanguage::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIClarifyTextLanguage::eOAIClarifyTextLanguage OAIClarifyTextLanguage::getValue() const {
    return m_value;
}

void OAIClarifyTextLanguage::setValue(const OAIClarifyTextLanguage::eOAIClarifyTextLanguage& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIClarifyTextLanguage::isSet() const {
    
    return m_value_isSet;
}

bool OAIClarifyTextLanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
