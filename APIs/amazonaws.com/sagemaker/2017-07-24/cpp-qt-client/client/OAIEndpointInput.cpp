/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointInput::OAIEndpointInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointInput::OAIEndpointInput() {
    this->initializeModel();
}

OAIEndpointInput::~OAIEndpointInput() {}

void OAIEndpointInput::initializeModel() {

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_local_path_isSet = false;
    m_local_path_isValid = false;

    m_s3_input_mode_isSet = false;
    m_s3_input_mode_isValid = false;

    m_s3_data_distribution_type_isSet = false;
    m_s3_data_distribution_type_isValid = false;

    m_features_attribute_isSet = false;
    m_features_attribute_isValid = false;

    m_inference_attribute_isSet = false;
    m_inference_attribute_isValid = false;

    m_probability_attribute_isSet = false;
    m_probability_attribute_isValid = false;

    m_probability_threshold_attribute_isSet = false;
    m_probability_threshold_attribute_isValid = false;

    m_start_time_offset_isSet = false;
    m_start_time_offset_isValid = false;

    m_end_time_offset_isSet = false;
    m_end_time_offset_isValid = false;
}

void OAIEndpointInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointInput::fromJsonObject(QJsonObject json) {

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("EndpointName")]);
    m_endpoint_name_isSet = !json[QString("EndpointName")].isNull() && m_endpoint_name_isValid;

    m_local_path_isValid = ::OpenAPI::fromJsonValue(m_local_path, json[QString("LocalPath")]);
    m_local_path_isSet = !json[QString("LocalPath")].isNull() && m_local_path_isValid;

    m_s3_input_mode_isValid = ::OpenAPI::fromJsonValue(m_s3_input_mode, json[QString("S3InputMode")]);
    m_s3_input_mode_isSet = !json[QString("S3InputMode")].isNull() && m_s3_input_mode_isValid;

    m_s3_data_distribution_type_isValid = ::OpenAPI::fromJsonValue(m_s3_data_distribution_type, json[QString("S3DataDistributionType")]);
    m_s3_data_distribution_type_isSet = !json[QString("S3DataDistributionType")].isNull() && m_s3_data_distribution_type_isValid;

    m_features_attribute_isValid = ::OpenAPI::fromJsonValue(m_features_attribute, json[QString("FeaturesAttribute")]);
    m_features_attribute_isSet = !json[QString("FeaturesAttribute")].isNull() && m_features_attribute_isValid;

    m_inference_attribute_isValid = ::OpenAPI::fromJsonValue(m_inference_attribute, json[QString("InferenceAttribute")]);
    m_inference_attribute_isSet = !json[QString("InferenceAttribute")].isNull() && m_inference_attribute_isValid;

    m_probability_attribute_isValid = ::OpenAPI::fromJsonValue(m_probability_attribute, json[QString("ProbabilityAttribute")]);
    m_probability_attribute_isSet = !json[QString("ProbabilityAttribute")].isNull() && m_probability_attribute_isValid;

    m_probability_threshold_attribute_isValid = ::OpenAPI::fromJsonValue(m_probability_threshold_attribute, json[QString("ProbabilityThresholdAttribute")]);
    m_probability_threshold_attribute_isSet = !json[QString("ProbabilityThresholdAttribute")].isNull() && m_probability_threshold_attribute_isValid;

    m_start_time_offset_isValid = ::OpenAPI::fromJsonValue(m_start_time_offset, json[QString("StartTimeOffset")]);
    m_start_time_offset_isSet = !json[QString("StartTimeOffset")].isNull() && m_start_time_offset_isValid;

    m_end_time_offset_isValid = ::OpenAPI::fromJsonValue(m_end_time_offset, json[QString("EndTimeOffset")]);
    m_end_time_offset_isSet = !json[QString("EndTimeOffset")].isNull() && m_end_time_offset_isValid;
}

QString OAIEndpointInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointInput::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_name_isSet) {
        obj.insert(QString("EndpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_local_path_isSet) {
        obj.insert(QString("LocalPath"), ::OpenAPI::toJsonValue(m_local_path));
    }
    if (m_s3_input_mode.isSet()) {
        obj.insert(QString("S3InputMode"), ::OpenAPI::toJsonValue(m_s3_input_mode));
    }
    if (m_s3_data_distribution_type.isSet()) {
        obj.insert(QString("S3DataDistributionType"), ::OpenAPI::toJsonValue(m_s3_data_distribution_type));
    }
    if (m_features_attribute_isSet) {
        obj.insert(QString("FeaturesAttribute"), ::OpenAPI::toJsonValue(m_features_attribute));
    }
    if (m_inference_attribute_isSet) {
        obj.insert(QString("InferenceAttribute"), ::OpenAPI::toJsonValue(m_inference_attribute));
    }
    if (m_probability_attribute_isSet) {
        obj.insert(QString("ProbabilityAttribute"), ::OpenAPI::toJsonValue(m_probability_attribute));
    }
    if (m_probability_threshold_attribute_isSet) {
        obj.insert(QString("ProbabilityThresholdAttribute"), ::OpenAPI::toJsonValue(m_probability_threshold_attribute));
    }
    if (m_start_time_offset_isSet) {
        obj.insert(QString("StartTimeOffset"), ::OpenAPI::toJsonValue(m_start_time_offset));
    }
    if (m_end_time_offset_isSet) {
        obj.insert(QString("EndTimeOffset"), ::OpenAPI::toJsonValue(m_end_time_offset));
    }
    return obj;
}

QString OAIEndpointInput::getEndpointName() const {
    return m_endpoint_name;
}
void OAIEndpointInput::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIEndpointInput::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIEndpointInput::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

QString OAIEndpointInput::getLocalPath() const {
    return m_local_path;
}
void OAIEndpointInput::setLocalPath(const QString &local_path) {
    m_local_path = local_path;
    m_local_path_isSet = true;
}

bool OAIEndpointInput::is_local_path_Set() const{
    return m_local_path_isSet;
}

bool OAIEndpointInput::is_local_path_Valid() const{
    return m_local_path_isValid;
}

OAIProcessingS3InputMode OAIEndpointInput::getS3InputMode() const {
    return m_s3_input_mode;
}
void OAIEndpointInput::setS3InputMode(const OAIProcessingS3InputMode &s3_input_mode) {
    m_s3_input_mode = s3_input_mode;
    m_s3_input_mode_isSet = true;
}

bool OAIEndpointInput::is_s3_input_mode_Set() const{
    return m_s3_input_mode_isSet;
}

bool OAIEndpointInput::is_s3_input_mode_Valid() const{
    return m_s3_input_mode_isValid;
}

OAIProcessingS3DataDistributionType OAIEndpointInput::getS3DataDistributionType() const {
    return m_s3_data_distribution_type;
}
void OAIEndpointInput::setS3DataDistributionType(const OAIProcessingS3DataDistributionType &s3_data_distribution_type) {
    m_s3_data_distribution_type = s3_data_distribution_type;
    m_s3_data_distribution_type_isSet = true;
}

bool OAIEndpointInput::is_s3_data_distribution_type_Set() const{
    return m_s3_data_distribution_type_isSet;
}

bool OAIEndpointInput::is_s3_data_distribution_type_Valid() const{
    return m_s3_data_distribution_type_isValid;
}

QString OAIEndpointInput::getFeaturesAttribute() const {
    return m_features_attribute;
}
void OAIEndpointInput::setFeaturesAttribute(const QString &features_attribute) {
    m_features_attribute = features_attribute;
    m_features_attribute_isSet = true;
}

bool OAIEndpointInput::is_features_attribute_Set() const{
    return m_features_attribute_isSet;
}

bool OAIEndpointInput::is_features_attribute_Valid() const{
    return m_features_attribute_isValid;
}

QString OAIEndpointInput::getInferenceAttribute() const {
    return m_inference_attribute;
}
void OAIEndpointInput::setInferenceAttribute(const QString &inference_attribute) {
    m_inference_attribute = inference_attribute;
    m_inference_attribute_isSet = true;
}

bool OAIEndpointInput::is_inference_attribute_Set() const{
    return m_inference_attribute_isSet;
}

bool OAIEndpointInput::is_inference_attribute_Valid() const{
    return m_inference_attribute_isValid;
}

QString OAIEndpointInput::getProbabilityAttribute() const {
    return m_probability_attribute;
}
void OAIEndpointInput::setProbabilityAttribute(const QString &probability_attribute) {
    m_probability_attribute = probability_attribute;
    m_probability_attribute_isSet = true;
}

bool OAIEndpointInput::is_probability_attribute_Set() const{
    return m_probability_attribute_isSet;
}

bool OAIEndpointInput::is_probability_attribute_Valid() const{
    return m_probability_attribute_isValid;
}

double OAIEndpointInput::getProbabilityThresholdAttribute() const {
    return m_probability_threshold_attribute;
}
void OAIEndpointInput::setProbabilityThresholdAttribute(const double &probability_threshold_attribute) {
    m_probability_threshold_attribute = probability_threshold_attribute;
    m_probability_threshold_attribute_isSet = true;
}

bool OAIEndpointInput::is_probability_threshold_attribute_Set() const{
    return m_probability_threshold_attribute_isSet;
}

bool OAIEndpointInput::is_probability_threshold_attribute_Valid() const{
    return m_probability_threshold_attribute_isValid;
}

QString OAIEndpointInput::getStartTimeOffset() const {
    return m_start_time_offset;
}
void OAIEndpointInput::setStartTimeOffset(const QString &start_time_offset) {
    m_start_time_offset = start_time_offset;
    m_start_time_offset_isSet = true;
}

bool OAIEndpointInput::is_start_time_offset_Set() const{
    return m_start_time_offset_isSet;
}

bool OAIEndpointInput::is_start_time_offset_Valid() const{
    return m_start_time_offset_isValid;
}

QString OAIEndpointInput::getEndTimeOffset() const {
    return m_end_time_offset;
}
void OAIEndpointInput::setEndTimeOffset(const QString &end_time_offset) {
    m_end_time_offset = end_time_offset;
    m_end_time_offset_isSet = true;
}

bool OAIEndpointInput::is_end_time_offset_Set() const{
    return m_end_time_offset_isSet;
}

bool OAIEndpointInput::is_end_time_offset_Valid() const{
    return m_end_time_offset_isValid;
}

bool OAIEndpointInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_input_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_data_distribution_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_features_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_threshold_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_name_isValid && m_local_path_isValid && true;
}

} // namespace OpenAPI
