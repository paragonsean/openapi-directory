/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateTrialComponentRequest.h
 *
 * 
 */

#ifndef OAICreateTrialComponentRequest_H
#define OAICreateTrialComponentRequest_H

#include <QJsonObject>

#include "OAICreateTrialComponentRequest_Status.h"
#include "OAIMetadataProperties.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateTrialComponentRequest_Status;
class OAIMetadataProperties;

class OAICreateTrialComponentRequest : public OAIObject {
public:
    OAICreateTrialComponentRequest();
    OAICreateTrialComponentRequest(QString json);
    ~OAICreateTrialComponentRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTrialComponentName() const;
    void setTrialComponentName(const QString &trial_component_name);
    bool is_trial_component_name_Set() const;
    bool is_trial_component_name_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAICreateTrialComponentRequest_Status getStatus() const;
    void setStatus(const OAICreateTrialComponentRequest_Status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QMap getParameters() const;
    void setParameters(const QMap &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QMap getInputArtifacts() const;
    void setInputArtifacts(const QMap &input_artifacts);
    bool is_input_artifacts_Set() const;
    bool is_input_artifacts_Valid() const;

    QMap getOutputArtifacts() const;
    void setOutputArtifacts(const QMap &output_artifacts);
    bool is_output_artifacts_Set() const;
    bool is_output_artifacts_Valid() const;

    OAIMetadataProperties getMetadataProperties() const;
    void setMetadataProperties(const OAIMetadataProperties &metadata_properties);
    bool is_metadata_properties_Set() const;
    bool is_metadata_properties_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_trial_component_name;
    bool m_trial_component_name_isSet;
    bool m_trial_component_name_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAICreateTrialComponentRequest_Status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QMap m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QMap m_input_artifacts;
    bool m_input_artifacts_isSet;
    bool m_input_artifacts_isValid;

    QMap m_output_artifacts;
    bool m_output_artifacts_isSet;
    bool m_output_artifacts_isValid;

    OAIMetadataProperties m_metadata_properties;
    bool m_metadata_properties_isSet;
    bool m_metadata_properties_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateTrialComponentRequest)

#endif // OAICreateTrialComponentRequest_H
