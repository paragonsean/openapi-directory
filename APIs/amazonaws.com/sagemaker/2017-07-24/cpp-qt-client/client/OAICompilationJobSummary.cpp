/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompilationJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompilationJobSummary::OAICompilationJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompilationJobSummary::OAICompilationJobSummary() {
    this->initializeModel();
}

OAICompilationJobSummary::~OAICompilationJobSummary() {}

void OAICompilationJobSummary::initializeModel() {

    m_compilation_job_name_isSet = false;
    m_compilation_job_name_isValid = false;

    m_compilation_job_arn_isSet = false;
    m_compilation_job_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_compilation_start_time_isSet = false;
    m_compilation_start_time_isValid = false;

    m_compilation_end_time_isSet = false;
    m_compilation_end_time_isValid = false;

    m_compilation_target_device_isSet = false;
    m_compilation_target_device_isValid = false;

    m_compilation_target_platform_os_isSet = false;
    m_compilation_target_platform_os_isValid = false;

    m_compilation_target_platform_arch_isSet = false;
    m_compilation_target_platform_arch_isValid = false;

    m_compilation_target_platform_accelerator_isSet = false;
    m_compilation_target_platform_accelerator_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_compilation_job_status_isSet = false;
    m_compilation_job_status_isValid = false;
}

void OAICompilationJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompilationJobSummary::fromJsonObject(QJsonObject json) {

    m_compilation_job_name_isValid = ::OpenAPI::fromJsonValue(m_compilation_job_name, json[QString("CompilationJobName")]);
    m_compilation_job_name_isSet = !json[QString("CompilationJobName")].isNull() && m_compilation_job_name_isValid;

    m_compilation_job_arn_isValid = ::OpenAPI::fromJsonValue(m_compilation_job_arn, json[QString("CompilationJobArn")]);
    m_compilation_job_arn_isSet = !json[QString("CompilationJobArn")].isNull() && m_compilation_job_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_compilation_start_time_isValid = ::OpenAPI::fromJsonValue(m_compilation_start_time, json[QString("CompilationStartTime")]);
    m_compilation_start_time_isSet = !json[QString("CompilationStartTime")].isNull() && m_compilation_start_time_isValid;

    m_compilation_end_time_isValid = ::OpenAPI::fromJsonValue(m_compilation_end_time, json[QString("CompilationEndTime")]);
    m_compilation_end_time_isSet = !json[QString("CompilationEndTime")].isNull() && m_compilation_end_time_isValid;

    m_compilation_target_device_isValid = ::OpenAPI::fromJsonValue(m_compilation_target_device, json[QString("CompilationTargetDevice")]);
    m_compilation_target_device_isSet = !json[QString("CompilationTargetDevice")].isNull() && m_compilation_target_device_isValid;

    m_compilation_target_platform_os_isValid = ::OpenAPI::fromJsonValue(m_compilation_target_platform_os, json[QString("CompilationTargetPlatformOs")]);
    m_compilation_target_platform_os_isSet = !json[QString("CompilationTargetPlatformOs")].isNull() && m_compilation_target_platform_os_isValid;

    m_compilation_target_platform_arch_isValid = ::OpenAPI::fromJsonValue(m_compilation_target_platform_arch, json[QString("CompilationTargetPlatformArch")]);
    m_compilation_target_platform_arch_isSet = !json[QString("CompilationTargetPlatformArch")].isNull() && m_compilation_target_platform_arch_isValid;

    m_compilation_target_platform_accelerator_isValid = ::OpenAPI::fromJsonValue(m_compilation_target_platform_accelerator, json[QString("CompilationTargetPlatformAccelerator")]);
    m_compilation_target_platform_accelerator_isSet = !json[QString("CompilationTargetPlatformAccelerator")].isNull() && m_compilation_target_platform_accelerator_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_compilation_job_status_isValid = ::OpenAPI::fromJsonValue(m_compilation_job_status, json[QString("CompilationJobStatus")]);
    m_compilation_job_status_isSet = !json[QString("CompilationJobStatus")].isNull() && m_compilation_job_status_isValid;
}

QString OAICompilationJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompilationJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_compilation_job_name_isSet) {
        obj.insert(QString("CompilationJobName"), ::OpenAPI::toJsonValue(m_compilation_job_name));
    }
    if (m_compilation_job_arn_isSet) {
        obj.insert(QString("CompilationJobArn"), ::OpenAPI::toJsonValue(m_compilation_job_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_compilation_start_time_isSet) {
        obj.insert(QString("CompilationStartTime"), ::OpenAPI::toJsonValue(m_compilation_start_time));
    }
    if (m_compilation_end_time_isSet) {
        obj.insert(QString("CompilationEndTime"), ::OpenAPI::toJsonValue(m_compilation_end_time));
    }
    if (m_compilation_target_device.isSet()) {
        obj.insert(QString("CompilationTargetDevice"), ::OpenAPI::toJsonValue(m_compilation_target_device));
    }
    if (m_compilation_target_platform_os.isSet()) {
        obj.insert(QString("CompilationTargetPlatformOs"), ::OpenAPI::toJsonValue(m_compilation_target_platform_os));
    }
    if (m_compilation_target_platform_arch.isSet()) {
        obj.insert(QString("CompilationTargetPlatformArch"), ::OpenAPI::toJsonValue(m_compilation_target_platform_arch));
    }
    if (m_compilation_target_platform_accelerator.isSet()) {
        obj.insert(QString("CompilationTargetPlatformAccelerator"), ::OpenAPI::toJsonValue(m_compilation_target_platform_accelerator));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_compilation_job_status.isSet()) {
        obj.insert(QString("CompilationJobStatus"), ::OpenAPI::toJsonValue(m_compilation_job_status));
    }
    return obj;
}

QString OAICompilationJobSummary::getCompilationJobName() const {
    return m_compilation_job_name;
}
void OAICompilationJobSummary::setCompilationJobName(const QString &compilation_job_name) {
    m_compilation_job_name = compilation_job_name;
    m_compilation_job_name_isSet = true;
}

bool OAICompilationJobSummary::is_compilation_job_name_Set() const{
    return m_compilation_job_name_isSet;
}

bool OAICompilationJobSummary::is_compilation_job_name_Valid() const{
    return m_compilation_job_name_isValid;
}

QString OAICompilationJobSummary::getCompilationJobArn() const {
    return m_compilation_job_arn;
}
void OAICompilationJobSummary::setCompilationJobArn(const QString &compilation_job_arn) {
    m_compilation_job_arn = compilation_job_arn;
    m_compilation_job_arn_isSet = true;
}

bool OAICompilationJobSummary::is_compilation_job_arn_Set() const{
    return m_compilation_job_arn_isSet;
}

bool OAICompilationJobSummary::is_compilation_job_arn_Valid() const{
    return m_compilation_job_arn_isValid;
}

QDateTime OAICompilationJobSummary::getCreationTime() const {
    return m_creation_time;
}
void OAICompilationJobSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICompilationJobSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICompilationJobSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAICompilationJobSummary::getCompilationStartTime() const {
    return m_compilation_start_time;
}
void OAICompilationJobSummary::setCompilationStartTime(const QDateTime &compilation_start_time) {
    m_compilation_start_time = compilation_start_time;
    m_compilation_start_time_isSet = true;
}

bool OAICompilationJobSummary::is_compilation_start_time_Set() const{
    return m_compilation_start_time_isSet;
}

bool OAICompilationJobSummary::is_compilation_start_time_Valid() const{
    return m_compilation_start_time_isValid;
}

QDateTime OAICompilationJobSummary::getCompilationEndTime() const {
    return m_compilation_end_time;
}
void OAICompilationJobSummary::setCompilationEndTime(const QDateTime &compilation_end_time) {
    m_compilation_end_time = compilation_end_time;
    m_compilation_end_time_isSet = true;
}

bool OAICompilationJobSummary::is_compilation_end_time_Set() const{
    return m_compilation_end_time_isSet;
}

bool OAICompilationJobSummary::is_compilation_end_time_Valid() const{
    return m_compilation_end_time_isValid;
}

OAITargetDevice OAICompilationJobSummary::getCompilationTargetDevice() const {
    return m_compilation_target_device;
}
void OAICompilationJobSummary::setCompilationTargetDevice(const OAITargetDevice &compilation_target_device) {
    m_compilation_target_device = compilation_target_device;
    m_compilation_target_device_isSet = true;
}

bool OAICompilationJobSummary::is_compilation_target_device_Set() const{
    return m_compilation_target_device_isSet;
}

bool OAICompilationJobSummary::is_compilation_target_device_Valid() const{
    return m_compilation_target_device_isValid;
}

OAITargetPlatformOs OAICompilationJobSummary::getCompilationTargetPlatformOs() const {
    return m_compilation_target_platform_os;
}
void OAICompilationJobSummary::setCompilationTargetPlatformOs(const OAITargetPlatformOs &compilation_target_platform_os) {
    m_compilation_target_platform_os = compilation_target_platform_os;
    m_compilation_target_platform_os_isSet = true;
}

bool OAICompilationJobSummary::is_compilation_target_platform_os_Set() const{
    return m_compilation_target_platform_os_isSet;
}

bool OAICompilationJobSummary::is_compilation_target_platform_os_Valid() const{
    return m_compilation_target_platform_os_isValid;
}

OAITargetPlatformArch OAICompilationJobSummary::getCompilationTargetPlatformArch() const {
    return m_compilation_target_platform_arch;
}
void OAICompilationJobSummary::setCompilationTargetPlatformArch(const OAITargetPlatformArch &compilation_target_platform_arch) {
    m_compilation_target_platform_arch = compilation_target_platform_arch;
    m_compilation_target_platform_arch_isSet = true;
}

bool OAICompilationJobSummary::is_compilation_target_platform_arch_Set() const{
    return m_compilation_target_platform_arch_isSet;
}

bool OAICompilationJobSummary::is_compilation_target_platform_arch_Valid() const{
    return m_compilation_target_platform_arch_isValid;
}

OAITargetPlatformAccelerator OAICompilationJobSummary::getCompilationTargetPlatformAccelerator() const {
    return m_compilation_target_platform_accelerator;
}
void OAICompilationJobSummary::setCompilationTargetPlatformAccelerator(const OAITargetPlatformAccelerator &compilation_target_platform_accelerator) {
    m_compilation_target_platform_accelerator = compilation_target_platform_accelerator;
    m_compilation_target_platform_accelerator_isSet = true;
}

bool OAICompilationJobSummary::is_compilation_target_platform_accelerator_Set() const{
    return m_compilation_target_platform_accelerator_isSet;
}

bool OAICompilationJobSummary::is_compilation_target_platform_accelerator_Valid() const{
    return m_compilation_target_platform_accelerator_isValid;
}

QDateTime OAICompilationJobSummary::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAICompilationJobSummary::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAICompilationJobSummary::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAICompilationJobSummary::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAICompilationJobStatus OAICompilationJobSummary::getCompilationJobStatus() const {
    return m_compilation_job_status;
}
void OAICompilationJobSummary::setCompilationJobStatus(const OAICompilationJobStatus &compilation_job_status) {
    m_compilation_job_status = compilation_job_status;
    m_compilation_job_status_isSet = true;
}

bool OAICompilationJobSummary::is_compilation_job_status_Set() const{
    return m_compilation_job_status_isSet;
}

bool OAICompilationJobSummary::is_compilation_job_status_Valid() const{
    return m_compilation_job_status_isValid;
}

bool OAICompilationJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compilation_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_target_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_target_platform_os.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_target_platform_arch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_target_platform_accelerator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compilation_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompilationJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compilation_job_name_isValid && m_compilation_job_arn_isValid && m_creation_time_isValid && m_compilation_job_status_isValid && true;
}

} // namespace OpenAPI
