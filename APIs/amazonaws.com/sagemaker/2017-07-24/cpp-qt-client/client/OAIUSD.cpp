/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSD.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSD::OAIUSD(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSD::OAIUSD() {
    this->initializeModel();
}

OAIUSD::~OAIUSD() {}

void OAIUSD::initializeModel() {

    m_dollars_isSet = false;
    m_dollars_isValid = false;

    m_cents_isSet = false;
    m_cents_isValid = false;

    m_tenth_fractions_of_a_cent_isSet = false;
    m_tenth_fractions_of_a_cent_isValid = false;
}

void OAIUSD::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSD::fromJsonObject(QJsonObject json) {

    m_dollars_isValid = ::OpenAPI::fromJsonValue(m_dollars, json[QString("Dollars")]);
    m_dollars_isSet = !json[QString("Dollars")].isNull() && m_dollars_isValid;

    m_cents_isValid = ::OpenAPI::fromJsonValue(m_cents, json[QString("Cents")]);
    m_cents_isSet = !json[QString("Cents")].isNull() && m_cents_isValid;

    m_tenth_fractions_of_a_cent_isValid = ::OpenAPI::fromJsonValue(m_tenth_fractions_of_a_cent, json[QString("TenthFractionsOfACent")]);
    m_tenth_fractions_of_a_cent_isSet = !json[QString("TenthFractionsOfACent")].isNull() && m_tenth_fractions_of_a_cent_isValid;
}

QString OAIUSD::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSD::asJsonObject() const {
    QJsonObject obj;
    if (m_dollars_isSet) {
        obj.insert(QString("Dollars"), ::OpenAPI::toJsonValue(m_dollars));
    }
    if (m_cents_isSet) {
        obj.insert(QString("Cents"), ::OpenAPI::toJsonValue(m_cents));
    }
    if (m_tenth_fractions_of_a_cent_isSet) {
        obj.insert(QString("TenthFractionsOfACent"), ::OpenAPI::toJsonValue(m_tenth_fractions_of_a_cent));
    }
    return obj;
}

qint32 OAIUSD::getDollars() const {
    return m_dollars;
}
void OAIUSD::setDollars(const qint32 &dollars) {
    m_dollars = dollars;
    m_dollars_isSet = true;
}

bool OAIUSD::is_dollars_Set() const{
    return m_dollars_isSet;
}

bool OAIUSD::is_dollars_Valid() const{
    return m_dollars_isValid;
}

qint32 OAIUSD::getCents() const {
    return m_cents;
}
void OAIUSD::setCents(const qint32 &cents) {
    m_cents = cents;
    m_cents_isSet = true;
}

bool OAIUSD::is_cents_Set() const{
    return m_cents_isSet;
}

bool OAIUSD::is_cents_Valid() const{
    return m_cents_isValid;
}

qint32 OAIUSD::getTenthFractionsOfACent() const {
    return m_tenth_fractions_of_a_cent;
}
void OAIUSD::setTenthFractionsOfACent(const qint32 &tenth_fractions_of_a_cent) {
    m_tenth_fractions_of_a_cent = tenth_fractions_of_a_cent;
    m_tenth_fractions_of_a_cent_isSet = true;
}

bool OAIUSD::is_tenth_fractions_of_a_cent_Set() const{
    return m_tenth_fractions_of_a_cent_isSet;
}

bool OAIUSD::is_tenth_fractions_of_a_cent_Valid() const{
    return m_tenth_fractions_of_a_cent_isValid;
}

bool OAIUSD::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dollars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenth_fractions_of_a_cent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSD::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
