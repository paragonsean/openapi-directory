/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperParameterSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperParameterSpecification::OAIHyperParameterSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperParameterSpecification::OAIHyperParameterSpecification() {
    this->initializeModel();
}

OAIHyperParameterSpecification::~OAIHyperParameterSpecification() {}

void OAIHyperParameterSpecification::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_is_tunable_isSet = false;
    m_is_tunable_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;
}

void OAIHyperParameterSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperParameterSpecification::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("Range")]);
    m_range_isSet = !json[QString("Range")].isNull() && m_range_isValid;

    m_is_tunable_isValid = ::OpenAPI::fromJsonValue(m_is_tunable, json[QString("IsTunable")]);
    m_is_tunable_isSet = !json[QString("IsTunable")].isNull() && m_is_tunable_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("IsRequired")]);
    m_is_required_isSet = !json[QString("IsRequired")].isNull() && m_is_required_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;
}

QString OAIHyperParameterSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperParameterSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_range.isSet()) {
        obj.insert(QString("Range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_is_tunable_isSet) {
        obj.insert(QString("IsTunable"), ::OpenAPI::toJsonValue(m_is_tunable));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("IsRequired"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    return obj;
}

QString OAIHyperParameterSpecification::getName() const {
    return m_name;
}
void OAIHyperParameterSpecification::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHyperParameterSpecification::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHyperParameterSpecification::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIHyperParameterSpecification::getDescription() const {
    return m_description;
}
void OAIHyperParameterSpecification::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHyperParameterSpecification::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHyperParameterSpecification::is_description_Valid() const{
    return m_description_isValid;
}

OAIParameterType OAIHyperParameterSpecification::getType() const {
    return m_type;
}
void OAIHyperParameterSpecification::setType(const OAIParameterType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHyperParameterSpecification::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHyperParameterSpecification::is_type_Valid() const{
    return m_type_isValid;
}

OAIHyperParameterSpecification_Range OAIHyperParameterSpecification::getRange() const {
    return m_range;
}
void OAIHyperParameterSpecification::setRange(const OAIHyperParameterSpecification_Range &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIHyperParameterSpecification::is_range_Set() const{
    return m_range_isSet;
}

bool OAIHyperParameterSpecification::is_range_Valid() const{
    return m_range_isValid;
}

bool OAIHyperParameterSpecification::getIsTunable() const {
    return m_is_tunable;
}
void OAIHyperParameterSpecification::setIsTunable(const bool &is_tunable) {
    m_is_tunable = is_tunable;
    m_is_tunable_isSet = true;
}

bool OAIHyperParameterSpecification::is_is_tunable_Set() const{
    return m_is_tunable_isSet;
}

bool OAIHyperParameterSpecification::is_is_tunable_Valid() const{
    return m_is_tunable_isValid;
}

bool OAIHyperParameterSpecification::getIsRequired() const {
    return m_is_required;
}
void OAIHyperParameterSpecification::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIHyperParameterSpecification::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIHyperParameterSpecification::is_is_required_Valid() const{
    return m_is_required_isValid;
}

QString OAIHyperParameterSpecification::getDefaultValue() const {
    return m_default_value;
}
void OAIHyperParameterSpecification::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIHyperParameterSpecification::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIHyperParameterSpecification::is_default_value_Valid() const{
    return m_default_value_isValid;
}

bool OAIHyperParameterSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tunable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperParameterSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
