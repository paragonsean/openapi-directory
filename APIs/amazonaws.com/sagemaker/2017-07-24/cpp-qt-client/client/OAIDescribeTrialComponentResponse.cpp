/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTrialComponentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTrialComponentResponse::OAIDescribeTrialComponentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTrialComponentResponse::OAIDescribeTrialComponentResponse() {
    this->initializeModel();
}

OAIDescribeTrialComponentResponse::~OAIDescribeTrialComponentResponse() {}

void OAIDescribeTrialComponentResponse::initializeModel() {

    m_trial_component_name_isSet = false;
    m_trial_component_name_isValid = false;

    m_trial_component_arn_isSet = false;
    m_trial_component_arn_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_input_artifacts_isSet = false;
    m_input_artifacts_isValid = false;

    m_output_artifacts_isSet = false;
    m_output_artifacts_isValid = false;

    m_metadata_properties_isSet = false;
    m_metadata_properties_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_lineage_group_arn_isSet = false;
    m_lineage_group_arn_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIDescribeTrialComponentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTrialComponentResponse::fromJsonObject(QJsonObject json) {

    m_trial_component_name_isValid = ::OpenAPI::fromJsonValue(m_trial_component_name, json[QString("TrialComponentName")]);
    m_trial_component_name_isSet = !json[QString("TrialComponentName")].isNull() && m_trial_component_name_isValid;

    m_trial_component_arn_isValid = ::OpenAPI::fromJsonValue(m_trial_component_arn, json[QString("TrialComponentArn")]);
    m_trial_component_arn_isSet = !json[QString("TrialComponentArn")].isNull() && m_trial_component_arn_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_input_artifacts_isValid = ::OpenAPI::fromJsonValue(m_input_artifacts, json[QString("InputArtifacts")]);
    m_input_artifacts_isSet = !json[QString("InputArtifacts")].isNull() && m_input_artifacts_isValid;

    m_output_artifacts_isValid = ::OpenAPI::fromJsonValue(m_output_artifacts, json[QString("OutputArtifacts")]);
    m_output_artifacts_isSet = !json[QString("OutputArtifacts")].isNull() && m_output_artifacts_isValid;

    m_metadata_properties_isValid = ::OpenAPI::fromJsonValue(m_metadata_properties, json[QString("MetadataProperties")]);
    m_metadata_properties_isSet = !json[QString("MetadataProperties")].isNull() && m_metadata_properties_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;

    m_lineage_group_arn_isValid = ::OpenAPI::fromJsonValue(m_lineage_group_arn, json[QString("LineageGroupArn")]);
    m_lineage_group_arn_isSet = !json[QString("LineageGroupArn")].isNull() && m_lineage_group_arn_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("Sources")]);
    m_sources_isSet = !json[QString("Sources")].isNull() && m_sources_isValid;
}

QString OAIDescribeTrialComponentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTrialComponentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_trial_component_name_isSet) {
        obj.insert(QString("TrialComponentName"), ::OpenAPI::toJsonValue(m_trial_component_name));
    }
    if (m_trial_component_arn_isSet) {
        obj.insert(QString("TrialComponentArn"), ::OpenAPI::toJsonValue(m_trial_component_arn));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_last_modified_by.isSet()) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_input_artifacts.isSet()) {
        obj.insert(QString("InputArtifacts"), ::OpenAPI::toJsonValue(m_input_artifacts));
    }
    if (m_output_artifacts.isSet()) {
        obj.insert(QString("OutputArtifacts"), ::OpenAPI::toJsonValue(m_output_artifacts));
    }
    if (m_metadata_properties.isSet()) {
        obj.insert(QString("MetadataProperties"), ::OpenAPI::toJsonValue(m_metadata_properties));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_lineage_group_arn_isSet) {
        obj.insert(QString("LineageGroupArn"), ::OpenAPI::toJsonValue(m_lineage_group_arn));
    }
    if (m_sources.isSet()) {
        obj.insert(QString("Sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAIDescribeTrialComponentResponse::getTrialComponentName() const {
    return m_trial_component_name;
}
void OAIDescribeTrialComponentResponse::setTrialComponentName(const QString &trial_component_name) {
    m_trial_component_name = trial_component_name;
    m_trial_component_name_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_trial_component_name_Set() const{
    return m_trial_component_name_isSet;
}

bool OAIDescribeTrialComponentResponse::is_trial_component_name_Valid() const{
    return m_trial_component_name_isValid;
}

QString OAIDescribeTrialComponentResponse::getTrialComponentArn() const {
    return m_trial_component_arn;
}
void OAIDescribeTrialComponentResponse::setTrialComponentArn(const QString &trial_component_arn) {
    m_trial_component_arn = trial_component_arn;
    m_trial_component_arn_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_trial_component_arn_Set() const{
    return m_trial_component_arn_isSet;
}

bool OAIDescribeTrialComponentResponse::is_trial_component_arn_Valid() const{
    return m_trial_component_arn_isValid;
}

QString OAIDescribeTrialComponentResponse::getDisplayName() const {
    return m_display_name;
}
void OAIDescribeTrialComponentResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDescribeTrialComponentResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIDescribeTrialComponentResponse_Source OAIDescribeTrialComponentResponse::getSource() const {
    return m_source;
}
void OAIDescribeTrialComponentResponse::setSource(const OAIDescribeTrialComponentResponse_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDescribeTrialComponentResponse::is_source_Valid() const{
    return m_source_isValid;
}

OAICreateTrialComponentRequest_Status OAIDescribeTrialComponentResponse::getStatus() const {
    return m_status;
}
void OAIDescribeTrialComponentResponse::setStatus(const OAICreateTrialComponentRequest_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeTrialComponentResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeTrialComponentResponse::getStartTime() const {
    return m_start_time;
}
void OAIDescribeTrialComponentResponse::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeTrialComponentResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeTrialComponentResponse::getEndTime() const {
    return m_end_time;
}
void OAIDescribeTrialComponentResponse::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeTrialComponentResponse::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIDescribeTrialComponentResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeTrialComponentResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeTrialComponentResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIDescribeTrialComponentResponse_CreatedBy OAIDescribeTrialComponentResponse::getCreatedBy() const {
    return m_created_by;
}
void OAIDescribeTrialComponentResponse::setCreatedBy(const OAIDescribeTrialComponentResponse_CreatedBy &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDescribeTrialComponentResponse::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIDescribeTrialComponentResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeTrialComponentResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeTrialComponentResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIDescribeTrialComponentResponse_LastModifiedBy OAIDescribeTrialComponentResponse::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIDescribeTrialComponentResponse::setLastModifiedBy(const OAIDescribeTrialComponentResponse_LastModifiedBy &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIDescribeTrialComponentResponse::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QMap OAIDescribeTrialComponentResponse::getParameters() const {
    return m_parameters;
}
void OAIDescribeTrialComponentResponse::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDescribeTrialComponentResponse::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QMap OAIDescribeTrialComponentResponse::getInputArtifacts() const {
    return m_input_artifacts;
}
void OAIDescribeTrialComponentResponse::setInputArtifacts(const QMap &input_artifacts) {
    m_input_artifacts = input_artifacts;
    m_input_artifacts_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_input_artifacts_Set() const{
    return m_input_artifacts_isSet;
}

bool OAIDescribeTrialComponentResponse::is_input_artifacts_Valid() const{
    return m_input_artifacts_isValid;
}

QMap OAIDescribeTrialComponentResponse::getOutputArtifacts() const {
    return m_output_artifacts;
}
void OAIDescribeTrialComponentResponse::setOutputArtifacts(const QMap &output_artifacts) {
    m_output_artifacts = output_artifacts;
    m_output_artifacts_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_output_artifacts_Set() const{
    return m_output_artifacts_isSet;
}

bool OAIDescribeTrialComponentResponse::is_output_artifacts_Valid() const{
    return m_output_artifacts_isValid;
}

OAIMetadataProperties OAIDescribeTrialComponentResponse::getMetadataProperties() const {
    return m_metadata_properties;
}
void OAIDescribeTrialComponentResponse::setMetadataProperties(const OAIMetadataProperties &metadata_properties) {
    m_metadata_properties = metadata_properties;
    m_metadata_properties_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_metadata_properties_Set() const{
    return m_metadata_properties_isSet;
}

bool OAIDescribeTrialComponentResponse::is_metadata_properties_Valid() const{
    return m_metadata_properties_isValid;
}

QList OAIDescribeTrialComponentResponse::getMetrics() const {
    return m_metrics;
}
void OAIDescribeTrialComponentResponse::setMetrics(const QList &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDescribeTrialComponentResponse::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIDescribeTrialComponentResponse::getLineageGroupArn() const {
    return m_lineage_group_arn;
}
void OAIDescribeTrialComponentResponse::setLineageGroupArn(const QString &lineage_group_arn) {
    m_lineage_group_arn = lineage_group_arn;
    m_lineage_group_arn_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_lineage_group_arn_Set() const{
    return m_lineage_group_arn_isSet;
}

bool OAIDescribeTrialComponentResponse::is_lineage_group_arn_Valid() const{
    return m_lineage_group_arn_isValid;
}

QList OAIDescribeTrialComponentResponse::getSources() const {
    return m_sources;
}
void OAIDescribeTrialComponentResponse::setSources(const QList &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIDescribeTrialComponentResponse::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIDescribeTrialComponentResponse::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIDescribeTrialComponentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trial_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_component_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lineage_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTrialComponentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
