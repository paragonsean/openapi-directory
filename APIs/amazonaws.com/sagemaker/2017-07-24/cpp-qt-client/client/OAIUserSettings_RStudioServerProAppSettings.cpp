/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSettings_RStudioServerProAppSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSettings_RStudioServerProAppSettings::OAIUserSettings_RStudioServerProAppSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSettings_RStudioServerProAppSettings::OAIUserSettings_RStudioServerProAppSettings() {
    this->initializeModel();
}

OAIUserSettings_RStudioServerProAppSettings::~OAIUserSettings_RStudioServerProAppSettings() {}

void OAIUserSettings_RStudioServerProAppSettings::initializeModel() {

    m_access_status_isSet = false;
    m_access_status_isValid = false;

    m_user_group_isSet = false;
    m_user_group_isValid = false;
}

void OAIUserSettings_RStudioServerProAppSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSettings_RStudioServerProAppSettings::fromJsonObject(QJsonObject json) {

    m_access_status_isValid = ::OpenAPI::fromJsonValue(m_access_status, json[QString("AccessStatus")]);
    m_access_status_isSet = !json[QString("AccessStatus")].isNull() && m_access_status_isValid;

    m_user_group_isValid = ::OpenAPI::fromJsonValue(m_user_group, json[QString("UserGroup")]);
    m_user_group_isSet = !json[QString("UserGroup")].isNull() && m_user_group_isValid;
}

QString OAIUserSettings_RStudioServerProAppSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSettings_RStudioServerProAppSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_access_status.isSet()) {
        obj.insert(QString("AccessStatus"), ::OpenAPI::toJsonValue(m_access_status));
    }
    if (m_user_group.isSet()) {
        obj.insert(QString("UserGroup"), ::OpenAPI::toJsonValue(m_user_group));
    }
    return obj;
}

OAIRStudioServerProAccessStatus OAIUserSettings_RStudioServerProAppSettings::getAccessStatus() const {
    return m_access_status;
}
void OAIUserSettings_RStudioServerProAppSettings::setAccessStatus(const OAIRStudioServerProAccessStatus &access_status) {
    m_access_status = access_status;
    m_access_status_isSet = true;
}

bool OAIUserSettings_RStudioServerProAppSettings::is_access_status_Set() const{
    return m_access_status_isSet;
}

bool OAIUserSettings_RStudioServerProAppSettings::is_access_status_Valid() const{
    return m_access_status_isValid;
}

OAIRStudioServerProUserGroup OAIUserSettings_RStudioServerProAppSettings::getUserGroup() const {
    return m_user_group;
}
void OAIUserSettings_RStudioServerProAppSettings::setUserGroup(const OAIRStudioServerProUserGroup &user_group) {
    m_user_group = user_group;
    m_user_group_isSet = true;
}

bool OAIUserSettings_RStudioServerProAppSettings::is_user_group_Set() const{
    return m_user_group_isSet;
}

bool OAIUserSettings_RStudioServerProAppSettings::is_user_group_Valid() const{
    return m_user_group_isValid;
}

bool OAIUserSettings_RStudioServerProAppSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_group.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSettings_RStudioServerProAppSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
