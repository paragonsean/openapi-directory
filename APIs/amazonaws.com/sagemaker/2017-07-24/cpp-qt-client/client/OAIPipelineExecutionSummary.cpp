/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineExecutionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineExecutionSummary::OAIPipelineExecutionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineExecutionSummary::OAIPipelineExecutionSummary() {
    this->initializeModel();
}

OAIPipelineExecutionSummary::~OAIPipelineExecutionSummary() {}

void OAIPipelineExecutionSummary::initializeModel() {

    m_pipeline_execution_arn_isSet = false;
    m_pipeline_execution_arn_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_pipeline_execution_status_isSet = false;
    m_pipeline_execution_status_isValid = false;

    m_pipeline_execution_description_isSet = false;
    m_pipeline_execution_description_isValid = false;

    m_pipeline_execution_display_name_isSet = false;
    m_pipeline_execution_display_name_isValid = false;

    m_pipeline_execution_failure_reason_isSet = false;
    m_pipeline_execution_failure_reason_isValid = false;
}

void OAIPipelineExecutionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineExecutionSummary::fromJsonObject(QJsonObject json) {

    m_pipeline_execution_arn_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution_arn, json[QString("PipelineExecutionArn")]);
    m_pipeline_execution_arn_isSet = !json[QString("PipelineExecutionArn")].isNull() && m_pipeline_execution_arn_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_pipeline_execution_status_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution_status, json[QString("PipelineExecutionStatus")]);
    m_pipeline_execution_status_isSet = !json[QString("PipelineExecutionStatus")].isNull() && m_pipeline_execution_status_isValid;

    m_pipeline_execution_description_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution_description, json[QString("PipelineExecutionDescription")]);
    m_pipeline_execution_description_isSet = !json[QString("PipelineExecutionDescription")].isNull() && m_pipeline_execution_description_isValid;

    m_pipeline_execution_display_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution_display_name, json[QString("PipelineExecutionDisplayName")]);
    m_pipeline_execution_display_name_isSet = !json[QString("PipelineExecutionDisplayName")].isNull() && m_pipeline_execution_display_name_isValid;

    m_pipeline_execution_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution_failure_reason, json[QString("PipelineExecutionFailureReason")]);
    m_pipeline_execution_failure_reason_isSet = !json[QString("PipelineExecutionFailureReason")].isNull() && m_pipeline_execution_failure_reason_isValid;
}

QString OAIPipelineExecutionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineExecutionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_pipeline_execution_arn_isSet) {
        obj.insert(QString("PipelineExecutionArn"), ::OpenAPI::toJsonValue(m_pipeline_execution_arn));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_pipeline_execution_status.isSet()) {
        obj.insert(QString("PipelineExecutionStatus"), ::OpenAPI::toJsonValue(m_pipeline_execution_status));
    }
    if (m_pipeline_execution_description_isSet) {
        obj.insert(QString("PipelineExecutionDescription"), ::OpenAPI::toJsonValue(m_pipeline_execution_description));
    }
    if (m_pipeline_execution_display_name_isSet) {
        obj.insert(QString("PipelineExecutionDisplayName"), ::OpenAPI::toJsonValue(m_pipeline_execution_display_name));
    }
    if (m_pipeline_execution_failure_reason_isSet) {
        obj.insert(QString("PipelineExecutionFailureReason"), ::OpenAPI::toJsonValue(m_pipeline_execution_failure_reason));
    }
    return obj;
}

QString OAIPipelineExecutionSummary::getPipelineExecutionArn() const {
    return m_pipeline_execution_arn;
}
void OAIPipelineExecutionSummary::setPipelineExecutionArn(const QString &pipeline_execution_arn) {
    m_pipeline_execution_arn = pipeline_execution_arn;
    m_pipeline_execution_arn_isSet = true;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_arn_Set() const{
    return m_pipeline_execution_arn_isSet;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_arn_Valid() const{
    return m_pipeline_execution_arn_isValid;
}

QDateTime OAIPipelineExecutionSummary::getStartTime() const {
    return m_start_time;
}
void OAIPipelineExecutionSummary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPipelineExecutionSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPipelineExecutionSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIPipelineExecutionStatus OAIPipelineExecutionSummary::getPipelineExecutionStatus() const {
    return m_pipeline_execution_status;
}
void OAIPipelineExecutionSummary::setPipelineExecutionStatus(const OAIPipelineExecutionStatus &pipeline_execution_status) {
    m_pipeline_execution_status = pipeline_execution_status;
    m_pipeline_execution_status_isSet = true;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_status_Set() const{
    return m_pipeline_execution_status_isSet;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_status_Valid() const{
    return m_pipeline_execution_status_isValid;
}

QString OAIPipelineExecutionSummary::getPipelineExecutionDescription() const {
    return m_pipeline_execution_description;
}
void OAIPipelineExecutionSummary::setPipelineExecutionDescription(const QString &pipeline_execution_description) {
    m_pipeline_execution_description = pipeline_execution_description;
    m_pipeline_execution_description_isSet = true;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_description_Set() const{
    return m_pipeline_execution_description_isSet;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_description_Valid() const{
    return m_pipeline_execution_description_isValid;
}

QString OAIPipelineExecutionSummary::getPipelineExecutionDisplayName() const {
    return m_pipeline_execution_display_name;
}
void OAIPipelineExecutionSummary::setPipelineExecutionDisplayName(const QString &pipeline_execution_display_name) {
    m_pipeline_execution_display_name = pipeline_execution_display_name;
    m_pipeline_execution_display_name_isSet = true;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_display_name_Set() const{
    return m_pipeline_execution_display_name_isSet;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_display_name_Valid() const{
    return m_pipeline_execution_display_name_isValid;
}

QString OAIPipelineExecutionSummary::getPipelineExecutionFailureReason() const {
    return m_pipeline_execution_failure_reason;
}
void OAIPipelineExecutionSummary::setPipelineExecutionFailureReason(const QString &pipeline_execution_failure_reason) {
    m_pipeline_execution_failure_reason = pipeline_execution_failure_reason;
    m_pipeline_execution_failure_reason_isSet = true;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_failure_reason_Set() const{
    return m_pipeline_execution_failure_reason_isSet;
}

bool OAIPipelineExecutionSummary::is_pipeline_execution_failure_reason_Valid() const{
    return m_pipeline_execution_failure_reason_isValid;
}

bool OAIPipelineExecutionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pipeline_execution_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_execution_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_execution_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_execution_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineExecutionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
