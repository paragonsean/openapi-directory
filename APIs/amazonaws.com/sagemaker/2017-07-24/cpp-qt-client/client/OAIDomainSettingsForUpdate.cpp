/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainSettingsForUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainSettingsForUpdate::OAIDomainSettingsForUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainSettingsForUpdate::OAIDomainSettingsForUpdate() {
    this->initializeModel();
}

OAIDomainSettingsForUpdate::~OAIDomainSettingsForUpdate() {}

void OAIDomainSettingsForUpdate::initializeModel() {

    m_r_studio_server_pro_domain_settings_for_update_isSet = false;
    m_r_studio_server_pro_domain_settings_for_update_isValid = false;

    m_execution_role_identity_config_isSet = false;
    m_execution_role_identity_config_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;
}

void OAIDomainSettingsForUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainSettingsForUpdate::fromJsonObject(QJsonObject json) {

    m_r_studio_server_pro_domain_settings_for_update_isValid = ::OpenAPI::fromJsonValue(m_r_studio_server_pro_domain_settings_for_update, json[QString("RStudioServerProDomainSettingsForUpdate")]);
    m_r_studio_server_pro_domain_settings_for_update_isSet = !json[QString("RStudioServerProDomainSettingsForUpdate")].isNull() && m_r_studio_server_pro_domain_settings_for_update_isValid;

    m_execution_role_identity_config_isValid = ::OpenAPI::fromJsonValue(m_execution_role_identity_config, json[QString("ExecutionRoleIdentityConfig")]);
    m_execution_role_identity_config_isSet = !json[QString("ExecutionRoleIdentityConfig")].isNull() && m_execution_role_identity_config_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;
}

QString OAIDomainSettingsForUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainSettingsForUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_r_studio_server_pro_domain_settings_for_update.isSet()) {
        obj.insert(QString("RStudioServerProDomainSettingsForUpdate"), ::OpenAPI::toJsonValue(m_r_studio_server_pro_domain_settings_for_update));
    }
    if (m_execution_role_identity_config.isSet()) {
        obj.insert(QString("ExecutionRoleIdentityConfig"), ::OpenAPI::toJsonValue(m_execution_role_identity_config));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    return obj;
}

OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate OAIDomainSettingsForUpdate::getRStudioServerProDomainSettingsForUpdate() const {
    return m_r_studio_server_pro_domain_settings_for_update;
}
void OAIDomainSettingsForUpdate::setRStudioServerProDomainSettingsForUpdate(const OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate &r_studio_server_pro_domain_settings_for_update) {
    m_r_studio_server_pro_domain_settings_for_update = r_studio_server_pro_domain_settings_for_update;
    m_r_studio_server_pro_domain_settings_for_update_isSet = true;
}

bool OAIDomainSettingsForUpdate::is_r_studio_server_pro_domain_settings_for_update_Set() const{
    return m_r_studio_server_pro_domain_settings_for_update_isSet;
}

bool OAIDomainSettingsForUpdate::is_r_studio_server_pro_domain_settings_for_update_Valid() const{
    return m_r_studio_server_pro_domain_settings_for_update_isValid;
}

OAIExecutionRoleIdentityConfig OAIDomainSettingsForUpdate::getExecutionRoleIdentityConfig() const {
    return m_execution_role_identity_config;
}
void OAIDomainSettingsForUpdate::setExecutionRoleIdentityConfig(const OAIExecutionRoleIdentityConfig &execution_role_identity_config) {
    m_execution_role_identity_config = execution_role_identity_config;
    m_execution_role_identity_config_isSet = true;
}

bool OAIDomainSettingsForUpdate::is_execution_role_identity_config_Set() const{
    return m_execution_role_identity_config_isSet;
}

bool OAIDomainSettingsForUpdate::is_execution_role_identity_config_Valid() const{
    return m_execution_role_identity_config_isValid;
}

QList OAIDomainSettingsForUpdate::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIDomainSettingsForUpdate::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIDomainSettingsForUpdate::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIDomainSettingsForUpdate::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

bool OAIDomainSettingsForUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_studio_server_pro_domain_settings_for_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_identity_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainSettingsForUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
