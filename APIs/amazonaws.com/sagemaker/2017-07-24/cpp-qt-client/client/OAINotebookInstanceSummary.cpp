/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotebookInstanceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotebookInstanceSummary::OAINotebookInstanceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotebookInstanceSummary::OAINotebookInstanceSummary() {
    this->initializeModel();
}

OAINotebookInstanceSummary::~OAINotebookInstanceSummary() {}

void OAINotebookInstanceSummary::initializeModel() {

    m_notebook_instance_name_isSet = false;
    m_notebook_instance_name_isValid = false;

    m_notebook_instance_arn_isSet = false;
    m_notebook_instance_arn_isValid = false;

    m_notebook_instance_status_isSet = false;
    m_notebook_instance_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_notebook_instance_lifecycle_config_name_isSet = false;
    m_notebook_instance_lifecycle_config_name_isValid = false;

    m_default_code_repository_isSet = false;
    m_default_code_repository_isValid = false;

    m_additional_code_repositories_isSet = false;
    m_additional_code_repositories_isValid = false;
}

void OAINotebookInstanceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotebookInstanceSummary::fromJsonObject(QJsonObject json) {

    m_notebook_instance_name_isValid = ::OpenAPI::fromJsonValue(m_notebook_instance_name, json[QString("NotebookInstanceName")]);
    m_notebook_instance_name_isSet = !json[QString("NotebookInstanceName")].isNull() && m_notebook_instance_name_isValid;

    m_notebook_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_notebook_instance_arn, json[QString("NotebookInstanceArn")]);
    m_notebook_instance_arn_isSet = !json[QString("NotebookInstanceArn")].isNull() && m_notebook_instance_arn_isValid;

    m_notebook_instance_status_isValid = ::OpenAPI::fromJsonValue(m_notebook_instance_status, json[QString("NotebookInstanceStatus")]);
    m_notebook_instance_status_isSet = !json[QString("NotebookInstanceStatus")].isNull() && m_notebook_instance_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_notebook_instance_lifecycle_config_name_isValid = ::OpenAPI::fromJsonValue(m_notebook_instance_lifecycle_config_name, json[QString("NotebookInstanceLifecycleConfigName")]);
    m_notebook_instance_lifecycle_config_name_isSet = !json[QString("NotebookInstanceLifecycleConfigName")].isNull() && m_notebook_instance_lifecycle_config_name_isValid;

    m_default_code_repository_isValid = ::OpenAPI::fromJsonValue(m_default_code_repository, json[QString("DefaultCodeRepository")]);
    m_default_code_repository_isSet = !json[QString("DefaultCodeRepository")].isNull() && m_default_code_repository_isValid;

    m_additional_code_repositories_isValid = ::OpenAPI::fromJsonValue(m_additional_code_repositories, json[QString("AdditionalCodeRepositories")]);
    m_additional_code_repositories_isSet = !json[QString("AdditionalCodeRepositories")].isNull() && m_additional_code_repositories_isValid;
}

QString OAINotebookInstanceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotebookInstanceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_notebook_instance_name_isSet) {
        obj.insert(QString("NotebookInstanceName"), ::OpenAPI::toJsonValue(m_notebook_instance_name));
    }
    if (m_notebook_instance_arn_isSet) {
        obj.insert(QString("NotebookInstanceArn"), ::OpenAPI::toJsonValue(m_notebook_instance_arn));
    }
    if (m_notebook_instance_status.isSet()) {
        obj.insert(QString("NotebookInstanceStatus"), ::OpenAPI::toJsonValue(m_notebook_instance_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_notebook_instance_lifecycle_config_name_isSet) {
        obj.insert(QString("NotebookInstanceLifecycleConfigName"), ::OpenAPI::toJsonValue(m_notebook_instance_lifecycle_config_name));
    }
    if (m_default_code_repository_isSet) {
        obj.insert(QString("DefaultCodeRepository"), ::OpenAPI::toJsonValue(m_default_code_repository));
    }
    if (m_additional_code_repositories.isSet()) {
        obj.insert(QString("AdditionalCodeRepositories"), ::OpenAPI::toJsonValue(m_additional_code_repositories));
    }
    return obj;
}

QString OAINotebookInstanceSummary::getNotebookInstanceName() const {
    return m_notebook_instance_name;
}
void OAINotebookInstanceSummary::setNotebookInstanceName(const QString &notebook_instance_name) {
    m_notebook_instance_name = notebook_instance_name;
    m_notebook_instance_name_isSet = true;
}

bool OAINotebookInstanceSummary::is_notebook_instance_name_Set() const{
    return m_notebook_instance_name_isSet;
}

bool OAINotebookInstanceSummary::is_notebook_instance_name_Valid() const{
    return m_notebook_instance_name_isValid;
}

QString OAINotebookInstanceSummary::getNotebookInstanceArn() const {
    return m_notebook_instance_arn;
}
void OAINotebookInstanceSummary::setNotebookInstanceArn(const QString &notebook_instance_arn) {
    m_notebook_instance_arn = notebook_instance_arn;
    m_notebook_instance_arn_isSet = true;
}

bool OAINotebookInstanceSummary::is_notebook_instance_arn_Set() const{
    return m_notebook_instance_arn_isSet;
}

bool OAINotebookInstanceSummary::is_notebook_instance_arn_Valid() const{
    return m_notebook_instance_arn_isValid;
}

OAINotebookInstanceStatus OAINotebookInstanceSummary::getNotebookInstanceStatus() const {
    return m_notebook_instance_status;
}
void OAINotebookInstanceSummary::setNotebookInstanceStatus(const OAINotebookInstanceStatus &notebook_instance_status) {
    m_notebook_instance_status = notebook_instance_status;
    m_notebook_instance_status_isSet = true;
}

bool OAINotebookInstanceSummary::is_notebook_instance_status_Set() const{
    return m_notebook_instance_status_isSet;
}

bool OAINotebookInstanceSummary::is_notebook_instance_status_Valid() const{
    return m_notebook_instance_status_isValid;
}

QString OAINotebookInstanceSummary::getUrl() const {
    return m_url;
}
void OAINotebookInstanceSummary::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINotebookInstanceSummary::is_url_Set() const{
    return m_url_isSet;
}

bool OAINotebookInstanceSummary::is_url_Valid() const{
    return m_url_isValid;
}

OAIInstanceType OAINotebookInstanceSummary::getInstanceType() const {
    return m_instance_type;
}
void OAINotebookInstanceSummary::setInstanceType(const OAIInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAINotebookInstanceSummary::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAINotebookInstanceSummary::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QDateTime OAINotebookInstanceSummary::getCreationTime() const {
    return m_creation_time;
}
void OAINotebookInstanceSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAINotebookInstanceSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAINotebookInstanceSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAINotebookInstanceSummary::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAINotebookInstanceSummary::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAINotebookInstanceSummary::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAINotebookInstanceSummary::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAINotebookInstanceSummary::getNotebookInstanceLifecycleConfigName() const {
    return m_notebook_instance_lifecycle_config_name;
}
void OAINotebookInstanceSummary::setNotebookInstanceLifecycleConfigName(const QString &notebook_instance_lifecycle_config_name) {
    m_notebook_instance_lifecycle_config_name = notebook_instance_lifecycle_config_name;
    m_notebook_instance_lifecycle_config_name_isSet = true;
}

bool OAINotebookInstanceSummary::is_notebook_instance_lifecycle_config_name_Set() const{
    return m_notebook_instance_lifecycle_config_name_isSet;
}

bool OAINotebookInstanceSummary::is_notebook_instance_lifecycle_config_name_Valid() const{
    return m_notebook_instance_lifecycle_config_name_isValid;
}

QString OAINotebookInstanceSummary::getDefaultCodeRepository() const {
    return m_default_code_repository;
}
void OAINotebookInstanceSummary::setDefaultCodeRepository(const QString &default_code_repository) {
    m_default_code_repository = default_code_repository;
    m_default_code_repository_isSet = true;
}

bool OAINotebookInstanceSummary::is_default_code_repository_Set() const{
    return m_default_code_repository_isSet;
}

bool OAINotebookInstanceSummary::is_default_code_repository_Valid() const{
    return m_default_code_repository_isValid;
}

QList OAINotebookInstanceSummary::getAdditionalCodeRepositories() const {
    return m_additional_code_repositories;
}
void OAINotebookInstanceSummary::setAdditionalCodeRepositories(const QList &additional_code_repositories) {
    m_additional_code_repositories = additional_code_repositories;
    m_additional_code_repositories_isSet = true;
}

bool OAINotebookInstanceSummary::is_additional_code_repositories_Set() const{
    return m_additional_code_repositories_isSet;
}

bool OAINotebookInstanceSummary::is_additional_code_repositories_Valid() const{
    return m_additional_code_repositories_isValid;
}

bool OAINotebookInstanceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notebook_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_instance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook_instance_lifecycle_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_code_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_code_repositories.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotebookInstanceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_notebook_instance_name_isValid && m_notebook_instance_arn_isValid && true;
}

} // namespace OpenAPI
