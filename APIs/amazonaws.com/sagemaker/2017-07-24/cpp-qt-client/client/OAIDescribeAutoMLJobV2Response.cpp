/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAutoMLJobV2Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAutoMLJobV2Response::OAIDescribeAutoMLJobV2Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAutoMLJobV2Response::OAIDescribeAutoMLJobV2Response() {
    this->initializeModel();
}

OAIDescribeAutoMLJobV2Response::~OAIDescribeAutoMLJobV2Response() {}

void OAIDescribeAutoMLJobV2Response::initializeModel() {

    m_auto_ml_job_name_isSet = false;
    m_auto_ml_job_name_isValid = false;

    m_auto_ml_job_arn_isSet = false;
    m_auto_ml_job_arn_isValid = false;

    m_auto_ml_job_input_data_config_isSet = false;
    m_auto_ml_job_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_auto_ml_job_objective_isSet = false;
    m_auto_ml_job_objective_isValid = false;

    m_auto_ml_problem_type_config_isSet = false;
    m_auto_ml_problem_type_config_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_partial_failure_reasons_isSet = false;
    m_partial_failure_reasons_isValid = false;

    m_best_candidate_isSet = false;
    m_best_candidate_isValid = false;

    m_auto_ml_job_status_isSet = false;
    m_auto_ml_job_status_isValid = false;

    m_auto_ml_job_secondary_status_isSet = false;
    m_auto_ml_job_secondary_status_isValid = false;

    m_model_deploy_config_isSet = false;
    m_model_deploy_config_isValid = false;

    m_model_deploy_result_isSet = false;
    m_model_deploy_result_isValid = false;

    m_data_split_config_isSet = false;
    m_data_split_config_isValid = false;

    m_security_config_isSet = false;
    m_security_config_isValid = false;

    m_auto_ml_job_artifacts_isSet = false;
    m_auto_ml_job_artifacts_isValid = false;

    m_resolved_attributes_isSet = false;
    m_resolved_attributes_isValid = false;

    m_auto_ml_problem_type_config_name_isSet = false;
    m_auto_ml_problem_type_config_name_isValid = false;
}

void OAIDescribeAutoMLJobV2Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAutoMLJobV2Response::fromJsonObject(QJsonObject json) {

    m_auto_ml_job_name_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_name, json[QString("AutoMLJobName")]);
    m_auto_ml_job_name_isSet = !json[QString("AutoMLJobName")].isNull() && m_auto_ml_job_name_isValid;

    m_auto_ml_job_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_arn, json[QString("AutoMLJobArn")]);
    m_auto_ml_job_arn_isSet = !json[QString("AutoMLJobArn")].isNull() && m_auto_ml_job_arn_isValid;

    m_auto_ml_job_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_input_data_config, json[QString("AutoMLJobInputDataConfig")]);
    m_auto_ml_job_input_data_config_isSet = !json[QString("AutoMLJobInputDataConfig")].isNull() && m_auto_ml_job_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_auto_ml_job_objective_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_objective, json[QString("AutoMLJobObjective")]);
    m_auto_ml_job_objective_isSet = !json[QString("AutoMLJobObjective")].isNull() && m_auto_ml_job_objective_isValid;

    m_auto_ml_problem_type_config_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_problem_type_config, json[QString("AutoMLProblemTypeConfig")]);
    m_auto_ml_problem_type_config_isSet = !json[QString("AutoMLProblemTypeConfig")].isNull() && m_auto_ml_problem_type_config_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_partial_failure_reasons_isValid = ::OpenAPI::fromJsonValue(m_partial_failure_reasons, json[QString("PartialFailureReasons")]);
    m_partial_failure_reasons_isSet = !json[QString("PartialFailureReasons")].isNull() && m_partial_failure_reasons_isValid;

    m_best_candidate_isValid = ::OpenAPI::fromJsonValue(m_best_candidate, json[QString("BestCandidate")]);
    m_best_candidate_isSet = !json[QString("BestCandidate")].isNull() && m_best_candidate_isValid;

    m_auto_ml_job_status_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_status, json[QString("AutoMLJobStatus")]);
    m_auto_ml_job_status_isSet = !json[QString("AutoMLJobStatus")].isNull() && m_auto_ml_job_status_isValid;

    m_auto_ml_job_secondary_status_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_secondary_status, json[QString("AutoMLJobSecondaryStatus")]);
    m_auto_ml_job_secondary_status_isSet = !json[QString("AutoMLJobSecondaryStatus")].isNull() && m_auto_ml_job_secondary_status_isValid;

    m_model_deploy_config_isValid = ::OpenAPI::fromJsonValue(m_model_deploy_config, json[QString("ModelDeployConfig")]);
    m_model_deploy_config_isSet = !json[QString("ModelDeployConfig")].isNull() && m_model_deploy_config_isValid;

    m_model_deploy_result_isValid = ::OpenAPI::fromJsonValue(m_model_deploy_result, json[QString("ModelDeployResult")]);
    m_model_deploy_result_isSet = !json[QString("ModelDeployResult")].isNull() && m_model_deploy_result_isValid;

    m_data_split_config_isValid = ::OpenAPI::fromJsonValue(m_data_split_config, json[QString("DataSplitConfig")]);
    m_data_split_config_isSet = !json[QString("DataSplitConfig")].isNull() && m_data_split_config_isValid;

    m_security_config_isValid = ::OpenAPI::fromJsonValue(m_security_config, json[QString("SecurityConfig")]);
    m_security_config_isSet = !json[QString("SecurityConfig")].isNull() && m_security_config_isValid;

    m_auto_ml_job_artifacts_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_artifacts, json[QString("AutoMLJobArtifacts")]);
    m_auto_ml_job_artifacts_isSet = !json[QString("AutoMLJobArtifacts")].isNull() && m_auto_ml_job_artifacts_isValid;

    m_resolved_attributes_isValid = ::OpenAPI::fromJsonValue(m_resolved_attributes, json[QString("ResolvedAttributes")]);
    m_resolved_attributes_isSet = !json[QString("ResolvedAttributes")].isNull() && m_resolved_attributes_isValid;

    m_auto_ml_problem_type_config_name_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_problem_type_config_name, json[QString("AutoMLProblemTypeConfigName")]);
    m_auto_ml_problem_type_config_name_isSet = !json[QString("AutoMLProblemTypeConfigName")].isNull() && m_auto_ml_problem_type_config_name_isValid;
}

QString OAIDescribeAutoMLJobV2Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAutoMLJobV2Response::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_ml_job_name_isSet) {
        obj.insert(QString("AutoMLJobName"), ::OpenAPI::toJsonValue(m_auto_ml_job_name));
    }
    if (m_auto_ml_job_arn_isSet) {
        obj.insert(QString("AutoMLJobArn"), ::OpenAPI::toJsonValue(m_auto_ml_job_arn));
    }
    if (m_auto_ml_job_input_data_config.isSet()) {
        obj.insert(QString("AutoMLJobInputDataConfig"), ::OpenAPI::toJsonValue(m_auto_ml_job_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_auto_ml_job_objective.isSet()) {
        obj.insert(QString("AutoMLJobObjective"), ::OpenAPI::toJsonValue(m_auto_ml_job_objective));
    }
    if (m_auto_ml_problem_type_config.isSet()) {
        obj.insert(QString("AutoMLProblemTypeConfig"), ::OpenAPI::toJsonValue(m_auto_ml_problem_type_config));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_partial_failure_reasons.isSet()) {
        obj.insert(QString("PartialFailureReasons"), ::OpenAPI::toJsonValue(m_partial_failure_reasons));
    }
    if (m_best_candidate.isSet()) {
        obj.insert(QString("BestCandidate"), ::OpenAPI::toJsonValue(m_best_candidate));
    }
    if (m_auto_ml_job_status.isSet()) {
        obj.insert(QString("AutoMLJobStatus"), ::OpenAPI::toJsonValue(m_auto_ml_job_status));
    }
    if (m_auto_ml_job_secondary_status.isSet()) {
        obj.insert(QString("AutoMLJobSecondaryStatus"), ::OpenAPI::toJsonValue(m_auto_ml_job_secondary_status));
    }
    if (m_model_deploy_config.isSet()) {
        obj.insert(QString("ModelDeployConfig"), ::OpenAPI::toJsonValue(m_model_deploy_config));
    }
    if (m_model_deploy_result.isSet()) {
        obj.insert(QString("ModelDeployResult"), ::OpenAPI::toJsonValue(m_model_deploy_result));
    }
    if (m_data_split_config.isSet()) {
        obj.insert(QString("DataSplitConfig"), ::OpenAPI::toJsonValue(m_data_split_config));
    }
    if (m_security_config.isSet()) {
        obj.insert(QString("SecurityConfig"), ::OpenAPI::toJsonValue(m_security_config));
    }
    if (m_auto_ml_job_artifacts.isSet()) {
        obj.insert(QString("AutoMLJobArtifacts"), ::OpenAPI::toJsonValue(m_auto_ml_job_artifacts));
    }
    if (m_resolved_attributes.isSet()) {
        obj.insert(QString("ResolvedAttributes"), ::OpenAPI::toJsonValue(m_resolved_attributes));
    }
    if (m_auto_ml_problem_type_config_name.isSet()) {
        obj.insert(QString("AutoMLProblemTypeConfigName"), ::OpenAPI::toJsonValue(m_auto_ml_problem_type_config_name));
    }
    return obj;
}

QString OAIDescribeAutoMLJobV2Response::getAutoMlJobName() const {
    return m_auto_ml_job_name;
}
void OAIDescribeAutoMLJobV2Response::setAutoMlJobName(const QString &auto_ml_job_name) {
    m_auto_ml_job_name = auto_ml_job_name;
    m_auto_ml_job_name_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_name_Set() const{
    return m_auto_ml_job_name_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_name_Valid() const{
    return m_auto_ml_job_name_isValid;
}

QString OAIDescribeAutoMLJobV2Response::getAutoMlJobArn() const {
    return m_auto_ml_job_arn;
}
void OAIDescribeAutoMLJobV2Response::setAutoMlJobArn(const QString &auto_ml_job_arn) {
    m_auto_ml_job_arn = auto_ml_job_arn;
    m_auto_ml_job_arn_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_arn_Set() const{
    return m_auto_ml_job_arn_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_arn_Valid() const{
    return m_auto_ml_job_arn_isValid;
}

QList OAIDescribeAutoMLJobV2Response::getAutoMlJobInputDataConfig() const {
    return m_auto_ml_job_input_data_config;
}
void OAIDescribeAutoMLJobV2Response::setAutoMlJobInputDataConfig(const QList &auto_ml_job_input_data_config) {
    m_auto_ml_job_input_data_config = auto_ml_job_input_data_config;
    m_auto_ml_job_input_data_config_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_input_data_config_Set() const{
    return m_auto_ml_job_input_data_config_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_input_data_config_Valid() const{
    return m_auto_ml_job_input_data_config_isValid;
}

OAIDescribeAutoMLJobResponse_OutputDataConfig OAIDescribeAutoMLJobV2Response::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAIDescribeAutoMLJobV2Response::setOutputDataConfig(const OAIDescribeAutoMLJobResponse_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

QString OAIDescribeAutoMLJobV2Response::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeAutoMLJobV2Response::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIDescribeAutoMLJobResponse_AutoMLJobObjective OAIDescribeAutoMLJobV2Response::getAutoMlJobObjective() const {
    return m_auto_ml_job_objective;
}
void OAIDescribeAutoMLJobV2Response::setAutoMlJobObjective(const OAIDescribeAutoMLJobResponse_AutoMLJobObjective &auto_ml_job_objective) {
    m_auto_ml_job_objective = auto_ml_job_objective;
    m_auto_ml_job_objective_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_objective_Set() const{
    return m_auto_ml_job_objective_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_objective_Valid() const{
    return m_auto_ml_job_objective_isValid;
}

OAIDescribeAutoMLJobV2Response_AutoMLProblemTypeConfig OAIDescribeAutoMLJobV2Response::getAutoMlProblemTypeConfig() const {
    return m_auto_ml_problem_type_config;
}
void OAIDescribeAutoMLJobV2Response::setAutoMlProblemTypeConfig(const OAIDescribeAutoMLJobV2Response_AutoMLProblemTypeConfig &auto_ml_problem_type_config) {
    m_auto_ml_problem_type_config = auto_ml_problem_type_config;
    m_auto_ml_problem_type_config_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_problem_type_config_Set() const{
    return m_auto_ml_problem_type_config_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_problem_type_config_Valid() const{
    return m_auto_ml_problem_type_config_isValid;
}

QDateTime OAIDescribeAutoMLJobV2Response::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeAutoMLJobV2Response::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeAutoMLJobV2Response::getEndTime() const {
    return m_end_time;
}
void OAIDescribeAutoMLJobV2Response::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIDescribeAutoMLJobV2Response::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeAutoMLJobV2Response::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIDescribeAutoMLJobV2Response::getFailureReason() const {
    return m_failure_reason;
}
void OAIDescribeAutoMLJobV2Response::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QList OAIDescribeAutoMLJobV2Response::getPartialFailureReasons() const {
    return m_partial_failure_reasons;
}
void OAIDescribeAutoMLJobV2Response::setPartialFailureReasons(const QList &partial_failure_reasons) {
    m_partial_failure_reasons = partial_failure_reasons;
    m_partial_failure_reasons_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_partial_failure_reasons_Set() const{
    return m_partial_failure_reasons_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_partial_failure_reasons_Valid() const{
    return m_partial_failure_reasons_isValid;
}

OAIDescribeAutoMLJobV2Response_BestCandidate OAIDescribeAutoMLJobV2Response::getBestCandidate() const {
    return m_best_candidate;
}
void OAIDescribeAutoMLJobV2Response::setBestCandidate(const OAIDescribeAutoMLJobV2Response_BestCandidate &best_candidate) {
    m_best_candidate = best_candidate;
    m_best_candidate_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_best_candidate_Set() const{
    return m_best_candidate_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_best_candidate_Valid() const{
    return m_best_candidate_isValid;
}

OAIAutoMLJobStatus OAIDescribeAutoMLJobV2Response::getAutoMlJobStatus() const {
    return m_auto_ml_job_status;
}
void OAIDescribeAutoMLJobV2Response::setAutoMlJobStatus(const OAIAutoMLJobStatus &auto_ml_job_status) {
    m_auto_ml_job_status = auto_ml_job_status;
    m_auto_ml_job_status_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_status_Set() const{
    return m_auto_ml_job_status_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_status_Valid() const{
    return m_auto_ml_job_status_isValid;
}

OAIAutoMLJobSecondaryStatus OAIDescribeAutoMLJobV2Response::getAutoMlJobSecondaryStatus() const {
    return m_auto_ml_job_secondary_status;
}
void OAIDescribeAutoMLJobV2Response::setAutoMlJobSecondaryStatus(const OAIAutoMLJobSecondaryStatus &auto_ml_job_secondary_status) {
    m_auto_ml_job_secondary_status = auto_ml_job_secondary_status;
    m_auto_ml_job_secondary_status_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_secondary_status_Set() const{
    return m_auto_ml_job_secondary_status_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_secondary_status_Valid() const{
    return m_auto_ml_job_secondary_status_isValid;
}

OAIDescribeAutoMLJobResponse_ModelDeployConfig OAIDescribeAutoMLJobV2Response::getModelDeployConfig() const {
    return m_model_deploy_config;
}
void OAIDescribeAutoMLJobV2Response::setModelDeployConfig(const OAIDescribeAutoMLJobResponse_ModelDeployConfig &model_deploy_config) {
    m_model_deploy_config = model_deploy_config;
    m_model_deploy_config_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_model_deploy_config_Set() const{
    return m_model_deploy_config_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_model_deploy_config_Valid() const{
    return m_model_deploy_config_isValid;
}

OAIDescribeAutoMLJobResponse_ModelDeployResult OAIDescribeAutoMLJobV2Response::getModelDeployResult() const {
    return m_model_deploy_result;
}
void OAIDescribeAutoMLJobV2Response::setModelDeployResult(const OAIDescribeAutoMLJobResponse_ModelDeployResult &model_deploy_result) {
    m_model_deploy_result = model_deploy_result;
    m_model_deploy_result_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_model_deploy_result_Set() const{
    return m_model_deploy_result_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_model_deploy_result_Valid() const{
    return m_model_deploy_result_isValid;
}

OAIDescribeAutoMLJobV2Response_DataSplitConfig OAIDescribeAutoMLJobV2Response::getDataSplitConfig() const {
    return m_data_split_config;
}
void OAIDescribeAutoMLJobV2Response::setDataSplitConfig(const OAIDescribeAutoMLJobV2Response_DataSplitConfig &data_split_config) {
    m_data_split_config = data_split_config;
    m_data_split_config_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_data_split_config_Set() const{
    return m_data_split_config_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_data_split_config_Valid() const{
    return m_data_split_config_isValid;
}

OAIDescribeAutoMLJobV2Response_SecurityConfig OAIDescribeAutoMLJobV2Response::getSecurityConfig() const {
    return m_security_config;
}
void OAIDescribeAutoMLJobV2Response::setSecurityConfig(const OAIDescribeAutoMLJobV2Response_SecurityConfig &security_config) {
    m_security_config = security_config;
    m_security_config_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_security_config_Set() const{
    return m_security_config_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_security_config_Valid() const{
    return m_security_config_isValid;
}

OAIAutoMLJobArtifacts OAIDescribeAutoMLJobV2Response::getAutoMlJobArtifacts() const {
    return m_auto_ml_job_artifacts;
}
void OAIDescribeAutoMLJobV2Response::setAutoMlJobArtifacts(const OAIAutoMLJobArtifacts &auto_ml_job_artifacts) {
    m_auto_ml_job_artifacts = auto_ml_job_artifacts;
    m_auto_ml_job_artifacts_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_artifacts_Set() const{
    return m_auto_ml_job_artifacts_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_job_artifacts_Valid() const{
    return m_auto_ml_job_artifacts_isValid;
}

OAIDescribeAutoMLJobV2Response_ResolvedAttributes OAIDescribeAutoMLJobV2Response::getResolvedAttributes() const {
    return m_resolved_attributes;
}
void OAIDescribeAutoMLJobV2Response::setResolvedAttributes(const OAIDescribeAutoMLJobV2Response_ResolvedAttributes &resolved_attributes) {
    m_resolved_attributes = resolved_attributes;
    m_resolved_attributes_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_resolved_attributes_Set() const{
    return m_resolved_attributes_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_resolved_attributes_Valid() const{
    return m_resolved_attributes_isValid;
}

OAIAutoMLProblemTypeConfigName OAIDescribeAutoMLJobV2Response::getAutoMlProblemTypeConfigName() const {
    return m_auto_ml_problem_type_config_name;
}
void OAIDescribeAutoMLJobV2Response::setAutoMlProblemTypeConfigName(const OAIAutoMLProblemTypeConfigName &auto_ml_problem_type_config_name) {
    m_auto_ml_problem_type_config_name = auto_ml_problem_type_config_name;
    m_auto_ml_problem_type_config_name_isSet = true;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_problem_type_config_name_Set() const{
    return m_auto_ml_problem_type_config_name_isSet;
}

bool OAIDescribeAutoMLJobV2Response::is_auto_ml_problem_type_config_name_Valid() const{
    return m_auto_ml_problem_type_config_name_isValid;
}

bool OAIDescribeAutoMLJobV2Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_ml_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_objective.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_problem_type_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_failure_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_best_candidate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_secondary_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_deploy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_deploy_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_split_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_problem_type_config_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAutoMLJobV2Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_ml_job_name_isValid && m_auto_ml_job_arn_isValid && m_auto_ml_job_input_data_config_isValid && m_output_data_config_isValid && m_role_arn_isValid && m_creation_time_isValid && m_last_modified_time_isValid && m_auto_ml_job_status_isValid && m_auto_ml_job_secondary_status_isValid && true;
}

} // namespace OpenAPI
