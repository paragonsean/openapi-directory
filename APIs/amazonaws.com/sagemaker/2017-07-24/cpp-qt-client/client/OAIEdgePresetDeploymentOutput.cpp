/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdgePresetDeploymentOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdgePresetDeploymentOutput::OAIEdgePresetDeploymentOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdgePresetDeploymentOutput::OAIEdgePresetDeploymentOutput() {
    this->initializeModel();
}

OAIEdgePresetDeploymentOutput::~OAIEdgePresetDeploymentOutput() {}

void OAIEdgePresetDeploymentOutput::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_artifact_isSet = false;
    m_artifact_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIEdgePresetDeploymentOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdgePresetDeploymentOutput::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_artifact_isValid = ::OpenAPI::fromJsonValue(m_artifact, json[QString("Artifact")]);
    m_artifact_isSet = !json[QString("Artifact")].isNull() && m_artifact_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;
}

QString OAIEdgePresetDeploymentOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdgePresetDeploymentOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_artifact_isSet) {
        obj.insert(QString("Artifact"), ::OpenAPI::toJsonValue(m_artifact));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

OAIEdgePresetDeploymentType OAIEdgePresetDeploymentOutput::getType() const {
    return m_type;
}
void OAIEdgePresetDeploymentOutput::setType(const OAIEdgePresetDeploymentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEdgePresetDeploymentOutput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEdgePresetDeploymentOutput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEdgePresetDeploymentOutput::getArtifact() const {
    return m_artifact;
}
void OAIEdgePresetDeploymentOutput::setArtifact(const QString &artifact) {
    m_artifact = artifact;
    m_artifact_isSet = true;
}

bool OAIEdgePresetDeploymentOutput::is_artifact_Set() const{
    return m_artifact_isSet;
}

bool OAIEdgePresetDeploymentOutput::is_artifact_Valid() const{
    return m_artifact_isValid;
}

OAIEdgePresetDeploymentStatus OAIEdgePresetDeploymentOutput::getStatus() const {
    return m_status;
}
void OAIEdgePresetDeploymentOutput::setStatus(const OAIEdgePresetDeploymentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEdgePresetDeploymentOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEdgePresetDeploymentOutput::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEdgePresetDeploymentOutput::getStatusMessage() const {
    return m_status_message;
}
void OAIEdgePresetDeploymentOutput::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIEdgePresetDeploymentOutput::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIEdgePresetDeploymentOutput::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIEdgePresetDeploymentOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdgePresetDeploymentOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
