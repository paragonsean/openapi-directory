/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRecord::OAISearchRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRecord::OAISearchRecord() {
    this->initializeModel();
}

OAISearchRecord::~OAISearchRecord() {}

void OAISearchRecord::initializeModel() {

    m_training_job_isSet = false;
    m_training_job_isValid = false;

    m_experiment_isSet = false;
    m_experiment_isValid = false;

    m_trial_isSet = false;
    m_trial_isValid = false;

    m_trial_component_isSet = false;
    m_trial_component_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_model_package_isSet = false;
    m_model_package_isValid = false;

    m_model_package_group_isSet = false;
    m_model_package_group_isValid = false;

    m_pipeline_isSet = false;
    m_pipeline_isValid = false;

    m_pipeline_execution_isSet = false;
    m_pipeline_execution_isValid = false;

    m_feature_group_isSet = false;
    m_feature_group_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_feature_metadata_isSet = false;
    m_feature_metadata_isValid = false;

    m_hyper_parameter_tuning_job_isSet = false;
    m_hyper_parameter_tuning_job_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_model_card_isSet = false;
    m_model_card_isValid = false;
}

void OAISearchRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRecord::fromJsonObject(QJsonObject json) {

    m_training_job_isValid = ::OpenAPI::fromJsonValue(m_training_job, json[QString("TrainingJob")]);
    m_training_job_isSet = !json[QString("TrainingJob")].isNull() && m_training_job_isValid;

    m_experiment_isValid = ::OpenAPI::fromJsonValue(m_experiment, json[QString("Experiment")]);
    m_experiment_isSet = !json[QString("Experiment")].isNull() && m_experiment_isValid;

    m_trial_isValid = ::OpenAPI::fromJsonValue(m_trial, json[QString("Trial")]);
    m_trial_isSet = !json[QString("Trial")].isNull() && m_trial_isValid;

    m_trial_component_isValid = ::OpenAPI::fromJsonValue(m_trial_component, json[QString("TrialComponent")]);
    m_trial_component_isSet = !json[QString("TrialComponent")].isNull() && m_trial_component_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_model_package_isValid = ::OpenAPI::fromJsonValue(m_model_package, json[QString("ModelPackage")]);
    m_model_package_isSet = !json[QString("ModelPackage")].isNull() && m_model_package_isValid;

    m_model_package_group_isValid = ::OpenAPI::fromJsonValue(m_model_package_group, json[QString("ModelPackageGroup")]);
    m_model_package_group_isSet = !json[QString("ModelPackageGroup")].isNull() && m_model_package_group_isValid;

    m_pipeline_isValid = ::OpenAPI::fromJsonValue(m_pipeline, json[QString("Pipeline")]);
    m_pipeline_isSet = !json[QString("Pipeline")].isNull() && m_pipeline_isValid;

    m_pipeline_execution_isValid = ::OpenAPI::fromJsonValue(m_pipeline_execution, json[QString("PipelineExecution")]);
    m_pipeline_execution_isSet = !json[QString("PipelineExecution")].isNull() && m_pipeline_execution_isValid;

    m_feature_group_isValid = ::OpenAPI::fromJsonValue(m_feature_group, json[QString("FeatureGroup")]);
    m_feature_group_isSet = !json[QString("FeatureGroup")].isNull() && m_feature_group_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("Project")]);
    m_project_isSet = !json[QString("Project")].isNull() && m_project_isValid;

    m_feature_metadata_isValid = ::OpenAPI::fromJsonValue(m_feature_metadata, json[QString("FeatureMetadata")]);
    m_feature_metadata_isSet = !json[QString("FeatureMetadata")].isNull() && m_feature_metadata_isValid;

    m_hyper_parameter_tuning_job_isValid = ::OpenAPI::fromJsonValue(m_hyper_parameter_tuning_job, json[QString("HyperParameterTuningJob")]);
    m_hyper_parameter_tuning_job_isSet = !json[QString("HyperParameterTuningJob")].isNull() && m_hyper_parameter_tuning_job_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("Model")]);
    m_model_isSet = !json[QString("Model")].isNull() && m_model_isValid;

    m_model_card_isValid = ::OpenAPI::fromJsonValue(m_model_card, json[QString("ModelCard")]);
    m_model_card_isSet = !json[QString("ModelCard")].isNull() && m_model_card_isValid;
}

QString OAISearchRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_training_job.isSet()) {
        obj.insert(QString("TrainingJob"), ::OpenAPI::toJsonValue(m_training_job));
    }
    if (m_experiment.isSet()) {
        obj.insert(QString("Experiment"), ::OpenAPI::toJsonValue(m_experiment));
    }
    if (m_trial.isSet()) {
        obj.insert(QString("Trial"), ::OpenAPI::toJsonValue(m_trial));
    }
    if (m_trial_component.isSet()) {
        obj.insert(QString("TrialComponent"), ::OpenAPI::toJsonValue(m_trial_component));
    }
    if (m_endpoint.isSet()) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_model_package.isSet()) {
        obj.insert(QString("ModelPackage"), ::OpenAPI::toJsonValue(m_model_package));
    }
    if (m_model_package_group.isSet()) {
        obj.insert(QString("ModelPackageGroup"), ::OpenAPI::toJsonValue(m_model_package_group));
    }
    if (m_pipeline.isSet()) {
        obj.insert(QString("Pipeline"), ::OpenAPI::toJsonValue(m_pipeline));
    }
    if (m_pipeline_execution.isSet()) {
        obj.insert(QString("PipelineExecution"), ::OpenAPI::toJsonValue(m_pipeline_execution));
    }
    if (m_feature_group.isSet()) {
        obj.insert(QString("FeatureGroup"), ::OpenAPI::toJsonValue(m_feature_group));
    }
    if (m_project.isSet()) {
        obj.insert(QString("Project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_feature_metadata.isSet()) {
        obj.insert(QString("FeatureMetadata"), ::OpenAPI::toJsonValue(m_feature_metadata));
    }
    if (m_hyper_parameter_tuning_job.isSet()) {
        obj.insert(QString("HyperParameterTuningJob"), ::OpenAPI::toJsonValue(m_hyper_parameter_tuning_job));
    }
    if (m_model.isSet()) {
        obj.insert(QString("Model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_model_card.isSet()) {
        obj.insert(QString("ModelCard"), ::OpenAPI::toJsonValue(m_model_card));
    }
    return obj;
}

OAISearchRecord_TrainingJob OAISearchRecord::getTrainingJob() const {
    return m_training_job;
}
void OAISearchRecord::setTrainingJob(const OAISearchRecord_TrainingJob &training_job) {
    m_training_job = training_job;
    m_training_job_isSet = true;
}

bool OAISearchRecord::is_training_job_Set() const{
    return m_training_job_isSet;
}

bool OAISearchRecord::is_training_job_Valid() const{
    return m_training_job_isValid;
}

OAISearchRecord_Experiment OAISearchRecord::getExperiment() const {
    return m_experiment;
}
void OAISearchRecord::setExperiment(const OAISearchRecord_Experiment &experiment) {
    m_experiment = experiment;
    m_experiment_isSet = true;
}

bool OAISearchRecord::is_experiment_Set() const{
    return m_experiment_isSet;
}

bool OAISearchRecord::is_experiment_Valid() const{
    return m_experiment_isValid;
}

OAISearchRecord_Trial OAISearchRecord::getTrial() const {
    return m_trial;
}
void OAISearchRecord::setTrial(const OAISearchRecord_Trial &trial) {
    m_trial = trial;
    m_trial_isSet = true;
}

bool OAISearchRecord::is_trial_Set() const{
    return m_trial_isSet;
}

bool OAISearchRecord::is_trial_Valid() const{
    return m_trial_isValid;
}

OAISearchRecord_TrialComponent OAISearchRecord::getTrialComponent() const {
    return m_trial_component;
}
void OAISearchRecord::setTrialComponent(const OAISearchRecord_TrialComponent &trial_component) {
    m_trial_component = trial_component;
    m_trial_component_isSet = true;
}

bool OAISearchRecord::is_trial_component_Set() const{
    return m_trial_component_isSet;
}

bool OAISearchRecord::is_trial_component_Valid() const{
    return m_trial_component_isValid;
}

OAIEndpoint OAISearchRecord::getEndpoint() const {
    return m_endpoint;
}
void OAISearchRecord::setEndpoint(const OAIEndpoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAISearchRecord::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAISearchRecord::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

OAIModelPackage OAISearchRecord::getModelPackage() const {
    return m_model_package;
}
void OAISearchRecord::setModelPackage(const OAIModelPackage &model_package) {
    m_model_package = model_package;
    m_model_package_isSet = true;
}

bool OAISearchRecord::is_model_package_Set() const{
    return m_model_package_isSet;
}

bool OAISearchRecord::is_model_package_Valid() const{
    return m_model_package_isValid;
}

OAIModelPackageGroup OAISearchRecord::getModelPackageGroup() const {
    return m_model_package_group;
}
void OAISearchRecord::setModelPackageGroup(const OAIModelPackageGroup &model_package_group) {
    m_model_package_group = model_package_group;
    m_model_package_group_isSet = true;
}

bool OAISearchRecord::is_model_package_group_Set() const{
    return m_model_package_group_isSet;
}

bool OAISearchRecord::is_model_package_group_Valid() const{
    return m_model_package_group_isValid;
}

OAIPipeline OAISearchRecord::getPipeline() const {
    return m_pipeline;
}
void OAISearchRecord::setPipeline(const OAIPipeline &pipeline) {
    m_pipeline = pipeline;
    m_pipeline_isSet = true;
}

bool OAISearchRecord::is_pipeline_Set() const{
    return m_pipeline_isSet;
}

bool OAISearchRecord::is_pipeline_Valid() const{
    return m_pipeline_isValid;
}

OAIPipelineExecution OAISearchRecord::getPipelineExecution() const {
    return m_pipeline_execution;
}
void OAISearchRecord::setPipelineExecution(const OAIPipelineExecution &pipeline_execution) {
    m_pipeline_execution = pipeline_execution;
    m_pipeline_execution_isSet = true;
}

bool OAISearchRecord::is_pipeline_execution_Set() const{
    return m_pipeline_execution_isSet;
}

bool OAISearchRecord::is_pipeline_execution_Valid() const{
    return m_pipeline_execution_isValid;
}

OAIFeatureGroup OAISearchRecord::getFeatureGroup() const {
    return m_feature_group;
}
void OAISearchRecord::setFeatureGroup(const OAIFeatureGroup &feature_group) {
    m_feature_group = feature_group;
    m_feature_group_isSet = true;
}

bool OAISearchRecord::is_feature_group_Set() const{
    return m_feature_group_isSet;
}

bool OAISearchRecord::is_feature_group_Valid() const{
    return m_feature_group_isValid;
}

OAISearchRecord_Project OAISearchRecord::getProject() const {
    return m_project;
}
void OAISearchRecord::setProject(const OAISearchRecord_Project &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAISearchRecord::is_project_Set() const{
    return m_project_isSet;
}

bool OAISearchRecord::is_project_Valid() const{
    return m_project_isValid;
}

OAISearchRecord_FeatureMetadata OAISearchRecord::getFeatureMetadata() const {
    return m_feature_metadata;
}
void OAISearchRecord::setFeatureMetadata(const OAISearchRecord_FeatureMetadata &feature_metadata) {
    m_feature_metadata = feature_metadata;
    m_feature_metadata_isSet = true;
}

bool OAISearchRecord::is_feature_metadata_Set() const{
    return m_feature_metadata_isSet;
}

bool OAISearchRecord::is_feature_metadata_Valid() const{
    return m_feature_metadata_isValid;
}

OAISearchRecord_HyperParameterTuningJob OAISearchRecord::getHyperParameterTuningJob() const {
    return m_hyper_parameter_tuning_job;
}
void OAISearchRecord::setHyperParameterTuningJob(const OAISearchRecord_HyperParameterTuningJob &hyper_parameter_tuning_job) {
    m_hyper_parameter_tuning_job = hyper_parameter_tuning_job;
    m_hyper_parameter_tuning_job_isSet = true;
}

bool OAISearchRecord::is_hyper_parameter_tuning_job_Set() const{
    return m_hyper_parameter_tuning_job_isSet;
}

bool OAISearchRecord::is_hyper_parameter_tuning_job_Valid() const{
    return m_hyper_parameter_tuning_job_isValid;
}

OAIModelDashboardModel OAISearchRecord::getModel() const {
    return m_model;
}
void OAISearchRecord::setModel(const OAIModelDashboardModel &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAISearchRecord::is_model_Set() const{
    return m_model_isSet;
}

bool OAISearchRecord::is_model_Valid() const{
    return m_model_isValid;
}

OAISearchRecord_ModelCard OAISearchRecord::getModelCard() const {
    return m_model_card;
}
void OAISearchRecord::setModelCard(const OAISearchRecord_ModelCard &model_card) {
    m_model_card = model_card;
    m_model_card_isSet = true;
}

bool OAISearchRecord::is_model_card_Set() const{
    return m_model_card_isSet;
}

bool OAISearchRecord::is_model_card_Valid() const{
    return m_model_card_isValid;
}

bool OAISearchRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_training_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_component.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyper_parameter_tuning_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_card.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
