/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelPackageValidationProfile_TransformJobDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelPackageValidationProfile_TransformJobDefinition::OAIModelPackageValidationProfile_TransformJobDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelPackageValidationProfile_TransformJobDefinition::OAIModelPackageValidationProfile_TransformJobDefinition() {
    this->initializeModel();
}

OAIModelPackageValidationProfile_TransformJobDefinition::~OAIModelPackageValidationProfile_TransformJobDefinition() {}

void OAIModelPackageValidationProfile_TransformJobDefinition::initializeModel() {

    m_max_concurrent_transforms_isSet = false;
    m_max_concurrent_transforms_isValid = false;

    m_max_payload_in_mb_isSet = false;
    m_max_payload_in_mb_isValid = false;

    m_batch_strategy_isSet = false;
    m_batch_strategy_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_transform_input_isSet = false;
    m_transform_input_isValid = false;

    m_transform_output_isSet = false;
    m_transform_output_isValid = false;

    m_transform_resources_isSet = false;
    m_transform_resources_isValid = false;
}

void OAIModelPackageValidationProfile_TransformJobDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelPackageValidationProfile_TransformJobDefinition::fromJsonObject(QJsonObject json) {

    m_max_concurrent_transforms_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_transforms, json[QString("MaxConcurrentTransforms")]);
    m_max_concurrent_transforms_isSet = !json[QString("MaxConcurrentTransforms")].isNull() && m_max_concurrent_transforms_isValid;

    m_max_payload_in_mb_isValid = ::OpenAPI::fromJsonValue(m_max_payload_in_mb, json[QString("MaxPayloadInMB")]);
    m_max_payload_in_mb_isSet = !json[QString("MaxPayloadInMB")].isNull() && m_max_payload_in_mb_isValid;

    m_batch_strategy_isValid = ::OpenAPI::fromJsonValue(m_batch_strategy, json[QString("BatchStrategy")]);
    m_batch_strategy_isSet = !json[QString("BatchStrategy")].isNull() && m_batch_strategy_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_transform_input_isValid = ::OpenAPI::fromJsonValue(m_transform_input, json[QString("TransformInput")]);
    m_transform_input_isSet = !json[QString("TransformInput")].isNull() && m_transform_input_isValid;

    m_transform_output_isValid = ::OpenAPI::fromJsonValue(m_transform_output, json[QString("TransformOutput")]);
    m_transform_output_isSet = !json[QString("TransformOutput")].isNull() && m_transform_output_isValid;

    m_transform_resources_isValid = ::OpenAPI::fromJsonValue(m_transform_resources, json[QString("TransformResources")]);
    m_transform_resources_isSet = !json[QString("TransformResources")].isNull() && m_transform_resources_isValid;
}

QString OAIModelPackageValidationProfile_TransformJobDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelPackageValidationProfile_TransformJobDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_max_concurrent_transforms_isSet) {
        obj.insert(QString("MaxConcurrentTransforms"), ::OpenAPI::toJsonValue(m_max_concurrent_transforms));
    }
    if (m_max_payload_in_mb_isSet) {
        obj.insert(QString("MaxPayloadInMB"), ::OpenAPI::toJsonValue(m_max_payload_in_mb));
    }
    if (m_batch_strategy.isSet()) {
        obj.insert(QString("BatchStrategy"), ::OpenAPI::toJsonValue(m_batch_strategy));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_transform_input.isSet()) {
        obj.insert(QString("TransformInput"), ::OpenAPI::toJsonValue(m_transform_input));
    }
    if (m_transform_output.isSet()) {
        obj.insert(QString("TransformOutput"), ::OpenAPI::toJsonValue(m_transform_output));
    }
    if (m_transform_resources.isSet()) {
        obj.insert(QString("TransformResources"), ::OpenAPI::toJsonValue(m_transform_resources));
    }
    return obj;
}

qint32 OAIModelPackageValidationProfile_TransformJobDefinition::getMaxConcurrentTransforms() const {
    return m_max_concurrent_transforms;
}
void OAIModelPackageValidationProfile_TransformJobDefinition::setMaxConcurrentTransforms(const qint32 &max_concurrent_transforms) {
    m_max_concurrent_transforms = max_concurrent_transforms;
    m_max_concurrent_transforms_isSet = true;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_max_concurrent_transforms_Set() const{
    return m_max_concurrent_transforms_isSet;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_max_concurrent_transforms_Valid() const{
    return m_max_concurrent_transforms_isValid;
}

qint32 OAIModelPackageValidationProfile_TransformJobDefinition::getMaxPayloadInMb() const {
    return m_max_payload_in_mb;
}
void OAIModelPackageValidationProfile_TransformJobDefinition::setMaxPayloadInMb(const qint32 &max_payload_in_mb) {
    m_max_payload_in_mb = max_payload_in_mb;
    m_max_payload_in_mb_isSet = true;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_max_payload_in_mb_Set() const{
    return m_max_payload_in_mb_isSet;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_max_payload_in_mb_Valid() const{
    return m_max_payload_in_mb_isValid;
}

OAIBatchStrategy OAIModelPackageValidationProfile_TransformJobDefinition::getBatchStrategy() const {
    return m_batch_strategy;
}
void OAIModelPackageValidationProfile_TransformJobDefinition::setBatchStrategy(const OAIBatchStrategy &batch_strategy) {
    m_batch_strategy = batch_strategy;
    m_batch_strategy_isSet = true;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_batch_strategy_Set() const{
    return m_batch_strategy_isSet;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_batch_strategy_Valid() const{
    return m_batch_strategy_isValid;
}

QMap OAIModelPackageValidationProfile_TransformJobDefinition::getEnvironment() const {
    return m_environment;
}
void OAIModelPackageValidationProfile_TransformJobDefinition::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_environment_Valid() const{
    return m_environment_isValid;
}

OAITransformJobDefinition_TransformInput OAIModelPackageValidationProfile_TransformJobDefinition::getTransformInput() const {
    return m_transform_input;
}
void OAIModelPackageValidationProfile_TransformJobDefinition::setTransformInput(const OAITransformJobDefinition_TransformInput &transform_input) {
    m_transform_input = transform_input;
    m_transform_input_isSet = true;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_transform_input_Set() const{
    return m_transform_input_isSet;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_transform_input_Valid() const{
    return m_transform_input_isValid;
}

OAIDescribeTransformJobResponse_TransformOutput OAIModelPackageValidationProfile_TransformJobDefinition::getTransformOutput() const {
    return m_transform_output;
}
void OAIModelPackageValidationProfile_TransformJobDefinition::setTransformOutput(const OAIDescribeTransformJobResponse_TransformOutput &transform_output) {
    m_transform_output = transform_output;
    m_transform_output_isSet = true;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_transform_output_Set() const{
    return m_transform_output_isSet;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_transform_output_Valid() const{
    return m_transform_output_isValid;
}

OAITransformJobDefinition_TransformResources OAIModelPackageValidationProfile_TransformJobDefinition::getTransformResources() const {
    return m_transform_resources;
}
void OAIModelPackageValidationProfile_TransformJobDefinition::setTransformResources(const OAITransformJobDefinition_TransformResources &transform_resources) {
    m_transform_resources = transform_resources;
    m_transform_resources_isSet = true;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_transform_resources_Set() const{
    return m_transform_resources_isSet;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::is_transform_resources_Valid() const{
    return m_transform_resources_isValid;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_concurrent_transforms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_payload_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelPackageValidationProfile_TransformJobDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transform_input_isValid && m_transform_output_isValid && m_transform_resources_isValid && true;
}

} // namespace OpenAPI
