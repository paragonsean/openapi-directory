/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferenceExperimentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferenceExperimentSummary::OAIInferenceExperimentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferenceExperimentSummary::OAIInferenceExperimentSummary() {
    this->initializeModel();
}

OAIInferenceExperimentSummary::~OAIInferenceExperimentSummary() {}

void OAIInferenceExperimentSummary::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIInferenceExperimentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInferenceExperimentSummary::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("CompletionTime")]);
    m_completion_time_isSet = !json[QString("CompletionTime")].isNull() && m_completion_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIInferenceExperimentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInferenceExperimentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("CompletionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIInferenceExperimentSummary::getName() const {
    return m_name;
}
void OAIInferenceExperimentSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInferenceExperimentSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInferenceExperimentSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIInferenceExperimentType OAIInferenceExperimentSummary::getType() const {
    return m_type;
}
void OAIInferenceExperimentSummary::setType(const OAIInferenceExperimentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInferenceExperimentSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInferenceExperimentSummary::is_type_Valid() const{
    return m_type_isValid;
}

OAIInferenceExperimentSummary_Schedule OAIInferenceExperimentSummary::getSchedule() const {
    return m_schedule;
}
void OAIInferenceExperimentSummary::setSchedule(const OAIInferenceExperimentSummary_Schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIInferenceExperimentSummary::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIInferenceExperimentSummary::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAIInferenceExperimentStatus OAIInferenceExperimentSummary::getStatus() const {
    return m_status;
}
void OAIInferenceExperimentSummary::setStatus(const OAIInferenceExperimentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInferenceExperimentSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInferenceExperimentSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInferenceExperimentSummary::getStatusReason() const {
    return m_status_reason;
}
void OAIInferenceExperimentSummary::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIInferenceExperimentSummary::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIInferenceExperimentSummary::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QString OAIInferenceExperimentSummary::getDescription() const {
    return m_description;
}
void OAIInferenceExperimentSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInferenceExperimentSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInferenceExperimentSummary::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIInferenceExperimentSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIInferenceExperimentSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIInferenceExperimentSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIInferenceExperimentSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIInferenceExperimentSummary::getCompletionTime() const {
    return m_completion_time;
}
void OAIInferenceExperimentSummary::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIInferenceExperimentSummary::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIInferenceExperimentSummary::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QDateTime OAIInferenceExperimentSummary::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIInferenceExperimentSummary::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIInferenceExperimentSummary::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIInferenceExperimentSummary::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIInferenceExperimentSummary::getRoleArn() const {
    return m_role_arn;
}
void OAIInferenceExperimentSummary::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIInferenceExperimentSummary::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIInferenceExperimentSummary::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIInferenceExperimentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInferenceExperimentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_status_isValid && m_creation_time_isValid && m_last_modified_time_isValid && true;
}

} // namespace OpenAPI
