/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProcessingInput.h
 *
 * The inputs for a processing job. The processing input must specify exactly one of either &lt;code&gt;S3Input&lt;/code&gt; or &lt;code&gt;DatasetDefinition&lt;/code&gt; types.
 */

#ifndef OAIProcessingInput_H
#define OAIProcessingInput_H

#include <QJsonObject>

#include "OAIProcessingInput_DatasetDefinition.h"
#include "OAIProcessingInput_S3Input.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProcessingInput_S3Input;
class OAIProcessingInput_DatasetDefinition;

class OAIProcessingInput : public OAIObject {
public:
    OAIProcessingInput();
    OAIProcessingInput(QString json);
    ~OAIProcessingInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInputName() const;
    void setInputName(const QString &input_name);
    bool is_input_name_Set() const;
    bool is_input_name_Valid() const;

    bool getAppManaged() const;
    void setAppManaged(const bool &app_managed);
    bool is_app_managed_Set() const;
    bool is_app_managed_Valid() const;

    OAIProcessingInput_S3Input getS3Input() const;
    void setS3Input(const OAIProcessingInput_S3Input &s3_input);
    bool is_s3_input_Set() const;
    bool is_s3_input_Valid() const;

    OAIProcessingInput_DatasetDefinition getDatasetDefinition() const;
    void setDatasetDefinition(const OAIProcessingInput_DatasetDefinition &dataset_definition);
    bool is_dataset_definition_Set() const;
    bool is_dataset_definition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_input_name;
    bool m_input_name_isSet;
    bool m_input_name_isValid;

    bool m_app_managed;
    bool m_app_managed_isSet;
    bool m_app_managed_isValid;

    OAIProcessingInput_S3Input m_s3_input;
    bool m_s3_input_isSet;
    bool m_s3_input_isValid;

    OAIProcessingInput_DatasetDefinition m_dataset_definition;
    bool m_dataset_definition_isSet;
    bool m_dataset_definition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProcessingInput)

#endif // OAIProcessingInput_H
