/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceType::OAIResourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceType::OAIResourceType() {
    this->initializeModel();
}

OAIResourceType::~OAIResourceType() {}

void OAIResourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIResourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIResourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TrainingJob", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::TRAININGJOB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Experiment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::EXPERIMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExperimentTrial", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::EXPERIMENTTRIAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExperimentTrialComponent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::EXPERIMENTTRIALCOMPONENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Endpoint", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::ENDPOINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ModelPackage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::MODELPACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ModelPackageGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::MODELPACKAGEGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pipeline", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::PIPELINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PipelineExecution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::PIPELINEEXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FeatureGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::FEATUREGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Project", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::PROJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FeatureMetadata", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::FEATUREMETADATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HyperParameterTuningJob", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::HYPERPARAMETERTUNINGJOB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ModelCard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::MODELCARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Model", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceType::MODEL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIResourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIResourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIResourceType::TRAININGJOB:
            val = "TrainingJob";
            break;
        case eOAIResourceType::EXPERIMENT:
            val = "Experiment";
            break;
        case eOAIResourceType::EXPERIMENTTRIAL:
            val = "ExperimentTrial";
            break;
        case eOAIResourceType::EXPERIMENTTRIALCOMPONENT:
            val = "ExperimentTrialComponent";
            break;
        case eOAIResourceType::ENDPOINT:
            val = "Endpoint";
            break;
        case eOAIResourceType::MODELPACKAGE:
            val = "ModelPackage";
            break;
        case eOAIResourceType::MODELPACKAGEGROUP:
            val = "ModelPackageGroup";
            break;
        case eOAIResourceType::PIPELINE:
            val = "Pipeline";
            break;
        case eOAIResourceType::PIPELINEEXECUTION:
            val = "PipelineExecution";
            break;
        case eOAIResourceType::FEATUREGROUP:
            val = "FeatureGroup";
            break;
        case eOAIResourceType::PROJECT:
            val = "Project";
            break;
        case eOAIResourceType::FEATUREMETADATA:
            val = "FeatureMetadata";
            break;
        case eOAIResourceType::HYPERPARAMETERTUNINGJOB:
            val = "HyperParameterTuningJob";
            break;
        case eOAIResourceType::MODELCARD:
            val = "ModelCard";
            break;
        case eOAIResourceType::MODEL:
            val = "Model";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIResourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIResourceType::eOAIResourceType OAIResourceType::getValue() const {
    return m_value;
}

void OAIResourceType::setValue(const OAIResourceType::eOAIResourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIResourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIResourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
