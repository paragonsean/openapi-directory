/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformInstanceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformInstanceType::OAITransformInstanceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformInstanceType::OAITransformInstanceType() {
    this->initializeModel();
}

OAITransformInstanceType::~OAITransformInstanceType() {}

void OAITransformInstanceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITransformInstanceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITransformInstanceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ml.m4.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M4_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m4.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M4_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m4.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M4_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m4.10xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M4_10XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m4.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M4_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c4.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::C4_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c4.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::C4_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c4.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::C4_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c4.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::C4_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p2.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::P2_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p2.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::P2_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p2.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::P2_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p3.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::P3_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p3.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::P3_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p3.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::P3_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::C5_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::C5_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::C5_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.9xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::C5_9XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.18xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::C5_18XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.large", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M5_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M5_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M5_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M5_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.12xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M5_12XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.24xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::M5_24XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::G4DN_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::G4DN_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::G4DN_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::G4DN_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.12xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::G4DN_12XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransformInstanceType::G4DN_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITransformInstanceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITransformInstanceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITransformInstanceType::M4_XLARGE:
            val = "ml.m4.xlarge";
            break;
        case eOAITransformInstanceType::M4_2XLARGE:
            val = "ml.m4.2xlarge";
            break;
        case eOAITransformInstanceType::M4_4XLARGE:
            val = "ml.m4.4xlarge";
            break;
        case eOAITransformInstanceType::M4_10XLARGE:
            val = "ml.m4.10xlarge";
            break;
        case eOAITransformInstanceType::M4_16XLARGE:
            val = "ml.m4.16xlarge";
            break;
        case eOAITransformInstanceType::C4_XLARGE:
            val = "ml.c4.xlarge";
            break;
        case eOAITransformInstanceType::C4_2XLARGE:
            val = "ml.c4.2xlarge";
            break;
        case eOAITransformInstanceType::C4_4XLARGE:
            val = "ml.c4.4xlarge";
            break;
        case eOAITransformInstanceType::C4_8XLARGE:
            val = "ml.c4.8xlarge";
            break;
        case eOAITransformInstanceType::P2_XLARGE:
            val = "ml.p2.xlarge";
            break;
        case eOAITransformInstanceType::P2_8XLARGE:
            val = "ml.p2.8xlarge";
            break;
        case eOAITransformInstanceType::P2_16XLARGE:
            val = "ml.p2.16xlarge";
            break;
        case eOAITransformInstanceType::P3_2XLARGE:
            val = "ml.p3.2xlarge";
            break;
        case eOAITransformInstanceType::P3_8XLARGE:
            val = "ml.p3.8xlarge";
            break;
        case eOAITransformInstanceType::P3_16XLARGE:
            val = "ml.p3.16xlarge";
            break;
        case eOAITransformInstanceType::C5_XLARGE:
            val = "ml.c5.xlarge";
            break;
        case eOAITransformInstanceType::C5_2XLARGE:
            val = "ml.c5.2xlarge";
            break;
        case eOAITransformInstanceType::C5_4XLARGE:
            val = "ml.c5.4xlarge";
            break;
        case eOAITransformInstanceType::C5_9XLARGE:
            val = "ml.c5.9xlarge";
            break;
        case eOAITransformInstanceType::C5_18XLARGE:
            val = "ml.c5.18xlarge";
            break;
        case eOAITransformInstanceType::M5_LARGE:
            val = "ml.m5.large";
            break;
        case eOAITransformInstanceType::M5_XLARGE:
            val = "ml.m5.xlarge";
            break;
        case eOAITransformInstanceType::M5_2XLARGE:
            val = "ml.m5.2xlarge";
            break;
        case eOAITransformInstanceType::M5_4XLARGE:
            val = "ml.m5.4xlarge";
            break;
        case eOAITransformInstanceType::M5_12XLARGE:
            val = "ml.m5.12xlarge";
            break;
        case eOAITransformInstanceType::M5_24XLARGE:
            val = "ml.m5.24xlarge";
            break;
        case eOAITransformInstanceType::G4DN_XLARGE:
            val = "ml.g4dn.xlarge";
            break;
        case eOAITransformInstanceType::G4DN_2XLARGE:
            val = "ml.g4dn.2xlarge";
            break;
        case eOAITransformInstanceType::G4DN_4XLARGE:
            val = "ml.g4dn.4xlarge";
            break;
        case eOAITransformInstanceType::G4DN_8XLARGE:
            val = "ml.g4dn.8xlarge";
            break;
        case eOAITransformInstanceType::G4DN_12XLARGE:
            val = "ml.g4dn.12xlarge";
            break;
        case eOAITransformInstanceType::G4DN_16XLARGE:
            val = "ml.g4dn.16xlarge";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITransformInstanceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITransformInstanceType::eOAITransformInstanceType OAITransformInstanceType::getValue() const {
    return m_value;
}

void OAITransformInstanceType::setValue(const OAITransformInstanceType::eOAITransformInstanceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITransformInstanceType::isSet() const {
    
    return m_value_isSet;
}

bool OAITransformInstanceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
