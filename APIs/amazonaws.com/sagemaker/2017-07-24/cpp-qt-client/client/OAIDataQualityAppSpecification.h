/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataQualityAppSpecification.h
 *
 * Information about the container that a data quality monitoring job runs.
 */

#ifndef OAIDataQualityAppSpecification_H
#define OAIDataQualityAppSpecification_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDataQualityAppSpecification : public OAIObject {
public:
    OAIDataQualityAppSpecification();
    OAIDataQualityAppSpecification(QString json);
    ~OAIDataQualityAppSpecification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getImageUri() const;
    void setImageUri(const QString &image_uri);
    bool is_image_uri_Set() const;
    bool is_image_uri_Valid() const;

    QList getContainerEntrypoint() const;
    void setContainerEntrypoint(const QList &container_entrypoint);
    bool is_container_entrypoint_Set() const;
    bool is_container_entrypoint_Valid() const;

    QList getContainerArguments() const;
    void setContainerArguments(const QList &container_arguments);
    bool is_container_arguments_Set() const;
    bool is_container_arguments_Valid() const;

    QString getRecordPreprocessorSourceUri() const;
    void setRecordPreprocessorSourceUri(const QString &record_preprocessor_source_uri);
    bool is_record_preprocessor_source_uri_Set() const;
    bool is_record_preprocessor_source_uri_Valid() const;

    QString getPostAnalyticsProcessorSourceUri() const;
    void setPostAnalyticsProcessorSourceUri(const QString &post_analytics_processor_source_uri);
    bool is_post_analytics_processor_source_uri_Set() const;
    bool is_post_analytics_processor_source_uri_Valid() const;

    QMap getEnvironment() const;
    void setEnvironment(const QMap &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_image_uri;
    bool m_image_uri_isSet;
    bool m_image_uri_isValid;

    QList m_container_entrypoint;
    bool m_container_entrypoint_isSet;
    bool m_container_entrypoint_isValid;

    QList m_container_arguments;
    bool m_container_arguments_isSet;
    bool m_container_arguments_isValid;

    QString m_record_preprocessor_source_uri;
    bool m_record_preprocessor_source_uri_isSet;
    bool m_record_preprocessor_source_uri_isValid;

    QString m_post_analytics_processor_source_uri;
    bool m_post_analytics_processor_source_uri_isSet;
    bool m_post_analytics_processor_source_uri_isValid;

    QMap m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataQualityAppSpecification)

#endif // OAIDataQualityAppSpecification_H
