/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateArtifactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateArtifactRequest::OAIUpdateArtifactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateArtifactRequest::OAIUpdateArtifactRequest() {
    this->initializeModel();
}

OAIUpdateArtifactRequest::~OAIUpdateArtifactRequest() {}

void OAIUpdateArtifactRequest::initializeModel() {

    m_artifact_arn_isSet = false;
    m_artifact_arn_isValid = false;

    m_artifact_name_isSet = false;
    m_artifact_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_properties_to_remove_isSet = false;
    m_properties_to_remove_isValid = false;
}

void OAIUpdateArtifactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateArtifactRequest::fromJsonObject(QJsonObject json) {

    m_artifact_arn_isValid = ::OpenAPI::fromJsonValue(m_artifact_arn, json[QString("ArtifactArn")]);
    m_artifact_arn_isSet = !json[QString("ArtifactArn")].isNull() && m_artifact_arn_isValid;

    m_artifact_name_isValid = ::OpenAPI::fromJsonValue(m_artifact_name, json[QString("ArtifactName")]);
    m_artifact_name_isSet = !json[QString("ArtifactName")].isNull() && m_artifact_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;

    m_properties_to_remove_isValid = ::OpenAPI::fromJsonValue(m_properties_to_remove, json[QString("PropertiesToRemove")]);
    m_properties_to_remove_isSet = !json[QString("PropertiesToRemove")].isNull() && m_properties_to_remove_isValid;
}

QString OAIUpdateArtifactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateArtifactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_arn_isSet) {
        obj.insert(QString("ArtifactArn"), ::OpenAPI::toJsonValue(m_artifact_arn));
    }
    if (m_artifact_name_isSet) {
        obj.insert(QString("ArtifactName"), ::OpenAPI::toJsonValue(m_artifact_name));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_properties_to_remove.isSet()) {
        obj.insert(QString("PropertiesToRemove"), ::OpenAPI::toJsonValue(m_properties_to_remove));
    }
    return obj;
}

QString OAIUpdateArtifactRequest::getArtifactArn() const {
    return m_artifact_arn;
}
void OAIUpdateArtifactRequest::setArtifactArn(const QString &artifact_arn) {
    m_artifact_arn = artifact_arn;
    m_artifact_arn_isSet = true;
}

bool OAIUpdateArtifactRequest::is_artifact_arn_Set() const{
    return m_artifact_arn_isSet;
}

bool OAIUpdateArtifactRequest::is_artifact_arn_Valid() const{
    return m_artifact_arn_isValid;
}

QString OAIUpdateArtifactRequest::getArtifactName() const {
    return m_artifact_name;
}
void OAIUpdateArtifactRequest::setArtifactName(const QString &artifact_name) {
    m_artifact_name = artifact_name;
    m_artifact_name_isSet = true;
}

bool OAIUpdateArtifactRequest::is_artifact_name_Set() const{
    return m_artifact_name_isSet;
}

bool OAIUpdateArtifactRequest::is_artifact_name_Valid() const{
    return m_artifact_name_isValid;
}

QMap OAIUpdateArtifactRequest::getProperties() const {
    return m_properties;
}
void OAIUpdateArtifactRequest::setProperties(const QMap &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIUpdateArtifactRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIUpdateArtifactRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

QList OAIUpdateArtifactRequest::getPropertiesToRemove() const {
    return m_properties_to_remove;
}
void OAIUpdateArtifactRequest::setPropertiesToRemove(const QList &properties_to_remove) {
    m_properties_to_remove = properties_to_remove;
    m_properties_to_remove_isSet = true;
}

bool OAIUpdateArtifactRequest::is_properties_to_remove_Set() const{
    return m_properties_to_remove_isSet;
}

bool OAIUpdateArtifactRequest::is_properties_to_remove_Valid() const{
    return m_properties_to_remove_isValid;
}

bool OAIUpdateArtifactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateArtifactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_artifact_arn_isValid && true;
}

} // namespace OpenAPI
