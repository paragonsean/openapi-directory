/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInferenceExperimentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInferenceExperimentRequest::OAIUpdateInferenceExperimentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInferenceExperimentRequest::OAIUpdateInferenceExperimentRequest() {
    this->initializeModel();
}

OAIUpdateInferenceExperimentRequest::~OAIUpdateInferenceExperimentRequest() {}

void OAIUpdateInferenceExperimentRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_model_variants_isSet = false;
    m_model_variants_isValid = false;

    m_data_storage_config_isSet = false;
    m_data_storage_config_isValid = false;

    m_shadow_mode_config_isSet = false;
    m_shadow_mode_config_isValid = false;
}

void OAIUpdateInferenceExperimentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInferenceExperimentRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_model_variants_isValid = ::OpenAPI::fromJsonValue(m_model_variants, json[QString("ModelVariants")]);
    m_model_variants_isSet = !json[QString("ModelVariants")].isNull() && m_model_variants_isValid;

    m_data_storage_config_isValid = ::OpenAPI::fromJsonValue(m_data_storage_config, json[QString("DataStorageConfig")]);
    m_data_storage_config_isSet = !json[QString("DataStorageConfig")].isNull() && m_data_storage_config_isValid;

    m_shadow_mode_config_isValid = ::OpenAPI::fromJsonValue(m_shadow_mode_config, json[QString("ShadowModeConfig")]);
    m_shadow_mode_config_isSet = !json[QString("ShadowModeConfig")].isNull() && m_shadow_mode_config_isValid;
}

QString OAIUpdateInferenceExperimentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInferenceExperimentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_model_variants.isSet()) {
        obj.insert(QString("ModelVariants"), ::OpenAPI::toJsonValue(m_model_variants));
    }
    if (m_data_storage_config.isSet()) {
        obj.insert(QString("DataStorageConfig"), ::OpenAPI::toJsonValue(m_data_storage_config));
    }
    if (m_shadow_mode_config.isSet()) {
        obj.insert(QString("ShadowModeConfig"), ::OpenAPI::toJsonValue(m_shadow_mode_config));
    }
    return obj;
}

QString OAIUpdateInferenceExperimentRequest::getName() const {
    return m_name;
}
void OAIUpdateInferenceExperimentRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateInferenceExperimentRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateInferenceExperimentRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIUpdateInferenceExperimentRequest_Schedule OAIUpdateInferenceExperimentRequest::getSchedule() const {
    return m_schedule;
}
void OAIUpdateInferenceExperimentRequest::setSchedule(const OAIUpdateInferenceExperimentRequest_Schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIUpdateInferenceExperimentRequest::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIUpdateInferenceExperimentRequest::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIUpdateInferenceExperimentRequest::getDescription() const {
    return m_description;
}
void OAIUpdateInferenceExperimentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateInferenceExperimentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateInferenceExperimentRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdateInferenceExperimentRequest::getModelVariants() const {
    return m_model_variants;
}
void OAIUpdateInferenceExperimentRequest::setModelVariants(const QList &model_variants) {
    m_model_variants = model_variants;
    m_model_variants_isSet = true;
}

bool OAIUpdateInferenceExperimentRequest::is_model_variants_Set() const{
    return m_model_variants_isSet;
}

bool OAIUpdateInferenceExperimentRequest::is_model_variants_Valid() const{
    return m_model_variants_isValid;
}

OAIDescribeInferenceExperimentResponse_DataStorageConfig OAIUpdateInferenceExperimentRequest::getDataStorageConfig() const {
    return m_data_storage_config;
}
void OAIUpdateInferenceExperimentRequest::setDataStorageConfig(const OAIDescribeInferenceExperimentResponse_DataStorageConfig &data_storage_config) {
    m_data_storage_config = data_storage_config;
    m_data_storage_config_isSet = true;
}

bool OAIUpdateInferenceExperimentRequest::is_data_storage_config_Set() const{
    return m_data_storage_config_isSet;
}

bool OAIUpdateInferenceExperimentRequest::is_data_storage_config_Valid() const{
    return m_data_storage_config_isValid;
}

OAICreateInferenceExperimentRequest_ShadowModeConfig OAIUpdateInferenceExperimentRequest::getShadowModeConfig() const {
    return m_shadow_mode_config;
}
void OAIUpdateInferenceExperimentRequest::setShadowModeConfig(const OAICreateInferenceExperimentRequest_ShadowModeConfig &shadow_mode_config) {
    m_shadow_mode_config = shadow_mode_config;
    m_shadow_mode_config_isSet = true;
}

bool OAIUpdateInferenceExperimentRequest::is_shadow_mode_config_Set() const{
    return m_shadow_mode_config_isSet;
}

bool OAIUpdateInferenceExperimentRequest::is_shadow_mode_config_Valid() const{
    return m_shadow_mode_config_isValid;
}

bool OAIUpdateInferenceExperimentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_storage_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_mode_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInferenceExperimentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
