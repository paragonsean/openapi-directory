/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLabelingJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLabelingJobRequest::OAICreateLabelingJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLabelingJobRequest::OAICreateLabelingJobRequest() {
    this->initializeModel();
}

OAICreateLabelingJobRequest::~OAICreateLabelingJobRequest() {}

void OAICreateLabelingJobRequest::initializeModel() {

    m_labeling_job_name_isSet = false;
    m_labeling_job_name_isValid = false;

    m_label_attribute_name_isSet = false;
    m_label_attribute_name_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_label_category_config_s3_uri_isSet = false;
    m_label_category_config_s3_uri_isValid = false;

    m_stopping_conditions_isSet = false;
    m_stopping_conditions_isValid = false;

    m_labeling_job_algorithms_config_isSet = false;
    m_labeling_job_algorithms_config_isValid = false;

    m_human_task_config_isSet = false;
    m_human_task_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLabelingJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLabelingJobRequest::fromJsonObject(QJsonObject json) {

    m_labeling_job_name_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_name, json[QString("LabelingJobName")]);
    m_labeling_job_name_isSet = !json[QString("LabelingJobName")].isNull() && m_labeling_job_name_isValid;

    m_label_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_label_attribute_name, json[QString("LabelAttributeName")]);
    m_label_attribute_name_isSet = !json[QString("LabelAttributeName")].isNull() && m_label_attribute_name_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("InputConfig")]);
    m_input_config_isSet = !json[QString("InputConfig")].isNull() && m_input_config_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("OutputConfig")]);
    m_output_config_isSet = !json[QString("OutputConfig")].isNull() && m_output_config_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_label_category_config_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_label_category_config_s3_uri, json[QString("LabelCategoryConfigS3Uri")]);
    m_label_category_config_s3_uri_isSet = !json[QString("LabelCategoryConfigS3Uri")].isNull() && m_label_category_config_s3_uri_isValid;

    m_stopping_conditions_isValid = ::OpenAPI::fromJsonValue(m_stopping_conditions, json[QString("StoppingConditions")]);
    m_stopping_conditions_isSet = !json[QString("StoppingConditions")].isNull() && m_stopping_conditions_isValid;

    m_labeling_job_algorithms_config_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_algorithms_config, json[QString("LabelingJobAlgorithmsConfig")]);
    m_labeling_job_algorithms_config_isSet = !json[QString("LabelingJobAlgorithmsConfig")].isNull() && m_labeling_job_algorithms_config_isValid;

    m_human_task_config_isValid = ::OpenAPI::fromJsonValue(m_human_task_config, json[QString("HumanTaskConfig")]);
    m_human_task_config_isSet = !json[QString("HumanTaskConfig")].isNull() && m_human_task_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateLabelingJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLabelingJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_labeling_job_name_isSet) {
        obj.insert(QString("LabelingJobName"), ::OpenAPI::toJsonValue(m_labeling_job_name));
    }
    if (m_label_attribute_name_isSet) {
        obj.insert(QString("LabelAttributeName"), ::OpenAPI::toJsonValue(m_label_attribute_name));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("InputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("OutputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_label_category_config_s3_uri_isSet) {
        obj.insert(QString("LabelCategoryConfigS3Uri"), ::OpenAPI::toJsonValue(m_label_category_config_s3_uri));
    }
    if (m_stopping_conditions.isSet()) {
        obj.insert(QString("StoppingConditions"), ::OpenAPI::toJsonValue(m_stopping_conditions));
    }
    if (m_labeling_job_algorithms_config.isSet()) {
        obj.insert(QString("LabelingJobAlgorithmsConfig"), ::OpenAPI::toJsonValue(m_labeling_job_algorithms_config));
    }
    if (m_human_task_config.isSet()) {
        obj.insert(QString("HumanTaskConfig"), ::OpenAPI::toJsonValue(m_human_task_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateLabelingJobRequest::getLabelingJobName() const {
    return m_labeling_job_name;
}
void OAICreateLabelingJobRequest::setLabelingJobName(const QString &labeling_job_name) {
    m_labeling_job_name = labeling_job_name;
    m_labeling_job_name_isSet = true;
}

bool OAICreateLabelingJobRequest::is_labeling_job_name_Set() const{
    return m_labeling_job_name_isSet;
}

bool OAICreateLabelingJobRequest::is_labeling_job_name_Valid() const{
    return m_labeling_job_name_isValid;
}

QString OAICreateLabelingJobRequest::getLabelAttributeName() const {
    return m_label_attribute_name;
}
void OAICreateLabelingJobRequest::setLabelAttributeName(const QString &label_attribute_name) {
    m_label_attribute_name = label_attribute_name;
    m_label_attribute_name_isSet = true;
}

bool OAICreateLabelingJobRequest::is_label_attribute_name_Set() const{
    return m_label_attribute_name_isSet;
}

bool OAICreateLabelingJobRequest::is_label_attribute_name_Valid() const{
    return m_label_attribute_name_isValid;
}

OAICreateLabelingJobRequest_InputConfig OAICreateLabelingJobRequest::getInputConfig() const {
    return m_input_config;
}
void OAICreateLabelingJobRequest::setInputConfig(const OAICreateLabelingJobRequest_InputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAICreateLabelingJobRequest::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAICreateLabelingJobRequest::is_input_config_Valid() const{
    return m_input_config_isValid;
}

OAICreateLabelingJobRequest_OutputConfig OAICreateLabelingJobRequest::getOutputConfig() const {
    return m_output_config;
}
void OAICreateLabelingJobRequest::setOutputConfig(const OAICreateLabelingJobRequest_OutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAICreateLabelingJobRequest::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAICreateLabelingJobRequest::is_output_config_Valid() const{
    return m_output_config_isValid;
}

QString OAICreateLabelingJobRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateLabelingJobRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateLabelingJobRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateLabelingJobRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAICreateLabelingJobRequest::getLabelCategoryConfigS3Uri() const {
    return m_label_category_config_s3_uri;
}
void OAICreateLabelingJobRequest::setLabelCategoryConfigS3Uri(const QString &label_category_config_s3_uri) {
    m_label_category_config_s3_uri = label_category_config_s3_uri;
    m_label_category_config_s3_uri_isSet = true;
}

bool OAICreateLabelingJobRequest::is_label_category_config_s3_uri_Set() const{
    return m_label_category_config_s3_uri_isSet;
}

bool OAICreateLabelingJobRequest::is_label_category_config_s3_uri_Valid() const{
    return m_label_category_config_s3_uri_isValid;
}

OAICreateLabelingJobRequest_StoppingConditions OAICreateLabelingJobRequest::getStoppingConditions() const {
    return m_stopping_conditions;
}
void OAICreateLabelingJobRequest::setStoppingConditions(const OAICreateLabelingJobRequest_StoppingConditions &stopping_conditions) {
    m_stopping_conditions = stopping_conditions;
    m_stopping_conditions_isSet = true;
}

bool OAICreateLabelingJobRequest::is_stopping_conditions_Set() const{
    return m_stopping_conditions_isSet;
}

bool OAICreateLabelingJobRequest::is_stopping_conditions_Valid() const{
    return m_stopping_conditions_isValid;
}

OAICreateLabelingJobRequest_LabelingJobAlgorithmsConfig OAICreateLabelingJobRequest::getLabelingJobAlgorithmsConfig() const {
    return m_labeling_job_algorithms_config;
}
void OAICreateLabelingJobRequest::setLabelingJobAlgorithmsConfig(const OAICreateLabelingJobRequest_LabelingJobAlgorithmsConfig &labeling_job_algorithms_config) {
    m_labeling_job_algorithms_config = labeling_job_algorithms_config;
    m_labeling_job_algorithms_config_isSet = true;
}

bool OAICreateLabelingJobRequest::is_labeling_job_algorithms_config_Set() const{
    return m_labeling_job_algorithms_config_isSet;
}

bool OAICreateLabelingJobRequest::is_labeling_job_algorithms_config_Valid() const{
    return m_labeling_job_algorithms_config_isValid;
}

OAICreateLabelingJobRequest_HumanTaskConfig OAICreateLabelingJobRequest::getHumanTaskConfig() const {
    return m_human_task_config;
}
void OAICreateLabelingJobRequest::setHumanTaskConfig(const OAICreateLabelingJobRequest_HumanTaskConfig &human_task_config) {
    m_human_task_config = human_task_config;
    m_human_task_config_isSet = true;
}

bool OAICreateLabelingJobRequest::is_human_task_config_Set() const{
    return m_human_task_config_isSet;
}

bool OAICreateLabelingJobRequest::is_human_task_config_Valid() const{
    return m_human_task_config_isValid;
}

QList OAICreateLabelingJobRequest::getTags() const {
    return m_tags;
}
void OAICreateLabelingJobRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLabelingJobRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLabelingJobRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLabelingJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labeling_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_category_config_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_algorithms_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_task_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLabelingJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_labeling_job_name_isValid && m_label_attribute_name_isValid && m_input_config_isValid && m_output_config_isValid && m_role_arn_isValid && m_human_task_config_isValid && true;
}

} // namespace OpenAPI
