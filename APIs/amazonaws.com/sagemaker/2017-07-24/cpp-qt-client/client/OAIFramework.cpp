/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFramework.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFramework::OAIFramework(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFramework::OAIFramework() {
    this->initializeModel();
}

OAIFramework::~OAIFramework() {}

void OAIFramework::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFramework::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFramework::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TENSORFLOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFramework::TENSORFLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KERAS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFramework::KERAS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MXNET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFramework::MXNET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ONNX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFramework::ONNX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PYTORCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFramework::PYTORCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("XGBOOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFramework::XGBOOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TFLITE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFramework::TFLITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DARKNET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFramework::DARKNET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SKLEARN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFramework::SKLEARN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFramework::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFramework::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFramework::TENSORFLOW:
            val = "TENSORFLOW";
            break;
        case eOAIFramework::KERAS:
            val = "KERAS";
            break;
        case eOAIFramework::MXNET:
            val = "MXNET";
            break;
        case eOAIFramework::ONNX:
            val = "ONNX";
            break;
        case eOAIFramework::PYTORCH:
            val = "PYTORCH";
            break;
        case eOAIFramework::XGBOOST:
            val = "XGBOOST";
            break;
        case eOAIFramework::TFLITE:
            val = "TFLITE";
            break;
        case eOAIFramework::DARKNET:
            val = "DARKNET";
            break;
        case eOAIFramework::SKLEARN:
            val = "SKLEARN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFramework::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFramework::eOAIFramework OAIFramework::getValue() const {
    return m_value;
}

void OAIFramework::setValue(const OAIFramework::eOAIFramework& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFramework::isSet() const {
    
    return m_value_isSet;
}

bool OAIFramework::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
