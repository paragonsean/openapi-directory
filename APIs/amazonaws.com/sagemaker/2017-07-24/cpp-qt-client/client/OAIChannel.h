/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChannel.h
 *
 * A channel is a named input source that training algorithms can consume. 
 */

#ifndef OAIChannel_H
#define OAIChannel_H

#include <QJsonObject>

#include "OAIChannel_DataSource.h"
#include "OAIChannel_ShuffleConfig.h"
#include "OAICompressionType.h"
#include "OAIRecordWrapper.h"
#include "OAITrainingInputMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannel_DataSource;
class OAIChannel_ShuffleConfig;

class OAIChannel : public OAIObject {
public:
    OAIChannel();
    OAIChannel(QString json);
    ~OAIChannel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChannelName() const;
    void setChannelName(const QString &channel_name);
    bool is_channel_name_Set() const;
    bool is_channel_name_Valid() const;

    OAIChannel_DataSource getDataSource() const;
    void setDataSource(const OAIChannel_DataSource &data_source);
    bool is_data_source_Set() const;
    bool is_data_source_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    OAICompressionType getCompressionType() const;
    void setCompressionType(const OAICompressionType &compression_type);
    bool is_compression_type_Set() const;
    bool is_compression_type_Valid() const;

    OAIRecordWrapper getRecordWrapperType() const;
    void setRecordWrapperType(const OAIRecordWrapper &record_wrapper_type);
    bool is_record_wrapper_type_Set() const;
    bool is_record_wrapper_type_Valid() const;

    OAITrainingInputMode getInputMode() const;
    void setInputMode(const OAITrainingInputMode &input_mode);
    bool is_input_mode_Set() const;
    bool is_input_mode_Valid() const;

    OAIChannel_ShuffleConfig getShuffleConfig() const;
    void setShuffleConfig(const OAIChannel_ShuffleConfig &shuffle_config);
    bool is_shuffle_config_Set() const;
    bool is_shuffle_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_channel_name;
    bool m_channel_name_isSet;
    bool m_channel_name_isValid;

    OAIChannel_DataSource m_data_source;
    bool m_data_source_isSet;
    bool m_data_source_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    OAICompressionType m_compression_type;
    bool m_compression_type_isSet;
    bool m_compression_type_isValid;

    OAIRecordWrapper m_record_wrapper_type;
    bool m_record_wrapper_type_isSet;
    bool m_record_wrapper_type_isValid;

    OAITrainingInputMode m_input_mode;
    bool m_input_mode_isSet;
    bool m_input_mode_isValid;

    OAIChannel_ShuffleConfig m_shuffle_config;
    bool m_shuffle_config_isSet;
    bool m_shuffle_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChannel)

#endif // OAIChannel_H
