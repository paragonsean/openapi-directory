/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoMLProblemTypeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoMLProblemTypeConfig::OAIAutoMLProblemTypeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoMLProblemTypeConfig::OAIAutoMLProblemTypeConfig() {
    this->initializeModel();
}

OAIAutoMLProblemTypeConfig::~OAIAutoMLProblemTypeConfig() {}

void OAIAutoMLProblemTypeConfig::initializeModel() {

    m_image_classification_job_config_isSet = false;
    m_image_classification_job_config_isValid = false;

    m_text_classification_job_config_isSet = false;
    m_text_classification_job_config_isValid = false;

    m_tabular_job_config_isSet = false;
    m_tabular_job_config_isValid = false;

    m_time_series_forecasting_job_config_isSet = false;
    m_time_series_forecasting_job_config_isValid = false;
}

void OAIAutoMLProblemTypeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoMLProblemTypeConfig::fromJsonObject(QJsonObject json) {

    m_image_classification_job_config_isValid = ::OpenAPI::fromJsonValue(m_image_classification_job_config, json[QString("ImageClassificationJobConfig")]);
    m_image_classification_job_config_isSet = !json[QString("ImageClassificationJobConfig")].isNull() && m_image_classification_job_config_isValid;

    m_text_classification_job_config_isValid = ::OpenAPI::fromJsonValue(m_text_classification_job_config, json[QString("TextClassificationJobConfig")]);
    m_text_classification_job_config_isSet = !json[QString("TextClassificationJobConfig")].isNull() && m_text_classification_job_config_isValid;

    m_tabular_job_config_isValid = ::OpenAPI::fromJsonValue(m_tabular_job_config, json[QString("TabularJobConfig")]);
    m_tabular_job_config_isSet = !json[QString("TabularJobConfig")].isNull() && m_tabular_job_config_isValid;

    m_time_series_forecasting_job_config_isValid = ::OpenAPI::fromJsonValue(m_time_series_forecasting_job_config, json[QString("TimeSeriesForecastingJobConfig")]);
    m_time_series_forecasting_job_config_isSet = !json[QString("TimeSeriesForecastingJobConfig")].isNull() && m_time_series_forecasting_job_config_isValid;
}

QString OAIAutoMLProblemTypeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoMLProblemTypeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_image_classification_job_config.isSet()) {
        obj.insert(QString("ImageClassificationJobConfig"), ::OpenAPI::toJsonValue(m_image_classification_job_config));
    }
    if (m_text_classification_job_config.isSet()) {
        obj.insert(QString("TextClassificationJobConfig"), ::OpenAPI::toJsonValue(m_text_classification_job_config));
    }
    if (m_tabular_job_config.isSet()) {
        obj.insert(QString("TabularJobConfig"), ::OpenAPI::toJsonValue(m_tabular_job_config));
    }
    if (m_time_series_forecasting_job_config.isSet()) {
        obj.insert(QString("TimeSeriesForecastingJobConfig"), ::OpenAPI::toJsonValue(m_time_series_forecasting_job_config));
    }
    return obj;
}

OAIAutoMLProblemTypeConfig_ImageClassificationJobConfig OAIAutoMLProblemTypeConfig::getImageClassificationJobConfig() const {
    return m_image_classification_job_config;
}
void OAIAutoMLProblemTypeConfig::setImageClassificationJobConfig(const OAIAutoMLProblemTypeConfig_ImageClassificationJobConfig &image_classification_job_config) {
    m_image_classification_job_config = image_classification_job_config;
    m_image_classification_job_config_isSet = true;
}

bool OAIAutoMLProblemTypeConfig::is_image_classification_job_config_Set() const{
    return m_image_classification_job_config_isSet;
}

bool OAIAutoMLProblemTypeConfig::is_image_classification_job_config_Valid() const{
    return m_image_classification_job_config_isValid;
}

OAIAutoMLProblemTypeConfig_TextClassificationJobConfig OAIAutoMLProblemTypeConfig::getTextClassificationJobConfig() const {
    return m_text_classification_job_config;
}
void OAIAutoMLProblemTypeConfig::setTextClassificationJobConfig(const OAIAutoMLProblemTypeConfig_TextClassificationJobConfig &text_classification_job_config) {
    m_text_classification_job_config = text_classification_job_config;
    m_text_classification_job_config_isSet = true;
}

bool OAIAutoMLProblemTypeConfig::is_text_classification_job_config_Set() const{
    return m_text_classification_job_config_isSet;
}

bool OAIAutoMLProblemTypeConfig::is_text_classification_job_config_Valid() const{
    return m_text_classification_job_config_isValid;
}

OAIAutoMLProblemTypeConfig_TabularJobConfig OAIAutoMLProblemTypeConfig::getTabularJobConfig() const {
    return m_tabular_job_config;
}
void OAIAutoMLProblemTypeConfig::setTabularJobConfig(const OAIAutoMLProblemTypeConfig_TabularJobConfig &tabular_job_config) {
    m_tabular_job_config = tabular_job_config;
    m_tabular_job_config_isSet = true;
}

bool OAIAutoMLProblemTypeConfig::is_tabular_job_config_Set() const{
    return m_tabular_job_config_isSet;
}

bool OAIAutoMLProblemTypeConfig::is_tabular_job_config_Valid() const{
    return m_tabular_job_config_isValid;
}

OAIAutoMLProblemTypeConfig_TimeSeriesForecastingJobConfig OAIAutoMLProblemTypeConfig::getTimeSeriesForecastingJobConfig() const {
    return m_time_series_forecasting_job_config;
}
void OAIAutoMLProblemTypeConfig::setTimeSeriesForecastingJobConfig(const OAIAutoMLProblemTypeConfig_TimeSeriesForecastingJobConfig &time_series_forecasting_job_config) {
    m_time_series_forecasting_job_config = time_series_forecasting_job_config;
    m_time_series_forecasting_job_config_isSet = true;
}

bool OAIAutoMLProblemTypeConfig::is_time_series_forecasting_job_config_Set() const{
    return m_time_series_forecasting_job_config_isSet;
}

bool OAIAutoMLProblemTypeConfig::is_time_series_forecasting_job_config_Valid() const{
    return m_time_series_forecasting_job_config_isValid;
}

bool OAIAutoMLProblemTypeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_classification_job_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_classification_job_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tabular_job_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_forecasting_job_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoMLProblemTypeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
