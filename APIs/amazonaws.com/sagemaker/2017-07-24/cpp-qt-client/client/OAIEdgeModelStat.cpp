/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdgeModelStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdgeModelStat::OAIEdgeModelStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdgeModelStat::OAIEdgeModelStat() {
    this->initializeModel();
}

OAIEdgeModelStat::~OAIEdgeModelStat() {}

void OAIEdgeModelStat::initializeModel() {

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_offline_device_count_isSet = false;
    m_offline_device_count_isValid = false;

    m_connected_device_count_isSet = false;
    m_connected_device_count_isValid = false;

    m_active_device_count_isSet = false;
    m_active_device_count_isValid = false;

    m_sampling_device_count_isSet = false;
    m_sampling_device_count_isValid = false;
}

void OAIEdgeModelStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdgeModelStat::fromJsonObject(QJsonObject json) {

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("ModelVersion")]);
    m_model_version_isSet = !json[QString("ModelVersion")].isNull() && m_model_version_isValid;

    m_offline_device_count_isValid = ::OpenAPI::fromJsonValue(m_offline_device_count, json[QString("OfflineDeviceCount")]);
    m_offline_device_count_isSet = !json[QString("OfflineDeviceCount")].isNull() && m_offline_device_count_isValid;

    m_connected_device_count_isValid = ::OpenAPI::fromJsonValue(m_connected_device_count, json[QString("ConnectedDeviceCount")]);
    m_connected_device_count_isSet = !json[QString("ConnectedDeviceCount")].isNull() && m_connected_device_count_isValid;

    m_active_device_count_isValid = ::OpenAPI::fromJsonValue(m_active_device_count, json[QString("ActiveDeviceCount")]);
    m_active_device_count_isSet = !json[QString("ActiveDeviceCount")].isNull() && m_active_device_count_isValid;

    m_sampling_device_count_isValid = ::OpenAPI::fromJsonValue(m_sampling_device_count, json[QString("SamplingDeviceCount")]);
    m_sampling_device_count_isSet = !json[QString("SamplingDeviceCount")].isNull() && m_sampling_device_count_isValid;
}

QString OAIEdgeModelStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdgeModelStat::asJsonObject() const {
    QJsonObject obj;
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_model_version_isSet) {
        obj.insert(QString("ModelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_offline_device_count_isSet) {
        obj.insert(QString("OfflineDeviceCount"), ::OpenAPI::toJsonValue(m_offline_device_count));
    }
    if (m_connected_device_count_isSet) {
        obj.insert(QString("ConnectedDeviceCount"), ::OpenAPI::toJsonValue(m_connected_device_count));
    }
    if (m_active_device_count_isSet) {
        obj.insert(QString("ActiveDeviceCount"), ::OpenAPI::toJsonValue(m_active_device_count));
    }
    if (m_sampling_device_count_isSet) {
        obj.insert(QString("SamplingDeviceCount"), ::OpenAPI::toJsonValue(m_sampling_device_count));
    }
    return obj;
}

QString OAIEdgeModelStat::getModelName() const {
    return m_model_name;
}
void OAIEdgeModelStat::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIEdgeModelStat::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIEdgeModelStat::is_model_name_Valid() const{
    return m_model_name_isValid;
}

QString OAIEdgeModelStat::getModelVersion() const {
    return m_model_version;
}
void OAIEdgeModelStat::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIEdgeModelStat::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIEdgeModelStat::is_model_version_Valid() const{
    return m_model_version_isValid;
}

qint32 OAIEdgeModelStat::getOfflineDeviceCount() const {
    return m_offline_device_count;
}
void OAIEdgeModelStat::setOfflineDeviceCount(const qint32 &offline_device_count) {
    m_offline_device_count = offline_device_count;
    m_offline_device_count_isSet = true;
}

bool OAIEdgeModelStat::is_offline_device_count_Set() const{
    return m_offline_device_count_isSet;
}

bool OAIEdgeModelStat::is_offline_device_count_Valid() const{
    return m_offline_device_count_isValid;
}

qint32 OAIEdgeModelStat::getConnectedDeviceCount() const {
    return m_connected_device_count;
}
void OAIEdgeModelStat::setConnectedDeviceCount(const qint32 &connected_device_count) {
    m_connected_device_count = connected_device_count;
    m_connected_device_count_isSet = true;
}

bool OAIEdgeModelStat::is_connected_device_count_Set() const{
    return m_connected_device_count_isSet;
}

bool OAIEdgeModelStat::is_connected_device_count_Valid() const{
    return m_connected_device_count_isValid;
}

qint32 OAIEdgeModelStat::getActiveDeviceCount() const {
    return m_active_device_count;
}
void OAIEdgeModelStat::setActiveDeviceCount(const qint32 &active_device_count) {
    m_active_device_count = active_device_count;
    m_active_device_count_isSet = true;
}

bool OAIEdgeModelStat::is_active_device_count_Set() const{
    return m_active_device_count_isSet;
}

bool OAIEdgeModelStat::is_active_device_count_Valid() const{
    return m_active_device_count_isValid;
}

qint32 OAIEdgeModelStat::getSamplingDeviceCount() const {
    return m_sampling_device_count;
}
void OAIEdgeModelStat::setSamplingDeviceCount(const qint32 &sampling_device_count) {
    m_sampling_device_count = sampling_device_count;
    m_sampling_device_count_isSet = true;
}

bool OAIEdgeModelStat::is_sampling_device_count_Set() const{
    return m_sampling_device_count_isSet;
}

bool OAIEdgeModelStat::is_sampling_device_count_Valid() const{
    return m_sampling_device_count_isValid;
}

bool OAIEdgeModelStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdgeModelStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_name_isValid && m_model_version_isValid && m_offline_device_count_isValid && m_connected_device_count_isValid && m_active_device_count_isValid && m_sampling_device_count_isValid && true;
}

} // namespace OpenAPI
