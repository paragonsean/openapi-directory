/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryFilters::OAIQueryFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryFilters::OAIQueryFilters() {
    this->initializeModel();
}

OAIQueryFilters::~OAIQueryFilters() {}

void OAIQueryFilters::initializeModel() {

    m_types_isSet = false;
    m_types_isValid = false;

    m_lineage_types_isSet = false;
    m_lineage_types_isValid = false;

    m_created_before_isSet = false;
    m_created_before_isValid = false;

    m_created_after_isSet = false;
    m_created_after_isValid = false;

    m_modified_before_isSet = false;
    m_modified_before_isValid = false;

    m_modified_after_isSet = false;
    m_modified_after_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIQueryFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryFilters::fromJsonObject(QJsonObject json) {

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("Types")]);
    m_types_isSet = !json[QString("Types")].isNull() && m_types_isValid;

    m_lineage_types_isValid = ::OpenAPI::fromJsonValue(m_lineage_types, json[QString("LineageTypes")]);
    m_lineage_types_isSet = !json[QString("LineageTypes")].isNull() && m_lineage_types_isValid;

    m_created_before_isValid = ::OpenAPI::fromJsonValue(m_created_before, json[QString("CreatedBefore")]);
    m_created_before_isSet = !json[QString("CreatedBefore")].isNull() && m_created_before_isValid;

    m_created_after_isValid = ::OpenAPI::fromJsonValue(m_created_after, json[QString("CreatedAfter")]);
    m_created_after_isSet = !json[QString("CreatedAfter")].isNull() && m_created_after_isValid;

    m_modified_before_isValid = ::OpenAPI::fromJsonValue(m_modified_before, json[QString("ModifiedBefore")]);
    m_modified_before_isSet = !json[QString("ModifiedBefore")].isNull() && m_modified_before_isValid;

    m_modified_after_isValid = ::OpenAPI::fromJsonValue(m_modified_after, json[QString("ModifiedAfter")]);
    m_modified_after_isSet = !json[QString("ModifiedAfter")].isNull() && m_modified_after_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;
}

QString OAIQueryFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_types.isSet()) {
        obj.insert(QString("Types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_lineage_types.isSet()) {
        obj.insert(QString("LineageTypes"), ::OpenAPI::toJsonValue(m_lineage_types));
    }
    if (m_created_before_isSet) {
        obj.insert(QString("CreatedBefore"), ::OpenAPI::toJsonValue(m_created_before));
    }
    if (m_created_after_isSet) {
        obj.insert(QString("CreatedAfter"), ::OpenAPI::toJsonValue(m_created_after));
    }
    if (m_modified_before_isSet) {
        obj.insert(QString("ModifiedBefore"), ::OpenAPI::toJsonValue(m_modified_before));
    }
    if (m_modified_after_isSet) {
        obj.insert(QString("ModifiedAfter"), ::OpenAPI::toJsonValue(m_modified_after));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QList OAIQueryFilters::getTypes() const {
    return m_types;
}
void OAIQueryFilters::setTypes(const QList &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIQueryFilters::is_types_Set() const{
    return m_types_isSet;
}

bool OAIQueryFilters::is_types_Valid() const{
    return m_types_isValid;
}

QList OAIQueryFilters::getLineageTypes() const {
    return m_lineage_types;
}
void OAIQueryFilters::setLineageTypes(const QList &lineage_types) {
    m_lineage_types = lineage_types;
    m_lineage_types_isSet = true;
}

bool OAIQueryFilters::is_lineage_types_Set() const{
    return m_lineage_types_isSet;
}

bool OAIQueryFilters::is_lineage_types_Valid() const{
    return m_lineage_types_isValid;
}

QDateTime OAIQueryFilters::getCreatedBefore() const {
    return m_created_before;
}
void OAIQueryFilters::setCreatedBefore(const QDateTime &created_before) {
    m_created_before = created_before;
    m_created_before_isSet = true;
}

bool OAIQueryFilters::is_created_before_Set() const{
    return m_created_before_isSet;
}

bool OAIQueryFilters::is_created_before_Valid() const{
    return m_created_before_isValid;
}

QDateTime OAIQueryFilters::getCreatedAfter() const {
    return m_created_after;
}
void OAIQueryFilters::setCreatedAfter(const QDateTime &created_after) {
    m_created_after = created_after;
    m_created_after_isSet = true;
}

bool OAIQueryFilters::is_created_after_Set() const{
    return m_created_after_isSet;
}

bool OAIQueryFilters::is_created_after_Valid() const{
    return m_created_after_isValid;
}

QDateTime OAIQueryFilters::getModifiedBefore() const {
    return m_modified_before;
}
void OAIQueryFilters::setModifiedBefore(const QDateTime &modified_before) {
    m_modified_before = modified_before;
    m_modified_before_isSet = true;
}

bool OAIQueryFilters::is_modified_before_Set() const{
    return m_modified_before_isSet;
}

bool OAIQueryFilters::is_modified_before_Valid() const{
    return m_modified_before_isValid;
}

QDateTime OAIQueryFilters::getModifiedAfter() const {
    return m_modified_after;
}
void OAIQueryFilters::setModifiedAfter(const QDateTime &modified_after) {
    m_modified_after = modified_after;
    m_modified_after_isSet = true;
}

bool OAIQueryFilters::is_modified_after_Set() const{
    return m_modified_after_isSet;
}

bool OAIQueryFilters::is_modified_after_Valid() const{
    return m_modified_after_isValid;
}

QMap OAIQueryFilters::getProperties() const {
    return m_properties;
}
void OAIQueryFilters::setProperties(const QMap &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIQueryFilters::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIQueryFilters::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIQueryFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lineage_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
