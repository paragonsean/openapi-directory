/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabelCountersForWorkteam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabelCountersForWorkteam::OAILabelCountersForWorkteam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabelCountersForWorkteam::OAILabelCountersForWorkteam() {
    this->initializeModel();
}

OAILabelCountersForWorkteam::~OAILabelCountersForWorkteam() {}

void OAILabelCountersForWorkteam::initializeModel() {

    m_human_labeled_isSet = false;
    m_human_labeled_isValid = false;

    m_pending_human_isSet = false;
    m_pending_human_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAILabelCountersForWorkteam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabelCountersForWorkteam::fromJsonObject(QJsonObject json) {

    m_human_labeled_isValid = ::OpenAPI::fromJsonValue(m_human_labeled, json[QString("HumanLabeled")]);
    m_human_labeled_isSet = !json[QString("HumanLabeled")].isNull() && m_human_labeled_isValid;

    m_pending_human_isValid = ::OpenAPI::fromJsonValue(m_pending_human, json[QString("PendingHuman")]);
    m_pending_human_isSet = !json[QString("PendingHuman")].isNull() && m_pending_human_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;
}

QString OAILabelCountersForWorkteam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabelCountersForWorkteam::asJsonObject() const {
    QJsonObject obj;
    if (m_human_labeled_isSet) {
        obj.insert(QString("HumanLabeled"), ::OpenAPI::toJsonValue(m_human_labeled));
    }
    if (m_pending_human_isSet) {
        obj.insert(QString("PendingHuman"), ::OpenAPI::toJsonValue(m_pending_human));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAILabelCountersForWorkteam::getHumanLabeled() const {
    return m_human_labeled;
}
void OAILabelCountersForWorkteam::setHumanLabeled(const qint32 &human_labeled) {
    m_human_labeled = human_labeled;
    m_human_labeled_isSet = true;
}

bool OAILabelCountersForWorkteam::is_human_labeled_Set() const{
    return m_human_labeled_isSet;
}

bool OAILabelCountersForWorkteam::is_human_labeled_Valid() const{
    return m_human_labeled_isValid;
}

qint32 OAILabelCountersForWorkteam::getPendingHuman() const {
    return m_pending_human;
}
void OAILabelCountersForWorkteam::setPendingHuman(const qint32 &pending_human) {
    m_pending_human = pending_human;
    m_pending_human_isSet = true;
}

bool OAILabelCountersForWorkteam::is_pending_human_Set() const{
    return m_pending_human_isSet;
}

bool OAILabelCountersForWorkteam::is_pending_human_Valid() const{
    return m_pending_human_isValid;
}

qint32 OAILabelCountersForWorkteam::getTotal() const {
    return m_total;
}
void OAILabelCountersForWorkteam::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAILabelCountersForWorkteam::is_total_Set() const{
    return m_total_isSet;
}

bool OAILabelCountersForWorkteam::is_total_Valid() const{
    return m_total_isValid;
}

bool OAILabelCountersForWorkteam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_human_labeled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_human_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabelCountersForWorkteam::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
