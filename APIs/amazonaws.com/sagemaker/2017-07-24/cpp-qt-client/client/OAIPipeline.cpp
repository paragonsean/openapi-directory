/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline::OAIPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline::OAIPipeline() {
    this->initializeModel();
}

OAIPipeline::~OAIPipeline() {}

void OAIPipeline::initializeModel() {

    m_pipeline_arn_isSet = false;
    m_pipeline_arn_isValid = false;

    m_pipeline_name_isSet = false;
    m_pipeline_name_isValid = false;

    m_pipeline_display_name_isSet = false;
    m_pipeline_display_name_isValid = false;

    m_pipeline_description_isSet = false;
    m_pipeline_description_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_pipeline_status_isSet = false;
    m_pipeline_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_last_run_time_isSet = false;
    m_last_run_time_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_parallelism_configuration_isSet = false;
    m_parallelism_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline::fromJsonObject(QJsonObject json) {

    m_pipeline_arn_isValid = ::OpenAPI::fromJsonValue(m_pipeline_arn, json[QString("PipelineArn")]);
    m_pipeline_arn_isSet = !json[QString("PipelineArn")].isNull() && m_pipeline_arn_isValid;

    m_pipeline_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_name, json[QString("PipelineName")]);
    m_pipeline_name_isSet = !json[QString("PipelineName")].isNull() && m_pipeline_name_isValid;

    m_pipeline_display_name_isValid = ::OpenAPI::fromJsonValue(m_pipeline_display_name, json[QString("PipelineDisplayName")]);
    m_pipeline_display_name_isSet = !json[QString("PipelineDisplayName")].isNull() && m_pipeline_display_name_isValid;

    m_pipeline_description_isValid = ::OpenAPI::fromJsonValue(m_pipeline_description, json[QString("PipelineDescription")]);
    m_pipeline_description_isSet = !json[QString("PipelineDescription")].isNull() && m_pipeline_description_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_pipeline_status_isValid = ::OpenAPI::fromJsonValue(m_pipeline_status, json[QString("PipelineStatus")]);
    m_pipeline_status_isSet = !json[QString("PipelineStatus")].isNull() && m_pipeline_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_last_run_time_isValid = ::OpenAPI::fromJsonValue(m_last_run_time, json[QString("LastRunTime")]);
    m_last_run_time_isSet = !json[QString("LastRunTime")].isNull() && m_last_run_time_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_parallelism_configuration_isValid = ::OpenAPI::fromJsonValue(m_parallelism_configuration, json[QString("ParallelismConfiguration")]);
    m_parallelism_configuration_isSet = !json[QString("ParallelismConfiguration")].isNull() && m_parallelism_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_pipeline_arn_isSet) {
        obj.insert(QString("PipelineArn"), ::OpenAPI::toJsonValue(m_pipeline_arn));
    }
    if (m_pipeline_name_isSet) {
        obj.insert(QString("PipelineName"), ::OpenAPI::toJsonValue(m_pipeline_name));
    }
    if (m_pipeline_display_name_isSet) {
        obj.insert(QString("PipelineDisplayName"), ::OpenAPI::toJsonValue(m_pipeline_display_name));
    }
    if (m_pipeline_description_isSet) {
        obj.insert(QString("PipelineDescription"), ::OpenAPI::toJsonValue(m_pipeline_description));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_pipeline_status.isSet()) {
        obj.insert(QString("PipelineStatus"), ::OpenAPI::toJsonValue(m_pipeline_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_last_run_time_isSet) {
        obj.insert(QString("LastRunTime"), ::OpenAPI::toJsonValue(m_last_run_time));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_last_modified_by.isSet()) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_parallelism_configuration.isSet()) {
        obj.insert(QString("ParallelismConfiguration"), ::OpenAPI::toJsonValue(m_parallelism_configuration));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPipeline::getPipelineArn() const {
    return m_pipeline_arn;
}
void OAIPipeline::setPipelineArn(const QString &pipeline_arn) {
    m_pipeline_arn = pipeline_arn;
    m_pipeline_arn_isSet = true;
}

bool OAIPipeline::is_pipeline_arn_Set() const{
    return m_pipeline_arn_isSet;
}

bool OAIPipeline::is_pipeline_arn_Valid() const{
    return m_pipeline_arn_isValid;
}

QString OAIPipeline::getPipelineName() const {
    return m_pipeline_name;
}
void OAIPipeline::setPipelineName(const QString &pipeline_name) {
    m_pipeline_name = pipeline_name;
    m_pipeline_name_isSet = true;
}

bool OAIPipeline::is_pipeline_name_Set() const{
    return m_pipeline_name_isSet;
}

bool OAIPipeline::is_pipeline_name_Valid() const{
    return m_pipeline_name_isValid;
}

QString OAIPipeline::getPipelineDisplayName() const {
    return m_pipeline_display_name;
}
void OAIPipeline::setPipelineDisplayName(const QString &pipeline_display_name) {
    m_pipeline_display_name = pipeline_display_name;
    m_pipeline_display_name_isSet = true;
}

bool OAIPipeline::is_pipeline_display_name_Set() const{
    return m_pipeline_display_name_isSet;
}

bool OAIPipeline::is_pipeline_display_name_Valid() const{
    return m_pipeline_display_name_isValid;
}

QString OAIPipeline::getPipelineDescription() const {
    return m_pipeline_description;
}
void OAIPipeline::setPipelineDescription(const QString &pipeline_description) {
    m_pipeline_description = pipeline_description;
    m_pipeline_description_isSet = true;
}

bool OAIPipeline::is_pipeline_description_Set() const{
    return m_pipeline_description_isSet;
}

bool OAIPipeline::is_pipeline_description_Valid() const{
    return m_pipeline_description_isValid;
}

QString OAIPipeline::getRoleArn() const {
    return m_role_arn;
}
void OAIPipeline::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIPipeline::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIPipeline::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIPipelineStatus OAIPipeline::getPipelineStatus() const {
    return m_pipeline_status;
}
void OAIPipeline::setPipelineStatus(const OAIPipelineStatus &pipeline_status) {
    m_pipeline_status = pipeline_status;
    m_pipeline_status_isSet = true;
}

bool OAIPipeline::is_pipeline_status_Set() const{
    return m_pipeline_status_isSet;
}

bool OAIPipeline::is_pipeline_status_Valid() const{
    return m_pipeline_status_isValid;
}

QDateTime OAIPipeline::getCreationTime() const {
    return m_creation_time;
}
void OAIPipeline::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIPipeline::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIPipeline::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIPipeline::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIPipeline::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIPipeline::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIPipeline::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QDateTime OAIPipeline::getLastRunTime() const {
    return m_last_run_time;
}
void OAIPipeline::setLastRunTime(const QDateTime &last_run_time) {
    m_last_run_time = last_run_time;
    m_last_run_time_isSet = true;
}

bool OAIPipeline::is_last_run_time_Set() const{
    return m_last_run_time_isSet;
}

bool OAIPipeline::is_last_run_time_Valid() const{
    return m_last_run_time_isValid;
}

OAIUserContext OAIPipeline::getCreatedBy() const {
    return m_created_by;
}
void OAIPipeline::setCreatedBy(const OAIUserContext &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIPipeline::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIPipeline::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIUserContext OAIPipeline::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIPipeline::setLastModifiedBy(const OAIUserContext &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIPipeline::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIPipeline::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

OAIDescribePipelineExecutionResponse_ParallelismConfiguration OAIPipeline::getParallelismConfiguration() const {
    return m_parallelism_configuration;
}
void OAIPipeline::setParallelismConfiguration(const OAIDescribePipelineExecutionResponse_ParallelismConfiguration &parallelism_configuration) {
    m_parallelism_configuration = parallelism_configuration;
    m_parallelism_configuration_isSet = true;
}

bool OAIPipeline::is_parallelism_configuration_Set() const{
    return m_parallelism_configuration_isSet;
}

bool OAIPipeline::is_parallelism_configuration_Valid() const{
    return m_parallelism_configuration_isValid;
}

QList OAIPipeline::getTags() const {
    return m_tags;
}
void OAIPipeline::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPipeline::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPipeline::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pipeline_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
