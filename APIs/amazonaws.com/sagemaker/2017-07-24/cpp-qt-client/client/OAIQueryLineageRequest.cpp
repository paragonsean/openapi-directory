/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryLineageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryLineageRequest::OAIQueryLineageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryLineageRequest::OAIQueryLineageRequest() {
    this->initializeModel();
}

OAIQueryLineageRequest::~OAIQueryLineageRequest() {}

void OAIQueryLineageRequest::initializeModel() {

    m_start_arns_isSet = false;
    m_start_arns_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_include_edges_isSet = false;
    m_include_edges_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_depth_isSet = false;
    m_max_depth_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIQueryLineageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryLineageRequest::fromJsonObject(QJsonObject json) {

    m_start_arns_isValid = ::OpenAPI::fromJsonValue(m_start_arns, json[QString("StartArns")]);
    m_start_arns_isSet = !json[QString("StartArns")].isNull() && m_start_arns_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("Direction")]);
    m_direction_isSet = !json[QString("Direction")].isNull() && m_direction_isValid;

    m_include_edges_isValid = ::OpenAPI::fromJsonValue(m_include_edges, json[QString("IncludeEdges")]);
    m_include_edges_isSet = !json[QString("IncludeEdges")].isNull() && m_include_edges_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_max_depth_isValid = ::OpenAPI::fromJsonValue(m_max_depth, json[QString("MaxDepth")]);
    m_max_depth_isSet = !json[QString("MaxDepth")].isNull() && m_max_depth_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIQueryLineageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryLineageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_start_arns.isSet()) {
        obj.insert(QString("StartArns"), ::OpenAPI::toJsonValue(m_start_arns));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("Direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_include_edges_isSet) {
        obj.insert(QString("IncludeEdges"), ::OpenAPI::toJsonValue(m_include_edges));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_depth_isSet) {
        obj.insert(QString("MaxDepth"), ::OpenAPI::toJsonValue(m_max_depth));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIQueryLineageRequest::getStartArns() const {
    return m_start_arns;
}
void OAIQueryLineageRequest::setStartArns(const QList &start_arns) {
    m_start_arns = start_arns;
    m_start_arns_isSet = true;
}

bool OAIQueryLineageRequest::is_start_arns_Set() const{
    return m_start_arns_isSet;
}

bool OAIQueryLineageRequest::is_start_arns_Valid() const{
    return m_start_arns_isValid;
}

OAIDirection OAIQueryLineageRequest::getDirection() const {
    return m_direction;
}
void OAIQueryLineageRequest::setDirection(const OAIDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIQueryLineageRequest::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIQueryLineageRequest::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAIQueryLineageRequest::getIncludeEdges() const {
    return m_include_edges;
}
void OAIQueryLineageRequest::setIncludeEdges(const bool &include_edges) {
    m_include_edges = include_edges;
    m_include_edges_isSet = true;
}

bool OAIQueryLineageRequest::is_include_edges_Set() const{
    return m_include_edges_isSet;
}

bool OAIQueryLineageRequest::is_include_edges_Valid() const{
    return m_include_edges_isValid;
}

OAIQueryLineageRequest_Filters OAIQueryLineageRequest::getFilters() const {
    return m_filters;
}
void OAIQueryLineageRequest::setFilters(const OAIQueryLineageRequest_Filters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIQueryLineageRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIQueryLineageRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIQueryLineageRequest::getMaxDepth() const {
    return m_max_depth;
}
void OAIQueryLineageRequest::setMaxDepth(const qint32 &max_depth) {
    m_max_depth = max_depth;
    m_max_depth_isSet = true;
}

bool OAIQueryLineageRequest::is_max_depth_Set() const{
    return m_max_depth_isSet;
}

bool OAIQueryLineageRequest::is_max_depth_Valid() const{
    return m_max_depth_isValid;
}

qint32 OAIQueryLineageRequest::getMaxResults() const {
    return m_max_results;
}
void OAIQueryLineageRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIQueryLineageRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIQueryLineageRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIQueryLineageRequest::getNextToken() const {
    return m_next_token;
}
void OAIQueryLineageRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIQueryLineageRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIQueryLineageRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIQueryLineageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_edges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryLineageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
