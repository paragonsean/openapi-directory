/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlgorithmSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlgorithmSummary::OAIAlgorithmSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlgorithmSummary::OAIAlgorithmSummary() {
    this->initializeModel();
}

OAIAlgorithmSummary::~OAIAlgorithmSummary() {}

void OAIAlgorithmSummary::initializeModel() {

    m_algorithm_name_isSet = false;
    m_algorithm_name_isValid = false;

    m_algorithm_arn_isSet = false;
    m_algorithm_arn_isValid = false;

    m_algorithm_description_isSet = false;
    m_algorithm_description_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_algorithm_status_isSet = false;
    m_algorithm_status_isValid = false;
}

void OAIAlgorithmSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlgorithmSummary::fromJsonObject(QJsonObject json) {

    m_algorithm_name_isValid = ::OpenAPI::fromJsonValue(m_algorithm_name, json[QString("AlgorithmName")]);
    m_algorithm_name_isSet = !json[QString("AlgorithmName")].isNull() && m_algorithm_name_isValid;

    m_algorithm_arn_isValid = ::OpenAPI::fromJsonValue(m_algorithm_arn, json[QString("AlgorithmArn")]);
    m_algorithm_arn_isSet = !json[QString("AlgorithmArn")].isNull() && m_algorithm_arn_isValid;

    m_algorithm_description_isValid = ::OpenAPI::fromJsonValue(m_algorithm_description, json[QString("AlgorithmDescription")]);
    m_algorithm_description_isSet = !json[QString("AlgorithmDescription")].isNull() && m_algorithm_description_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_algorithm_status_isValid = ::OpenAPI::fromJsonValue(m_algorithm_status, json[QString("AlgorithmStatus")]);
    m_algorithm_status_isSet = !json[QString("AlgorithmStatus")].isNull() && m_algorithm_status_isValid;
}

QString OAIAlgorithmSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlgorithmSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_name_isSet) {
        obj.insert(QString("AlgorithmName"), ::OpenAPI::toJsonValue(m_algorithm_name));
    }
    if (m_algorithm_arn_isSet) {
        obj.insert(QString("AlgorithmArn"), ::OpenAPI::toJsonValue(m_algorithm_arn));
    }
    if (m_algorithm_description_isSet) {
        obj.insert(QString("AlgorithmDescription"), ::OpenAPI::toJsonValue(m_algorithm_description));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_algorithm_status.isSet()) {
        obj.insert(QString("AlgorithmStatus"), ::OpenAPI::toJsonValue(m_algorithm_status));
    }
    return obj;
}

QString OAIAlgorithmSummary::getAlgorithmName() const {
    return m_algorithm_name;
}
void OAIAlgorithmSummary::setAlgorithmName(const QString &algorithm_name) {
    m_algorithm_name = algorithm_name;
    m_algorithm_name_isSet = true;
}

bool OAIAlgorithmSummary::is_algorithm_name_Set() const{
    return m_algorithm_name_isSet;
}

bool OAIAlgorithmSummary::is_algorithm_name_Valid() const{
    return m_algorithm_name_isValid;
}

QString OAIAlgorithmSummary::getAlgorithmArn() const {
    return m_algorithm_arn;
}
void OAIAlgorithmSummary::setAlgorithmArn(const QString &algorithm_arn) {
    m_algorithm_arn = algorithm_arn;
    m_algorithm_arn_isSet = true;
}

bool OAIAlgorithmSummary::is_algorithm_arn_Set() const{
    return m_algorithm_arn_isSet;
}

bool OAIAlgorithmSummary::is_algorithm_arn_Valid() const{
    return m_algorithm_arn_isValid;
}

QString OAIAlgorithmSummary::getAlgorithmDescription() const {
    return m_algorithm_description;
}
void OAIAlgorithmSummary::setAlgorithmDescription(const QString &algorithm_description) {
    m_algorithm_description = algorithm_description;
    m_algorithm_description_isSet = true;
}

bool OAIAlgorithmSummary::is_algorithm_description_Set() const{
    return m_algorithm_description_isSet;
}

bool OAIAlgorithmSummary::is_algorithm_description_Valid() const{
    return m_algorithm_description_isValid;
}

QDateTime OAIAlgorithmSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIAlgorithmSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAlgorithmSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAlgorithmSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIAlgorithmStatus OAIAlgorithmSummary::getAlgorithmStatus() const {
    return m_algorithm_status;
}
void OAIAlgorithmSummary::setAlgorithmStatus(const OAIAlgorithmStatus &algorithm_status) {
    m_algorithm_status = algorithm_status;
    m_algorithm_status_isSet = true;
}

bool OAIAlgorithmSummary::is_algorithm_status_Set() const{
    return m_algorithm_status_isSet;
}

bool OAIAlgorithmSummary::is_algorithm_status_Valid() const{
    return m_algorithm_status_isValid;
}

bool OAIAlgorithmSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlgorithmSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_algorithm_name_isValid && m_algorithm_arn_isValid && m_creation_time_isValid && m_algorithm_status_isValid && true;
}

} // namespace OpenAPI
