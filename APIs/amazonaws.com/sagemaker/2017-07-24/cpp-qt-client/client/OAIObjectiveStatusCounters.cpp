/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectiveStatusCounters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectiveStatusCounters::OAIObjectiveStatusCounters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectiveStatusCounters::OAIObjectiveStatusCounters() {
    this->initializeModel();
}

OAIObjectiveStatusCounters::~OAIObjectiveStatusCounters() {}

void OAIObjectiveStatusCounters::initializeModel() {

    m_succeeded_isSet = false;
    m_succeeded_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;
}

void OAIObjectiveStatusCounters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectiveStatusCounters::fromJsonObject(QJsonObject json) {

    m_succeeded_isValid = ::OpenAPI::fromJsonValue(m_succeeded, json[QString("Succeeded")]);
    m_succeeded_isSet = !json[QString("Succeeded")].isNull() && m_succeeded_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("Pending")]);
    m_pending_isSet = !json[QString("Pending")].isNull() && m_pending_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("Failed")]);
    m_failed_isSet = !json[QString("Failed")].isNull() && m_failed_isValid;
}

QString OAIObjectiveStatusCounters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectiveStatusCounters::asJsonObject() const {
    QJsonObject obj;
    if (m_succeeded_isSet) {
        obj.insert(QString("Succeeded"), ::OpenAPI::toJsonValue(m_succeeded));
    }
    if (m_pending_isSet) {
        obj.insert(QString("Pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_failed_isSet) {
        obj.insert(QString("Failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    return obj;
}

qint32 OAIObjectiveStatusCounters::getSucceeded() const {
    return m_succeeded;
}
void OAIObjectiveStatusCounters::setSucceeded(const qint32 &succeeded) {
    m_succeeded = succeeded;
    m_succeeded_isSet = true;
}

bool OAIObjectiveStatusCounters::is_succeeded_Set() const{
    return m_succeeded_isSet;
}

bool OAIObjectiveStatusCounters::is_succeeded_Valid() const{
    return m_succeeded_isValid;
}

qint32 OAIObjectiveStatusCounters::getPending() const {
    return m_pending;
}
void OAIObjectiveStatusCounters::setPending(const qint32 &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIObjectiveStatusCounters::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIObjectiveStatusCounters::is_pending_Valid() const{
    return m_pending_isValid;
}

qint32 OAIObjectiveStatusCounters::getFailed() const {
    return m_failed;
}
void OAIObjectiveStatusCounters::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIObjectiveStatusCounters::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIObjectiveStatusCounters::is_failed_Valid() const{
    return m_failed_isValid;
}

bool OAIObjectiveStatusCounters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectiveStatusCounters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
