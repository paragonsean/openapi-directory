/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTrainingJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTrainingJobResponse::OAIDescribeTrainingJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTrainingJobResponse::OAIDescribeTrainingJobResponse() {
    this->initializeModel();
}

OAIDescribeTrainingJobResponse::~OAIDescribeTrainingJobResponse() {}

void OAIDescribeTrainingJobResponse::initializeModel() {

    m_training_job_name_isSet = false;
    m_training_job_name_isValid = false;

    m_training_job_arn_isSet = false;
    m_training_job_arn_isValid = false;

    m_tuning_job_arn_isSet = false;
    m_tuning_job_arn_isValid = false;

    m_labeling_job_arn_isSet = false;
    m_labeling_job_arn_isValid = false;

    m_auto_ml_job_arn_isSet = false;
    m_auto_ml_job_arn_isValid = false;

    m_model_artifacts_isSet = false;
    m_model_artifacts_isValid = false;

    m_training_job_status_isSet = false;
    m_training_job_status_isValid = false;

    m_secondary_status_isSet = false;
    m_secondary_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_hyper_parameters_isSet = false;
    m_hyper_parameters_isValid = false;

    m_algorithm_specification_isSet = false;
    m_algorithm_specification_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_resource_config_isSet = false;
    m_resource_config_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_stopping_condition_isSet = false;
    m_stopping_condition_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_training_start_time_isSet = false;
    m_training_start_time_isValid = false;

    m_training_end_time_isSet = false;
    m_training_end_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_secondary_status_transitions_isSet = false;
    m_secondary_status_transitions_isValid = false;

    m_final_metric_data_list_isSet = false;
    m_final_metric_data_list_isValid = false;

    m_enable_network_isolation_isSet = false;
    m_enable_network_isolation_isValid = false;

    m_enable_inter_container_traffic_encryption_isSet = false;
    m_enable_inter_container_traffic_encryption_isValid = false;

    m_enable_managed_spot_training_isSet = false;
    m_enable_managed_spot_training_isValid = false;

    m_checkpoint_config_isSet = false;
    m_checkpoint_config_isValid = false;

    m_training_time_in_seconds_isSet = false;
    m_training_time_in_seconds_isValid = false;

    m_billable_time_in_seconds_isSet = false;
    m_billable_time_in_seconds_isValid = false;

    m_debug_hook_config_isSet = false;
    m_debug_hook_config_isValid = false;

    m_experiment_config_isSet = false;
    m_experiment_config_isValid = false;

    m_debug_rule_configurations_isSet = false;
    m_debug_rule_configurations_isValid = false;

    m_tensor_board_output_config_isSet = false;
    m_tensor_board_output_config_isValid = false;

    m_debug_rule_evaluation_statuses_isSet = false;
    m_debug_rule_evaluation_statuses_isValid = false;

    m_profiler_config_isSet = false;
    m_profiler_config_isValid = false;

    m_profiler_rule_configurations_isSet = false;
    m_profiler_rule_configurations_isValid = false;

    m_profiler_rule_evaluation_statuses_isSet = false;
    m_profiler_rule_evaluation_statuses_isValid = false;

    m_profiling_status_isSet = false;
    m_profiling_status_isValid = false;

    m_retry_strategy_isSet = false;
    m_retry_strategy_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_warm_pool_status_isSet = false;
    m_warm_pool_status_isValid = false;
}

void OAIDescribeTrainingJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTrainingJobResponse::fromJsonObject(QJsonObject json) {

    m_training_job_name_isValid = ::OpenAPI::fromJsonValue(m_training_job_name, json[QString("TrainingJobName")]);
    m_training_job_name_isSet = !json[QString("TrainingJobName")].isNull() && m_training_job_name_isValid;

    m_training_job_arn_isValid = ::OpenAPI::fromJsonValue(m_training_job_arn, json[QString("TrainingJobArn")]);
    m_training_job_arn_isSet = !json[QString("TrainingJobArn")].isNull() && m_training_job_arn_isValid;

    m_tuning_job_arn_isValid = ::OpenAPI::fromJsonValue(m_tuning_job_arn, json[QString("TuningJobArn")]);
    m_tuning_job_arn_isSet = !json[QString("TuningJobArn")].isNull() && m_tuning_job_arn_isValid;

    m_labeling_job_arn_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_arn, json[QString("LabelingJobArn")]);
    m_labeling_job_arn_isSet = !json[QString("LabelingJobArn")].isNull() && m_labeling_job_arn_isValid;

    m_auto_ml_job_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_arn, json[QString("AutoMLJobArn")]);
    m_auto_ml_job_arn_isSet = !json[QString("AutoMLJobArn")].isNull() && m_auto_ml_job_arn_isValid;

    m_model_artifacts_isValid = ::OpenAPI::fromJsonValue(m_model_artifacts, json[QString("ModelArtifacts")]);
    m_model_artifacts_isSet = !json[QString("ModelArtifacts")].isNull() && m_model_artifacts_isValid;

    m_training_job_status_isValid = ::OpenAPI::fromJsonValue(m_training_job_status, json[QString("TrainingJobStatus")]);
    m_training_job_status_isSet = !json[QString("TrainingJobStatus")].isNull() && m_training_job_status_isValid;

    m_secondary_status_isValid = ::OpenAPI::fromJsonValue(m_secondary_status, json[QString("SecondaryStatus")]);
    m_secondary_status_isSet = !json[QString("SecondaryStatus")].isNull() && m_secondary_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_hyper_parameters_isValid = ::OpenAPI::fromJsonValue(m_hyper_parameters, json[QString("HyperParameters")]);
    m_hyper_parameters_isSet = !json[QString("HyperParameters")].isNull() && m_hyper_parameters_isValid;

    m_algorithm_specification_isValid = ::OpenAPI::fromJsonValue(m_algorithm_specification, json[QString("AlgorithmSpecification")]);
    m_algorithm_specification_isSet = !json[QString("AlgorithmSpecification")].isNull() && m_algorithm_specification_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_resource_config_isValid = ::OpenAPI::fromJsonValue(m_resource_config, json[QString("ResourceConfig")]);
    m_resource_config_isSet = !json[QString("ResourceConfig")].isNull() && m_resource_config_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_stopping_condition_isValid = ::OpenAPI::fromJsonValue(m_stopping_condition, json[QString("StoppingCondition")]);
    m_stopping_condition_isSet = !json[QString("StoppingCondition")].isNull() && m_stopping_condition_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_training_start_time_isValid = ::OpenAPI::fromJsonValue(m_training_start_time, json[QString("TrainingStartTime")]);
    m_training_start_time_isSet = !json[QString("TrainingStartTime")].isNull() && m_training_start_time_isValid;

    m_training_end_time_isValid = ::OpenAPI::fromJsonValue(m_training_end_time, json[QString("TrainingEndTime")]);
    m_training_end_time_isSet = !json[QString("TrainingEndTime")].isNull() && m_training_end_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_secondary_status_transitions_isValid = ::OpenAPI::fromJsonValue(m_secondary_status_transitions, json[QString("SecondaryStatusTransitions")]);
    m_secondary_status_transitions_isSet = !json[QString("SecondaryStatusTransitions")].isNull() && m_secondary_status_transitions_isValid;

    m_final_metric_data_list_isValid = ::OpenAPI::fromJsonValue(m_final_metric_data_list, json[QString("FinalMetricDataList")]);
    m_final_metric_data_list_isSet = !json[QString("FinalMetricDataList")].isNull() && m_final_metric_data_list_isValid;

    m_enable_network_isolation_isValid = ::OpenAPI::fromJsonValue(m_enable_network_isolation, json[QString("EnableNetworkIsolation")]);
    m_enable_network_isolation_isSet = !json[QString("EnableNetworkIsolation")].isNull() && m_enable_network_isolation_isValid;

    m_enable_inter_container_traffic_encryption_isValid = ::OpenAPI::fromJsonValue(m_enable_inter_container_traffic_encryption, json[QString("EnableInterContainerTrafficEncryption")]);
    m_enable_inter_container_traffic_encryption_isSet = !json[QString("EnableInterContainerTrafficEncryption")].isNull() && m_enable_inter_container_traffic_encryption_isValid;

    m_enable_managed_spot_training_isValid = ::OpenAPI::fromJsonValue(m_enable_managed_spot_training, json[QString("EnableManagedSpotTraining")]);
    m_enable_managed_spot_training_isSet = !json[QString("EnableManagedSpotTraining")].isNull() && m_enable_managed_spot_training_isValid;

    m_checkpoint_config_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_config, json[QString("CheckpointConfig")]);
    m_checkpoint_config_isSet = !json[QString("CheckpointConfig")].isNull() && m_checkpoint_config_isValid;

    m_training_time_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_training_time_in_seconds, json[QString("TrainingTimeInSeconds")]);
    m_training_time_in_seconds_isSet = !json[QString("TrainingTimeInSeconds")].isNull() && m_training_time_in_seconds_isValid;

    m_billable_time_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_billable_time_in_seconds, json[QString("BillableTimeInSeconds")]);
    m_billable_time_in_seconds_isSet = !json[QString("BillableTimeInSeconds")].isNull() && m_billable_time_in_seconds_isValid;

    m_debug_hook_config_isValid = ::OpenAPI::fromJsonValue(m_debug_hook_config, json[QString("DebugHookConfig")]);
    m_debug_hook_config_isSet = !json[QString("DebugHookConfig")].isNull() && m_debug_hook_config_isValid;

    m_experiment_config_isValid = ::OpenAPI::fromJsonValue(m_experiment_config, json[QString("ExperimentConfig")]);
    m_experiment_config_isSet = !json[QString("ExperimentConfig")].isNull() && m_experiment_config_isValid;

    m_debug_rule_configurations_isValid = ::OpenAPI::fromJsonValue(m_debug_rule_configurations, json[QString("DebugRuleConfigurations")]);
    m_debug_rule_configurations_isSet = !json[QString("DebugRuleConfigurations")].isNull() && m_debug_rule_configurations_isValid;

    m_tensor_board_output_config_isValid = ::OpenAPI::fromJsonValue(m_tensor_board_output_config, json[QString("TensorBoardOutputConfig")]);
    m_tensor_board_output_config_isSet = !json[QString("TensorBoardOutputConfig")].isNull() && m_tensor_board_output_config_isValid;

    m_debug_rule_evaluation_statuses_isValid = ::OpenAPI::fromJsonValue(m_debug_rule_evaluation_statuses, json[QString("DebugRuleEvaluationStatuses")]);
    m_debug_rule_evaluation_statuses_isSet = !json[QString("DebugRuleEvaluationStatuses")].isNull() && m_debug_rule_evaluation_statuses_isValid;

    m_profiler_config_isValid = ::OpenAPI::fromJsonValue(m_profiler_config, json[QString("ProfilerConfig")]);
    m_profiler_config_isSet = !json[QString("ProfilerConfig")].isNull() && m_profiler_config_isValid;

    m_profiler_rule_configurations_isValid = ::OpenAPI::fromJsonValue(m_profiler_rule_configurations, json[QString("ProfilerRuleConfigurations")]);
    m_profiler_rule_configurations_isSet = !json[QString("ProfilerRuleConfigurations")].isNull() && m_profiler_rule_configurations_isValid;

    m_profiler_rule_evaluation_statuses_isValid = ::OpenAPI::fromJsonValue(m_profiler_rule_evaluation_statuses, json[QString("ProfilerRuleEvaluationStatuses")]);
    m_profiler_rule_evaluation_statuses_isSet = !json[QString("ProfilerRuleEvaluationStatuses")].isNull() && m_profiler_rule_evaluation_statuses_isValid;

    m_profiling_status_isValid = ::OpenAPI::fromJsonValue(m_profiling_status, json[QString("ProfilingStatus")]);
    m_profiling_status_isSet = !json[QString("ProfilingStatus")].isNull() && m_profiling_status_isValid;

    m_retry_strategy_isValid = ::OpenAPI::fromJsonValue(m_retry_strategy, json[QString("RetryStrategy")]);
    m_retry_strategy_isSet = !json[QString("RetryStrategy")].isNull() && m_retry_strategy_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_warm_pool_status_isValid = ::OpenAPI::fromJsonValue(m_warm_pool_status, json[QString("WarmPoolStatus")]);
    m_warm_pool_status_isSet = !json[QString("WarmPoolStatus")].isNull() && m_warm_pool_status_isValid;
}

QString OAIDescribeTrainingJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTrainingJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_training_job_name_isSet) {
        obj.insert(QString("TrainingJobName"), ::OpenAPI::toJsonValue(m_training_job_name));
    }
    if (m_training_job_arn_isSet) {
        obj.insert(QString("TrainingJobArn"), ::OpenAPI::toJsonValue(m_training_job_arn));
    }
    if (m_tuning_job_arn_isSet) {
        obj.insert(QString("TuningJobArn"), ::OpenAPI::toJsonValue(m_tuning_job_arn));
    }
    if (m_labeling_job_arn_isSet) {
        obj.insert(QString("LabelingJobArn"), ::OpenAPI::toJsonValue(m_labeling_job_arn));
    }
    if (m_auto_ml_job_arn_isSet) {
        obj.insert(QString("AutoMLJobArn"), ::OpenAPI::toJsonValue(m_auto_ml_job_arn));
    }
    if (m_model_artifacts.isSet()) {
        obj.insert(QString("ModelArtifacts"), ::OpenAPI::toJsonValue(m_model_artifacts));
    }
    if (m_training_job_status.isSet()) {
        obj.insert(QString("TrainingJobStatus"), ::OpenAPI::toJsonValue(m_training_job_status));
    }
    if (m_secondary_status.isSet()) {
        obj.insert(QString("SecondaryStatus"), ::OpenAPI::toJsonValue(m_secondary_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_hyper_parameters.isSet()) {
        obj.insert(QString("HyperParameters"), ::OpenAPI::toJsonValue(m_hyper_parameters));
    }
    if (m_algorithm_specification.isSet()) {
        obj.insert(QString("AlgorithmSpecification"), ::OpenAPI::toJsonValue(m_algorithm_specification));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_resource_config.isSet()) {
        obj.insert(QString("ResourceConfig"), ::OpenAPI::toJsonValue(m_resource_config));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_stopping_condition.isSet()) {
        obj.insert(QString("StoppingCondition"), ::OpenAPI::toJsonValue(m_stopping_condition));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_training_start_time_isSet) {
        obj.insert(QString("TrainingStartTime"), ::OpenAPI::toJsonValue(m_training_start_time));
    }
    if (m_training_end_time_isSet) {
        obj.insert(QString("TrainingEndTime"), ::OpenAPI::toJsonValue(m_training_end_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_secondary_status_transitions.isSet()) {
        obj.insert(QString("SecondaryStatusTransitions"), ::OpenAPI::toJsonValue(m_secondary_status_transitions));
    }
    if (m_final_metric_data_list.isSet()) {
        obj.insert(QString("FinalMetricDataList"), ::OpenAPI::toJsonValue(m_final_metric_data_list));
    }
    if (m_enable_network_isolation_isSet) {
        obj.insert(QString("EnableNetworkIsolation"), ::OpenAPI::toJsonValue(m_enable_network_isolation));
    }
    if (m_enable_inter_container_traffic_encryption_isSet) {
        obj.insert(QString("EnableInterContainerTrafficEncryption"), ::OpenAPI::toJsonValue(m_enable_inter_container_traffic_encryption));
    }
    if (m_enable_managed_spot_training_isSet) {
        obj.insert(QString("EnableManagedSpotTraining"), ::OpenAPI::toJsonValue(m_enable_managed_spot_training));
    }
    if (m_checkpoint_config.isSet()) {
        obj.insert(QString("CheckpointConfig"), ::OpenAPI::toJsonValue(m_checkpoint_config));
    }
    if (m_training_time_in_seconds_isSet) {
        obj.insert(QString("TrainingTimeInSeconds"), ::OpenAPI::toJsonValue(m_training_time_in_seconds));
    }
    if (m_billable_time_in_seconds_isSet) {
        obj.insert(QString("BillableTimeInSeconds"), ::OpenAPI::toJsonValue(m_billable_time_in_seconds));
    }
    if (m_debug_hook_config.isSet()) {
        obj.insert(QString("DebugHookConfig"), ::OpenAPI::toJsonValue(m_debug_hook_config));
    }
    if (m_experiment_config.isSet()) {
        obj.insert(QString("ExperimentConfig"), ::OpenAPI::toJsonValue(m_experiment_config));
    }
    if (m_debug_rule_configurations.isSet()) {
        obj.insert(QString("DebugRuleConfigurations"), ::OpenAPI::toJsonValue(m_debug_rule_configurations));
    }
    if (m_tensor_board_output_config.isSet()) {
        obj.insert(QString("TensorBoardOutputConfig"), ::OpenAPI::toJsonValue(m_tensor_board_output_config));
    }
    if (m_debug_rule_evaluation_statuses.isSet()) {
        obj.insert(QString("DebugRuleEvaluationStatuses"), ::OpenAPI::toJsonValue(m_debug_rule_evaluation_statuses));
    }
    if (m_profiler_config.isSet()) {
        obj.insert(QString("ProfilerConfig"), ::OpenAPI::toJsonValue(m_profiler_config));
    }
    if (m_profiler_rule_configurations.isSet()) {
        obj.insert(QString("ProfilerRuleConfigurations"), ::OpenAPI::toJsonValue(m_profiler_rule_configurations));
    }
    if (m_profiler_rule_evaluation_statuses.isSet()) {
        obj.insert(QString("ProfilerRuleEvaluationStatuses"), ::OpenAPI::toJsonValue(m_profiler_rule_evaluation_statuses));
    }
    if (m_profiling_status.isSet()) {
        obj.insert(QString("ProfilingStatus"), ::OpenAPI::toJsonValue(m_profiling_status));
    }
    if (m_retry_strategy.isSet()) {
        obj.insert(QString("RetryStrategy"), ::OpenAPI::toJsonValue(m_retry_strategy));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_warm_pool_status.isSet()) {
        obj.insert(QString("WarmPoolStatus"), ::OpenAPI::toJsonValue(m_warm_pool_status));
    }
    return obj;
}

QString OAIDescribeTrainingJobResponse::getTrainingJobName() const {
    return m_training_job_name;
}
void OAIDescribeTrainingJobResponse::setTrainingJobName(const QString &training_job_name) {
    m_training_job_name = training_job_name;
    m_training_job_name_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_training_job_name_Set() const{
    return m_training_job_name_isSet;
}

bool OAIDescribeTrainingJobResponse::is_training_job_name_Valid() const{
    return m_training_job_name_isValid;
}

QString OAIDescribeTrainingJobResponse::getTrainingJobArn() const {
    return m_training_job_arn;
}
void OAIDescribeTrainingJobResponse::setTrainingJobArn(const QString &training_job_arn) {
    m_training_job_arn = training_job_arn;
    m_training_job_arn_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_training_job_arn_Set() const{
    return m_training_job_arn_isSet;
}

bool OAIDescribeTrainingJobResponse::is_training_job_arn_Valid() const{
    return m_training_job_arn_isValid;
}

QString OAIDescribeTrainingJobResponse::getTuningJobArn() const {
    return m_tuning_job_arn;
}
void OAIDescribeTrainingJobResponse::setTuningJobArn(const QString &tuning_job_arn) {
    m_tuning_job_arn = tuning_job_arn;
    m_tuning_job_arn_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_tuning_job_arn_Set() const{
    return m_tuning_job_arn_isSet;
}

bool OAIDescribeTrainingJobResponse::is_tuning_job_arn_Valid() const{
    return m_tuning_job_arn_isValid;
}

QString OAIDescribeTrainingJobResponse::getLabelingJobArn() const {
    return m_labeling_job_arn;
}
void OAIDescribeTrainingJobResponse::setLabelingJobArn(const QString &labeling_job_arn) {
    m_labeling_job_arn = labeling_job_arn;
    m_labeling_job_arn_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_labeling_job_arn_Set() const{
    return m_labeling_job_arn_isSet;
}

bool OAIDescribeTrainingJobResponse::is_labeling_job_arn_Valid() const{
    return m_labeling_job_arn_isValid;
}

QString OAIDescribeTrainingJobResponse::getAutoMlJobArn() const {
    return m_auto_ml_job_arn;
}
void OAIDescribeTrainingJobResponse::setAutoMlJobArn(const QString &auto_ml_job_arn) {
    m_auto_ml_job_arn = auto_ml_job_arn;
    m_auto_ml_job_arn_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_auto_ml_job_arn_Set() const{
    return m_auto_ml_job_arn_isSet;
}

bool OAIDescribeTrainingJobResponse::is_auto_ml_job_arn_Valid() const{
    return m_auto_ml_job_arn_isValid;
}

OAIDescribeTrainingJobResponse_ModelArtifacts OAIDescribeTrainingJobResponse::getModelArtifacts() const {
    return m_model_artifacts;
}
void OAIDescribeTrainingJobResponse::setModelArtifacts(const OAIDescribeTrainingJobResponse_ModelArtifacts &model_artifacts) {
    m_model_artifacts = model_artifacts;
    m_model_artifacts_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_model_artifacts_Set() const{
    return m_model_artifacts_isSet;
}

bool OAIDescribeTrainingJobResponse::is_model_artifacts_Valid() const{
    return m_model_artifacts_isValid;
}

OAITrainingJobStatus OAIDescribeTrainingJobResponse::getTrainingJobStatus() const {
    return m_training_job_status;
}
void OAIDescribeTrainingJobResponse::setTrainingJobStatus(const OAITrainingJobStatus &training_job_status) {
    m_training_job_status = training_job_status;
    m_training_job_status_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_training_job_status_Set() const{
    return m_training_job_status_isSet;
}

bool OAIDescribeTrainingJobResponse::is_training_job_status_Valid() const{
    return m_training_job_status_isValid;
}

OAISecondaryStatus OAIDescribeTrainingJobResponse::getSecondaryStatus() const {
    return m_secondary_status;
}
void OAIDescribeTrainingJobResponse::setSecondaryStatus(const OAISecondaryStatus &secondary_status) {
    m_secondary_status = secondary_status;
    m_secondary_status_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_secondary_status_Set() const{
    return m_secondary_status_isSet;
}

bool OAIDescribeTrainingJobResponse::is_secondary_status_Valid() const{
    return m_secondary_status_isValid;
}

QString OAIDescribeTrainingJobResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIDescribeTrainingJobResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDescribeTrainingJobResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QMap OAIDescribeTrainingJobResponse::getHyperParameters() const {
    return m_hyper_parameters;
}
void OAIDescribeTrainingJobResponse::setHyperParameters(const QMap &hyper_parameters) {
    m_hyper_parameters = hyper_parameters;
    m_hyper_parameters_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_hyper_parameters_Set() const{
    return m_hyper_parameters_isSet;
}

bool OAIDescribeTrainingJobResponse::is_hyper_parameters_Valid() const{
    return m_hyper_parameters_isValid;
}

OAIDescribeTrainingJobResponse_AlgorithmSpecification OAIDescribeTrainingJobResponse::getAlgorithmSpecification() const {
    return m_algorithm_specification;
}
void OAIDescribeTrainingJobResponse::setAlgorithmSpecification(const OAIDescribeTrainingJobResponse_AlgorithmSpecification &algorithm_specification) {
    m_algorithm_specification = algorithm_specification;
    m_algorithm_specification_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_algorithm_specification_Set() const{
    return m_algorithm_specification_isSet;
}

bool OAIDescribeTrainingJobResponse::is_algorithm_specification_Valid() const{
    return m_algorithm_specification_isValid;
}

QString OAIDescribeTrainingJobResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeTrainingJobResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeTrainingJobResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIDescribeTrainingJobResponse::getInputDataConfig() const {
    return m_input_data_config;
}
void OAIDescribeTrainingJobResponse::setInputDataConfig(const QList &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAIDescribeTrainingJobResponse::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAIDescribeTrainingJobResponse_OutputDataConfig OAIDescribeTrainingJobResponse::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAIDescribeTrainingJobResponse::setOutputDataConfig(const OAIDescribeTrainingJobResponse_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAIDescribeTrainingJobResponse::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

OAIDescribeTrainingJobResponse_ResourceConfig OAIDescribeTrainingJobResponse::getResourceConfig() const {
    return m_resource_config;
}
void OAIDescribeTrainingJobResponse::setResourceConfig(const OAIDescribeTrainingJobResponse_ResourceConfig &resource_config) {
    m_resource_config = resource_config;
    m_resource_config_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_resource_config_Set() const{
    return m_resource_config_isSet;
}

bool OAIDescribeTrainingJobResponse::is_resource_config_Valid() const{
    return m_resource_config_isValid;
}

OAIDescribeTrainingJobResponse_VpcConfig OAIDescribeTrainingJobResponse::getVpcConfig() const {
    return m_vpc_config;
}
void OAIDescribeTrainingJobResponse::setVpcConfig(const OAIDescribeTrainingJobResponse_VpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIDescribeTrainingJobResponse::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

OAICreateTrainingJobRequest_StoppingCondition OAIDescribeTrainingJobResponse::getStoppingCondition() const {
    return m_stopping_condition;
}
void OAIDescribeTrainingJobResponse::setStoppingCondition(const OAICreateTrainingJobRequest_StoppingCondition &stopping_condition) {
    m_stopping_condition = stopping_condition;
    m_stopping_condition_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_stopping_condition_Set() const{
    return m_stopping_condition_isSet;
}

bool OAIDescribeTrainingJobResponse::is_stopping_condition_Valid() const{
    return m_stopping_condition_isValid;
}

QDateTime OAIDescribeTrainingJobResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeTrainingJobResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeTrainingJobResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeTrainingJobResponse::getTrainingStartTime() const {
    return m_training_start_time;
}
void OAIDescribeTrainingJobResponse::setTrainingStartTime(const QDateTime &training_start_time) {
    m_training_start_time = training_start_time;
    m_training_start_time_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_training_start_time_Set() const{
    return m_training_start_time_isSet;
}

bool OAIDescribeTrainingJobResponse::is_training_start_time_Valid() const{
    return m_training_start_time_isValid;
}

QDateTime OAIDescribeTrainingJobResponse::getTrainingEndTime() const {
    return m_training_end_time;
}
void OAIDescribeTrainingJobResponse::setTrainingEndTime(const QDateTime &training_end_time) {
    m_training_end_time = training_end_time;
    m_training_end_time_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_training_end_time_Set() const{
    return m_training_end_time_isSet;
}

bool OAIDescribeTrainingJobResponse::is_training_end_time_Valid() const{
    return m_training_end_time_isValid;
}

QDateTime OAIDescribeTrainingJobResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeTrainingJobResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeTrainingJobResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QList OAIDescribeTrainingJobResponse::getSecondaryStatusTransitions() const {
    return m_secondary_status_transitions;
}
void OAIDescribeTrainingJobResponse::setSecondaryStatusTransitions(const QList &secondary_status_transitions) {
    m_secondary_status_transitions = secondary_status_transitions;
    m_secondary_status_transitions_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_secondary_status_transitions_Set() const{
    return m_secondary_status_transitions_isSet;
}

bool OAIDescribeTrainingJobResponse::is_secondary_status_transitions_Valid() const{
    return m_secondary_status_transitions_isValid;
}

QList OAIDescribeTrainingJobResponse::getFinalMetricDataList() const {
    return m_final_metric_data_list;
}
void OAIDescribeTrainingJobResponse::setFinalMetricDataList(const QList &final_metric_data_list) {
    m_final_metric_data_list = final_metric_data_list;
    m_final_metric_data_list_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_final_metric_data_list_Set() const{
    return m_final_metric_data_list_isSet;
}

bool OAIDescribeTrainingJobResponse::is_final_metric_data_list_Valid() const{
    return m_final_metric_data_list_isValid;
}

bool OAIDescribeTrainingJobResponse::getEnableNetworkIsolation() const {
    return m_enable_network_isolation;
}
void OAIDescribeTrainingJobResponse::setEnableNetworkIsolation(const bool &enable_network_isolation) {
    m_enable_network_isolation = enable_network_isolation;
    m_enable_network_isolation_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_enable_network_isolation_Set() const{
    return m_enable_network_isolation_isSet;
}

bool OAIDescribeTrainingJobResponse::is_enable_network_isolation_Valid() const{
    return m_enable_network_isolation_isValid;
}

bool OAIDescribeTrainingJobResponse::getEnableInterContainerTrafficEncryption() const {
    return m_enable_inter_container_traffic_encryption;
}
void OAIDescribeTrainingJobResponse::setEnableInterContainerTrafficEncryption(const bool &enable_inter_container_traffic_encryption) {
    m_enable_inter_container_traffic_encryption = enable_inter_container_traffic_encryption;
    m_enable_inter_container_traffic_encryption_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_enable_inter_container_traffic_encryption_Set() const{
    return m_enable_inter_container_traffic_encryption_isSet;
}

bool OAIDescribeTrainingJobResponse::is_enable_inter_container_traffic_encryption_Valid() const{
    return m_enable_inter_container_traffic_encryption_isValid;
}

bool OAIDescribeTrainingJobResponse::getEnableManagedSpotTraining() const {
    return m_enable_managed_spot_training;
}
void OAIDescribeTrainingJobResponse::setEnableManagedSpotTraining(const bool &enable_managed_spot_training) {
    m_enable_managed_spot_training = enable_managed_spot_training;
    m_enable_managed_spot_training_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_enable_managed_spot_training_Set() const{
    return m_enable_managed_spot_training_isSet;
}

bool OAIDescribeTrainingJobResponse::is_enable_managed_spot_training_Valid() const{
    return m_enable_managed_spot_training_isValid;
}

OAICheckpointConfig OAIDescribeTrainingJobResponse::getCheckpointConfig() const {
    return m_checkpoint_config;
}
void OAIDescribeTrainingJobResponse::setCheckpointConfig(const OAICheckpointConfig &checkpoint_config) {
    m_checkpoint_config = checkpoint_config;
    m_checkpoint_config_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_checkpoint_config_Set() const{
    return m_checkpoint_config_isSet;
}

bool OAIDescribeTrainingJobResponse::is_checkpoint_config_Valid() const{
    return m_checkpoint_config_isValid;
}

qint32 OAIDescribeTrainingJobResponse::getTrainingTimeInSeconds() const {
    return m_training_time_in_seconds;
}
void OAIDescribeTrainingJobResponse::setTrainingTimeInSeconds(const qint32 &training_time_in_seconds) {
    m_training_time_in_seconds = training_time_in_seconds;
    m_training_time_in_seconds_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_training_time_in_seconds_Set() const{
    return m_training_time_in_seconds_isSet;
}

bool OAIDescribeTrainingJobResponse::is_training_time_in_seconds_Valid() const{
    return m_training_time_in_seconds_isValid;
}

qint32 OAIDescribeTrainingJobResponse::getBillableTimeInSeconds() const {
    return m_billable_time_in_seconds;
}
void OAIDescribeTrainingJobResponse::setBillableTimeInSeconds(const qint32 &billable_time_in_seconds) {
    m_billable_time_in_seconds = billable_time_in_seconds;
    m_billable_time_in_seconds_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_billable_time_in_seconds_Set() const{
    return m_billable_time_in_seconds_isSet;
}

bool OAIDescribeTrainingJobResponse::is_billable_time_in_seconds_Valid() const{
    return m_billable_time_in_seconds_isValid;
}

OAIDebugHookConfig OAIDescribeTrainingJobResponse::getDebugHookConfig() const {
    return m_debug_hook_config;
}
void OAIDescribeTrainingJobResponse::setDebugHookConfig(const OAIDebugHookConfig &debug_hook_config) {
    m_debug_hook_config = debug_hook_config;
    m_debug_hook_config_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_debug_hook_config_Set() const{
    return m_debug_hook_config_isSet;
}

bool OAIDescribeTrainingJobResponse::is_debug_hook_config_Valid() const{
    return m_debug_hook_config_isValid;
}

OAIExperimentConfig OAIDescribeTrainingJobResponse::getExperimentConfig() const {
    return m_experiment_config;
}
void OAIDescribeTrainingJobResponse::setExperimentConfig(const OAIExperimentConfig &experiment_config) {
    m_experiment_config = experiment_config;
    m_experiment_config_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_experiment_config_Set() const{
    return m_experiment_config_isSet;
}

bool OAIDescribeTrainingJobResponse::is_experiment_config_Valid() const{
    return m_experiment_config_isValid;
}

QList OAIDescribeTrainingJobResponse::getDebugRuleConfigurations() const {
    return m_debug_rule_configurations;
}
void OAIDescribeTrainingJobResponse::setDebugRuleConfigurations(const QList &debug_rule_configurations) {
    m_debug_rule_configurations = debug_rule_configurations;
    m_debug_rule_configurations_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_debug_rule_configurations_Set() const{
    return m_debug_rule_configurations_isSet;
}

bool OAIDescribeTrainingJobResponse::is_debug_rule_configurations_Valid() const{
    return m_debug_rule_configurations_isValid;
}

OAITensorBoardOutputConfig OAIDescribeTrainingJobResponse::getTensorBoardOutputConfig() const {
    return m_tensor_board_output_config;
}
void OAIDescribeTrainingJobResponse::setTensorBoardOutputConfig(const OAITensorBoardOutputConfig &tensor_board_output_config) {
    m_tensor_board_output_config = tensor_board_output_config;
    m_tensor_board_output_config_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_tensor_board_output_config_Set() const{
    return m_tensor_board_output_config_isSet;
}

bool OAIDescribeTrainingJobResponse::is_tensor_board_output_config_Valid() const{
    return m_tensor_board_output_config_isValid;
}

QList OAIDescribeTrainingJobResponse::getDebugRuleEvaluationStatuses() const {
    return m_debug_rule_evaluation_statuses;
}
void OAIDescribeTrainingJobResponse::setDebugRuleEvaluationStatuses(const QList &debug_rule_evaluation_statuses) {
    m_debug_rule_evaluation_statuses = debug_rule_evaluation_statuses;
    m_debug_rule_evaluation_statuses_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_debug_rule_evaluation_statuses_Set() const{
    return m_debug_rule_evaluation_statuses_isSet;
}

bool OAIDescribeTrainingJobResponse::is_debug_rule_evaluation_statuses_Valid() const{
    return m_debug_rule_evaluation_statuses_isValid;
}

OAIProfilerConfig OAIDescribeTrainingJobResponse::getProfilerConfig() const {
    return m_profiler_config;
}
void OAIDescribeTrainingJobResponse::setProfilerConfig(const OAIProfilerConfig &profiler_config) {
    m_profiler_config = profiler_config;
    m_profiler_config_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_profiler_config_Set() const{
    return m_profiler_config_isSet;
}

bool OAIDescribeTrainingJobResponse::is_profiler_config_Valid() const{
    return m_profiler_config_isValid;
}

QList OAIDescribeTrainingJobResponse::getProfilerRuleConfigurations() const {
    return m_profiler_rule_configurations;
}
void OAIDescribeTrainingJobResponse::setProfilerRuleConfigurations(const QList &profiler_rule_configurations) {
    m_profiler_rule_configurations = profiler_rule_configurations;
    m_profiler_rule_configurations_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_profiler_rule_configurations_Set() const{
    return m_profiler_rule_configurations_isSet;
}

bool OAIDescribeTrainingJobResponse::is_profiler_rule_configurations_Valid() const{
    return m_profiler_rule_configurations_isValid;
}

QList OAIDescribeTrainingJobResponse::getProfilerRuleEvaluationStatuses() const {
    return m_profiler_rule_evaluation_statuses;
}
void OAIDescribeTrainingJobResponse::setProfilerRuleEvaluationStatuses(const QList &profiler_rule_evaluation_statuses) {
    m_profiler_rule_evaluation_statuses = profiler_rule_evaluation_statuses;
    m_profiler_rule_evaluation_statuses_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_profiler_rule_evaluation_statuses_Set() const{
    return m_profiler_rule_evaluation_statuses_isSet;
}

bool OAIDescribeTrainingJobResponse::is_profiler_rule_evaluation_statuses_Valid() const{
    return m_profiler_rule_evaluation_statuses_isValid;
}

OAIProfilingStatus OAIDescribeTrainingJobResponse::getProfilingStatus() const {
    return m_profiling_status;
}
void OAIDescribeTrainingJobResponse::setProfilingStatus(const OAIProfilingStatus &profiling_status) {
    m_profiling_status = profiling_status;
    m_profiling_status_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_profiling_status_Set() const{
    return m_profiling_status_isSet;
}

bool OAIDescribeTrainingJobResponse::is_profiling_status_Valid() const{
    return m_profiling_status_isValid;
}

OAICreateTrainingJobRequest_RetryStrategy OAIDescribeTrainingJobResponse::getRetryStrategy() const {
    return m_retry_strategy;
}
void OAIDescribeTrainingJobResponse::setRetryStrategy(const OAICreateTrainingJobRequest_RetryStrategy &retry_strategy) {
    m_retry_strategy = retry_strategy;
    m_retry_strategy_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_retry_strategy_Set() const{
    return m_retry_strategy_isSet;
}

bool OAIDescribeTrainingJobResponse::is_retry_strategy_Valid() const{
    return m_retry_strategy_isValid;
}

QMap OAIDescribeTrainingJobResponse::getEnvironment() const {
    return m_environment;
}
void OAIDescribeTrainingJobResponse::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIDescribeTrainingJobResponse::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIDescribeTrainingJobResponse_WarmPoolStatus OAIDescribeTrainingJobResponse::getWarmPoolStatus() const {
    return m_warm_pool_status;
}
void OAIDescribeTrainingJobResponse::setWarmPoolStatus(const OAIDescribeTrainingJobResponse_WarmPoolStatus &warm_pool_status) {
    m_warm_pool_status = warm_pool_status;
    m_warm_pool_status_isSet = true;
}

bool OAIDescribeTrainingJobResponse::is_warm_pool_status_Set() const{
    return m_warm_pool_status_isSet;
}

bool OAIDescribeTrainingJobResponse::is_warm_pool_status_Valid() const{
    return m_warm_pool_status_isValid;
}

bool OAIDescribeTrainingJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_training_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuning_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyper_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_status_transitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_metric_data_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_network_isolation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_inter_container_traffic_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_managed_spot_training_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkpoint_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_time_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable_time_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_hook_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_rule_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensor_board_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_rule_evaluation_statuses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiler_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiler_rule_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiler_rule_evaluation_statuses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiling_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_pool_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTrainingJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_training_job_name_isValid && m_training_job_arn_isValid && m_model_artifacts_isValid && m_training_job_status_isValid && m_secondary_status_isValid && m_algorithm_specification_isValid && m_resource_config_isValid && m_stopping_condition_isValid && m_creation_time_isValid && true;
}

} // namespace OpenAPI
