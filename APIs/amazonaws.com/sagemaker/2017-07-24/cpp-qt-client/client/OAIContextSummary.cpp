/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContextSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContextSummary::OAIContextSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContextSummary::OAIContextSummary() {
    this->initializeModel();
}

OAIContextSummary::~OAIContextSummary() {}

void OAIContextSummary::initializeModel() {

    m_context_arn_isSet = false;
    m_context_arn_isValid = false;

    m_context_name_isSet = false;
    m_context_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_context_type_isSet = false;
    m_context_type_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;
}

void OAIContextSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContextSummary::fromJsonObject(QJsonObject json) {

    m_context_arn_isValid = ::OpenAPI::fromJsonValue(m_context_arn, json[QString("ContextArn")]);
    m_context_arn_isSet = !json[QString("ContextArn")].isNull() && m_context_arn_isValid;

    m_context_name_isValid = ::OpenAPI::fromJsonValue(m_context_name, json[QString("ContextName")]);
    m_context_name_isSet = !json[QString("ContextName")].isNull() && m_context_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_context_type_isValid = ::OpenAPI::fromJsonValue(m_context_type, json[QString("ContextType")]);
    m_context_type_isSet = !json[QString("ContextType")].isNull() && m_context_type_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;
}

QString OAIContextSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContextSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_context_arn_isSet) {
        obj.insert(QString("ContextArn"), ::OpenAPI::toJsonValue(m_context_arn));
    }
    if (m_context_name_isSet) {
        obj.insert(QString("ContextName"), ::OpenAPI::toJsonValue(m_context_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_context_type_isSet) {
        obj.insert(QString("ContextType"), ::OpenAPI::toJsonValue(m_context_type));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    return obj;
}

QString OAIContextSummary::getContextArn() const {
    return m_context_arn;
}
void OAIContextSummary::setContextArn(const QString &context_arn) {
    m_context_arn = context_arn;
    m_context_arn_isSet = true;
}

bool OAIContextSummary::is_context_arn_Set() const{
    return m_context_arn_isSet;
}

bool OAIContextSummary::is_context_arn_Valid() const{
    return m_context_arn_isValid;
}

QString OAIContextSummary::getContextName() const {
    return m_context_name;
}
void OAIContextSummary::setContextName(const QString &context_name) {
    m_context_name = context_name;
    m_context_name_isSet = true;
}

bool OAIContextSummary::is_context_name_Set() const{
    return m_context_name_isSet;
}

bool OAIContextSummary::is_context_name_Valid() const{
    return m_context_name_isValid;
}

OAIDescribeContextResponse_Source OAIContextSummary::getSource() const {
    return m_source;
}
void OAIContextSummary::setSource(const OAIDescribeContextResponse_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIContextSummary::is_source_Set() const{
    return m_source_isSet;
}

bool OAIContextSummary::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIContextSummary::getContextType() const {
    return m_context_type;
}
void OAIContextSummary::setContextType(const QString &context_type) {
    m_context_type = context_type;
    m_context_type_isSet = true;
}

bool OAIContextSummary::is_context_type_Set() const{
    return m_context_type_isSet;
}

bool OAIContextSummary::is_context_type_Valid() const{
    return m_context_type_isValid;
}

QDateTime OAIContextSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIContextSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIContextSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIContextSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIContextSummary::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIContextSummary::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIContextSummary::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIContextSummary::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAIContextSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContextSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
