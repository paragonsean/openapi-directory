/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAutoMLJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAutoMLJobRequest::OAICreateAutoMLJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAutoMLJobRequest::OAICreateAutoMLJobRequest() {
    this->initializeModel();
}

OAICreateAutoMLJobRequest::~OAICreateAutoMLJobRequest() {}

void OAICreateAutoMLJobRequest::initializeModel() {

    m_auto_ml_job_name_isSet = false;
    m_auto_ml_job_name_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_problem_type_isSet = false;
    m_problem_type_isValid = false;

    m_auto_ml_job_objective_isSet = false;
    m_auto_ml_job_objective_isValid = false;

    m_auto_ml_job_config_isSet = false;
    m_auto_ml_job_config_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_generate_candidate_definitions_only_isSet = false;
    m_generate_candidate_definitions_only_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_model_deploy_config_isSet = false;
    m_model_deploy_config_isValid = false;
}

void OAICreateAutoMLJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAutoMLJobRequest::fromJsonObject(QJsonObject json) {

    m_auto_ml_job_name_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_name, json[QString("AutoMLJobName")]);
    m_auto_ml_job_name_isSet = !json[QString("AutoMLJobName")].isNull() && m_auto_ml_job_name_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_problem_type_isValid = ::OpenAPI::fromJsonValue(m_problem_type, json[QString("ProblemType")]);
    m_problem_type_isSet = !json[QString("ProblemType")].isNull() && m_problem_type_isValid;

    m_auto_ml_job_objective_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_objective, json[QString("AutoMLJobObjective")]);
    m_auto_ml_job_objective_isSet = !json[QString("AutoMLJobObjective")].isNull() && m_auto_ml_job_objective_isValid;

    m_auto_ml_job_config_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_config, json[QString("AutoMLJobConfig")]);
    m_auto_ml_job_config_isSet = !json[QString("AutoMLJobConfig")].isNull() && m_auto_ml_job_config_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_generate_candidate_definitions_only_isValid = ::OpenAPI::fromJsonValue(m_generate_candidate_definitions_only, json[QString("GenerateCandidateDefinitionsOnly")]);
    m_generate_candidate_definitions_only_isSet = !json[QString("GenerateCandidateDefinitionsOnly")].isNull() && m_generate_candidate_definitions_only_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_model_deploy_config_isValid = ::OpenAPI::fromJsonValue(m_model_deploy_config, json[QString("ModelDeployConfig")]);
    m_model_deploy_config_isSet = !json[QString("ModelDeployConfig")].isNull() && m_model_deploy_config_isValid;
}

QString OAICreateAutoMLJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAutoMLJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_ml_job_name_isSet) {
        obj.insert(QString("AutoMLJobName"), ::OpenAPI::toJsonValue(m_auto_ml_job_name));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_problem_type.isSet()) {
        obj.insert(QString("ProblemType"), ::OpenAPI::toJsonValue(m_problem_type));
    }
    if (m_auto_ml_job_objective.isSet()) {
        obj.insert(QString("AutoMLJobObjective"), ::OpenAPI::toJsonValue(m_auto_ml_job_objective));
    }
    if (m_auto_ml_job_config.isSet()) {
        obj.insert(QString("AutoMLJobConfig"), ::OpenAPI::toJsonValue(m_auto_ml_job_config));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_generate_candidate_definitions_only_isSet) {
        obj.insert(QString("GenerateCandidateDefinitionsOnly"), ::OpenAPI::toJsonValue(m_generate_candidate_definitions_only));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_model_deploy_config.isSet()) {
        obj.insert(QString("ModelDeployConfig"), ::OpenAPI::toJsonValue(m_model_deploy_config));
    }
    return obj;
}

QString OAICreateAutoMLJobRequest::getAutoMlJobName() const {
    return m_auto_ml_job_name;
}
void OAICreateAutoMLJobRequest::setAutoMlJobName(const QString &auto_ml_job_name) {
    m_auto_ml_job_name = auto_ml_job_name;
    m_auto_ml_job_name_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_auto_ml_job_name_Set() const{
    return m_auto_ml_job_name_isSet;
}

bool OAICreateAutoMLJobRequest::is_auto_ml_job_name_Valid() const{
    return m_auto_ml_job_name_isValid;
}

QList OAICreateAutoMLJobRequest::getInputDataConfig() const {
    return m_input_data_config;
}
void OAICreateAutoMLJobRequest::setInputDataConfig(const QList &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAICreateAutoMLJobRequest::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAICreateAutoMLJobRequest_OutputDataConfig OAICreateAutoMLJobRequest::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAICreateAutoMLJobRequest::setOutputDataConfig(const OAICreateAutoMLJobRequest_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAICreateAutoMLJobRequest::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

OAIProblemType OAICreateAutoMLJobRequest::getProblemType() const {
    return m_problem_type;
}
void OAICreateAutoMLJobRequest::setProblemType(const OAIProblemType &problem_type) {
    m_problem_type = problem_type;
    m_problem_type_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_problem_type_Set() const{
    return m_problem_type_isSet;
}

bool OAICreateAutoMLJobRequest::is_problem_type_Valid() const{
    return m_problem_type_isValid;
}

OAICreateAutoMLJobRequest_AutoMLJobObjective OAICreateAutoMLJobRequest::getAutoMlJobObjective() const {
    return m_auto_ml_job_objective;
}
void OAICreateAutoMLJobRequest::setAutoMlJobObjective(const OAICreateAutoMLJobRequest_AutoMLJobObjective &auto_ml_job_objective) {
    m_auto_ml_job_objective = auto_ml_job_objective;
    m_auto_ml_job_objective_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_auto_ml_job_objective_Set() const{
    return m_auto_ml_job_objective_isSet;
}

bool OAICreateAutoMLJobRequest::is_auto_ml_job_objective_Valid() const{
    return m_auto_ml_job_objective_isValid;
}

OAICreateAutoMLJobRequest_AutoMLJobConfig OAICreateAutoMLJobRequest::getAutoMlJobConfig() const {
    return m_auto_ml_job_config;
}
void OAICreateAutoMLJobRequest::setAutoMlJobConfig(const OAICreateAutoMLJobRequest_AutoMLJobConfig &auto_ml_job_config) {
    m_auto_ml_job_config = auto_ml_job_config;
    m_auto_ml_job_config_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_auto_ml_job_config_Set() const{
    return m_auto_ml_job_config_isSet;
}

bool OAICreateAutoMLJobRequest::is_auto_ml_job_config_Valid() const{
    return m_auto_ml_job_config_isValid;
}

QString OAICreateAutoMLJobRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateAutoMLJobRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateAutoMLJobRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAICreateAutoMLJobRequest::getGenerateCandidateDefinitionsOnly() const {
    return m_generate_candidate_definitions_only;
}
void OAICreateAutoMLJobRequest::setGenerateCandidateDefinitionsOnly(const bool &generate_candidate_definitions_only) {
    m_generate_candidate_definitions_only = generate_candidate_definitions_only;
    m_generate_candidate_definitions_only_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_generate_candidate_definitions_only_Set() const{
    return m_generate_candidate_definitions_only_isSet;
}

bool OAICreateAutoMLJobRequest::is_generate_candidate_definitions_only_Valid() const{
    return m_generate_candidate_definitions_only_isValid;
}

QList OAICreateAutoMLJobRequest::getTags() const {
    return m_tags;
}
void OAICreateAutoMLJobRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAutoMLJobRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateAutoMLJobRequest_ModelDeployConfig OAICreateAutoMLJobRequest::getModelDeployConfig() const {
    return m_model_deploy_config;
}
void OAICreateAutoMLJobRequest::setModelDeployConfig(const OAICreateAutoMLJobRequest_ModelDeployConfig &model_deploy_config) {
    m_model_deploy_config = model_deploy_config;
    m_model_deploy_config_isSet = true;
}

bool OAICreateAutoMLJobRequest::is_model_deploy_config_Set() const{
    return m_model_deploy_config_isSet;
}

bool OAICreateAutoMLJobRequest::is_model_deploy_config_Valid() const{
    return m_model_deploy_config_isValid;
}

bool OAICreateAutoMLJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_ml_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_problem_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_objective.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_candidate_definitions_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_deploy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAutoMLJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_ml_job_name_isValid && m_input_data_config_isValid && m_output_data_config_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
