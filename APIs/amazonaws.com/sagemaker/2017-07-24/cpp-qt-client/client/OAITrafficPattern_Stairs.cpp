/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficPattern_Stairs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficPattern_Stairs::OAITrafficPattern_Stairs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficPattern_Stairs::OAITrafficPattern_Stairs() {
    this->initializeModel();
}

OAITrafficPattern_Stairs::~OAITrafficPattern_Stairs() {}

void OAITrafficPattern_Stairs::initializeModel() {

    m_duration_in_seconds_isSet = false;
    m_duration_in_seconds_isValid = false;

    m_number_of_steps_isSet = false;
    m_number_of_steps_isValid = false;

    m_users_per_step_isSet = false;
    m_users_per_step_isValid = false;
}

void OAITrafficPattern_Stairs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficPattern_Stairs::fromJsonObject(QJsonObject json) {

    m_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_in_seconds, json[QString("DurationInSeconds")]);
    m_duration_in_seconds_isSet = !json[QString("DurationInSeconds")].isNull() && m_duration_in_seconds_isValid;

    m_number_of_steps_isValid = ::OpenAPI::fromJsonValue(m_number_of_steps, json[QString("NumberOfSteps")]);
    m_number_of_steps_isSet = !json[QString("NumberOfSteps")].isNull() && m_number_of_steps_isValid;

    m_users_per_step_isValid = ::OpenAPI::fromJsonValue(m_users_per_step, json[QString("UsersPerStep")]);
    m_users_per_step_isSet = !json[QString("UsersPerStep")].isNull() && m_users_per_step_isValid;
}

QString OAITrafficPattern_Stairs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficPattern_Stairs::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_in_seconds_isSet) {
        obj.insert(QString("DurationInSeconds"), ::OpenAPI::toJsonValue(m_duration_in_seconds));
    }
    if (m_number_of_steps_isSet) {
        obj.insert(QString("NumberOfSteps"), ::OpenAPI::toJsonValue(m_number_of_steps));
    }
    if (m_users_per_step_isSet) {
        obj.insert(QString("UsersPerStep"), ::OpenAPI::toJsonValue(m_users_per_step));
    }
    return obj;
}

qint32 OAITrafficPattern_Stairs::getDurationInSeconds() const {
    return m_duration_in_seconds;
}
void OAITrafficPattern_Stairs::setDurationInSeconds(const qint32 &duration_in_seconds) {
    m_duration_in_seconds = duration_in_seconds;
    m_duration_in_seconds_isSet = true;
}

bool OAITrafficPattern_Stairs::is_duration_in_seconds_Set() const{
    return m_duration_in_seconds_isSet;
}

bool OAITrafficPattern_Stairs::is_duration_in_seconds_Valid() const{
    return m_duration_in_seconds_isValid;
}

qint32 OAITrafficPattern_Stairs::getNumberOfSteps() const {
    return m_number_of_steps;
}
void OAITrafficPattern_Stairs::setNumberOfSteps(const qint32 &number_of_steps) {
    m_number_of_steps = number_of_steps;
    m_number_of_steps_isSet = true;
}

bool OAITrafficPattern_Stairs::is_number_of_steps_Set() const{
    return m_number_of_steps_isSet;
}

bool OAITrafficPattern_Stairs::is_number_of_steps_Valid() const{
    return m_number_of_steps_isValid;
}

qint32 OAITrafficPattern_Stairs::getUsersPerStep() const {
    return m_users_per_step;
}
void OAITrafficPattern_Stairs::setUsersPerStep(const qint32 &users_per_step) {
    m_users_per_step = users_per_step;
    m_users_per_step_isSet = true;
}

bool OAITrafficPattern_Stairs::is_users_per_step_Set() const{
    return m_users_per_step_isSet;
}

bool OAITrafficPattern_Stairs::is_users_per_step_Valid() const{
    return m_users_per_step_isValid;
}

bool OAITrafficPattern_Stairs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_per_step_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficPattern_Stairs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
