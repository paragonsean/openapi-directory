/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrialComponentSourceDetail_TransformJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrialComponentSourceDetail_TransformJob::OAITrialComponentSourceDetail_TransformJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrialComponentSourceDetail_TransformJob::OAITrialComponentSourceDetail_TransformJob() {
    this->initializeModel();
}

OAITrialComponentSourceDetail_TransformJob::~OAITrialComponentSourceDetail_TransformJob() {}

void OAITrialComponentSourceDetail_TransformJob::initializeModel() {

    m_transform_job_name_isSet = false;
    m_transform_job_name_isValid = false;

    m_transform_job_arn_isSet = false;
    m_transform_job_arn_isValid = false;

    m_transform_job_status_isSet = false;
    m_transform_job_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_max_concurrent_transforms_isSet = false;
    m_max_concurrent_transforms_isValid = false;

    m_model_client_config_isSet = false;
    m_model_client_config_isValid = false;

    m_max_payload_in_mb_isSet = false;
    m_max_payload_in_mb_isValid = false;

    m_batch_strategy_isSet = false;
    m_batch_strategy_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_transform_input_isSet = false;
    m_transform_input_isValid = false;

    m_transform_output_isSet = false;
    m_transform_output_isValid = false;

    m_transform_resources_isSet = false;
    m_transform_resources_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_transform_start_time_isSet = false;
    m_transform_start_time_isValid = false;

    m_transform_end_time_isSet = false;
    m_transform_end_time_isValid = false;

    m_labeling_job_arn_isSet = false;
    m_labeling_job_arn_isValid = false;

    m_auto_ml_job_arn_isSet = false;
    m_auto_ml_job_arn_isValid = false;

    m_data_processing_isSet = false;
    m_data_processing_isValid = false;

    m_experiment_config_isSet = false;
    m_experiment_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_data_capture_config_isSet = false;
    m_data_capture_config_isValid = false;
}

void OAITrialComponentSourceDetail_TransformJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrialComponentSourceDetail_TransformJob::fromJsonObject(QJsonObject json) {

    m_transform_job_name_isValid = ::OpenAPI::fromJsonValue(m_transform_job_name, json[QString("TransformJobName")]);
    m_transform_job_name_isSet = !json[QString("TransformJobName")].isNull() && m_transform_job_name_isValid;

    m_transform_job_arn_isValid = ::OpenAPI::fromJsonValue(m_transform_job_arn, json[QString("TransformJobArn")]);
    m_transform_job_arn_isSet = !json[QString("TransformJobArn")].isNull() && m_transform_job_arn_isValid;

    m_transform_job_status_isValid = ::OpenAPI::fromJsonValue(m_transform_job_status, json[QString("TransformJobStatus")]);
    m_transform_job_status_isSet = !json[QString("TransformJobStatus")].isNull() && m_transform_job_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_max_concurrent_transforms_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_transforms, json[QString("MaxConcurrentTransforms")]);
    m_max_concurrent_transforms_isSet = !json[QString("MaxConcurrentTransforms")].isNull() && m_max_concurrent_transforms_isValid;

    m_model_client_config_isValid = ::OpenAPI::fromJsonValue(m_model_client_config, json[QString("ModelClientConfig")]);
    m_model_client_config_isSet = !json[QString("ModelClientConfig")].isNull() && m_model_client_config_isValid;

    m_max_payload_in_mb_isValid = ::OpenAPI::fromJsonValue(m_max_payload_in_mb, json[QString("MaxPayloadInMB")]);
    m_max_payload_in_mb_isSet = !json[QString("MaxPayloadInMB")].isNull() && m_max_payload_in_mb_isValid;

    m_batch_strategy_isValid = ::OpenAPI::fromJsonValue(m_batch_strategy, json[QString("BatchStrategy")]);
    m_batch_strategy_isSet = !json[QString("BatchStrategy")].isNull() && m_batch_strategy_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_transform_input_isValid = ::OpenAPI::fromJsonValue(m_transform_input, json[QString("TransformInput")]);
    m_transform_input_isSet = !json[QString("TransformInput")].isNull() && m_transform_input_isValid;

    m_transform_output_isValid = ::OpenAPI::fromJsonValue(m_transform_output, json[QString("TransformOutput")]);
    m_transform_output_isSet = !json[QString("TransformOutput")].isNull() && m_transform_output_isValid;

    m_transform_resources_isValid = ::OpenAPI::fromJsonValue(m_transform_resources, json[QString("TransformResources")]);
    m_transform_resources_isSet = !json[QString("TransformResources")].isNull() && m_transform_resources_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_transform_start_time_isValid = ::OpenAPI::fromJsonValue(m_transform_start_time, json[QString("TransformStartTime")]);
    m_transform_start_time_isSet = !json[QString("TransformStartTime")].isNull() && m_transform_start_time_isValid;

    m_transform_end_time_isValid = ::OpenAPI::fromJsonValue(m_transform_end_time, json[QString("TransformEndTime")]);
    m_transform_end_time_isSet = !json[QString("TransformEndTime")].isNull() && m_transform_end_time_isValid;

    m_labeling_job_arn_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_arn, json[QString("LabelingJobArn")]);
    m_labeling_job_arn_isSet = !json[QString("LabelingJobArn")].isNull() && m_labeling_job_arn_isValid;

    m_auto_ml_job_arn_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_job_arn, json[QString("AutoMLJobArn")]);
    m_auto_ml_job_arn_isSet = !json[QString("AutoMLJobArn")].isNull() && m_auto_ml_job_arn_isValid;

    m_data_processing_isValid = ::OpenAPI::fromJsonValue(m_data_processing, json[QString("DataProcessing")]);
    m_data_processing_isSet = !json[QString("DataProcessing")].isNull() && m_data_processing_isValid;

    m_experiment_config_isValid = ::OpenAPI::fromJsonValue(m_experiment_config, json[QString("ExperimentConfig")]);
    m_experiment_config_isSet = !json[QString("ExperimentConfig")].isNull() && m_experiment_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_data_capture_config_isValid = ::OpenAPI::fromJsonValue(m_data_capture_config, json[QString("DataCaptureConfig")]);
    m_data_capture_config_isSet = !json[QString("DataCaptureConfig")].isNull() && m_data_capture_config_isValid;
}

QString OAITrialComponentSourceDetail_TransformJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrialComponentSourceDetail_TransformJob::asJsonObject() const {
    QJsonObject obj;
    if (m_transform_job_name_isSet) {
        obj.insert(QString("TransformJobName"), ::OpenAPI::toJsonValue(m_transform_job_name));
    }
    if (m_transform_job_arn_isSet) {
        obj.insert(QString("TransformJobArn"), ::OpenAPI::toJsonValue(m_transform_job_arn));
    }
    if (m_transform_job_status.isSet()) {
        obj.insert(QString("TransformJobStatus"), ::OpenAPI::toJsonValue(m_transform_job_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_max_concurrent_transforms_isSet) {
        obj.insert(QString("MaxConcurrentTransforms"), ::OpenAPI::toJsonValue(m_max_concurrent_transforms));
    }
    if (m_model_client_config.isSet()) {
        obj.insert(QString("ModelClientConfig"), ::OpenAPI::toJsonValue(m_model_client_config));
    }
    if (m_max_payload_in_mb_isSet) {
        obj.insert(QString("MaxPayloadInMB"), ::OpenAPI::toJsonValue(m_max_payload_in_mb));
    }
    if (m_batch_strategy.isSet()) {
        obj.insert(QString("BatchStrategy"), ::OpenAPI::toJsonValue(m_batch_strategy));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_transform_input.isSet()) {
        obj.insert(QString("TransformInput"), ::OpenAPI::toJsonValue(m_transform_input));
    }
    if (m_transform_output.isSet()) {
        obj.insert(QString("TransformOutput"), ::OpenAPI::toJsonValue(m_transform_output));
    }
    if (m_transform_resources.isSet()) {
        obj.insert(QString("TransformResources"), ::OpenAPI::toJsonValue(m_transform_resources));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_transform_start_time_isSet) {
        obj.insert(QString("TransformStartTime"), ::OpenAPI::toJsonValue(m_transform_start_time));
    }
    if (m_transform_end_time_isSet) {
        obj.insert(QString("TransformEndTime"), ::OpenAPI::toJsonValue(m_transform_end_time));
    }
    if (m_labeling_job_arn_isSet) {
        obj.insert(QString("LabelingJobArn"), ::OpenAPI::toJsonValue(m_labeling_job_arn));
    }
    if (m_auto_ml_job_arn_isSet) {
        obj.insert(QString("AutoMLJobArn"), ::OpenAPI::toJsonValue(m_auto_ml_job_arn));
    }
    if (m_data_processing.isSet()) {
        obj.insert(QString("DataProcessing"), ::OpenAPI::toJsonValue(m_data_processing));
    }
    if (m_experiment_config.isSet()) {
        obj.insert(QString("ExperimentConfig"), ::OpenAPI::toJsonValue(m_experiment_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_data_capture_config.isSet()) {
        obj.insert(QString("DataCaptureConfig"), ::OpenAPI::toJsonValue(m_data_capture_config));
    }
    return obj;
}

QString OAITrialComponentSourceDetail_TransformJob::getTransformJobName() const {
    return m_transform_job_name;
}
void OAITrialComponentSourceDetail_TransformJob::setTransformJobName(const QString &transform_job_name) {
    m_transform_job_name = transform_job_name;
    m_transform_job_name_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_job_name_Set() const{
    return m_transform_job_name_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_job_name_Valid() const{
    return m_transform_job_name_isValid;
}

QString OAITrialComponentSourceDetail_TransformJob::getTransformJobArn() const {
    return m_transform_job_arn;
}
void OAITrialComponentSourceDetail_TransformJob::setTransformJobArn(const QString &transform_job_arn) {
    m_transform_job_arn = transform_job_arn;
    m_transform_job_arn_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_job_arn_Set() const{
    return m_transform_job_arn_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_job_arn_Valid() const{
    return m_transform_job_arn_isValid;
}

OAITransformJobStatus OAITrialComponentSourceDetail_TransformJob::getTransformJobStatus() const {
    return m_transform_job_status;
}
void OAITrialComponentSourceDetail_TransformJob::setTransformJobStatus(const OAITransformJobStatus &transform_job_status) {
    m_transform_job_status = transform_job_status;
    m_transform_job_status_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_job_status_Set() const{
    return m_transform_job_status_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_job_status_Valid() const{
    return m_transform_job_status_isValid;
}

QString OAITrialComponentSourceDetail_TransformJob::getFailureReason() const {
    return m_failure_reason;
}
void OAITrialComponentSourceDetail_TransformJob::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAITrialComponentSourceDetail_TransformJob::getModelName() const {
    return m_model_name;
}
void OAITrialComponentSourceDetail_TransformJob::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_model_name_Valid() const{
    return m_model_name_isValid;
}

qint32 OAITrialComponentSourceDetail_TransformJob::getMaxConcurrentTransforms() const {
    return m_max_concurrent_transforms;
}
void OAITrialComponentSourceDetail_TransformJob::setMaxConcurrentTransforms(const qint32 &max_concurrent_transforms) {
    m_max_concurrent_transforms = max_concurrent_transforms;
    m_max_concurrent_transforms_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_max_concurrent_transforms_Set() const{
    return m_max_concurrent_transforms_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_max_concurrent_transforms_Valid() const{
    return m_max_concurrent_transforms_isValid;
}

OAIModelClientConfig OAITrialComponentSourceDetail_TransformJob::getModelClientConfig() const {
    return m_model_client_config;
}
void OAITrialComponentSourceDetail_TransformJob::setModelClientConfig(const OAIModelClientConfig &model_client_config) {
    m_model_client_config = model_client_config;
    m_model_client_config_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_model_client_config_Set() const{
    return m_model_client_config_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_model_client_config_Valid() const{
    return m_model_client_config_isValid;
}

qint32 OAITrialComponentSourceDetail_TransformJob::getMaxPayloadInMb() const {
    return m_max_payload_in_mb;
}
void OAITrialComponentSourceDetail_TransformJob::setMaxPayloadInMb(const qint32 &max_payload_in_mb) {
    m_max_payload_in_mb = max_payload_in_mb;
    m_max_payload_in_mb_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_max_payload_in_mb_Set() const{
    return m_max_payload_in_mb_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_max_payload_in_mb_Valid() const{
    return m_max_payload_in_mb_isValid;
}

OAIBatchStrategy OAITrialComponentSourceDetail_TransformJob::getBatchStrategy() const {
    return m_batch_strategy;
}
void OAITrialComponentSourceDetail_TransformJob::setBatchStrategy(const OAIBatchStrategy &batch_strategy) {
    m_batch_strategy = batch_strategy;
    m_batch_strategy_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_batch_strategy_Set() const{
    return m_batch_strategy_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_batch_strategy_Valid() const{
    return m_batch_strategy_isValid;
}

QMap OAITrialComponentSourceDetail_TransformJob::getEnvironment() const {
    return m_environment;
}
void OAITrialComponentSourceDetail_TransformJob::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_environment_Valid() const{
    return m_environment_isValid;
}

OAITransformInput OAITrialComponentSourceDetail_TransformJob::getTransformInput() const {
    return m_transform_input;
}
void OAITrialComponentSourceDetail_TransformJob::setTransformInput(const OAITransformInput &transform_input) {
    m_transform_input = transform_input;
    m_transform_input_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_input_Set() const{
    return m_transform_input_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_input_Valid() const{
    return m_transform_input_isValid;
}

OAITransformOutput OAITrialComponentSourceDetail_TransformJob::getTransformOutput() const {
    return m_transform_output;
}
void OAITrialComponentSourceDetail_TransformJob::setTransformOutput(const OAITransformOutput &transform_output) {
    m_transform_output = transform_output;
    m_transform_output_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_output_Set() const{
    return m_transform_output_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_output_Valid() const{
    return m_transform_output_isValid;
}

OAITransformResources OAITrialComponentSourceDetail_TransformJob::getTransformResources() const {
    return m_transform_resources;
}
void OAITrialComponentSourceDetail_TransformJob::setTransformResources(const OAITransformResources &transform_resources) {
    m_transform_resources = transform_resources;
    m_transform_resources_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_resources_Set() const{
    return m_transform_resources_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_resources_Valid() const{
    return m_transform_resources_isValid;
}

QDateTime OAITrialComponentSourceDetail_TransformJob::getCreationTime() const {
    return m_creation_time;
}
void OAITrialComponentSourceDetail_TransformJob::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAITrialComponentSourceDetail_TransformJob::getTransformStartTime() const {
    return m_transform_start_time;
}
void OAITrialComponentSourceDetail_TransformJob::setTransformStartTime(const QDateTime &transform_start_time) {
    m_transform_start_time = transform_start_time;
    m_transform_start_time_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_start_time_Set() const{
    return m_transform_start_time_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_start_time_Valid() const{
    return m_transform_start_time_isValid;
}

QDateTime OAITrialComponentSourceDetail_TransformJob::getTransformEndTime() const {
    return m_transform_end_time;
}
void OAITrialComponentSourceDetail_TransformJob::setTransformEndTime(const QDateTime &transform_end_time) {
    m_transform_end_time = transform_end_time;
    m_transform_end_time_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_end_time_Set() const{
    return m_transform_end_time_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_transform_end_time_Valid() const{
    return m_transform_end_time_isValid;
}

QString OAITrialComponentSourceDetail_TransformJob::getLabelingJobArn() const {
    return m_labeling_job_arn;
}
void OAITrialComponentSourceDetail_TransformJob::setLabelingJobArn(const QString &labeling_job_arn) {
    m_labeling_job_arn = labeling_job_arn;
    m_labeling_job_arn_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_labeling_job_arn_Set() const{
    return m_labeling_job_arn_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_labeling_job_arn_Valid() const{
    return m_labeling_job_arn_isValid;
}

QString OAITrialComponentSourceDetail_TransformJob::getAutoMlJobArn() const {
    return m_auto_ml_job_arn;
}
void OAITrialComponentSourceDetail_TransformJob::setAutoMlJobArn(const QString &auto_ml_job_arn) {
    m_auto_ml_job_arn = auto_ml_job_arn;
    m_auto_ml_job_arn_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_auto_ml_job_arn_Set() const{
    return m_auto_ml_job_arn_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_auto_ml_job_arn_Valid() const{
    return m_auto_ml_job_arn_isValid;
}

OAIDataProcessing OAITrialComponentSourceDetail_TransformJob::getDataProcessing() const {
    return m_data_processing;
}
void OAITrialComponentSourceDetail_TransformJob::setDataProcessing(const OAIDataProcessing &data_processing) {
    m_data_processing = data_processing;
    m_data_processing_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_data_processing_Set() const{
    return m_data_processing_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_data_processing_Valid() const{
    return m_data_processing_isValid;
}

OAIExperimentConfig OAITrialComponentSourceDetail_TransformJob::getExperimentConfig() const {
    return m_experiment_config;
}
void OAITrialComponentSourceDetail_TransformJob::setExperimentConfig(const OAIExperimentConfig &experiment_config) {
    m_experiment_config = experiment_config;
    m_experiment_config_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_experiment_config_Set() const{
    return m_experiment_config_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_experiment_config_Valid() const{
    return m_experiment_config_isValid;
}

QList OAITrialComponentSourceDetail_TransformJob::getTags() const {
    return m_tags;
}
void OAITrialComponentSourceDetail_TransformJob::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIBatchDataCaptureConfig OAITrialComponentSourceDetail_TransformJob::getDataCaptureConfig() const {
    return m_data_capture_config;
}
void OAITrialComponentSourceDetail_TransformJob::setDataCaptureConfig(const OAIBatchDataCaptureConfig &data_capture_config) {
    m_data_capture_config = data_capture_config;
    m_data_capture_config_isSet = true;
}

bool OAITrialComponentSourceDetail_TransformJob::is_data_capture_config_Set() const{
    return m_data_capture_config_isSet;
}

bool OAITrialComponentSourceDetail_TransformJob::is_data_capture_config_Valid() const{
    return m_data_capture_config_isValid;
}

bool OAITrialComponentSourceDetail_TransformJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transform_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_transforms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_client_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_payload_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_processing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_capture_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrialComponentSourceDetail_TransformJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
