/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClarifyInferenceConfig.h
 *
 * The inference configuration parameter for the model container.
 */

#ifndef OAIClarifyInferenceConfig_H
#define OAIClarifyInferenceConfig_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIClarifyInferenceConfig : public OAIObject {
public:
    OAIClarifyInferenceConfig();
    OAIClarifyInferenceConfig(QString json);
    ~OAIClarifyInferenceConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFeaturesAttribute() const;
    void setFeaturesAttribute(const QString &features_attribute);
    bool is_features_attribute_Set() const;
    bool is_features_attribute_Valid() const;

    QString getContentTemplate() const;
    void setContentTemplate(const QString &content_template);
    bool is_content_template_Set() const;
    bool is_content_template_Valid() const;

    qint32 getMaxRecordCount() const;
    void setMaxRecordCount(const qint32 &max_record_count);
    bool is_max_record_count_Set() const;
    bool is_max_record_count_Valid() const;

    qint32 getMaxPayloadInMb() const;
    void setMaxPayloadInMb(const qint32 &max_payload_in_mb);
    bool is_max_payload_in_mb_Set() const;
    bool is_max_payload_in_mb_Valid() const;

    qint32 getProbabilityIndex() const;
    void setProbabilityIndex(const qint32 &probability_index);
    bool is_probability_index_Set() const;
    bool is_probability_index_Valid() const;

    qint32 getLabelIndex() const;
    void setLabelIndex(const qint32 &label_index);
    bool is_label_index_Set() const;
    bool is_label_index_Valid() const;

    QString getProbabilityAttribute() const;
    void setProbabilityAttribute(const QString &probability_attribute);
    bool is_probability_attribute_Set() const;
    bool is_probability_attribute_Valid() const;

    QString getLabelAttribute() const;
    void setLabelAttribute(const QString &label_attribute);
    bool is_label_attribute_Set() const;
    bool is_label_attribute_Valid() const;

    QList getLabelHeaders() const;
    void setLabelHeaders(const QList &label_headers);
    bool is_label_headers_Set() const;
    bool is_label_headers_Valid() const;

    QList getFeatureHeaders() const;
    void setFeatureHeaders(const QList &feature_headers);
    bool is_feature_headers_Set() const;
    bool is_feature_headers_Valid() const;

    QList getFeatureTypes() const;
    void setFeatureTypes(const QList &feature_types);
    bool is_feature_types_Set() const;
    bool is_feature_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_features_attribute;
    bool m_features_attribute_isSet;
    bool m_features_attribute_isValid;

    QString m_content_template;
    bool m_content_template_isSet;
    bool m_content_template_isValid;

    qint32 m_max_record_count;
    bool m_max_record_count_isSet;
    bool m_max_record_count_isValid;

    qint32 m_max_payload_in_mb;
    bool m_max_payload_in_mb_isSet;
    bool m_max_payload_in_mb_isValid;

    qint32 m_probability_index;
    bool m_probability_index_isSet;
    bool m_probability_index_isValid;

    qint32 m_label_index;
    bool m_label_index_isSet;
    bool m_label_index_isValid;

    QString m_probability_attribute;
    bool m_probability_attribute_isSet;
    bool m_probability_attribute_isValid;

    QString m_label_attribute;
    bool m_label_attribute_isSet;
    bool m_label_attribute_isValid;

    QList m_label_headers;
    bool m_label_headers_isSet;
    bool m_label_headers_isValid;

    QList m_feature_headers;
    bool m_feature_headers_isSet;
    bool m_feature_headers_isValid;

    QList m_feature_types;
    bool m_feature_types_isSet;
    bool m_feature_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClarifyInferenceConfig)

#endif // OAIClarifyInferenceConfig_H
