/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringSchedule::OAIMonitoringSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringSchedule::OAIMonitoringSchedule() {
    this->initializeModel();
}

OAIMonitoringSchedule::~OAIMonitoringSchedule() {}

void OAIMonitoringSchedule::initializeModel() {

    m_monitoring_schedule_arn_isSet = false;
    m_monitoring_schedule_arn_isValid = false;

    m_monitoring_schedule_name_isSet = false;
    m_monitoring_schedule_name_isValid = false;

    m_monitoring_schedule_status_isSet = false;
    m_monitoring_schedule_status_isValid = false;

    m_monitoring_type_isSet = false;
    m_monitoring_type_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_monitoring_schedule_config_isSet = false;
    m_monitoring_schedule_config_isValid = false;

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_last_monitoring_execution_summary_isSet = false;
    m_last_monitoring_execution_summary_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIMonitoringSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringSchedule::fromJsonObject(QJsonObject json) {

    m_monitoring_schedule_arn_isValid = ::OpenAPI::fromJsonValue(m_monitoring_schedule_arn, json[QString("MonitoringScheduleArn")]);
    m_monitoring_schedule_arn_isSet = !json[QString("MonitoringScheduleArn")].isNull() && m_monitoring_schedule_arn_isValid;

    m_monitoring_schedule_name_isValid = ::OpenAPI::fromJsonValue(m_monitoring_schedule_name, json[QString("MonitoringScheduleName")]);
    m_monitoring_schedule_name_isSet = !json[QString("MonitoringScheduleName")].isNull() && m_monitoring_schedule_name_isValid;

    m_monitoring_schedule_status_isValid = ::OpenAPI::fromJsonValue(m_monitoring_schedule_status, json[QString("MonitoringScheduleStatus")]);
    m_monitoring_schedule_status_isSet = !json[QString("MonitoringScheduleStatus")].isNull() && m_monitoring_schedule_status_isValid;

    m_monitoring_type_isValid = ::OpenAPI::fromJsonValue(m_monitoring_type, json[QString("MonitoringType")]);
    m_monitoring_type_isSet = !json[QString("MonitoringType")].isNull() && m_monitoring_type_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_monitoring_schedule_config_isValid = ::OpenAPI::fromJsonValue(m_monitoring_schedule_config, json[QString("MonitoringScheduleConfig")]);
    m_monitoring_schedule_config_isSet = !json[QString("MonitoringScheduleConfig")].isNull() && m_monitoring_schedule_config_isValid;

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("EndpointName")]);
    m_endpoint_name_isSet = !json[QString("EndpointName")].isNull() && m_endpoint_name_isValid;

    m_last_monitoring_execution_summary_isValid = ::OpenAPI::fromJsonValue(m_last_monitoring_execution_summary, json[QString("LastMonitoringExecutionSummary")]);
    m_last_monitoring_execution_summary_isSet = !json[QString("LastMonitoringExecutionSummary")].isNull() && m_last_monitoring_execution_summary_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIMonitoringSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_monitoring_schedule_arn_isSet) {
        obj.insert(QString("MonitoringScheduleArn"), ::OpenAPI::toJsonValue(m_monitoring_schedule_arn));
    }
    if (m_monitoring_schedule_name_isSet) {
        obj.insert(QString("MonitoringScheduleName"), ::OpenAPI::toJsonValue(m_monitoring_schedule_name));
    }
    if (m_monitoring_schedule_status.isSet()) {
        obj.insert(QString("MonitoringScheduleStatus"), ::OpenAPI::toJsonValue(m_monitoring_schedule_status));
    }
    if (m_monitoring_type.isSet()) {
        obj.insert(QString("MonitoringType"), ::OpenAPI::toJsonValue(m_monitoring_type));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_monitoring_schedule_config.isSet()) {
        obj.insert(QString("MonitoringScheduleConfig"), ::OpenAPI::toJsonValue(m_monitoring_schedule_config));
    }
    if (m_endpoint_name_isSet) {
        obj.insert(QString("EndpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_last_monitoring_execution_summary.isSet()) {
        obj.insert(QString("LastMonitoringExecutionSummary"), ::OpenAPI::toJsonValue(m_last_monitoring_execution_summary));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIMonitoringSchedule::getMonitoringScheduleArn() const {
    return m_monitoring_schedule_arn;
}
void OAIMonitoringSchedule::setMonitoringScheduleArn(const QString &monitoring_schedule_arn) {
    m_monitoring_schedule_arn = monitoring_schedule_arn;
    m_monitoring_schedule_arn_isSet = true;
}

bool OAIMonitoringSchedule::is_monitoring_schedule_arn_Set() const{
    return m_monitoring_schedule_arn_isSet;
}

bool OAIMonitoringSchedule::is_monitoring_schedule_arn_Valid() const{
    return m_monitoring_schedule_arn_isValid;
}

QString OAIMonitoringSchedule::getMonitoringScheduleName() const {
    return m_monitoring_schedule_name;
}
void OAIMonitoringSchedule::setMonitoringScheduleName(const QString &monitoring_schedule_name) {
    m_monitoring_schedule_name = monitoring_schedule_name;
    m_monitoring_schedule_name_isSet = true;
}

bool OAIMonitoringSchedule::is_monitoring_schedule_name_Set() const{
    return m_monitoring_schedule_name_isSet;
}

bool OAIMonitoringSchedule::is_monitoring_schedule_name_Valid() const{
    return m_monitoring_schedule_name_isValid;
}

OAIScheduleStatus OAIMonitoringSchedule::getMonitoringScheduleStatus() const {
    return m_monitoring_schedule_status;
}
void OAIMonitoringSchedule::setMonitoringScheduleStatus(const OAIScheduleStatus &monitoring_schedule_status) {
    m_monitoring_schedule_status = monitoring_schedule_status;
    m_monitoring_schedule_status_isSet = true;
}

bool OAIMonitoringSchedule::is_monitoring_schedule_status_Set() const{
    return m_monitoring_schedule_status_isSet;
}

bool OAIMonitoringSchedule::is_monitoring_schedule_status_Valid() const{
    return m_monitoring_schedule_status_isValid;
}

OAIMonitoringType OAIMonitoringSchedule::getMonitoringType() const {
    return m_monitoring_type;
}
void OAIMonitoringSchedule::setMonitoringType(const OAIMonitoringType &monitoring_type) {
    m_monitoring_type = monitoring_type;
    m_monitoring_type_isSet = true;
}

bool OAIMonitoringSchedule::is_monitoring_type_Set() const{
    return m_monitoring_type_isSet;
}

bool OAIMonitoringSchedule::is_monitoring_type_Valid() const{
    return m_monitoring_type_isValid;
}

QString OAIMonitoringSchedule::getFailureReason() const {
    return m_failure_reason;
}
void OAIMonitoringSchedule::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIMonitoringSchedule::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIMonitoringSchedule::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QDateTime OAIMonitoringSchedule::getCreationTime() const {
    return m_creation_time;
}
void OAIMonitoringSchedule::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIMonitoringSchedule::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIMonitoringSchedule::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIMonitoringSchedule::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIMonitoringSchedule::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIMonitoringSchedule::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIMonitoringSchedule::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIMonitoringScheduleConfig OAIMonitoringSchedule::getMonitoringScheduleConfig() const {
    return m_monitoring_schedule_config;
}
void OAIMonitoringSchedule::setMonitoringScheduleConfig(const OAIMonitoringScheduleConfig &monitoring_schedule_config) {
    m_monitoring_schedule_config = monitoring_schedule_config;
    m_monitoring_schedule_config_isSet = true;
}

bool OAIMonitoringSchedule::is_monitoring_schedule_config_Set() const{
    return m_monitoring_schedule_config_isSet;
}

bool OAIMonitoringSchedule::is_monitoring_schedule_config_Valid() const{
    return m_monitoring_schedule_config_isValid;
}

QString OAIMonitoringSchedule::getEndpointName() const {
    return m_endpoint_name;
}
void OAIMonitoringSchedule::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIMonitoringSchedule::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIMonitoringSchedule::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

OAIMonitoringExecutionSummary OAIMonitoringSchedule::getLastMonitoringExecutionSummary() const {
    return m_last_monitoring_execution_summary;
}
void OAIMonitoringSchedule::setLastMonitoringExecutionSummary(const OAIMonitoringExecutionSummary &last_monitoring_execution_summary) {
    m_last_monitoring_execution_summary = last_monitoring_execution_summary;
    m_last_monitoring_execution_summary_isSet = true;
}

bool OAIMonitoringSchedule::is_last_monitoring_execution_summary_Set() const{
    return m_last_monitoring_execution_summary_isSet;
}

bool OAIMonitoringSchedule::is_last_monitoring_execution_summary_Valid() const{
    return m_last_monitoring_execution_summary_isValid;
}

QList OAIMonitoringSchedule::getTags() const {
    return m_tags;
}
void OAIMonitoringSchedule::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMonitoringSchedule::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMonitoringSchedule::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIMonitoringSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monitoring_schedule_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_schedule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_schedule_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_schedule_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_monitoring_execution_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
