/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecommendationMetrics.h
 *
 * The metrics of recommendations.
 */

#ifndef OAIRecommendationMetrics_H
#define OAIRecommendationMetrics_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRecommendationMetrics : public OAIObject {
public:
    OAIRecommendationMetrics();
    OAIRecommendationMetrics(QString json);
    ~OAIRecommendationMetrics() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getCostPerHour() const;
    void setCostPerHour(const float &cost_per_hour);
    bool is_cost_per_hour_Set() const;
    bool is_cost_per_hour_Valid() const;

    float getCostPerInference() const;
    void setCostPerInference(const float &cost_per_inference);
    bool is_cost_per_inference_Set() const;
    bool is_cost_per_inference_Valid() const;

    qint32 getMaxInvocations() const;
    void setMaxInvocations(const qint32 &max_invocations);
    bool is_max_invocations_Set() const;
    bool is_max_invocations_Valid() const;

    qint32 getModelLatency() const;
    void setModelLatency(const qint32 &model_latency);
    bool is_model_latency_Set() const;
    bool is_model_latency_Valid() const;

    float getCpuUtilization() const;
    void setCpuUtilization(const float &cpu_utilization);
    bool is_cpu_utilization_Set() const;
    bool is_cpu_utilization_Valid() const;

    float getMemoryUtilization() const;
    void setMemoryUtilization(const float &memory_utilization);
    bool is_memory_utilization_Set() const;
    bool is_memory_utilization_Valid() const;

    qint32 getModelSetupTime() const;
    void setModelSetupTime(const qint32 &model_setup_time);
    bool is_model_setup_time_Set() const;
    bool is_model_setup_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_cost_per_hour;
    bool m_cost_per_hour_isSet;
    bool m_cost_per_hour_isValid;

    float m_cost_per_inference;
    bool m_cost_per_inference_isSet;
    bool m_cost_per_inference_isValid;

    qint32 m_max_invocations;
    bool m_max_invocations_isSet;
    bool m_max_invocations_isValid;

    qint32 m_model_latency;
    bool m_model_latency_isSet;
    bool m_model_latency_isValid;

    float m_cpu_utilization;
    bool m_cpu_utilization_isSet;
    bool m_cpu_utilization_isValid;

    float m_memory_utilization;
    bool m_memory_utilization_isSet;
    bool m_memory_utilization_isValid;

    qint32 m_model_setup_time;
    bool m_model_setup_time_isSet;
    bool m_model_setup_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecommendationMetrics)

#endif // OAIRecommendationMetrics_H
