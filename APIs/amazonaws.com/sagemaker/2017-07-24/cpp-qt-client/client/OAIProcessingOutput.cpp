/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessingOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessingOutput::OAIProcessingOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessingOutput::OAIProcessingOutput() {
    this->initializeModel();
}

OAIProcessingOutput::~OAIProcessingOutput() {}

void OAIProcessingOutput::initializeModel() {

    m_output_name_isSet = false;
    m_output_name_isValid = false;

    m_s3_output_isSet = false;
    m_s3_output_isValid = false;

    m_feature_store_output_isSet = false;
    m_feature_store_output_isValid = false;

    m_app_managed_isSet = false;
    m_app_managed_isValid = false;
}

void OAIProcessingOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessingOutput::fromJsonObject(QJsonObject json) {

    m_output_name_isValid = ::OpenAPI::fromJsonValue(m_output_name, json[QString("OutputName")]);
    m_output_name_isSet = !json[QString("OutputName")].isNull() && m_output_name_isValid;

    m_s3_output_isValid = ::OpenAPI::fromJsonValue(m_s3_output, json[QString("S3Output")]);
    m_s3_output_isSet = !json[QString("S3Output")].isNull() && m_s3_output_isValid;

    m_feature_store_output_isValid = ::OpenAPI::fromJsonValue(m_feature_store_output, json[QString("FeatureStoreOutput")]);
    m_feature_store_output_isSet = !json[QString("FeatureStoreOutput")].isNull() && m_feature_store_output_isValid;

    m_app_managed_isValid = ::OpenAPI::fromJsonValue(m_app_managed, json[QString("AppManaged")]);
    m_app_managed_isSet = !json[QString("AppManaged")].isNull() && m_app_managed_isValid;
}

QString OAIProcessingOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessingOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_output_name_isSet) {
        obj.insert(QString("OutputName"), ::OpenAPI::toJsonValue(m_output_name));
    }
    if (m_s3_output.isSet()) {
        obj.insert(QString("S3Output"), ::OpenAPI::toJsonValue(m_s3_output));
    }
    if (m_feature_store_output.isSet()) {
        obj.insert(QString("FeatureStoreOutput"), ::OpenAPI::toJsonValue(m_feature_store_output));
    }
    if (m_app_managed_isSet) {
        obj.insert(QString("AppManaged"), ::OpenAPI::toJsonValue(m_app_managed));
    }
    return obj;
}

QString OAIProcessingOutput::getOutputName() const {
    return m_output_name;
}
void OAIProcessingOutput::setOutputName(const QString &output_name) {
    m_output_name = output_name;
    m_output_name_isSet = true;
}

bool OAIProcessingOutput::is_output_name_Set() const{
    return m_output_name_isSet;
}

bool OAIProcessingOutput::is_output_name_Valid() const{
    return m_output_name_isValid;
}

OAIProcessingOutput_S3Output OAIProcessingOutput::getS3Output() const {
    return m_s3_output;
}
void OAIProcessingOutput::setS3Output(const OAIProcessingOutput_S3Output &s3_output) {
    m_s3_output = s3_output;
    m_s3_output_isSet = true;
}

bool OAIProcessingOutput::is_s3_output_Set() const{
    return m_s3_output_isSet;
}

bool OAIProcessingOutput::is_s3_output_Valid() const{
    return m_s3_output_isValid;
}

OAIProcessingOutput_FeatureStoreOutput OAIProcessingOutput::getFeatureStoreOutput() const {
    return m_feature_store_output;
}
void OAIProcessingOutput::setFeatureStoreOutput(const OAIProcessingOutput_FeatureStoreOutput &feature_store_output) {
    m_feature_store_output = feature_store_output;
    m_feature_store_output_isSet = true;
}

bool OAIProcessingOutput::is_feature_store_output_Set() const{
    return m_feature_store_output_isSet;
}

bool OAIProcessingOutput::is_feature_store_output_Valid() const{
    return m_feature_store_output_isValid;
}

bool OAIProcessingOutput::getAppManaged() const {
    return m_app_managed;
}
void OAIProcessingOutput::setAppManaged(const bool &app_managed) {
    m_app_managed = app_managed;
    m_app_managed_isSet = true;
}

bool OAIProcessingOutput::is_app_managed_Set() const{
    return m_app_managed_isSet;
}

bool OAIProcessingOutput::is_app_managed_Valid() const{
    return m_app_managed_isValid;
}

bool OAIProcessingOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_store_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_managed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessingOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_name_isValid && true;
}

} // namespace OpenAPI
