/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationJobInputConfig_ContainerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationJobInputConfig_ContainerConfig::OAIRecommendationJobInputConfig_ContainerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationJobInputConfig_ContainerConfig::OAIRecommendationJobInputConfig_ContainerConfig() {
    this->initializeModel();
}

OAIRecommendationJobInputConfig_ContainerConfig::~OAIRecommendationJobInputConfig_ContainerConfig() {}

void OAIRecommendationJobInputConfig_ContainerConfig::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_framework_isSet = false;
    m_framework_isValid = false;

    m_framework_version_isSet = false;
    m_framework_version_isValid = false;

    m_payload_config_isSet = false;
    m_payload_config_isValid = false;

    m_nearest_model_name_isSet = false;
    m_nearest_model_name_isValid = false;

    m_supported_instance_types_isSet = false;
    m_supported_instance_types_isValid = false;

    m_data_input_config_isSet = false;
    m_data_input_config_isValid = false;

    m_supported_endpoint_type_isSet = false;
    m_supported_endpoint_type_isValid = false;
}

void OAIRecommendationJobInputConfig_ContainerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationJobInputConfig_ContainerConfig::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("Task")]);
    m_task_isSet = !json[QString("Task")].isNull() && m_task_isValid;

    m_framework_isValid = ::OpenAPI::fromJsonValue(m_framework, json[QString("Framework")]);
    m_framework_isSet = !json[QString("Framework")].isNull() && m_framework_isValid;

    m_framework_version_isValid = ::OpenAPI::fromJsonValue(m_framework_version, json[QString("FrameworkVersion")]);
    m_framework_version_isSet = !json[QString("FrameworkVersion")].isNull() && m_framework_version_isValid;

    m_payload_config_isValid = ::OpenAPI::fromJsonValue(m_payload_config, json[QString("PayloadConfig")]);
    m_payload_config_isSet = !json[QString("PayloadConfig")].isNull() && m_payload_config_isValid;

    m_nearest_model_name_isValid = ::OpenAPI::fromJsonValue(m_nearest_model_name, json[QString("NearestModelName")]);
    m_nearest_model_name_isSet = !json[QString("NearestModelName")].isNull() && m_nearest_model_name_isValid;

    m_supported_instance_types_isValid = ::OpenAPI::fromJsonValue(m_supported_instance_types, json[QString("SupportedInstanceTypes")]);
    m_supported_instance_types_isSet = !json[QString("SupportedInstanceTypes")].isNull() && m_supported_instance_types_isValid;

    m_data_input_config_isValid = ::OpenAPI::fromJsonValue(m_data_input_config, json[QString("DataInputConfig")]);
    m_data_input_config_isSet = !json[QString("DataInputConfig")].isNull() && m_data_input_config_isValid;

    m_supported_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_supported_endpoint_type, json[QString("SupportedEndpointType")]);
    m_supported_endpoint_type_isSet = !json[QString("SupportedEndpointType")].isNull() && m_supported_endpoint_type_isValid;
}

QString OAIRecommendationJobInputConfig_ContainerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationJobInputConfig_ContainerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_task_isSet) {
        obj.insert(QString("Task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_framework_isSet) {
        obj.insert(QString("Framework"), ::OpenAPI::toJsonValue(m_framework));
    }
    if (m_framework_version_isSet) {
        obj.insert(QString("FrameworkVersion"), ::OpenAPI::toJsonValue(m_framework_version));
    }
    if (m_payload_config.isSet()) {
        obj.insert(QString("PayloadConfig"), ::OpenAPI::toJsonValue(m_payload_config));
    }
    if (m_nearest_model_name_isSet) {
        obj.insert(QString("NearestModelName"), ::OpenAPI::toJsonValue(m_nearest_model_name));
    }
    if (m_supported_instance_types.isSet()) {
        obj.insert(QString("SupportedInstanceTypes"), ::OpenAPI::toJsonValue(m_supported_instance_types));
    }
    if (m_data_input_config_isSet) {
        obj.insert(QString("DataInputConfig"), ::OpenAPI::toJsonValue(m_data_input_config));
    }
    if (m_supported_endpoint_type.isSet()) {
        obj.insert(QString("SupportedEndpointType"), ::OpenAPI::toJsonValue(m_supported_endpoint_type));
    }
    return obj;
}

QString OAIRecommendationJobInputConfig_ContainerConfig::getDomain() const {
    return m_domain;
}
void OAIRecommendationJobInputConfig_ContainerConfig::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIRecommendationJobInputConfig_ContainerConfig::getTask() const {
    return m_task;
}
void OAIRecommendationJobInputConfig_ContainerConfig::setTask(const QString &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_task_Set() const{
    return m_task_isSet;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_task_Valid() const{
    return m_task_isValid;
}

QString OAIRecommendationJobInputConfig_ContainerConfig::getFramework() const {
    return m_framework;
}
void OAIRecommendationJobInputConfig_ContainerConfig::setFramework(const QString &framework) {
    m_framework = framework;
    m_framework_isSet = true;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_framework_Set() const{
    return m_framework_isSet;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_framework_Valid() const{
    return m_framework_isValid;
}

QString OAIRecommendationJobInputConfig_ContainerConfig::getFrameworkVersion() const {
    return m_framework_version;
}
void OAIRecommendationJobInputConfig_ContainerConfig::setFrameworkVersion(const QString &framework_version) {
    m_framework_version = framework_version;
    m_framework_version_isSet = true;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_framework_version_Set() const{
    return m_framework_version_isSet;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_framework_version_Valid() const{
    return m_framework_version_isValid;
}

OAIRecommendationJobContainerConfig_PayloadConfig OAIRecommendationJobInputConfig_ContainerConfig::getPayloadConfig() const {
    return m_payload_config;
}
void OAIRecommendationJobInputConfig_ContainerConfig::setPayloadConfig(const OAIRecommendationJobContainerConfig_PayloadConfig &payload_config) {
    m_payload_config = payload_config;
    m_payload_config_isSet = true;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_payload_config_Set() const{
    return m_payload_config_isSet;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_payload_config_Valid() const{
    return m_payload_config_isValid;
}

QString OAIRecommendationJobInputConfig_ContainerConfig::getNearestModelName() const {
    return m_nearest_model_name;
}
void OAIRecommendationJobInputConfig_ContainerConfig::setNearestModelName(const QString &nearest_model_name) {
    m_nearest_model_name = nearest_model_name;
    m_nearest_model_name_isSet = true;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_nearest_model_name_Set() const{
    return m_nearest_model_name_isSet;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_nearest_model_name_Valid() const{
    return m_nearest_model_name_isValid;
}

QList OAIRecommendationJobInputConfig_ContainerConfig::getSupportedInstanceTypes() const {
    return m_supported_instance_types;
}
void OAIRecommendationJobInputConfig_ContainerConfig::setSupportedInstanceTypes(const QList &supported_instance_types) {
    m_supported_instance_types = supported_instance_types;
    m_supported_instance_types_isSet = true;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_supported_instance_types_Set() const{
    return m_supported_instance_types_isSet;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_supported_instance_types_Valid() const{
    return m_supported_instance_types_isValid;
}

QString OAIRecommendationJobInputConfig_ContainerConfig::getDataInputConfig() const {
    return m_data_input_config;
}
void OAIRecommendationJobInputConfig_ContainerConfig::setDataInputConfig(const QString &data_input_config) {
    m_data_input_config = data_input_config;
    m_data_input_config_isSet = true;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_data_input_config_Set() const{
    return m_data_input_config_isSet;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_data_input_config_Valid() const{
    return m_data_input_config_isValid;
}

OAIRecommendationJobSupportedEndpointType OAIRecommendationJobInputConfig_ContainerConfig::getSupportedEndpointType() const {
    return m_supported_endpoint_type;
}
void OAIRecommendationJobInputConfig_ContainerConfig::setSupportedEndpointType(const OAIRecommendationJobSupportedEndpointType &supported_endpoint_type) {
    m_supported_endpoint_type = supported_endpoint_type;
    m_supported_endpoint_type_isSet = true;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_supported_endpoint_type_Set() const{
    return m_supported_endpoint_type_isSet;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::is_supported_endpoint_type_Valid() const{
    return m_supported_endpoint_type_isValid;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nearest_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_instance_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_input_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationJobInputConfig_ContainerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
