/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointInputConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointInputConfiguration::OAIEndpointInputConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointInputConfiguration::OAIEndpointInputConfiguration() {
    this->initializeModel();
}

OAIEndpointInputConfiguration::~OAIEndpointInputConfiguration() {}

void OAIEndpointInputConfiguration::initializeModel() {

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_inference_specification_name_isSet = false;
    m_inference_specification_name_isValid = false;

    m_environment_parameter_ranges_isSet = false;
    m_environment_parameter_ranges_isValid = false;

    m_serverless_config_isSet = false;
    m_serverless_config_isValid = false;
}

void OAIEndpointInputConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointInputConfiguration::fromJsonObject(QJsonObject json) {

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_inference_specification_name_isValid = ::OpenAPI::fromJsonValue(m_inference_specification_name, json[QString("InferenceSpecificationName")]);
    m_inference_specification_name_isSet = !json[QString("InferenceSpecificationName")].isNull() && m_inference_specification_name_isValid;

    m_environment_parameter_ranges_isValid = ::OpenAPI::fromJsonValue(m_environment_parameter_ranges, json[QString("EnvironmentParameterRanges")]);
    m_environment_parameter_ranges_isSet = !json[QString("EnvironmentParameterRanges")].isNull() && m_environment_parameter_ranges_isValid;

    m_serverless_config_isValid = ::OpenAPI::fromJsonValue(m_serverless_config, json[QString("ServerlessConfig")]);
    m_serverless_config_isSet = !json[QString("ServerlessConfig")].isNull() && m_serverless_config_isValid;
}

QString OAIEndpointInputConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointInputConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_inference_specification_name_isSet) {
        obj.insert(QString("InferenceSpecificationName"), ::OpenAPI::toJsonValue(m_inference_specification_name));
    }
    if (m_environment_parameter_ranges.isSet()) {
        obj.insert(QString("EnvironmentParameterRanges"), ::OpenAPI::toJsonValue(m_environment_parameter_ranges));
    }
    if (m_serverless_config.isSet()) {
        obj.insert(QString("ServerlessConfig"), ::OpenAPI::toJsonValue(m_serverless_config));
    }
    return obj;
}

OAIProductionVariantInstanceType OAIEndpointInputConfiguration::getInstanceType() const {
    return m_instance_type;
}
void OAIEndpointInputConfiguration::setInstanceType(const OAIProductionVariantInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIEndpointInputConfiguration::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIEndpointInputConfiguration::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIEndpointInputConfiguration::getInferenceSpecificationName() const {
    return m_inference_specification_name;
}
void OAIEndpointInputConfiguration::setInferenceSpecificationName(const QString &inference_specification_name) {
    m_inference_specification_name = inference_specification_name;
    m_inference_specification_name_isSet = true;
}

bool OAIEndpointInputConfiguration::is_inference_specification_name_Set() const{
    return m_inference_specification_name_isSet;
}

bool OAIEndpointInputConfiguration::is_inference_specification_name_Valid() const{
    return m_inference_specification_name_isValid;
}

OAIEndpointInputConfiguration_EnvironmentParameterRanges OAIEndpointInputConfiguration::getEnvironmentParameterRanges() const {
    return m_environment_parameter_ranges;
}
void OAIEndpointInputConfiguration::setEnvironmentParameterRanges(const OAIEndpointInputConfiguration_EnvironmentParameterRanges &environment_parameter_ranges) {
    m_environment_parameter_ranges = environment_parameter_ranges;
    m_environment_parameter_ranges_isSet = true;
}

bool OAIEndpointInputConfiguration::is_environment_parameter_ranges_Set() const{
    return m_environment_parameter_ranges_isSet;
}

bool OAIEndpointInputConfiguration::is_environment_parameter_ranges_Valid() const{
    return m_environment_parameter_ranges_isValid;
}

OAIProductionVariantServerlessConfig OAIEndpointInputConfiguration::getServerlessConfig() const {
    return m_serverless_config;
}
void OAIEndpointInputConfiguration::setServerlessConfig(const OAIProductionVariantServerlessConfig &serverless_config) {
    m_serverless_config = serverless_config;
    m_serverless_config_isSet = true;
}

bool OAIEndpointInputConfiguration::is_serverless_config_Set() const{
    return m_serverless_config_isSet;
}

bool OAIEndpointInputConfiguration::is_serverless_config_Valid() const{
    return m_serverless_config_isValid;
}

bool OAIEndpointInputConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_specification_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_parameter_ranges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointInputConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
