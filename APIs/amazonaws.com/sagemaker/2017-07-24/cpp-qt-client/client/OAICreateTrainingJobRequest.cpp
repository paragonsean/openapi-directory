/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTrainingJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTrainingJobRequest::OAICreateTrainingJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTrainingJobRequest::OAICreateTrainingJobRequest() {
    this->initializeModel();
}

OAICreateTrainingJobRequest::~OAICreateTrainingJobRequest() {}

void OAICreateTrainingJobRequest::initializeModel() {

    m_training_job_name_isSet = false;
    m_training_job_name_isValid = false;

    m_hyper_parameters_isSet = false;
    m_hyper_parameters_isValid = false;

    m_algorithm_specification_isSet = false;
    m_algorithm_specification_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_resource_config_isSet = false;
    m_resource_config_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_stopping_condition_isSet = false;
    m_stopping_condition_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_enable_network_isolation_isSet = false;
    m_enable_network_isolation_isValid = false;

    m_enable_inter_container_traffic_encryption_isSet = false;
    m_enable_inter_container_traffic_encryption_isValid = false;

    m_enable_managed_spot_training_isSet = false;
    m_enable_managed_spot_training_isValid = false;

    m_checkpoint_config_isSet = false;
    m_checkpoint_config_isValid = false;

    m_debug_hook_config_isSet = false;
    m_debug_hook_config_isValid = false;

    m_debug_rule_configurations_isSet = false;
    m_debug_rule_configurations_isValid = false;

    m_tensor_board_output_config_isSet = false;
    m_tensor_board_output_config_isValid = false;

    m_experiment_config_isSet = false;
    m_experiment_config_isValid = false;

    m_profiler_config_isSet = false;
    m_profiler_config_isValid = false;

    m_profiler_rule_configurations_isSet = false;
    m_profiler_rule_configurations_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_retry_strategy_isSet = false;
    m_retry_strategy_isValid = false;
}

void OAICreateTrainingJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTrainingJobRequest::fromJsonObject(QJsonObject json) {

    m_training_job_name_isValid = ::OpenAPI::fromJsonValue(m_training_job_name, json[QString("TrainingJobName")]);
    m_training_job_name_isSet = !json[QString("TrainingJobName")].isNull() && m_training_job_name_isValid;

    m_hyper_parameters_isValid = ::OpenAPI::fromJsonValue(m_hyper_parameters, json[QString("HyperParameters")]);
    m_hyper_parameters_isSet = !json[QString("HyperParameters")].isNull() && m_hyper_parameters_isValid;

    m_algorithm_specification_isValid = ::OpenAPI::fromJsonValue(m_algorithm_specification, json[QString("AlgorithmSpecification")]);
    m_algorithm_specification_isSet = !json[QString("AlgorithmSpecification")].isNull() && m_algorithm_specification_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_resource_config_isValid = ::OpenAPI::fromJsonValue(m_resource_config, json[QString("ResourceConfig")]);
    m_resource_config_isSet = !json[QString("ResourceConfig")].isNull() && m_resource_config_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_stopping_condition_isValid = ::OpenAPI::fromJsonValue(m_stopping_condition, json[QString("StoppingCondition")]);
    m_stopping_condition_isSet = !json[QString("StoppingCondition")].isNull() && m_stopping_condition_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_enable_network_isolation_isValid = ::OpenAPI::fromJsonValue(m_enable_network_isolation, json[QString("EnableNetworkIsolation")]);
    m_enable_network_isolation_isSet = !json[QString("EnableNetworkIsolation")].isNull() && m_enable_network_isolation_isValid;

    m_enable_inter_container_traffic_encryption_isValid = ::OpenAPI::fromJsonValue(m_enable_inter_container_traffic_encryption, json[QString("EnableInterContainerTrafficEncryption")]);
    m_enable_inter_container_traffic_encryption_isSet = !json[QString("EnableInterContainerTrafficEncryption")].isNull() && m_enable_inter_container_traffic_encryption_isValid;

    m_enable_managed_spot_training_isValid = ::OpenAPI::fromJsonValue(m_enable_managed_spot_training, json[QString("EnableManagedSpotTraining")]);
    m_enable_managed_spot_training_isSet = !json[QString("EnableManagedSpotTraining")].isNull() && m_enable_managed_spot_training_isValid;

    m_checkpoint_config_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_config, json[QString("CheckpointConfig")]);
    m_checkpoint_config_isSet = !json[QString("CheckpointConfig")].isNull() && m_checkpoint_config_isValid;

    m_debug_hook_config_isValid = ::OpenAPI::fromJsonValue(m_debug_hook_config, json[QString("DebugHookConfig")]);
    m_debug_hook_config_isSet = !json[QString("DebugHookConfig")].isNull() && m_debug_hook_config_isValid;

    m_debug_rule_configurations_isValid = ::OpenAPI::fromJsonValue(m_debug_rule_configurations, json[QString("DebugRuleConfigurations")]);
    m_debug_rule_configurations_isSet = !json[QString("DebugRuleConfigurations")].isNull() && m_debug_rule_configurations_isValid;

    m_tensor_board_output_config_isValid = ::OpenAPI::fromJsonValue(m_tensor_board_output_config, json[QString("TensorBoardOutputConfig")]);
    m_tensor_board_output_config_isSet = !json[QString("TensorBoardOutputConfig")].isNull() && m_tensor_board_output_config_isValid;

    m_experiment_config_isValid = ::OpenAPI::fromJsonValue(m_experiment_config, json[QString("ExperimentConfig")]);
    m_experiment_config_isSet = !json[QString("ExperimentConfig")].isNull() && m_experiment_config_isValid;

    m_profiler_config_isValid = ::OpenAPI::fromJsonValue(m_profiler_config, json[QString("ProfilerConfig")]);
    m_profiler_config_isSet = !json[QString("ProfilerConfig")].isNull() && m_profiler_config_isValid;

    m_profiler_rule_configurations_isValid = ::OpenAPI::fromJsonValue(m_profiler_rule_configurations, json[QString("ProfilerRuleConfigurations")]);
    m_profiler_rule_configurations_isSet = !json[QString("ProfilerRuleConfigurations")].isNull() && m_profiler_rule_configurations_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_retry_strategy_isValid = ::OpenAPI::fromJsonValue(m_retry_strategy, json[QString("RetryStrategy")]);
    m_retry_strategy_isSet = !json[QString("RetryStrategy")].isNull() && m_retry_strategy_isValid;
}

QString OAICreateTrainingJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTrainingJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_training_job_name_isSet) {
        obj.insert(QString("TrainingJobName"), ::OpenAPI::toJsonValue(m_training_job_name));
    }
    if (m_hyper_parameters.isSet()) {
        obj.insert(QString("HyperParameters"), ::OpenAPI::toJsonValue(m_hyper_parameters));
    }
    if (m_algorithm_specification.isSet()) {
        obj.insert(QString("AlgorithmSpecification"), ::OpenAPI::toJsonValue(m_algorithm_specification));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_resource_config.isSet()) {
        obj.insert(QString("ResourceConfig"), ::OpenAPI::toJsonValue(m_resource_config));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_stopping_condition.isSet()) {
        obj.insert(QString("StoppingCondition"), ::OpenAPI::toJsonValue(m_stopping_condition));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_enable_network_isolation_isSet) {
        obj.insert(QString("EnableNetworkIsolation"), ::OpenAPI::toJsonValue(m_enable_network_isolation));
    }
    if (m_enable_inter_container_traffic_encryption_isSet) {
        obj.insert(QString("EnableInterContainerTrafficEncryption"), ::OpenAPI::toJsonValue(m_enable_inter_container_traffic_encryption));
    }
    if (m_enable_managed_spot_training_isSet) {
        obj.insert(QString("EnableManagedSpotTraining"), ::OpenAPI::toJsonValue(m_enable_managed_spot_training));
    }
    if (m_checkpoint_config.isSet()) {
        obj.insert(QString("CheckpointConfig"), ::OpenAPI::toJsonValue(m_checkpoint_config));
    }
    if (m_debug_hook_config.isSet()) {
        obj.insert(QString("DebugHookConfig"), ::OpenAPI::toJsonValue(m_debug_hook_config));
    }
    if (m_debug_rule_configurations.isSet()) {
        obj.insert(QString("DebugRuleConfigurations"), ::OpenAPI::toJsonValue(m_debug_rule_configurations));
    }
    if (m_tensor_board_output_config.isSet()) {
        obj.insert(QString("TensorBoardOutputConfig"), ::OpenAPI::toJsonValue(m_tensor_board_output_config));
    }
    if (m_experiment_config.isSet()) {
        obj.insert(QString("ExperimentConfig"), ::OpenAPI::toJsonValue(m_experiment_config));
    }
    if (m_profiler_config.isSet()) {
        obj.insert(QString("ProfilerConfig"), ::OpenAPI::toJsonValue(m_profiler_config));
    }
    if (m_profiler_rule_configurations.isSet()) {
        obj.insert(QString("ProfilerRuleConfigurations"), ::OpenAPI::toJsonValue(m_profiler_rule_configurations));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_retry_strategy.isSet()) {
        obj.insert(QString("RetryStrategy"), ::OpenAPI::toJsonValue(m_retry_strategy));
    }
    return obj;
}

QString OAICreateTrainingJobRequest::getTrainingJobName() const {
    return m_training_job_name;
}
void OAICreateTrainingJobRequest::setTrainingJobName(const QString &training_job_name) {
    m_training_job_name = training_job_name;
    m_training_job_name_isSet = true;
}

bool OAICreateTrainingJobRequest::is_training_job_name_Set() const{
    return m_training_job_name_isSet;
}

bool OAICreateTrainingJobRequest::is_training_job_name_Valid() const{
    return m_training_job_name_isValid;
}

QMap OAICreateTrainingJobRequest::getHyperParameters() const {
    return m_hyper_parameters;
}
void OAICreateTrainingJobRequest::setHyperParameters(const QMap &hyper_parameters) {
    m_hyper_parameters = hyper_parameters;
    m_hyper_parameters_isSet = true;
}

bool OAICreateTrainingJobRequest::is_hyper_parameters_Set() const{
    return m_hyper_parameters_isSet;
}

bool OAICreateTrainingJobRequest::is_hyper_parameters_Valid() const{
    return m_hyper_parameters_isValid;
}

OAICreateTrainingJobRequest_AlgorithmSpecification OAICreateTrainingJobRequest::getAlgorithmSpecification() const {
    return m_algorithm_specification;
}
void OAICreateTrainingJobRequest::setAlgorithmSpecification(const OAICreateTrainingJobRequest_AlgorithmSpecification &algorithm_specification) {
    m_algorithm_specification = algorithm_specification;
    m_algorithm_specification_isSet = true;
}

bool OAICreateTrainingJobRequest::is_algorithm_specification_Set() const{
    return m_algorithm_specification_isSet;
}

bool OAICreateTrainingJobRequest::is_algorithm_specification_Valid() const{
    return m_algorithm_specification_isValid;
}

QString OAICreateTrainingJobRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateTrainingJobRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateTrainingJobRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateTrainingJobRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAICreateTrainingJobRequest::getInputDataConfig() const {
    return m_input_data_config;
}
void OAICreateTrainingJobRequest::setInputDataConfig(const QList &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAICreateTrainingJobRequest::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAICreateTrainingJobRequest::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAICreateTrainingJobRequest_OutputDataConfig OAICreateTrainingJobRequest::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAICreateTrainingJobRequest::setOutputDataConfig(const OAICreateTrainingJobRequest_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAICreateTrainingJobRequest::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAICreateTrainingJobRequest::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

OAICreateTrainingJobRequest_ResourceConfig OAICreateTrainingJobRequest::getResourceConfig() const {
    return m_resource_config;
}
void OAICreateTrainingJobRequest::setResourceConfig(const OAICreateTrainingJobRequest_ResourceConfig &resource_config) {
    m_resource_config = resource_config;
    m_resource_config_isSet = true;
}

bool OAICreateTrainingJobRequest::is_resource_config_Set() const{
    return m_resource_config_isSet;
}

bool OAICreateTrainingJobRequest::is_resource_config_Valid() const{
    return m_resource_config_isValid;
}

OAICreateTrainingJobRequest_VpcConfig OAICreateTrainingJobRequest::getVpcConfig() const {
    return m_vpc_config;
}
void OAICreateTrainingJobRequest::setVpcConfig(const OAICreateTrainingJobRequest_VpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAICreateTrainingJobRequest::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAICreateTrainingJobRequest::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

OAICreateTrainingJobRequest_StoppingCondition OAICreateTrainingJobRequest::getStoppingCondition() const {
    return m_stopping_condition;
}
void OAICreateTrainingJobRequest::setStoppingCondition(const OAICreateTrainingJobRequest_StoppingCondition &stopping_condition) {
    m_stopping_condition = stopping_condition;
    m_stopping_condition_isSet = true;
}

bool OAICreateTrainingJobRequest::is_stopping_condition_Set() const{
    return m_stopping_condition_isSet;
}

bool OAICreateTrainingJobRequest::is_stopping_condition_Valid() const{
    return m_stopping_condition_isValid;
}

QList OAICreateTrainingJobRequest::getTags() const {
    return m_tags;
}
void OAICreateTrainingJobRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTrainingJobRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTrainingJobRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateTrainingJobRequest::getEnableNetworkIsolation() const {
    return m_enable_network_isolation;
}
void OAICreateTrainingJobRequest::setEnableNetworkIsolation(const bool &enable_network_isolation) {
    m_enable_network_isolation = enable_network_isolation;
    m_enable_network_isolation_isSet = true;
}

bool OAICreateTrainingJobRequest::is_enable_network_isolation_Set() const{
    return m_enable_network_isolation_isSet;
}

bool OAICreateTrainingJobRequest::is_enable_network_isolation_Valid() const{
    return m_enable_network_isolation_isValid;
}

bool OAICreateTrainingJobRequest::getEnableInterContainerTrafficEncryption() const {
    return m_enable_inter_container_traffic_encryption;
}
void OAICreateTrainingJobRequest::setEnableInterContainerTrafficEncryption(const bool &enable_inter_container_traffic_encryption) {
    m_enable_inter_container_traffic_encryption = enable_inter_container_traffic_encryption;
    m_enable_inter_container_traffic_encryption_isSet = true;
}

bool OAICreateTrainingJobRequest::is_enable_inter_container_traffic_encryption_Set() const{
    return m_enable_inter_container_traffic_encryption_isSet;
}

bool OAICreateTrainingJobRequest::is_enable_inter_container_traffic_encryption_Valid() const{
    return m_enable_inter_container_traffic_encryption_isValid;
}

bool OAICreateTrainingJobRequest::getEnableManagedSpotTraining() const {
    return m_enable_managed_spot_training;
}
void OAICreateTrainingJobRequest::setEnableManagedSpotTraining(const bool &enable_managed_spot_training) {
    m_enable_managed_spot_training = enable_managed_spot_training;
    m_enable_managed_spot_training_isSet = true;
}

bool OAICreateTrainingJobRequest::is_enable_managed_spot_training_Set() const{
    return m_enable_managed_spot_training_isSet;
}

bool OAICreateTrainingJobRequest::is_enable_managed_spot_training_Valid() const{
    return m_enable_managed_spot_training_isValid;
}

OAICreateTrainingJobRequest_CheckpointConfig OAICreateTrainingJobRequest::getCheckpointConfig() const {
    return m_checkpoint_config;
}
void OAICreateTrainingJobRequest::setCheckpointConfig(const OAICreateTrainingJobRequest_CheckpointConfig &checkpoint_config) {
    m_checkpoint_config = checkpoint_config;
    m_checkpoint_config_isSet = true;
}

bool OAICreateTrainingJobRequest::is_checkpoint_config_Set() const{
    return m_checkpoint_config_isSet;
}

bool OAICreateTrainingJobRequest::is_checkpoint_config_Valid() const{
    return m_checkpoint_config_isValid;
}

OAIDebugHookConfig OAICreateTrainingJobRequest::getDebugHookConfig() const {
    return m_debug_hook_config;
}
void OAICreateTrainingJobRequest::setDebugHookConfig(const OAIDebugHookConfig &debug_hook_config) {
    m_debug_hook_config = debug_hook_config;
    m_debug_hook_config_isSet = true;
}

bool OAICreateTrainingJobRequest::is_debug_hook_config_Set() const{
    return m_debug_hook_config_isSet;
}

bool OAICreateTrainingJobRequest::is_debug_hook_config_Valid() const{
    return m_debug_hook_config_isValid;
}

QList OAICreateTrainingJobRequest::getDebugRuleConfigurations() const {
    return m_debug_rule_configurations;
}
void OAICreateTrainingJobRequest::setDebugRuleConfigurations(const QList &debug_rule_configurations) {
    m_debug_rule_configurations = debug_rule_configurations;
    m_debug_rule_configurations_isSet = true;
}

bool OAICreateTrainingJobRequest::is_debug_rule_configurations_Set() const{
    return m_debug_rule_configurations_isSet;
}

bool OAICreateTrainingJobRequest::is_debug_rule_configurations_Valid() const{
    return m_debug_rule_configurations_isValid;
}

OAITensorBoardOutputConfig OAICreateTrainingJobRequest::getTensorBoardOutputConfig() const {
    return m_tensor_board_output_config;
}
void OAICreateTrainingJobRequest::setTensorBoardOutputConfig(const OAITensorBoardOutputConfig &tensor_board_output_config) {
    m_tensor_board_output_config = tensor_board_output_config;
    m_tensor_board_output_config_isSet = true;
}

bool OAICreateTrainingJobRequest::is_tensor_board_output_config_Set() const{
    return m_tensor_board_output_config_isSet;
}

bool OAICreateTrainingJobRequest::is_tensor_board_output_config_Valid() const{
    return m_tensor_board_output_config_isValid;
}

OAIExperimentConfig OAICreateTrainingJobRequest::getExperimentConfig() const {
    return m_experiment_config;
}
void OAICreateTrainingJobRequest::setExperimentConfig(const OAIExperimentConfig &experiment_config) {
    m_experiment_config = experiment_config;
    m_experiment_config_isSet = true;
}

bool OAICreateTrainingJobRequest::is_experiment_config_Set() const{
    return m_experiment_config_isSet;
}

bool OAICreateTrainingJobRequest::is_experiment_config_Valid() const{
    return m_experiment_config_isValid;
}

OAIProfilerConfig OAICreateTrainingJobRequest::getProfilerConfig() const {
    return m_profiler_config;
}
void OAICreateTrainingJobRequest::setProfilerConfig(const OAIProfilerConfig &profiler_config) {
    m_profiler_config = profiler_config;
    m_profiler_config_isSet = true;
}

bool OAICreateTrainingJobRequest::is_profiler_config_Set() const{
    return m_profiler_config_isSet;
}

bool OAICreateTrainingJobRequest::is_profiler_config_Valid() const{
    return m_profiler_config_isValid;
}

QList OAICreateTrainingJobRequest::getProfilerRuleConfigurations() const {
    return m_profiler_rule_configurations;
}
void OAICreateTrainingJobRequest::setProfilerRuleConfigurations(const QList &profiler_rule_configurations) {
    m_profiler_rule_configurations = profiler_rule_configurations;
    m_profiler_rule_configurations_isSet = true;
}

bool OAICreateTrainingJobRequest::is_profiler_rule_configurations_Set() const{
    return m_profiler_rule_configurations_isSet;
}

bool OAICreateTrainingJobRequest::is_profiler_rule_configurations_Valid() const{
    return m_profiler_rule_configurations_isValid;
}

QMap OAICreateTrainingJobRequest::getEnvironment() const {
    return m_environment;
}
void OAICreateTrainingJobRequest::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAICreateTrainingJobRequest::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAICreateTrainingJobRequest::is_environment_Valid() const{
    return m_environment_isValid;
}

OAICreateTrainingJobRequest_RetryStrategy OAICreateTrainingJobRequest::getRetryStrategy() const {
    return m_retry_strategy;
}
void OAICreateTrainingJobRequest::setRetryStrategy(const OAICreateTrainingJobRequest_RetryStrategy &retry_strategy) {
    m_retry_strategy = retry_strategy;
    m_retry_strategy_isSet = true;
}

bool OAICreateTrainingJobRequest::is_retry_strategy_Set() const{
    return m_retry_strategy_isSet;
}

bool OAICreateTrainingJobRequest::is_retry_strategy_Valid() const{
    return m_retry_strategy_isValid;
}

bool OAICreateTrainingJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_training_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyper_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_network_isolation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_inter_container_traffic_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_managed_spot_training_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkpoint_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_hook_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_rule_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensor_board_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiler_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiler_rule_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTrainingJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_training_job_name_isValid && m_algorithm_specification_isValid && m_role_arn_isValid && m_output_data_config_isValid && m_resource_config_isValid && m_stopping_condition_isValid && true;
}

} // namespace OpenAPI
