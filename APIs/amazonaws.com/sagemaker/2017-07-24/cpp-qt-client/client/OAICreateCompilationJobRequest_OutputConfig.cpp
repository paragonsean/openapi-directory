/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCompilationJobRequest_OutputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCompilationJobRequest_OutputConfig::OAICreateCompilationJobRequest_OutputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCompilationJobRequest_OutputConfig::OAICreateCompilationJobRequest_OutputConfig() {
    this->initializeModel();
}

OAICreateCompilationJobRequest_OutputConfig::~OAICreateCompilationJobRequest_OutputConfig() {}

void OAICreateCompilationJobRequest_OutputConfig::initializeModel() {

    m_s3_output_location_isSet = false;
    m_s3_output_location_isValid = false;

    m_target_device_isSet = false;
    m_target_device_isValid = false;

    m_target_platform_isSet = false;
    m_target_platform_isValid = false;

    m_compiler_options_isSet = false;
    m_compiler_options_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAICreateCompilationJobRequest_OutputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCompilationJobRequest_OutputConfig::fromJsonObject(QJsonObject json) {

    m_s3_output_location_isValid = ::OpenAPI::fromJsonValue(m_s3_output_location, json[QString("S3OutputLocation")]);
    m_s3_output_location_isSet = !json[QString("S3OutputLocation")].isNull() && m_s3_output_location_isValid;

    m_target_device_isValid = ::OpenAPI::fromJsonValue(m_target_device, json[QString("TargetDevice")]);
    m_target_device_isSet = !json[QString("TargetDevice")].isNull() && m_target_device_isValid;

    m_target_platform_isValid = ::OpenAPI::fromJsonValue(m_target_platform, json[QString("TargetPlatform")]);
    m_target_platform_isSet = !json[QString("TargetPlatform")].isNull() && m_target_platform_isValid;

    m_compiler_options_isValid = ::OpenAPI::fromJsonValue(m_compiler_options, json[QString("CompilerOptions")]);
    m_compiler_options_isSet = !json[QString("CompilerOptions")].isNull() && m_compiler_options_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;
}

QString OAICreateCompilationJobRequest_OutputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCompilationJobRequest_OutputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_output_location_isSet) {
        obj.insert(QString("S3OutputLocation"), ::OpenAPI::toJsonValue(m_s3_output_location));
    }
    if (m_target_device.isSet()) {
        obj.insert(QString("TargetDevice"), ::OpenAPI::toJsonValue(m_target_device));
    }
    if (m_target_platform.isSet()) {
        obj.insert(QString("TargetPlatform"), ::OpenAPI::toJsonValue(m_target_platform));
    }
    if (m_compiler_options_isSet) {
        obj.insert(QString("CompilerOptions"), ::OpenAPI::toJsonValue(m_compiler_options));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

QString OAICreateCompilationJobRequest_OutputConfig::getS3OutputLocation() const {
    return m_s3_output_location;
}
void OAICreateCompilationJobRequest_OutputConfig::setS3OutputLocation(const QString &s3_output_location) {
    m_s3_output_location = s3_output_location;
    m_s3_output_location_isSet = true;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_s3_output_location_Set() const{
    return m_s3_output_location_isSet;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_s3_output_location_Valid() const{
    return m_s3_output_location_isValid;
}

OAITargetDevice OAICreateCompilationJobRequest_OutputConfig::getTargetDevice() const {
    return m_target_device;
}
void OAICreateCompilationJobRequest_OutputConfig::setTargetDevice(const OAITargetDevice &target_device) {
    m_target_device = target_device;
    m_target_device_isSet = true;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_target_device_Set() const{
    return m_target_device_isSet;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_target_device_Valid() const{
    return m_target_device_isValid;
}

OAIOutputConfig_TargetPlatform OAICreateCompilationJobRequest_OutputConfig::getTargetPlatform() const {
    return m_target_platform;
}
void OAICreateCompilationJobRequest_OutputConfig::setTargetPlatform(const OAIOutputConfig_TargetPlatform &target_platform) {
    m_target_platform = target_platform;
    m_target_platform_isSet = true;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_target_platform_Set() const{
    return m_target_platform_isSet;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_target_platform_Valid() const{
    return m_target_platform_isValid;
}

QString OAICreateCompilationJobRequest_OutputConfig::getCompilerOptions() const {
    return m_compiler_options;
}
void OAICreateCompilationJobRequest_OutputConfig::setCompilerOptions(const QString &compiler_options) {
    m_compiler_options = compiler_options;
    m_compiler_options_isSet = true;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_compiler_options_Set() const{
    return m_compiler_options_isSet;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_compiler_options_Valid() const{
    return m_compiler_options_isValid;
}

QString OAICreateCompilationJobRequest_OutputConfig::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateCompilationJobRequest_OutputConfig::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateCompilationJobRequest_OutputConfig::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAICreateCompilationJobRequest_OutputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_output_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compiler_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCompilationJobRequest_OutputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_output_location_isValid && true;
}

} // namespace OpenAPI
