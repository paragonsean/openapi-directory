/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringDatasetFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringDatasetFormat::OAIMonitoringDatasetFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringDatasetFormat::OAIMonitoringDatasetFormat() {
    this->initializeModel();
}

OAIMonitoringDatasetFormat::~OAIMonitoringDatasetFormat() {}

void OAIMonitoringDatasetFormat::initializeModel() {

    m_csv_isSet = false;
    m_csv_isValid = false;

    m_json_isSet = false;
    m_json_isValid = false;

    m_parquet_isSet = false;
    m_parquet_isValid = false;
}

void OAIMonitoringDatasetFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringDatasetFormat::fromJsonObject(QJsonObject json) {

    m_csv_isValid = ::OpenAPI::fromJsonValue(m_csv, json[QString("Csv")]);
    m_csv_isSet = !json[QString("Csv")].isNull() && m_csv_isValid;

    m_json_isValid = ::OpenAPI::fromJsonValue(m_json, json[QString("Json")]);
    m_json_isSet = !json[QString("Json")].isNull() && m_json_isValid;

    m_parquet_isValid = ::OpenAPI::fromJsonValue(m_parquet, json[QString("Parquet")]);
    m_parquet_isSet = !json[QString("Parquet")].isNull() && m_parquet_isValid;
}

QString OAIMonitoringDatasetFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringDatasetFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_csv.isSet()) {
        obj.insert(QString("Csv"), ::OpenAPI::toJsonValue(m_csv));
    }
    if (m_json.isSet()) {
        obj.insert(QString("Json"), ::OpenAPI::toJsonValue(m_json));
    }
    if (m_parquet.isSet()) {
        obj.insert(QString("Parquet"), ::OpenAPI::toJsonValue(m_parquet));
    }
    return obj;
}

OAIMonitoringDatasetFormat_Csv OAIMonitoringDatasetFormat::getCsv() const {
    return m_csv;
}
void OAIMonitoringDatasetFormat::setCsv(const OAIMonitoringDatasetFormat_Csv &csv) {
    m_csv = csv;
    m_csv_isSet = true;
}

bool OAIMonitoringDatasetFormat::is_csv_Set() const{
    return m_csv_isSet;
}

bool OAIMonitoringDatasetFormat::is_csv_Valid() const{
    return m_csv_isValid;
}

OAIMonitoringDatasetFormat_Json OAIMonitoringDatasetFormat::getJson() const {
    return m_json;
}
void OAIMonitoringDatasetFormat::setJson(const OAIMonitoringDatasetFormat_Json &json) {
    m_json = json;
    m_json_isSet = true;
}

bool OAIMonitoringDatasetFormat::is_json_Set() const{
    return m_json_isSet;
}

bool OAIMonitoringDatasetFormat::is_json_Valid() const{
    return m_json_isValid;
}

OAIObject OAIMonitoringDatasetFormat::getParquet() const {
    return m_parquet;
}
void OAIMonitoringDatasetFormat::setParquet(const OAIObject &parquet) {
    m_parquet = parquet;
    m_parquet_isSet = true;
}

bool OAIMonitoringDatasetFormat::is_parquet_Set() const{
    return m_parquet_isSet;
}

bool OAIMonitoringDatasetFormat::is_parquet_Valid() const{
    return m_parquet_isValid;
}

bool OAIMonitoringDatasetFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_csv.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_json.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parquet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringDatasetFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
