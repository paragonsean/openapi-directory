/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria() {
    this->initializeModel();
}

OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::~OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria() {}

void OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::initializeModel() {

    m_target_objective_metric_value_isSet = false;
    m_target_objective_metric_value_isValid = false;

    m_best_objective_not_improving_isSet = false;
    m_best_objective_not_improving_isValid = false;

    m_convergence_detected_isSet = false;
    m_convergence_detected_isValid = false;
}

void OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::fromJsonObject(QJsonObject json) {

    m_target_objective_metric_value_isValid = ::OpenAPI::fromJsonValue(m_target_objective_metric_value, json[QString("TargetObjectiveMetricValue")]);
    m_target_objective_metric_value_isSet = !json[QString("TargetObjectiveMetricValue")].isNull() && m_target_objective_metric_value_isValid;

    m_best_objective_not_improving_isValid = ::OpenAPI::fromJsonValue(m_best_objective_not_improving, json[QString("BestObjectiveNotImproving")]);
    m_best_objective_not_improving_isSet = !json[QString("BestObjectiveNotImproving")].isNull() && m_best_objective_not_improving_isValid;

    m_convergence_detected_isValid = ::OpenAPI::fromJsonValue(m_convergence_detected, json[QString("ConvergenceDetected")]);
    m_convergence_detected_isSet = !json[QString("ConvergenceDetected")].isNull() && m_convergence_detected_isValid;
}

QString OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_target_objective_metric_value_isSet) {
        obj.insert(QString("TargetObjectiveMetricValue"), ::OpenAPI::toJsonValue(m_target_objective_metric_value));
    }
    if (m_best_objective_not_improving.isSet()) {
        obj.insert(QString("BestObjectiveNotImproving"), ::OpenAPI::toJsonValue(m_best_objective_not_improving));
    }
    if (m_convergence_detected.isSet()) {
        obj.insert(QString("ConvergenceDetected"), ::OpenAPI::toJsonValue(m_convergence_detected));
    }
    return obj;
}

float OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::getTargetObjectiveMetricValue() const {
    return m_target_objective_metric_value;
}
void OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::setTargetObjectiveMetricValue(const float &target_objective_metric_value) {
    m_target_objective_metric_value = target_objective_metric_value;
    m_target_objective_metric_value_isSet = true;
}

bool OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::is_target_objective_metric_value_Set() const{
    return m_target_objective_metric_value_isSet;
}

bool OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::is_target_objective_metric_value_Valid() const{
    return m_target_objective_metric_value_isValid;
}

OAITuningJobCompletionCriteria_BestObjectiveNotImproving OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::getBestObjectiveNotImproving() const {
    return m_best_objective_not_improving;
}
void OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::setBestObjectiveNotImproving(const OAITuningJobCompletionCriteria_BestObjectiveNotImproving &best_objective_not_improving) {
    m_best_objective_not_improving = best_objective_not_improving;
    m_best_objective_not_improving_isSet = true;
}

bool OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::is_best_objective_not_improving_Set() const{
    return m_best_objective_not_improving_isSet;
}

bool OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::is_best_objective_not_improving_Valid() const{
    return m_best_objective_not_improving_isValid;
}

OAITuningJobCompletionCriteria_ConvergenceDetected OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::getConvergenceDetected() const {
    return m_convergence_detected;
}
void OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::setConvergenceDetected(const OAITuningJobCompletionCriteria_ConvergenceDetected &convergence_detected) {
    m_convergence_detected = convergence_detected;
    m_convergence_detected_isSet = true;
}

bool OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::is_convergence_detected_Set() const{
    return m_convergence_detected_isSet;
}

bool OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::is_convergence_detected_Valid() const{
    return m_convergence_detected_isValid;
}

bool OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_objective_metric_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_best_objective_not_improving.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_convergence_detected.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperParameterTuningJobConfig_TuningJobCompletionCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
