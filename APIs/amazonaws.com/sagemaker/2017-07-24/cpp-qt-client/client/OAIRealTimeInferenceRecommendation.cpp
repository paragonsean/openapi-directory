/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealTimeInferenceRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealTimeInferenceRecommendation::OAIRealTimeInferenceRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealTimeInferenceRecommendation::OAIRealTimeInferenceRecommendation() {
    this->initializeModel();
}

OAIRealTimeInferenceRecommendation::~OAIRealTimeInferenceRecommendation() {}

void OAIRealTimeInferenceRecommendation::initializeModel() {

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;
}

void OAIRealTimeInferenceRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealTimeInferenceRecommendation::fromJsonObject(QJsonObject json) {

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;
}

QString OAIRealTimeInferenceRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealTimeInferenceRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    return obj;
}

QString OAIRealTimeInferenceRecommendation::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIRealTimeInferenceRecommendation::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIRealTimeInferenceRecommendation::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIRealTimeInferenceRecommendation::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

OAIProductionVariantInstanceType OAIRealTimeInferenceRecommendation::getInstanceType() const {
    return m_instance_type;
}
void OAIRealTimeInferenceRecommendation::setInstanceType(const OAIProductionVariantInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIRealTimeInferenceRecommendation::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIRealTimeInferenceRecommendation::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QMap OAIRealTimeInferenceRecommendation::getEnvironment() const {
    return m_environment;
}
void OAIRealTimeInferenceRecommendation::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIRealTimeInferenceRecommendation::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIRealTimeInferenceRecommendation::is_environment_Valid() const{
    return m_environment_isValid;
}

bool OAIRealTimeInferenceRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealTimeInferenceRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recommendation_id_isValid && m_instance_type_isValid && true;
}

} // namespace OpenAPI
