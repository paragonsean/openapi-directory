/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecondaryStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecondaryStatus::OAISecondaryStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecondaryStatus::OAISecondaryStatus() {
    this->initializeModel();
}

OAISecondaryStatus::~OAISecondaryStatus() {}

void OAISecondaryStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISecondaryStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISecondaryStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Starting", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LaunchingMLInstances", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::LAUNCHINGMLINSTANCES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreparingTrainingStack", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::PREPARINGTRAININGSTACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Downloading", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::DOWNLOADING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DownloadingTrainingImage", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::DOWNLOADINGTRAININGIMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Training", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::TRAINING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Uploading", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::UPLOADING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopping", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MaxRuntimeExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::MAXRUNTIMEEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Interrupted", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::INTERRUPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MaxWaitTimeExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::MAXWAITTIMEEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Updating", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Restarting", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecondaryStatus::RESTARTING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISecondaryStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISecondaryStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISecondaryStatus::STARTING:
            val = "Starting";
            break;
        case eOAISecondaryStatus::LAUNCHINGMLINSTANCES:
            val = "LaunchingMLInstances";
            break;
        case eOAISecondaryStatus::PREPARINGTRAININGSTACK:
            val = "PreparingTrainingStack";
            break;
        case eOAISecondaryStatus::DOWNLOADING:
            val = "Downloading";
            break;
        case eOAISecondaryStatus::DOWNLOADINGTRAININGIMAGE:
            val = "DownloadingTrainingImage";
            break;
        case eOAISecondaryStatus::TRAINING:
            val = "Training";
            break;
        case eOAISecondaryStatus::UPLOADING:
            val = "Uploading";
            break;
        case eOAISecondaryStatus::STOPPING:
            val = "Stopping";
            break;
        case eOAISecondaryStatus::STOPPED:
            val = "Stopped";
            break;
        case eOAISecondaryStatus::MAXRUNTIMEEXCEEDED:
            val = "MaxRuntimeExceeded";
            break;
        case eOAISecondaryStatus::COMPLETED:
            val = "Completed";
            break;
        case eOAISecondaryStatus::FAILED:
            val = "Failed";
            break;
        case eOAISecondaryStatus::INTERRUPTED:
            val = "Interrupted";
            break;
        case eOAISecondaryStatus::MAXWAITTIMEEXCEEDED:
            val = "MaxWaitTimeExceeded";
            break;
        case eOAISecondaryStatus::UPDATING:
            val = "Updating";
            break;
        case eOAISecondaryStatus::RESTARTING:
            val = "Restarting";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISecondaryStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISecondaryStatus::eOAISecondaryStatus OAISecondaryStatus::getValue() const {
    return m_value;
}

void OAISecondaryStatus::setValue(const OAISecondaryStatus::eOAISecondaryStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISecondaryStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAISecondaryStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
