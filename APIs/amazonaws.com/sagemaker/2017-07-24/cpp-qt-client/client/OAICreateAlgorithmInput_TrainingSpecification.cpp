/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAlgorithmInput_TrainingSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAlgorithmInput_TrainingSpecification::OAICreateAlgorithmInput_TrainingSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAlgorithmInput_TrainingSpecification::OAICreateAlgorithmInput_TrainingSpecification() {
    this->initializeModel();
}

OAICreateAlgorithmInput_TrainingSpecification::~OAICreateAlgorithmInput_TrainingSpecification() {}

void OAICreateAlgorithmInput_TrainingSpecification::initializeModel() {

    m_training_image_isSet = false;
    m_training_image_isValid = false;

    m_training_image_digest_isSet = false;
    m_training_image_digest_isValid = false;

    m_supported_hyper_parameters_isSet = false;
    m_supported_hyper_parameters_isValid = false;

    m_supported_training_instance_types_isSet = false;
    m_supported_training_instance_types_isValid = false;

    m_supports_distributed_training_isSet = false;
    m_supports_distributed_training_isValid = false;

    m_metric_definitions_isSet = false;
    m_metric_definitions_isValid = false;

    m_training_channels_isSet = false;
    m_training_channels_isValid = false;

    m_supported_tuning_job_objective_metrics_isSet = false;
    m_supported_tuning_job_objective_metrics_isValid = false;
}

void OAICreateAlgorithmInput_TrainingSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAlgorithmInput_TrainingSpecification::fromJsonObject(QJsonObject json) {

    m_training_image_isValid = ::OpenAPI::fromJsonValue(m_training_image, json[QString("TrainingImage")]);
    m_training_image_isSet = !json[QString("TrainingImage")].isNull() && m_training_image_isValid;

    m_training_image_digest_isValid = ::OpenAPI::fromJsonValue(m_training_image_digest, json[QString("TrainingImageDigest")]);
    m_training_image_digest_isSet = !json[QString("TrainingImageDigest")].isNull() && m_training_image_digest_isValid;

    m_supported_hyper_parameters_isValid = ::OpenAPI::fromJsonValue(m_supported_hyper_parameters, json[QString("SupportedHyperParameters")]);
    m_supported_hyper_parameters_isSet = !json[QString("SupportedHyperParameters")].isNull() && m_supported_hyper_parameters_isValid;

    m_supported_training_instance_types_isValid = ::OpenAPI::fromJsonValue(m_supported_training_instance_types, json[QString("SupportedTrainingInstanceTypes")]);
    m_supported_training_instance_types_isSet = !json[QString("SupportedTrainingInstanceTypes")].isNull() && m_supported_training_instance_types_isValid;

    m_supports_distributed_training_isValid = ::OpenAPI::fromJsonValue(m_supports_distributed_training, json[QString("SupportsDistributedTraining")]);
    m_supports_distributed_training_isSet = !json[QString("SupportsDistributedTraining")].isNull() && m_supports_distributed_training_isValid;

    m_metric_definitions_isValid = ::OpenAPI::fromJsonValue(m_metric_definitions, json[QString("MetricDefinitions")]);
    m_metric_definitions_isSet = !json[QString("MetricDefinitions")].isNull() && m_metric_definitions_isValid;

    m_training_channels_isValid = ::OpenAPI::fromJsonValue(m_training_channels, json[QString("TrainingChannels")]);
    m_training_channels_isSet = !json[QString("TrainingChannels")].isNull() && m_training_channels_isValid;

    m_supported_tuning_job_objective_metrics_isValid = ::OpenAPI::fromJsonValue(m_supported_tuning_job_objective_metrics, json[QString("SupportedTuningJobObjectiveMetrics")]);
    m_supported_tuning_job_objective_metrics_isSet = !json[QString("SupportedTuningJobObjectiveMetrics")].isNull() && m_supported_tuning_job_objective_metrics_isValid;
}

QString OAICreateAlgorithmInput_TrainingSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAlgorithmInput_TrainingSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_training_image_isSet) {
        obj.insert(QString("TrainingImage"), ::OpenAPI::toJsonValue(m_training_image));
    }
    if (m_training_image_digest_isSet) {
        obj.insert(QString("TrainingImageDigest"), ::OpenAPI::toJsonValue(m_training_image_digest));
    }
    if (m_supported_hyper_parameters.isSet()) {
        obj.insert(QString("SupportedHyperParameters"), ::OpenAPI::toJsonValue(m_supported_hyper_parameters));
    }
    if (m_supported_training_instance_types.isSet()) {
        obj.insert(QString("SupportedTrainingInstanceTypes"), ::OpenAPI::toJsonValue(m_supported_training_instance_types));
    }
    if (m_supports_distributed_training_isSet) {
        obj.insert(QString("SupportsDistributedTraining"), ::OpenAPI::toJsonValue(m_supports_distributed_training));
    }
    if (m_metric_definitions.isSet()) {
        obj.insert(QString("MetricDefinitions"), ::OpenAPI::toJsonValue(m_metric_definitions));
    }
    if (m_training_channels.isSet()) {
        obj.insert(QString("TrainingChannels"), ::OpenAPI::toJsonValue(m_training_channels));
    }
    if (m_supported_tuning_job_objective_metrics.isSet()) {
        obj.insert(QString("SupportedTuningJobObjectiveMetrics"), ::OpenAPI::toJsonValue(m_supported_tuning_job_objective_metrics));
    }
    return obj;
}

QString OAICreateAlgorithmInput_TrainingSpecification::getTrainingImage() const {
    return m_training_image;
}
void OAICreateAlgorithmInput_TrainingSpecification::setTrainingImage(const QString &training_image) {
    m_training_image = training_image;
    m_training_image_isSet = true;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_training_image_Set() const{
    return m_training_image_isSet;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_training_image_Valid() const{
    return m_training_image_isValid;
}

QString OAICreateAlgorithmInput_TrainingSpecification::getTrainingImageDigest() const {
    return m_training_image_digest;
}
void OAICreateAlgorithmInput_TrainingSpecification::setTrainingImageDigest(const QString &training_image_digest) {
    m_training_image_digest = training_image_digest;
    m_training_image_digest_isSet = true;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_training_image_digest_Set() const{
    return m_training_image_digest_isSet;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_training_image_digest_Valid() const{
    return m_training_image_digest_isValid;
}

QList OAICreateAlgorithmInput_TrainingSpecification::getSupportedHyperParameters() const {
    return m_supported_hyper_parameters;
}
void OAICreateAlgorithmInput_TrainingSpecification::setSupportedHyperParameters(const QList &supported_hyper_parameters) {
    m_supported_hyper_parameters = supported_hyper_parameters;
    m_supported_hyper_parameters_isSet = true;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_supported_hyper_parameters_Set() const{
    return m_supported_hyper_parameters_isSet;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_supported_hyper_parameters_Valid() const{
    return m_supported_hyper_parameters_isValid;
}

QList OAICreateAlgorithmInput_TrainingSpecification::getSupportedTrainingInstanceTypes() const {
    return m_supported_training_instance_types;
}
void OAICreateAlgorithmInput_TrainingSpecification::setSupportedTrainingInstanceTypes(const QList &supported_training_instance_types) {
    m_supported_training_instance_types = supported_training_instance_types;
    m_supported_training_instance_types_isSet = true;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_supported_training_instance_types_Set() const{
    return m_supported_training_instance_types_isSet;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_supported_training_instance_types_Valid() const{
    return m_supported_training_instance_types_isValid;
}

bool OAICreateAlgorithmInput_TrainingSpecification::getSupportsDistributedTraining() const {
    return m_supports_distributed_training;
}
void OAICreateAlgorithmInput_TrainingSpecification::setSupportsDistributedTraining(const bool &supports_distributed_training) {
    m_supports_distributed_training = supports_distributed_training;
    m_supports_distributed_training_isSet = true;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_supports_distributed_training_Set() const{
    return m_supports_distributed_training_isSet;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_supports_distributed_training_Valid() const{
    return m_supports_distributed_training_isValid;
}

QList OAICreateAlgorithmInput_TrainingSpecification::getMetricDefinitions() const {
    return m_metric_definitions;
}
void OAICreateAlgorithmInput_TrainingSpecification::setMetricDefinitions(const QList &metric_definitions) {
    m_metric_definitions = metric_definitions;
    m_metric_definitions_isSet = true;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_metric_definitions_Set() const{
    return m_metric_definitions_isSet;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_metric_definitions_Valid() const{
    return m_metric_definitions_isValid;
}

QList OAICreateAlgorithmInput_TrainingSpecification::getTrainingChannels() const {
    return m_training_channels;
}
void OAICreateAlgorithmInput_TrainingSpecification::setTrainingChannels(const QList &training_channels) {
    m_training_channels = training_channels;
    m_training_channels_isSet = true;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_training_channels_Set() const{
    return m_training_channels_isSet;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_training_channels_Valid() const{
    return m_training_channels_isValid;
}

QList OAICreateAlgorithmInput_TrainingSpecification::getSupportedTuningJobObjectiveMetrics() const {
    return m_supported_tuning_job_objective_metrics;
}
void OAICreateAlgorithmInput_TrainingSpecification::setSupportedTuningJobObjectiveMetrics(const QList &supported_tuning_job_objective_metrics) {
    m_supported_tuning_job_objective_metrics = supported_tuning_job_objective_metrics;
    m_supported_tuning_job_objective_metrics_isSet = true;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_supported_tuning_job_objective_metrics_Set() const{
    return m_supported_tuning_job_objective_metrics_isSet;
}

bool OAICreateAlgorithmInput_TrainingSpecification::is_supported_tuning_job_objective_metrics_Valid() const{
    return m_supported_tuning_job_objective_metrics_isValid;
}

bool OAICreateAlgorithmInput_TrainingSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_training_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_hyper_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_training_instance_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_distributed_training_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_channels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_tuning_job_objective_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAlgorithmInput_TrainingSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_training_image_isValid && m_supported_training_instance_types_isValid && m_training_channels_isValid && true;
}

} // namespace OpenAPI
