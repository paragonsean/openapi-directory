/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3DataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3DataSource::OAIS3DataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3DataSource::OAIS3DataSource() {
    this->initializeModel();
}

OAIS3DataSource::~OAIS3DataSource() {}

void OAIS3DataSource::initializeModel() {

    m_s3_data_type_isSet = false;
    m_s3_data_type_isValid = false;

    m_s3_uri_isSet = false;
    m_s3_uri_isValid = false;

    m_s3_data_distribution_type_isSet = false;
    m_s3_data_distribution_type_isValid = false;

    m_attribute_names_isSet = false;
    m_attribute_names_isValid = false;

    m_instance_group_names_isSet = false;
    m_instance_group_names_isValid = false;
}

void OAIS3DataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3DataSource::fromJsonObject(QJsonObject json) {

    m_s3_data_type_isValid = ::OpenAPI::fromJsonValue(m_s3_data_type, json[QString("S3DataType")]);
    m_s3_data_type_isSet = !json[QString("S3DataType")].isNull() && m_s3_data_type_isValid;

    m_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_s3_uri, json[QString("S3Uri")]);
    m_s3_uri_isSet = !json[QString("S3Uri")].isNull() && m_s3_uri_isValid;

    m_s3_data_distribution_type_isValid = ::OpenAPI::fromJsonValue(m_s3_data_distribution_type, json[QString("S3DataDistributionType")]);
    m_s3_data_distribution_type_isSet = !json[QString("S3DataDistributionType")].isNull() && m_s3_data_distribution_type_isValid;

    m_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_attribute_names, json[QString("AttributeNames")]);
    m_attribute_names_isSet = !json[QString("AttributeNames")].isNull() && m_attribute_names_isValid;

    m_instance_group_names_isValid = ::OpenAPI::fromJsonValue(m_instance_group_names, json[QString("InstanceGroupNames")]);
    m_instance_group_names_isSet = !json[QString("InstanceGroupNames")].isNull() && m_instance_group_names_isValid;
}

QString OAIS3DataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3DataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_data_type.isSet()) {
        obj.insert(QString("S3DataType"), ::OpenAPI::toJsonValue(m_s3_data_type));
    }
    if (m_s3_uri_isSet) {
        obj.insert(QString("S3Uri"), ::OpenAPI::toJsonValue(m_s3_uri));
    }
    if (m_s3_data_distribution_type.isSet()) {
        obj.insert(QString("S3DataDistributionType"), ::OpenAPI::toJsonValue(m_s3_data_distribution_type));
    }
    if (m_attribute_names.isSet()) {
        obj.insert(QString("AttributeNames"), ::OpenAPI::toJsonValue(m_attribute_names));
    }
    if (m_instance_group_names.isSet()) {
        obj.insert(QString("InstanceGroupNames"), ::OpenAPI::toJsonValue(m_instance_group_names));
    }
    return obj;
}

OAIS3DataType OAIS3DataSource::getS3DataType() const {
    return m_s3_data_type;
}
void OAIS3DataSource::setS3DataType(const OAIS3DataType &s3_data_type) {
    m_s3_data_type = s3_data_type;
    m_s3_data_type_isSet = true;
}

bool OAIS3DataSource::is_s3_data_type_Set() const{
    return m_s3_data_type_isSet;
}

bool OAIS3DataSource::is_s3_data_type_Valid() const{
    return m_s3_data_type_isValid;
}

QString OAIS3DataSource::getS3Uri() const {
    return m_s3_uri;
}
void OAIS3DataSource::setS3Uri(const QString &s3_uri) {
    m_s3_uri = s3_uri;
    m_s3_uri_isSet = true;
}

bool OAIS3DataSource::is_s3_uri_Set() const{
    return m_s3_uri_isSet;
}

bool OAIS3DataSource::is_s3_uri_Valid() const{
    return m_s3_uri_isValid;
}

OAIS3DataDistribution OAIS3DataSource::getS3DataDistributionType() const {
    return m_s3_data_distribution_type;
}
void OAIS3DataSource::setS3DataDistributionType(const OAIS3DataDistribution &s3_data_distribution_type) {
    m_s3_data_distribution_type = s3_data_distribution_type;
    m_s3_data_distribution_type_isSet = true;
}

bool OAIS3DataSource::is_s3_data_distribution_type_Set() const{
    return m_s3_data_distribution_type_isSet;
}

bool OAIS3DataSource::is_s3_data_distribution_type_Valid() const{
    return m_s3_data_distribution_type_isValid;
}

QList OAIS3DataSource::getAttributeNames() const {
    return m_attribute_names;
}
void OAIS3DataSource::setAttributeNames(const QList &attribute_names) {
    m_attribute_names = attribute_names;
    m_attribute_names_isSet = true;
}

bool OAIS3DataSource::is_attribute_names_Set() const{
    return m_attribute_names_isSet;
}

bool OAIS3DataSource::is_attribute_names_Valid() const{
    return m_attribute_names_isValid;
}

QList OAIS3DataSource::getInstanceGroupNames() const {
    return m_instance_group_names;
}
void OAIS3DataSource::setInstanceGroupNames(const QList &instance_group_names) {
    m_instance_group_names = instance_group_names;
    m_instance_group_names_isSet = true;
}

bool OAIS3DataSource::is_instance_group_names_Set() const{
    return m_instance_group_names_isSet;
}

bool OAIS3DataSource::is_instance_group_names_Valid() const{
    return m_instance_group_names_isValid;
}

bool OAIS3DataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_data_distribution_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_group_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3DataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_data_type_isValid && m_s3_uri_isValid && true;
}

} // namespace OpenAPI
