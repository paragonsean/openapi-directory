/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_image_arn_isSet = false;
    m_image_arn_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_image_status_isSet = false;
    m_image_status_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_image_arn_isValid = ::OpenAPI::fromJsonValue(m_image_arn, json[QString("ImageArn")]);
    m_image_arn_isSet = !json[QString("ImageArn")].isNull() && m_image_arn_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("ImageName")]);
    m_image_name_isSet = !json[QString("ImageName")].isNull() && m_image_name_isValid;

    m_image_status_isValid = ::OpenAPI::fromJsonValue(m_image_status, json[QString("ImageStatus")]);
    m_image_status_isSet = !json[QString("ImageStatus")].isNull() && m_image_status_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_image_arn_isSet) {
        obj.insert(QString("ImageArn"), ::OpenAPI::toJsonValue(m_image_arn));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("ImageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_image_status.isSet()) {
        obj.insert(QString("ImageStatus"), ::OpenAPI::toJsonValue(m_image_status));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    return obj;
}

QDateTime OAIImage::getCreationTime() const {
    return m_creation_time;
}
void OAIImage::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIImage::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIImage::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIImage::getDescription() const {
    return m_description;
}
void OAIImage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImage::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIImage::getDisplayName() const {
    return m_display_name;
}
void OAIImage::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIImage::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIImage::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIImage::getFailureReason() const {
    return m_failure_reason;
}
void OAIImage::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIImage::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIImage::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIImage::getImageArn() const {
    return m_image_arn;
}
void OAIImage::setImageArn(const QString &image_arn) {
    m_image_arn = image_arn;
    m_image_arn_isSet = true;
}

bool OAIImage::is_image_arn_Set() const{
    return m_image_arn_isSet;
}

bool OAIImage::is_image_arn_Valid() const{
    return m_image_arn_isValid;
}

QString OAIImage::getImageName() const {
    return m_image_name;
}
void OAIImage::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAIImage::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAIImage::is_image_name_Valid() const{
    return m_image_name_isValid;
}

OAIImageStatus OAIImage::getImageStatus() const {
    return m_image_status;
}
void OAIImage::setImageStatus(const OAIImageStatus &image_status) {
    m_image_status = image_status;
    m_image_status_isSet = true;
}

bool OAIImage::is_image_status_Set() const{
    return m_image_status_isSet;
}

bool OAIImage::is_image_status_Valid() const{
    return m_image_status_isValid;
}

QDateTime OAIImage::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIImage::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIImage::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIImage::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_time_isValid && m_image_arn_isValid && m_image_name_isValid && m_image_status_isValid && m_last_modified_time_isValid && true;
}

} // namespace OpenAPI
