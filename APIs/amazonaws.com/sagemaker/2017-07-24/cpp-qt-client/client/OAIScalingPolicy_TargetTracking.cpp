/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScalingPolicy_TargetTracking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScalingPolicy_TargetTracking::OAIScalingPolicy_TargetTracking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScalingPolicy_TargetTracking::OAIScalingPolicy_TargetTracking() {
    this->initializeModel();
}

OAIScalingPolicy_TargetTracking::~OAIScalingPolicy_TargetTracking() {}

void OAIScalingPolicy_TargetTracking::initializeModel() {

    m_metric_specification_isSet = false;
    m_metric_specification_isValid = false;

    m_target_value_isSet = false;
    m_target_value_isValid = false;
}

void OAIScalingPolicy_TargetTracking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScalingPolicy_TargetTracking::fromJsonObject(QJsonObject json) {

    m_metric_specification_isValid = ::OpenAPI::fromJsonValue(m_metric_specification, json[QString("MetricSpecification")]);
    m_metric_specification_isSet = !json[QString("MetricSpecification")].isNull() && m_metric_specification_isValid;

    m_target_value_isValid = ::OpenAPI::fromJsonValue(m_target_value, json[QString("TargetValue")]);
    m_target_value_isSet = !json[QString("TargetValue")].isNull() && m_target_value_isValid;
}

QString OAIScalingPolicy_TargetTracking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScalingPolicy_TargetTracking::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_specification.isSet()) {
        obj.insert(QString("MetricSpecification"), ::OpenAPI::toJsonValue(m_metric_specification));
    }
    if (m_target_value_isSet) {
        obj.insert(QString("TargetValue"), ::OpenAPI::toJsonValue(m_target_value));
    }
    return obj;
}

OAITargetTrackingScalingPolicyConfiguration_MetricSpecification OAIScalingPolicy_TargetTracking::getMetricSpecification() const {
    return m_metric_specification;
}
void OAIScalingPolicy_TargetTracking::setMetricSpecification(const OAITargetTrackingScalingPolicyConfiguration_MetricSpecification &metric_specification) {
    m_metric_specification = metric_specification;
    m_metric_specification_isSet = true;
}

bool OAIScalingPolicy_TargetTracking::is_metric_specification_Set() const{
    return m_metric_specification_isSet;
}

bool OAIScalingPolicy_TargetTracking::is_metric_specification_Valid() const{
    return m_metric_specification_isValid;
}

double OAIScalingPolicy_TargetTracking::getTargetValue() const {
    return m_target_value;
}
void OAIScalingPolicy_TargetTracking::setTargetValue(const double &target_value) {
    m_target_value = target_value;
    m_target_value_isSet = true;
}

bool OAIScalingPolicy_TargetTracking::is_target_value_Set() const{
    return m_target_value_isSet;
}

bool OAIScalingPolicy_TargetTracking::is_target_value_Valid() const{
    return m_target_value_isValid;
}

bool OAIScalingPolicy_TargetTracking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScalingPolicy_TargetTracking::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
