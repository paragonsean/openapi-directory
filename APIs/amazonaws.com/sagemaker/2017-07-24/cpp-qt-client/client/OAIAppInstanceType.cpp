/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInstanceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInstanceType::OAIAppInstanceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInstanceType::OAIAppInstanceType() {
    this->initializeModel();
}

OAIAppInstanceType::~OAIAppInstanceType() {}

void OAIAppInstanceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppInstanceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppInstanceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("system", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::SYSTEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.t3.micro", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_T3_MICRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.t3.small", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_T3_SMALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.t3.medium", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_T3_MEDIUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.t3.large", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_T3_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.t3.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_T3_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.t3.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_T3_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.large", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.12xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5_12XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5.24xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5_24XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5d.large", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5D_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5d.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5D_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5d.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5D_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5d.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5D_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5d.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5D_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5d.12xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5D_12XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5d.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5D_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.m5d.24xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_M5D_24XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.large", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_C5_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_C5_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_C5_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_C5_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.9xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_C5_9XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.12xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_C5_12XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.18xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_C5_18XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.c5.24xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_C5_24XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p3.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_P3_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p3.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_P3_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p3.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_P3_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p3dn.24xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_P3DN_24XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G4DN_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G4DN_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G4DN_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G4DN_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.12xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G4DN_12XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g4dn.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G4DN_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.r5.large", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_R5_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.r5.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_R5_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.r5.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_R5_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.r5.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_R5_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.r5.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_R5_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.r5.12xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_R5_12XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.r5.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_R5_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.r5.24xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_R5_24XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g5.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G5_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g5.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G5_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g5.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G5_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g5.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G5_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g5.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G5_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g5.12xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G5_12XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g5.24xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G5_24XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.g5.48xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_G5_48XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.geospatial.interactive", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_GEOSPATIAL_INTERACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p4d.24xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_P4D_24XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml.p4de.24xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppInstanceType::ML_P4DE_24XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppInstanceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppInstanceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppInstanceType::SYSTEM:
            val = "system";
            break;
        case eOAIAppInstanceType::ML_T3_MICRO:
            val = "ml.t3.micro";
            break;
        case eOAIAppInstanceType::ML_T3_SMALL:
            val = "ml.t3.small";
            break;
        case eOAIAppInstanceType::ML_T3_MEDIUM:
            val = "ml.t3.medium";
            break;
        case eOAIAppInstanceType::ML_T3_LARGE:
            val = "ml.t3.large";
            break;
        case eOAIAppInstanceType::ML_T3_XLARGE:
            val = "ml.t3.xlarge";
            break;
        case eOAIAppInstanceType::ML_T3_2XLARGE:
            val = "ml.t3.2xlarge";
            break;
        case eOAIAppInstanceType::ML_M5_LARGE:
            val = "ml.m5.large";
            break;
        case eOAIAppInstanceType::ML_M5_XLARGE:
            val = "ml.m5.xlarge";
            break;
        case eOAIAppInstanceType::ML_M5_2XLARGE:
            val = "ml.m5.2xlarge";
            break;
        case eOAIAppInstanceType::ML_M5_4XLARGE:
            val = "ml.m5.4xlarge";
            break;
        case eOAIAppInstanceType::ML_M5_8XLARGE:
            val = "ml.m5.8xlarge";
            break;
        case eOAIAppInstanceType::ML_M5_12XLARGE:
            val = "ml.m5.12xlarge";
            break;
        case eOAIAppInstanceType::ML_M5_16XLARGE:
            val = "ml.m5.16xlarge";
            break;
        case eOAIAppInstanceType::ML_M5_24XLARGE:
            val = "ml.m5.24xlarge";
            break;
        case eOAIAppInstanceType::ML_M5D_LARGE:
            val = "ml.m5d.large";
            break;
        case eOAIAppInstanceType::ML_M5D_XLARGE:
            val = "ml.m5d.xlarge";
            break;
        case eOAIAppInstanceType::ML_M5D_2XLARGE:
            val = "ml.m5d.2xlarge";
            break;
        case eOAIAppInstanceType::ML_M5D_4XLARGE:
            val = "ml.m5d.4xlarge";
            break;
        case eOAIAppInstanceType::ML_M5D_8XLARGE:
            val = "ml.m5d.8xlarge";
            break;
        case eOAIAppInstanceType::ML_M5D_12XLARGE:
            val = "ml.m5d.12xlarge";
            break;
        case eOAIAppInstanceType::ML_M5D_16XLARGE:
            val = "ml.m5d.16xlarge";
            break;
        case eOAIAppInstanceType::ML_M5D_24XLARGE:
            val = "ml.m5d.24xlarge";
            break;
        case eOAIAppInstanceType::ML_C5_LARGE:
            val = "ml.c5.large";
            break;
        case eOAIAppInstanceType::ML_C5_XLARGE:
            val = "ml.c5.xlarge";
            break;
        case eOAIAppInstanceType::ML_C5_2XLARGE:
            val = "ml.c5.2xlarge";
            break;
        case eOAIAppInstanceType::ML_C5_4XLARGE:
            val = "ml.c5.4xlarge";
            break;
        case eOAIAppInstanceType::ML_C5_9XLARGE:
            val = "ml.c5.9xlarge";
            break;
        case eOAIAppInstanceType::ML_C5_12XLARGE:
            val = "ml.c5.12xlarge";
            break;
        case eOAIAppInstanceType::ML_C5_18XLARGE:
            val = "ml.c5.18xlarge";
            break;
        case eOAIAppInstanceType::ML_C5_24XLARGE:
            val = "ml.c5.24xlarge";
            break;
        case eOAIAppInstanceType::ML_P3_2XLARGE:
            val = "ml.p3.2xlarge";
            break;
        case eOAIAppInstanceType::ML_P3_8XLARGE:
            val = "ml.p3.8xlarge";
            break;
        case eOAIAppInstanceType::ML_P3_16XLARGE:
            val = "ml.p3.16xlarge";
            break;
        case eOAIAppInstanceType::ML_P3DN_24XLARGE:
            val = "ml.p3dn.24xlarge";
            break;
        case eOAIAppInstanceType::ML_G4DN_XLARGE:
            val = "ml.g4dn.xlarge";
            break;
        case eOAIAppInstanceType::ML_G4DN_2XLARGE:
            val = "ml.g4dn.2xlarge";
            break;
        case eOAIAppInstanceType::ML_G4DN_4XLARGE:
            val = "ml.g4dn.4xlarge";
            break;
        case eOAIAppInstanceType::ML_G4DN_8XLARGE:
            val = "ml.g4dn.8xlarge";
            break;
        case eOAIAppInstanceType::ML_G4DN_12XLARGE:
            val = "ml.g4dn.12xlarge";
            break;
        case eOAIAppInstanceType::ML_G4DN_16XLARGE:
            val = "ml.g4dn.16xlarge";
            break;
        case eOAIAppInstanceType::ML_R5_LARGE:
            val = "ml.r5.large";
            break;
        case eOAIAppInstanceType::ML_R5_XLARGE:
            val = "ml.r5.xlarge";
            break;
        case eOAIAppInstanceType::ML_R5_2XLARGE:
            val = "ml.r5.2xlarge";
            break;
        case eOAIAppInstanceType::ML_R5_4XLARGE:
            val = "ml.r5.4xlarge";
            break;
        case eOAIAppInstanceType::ML_R5_8XLARGE:
            val = "ml.r5.8xlarge";
            break;
        case eOAIAppInstanceType::ML_R5_12XLARGE:
            val = "ml.r5.12xlarge";
            break;
        case eOAIAppInstanceType::ML_R5_16XLARGE:
            val = "ml.r5.16xlarge";
            break;
        case eOAIAppInstanceType::ML_R5_24XLARGE:
            val = "ml.r5.24xlarge";
            break;
        case eOAIAppInstanceType::ML_G5_XLARGE:
            val = "ml.g5.xlarge";
            break;
        case eOAIAppInstanceType::ML_G5_2XLARGE:
            val = "ml.g5.2xlarge";
            break;
        case eOAIAppInstanceType::ML_G5_4XLARGE:
            val = "ml.g5.4xlarge";
            break;
        case eOAIAppInstanceType::ML_G5_8XLARGE:
            val = "ml.g5.8xlarge";
            break;
        case eOAIAppInstanceType::ML_G5_16XLARGE:
            val = "ml.g5.16xlarge";
            break;
        case eOAIAppInstanceType::ML_G5_12XLARGE:
            val = "ml.g5.12xlarge";
            break;
        case eOAIAppInstanceType::ML_G5_24XLARGE:
            val = "ml.g5.24xlarge";
            break;
        case eOAIAppInstanceType::ML_G5_48XLARGE:
            val = "ml.g5.48xlarge";
            break;
        case eOAIAppInstanceType::ML_GEOSPATIAL_INTERACTIVE:
            val = "ml.geospatial.interactive";
            break;
        case eOAIAppInstanceType::ML_P4D_24XLARGE:
            val = "ml.p4d.24xlarge";
            break;
        case eOAIAppInstanceType::ML_P4DE_24XLARGE:
            val = "ml.p4de.24xlarge";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppInstanceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppInstanceType::eOAIAppInstanceType OAIAppInstanceType::getValue() const {
    return m_value;
}

void OAIAppInstanceType::setValue(const OAIAppInstanceType::eOAIAppInstanceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppInstanceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppInstanceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
