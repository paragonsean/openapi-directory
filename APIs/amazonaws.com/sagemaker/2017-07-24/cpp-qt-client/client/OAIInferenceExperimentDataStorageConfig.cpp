/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferenceExperimentDataStorageConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferenceExperimentDataStorageConfig::OAIInferenceExperimentDataStorageConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferenceExperimentDataStorageConfig::OAIInferenceExperimentDataStorageConfig() {
    this->initializeModel();
}

OAIInferenceExperimentDataStorageConfig::~OAIInferenceExperimentDataStorageConfig() {}

void OAIInferenceExperimentDataStorageConfig::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;
}

void OAIInferenceExperimentDataStorageConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInferenceExperimentDataStorageConfig::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("KmsKey")]);
    m_kms_key_isSet = !json[QString("KmsKey")].isNull() && m_kms_key_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;
}

QString OAIInferenceExperimentDataStorageConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInferenceExperimentDataStorageConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("KmsKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_content_type.isSet()) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    return obj;
}

QString OAIInferenceExperimentDataStorageConfig::getDestination() const {
    return m_destination;
}
void OAIInferenceExperimentDataStorageConfig::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIInferenceExperimentDataStorageConfig::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIInferenceExperimentDataStorageConfig::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIInferenceExperimentDataStorageConfig::getKmsKey() const {
    return m_kms_key;
}
void OAIInferenceExperimentDataStorageConfig::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIInferenceExperimentDataStorageConfig::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIInferenceExperimentDataStorageConfig::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

OAICaptureContentTypeHeader OAIInferenceExperimentDataStorageConfig::getContentType() const {
    return m_content_type;
}
void OAIInferenceExperimentDataStorageConfig::setContentType(const OAICaptureContentTypeHeader &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIInferenceExperimentDataStorageConfig::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIInferenceExperimentDataStorageConfig::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIInferenceExperimentDataStorageConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInferenceExperimentDataStorageConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && true;
}

} // namespace OpenAPI
