/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerDefinition::OAIContainerDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerDefinition::OAIContainerDefinition() {
    this->initializeModel();
}

OAIContainerDefinition::~OAIContainerDefinition() {}

void OAIContainerDefinition::initializeModel() {

    m_container_hostname_isSet = false;
    m_container_hostname_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_config_isSet = false;
    m_image_config_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_model_data_url_isSet = false;
    m_model_data_url_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_model_package_name_isSet = false;
    m_model_package_name_isValid = false;

    m_inference_specification_name_isSet = false;
    m_inference_specification_name_isValid = false;

    m_multi_model_config_isSet = false;
    m_multi_model_config_isValid = false;

    m_model_data_source_isSet = false;
    m_model_data_source_isValid = false;
}

void OAIContainerDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerDefinition::fromJsonObject(QJsonObject json) {

    m_container_hostname_isValid = ::OpenAPI::fromJsonValue(m_container_hostname, json[QString("ContainerHostname")]);
    m_container_hostname_isSet = !json[QString("ContainerHostname")].isNull() && m_container_hostname_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("Image")]);
    m_image_isSet = !json[QString("Image")].isNull() && m_image_isValid;

    m_image_config_isValid = ::OpenAPI::fromJsonValue(m_image_config, json[QString("ImageConfig")]);
    m_image_config_isSet = !json[QString("ImageConfig")].isNull() && m_image_config_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_model_data_url_isValid = ::OpenAPI::fromJsonValue(m_model_data_url, json[QString("ModelDataUrl")]);
    m_model_data_url_isSet = !json[QString("ModelDataUrl")].isNull() && m_model_data_url_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_model_package_name_isValid = ::OpenAPI::fromJsonValue(m_model_package_name, json[QString("ModelPackageName")]);
    m_model_package_name_isSet = !json[QString("ModelPackageName")].isNull() && m_model_package_name_isValid;

    m_inference_specification_name_isValid = ::OpenAPI::fromJsonValue(m_inference_specification_name, json[QString("InferenceSpecificationName")]);
    m_inference_specification_name_isSet = !json[QString("InferenceSpecificationName")].isNull() && m_inference_specification_name_isValid;

    m_multi_model_config_isValid = ::OpenAPI::fromJsonValue(m_multi_model_config, json[QString("MultiModelConfig")]);
    m_multi_model_config_isSet = !json[QString("MultiModelConfig")].isNull() && m_multi_model_config_isValid;

    m_model_data_source_isValid = ::OpenAPI::fromJsonValue(m_model_data_source, json[QString("ModelDataSource")]);
    m_model_data_source_isSet = !json[QString("ModelDataSource")].isNull() && m_model_data_source_isValid;
}

QString OAIContainerDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_container_hostname_isSet) {
        obj.insert(QString("ContainerHostname"), ::OpenAPI::toJsonValue(m_container_hostname));
    }
    if (m_image_isSet) {
        obj.insert(QString("Image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_config.isSet()) {
        obj.insert(QString("ImageConfig"), ::OpenAPI::toJsonValue(m_image_config));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_model_data_url_isSet) {
        obj.insert(QString("ModelDataUrl"), ::OpenAPI::toJsonValue(m_model_data_url));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_model_package_name_isSet) {
        obj.insert(QString("ModelPackageName"), ::OpenAPI::toJsonValue(m_model_package_name));
    }
    if (m_inference_specification_name_isSet) {
        obj.insert(QString("InferenceSpecificationName"), ::OpenAPI::toJsonValue(m_inference_specification_name));
    }
    if (m_multi_model_config.isSet()) {
        obj.insert(QString("MultiModelConfig"), ::OpenAPI::toJsonValue(m_multi_model_config));
    }
    if (m_model_data_source.isSet()) {
        obj.insert(QString("ModelDataSource"), ::OpenAPI::toJsonValue(m_model_data_source));
    }
    return obj;
}

QString OAIContainerDefinition::getContainerHostname() const {
    return m_container_hostname;
}
void OAIContainerDefinition::setContainerHostname(const QString &container_hostname) {
    m_container_hostname = container_hostname;
    m_container_hostname_isSet = true;
}

bool OAIContainerDefinition::is_container_hostname_Set() const{
    return m_container_hostname_isSet;
}

bool OAIContainerDefinition::is_container_hostname_Valid() const{
    return m_container_hostname_isValid;
}

QString OAIContainerDefinition::getImage() const {
    return m_image;
}
void OAIContainerDefinition::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIContainerDefinition::is_image_Set() const{
    return m_image_isSet;
}

bool OAIContainerDefinition::is_image_Valid() const{
    return m_image_isValid;
}

OAIContainerDefinition_ImageConfig OAIContainerDefinition::getImageConfig() const {
    return m_image_config;
}
void OAIContainerDefinition::setImageConfig(const OAIContainerDefinition_ImageConfig &image_config) {
    m_image_config = image_config;
    m_image_config_isSet = true;
}

bool OAIContainerDefinition::is_image_config_Set() const{
    return m_image_config_isSet;
}

bool OAIContainerDefinition::is_image_config_Valid() const{
    return m_image_config_isValid;
}

OAIContainerMode OAIContainerDefinition::getMode() const {
    return m_mode;
}
void OAIContainerDefinition::setMode(const OAIContainerMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIContainerDefinition::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIContainerDefinition::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIContainerDefinition::getModelDataUrl() const {
    return m_model_data_url;
}
void OAIContainerDefinition::setModelDataUrl(const QString &model_data_url) {
    m_model_data_url = model_data_url;
    m_model_data_url_isSet = true;
}

bool OAIContainerDefinition::is_model_data_url_Set() const{
    return m_model_data_url_isSet;
}

bool OAIContainerDefinition::is_model_data_url_Valid() const{
    return m_model_data_url_isValid;
}

QMap OAIContainerDefinition::getEnvironment() const {
    return m_environment;
}
void OAIContainerDefinition::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIContainerDefinition::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIContainerDefinition::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIContainerDefinition::getModelPackageName() const {
    return m_model_package_name;
}
void OAIContainerDefinition::setModelPackageName(const QString &model_package_name) {
    m_model_package_name = model_package_name;
    m_model_package_name_isSet = true;
}

bool OAIContainerDefinition::is_model_package_name_Set() const{
    return m_model_package_name_isSet;
}

bool OAIContainerDefinition::is_model_package_name_Valid() const{
    return m_model_package_name_isValid;
}

QString OAIContainerDefinition::getInferenceSpecificationName() const {
    return m_inference_specification_name;
}
void OAIContainerDefinition::setInferenceSpecificationName(const QString &inference_specification_name) {
    m_inference_specification_name = inference_specification_name;
    m_inference_specification_name_isSet = true;
}

bool OAIContainerDefinition::is_inference_specification_name_Set() const{
    return m_inference_specification_name_isSet;
}

bool OAIContainerDefinition::is_inference_specification_name_Valid() const{
    return m_inference_specification_name_isValid;
}

OAIContainerDefinition_MultiModelConfig OAIContainerDefinition::getMultiModelConfig() const {
    return m_multi_model_config;
}
void OAIContainerDefinition::setMultiModelConfig(const OAIContainerDefinition_MultiModelConfig &multi_model_config) {
    m_multi_model_config = multi_model_config;
    m_multi_model_config_isSet = true;
}

bool OAIContainerDefinition::is_multi_model_config_Set() const{
    return m_multi_model_config_isSet;
}

bool OAIContainerDefinition::is_multi_model_config_Valid() const{
    return m_multi_model_config_isValid;
}

OAIContainerDefinition_ModelDataSource OAIContainerDefinition::getModelDataSource() const {
    return m_model_data_source;
}
void OAIContainerDefinition::setModelDataSource(const OAIContainerDefinition_ModelDataSource &model_data_source) {
    m_model_data_source = model_data_source;
    m_model_data_source_isSet = true;
}

bool OAIContainerDefinition::is_model_data_source_Set() const{
    return m_model_data_source_isSet;
}

bool OAIContainerDefinition::is_model_data_source_Valid() const{
    return m_model_data_source_isValid;
}

bool OAIContainerDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_data_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_specification_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_model_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
