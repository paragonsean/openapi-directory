/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUserProfileRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUserProfileRequest::OAICreateUserProfileRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUserProfileRequest::OAICreateUserProfileRequest() {
    this->initializeModel();
}

OAICreateUserProfileRequest::~OAICreateUserProfileRequest() {}

void OAICreateUserProfileRequest::initializeModel() {

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_user_profile_name_isSet = false;
    m_user_profile_name_isValid = false;

    m_single_sign_on_user_identifier_isSet = false;
    m_single_sign_on_user_identifier_isValid = false;

    m_single_sign_on_user_value_isSet = false;
    m_single_sign_on_user_value_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_user_settings_isSet = false;
    m_user_settings_isValid = false;
}

void OAICreateUserProfileRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUserProfileRequest::fromJsonObject(QJsonObject json) {

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("DomainId")]);
    m_domain_id_isSet = !json[QString("DomainId")].isNull() && m_domain_id_isValid;

    m_user_profile_name_isValid = ::OpenAPI::fromJsonValue(m_user_profile_name, json[QString("UserProfileName")]);
    m_user_profile_name_isSet = !json[QString("UserProfileName")].isNull() && m_user_profile_name_isValid;

    m_single_sign_on_user_identifier_isValid = ::OpenAPI::fromJsonValue(m_single_sign_on_user_identifier, json[QString("SingleSignOnUserIdentifier")]);
    m_single_sign_on_user_identifier_isSet = !json[QString("SingleSignOnUserIdentifier")].isNull() && m_single_sign_on_user_identifier_isValid;

    m_single_sign_on_user_value_isValid = ::OpenAPI::fromJsonValue(m_single_sign_on_user_value, json[QString("SingleSignOnUserValue")]);
    m_single_sign_on_user_value_isSet = !json[QString("SingleSignOnUserValue")].isNull() && m_single_sign_on_user_value_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_user_settings_isValid = ::OpenAPI::fromJsonValue(m_user_settings, json[QString("UserSettings")]);
    m_user_settings_isSet = !json[QString("UserSettings")].isNull() && m_user_settings_isValid;
}

QString OAICreateUserProfileRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUserProfileRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_id_isSet) {
        obj.insert(QString("DomainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_user_profile_name_isSet) {
        obj.insert(QString("UserProfileName"), ::OpenAPI::toJsonValue(m_user_profile_name));
    }
    if (m_single_sign_on_user_identifier_isSet) {
        obj.insert(QString("SingleSignOnUserIdentifier"), ::OpenAPI::toJsonValue(m_single_sign_on_user_identifier));
    }
    if (m_single_sign_on_user_value_isSet) {
        obj.insert(QString("SingleSignOnUserValue"), ::OpenAPI::toJsonValue(m_single_sign_on_user_value));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_user_settings.isSet()) {
        obj.insert(QString("UserSettings"), ::OpenAPI::toJsonValue(m_user_settings));
    }
    return obj;
}

QString OAICreateUserProfileRequest::getDomainId() const {
    return m_domain_id;
}
void OAICreateUserProfileRequest::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAICreateUserProfileRequest::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAICreateUserProfileRequest::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

QString OAICreateUserProfileRequest::getUserProfileName() const {
    return m_user_profile_name;
}
void OAICreateUserProfileRequest::setUserProfileName(const QString &user_profile_name) {
    m_user_profile_name = user_profile_name;
    m_user_profile_name_isSet = true;
}

bool OAICreateUserProfileRequest::is_user_profile_name_Set() const{
    return m_user_profile_name_isSet;
}

bool OAICreateUserProfileRequest::is_user_profile_name_Valid() const{
    return m_user_profile_name_isValid;
}

QString OAICreateUserProfileRequest::getSingleSignOnUserIdentifier() const {
    return m_single_sign_on_user_identifier;
}
void OAICreateUserProfileRequest::setSingleSignOnUserIdentifier(const QString &single_sign_on_user_identifier) {
    m_single_sign_on_user_identifier = single_sign_on_user_identifier;
    m_single_sign_on_user_identifier_isSet = true;
}

bool OAICreateUserProfileRequest::is_single_sign_on_user_identifier_Set() const{
    return m_single_sign_on_user_identifier_isSet;
}

bool OAICreateUserProfileRequest::is_single_sign_on_user_identifier_Valid() const{
    return m_single_sign_on_user_identifier_isValid;
}

QString OAICreateUserProfileRequest::getSingleSignOnUserValue() const {
    return m_single_sign_on_user_value;
}
void OAICreateUserProfileRequest::setSingleSignOnUserValue(const QString &single_sign_on_user_value) {
    m_single_sign_on_user_value = single_sign_on_user_value;
    m_single_sign_on_user_value_isSet = true;
}

bool OAICreateUserProfileRequest::is_single_sign_on_user_value_Set() const{
    return m_single_sign_on_user_value_isSet;
}

bool OAICreateUserProfileRequest::is_single_sign_on_user_value_Valid() const{
    return m_single_sign_on_user_value_isValid;
}

QList OAICreateUserProfileRequest::getTags() const {
    return m_tags;
}
void OAICreateUserProfileRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateUserProfileRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateUserProfileRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateUserProfileRequest_UserSettings OAICreateUserProfileRequest::getUserSettings() const {
    return m_user_settings;
}
void OAICreateUserProfileRequest::setUserSettings(const OAICreateUserProfileRequest_UserSettings &user_settings) {
    m_user_settings = user_settings;
    m_user_settings_isSet = true;
}

bool OAICreateUserProfileRequest::is_user_settings_Set() const{
    return m_user_settings_isSet;
}

bool OAICreateUserProfileRequest::is_user_settings_Valid() const{
    return m_user_settings_isValid;
}

bool OAICreateUserProfileRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_sign_on_user_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_sign_on_user_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUserProfileRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_id_isValid && m_user_profile_name_isValid && true;
}

} // namespace OpenAPI
