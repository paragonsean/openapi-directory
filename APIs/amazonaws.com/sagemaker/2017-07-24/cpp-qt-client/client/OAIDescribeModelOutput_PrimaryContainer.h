/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeModelOutput_PrimaryContainer.h
 *
 * 
 */

#ifndef OAIDescribeModelOutput_PrimaryContainer_H
#define OAIDescribeModelOutput_PrimaryContainer_H

#include <QJsonObject>

#include "OAIContainerDefinition_ImageConfig.h"
#include "OAIContainerDefinition_ModelDataSource.h"
#include "OAIContainerDefinition_MultiModelConfig.h"
#include "OAIContainerMode.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContainerDefinition_ImageConfig;
class OAIContainerDefinition_MultiModelConfig;
class OAIContainerDefinition_ModelDataSource;

class OAIDescribeModelOutput_PrimaryContainer : public OAIObject {
public:
    OAIDescribeModelOutput_PrimaryContainer();
    OAIDescribeModelOutput_PrimaryContainer(QString json);
    ~OAIDescribeModelOutput_PrimaryContainer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContainerHostname() const;
    void setContainerHostname(const QString &container_hostname);
    bool is_container_hostname_Set() const;
    bool is_container_hostname_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    OAIContainerDefinition_ImageConfig getImageConfig() const;
    void setImageConfig(const OAIContainerDefinition_ImageConfig &image_config);
    bool is_image_config_Set() const;
    bool is_image_config_Valid() const;

    OAIContainerMode getMode() const;
    void setMode(const OAIContainerMode &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QString getModelDataUrl() const;
    void setModelDataUrl(const QString &model_data_url);
    bool is_model_data_url_Set() const;
    bool is_model_data_url_Valid() const;

    QMap getEnvironment() const;
    void setEnvironment(const QMap &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    QString getModelPackageName() const;
    void setModelPackageName(const QString &model_package_name);
    bool is_model_package_name_Set() const;
    bool is_model_package_name_Valid() const;

    QString getInferenceSpecificationName() const;
    void setInferenceSpecificationName(const QString &inference_specification_name);
    bool is_inference_specification_name_Set() const;
    bool is_inference_specification_name_Valid() const;

    OAIContainerDefinition_MultiModelConfig getMultiModelConfig() const;
    void setMultiModelConfig(const OAIContainerDefinition_MultiModelConfig &multi_model_config);
    bool is_multi_model_config_Set() const;
    bool is_multi_model_config_Valid() const;

    OAIContainerDefinition_ModelDataSource getModelDataSource() const;
    void setModelDataSource(const OAIContainerDefinition_ModelDataSource &model_data_source);
    bool is_model_data_source_Set() const;
    bool is_model_data_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_container_hostname;
    bool m_container_hostname_isSet;
    bool m_container_hostname_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    OAIContainerDefinition_ImageConfig m_image_config;
    bool m_image_config_isSet;
    bool m_image_config_isValid;

    OAIContainerMode m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QString m_model_data_url;
    bool m_model_data_url_isSet;
    bool m_model_data_url_isValid;

    QMap m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    QString m_model_package_name;
    bool m_model_package_name_isSet;
    bool m_model_package_name_isValid;

    QString m_inference_specification_name;
    bool m_inference_specification_name_isSet;
    bool m_inference_specification_name_isValid;

    OAIContainerDefinition_MultiModelConfig m_multi_model_config;
    bool m_multi_model_config_isSet;
    bool m_multi_model_config_isValid;

    OAIContainerDefinition_ModelDataSource m_model_data_source;
    bool m_model_data_source_isSet;
    bool m_model_data_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeModelOutput_PrimaryContainer)

#endif // OAIDescribeModelOutput_PrimaryContainer_H
