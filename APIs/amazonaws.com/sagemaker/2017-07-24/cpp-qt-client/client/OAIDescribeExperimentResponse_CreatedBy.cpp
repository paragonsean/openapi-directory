/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeExperimentResponse_CreatedBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeExperimentResponse_CreatedBy::OAIDescribeExperimentResponse_CreatedBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeExperimentResponse_CreatedBy::OAIDescribeExperimentResponse_CreatedBy() {
    this->initializeModel();
}

OAIDescribeExperimentResponse_CreatedBy::~OAIDescribeExperimentResponse_CreatedBy() {}

void OAIDescribeExperimentResponse_CreatedBy::initializeModel() {

    m_user_profile_arn_isSet = false;
    m_user_profile_arn_isValid = false;

    m_user_profile_name_isSet = false;
    m_user_profile_name_isValid = false;

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_iam_identity_isSet = false;
    m_iam_identity_isValid = false;
}

void OAIDescribeExperimentResponse_CreatedBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeExperimentResponse_CreatedBy::fromJsonObject(QJsonObject json) {

    m_user_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_user_profile_arn, json[QString("UserProfileArn")]);
    m_user_profile_arn_isSet = !json[QString("UserProfileArn")].isNull() && m_user_profile_arn_isValid;

    m_user_profile_name_isValid = ::OpenAPI::fromJsonValue(m_user_profile_name, json[QString("UserProfileName")]);
    m_user_profile_name_isSet = !json[QString("UserProfileName")].isNull() && m_user_profile_name_isValid;

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("DomainId")]);
    m_domain_id_isSet = !json[QString("DomainId")].isNull() && m_domain_id_isValid;

    m_iam_identity_isValid = ::OpenAPI::fromJsonValue(m_iam_identity, json[QString("IamIdentity")]);
    m_iam_identity_isSet = !json[QString("IamIdentity")].isNull() && m_iam_identity_isValid;
}

QString OAIDescribeExperimentResponse_CreatedBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeExperimentResponse_CreatedBy::asJsonObject() const {
    QJsonObject obj;
    if (m_user_profile_arn_isSet) {
        obj.insert(QString("UserProfileArn"), ::OpenAPI::toJsonValue(m_user_profile_arn));
    }
    if (m_user_profile_name_isSet) {
        obj.insert(QString("UserProfileName"), ::OpenAPI::toJsonValue(m_user_profile_name));
    }
    if (m_domain_id_isSet) {
        obj.insert(QString("DomainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_iam_identity.isSet()) {
        obj.insert(QString("IamIdentity"), ::OpenAPI::toJsonValue(m_iam_identity));
    }
    return obj;
}

QString OAIDescribeExperimentResponse_CreatedBy::getUserProfileArn() const {
    return m_user_profile_arn;
}
void OAIDescribeExperimentResponse_CreatedBy::setUserProfileArn(const QString &user_profile_arn) {
    m_user_profile_arn = user_profile_arn;
    m_user_profile_arn_isSet = true;
}

bool OAIDescribeExperimentResponse_CreatedBy::is_user_profile_arn_Set() const{
    return m_user_profile_arn_isSet;
}

bool OAIDescribeExperimentResponse_CreatedBy::is_user_profile_arn_Valid() const{
    return m_user_profile_arn_isValid;
}

QString OAIDescribeExperimentResponse_CreatedBy::getUserProfileName() const {
    return m_user_profile_name;
}
void OAIDescribeExperimentResponse_CreatedBy::setUserProfileName(const QString &user_profile_name) {
    m_user_profile_name = user_profile_name;
    m_user_profile_name_isSet = true;
}

bool OAIDescribeExperimentResponse_CreatedBy::is_user_profile_name_Set() const{
    return m_user_profile_name_isSet;
}

bool OAIDescribeExperimentResponse_CreatedBy::is_user_profile_name_Valid() const{
    return m_user_profile_name_isValid;
}

QString OAIDescribeExperimentResponse_CreatedBy::getDomainId() const {
    return m_domain_id;
}
void OAIDescribeExperimentResponse_CreatedBy::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAIDescribeExperimentResponse_CreatedBy::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAIDescribeExperimentResponse_CreatedBy::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

OAIUserContext_IamIdentity OAIDescribeExperimentResponse_CreatedBy::getIamIdentity() const {
    return m_iam_identity;
}
void OAIDescribeExperimentResponse_CreatedBy::setIamIdentity(const OAIUserContext_IamIdentity &iam_identity) {
    m_iam_identity = iam_identity;
    m_iam_identity_isSet = true;
}

bool OAIDescribeExperimentResponse_CreatedBy::is_iam_identity_Set() const{
    return m_iam_identity_isSet;
}

bool OAIDescribeExperimentResponse_CreatedBy::is_iam_identity_Valid() const{
    return m_iam_identity_isValid;
}

bool OAIDescribeExperimentResponse_CreatedBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeExperimentResponse_CreatedBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
