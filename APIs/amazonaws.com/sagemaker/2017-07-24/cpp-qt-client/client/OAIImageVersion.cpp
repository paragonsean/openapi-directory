/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageVersion::OAIImageVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageVersion::OAIImageVersion() {
    this->initializeModel();
}

OAIImageVersion::~OAIImageVersion() {}

void OAIImageVersion::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_image_arn_isSet = false;
    m_image_arn_isValid = false;

    m_image_version_arn_isSet = false;
    m_image_version_arn_isValid = false;

    m_image_version_status_isSet = false;
    m_image_version_status_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIImageVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageVersion::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_image_arn_isValid = ::OpenAPI::fromJsonValue(m_image_arn, json[QString("ImageArn")]);
    m_image_arn_isSet = !json[QString("ImageArn")].isNull() && m_image_arn_isValid;

    m_image_version_arn_isValid = ::OpenAPI::fromJsonValue(m_image_version_arn, json[QString("ImageVersionArn")]);
    m_image_version_arn_isSet = !json[QString("ImageVersionArn")].isNull() && m_image_version_arn_isValid;

    m_image_version_status_isValid = ::OpenAPI::fromJsonValue(m_image_version_status, json[QString("ImageVersionStatus")]);
    m_image_version_status_isSet = !json[QString("ImageVersionStatus")].isNull() && m_image_version_status_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIImageVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_image_arn_isSet) {
        obj.insert(QString("ImageArn"), ::OpenAPI::toJsonValue(m_image_arn));
    }
    if (m_image_version_arn_isSet) {
        obj.insert(QString("ImageVersionArn"), ::OpenAPI::toJsonValue(m_image_version_arn));
    }
    if (m_image_version_status.isSet()) {
        obj.insert(QString("ImageVersionStatus"), ::OpenAPI::toJsonValue(m_image_version_status));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QDateTime OAIImageVersion::getCreationTime() const {
    return m_creation_time;
}
void OAIImageVersion::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIImageVersion::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIImageVersion::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIImageVersion::getFailureReason() const {
    return m_failure_reason;
}
void OAIImageVersion::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIImageVersion::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIImageVersion::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIImageVersion::getImageArn() const {
    return m_image_arn;
}
void OAIImageVersion::setImageArn(const QString &image_arn) {
    m_image_arn = image_arn;
    m_image_arn_isSet = true;
}

bool OAIImageVersion::is_image_arn_Set() const{
    return m_image_arn_isSet;
}

bool OAIImageVersion::is_image_arn_Valid() const{
    return m_image_arn_isValid;
}

QString OAIImageVersion::getImageVersionArn() const {
    return m_image_version_arn;
}
void OAIImageVersion::setImageVersionArn(const QString &image_version_arn) {
    m_image_version_arn = image_version_arn;
    m_image_version_arn_isSet = true;
}

bool OAIImageVersion::is_image_version_arn_Set() const{
    return m_image_version_arn_isSet;
}

bool OAIImageVersion::is_image_version_arn_Valid() const{
    return m_image_version_arn_isValid;
}

OAIImageVersionStatus OAIImageVersion::getImageVersionStatus() const {
    return m_image_version_status;
}
void OAIImageVersion::setImageVersionStatus(const OAIImageVersionStatus &image_version_status) {
    m_image_version_status = image_version_status;
    m_image_version_status_isSet = true;
}

bool OAIImageVersion::is_image_version_status_Set() const{
    return m_image_version_status_isSet;
}

bool OAIImageVersion::is_image_version_status_Valid() const{
    return m_image_version_status_isValid;
}

QDateTime OAIImageVersion::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIImageVersion::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIImageVersion::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIImageVersion::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

qint32 OAIImageVersion::getVersion() const {
    return m_version;
}
void OAIImageVersion::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIImageVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAIImageVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIImageVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_version_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_time_isValid && m_image_arn_isValid && m_image_version_arn_isValid && m_image_version_status_isValid && m_last_modified_time_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
