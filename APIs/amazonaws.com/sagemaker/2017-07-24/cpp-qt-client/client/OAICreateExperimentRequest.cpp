/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateExperimentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateExperimentRequest::OAICreateExperimentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateExperimentRequest::OAICreateExperimentRequest() {
    this->initializeModel();
}

OAICreateExperimentRequest::~OAICreateExperimentRequest() {}

void OAICreateExperimentRequest::initializeModel() {

    m_experiment_name_isSet = false;
    m_experiment_name_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateExperimentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateExperimentRequest::fromJsonObject(QJsonObject json) {

    m_experiment_name_isValid = ::OpenAPI::fromJsonValue(m_experiment_name, json[QString("ExperimentName")]);
    m_experiment_name_isSet = !json[QString("ExperimentName")].isNull() && m_experiment_name_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateExperimentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateExperimentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_experiment_name_isSet) {
        obj.insert(QString("ExperimentName"), ::OpenAPI::toJsonValue(m_experiment_name));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateExperimentRequest::getExperimentName() const {
    return m_experiment_name;
}
void OAICreateExperimentRequest::setExperimentName(const QString &experiment_name) {
    m_experiment_name = experiment_name;
    m_experiment_name_isSet = true;
}

bool OAICreateExperimentRequest::is_experiment_name_Set() const{
    return m_experiment_name_isSet;
}

bool OAICreateExperimentRequest::is_experiment_name_Valid() const{
    return m_experiment_name_isValid;
}

QString OAICreateExperimentRequest::getDisplayName() const {
    return m_display_name;
}
void OAICreateExperimentRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateExperimentRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateExperimentRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICreateExperimentRequest::getDescription() const {
    return m_description;
}
void OAICreateExperimentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateExperimentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateExperimentRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateExperimentRequest::getTags() const {
    return m_tags;
}
void OAICreateExperimentRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateExperimentRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateExperimentRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateExperimentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_experiment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateExperimentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_experiment_name_isValid && true;
}

} // namespace OpenAPI
