/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductionVariantSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductionVariantSummary::OAIProductionVariantSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductionVariantSummary::OAIProductionVariantSummary() {
    this->initializeModel();
}

OAIProductionVariantSummary::~OAIProductionVariantSummary() {}

void OAIProductionVariantSummary::initializeModel() {

    m_variant_name_isSet = false;
    m_variant_name_isValid = false;

    m_deployed_images_isSet = false;
    m_deployed_images_isValid = false;

    m_current_weight_isSet = false;
    m_current_weight_isValid = false;

    m_desired_weight_isSet = false;
    m_desired_weight_isValid = false;

    m_current_instance_count_isSet = false;
    m_current_instance_count_isValid = false;

    m_desired_instance_count_isSet = false;
    m_desired_instance_count_isValid = false;

    m_variant_status_isSet = false;
    m_variant_status_isValid = false;

    m_current_serverless_config_isSet = false;
    m_current_serverless_config_isValid = false;

    m_desired_serverless_config_isSet = false;
    m_desired_serverless_config_isValid = false;
}

void OAIProductionVariantSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductionVariantSummary::fromJsonObject(QJsonObject json) {

    m_variant_name_isValid = ::OpenAPI::fromJsonValue(m_variant_name, json[QString("VariantName")]);
    m_variant_name_isSet = !json[QString("VariantName")].isNull() && m_variant_name_isValid;

    m_deployed_images_isValid = ::OpenAPI::fromJsonValue(m_deployed_images, json[QString("DeployedImages")]);
    m_deployed_images_isSet = !json[QString("DeployedImages")].isNull() && m_deployed_images_isValid;

    m_current_weight_isValid = ::OpenAPI::fromJsonValue(m_current_weight, json[QString("CurrentWeight")]);
    m_current_weight_isSet = !json[QString("CurrentWeight")].isNull() && m_current_weight_isValid;

    m_desired_weight_isValid = ::OpenAPI::fromJsonValue(m_desired_weight, json[QString("DesiredWeight")]);
    m_desired_weight_isSet = !json[QString("DesiredWeight")].isNull() && m_desired_weight_isValid;

    m_current_instance_count_isValid = ::OpenAPI::fromJsonValue(m_current_instance_count, json[QString("CurrentInstanceCount")]);
    m_current_instance_count_isSet = !json[QString("CurrentInstanceCount")].isNull() && m_current_instance_count_isValid;

    m_desired_instance_count_isValid = ::OpenAPI::fromJsonValue(m_desired_instance_count, json[QString("DesiredInstanceCount")]);
    m_desired_instance_count_isSet = !json[QString("DesiredInstanceCount")].isNull() && m_desired_instance_count_isValid;

    m_variant_status_isValid = ::OpenAPI::fromJsonValue(m_variant_status, json[QString("VariantStatus")]);
    m_variant_status_isSet = !json[QString("VariantStatus")].isNull() && m_variant_status_isValid;

    m_current_serverless_config_isValid = ::OpenAPI::fromJsonValue(m_current_serverless_config, json[QString("CurrentServerlessConfig")]);
    m_current_serverless_config_isSet = !json[QString("CurrentServerlessConfig")].isNull() && m_current_serverless_config_isValid;

    m_desired_serverless_config_isValid = ::OpenAPI::fromJsonValue(m_desired_serverless_config, json[QString("DesiredServerlessConfig")]);
    m_desired_serverless_config_isSet = !json[QString("DesiredServerlessConfig")].isNull() && m_desired_serverless_config_isValid;
}

QString OAIProductionVariantSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductionVariantSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_variant_name_isSet) {
        obj.insert(QString("VariantName"), ::OpenAPI::toJsonValue(m_variant_name));
    }
    if (m_deployed_images.isSet()) {
        obj.insert(QString("DeployedImages"), ::OpenAPI::toJsonValue(m_deployed_images));
    }
    if (m_current_weight_isSet) {
        obj.insert(QString("CurrentWeight"), ::OpenAPI::toJsonValue(m_current_weight));
    }
    if (m_desired_weight_isSet) {
        obj.insert(QString("DesiredWeight"), ::OpenAPI::toJsonValue(m_desired_weight));
    }
    if (m_current_instance_count_isSet) {
        obj.insert(QString("CurrentInstanceCount"), ::OpenAPI::toJsonValue(m_current_instance_count));
    }
    if (m_desired_instance_count_isSet) {
        obj.insert(QString("DesiredInstanceCount"), ::OpenAPI::toJsonValue(m_desired_instance_count));
    }
    if (m_variant_status.isSet()) {
        obj.insert(QString("VariantStatus"), ::OpenAPI::toJsonValue(m_variant_status));
    }
    if (m_current_serverless_config.isSet()) {
        obj.insert(QString("CurrentServerlessConfig"), ::OpenAPI::toJsonValue(m_current_serverless_config));
    }
    if (m_desired_serverless_config.isSet()) {
        obj.insert(QString("DesiredServerlessConfig"), ::OpenAPI::toJsonValue(m_desired_serverless_config));
    }
    return obj;
}

QString OAIProductionVariantSummary::getVariantName() const {
    return m_variant_name;
}
void OAIProductionVariantSummary::setVariantName(const QString &variant_name) {
    m_variant_name = variant_name;
    m_variant_name_isSet = true;
}

bool OAIProductionVariantSummary::is_variant_name_Set() const{
    return m_variant_name_isSet;
}

bool OAIProductionVariantSummary::is_variant_name_Valid() const{
    return m_variant_name_isValid;
}

QList OAIProductionVariantSummary::getDeployedImages() const {
    return m_deployed_images;
}
void OAIProductionVariantSummary::setDeployedImages(const QList &deployed_images) {
    m_deployed_images = deployed_images;
    m_deployed_images_isSet = true;
}

bool OAIProductionVariantSummary::is_deployed_images_Set() const{
    return m_deployed_images_isSet;
}

bool OAIProductionVariantSummary::is_deployed_images_Valid() const{
    return m_deployed_images_isValid;
}

float OAIProductionVariantSummary::getCurrentWeight() const {
    return m_current_weight;
}
void OAIProductionVariantSummary::setCurrentWeight(const float &current_weight) {
    m_current_weight = current_weight;
    m_current_weight_isSet = true;
}

bool OAIProductionVariantSummary::is_current_weight_Set() const{
    return m_current_weight_isSet;
}

bool OAIProductionVariantSummary::is_current_weight_Valid() const{
    return m_current_weight_isValid;
}

float OAIProductionVariantSummary::getDesiredWeight() const {
    return m_desired_weight;
}
void OAIProductionVariantSummary::setDesiredWeight(const float &desired_weight) {
    m_desired_weight = desired_weight;
    m_desired_weight_isSet = true;
}

bool OAIProductionVariantSummary::is_desired_weight_Set() const{
    return m_desired_weight_isSet;
}

bool OAIProductionVariantSummary::is_desired_weight_Valid() const{
    return m_desired_weight_isValid;
}

qint32 OAIProductionVariantSummary::getCurrentInstanceCount() const {
    return m_current_instance_count;
}
void OAIProductionVariantSummary::setCurrentInstanceCount(const qint32 &current_instance_count) {
    m_current_instance_count = current_instance_count;
    m_current_instance_count_isSet = true;
}

bool OAIProductionVariantSummary::is_current_instance_count_Set() const{
    return m_current_instance_count_isSet;
}

bool OAIProductionVariantSummary::is_current_instance_count_Valid() const{
    return m_current_instance_count_isValid;
}

qint32 OAIProductionVariantSummary::getDesiredInstanceCount() const {
    return m_desired_instance_count;
}
void OAIProductionVariantSummary::setDesiredInstanceCount(const qint32 &desired_instance_count) {
    m_desired_instance_count = desired_instance_count;
    m_desired_instance_count_isSet = true;
}

bool OAIProductionVariantSummary::is_desired_instance_count_Set() const{
    return m_desired_instance_count_isSet;
}

bool OAIProductionVariantSummary::is_desired_instance_count_Valid() const{
    return m_desired_instance_count_isValid;
}

QList OAIProductionVariantSummary::getVariantStatus() const {
    return m_variant_status;
}
void OAIProductionVariantSummary::setVariantStatus(const QList &variant_status) {
    m_variant_status = variant_status;
    m_variant_status_isSet = true;
}

bool OAIProductionVariantSummary::is_variant_status_Set() const{
    return m_variant_status_isSet;
}

bool OAIProductionVariantSummary::is_variant_status_Valid() const{
    return m_variant_status_isValid;
}

OAIPendingProductionVariantSummary_CurrentServerlessConfig OAIProductionVariantSummary::getCurrentServerlessConfig() const {
    return m_current_serverless_config;
}
void OAIProductionVariantSummary::setCurrentServerlessConfig(const OAIPendingProductionVariantSummary_CurrentServerlessConfig &current_serverless_config) {
    m_current_serverless_config = current_serverless_config;
    m_current_serverless_config_isSet = true;
}

bool OAIProductionVariantSummary::is_current_serverless_config_Set() const{
    return m_current_serverless_config_isSet;
}

bool OAIProductionVariantSummary::is_current_serverless_config_Valid() const{
    return m_current_serverless_config_isValid;
}

OAIProductionVariantSummary_DesiredServerlessConfig OAIProductionVariantSummary::getDesiredServerlessConfig() const {
    return m_desired_serverless_config;
}
void OAIProductionVariantSummary::setDesiredServerlessConfig(const OAIProductionVariantSummary_DesiredServerlessConfig &desired_serverless_config) {
    m_desired_serverless_config = desired_serverless_config;
    m_desired_serverless_config_isSet = true;
}

bool OAIProductionVariantSummary::is_desired_serverless_config_Set() const{
    return m_desired_serverless_config_isSet;
}

bool OAIProductionVariantSummary::is_desired_serverless_config_Valid() const{
    return m_desired_serverless_config_isValid;
}

bool OAIProductionVariantSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_variant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployed_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_serverless_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_serverless_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductionVariantSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_variant_name_isValid && true;
}

} // namespace OpenAPI
