/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAutoMLJobRequest_AutoMLJobConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAutoMLJobRequest_AutoMLJobConfig::OAICreateAutoMLJobRequest_AutoMLJobConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAutoMLJobRequest_AutoMLJobConfig::OAICreateAutoMLJobRequest_AutoMLJobConfig() {
    this->initializeModel();
}

OAICreateAutoMLJobRequest_AutoMLJobConfig::~OAICreateAutoMLJobRequest_AutoMLJobConfig() {}

void OAICreateAutoMLJobRequest_AutoMLJobConfig::initializeModel() {

    m_completion_criteria_isSet = false;
    m_completion_criteria_isValid = false;

    m_security_config_isSet = false;
    m_security_config_isValid = false;

    m_data_split_config_isSet = false;
    m_data_split_config_isValid = false;

    m_candidate_generation_config_isSet = false;
    m_candidate_generation_config_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;
}

void OAICreateAutoMLJobRequest_AutoMLJobConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAutoMLJobRequest_AutoMLJobConfig::fromJsonObject(QJsonObject json) {

    m_completion_criteria_isValid = ::OpenAPI::fromJsonValue(m_completion_criteria, json[QString("CompletionCriteria")]);
    m_completion_criteria_isSet = !json[QString("CompletionCriteria")].isNull() && m_completion_criteria_isValid;

    m_security_config_isValid = ::OpenAPI::fromJsonValue(m_security_config, json[QString("SecurityConfig")]);
    m_security_config_isSet = !json[QString("SecurityConfig")].isNull() && m_security_config_isValid;

    m_data_split_config_isValid = ::OpenAPI::fromJsonValue(m_data_split_config, json[QString("DataSplitConfig")]);
    m_data_split_config_isSet = !json[QString("DataSplitConfig")].isNull() && m_data_split_config_isValid;

    m_candidate_generation_config_isValid = ::OpenAPI::fromJsonValue(m_candidate_generation_config, json[QString("CandidateGenerationConfig")]);
    m_candidate_generation_config_isSet = !json[QString("CandidateGenerationConfig")].isNull() && m_candidate_generation_config_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;
}

QString OAICreateAutoMLJobRequest_AutoMLJobConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAutoMLJobRequest_AutoMLJobConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_criteria.isSet()) {
        obj.insert(QString("CompletionCriteria"), ::OpenAPI::toJsonValue(m_completion_criteria));
    }
    if (m_security_config.isSet()) {
        obj.insert(QString("SecurityConfig"), ::OpenAPI::toJsonValue(m_security_config));
    }
    if (m_data_split_config.isSet()) {
        obj.insert(QString("DataSplitConfig"), ::OpenAPI::toJsonValue(m_data_split_config));
    }
    if (m_candidate_generation_config.isSet()) {
        obj.insert(QString("CandidateGenerationConfig"), ::OpenAPI::toJsonValue(m_candidate_generation_config));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    return obj;
}

OAIAutoMLJobConfig_CompletionCriteria OAICreateAutoMLJobRequest_AutoMLJobConfig::getCompletionCriteria() const {
    return m_completion_criteria;
}
void OAICreateAutoMLJobRequest_AutoMLJobConfig::setCompletionCriteria(const OAIAutoMLJobConfig_CompletionCriteria &completion_criteria) {
    m_completion_criteria = completion_criteria;
    m_completion_criteria_isSet = true;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_completion_criteria_Set() const{
    return m_completion_criteria_isSet;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_completion_criteria_Valid() const{
    return m_completion_criteria_isValid;
}

OAICreateAutoMLJobV2Request_SecurityConfig OAICreateAutoMLJobRequest_AutoMLJobConfig::getSecurityConfig() const {
    return m_security_config;
}
void OAICreateAutoMLJobRequest_AutoMLJobConfig::setSecurityConfig(const OAICreateAutoMLJobV2Request_SecurityConfig &security_config) {
    m_security_config = security_config;
    m_security_config_isSet = true;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_security_config_Set() const{
    return m_security_config_isSet;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_security_config_Valid() const{
    return m_security_config_isValid;
}

OAIAutoMLJobConfig_DataSplitConfig OAICreateAutoMLJobRequest_AutoMLJobConfig::getDataSplitConfig() const {
    return m_data_split_config;
}
void OAICreateAutoMLJobRequest_AutoMLJobConfig::setDataSplitConfig(const OAIAutoMLJobConfig_DataSplitConfig &data_split_config) {
    m_data_split_config = data_split_config;
    m_data_split_config_isSet = true;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_data_split_config_Set() const{
    return m_data_split_config_isSet;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_data_split_config_Valid() const{
    return m_data_split_config_isValid;
}

OAIAutoMLJobConfig_CandidateGenerationConfig OAICreateAutoMLJobRequest_AutoMLJobConfig::getCandidateGenerationConfig() const {
    return m_candidate_generation_config;
}
void OAICreateAutoMLJobRequest_AutoMLJobConfig::setCandidateGenerationConfig(const OAIAutoMLJobConfig_CandidateGenerationConfig &candidate_generation_config) {
    m_candidate_generation_config = candidate_generation_config;
    m_candidate_generation_config_isSet = true;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_candidate_generation_config_Set() const{
    return m_candidate_generation_config_isSet;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_candidate_generation_config_Valid() const{
    return m_candidate_generation_config_isValid;
}

OAIAutoMLMode OAICreateAutoMLJobRequest_AutoMLJobConfig::getMode() const {
    return m_mode;
}
void OAICreateAutoMLJobRequest_AutoMLJobConfig::setMode(const OAIAutoMLMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_split_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_generation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAutoMLJobRequest_AutoMLJobConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
