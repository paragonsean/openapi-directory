/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate() {
    this->initializeModel();
}

OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::~OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate() {}

void OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::initializeModel() {

    m_domain_execution_role_arn_isSet = false;
    m_domain_execution_role_arn_isValid = false;

    m_default_resource_spec_isSet = false;
    m_default_resource_spec_isValid = false;

    m_r_studio_connect_url_isSet = false;
    m_r_studio_connect_url_isValid = false;

    m_r_studio_package_manager_url_isSet = false;
    m_r_studio_package_manager_url_isValid = false;
}

void OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::fromJsonObject(QJsonObject json) {

    m_domain_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_domain_execution_role_arn, json[QString("DomainExecutionRoleArn")]);
    m_domain_execution_role_arn_isSet = !json[QString("DomainExecutionRoleArn")].isNull() && m_domain_execution_role_arn_isValid;

    m_default_resource_spec_isValid = ::OpenAPI::fromJsonValue(m_default_resource_spec, json[QString("DefaultResourceSpec")]);
    m_default_resource_spec_isSet = !json[QString("DefaultResourceSpec")].isNull() && m_default_resource_spec_isValid;

    m_r_studio_connect_url_isValid = ::OpenAPI::fromJsonValue(m_r_studio_connect_url, json[QString("RStudioConnectUrl")]);
    m_r_studio_connect_url_isSet = !json[QString("RStudioConnectUrl")].isNull() && m_r_studio_connect_url_isValid;

    m_r_studio_package_manager_url_isValid = ::OpenAPI::fromJsonValue(m_r_studio_package_manager_url, json[QString("RStudioPackageManagerUrl")]);
    m_r_studio_package_manager_url_isSet = !json[QString("RStudioPackageManagerUrl")].isNull() && m_r_studio_package_manager_url_isValid;
}

QString OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_execution_role_arn_isSet) {
        obj.insert(QString("DomainExecutionRoleArn"), ::OpenAPI::toJsonValue(m_domain_execution_role_arn));
    }
    if (m_default_resource_spec.isSet()) {
        obj.insert(QString("DefaultResourceSpec"), ::OpenAPI::toJsonValue(m_default_resource_spec));
    }
    if (m_r_studio_connect_url_isSet) {
        obj.insert(QString("RStudioConnectUrl"), ::OpenAPI::toJsonValue(m_r_studio_connect_url));
    }
    if (m_r_studio_package_manager_url_isSet) {
        obj.insert(QString("RStudioPackageManagerUrl"), ::OpenAPI::toJsonValue(m_r_studio_package_manager_url));
    }
    return obj;
}

QString OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::getDomainExecutionRoleArn() const {
    return m_domain_execution_role_arn;
}
void OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::setDomainExecutionRoleArn(const QString &domain_execution_role_arn) {
    m_domain_execution_role_arn = domain_execution_role_arn;
    m_domain_execution_role_arn_isSet = true;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::is_domain_execution_role_arn_Set() const{
    return m_domain_execution_role_arn_isSet;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::is_domain_execution_role_arn_Valid() const{
    return m_domain_execution_role_arn_isValid;
}

OAIResourceSpec OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::getDefaultResourceSpec() const {
    return m_default_resource_spec;
}
void OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::setDefaultResourceSpec(const OAIResourceSpec &default_resource_spec) {
    m_default_resource_spec = default_resource_spec;
    m_default_resource_spec_isSet = true;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::is_default_resource_spec_Set() const{
    return m_default_resource_spec_isSet;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::is_default_resource_spec_Valid() const{
    return m_default_resource_spec_isValid;
}

QString OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::getRStudioConnectUrl() const {
    return m_r_studio_connect_url;
}
void OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::setRStudioConnectUrl(const QString &r_studio_connect_url) {
    m_r_studio_connect_url = r_studio_connect_url;
    m_r_studio_connect_url_isSet = true;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::is_r_studio_connect_url_Set() const{
    return m_r_studio_connect_url_isSet;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::is_r_studio_connect_url_Valid() const{
    return m_r_studio_connect_url_isValid;
}

QString OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::getRStudioPackageManagerUrl() const {
    return m_r_studio_package_manager_url;
}
void OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::setRStudioPackageManagerUrl(const QString &r_studio_package_manager_url) {
    m_r_studio_package_manager_url = r_studio_package_manager_url;
    m_r_studio_package_manager_url_isSet = true;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::is_r_studio_package_manager_url_Set() const{
    return m_r_studio_package_manager_url_isSet;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::is_r_studio_package_manager_url_Valid() const{
    return m_r_studio_package_manager_url_isValid;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_resource_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_studio_connect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_studio_package_manager_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainSettingsForUpdate_RStudioServerProDomainSettingsForUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_execution_role_arn_isValid && true;
}

} // namespace OpenAPI
