/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProjectInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProjectInput::OAIUpdateProjectInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProjectInput::OAIUpdateProjectInput() {
    this->initializeModel();
}

OAIUpdateProjectInput::~OAIUpdateProjectInput() {}

void OAIUpdateProjectInput::initializeModel() {

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_project_description_isSet = false;
    m_project_description_isValid = false;

    m_service_catalog_provisioning_update_details_isSet = false;
    m_service_catalog_provisioning_update_details_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateProjectInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProjectInput::fromJsonObject(QJsonObject json) {

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("ProjectName")]);
    m_project_name_isSet = !json[QString("ProjectName")].isNull() && m_project_name_isValid;

    m_project_description_isValid = ::OpenAPI::fromJsonValue(m_project_description, json[QString("ProjectDescription")]);
    m_project_description_isSet = !json[QString("ProjectDescription")].isNull() && m_project_description_isValid;

    m_service_catalog_provisioning_update_details_isValid = ::OpenAPI::fromJsonValue(m_service_catalog_provisioning_update_details, json[QString("ServiceCatalogProvisioningUpdateDetails")]);
    m_service_catalog_provisioning_update_details_isSet = !json[QString("ServiceCatalogProvisioningUpdateDetails")].isNull() && m_service_catalog_provisioning_update_details_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateProjectInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProjectInput::asJsonObject() const {
    QJsonObject obj;
    if (m_project_name_isSet) {
        obj.insert(QString("ProjectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_project_description_isSet) {
        obj.insert(QString("ProjectDescription"), ::OpenAPI::toJsonValue(m_project_description));
    }
    if (m_service_catalog_provisioning_update_details.isSet()) {
        obj.insert(QString("ServiceCatalogProvisioningUpdateDetails"), ::OpenAPI::toJsonValue(m_service_catalog_provisioning_update_details));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIUpdateProjectInput::getProjectName() const {
    return m_project_name;
}
void OAIUpdateProjectInput::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIUpdateProjectInput::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIUpdateProjectInput::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QString OAIUpdateProjectInput::getProjectDescription() const {
    return m_project_description;
}
void OAIUpdateProjectInput::setProjectDescription(const QString &project_description) {
    m_project_description = project_description;
    m_project_description_isSet = true;
}

bool OAIUpdateProjectInput::is_project_description_Set() const{
    return m_project_description_isSet;
}

bool OAIUpdateProjectInput::is_project_description_Valid() const{
    return m_project_description_isValid;
}

OAIUpdateProjectInput_ServiceCatalogProvisioningUpdateDetails OAIUpdateProjectInput::getServiceCatalogProvisioningUpdateDetails() const {
    return m_service_catalog_provisioning_update_details;
}
void OAIUpdateProjectInput::setServiceCatalogProvisioningUpdateDetails(const OAIUpdateProjectInput_ServiceCatalogProvisioningUpdateDetails &service_catalog_provisioning_update_details) {
    m_service_catalog_provisioning_update_details = service_catalog_provisioning_update_details;
    m_service_catalog_provisioning_update_details_isSet = true;
}

bool OAIUpdateProjectInput::is_service_catalog_provisioning_update_details_Set() const{
    return m_service_catalog_provisioning_update_details_isSet;
}

bool OAIUpdateProjectInput::is_service_catalog_provisioning_update_details_Valid() const{
    return m_service_catalog_provisioning_update_details_isValid;
}

QList OAIUpdateProjectInput::getTags() const {
    return m_tags;
}
void OAIUpdateProjectInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateProjectInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateProjectInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateProjectInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_catalog_provisioning_update_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProjectInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_name_isValid && true;
}

} // namespace OpenAPI
