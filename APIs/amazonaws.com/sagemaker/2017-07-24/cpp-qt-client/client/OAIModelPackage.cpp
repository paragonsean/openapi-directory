/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelPackage::OAIModelPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelPackage::OAIModelPackage() {
    this->initializeModel();
}

OAIModelPackage::~OAIModelPackage() {}

void OAIModelPackage::initializeModel() {

    m_model_package_name_isSet = false;
    m_model_package_name_isValid = false;

    m_model_package_group_name_isSet = false;
    m_model_package_group_name_isValid = false;

    m_model_package_version_isSet = false;
    m_model_package_version_isValid = false;

    m_model_package_arn_isSet = false;
    m_model_package_arn_isValid = false;

    m_model_package_description_isSet = false;
    m_model_package_description_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_inference_specification_isSet = false;
    m_inference_specification_isValid = false;

    m_source_algorithm_specification_isSet = false;
    m_source_algorithm_specification_isValid = false;

    m_validation_specification_isSet = false;
    m_validation_specification_isValid = false;

    m_model_package_status_isSet = false;
    m_model_package_status_isValid = false;

    m_model_package_status_details_isSet = false;
    m_model_package_status_details_isValid = false;

    m_certify_for_marketplace_isSet = false;
    m_certify_for_marketplace_isValid = false;

    m_model_approval_status_isSet = false;
    m_model_approval_status_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_metadata_properties_isSet = false;
    m_metadata_properties_isValid = false;

    m_model_metrics_isSet = false;
    m_model_metrics_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_approval_description_isSet = false;
    m_approval_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_sample_payload_url_isSet = false;
    m_sample_payload_url_isValid = false;

    m_additional_inference_specifications_isSet = false;
    m_additional_inference_specifications_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_customer_metadata_properties_isSet = false;
    m_customer_metadata_properties_isValid = false;

    m_drift_check_baselines_isSet = false;
    m_drift_check_baselines_isValid = false;
}

void OAIModelPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelPackage::fromJsonObject(QJsonObject json) {

    m_model_package_name_isValid = ::OpenAPI::fromJsonValue(m_model_package_name, json[QString("ModelPackageName")]);
    m_model_package_name_isSet = !json[QString("ModelPackageName")].isNull() && m_model_package_name_isValid;

    m_model_package_group_name_isValid = ::OpenAPI::fromJsonValue(m_model_package_group_name, json[QString("ModelPackageGroupName")]);
    m_model_package_group_name_isSet = !json[QString("ModelPackageGroupName")].isNull() && m_model_package_group_name_isValid;

    m_model_package_version_isValid = ::OpenAPI::fromJsonValue(m_model_package_version, json[QString("ModelPackageVersion")]);
    m_model_package_version_isSet = !json[QString("ModelPackageVersion")].isNull() && m_model_package_version_isValid;

    m_model_package_arn_isValid = ::OpenAPI::fromJsonValue(m_model_package_arn, json[QString("ModelPackageArn")]);
    m_model_package_arn_isSet = !json[QString("ModelPackageArn")].isNull() && m_model_package_arn_isValid;

    m_model_package_description_isValid = ::OpenAPI::fromJsonValue(m_model_package_description, json[QString("ModelPackageDescription")]);
    m_model_package_description_isSet = !json[QString("ModelPackageDescription")].isNull() && m_model_package_description_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_inference_specification_isValid = ::OpenAPI::fromJsonValue(m_inference_specification, json[QString("InferenceSpecification")]);
    m_inference_specification_isSet = !json[QString("InferenceSpecification")].isNull() && m_inference_specification_isValid;

    m_source_algorithm_specification_isValid = ::OpenAPI::fromJsonValue(m_source_algorithm_specification, json[QString("SourceAlgorithmSpecification")]);
    m_source_algorithm_specification_isSet = !json[QString("SourceAlgorithmSpecification")].isNull() && m_source_algorithm_specification_isValid;

    m_validation_specification_isValid = ::OpenAPI::fromJsonValue(m_validation_specification, json[QString("ValidationSpecification")]);
    m_validation_specification_isSet = !json[QString("ValidationSpecification")].isNull() && m_validation_specification_isValid;

    m_model_package_status_isValid = ::OpenAPI::fromJsonValue(m_model_package_status, json[QString("ModelPackageStatus")]);
    m_model_package_status_isSet = !json[QString("ModelPackageStatus")].isNull() && m_model_package_status_isValid;

    m_model_package_status_details_isValid = ::OpenAPI::fromJsonValue(m_model_package_status_details, json[QString("ModelPackageStatusDetails")]);
    m_model_package_status_details_isSet = !json[QString("ModelPackageStatusDetails")].isNull() && m_model_package_status_details_isValid;

    m_certify_for_marketplace_isValid = ::OpenAPI::fromJsonValue(m_certify_for_marketplace, json[QString("CertifyForMarketplace")]);
    m_certify_for_marketplace_isSet = !json[QString("CertifyForMarketplace")].isNull() && m_certify_for_marketplace_isValid;

    m_model_approval_status_isValid = ::OpenAPI::fromJsonValue(m_model_approval_status, json[QString("ModelApprovalStatus")]);
    m_model_approval_status_isSet = !json[QString("ModelApprovalStatus")].isNull() && m_model_approval_status_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_metadata_properties_isValid = ::OpenAPI::fromJsonValue(m_metadata_properties, json[QString("MetadataProperties")]);
    m_metadata_properties_isSet = !json[QString("MetadataProperties")].isNull() && m_metadata_properties_isValid;

    m_model_metrics_isValid = ::OpenAPI::fromJsonValue(m_model_metrics, json[QString("ModelMetrics")]);
    m_model_metrics_isSet = !json[QString("ModelMetrics")].isNull() && m_model_metrics_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_approval_description_isValid = ::OpenAPI::fromJsonValue(m_approval_description, json[QString("ApprovalDescription")]);
    m_approval_description_isSet = !json[QString("ApprovalDescription")].isNull() && m_approval_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("Task")]);
    m_task_isSet = !json[QString("Task")].isNull() && m_task_isValid;

    m_sample_payload_url_isValid = ::OpenAPI::fromJsonValue(m_sample_payload_url, json[QString("SamplePayloadUrl")]);
    m_sample_payload_url_isSet = !json[QString("SamplePayloadUrl")].isNull() && m_sample_payload_url_isValid;

    m_additional_inference_specifications_isValid = ::OpenAPI::fromJsonValue(m_additional_inference_specifications, json[QString("AdditionalInferenceSpecifications")]);
    m_additional_inference_specifications_isSet = !json[QString("AdditionalInferenceSpecifications")].isNull() && m_additional_inference_specifications_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_customer_metadata_properties_isValid = ::OpenAPI::fromJsonValue(m_customer_metadata_properties, json[QString("CustomerMetadataProperties")]);
    m_customer_metadata_properties_isSet = !json[QString("CustomerMetadataProperties")].isNull() && m_customer_metadata_properties_isValid;

    m_drift_check_baselines_isValid = ::OpenAPI::fromJsonValue(m_drift_check_baselines, json[QString("DriftCheckBaselines")]);
    m_drift_check_baselines_isSet = !json[QString("DriftCheckBaselines")].isNull() && m_drift_check_baselines_isValid;
}

QString OAIModelPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_model_package_name_isSet) {
        obj.insert(QString("ModelPackageName"), ::OpenAPI::toJsonValue(m_model_package_name));
    }
    if (m_model_package_group_name_isSet) {
        obj.insert(QString("ModelPackageGroupName"), ::OpenAPI::toJsonValue(m_model_package_group_name));
    }
    if (m_model_package_version_isSet) {
        obj.insert(QString("ModelPackageVersion"), ::OpenAPI::toJsonValue(m_model_package_version));
    }
    if (m_model_package_arn_isSet) {
        obj.insert(QString("ModelPackageArn"), ::OpenAPI::toJsonValue(m_model_package_arn));
    }
    if (m_model_package_description_isSet) {
        obj.insert(QString("ModelPackageDescription"), ::OpenAPI::toJsonValue(m_model_package_description));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_inference_specification.isSet()) {
        obj.insert(QString("InferenceSpecification"), ::OpenAPI::toJsonValue(m_inference_specification));
    }
    if (m_source_algorithm_specification.isSet()) {
        obj.insert(QString("SourceAlgorithmSpecification"), ::OpenAPI::toJsonValue(m_source_algorithm_specification));
    }
    if (m_validation_specification.isSet()) {
        obj.insert(QString("ValidationSpecification"), ::OpenAPI::toJsonValue(m_validation_specification));
    }
    if (m_model_package_status.isSet()) {
        obj.insert(QString("ModelPackageStatus"), ::OpenAPI::toJsonValue(m_model_package_status));
    }
    if (m_model_package_status_details.isSet()) {
        obj.insert(QString("ModelPackageStatusDetails"), ::OpenAPI::toJsonValue(m_model_package_status_details));
    }
    if (m_certify_for_marketplace_isSet) {
        obj.insert(QString("CertifyForMarketplace"), ::OpenAPI::toJsonValue(m_certify_for_marketplace));
    }
    if (m_model_approval_status.isSet()) {
        obj.insert(QString("ModelApprovalStatus"), ::OpenAPI::toJsonValue(m_model_approval_status));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_metadata_properties.isSet()) {
        obj.insert(QString("MetadataProperties"), ::OpenAPI::toJsonValue(m_metadata_properties));
    }
    if (m_model_metrics.isSet()) {
        obj.insert(QString("ModelMetrics"), ::OpenAPI::toJsonValue(m_model_metrics));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_last_modified_by.isSet()) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_approval_description_isSet) {
        obj.insert(QString("ApprovalDescription"), ::OpenAPI::toJsonValue(m_approval_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_task_isSet) {
        obj.insert(QString("Task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_sample_payload_url_isSet) {
        obj.insert(QString("SamplePayloadUrl"), ::OpenAPI::toJsonValue(m_sample_payload_url));
    }
    if (m_additional_inference_specifications.isSet()) {
        obj.insert(QString("AdditionalInferenceSpecifications"), ::OpenAPI::toJsonValue(m_additional_inference_specifications));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_customer_metadata_properties.isSet()) {
        obj.insert(QString("CustomerMetadataProperties"), ::OpenAPI::toJsonValue(m_customer_metadata_properties));
    }
    if (m_drift_check_baselines.isSet()) {
        obj.insert(QString("DriftCheckBaselines"), ::OpenAPI::toJsonValue(m_drift_check_baselines));
    }
    return obj;
}

QString OAIModelPackage::getModelPackageName() const {
    return m_model_package_name;
}
void OAIModelPackage::setModelPackageName(const QString &model_package_name) {
    m_model_package_name = model_package_name;
    m_model_package_name_isSet = true;
}

bool OAIModelPackage::is_model_package_name_Set() const{
    return m_model_package_name_isSet;
}

bool OAIModelPackage::is_model_package_name_Valid() const{
    return m_model_package_name_isValid;
}

QString OAIModelPackage::getModelPackageGroupName() const {
    return m_model_package_group_name;
}
void OAIModelPackage::setModelPackageGroupName(const QString &model_package_group_name) {
    m_model_package_group_name = model_package_group_name;
    m_model_package_group_name_isSet = true;
}

bool OAIModelPackage::is_model_package_group_name_Set() const{
    return m_model_package_group_name_isSet;
}

bool OAIModelPackage::is_model_package_group_name_Valid() const{
    return m_model_package_group_name_isValid;
}

qint32 OAIModelPackage::getModelPackageVersion() const {
    return m_model_package_version;
}
void OAIModelPackage::setModelPackageVersion(const qint32 &model_package_version) {
    m_model_package_version = model_package_version;
    m_model_package_version_isSet = true;
}

bool OAIModelPackage::is_model_package_version_Set() const{
    return m_model_package_version_isSet;
}

bool OAIModelPackage::is_model_package_version_Valid() const{
    return m_model_package_version_isValid;
}

QString OAIModelPackage::getModelPackageArn() const {
    return m_model_package_arn;
}
void OAIModelPackage::setModelPackageArn(const QString &model_package_arn) {
    m_model_package_arn = model_package_arn;
    m_model_package_arn_isSet = true;
}

bool OAIModelPackage::is_model_package_arn_Set() const{
    return m_model_package_arn_isSet;
}

bool OAIModelPackage::is_model_package_arn_Valid() const{
    return m_model_package_arn_isValid;
}

QString OAIModelPackage::getModelPackageDescription() const {
    return m_model_package_description;
}
void OAIModelPackage::setModelPackageDescription(const QString &model_package_description) {
    m_model_package_description = model_package_description;
    m_model_package_description_isSet = true;
}

bool OAIModelPackage::is_model_package_description_Set() const{
    return m_model_package_description_isSet;
}

bool OAIModelPackage::is_model_package_description_Valid() const{
    return m_model_package_description_isValid;
}

QDateTime OAIModelPackage::getCreationTime() const {
    return m_creation_time;
}
void OAIModelPackage::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIModelPackage::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIModelPackage::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIModelPackage_InferenceSpecification OAIModelPackage::getInferenceSpecification() const {
    return m_inference_specification;
}
void OAIModelPackage::setInferenceSpecification(const OAIModelPackage_InferenceSpecification &inference_specification) {
    m_inference_specification = inference_specification;
    m_inference_specification_isSet = true;
}

bool OAIModelPackage::is_inference_specification_Set() const{
    return m_inference_specification_isSet;
}

bool OAIModelPackage::is_inference_specification_Valid() const{
    return m_inference_specification_isValid;
}

OAIModelPackage_SourceAlgorithmSpecification OAIModelPackage::getSourceAlgorithmSpecification() const {
    return m_source_algorithm_specification;
}
void OAIModelPackage::setSourceAlgorithmSpecification(const OAIModelPackage_SourceAlgorithmSpecification &source_algorithm_specification) {
    m_source_algorithm_specification = source_algorithm_specification;
    m_source_algorithm_specification_isSet = true;
}

bool OAIModelPackage::is_source_algorithm_specification_Set() const{
    return m_source_algorithm_specification_isSet;
}

bool OAIModelPackage::is_source_algorithm_specification_Valid() const{
    return m_source_algorithm_specification_isValid;
}

OAIModelPackage_ValidationSpecification OAIModelPackage::getValidationSpecification() const {
    return m_validation_specification;
}
void OAIModelPackage::setValidationSpecification(const OAIModelPackage_ValidationSpecification &validation_specification) {
    m_validation_specification = validation_specification;
    m_validation_specification_isSet = true;
}

bool OAIModelPackage::is_validation_specification_Set() const{
    return m_validation_specification_isSet;
}

bool OAIModelPackage::is_validation_specification_Valid() const{
    return m_validation_specification_isValid;
}

OAIModelPackageStatus OAIModelPackage::getModelPackageStatus() const {
    return m_model_package_status;
}
void OAIModelPackage::setModelPackageStatus(const OAIModelPackageStatus &model_package_status) {
    m_model_package_status = model_package_status;
    m_model_package_status_isSet = true;
}

bool OAIModelPackage::is_model_package_status_Set() const{
    return m_model_package_status_isSet;
}

bool OAIModelPackage::is_model_package_status_Valid() const{
    return m_model_package_status_isValid;
}

OAIModelPackage_ModelPackageStatusDetails OAIModelPackage::getModelPackageStatusDetails() const {
    return m_model_package_status_details;
}
void OAIModelPackage::setModelPackageStatusDetails(const OAIModelPackage_ModelPackageStatusDetails &model_package_status_details) {
    m_model_package_status_details = model_package_status_details;
    m_model_package_status_details_isSet = true;
}

bool OAIModelPackage::is_model_package_status_details_Set() const{
    return m_model_package_status_details_isSet;
}

bool OAIModelPackage::is_model_package_status_details_Valid() const{
    return m_model_package_status_details_isValid;
}

bool OAIModelPackage::getCertifyForMarketplace() const {
    return m_certify_for_marketplace;
}
void OAIModelPackage::setCertifyForMarketplace(const bool &certify_for_marketplace) {
    m_certify_for_marketplace = certify_for_marketplace;
    m_certify_for_marketplace_isSet = true;
}

bool OAIModelPackage::is_certify_for_marketplace_Set() const{
    return m_certify_for_marketplace_isSet;
}

bool OAIModelPackage::is_certify_for_marketplace_Valid() const{
    return m_certify_for_marketplace_isValid;
}

OAIModelApprovalStatus OAIModelPackage::getModelApprovalStatus() const {
    return m_model_approval_status;
}
void OAIModelPackage::setModelApprovalStatus(const OAIModelApprovalStatus &model_approval_status) {
    m_model_approval_status = model_approval_status;
    m_model_approval_status_isSet = true;
}

bool OAIModelPackage::is_model_approval_status_Set() const{
    return m_model_approval_status_isSet;
}

bool OAIModelPackage::is_model_approval_status_Valid() const{
    return m_model_approval_status_isValid;
}

OAIModelPackage_CreatedBy OAIModelPackage::getCreatedBy() const {
    return m_created_by;
}
void OAIModelPackage::setCreatedBy(const OAIModelPackage_CreatedBy &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIModelPackage::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIModelPackage::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIModelPackage_MetadataProperties OAIModelPackage::getMetadataProperties() const {
    return m_metadata_properties;
}
void OAIModelPackage::setMetadataProperties(const OAIModelPackage_MetadataProperties &metadata_properties) {
    m_metadata_properties = metadata_properties;
    m_metadata_properties_isSet = true;
}

bool OAIModelPackage::is_metadata_properties_Set() const{
    return m_metadata_properties_isSet;
}

bool OAIModelPackage::is_metadata_properties_Valid() const{
    return m_metadata_properties_isValid;
}

OAIDescribeModelPackageOutput_ModelMetrics OAIModelPackage::getModelMetrics() const {
    return m_model_metrics;
}
void OAIModelPackage::setModelMetrics(const OAIDescribeModelPackageOutput_ModelMetrics &model_metrics) {
    m_model_metrics = model_metrics;
    m_model_metrics_isSet = true;
}

bool OAIModelPackage::is_model_metrics_Set() const{
    return m_model_metrics_isSet;
}

bool OAIModelPackage::is_model_metrics_Valid() const{
    return m_model_metrics_isValid;
}

QDateTime OAIModelPackage::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIModelPackage::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIModelPackage::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIModelPackage::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIModelPackage_CreatedBy OAIModelPackage::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIModelPackage::setLastModifiedBy(const OAIModelPackage_CreatedBy &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIModelPackage::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIModelPackage::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QString OAIModelPackage::getApprovalDescription() const {
    return m_approval_description;
}
void OAIModelPackage::setApprovalDescription(const QString &approval_description) {
    m_approval_description = approval_description;
    m_approval_description_isSet = true;
}

bool OAIModelPackage::is_approval_description_Set() const{
    return m_approval_description_isSet;
}

bool OAIModelPackage::is_approval_description_Valid() const{
    return m_approval_description_isValid;
}

QString OAIModelPackage::getDomain() const {
    return m_domain;
}
void OAIModelPackage::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIModelPackage::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIModelPackage::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIModelPackage::getTask() const {
    return m_task;
}
void OAIModelPackage::setTask(const QString &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAIModelPackage::is_task_Set() const{
    return m_task_isSet;
}

bool OAIModelPackage::is_task_Valid() const{
    return m_task_isValid;
}

QString OAIModelPackage::getSamplePayloadUrl() const {
    return m_sample_payload_url;
}
void OAIModelPackage::setSamplePayloadUrl(const QString &sample_payload_url) {
    m_sample_payload_url = sample_payload_url;
    m_sample_payload_url_isSet = true;
}

bool OAIModelPackage::is_sample_payload_url_Set() const{
    return m_sample_payload_url_isSet;
}

bool OAIModelPackage::is_sample_payload_url_Valid() const{
    return m_sample_payload_url_isValid;
}

QList OAIModelPackage::getAdditionalInferenceSpecifications() const {
    return m_additional_inference_specifications;
}
void OAIModelPackage::setAdditionalInferenceSpecifications(const QList &additional_inference_specifications) {
    m_additional_inference_specifications = additional_inference_specifications;
    m_additional_inference_specifications_isSet = true;
}

bool OAIModelPackage::is_additional_inference_specifications_Set() const{
    return m_additional_inference_specifications_isSet;
}

bool OAIModelPackage::is_additional_inference_specifications_Valid() const{
    return m_additional_inference_specifications_isValid;
}

QList OAIModelPackage::getTags() const {
    return m_tags;
}
void OAIModelPackage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIModelPackage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIModelPackage::is_tags_Valid() const{
    return m_tags_isValid;
}

QMap OAIModelPackage::getCustomerMetadataProperties() const {
    return m_customer_metadata_properties;
}
void OAIModelPackage::setCustomerMetadataProperties(const QMap &customer_metadata_properties) {
    m_customer_metadata_properties = customer_metadata_properties;
    m_customer_metadata_properties_isSet = true;
}

bool OAIModelPackage::is_customer_metadata_properties_Set() const{
    return m_customer_metadata_properties_isSet;
}

bool OAIModelPackage::is_customer_metadata_properties_Valid() const{
    return m_customer_metadata_properties_isValid;
}

OAIModelPackage_DriftCheckBaselines OAIModelPackage::getDriftCheckBaselines() const {
    return m_drift_check_baselines;
}
void OAIModelPackage::setDriftCheckBaselines(const OAIModelPackage_DriftCheckBaselines &drift_check_baselines) {
    m_drift_check_baselines = drift_check_baselines;
    m_drift_check_baselines_isSet = true;
}

bool OAIModelPackage::is_drift_check_baselines_Set() const{
    return m_drift_check_baselines_isSet;
}

bool OAIModelPackage::is_drift_check_baselines_Valid() const{
    return m_drift_check_baselines_isValid;
}

bool OAIModelPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_algorithm_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certify_for_marketplace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_approval_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_payload_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_inference_specifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_metadata_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_check_baselines.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
