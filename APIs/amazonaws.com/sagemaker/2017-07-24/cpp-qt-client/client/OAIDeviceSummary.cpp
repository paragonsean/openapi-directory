/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceSummary::OAIDeviceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceSummary::OAIDeviceSummary() {
    this->initializeModel();
}

OAIDeviceSummary::~OAIDeviceSummary() {}

void OAIDeviceSummary::initializeModel() {

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_device_arn_isSet = false;
    m_device_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_fleet_name_isSet = false;
    m_device_fleet_name_isValid = false;

    m_iot_thing_name_isSet = false;
    m_iot_thing_name_isValid = false;

    m_registration_time_isSet = false;
    m_registration_time_isValid = false;

    m_latest_heartbeat_isSet = false;
    m_latest_heartbeat_isValid = false;

    m_models_isSet = false;
    m_models_isValid = false;

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;
}

void OAIDeviceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceSummary::fromJsonObject(QJsonObject json) {

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("DeviceName")]);
    m_device_name_isSet = !json[QString("DeviceName")].isNull() && m_device_name_isValid;

    m_device_arn_isValid = ::OpenAPI::fromJsonValue(m_device_arn, json[QString("DeviceArn")]);
    m_device_arn_isSet = !json[QString("DeviceArn")].isNull() && m_device_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_device_fleet_name_isValid = ::OpenAPI::fromJsonValue(m_device_fleet_name, json[QString("DeviceFleetName")]);
    m_device_fleet_name_isSet = !json[QString("DeviceFleetName")].isNull() && m_device_fleet_name_isValid;

    m_iot_thing_name_isValid = ::OpenAPI::fromJsonValue(m_iot_thing_name, json[QString("IotThingName")]);
    m_iot_thing_name_isSet = !json[QString("IotThingName")].isNull() && m_iot_thing_name_isValid;

    m_registration_time_isValid = ::OpenAPI::fromJsonValue(m_registration_time, json[QString("RegistrationTime")]);
    m_registration_time_isSet = !json[QString("RegistrationTime")].isNull() && m_registration_time_isValid;

    m_latest_heartbeat_isValid = ::OpenAPI::fromJsonValue(m_latest_heartbeat, json[QString("LatestHeartbeat")]);
    m_latest_heartbeat_isSet = !json[QString("LatestHeartbeat")].isNull() && m_latest_heartbeat_isValid;

    m_models_isValid = ::OpenAPI::fromJsonValue(m_models, json[QString("Models")]);
    m_models_isSet = !json[QString("Models")].isNull() && m_models_isValid;

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("AgentVersion")]);
    m_agent_version_isSet = !json[QString("AgentVersion")].isNull() && m_agent_version_isValid;
}

QString OAIDeviceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_device_name_isSet) {
        obj.insert(QString("DeviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_device_arn_isSet) {
        obj.insert(QString("DeviceArn"), ::OpenAPI::toJsonValue(m_device_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_fleet_name_isSet) {
        obj.insert(QString("DeviceFleetName"), ::OpenAPI::toJsonValue(m_device_fleet_name));
    }
    if (m_iot_thing_name_isSet) {
        obj.insert(QString("IotThingName"), ::OpenAPI::toJsonValue(m_iot_thing_name));
    }
    if (m_registration_time_isSet) {
        obj.insert(QString("RegistrationTime"), ::OpenAPI::toJsonValue(m_registration_time));
    }
    if (m_latest_heartbeat_isSet) {
        obj.insert(QString("LatestHeartbeat"), ::OpenAPI::toJsonValue(m_latest_heartbeat));
    }
    if (m_models.isSet()) {
        obj.insert(QString("Models"), ::OpenAPI::toJsonValue(m_models));
    }
    if (m_agent_version_isSet) {
        obj.insert(QString("AgentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    return obj;
}

QString OAIDeviceSummary::getDeviceName() const {
    return m_device_name;
}
void OAIDeviceSummary::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIDeviceSummary::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIDeviceSummary::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIDeviceSummary::getDeviceArn() const {
    return m_device_arn;
}
void OAIDeviceSummary::setDeviceArn(const QString &device_arn) {
    m_device_arn = device_arn;
    m_device_arn_isSet = true;
}

bool OAIDeviceSummary::is_device_arn_Set() const{
    return m_device_arn_isSet;
}

bool OAIDeviceSummary::is_device_arn_Valid() const{
    return m_device_arn_isValid;
}

QString OAIDeviceSummary::getDescription() const {
    return m_description;
}
void OAIDeviceSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeviceSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeviceSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeviceSummary::getDeviceFleetName() const {
    return m_device_fleet_name;
}
void OAIDeviceSummary::setDeviceFleetName(const QString &device_fleet_name) {
    m_device_fleet_name = device_fleet_name;
    m_device_fleet_name_isSet = true;
}

bool OAIDeviceSummary::is_device_fleet_name_Set() const{
    return m_device_fleet_name_isSet;
}

bool OAIDeviceSummary::is_device_fleet_name_Valid() const{
    return m_device_fleet_name_isValid;
}

QString OAIDeviceSummary::getIotThingName() const {
    return m_iot_thing_name;
}
void OAIDeviceSummary::setIotThingName(const QString &iot_thing_name) {
    m_iot_thing_name = iot_thing_name;
    m_iot_thing_name_isSet = true;
}

bool OAIDeviceSummary::is_iot_thing_name_Set() const{
    return m_iot_thing_name_isSet;
}

bool OAIDeviceSummary::is_iot_thing_name_Valid() const{
    return m_iot_thing_name_isValid;
}

QDateTime OAIDeviceSummary::getRegistrationTime() const {
    return m_registration_time;
}
void OAIDeviceSummary::setRegistrationTime(const QDateTime &registration_time) {
    m_registration_time = registration_time;
    m_registration_time_isSet = true;
}

bool OAIDeviceSummary::is_registration_time_Set() const{
    return m_registration_time_isSet;
}

bool OAIDeviceSummary::is_registration_time_Valid() const{
    return m_registration_time_isValid;
}

QDateTime OAIDeviceSummary::getLatestHeartbeat() const {
    return m_latest_heartbeat;
}
void OAIDeviceSummary::setLatestHeartbeat(const QDateTime &latest_heartbeat) {
    m_latest_heartbeat = latest_heartbeat;
    m_latest_heartbeat_isSet = true;
}

bool OAIDeviceSummary::is_latest_heartbeat_Set() const{
    return m_latest_heartbeat_isSet;
}

bool OAIDeviceSummary::is_latest_heartbeat_Valid() const{
    return m_latest_heartbeat_isValid;
}

QList OAIDeviceSummary::getModels() const {
    return m_models;
}
void OAIDeviceSummary::setModels(const QList &models) {
    m_models = models;
    m_models_isSet = true;
}

bool OAIDeviceSummary::is_models_Set() const{
    return m_models_isSet;
}

bool OAIDeviceSummary::is_models_Valid() const{
    return m_models_isValid;
}

QString OAIDeviceSummary::getAgentVersion() const {
    return m_agent_version;
}
void OAIDeviceSummary::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIDeviceSummary::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIDeviceSummary::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

bool OAIDeviceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_fleet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_thing_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_heartbeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_models.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_name_isValid && m_device_arn_isValid && true;
}

} // namespace OpenAPI
