/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrainingJobDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrainingJobDefinition::OAITrainingJobDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrainingJobDefinition::OAITrainingJobDefinition() {
    this->initializeModel();
}

OAITrainingJobDefinition::~OAITrainingJobDefinition() {}

void OAITrainingJobDefinition::initializeModel() {

    m_training_input_mode_isSet = false;
    m_training_input_mode_isValid = false;

    m_hyper_parameters_isSet = false;
    m_hyper_parameters_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_resource_config_isSet = false;
    m_resource_config_isValid = false;

    m_stopping_condition_isSet = false;
    m_stopping_condition_isValid = false;
}

void OAITrainingJobDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrainingJobDefinition::fromJsonObject(QJsonObject json) {

    m_training_input_mode_isValid = ::OpenAPI::fromJsonValue(m_training_input_mode, json[QString("TrainingInputMode")]);
    m_training_input_mode_isSet = !json[QString("TrainingInputMode")].isNull() && m_training_input_mode_isValid;

    m_hyper_parameters_isValid = ::OpenAPI::fromJsonValue(m_hyper_parameters, json[QString("HyperParameters")]);
    m_hyper_parameters_isSet = !json[QString("HyperParameters")].isNull() && m_hyper_parameters_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_resource_config_isValid = ::OpenAPI::fromJsonValue(m_resource_config, json[QString("ResourceConfig")]);
    m_resource_config_isSet = !json[QString("ResourceConfig")].isNull() && m_resource_config_isValid;

    m_stopping_condition_isValid = ::OpenAPI::fromJsonValue(m_stopping_condition, json[QString("StoppingCondition")]);
    m_stopping_condition_isSet = !json[QString("StoppingCondition")].isNull() && m_stopping_condition_isValid;
}

QString OAITrainingJobDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrainingJobDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_training_input_mode.isSet()) {
        obj.insert(QString("TrainingInputMode"), ::OpenAPI::toJsonValue(m_training_input_mode));
    }
    if (m_hyper_parameters.isSet()) {
        obj.insert(QString("HyperParameters"), ::OpenAPI::toJsonValue(m_hyper_parameters));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_resource_config.isSet()) {
        obj.insert(QString("ResourceConfig"), ::OpenAPI::toJsonValue(m_resource_config));
    }
    if (m_stopping_condition.isSet()) {
        obj.insert(QString("StoppingCondition"), ::OpenAPI::toJsonValue(m_stopping_condition));
    }
    return obj;
}

OAITrainingInputMode OAITrainingJobDefinition::getTrainingInputMode() const {
    return m_training_input_mode;
}
void OAITrainingJobDefinition::setTrainingInputMode(const OAITrainingInputMode &training_input_mode) {
    m_training_input_mode = training_input_mode;
    m_training_input_mode_isSet = true;
}

bool OAITrainingJobDefinition::is_training_input_mode_Set() const{
    return m_training_input_mode_isSet;
}

bool OAITrainingJobDefinition::is_training_input_mode_Valid() const{
    return m_training_input_mode_isValid;
}

QMap OAITrainingJobDefinition::getHyperParameters() const {
    return m_hyper_parameters;
}
void OAITrainingJobDefinition::setHyperParameters(const QMap &hyper_parameters) {
    m_hyper_parameters = hyper_parameters;
    m_hyper_parameters_isSet = true;
}

bool OAITrainingJobDefinition::is_hyper_parameters_Set() const{
    return m_hyper_parameters_isSet;
}

bool OAITrainingJobDefinition::is_hyper_parameters_Valid() const{
    return m_hyper_parameters_isValid;
}

QList OAITrainingJobDefinition::getInputDataConfig() const {
    return m_input_data_config;
}
void OAITrainingJobDefinition::setInputDataConfig(const QList &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAITrainingJobDefinition::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAITrainingJobDefinition::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAITrainingJobDefinition_OutputDataConfig OAITrainingJobDefinition::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAITrainingJobDefinition::setOutputDataConfig(const OAITrainingJobDefinition_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAITrainingJobDefinition::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAITrainingJobDefinition::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

OAITrainingJobDefinition_ResourceConfig OAITrainingJobDefinition::getResourceConfig() const {
    return m_resource_config;
}
void OAITrainingJobDefinition::setResourceConfig(const OAITrainingJobDefinition_ResourceConfig &resource_config) {
    m_resource_config = resource_config;
    m_resource_config_isSet = true;
}

bool OAITrainingJobDefinition::is_resource_config_Set() const{
    return m_resource_config_isSet;
}

bool OAITrainingJobDefinition::is_resource_config_Valid() const{
    return m_resource_config_isValid;
}

OAITrainingJobDefinition_StoppingCondition OAITrainingJobDefinition::getStoppingCondition() const {
    return m_stopping_condition;
}
void OAITrainingJobDefinition::setStoppingCondition(const OAITrainingJobDefinition_StoppingCondition &stopping_condition) {
    m_stopping_condition = stopping_condition;
    m_stopping_condition_isSet = true;
}

bool OAITrainingJobDefinition::is_stopping_condition_Set() const{
    return m_stopping_condition_isSet;
}

bool OAITrainingJobDefinition::is_stopping_condition_Valid() const{
    return m_stopping_condition_isValid;
}

bool OAITrainingJobDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_training_input_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyper_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrainingJobDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_training_input_mode_isValid && m_input_data_config_isValid && m_output_data_config_isValid && m_resource_config_isValid && m_stopping_condition_isValid && true;
}

} // namespace OpenAPI
