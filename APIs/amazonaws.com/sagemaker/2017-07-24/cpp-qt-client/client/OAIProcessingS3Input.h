/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProcessingS3Input.h
 *
 * Configuration for downloading input data from Amazon S3 into the processing container.
 */

#ifndef OAIProcessingS3Input_H
#define OAIProcessingS3Input_H

#include <QJsonObject>

#include "OAIProcessingS3CompressionType.h"
#include "OAIProcessingS3DataDistributionType.h"
#include "OAIProcessingS3DataType.h"
#include "OAIProcessingS3InputMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProcessingS3Input : public OAIObject {
public:
    OAIProcessingS3Input();
    OAIProcessingS3Input(QString json);
    ~OAIProcessingS3Input() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getS3Uri() const;
    void setS3Uri(const QString &s3_uri);
    bool is_s3_uri_Set() const;
    bool is_s3_uri_Valid() const;

    QString getLocalPath() const;
    void setLocalPath(const QString &local_path);
    bool is_local_path_Set() const;
    bool is_local_path_Valid() const;

    OAIProcessingS3DataType getS3DataType() const;
    void setS3DataType(const OAIProcessingS3DataType &s3_data_type);
    bool is_s3_data_type_Set() const;
    bool is_s3_data_type_Valid() const;

    OAIProcessingS3InputMode getS3InputMode() const;
    void setS3InputMode(const OAIProcessingS3InputMode &s3_input_mode);
    bool is_s3_input_mode_Set() const;
    bool is_s3_input_mode_Valid() const;

    OAIProcessingS3DataDistributionType getS3DataDistributionType() const;
    void setS3DataDistributionType(const OAIProcessingS3DataDistributionType &s3_data_distribution_type);
    bool is_s3_data_distribution_type_Set() const;
    bool is_s3_data_distribution_type_Valid() const;

    OAIProcessingS3CompressionType getS3CompressionType() const;
    void setS3CompressionType(const OAIProcessingS3CompressionType &s3_compression_type);
    bool is_s3_compression_type_Set() const;
    bool is_s3_compression_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_s3_uri;
    bool m_s3_uri_isSet;
    bool m_s3_uri_isValid;

    QString m_local_path;
    bool m_local_path_isSet;
    bool m_local_path_isValid;

    OAIProcessingS3DataType m_s3_data_type;
    bool m_s3_data_type_isSet;
    bool m_s3_data_type_isValid;

    OAIProcessingS3InputMode m_s3_input_mode;
    bool m_s3_input_mode_isSet;
    bool m_s3_input_mode_isValid;

    OAIProcessingS3DataDistributionType m_s3_data_distribution_type;
    bool m_s3_data_distribution_type_isSet;
    bool m_s3_data_distribution_type_isValid;

    OAIProcessingS3CompressionType m_s3_compression_type;
    bool m_s3_compression_type_isSet;
    bool m_s3_compression_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProcessingS3Input)

#endif // OAIProcessingS3Input_H
