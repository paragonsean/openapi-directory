/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAthenaDatasetDefinition.h
 *
 * Configuration for Athena Dataset Definition input.
 */

#ifndef OAIAthenaDatasetDefinition_H
#define OAIAthenaDatasetDefinition_H

#include <QJsonObject>

#include "OAIAthenaResultCompressionType.h"
#include "OAIAthenaResultFormat.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAthenaDatasetDefinition : public OAIObject {
public:
    OAIAthenaDatasetDefinition();
    OAIAthenaDatasetDefinition(QString json);
    ~OAIAthenaDatasetDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCatalog() const;
    void setCatalog(const QString &catalog);
    bool is_catalog_Set() const;
    bool is_catalog_Valid() const;

    QString getDatabase() const;
    void setDatabase(const QString &database);
    bool is_database_Set() const;
    bool is_database_Valid() const;

    QString getQueryString() const;
    void setQueryString(const QString &query_string);
    bool is_query_string_Set() const;
    bool is_query_string_Valid() const;

    QString getWorkGroup() const;
    void setWorkGroup(const QString &work_group);
    bool is_work_group_Set() const;
    bool is_work_group_Valid() const;

    QString getOutputS3Uri() const;
    void setOutputS3Uri(const QString &output_s3_uri);
    bool is_output_s3_uri_Set() const;
    bool is_output_s3_uri_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    OAIAthenaResultFormat getOutputFormat() const;
    void setOutputFormat(const OAIAthenaResultFormat &output_format);
    bool is_output_format_Set() const;
    bool is_output_format_Valid() const;

    OAIAthenaResultCompressionType getOutputCompression() const;
    void setOutputCompression(const OAIAthenaResultCompressionType &output_compression);
    bool is_output_compression_Set() const;
    bool is_output_compression_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_catalog;
    bool m_catalog_isSet;
    bool m_catalog_isValid;

    QString m_database;
    bool m_database_isSet;
    bool m_database_isValid;

    QString m_query_string;
    bool m_query_string_isSet;
    bool m_query_string_isValid;

    QString m_work_group;
    bool m_work_group_isSet;
    bool m_work_group_isValid;

    QString m_output_s3_uri;
    bool m_output_s3_uri_isSet;
    bool m_output_s3_uri_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    OAIAthenaResultFormat m_output_format;
    bool m_output_format_isSet;
    bool m_output_format_isValid;

    OAIAthenaResultCompressionType m_output_compression;
    bool m_output_compression_isSet;
    bool m_output_compression_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAthenaDatasetDefinition)

#endif // OAIAthenaDatasetDefinition_H
