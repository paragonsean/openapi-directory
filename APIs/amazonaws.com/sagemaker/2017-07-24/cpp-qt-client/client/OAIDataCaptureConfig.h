/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataCaptureConfig.h
 *
 * Configuration to control how SageMaker captures inference data.
 */

#ifndef OAIDataCaptureConfig_H
#define OAIDataCaptureConfig_H

#include <QJsonObject>

#include "OAIDataCaptureConfig_CaptureContentTypeHeader.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataCaptureConfig_CaptureContentTypeHeader;

class OAIDataCaptureConfig : public OAIObject {
public:
    OAIDataCaptureConfig();
    OAIDataCaptureConfig(QString json);
    ~OAIDataCaptureConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getEnableCapture() const;
    void setEnableCapture(const bool &enable_capture);
    bool is_enable_capture_Set() const;
    bool is_enable_capture_Valid() const;

    qint32 getInitialSamplingPercentage() const;
    void setInitialSamplingPercentage(const qint32 &initial_sampling_percentage);
    bool is_initial_sampling_percentage_Set() const;
    bool is_initial_sampling_percentage_Valid() const;

    QString getDestinationS3Uri() const;
    void setDestinationS3Uri(const QString &destination_s3_uri);
    bool is_destination_s3_uri_Set() const;
    bool is_destination_s3_uri_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QList getCaptureOptions() const;
    void setCaptureOptions(const QList &capture_options);
    bool is_capture_options_Set() const;
    bool is_capture_options_Valid() const;

    OAIDataCaptureConfig_CaptureContentTypeHeader getCaptureContentTypeHeader() const;
    void setCaptureContentTypeHeader(const OAIDataCaptureConfig_CaptureContentTypeHeader &capture_content_type_header);
    bool is_capture_content_type_header_Set() const;
    bool is_capture_content_type_header_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enable_capture;
    bool m_enable_capture_isSet;
    bool m_enable_capture_isValid;

    qint32 m_initial_sampling_percentage;
    bool m_initial_sampling_percentage_isSet;
    bool m_initial_sampling_percentage_isValid;

    QString m_destination_s3_uri;
    bool m_destination_s3_uri_isSet;
    bool m_destination_s3_uri_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QList m_capture_options;
    bool m_capture_options_isSet;
    bool m_capture_options_isValid;

    OAIDataCaptureConfig_CaptureContentTypeHeader m_capture_content_type_header;
    bool m_capture_content_type_header_isSet;
    bool m_capture_content_type_header_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataCaptureConfig)

#endif // OAIDataCaptureConfig_H
