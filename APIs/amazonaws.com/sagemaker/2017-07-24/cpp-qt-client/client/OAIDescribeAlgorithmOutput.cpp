/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAlgorithmOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAlgorithmOutput::OAIDescribeAlgorithmOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAlgorithmOutput::OAIDescribeAlgorithmOutput() {
    this->initializeModel();
}

OAIDescribeAlgorithmOutput::~OAIDescribeAlgorithmOutput() {}

void OAIDescribeAlgorithmOutput::initializeModel() {

    m_algorithm_name_isSet = false;
    m_algorithm_name_isValid = false;

    m_algorithm_arn_isSet = false;
    m_algorithm_arn_isValid = false;

    m_algorithm_description_isSet = false;
    m_algorithm_description_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_training_specification_isSet = false;
    m_training_specification_isValid = false;

    m_inference_specification_isSet = false;
    m_inference_specification_isValid = false;

    m_validation_specification_isSet = false;
    m_validation_specification_isValid = false;

    m_algorithm_status_isSet = false;
    m_algorithm_status_isValid = false;

    m_algorithm_status_details_isSet = false;
    m_algorithm_status_details_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_certify_for_marketplace_isSet = false;
    m_certify_for_marketplace_isValid = false;
}

void OAIDescribeAlgorithmOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAlgorithmOutput::fromJsonObject(QJsonObject json) {

    m_algorithm_name_isValid = ::OpenAPI::fromJsonValue(m_algorithm_name, json[QString("AlgorithmName")]);
    m_algorithm_name_isSet = !json[QString("AlgorithmName")].isNull() && m_algorithm_name_isValid;

    m_algorithm_arn_isValid = ::OpenAPI::fromJsonValue(m_algorithm_arn, json[QString("AlgorithmArn")]);
    m_algorithm_arn_isSet = !json[QString("AlgorithmArn")].isNull() && m_algorithm_arn_isValid;

    m_algorithm_description_isValid = ::OpenAPI::fromJsonValue(m_algorithm_description, json[QString("AlgorithmDescription")]);
    m_algorithm_description_isSet = !json[QString("AlgorithmDescription")].isNull() && m_algorithm_description_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_training_specification_isValid = ::OpenAPI::fromJsonValue(m_training_specification, json[QString("TrainingSpecification")]);
    m_training_specification_isSet = !json[QString("TrainingSpecification")].isNull() && m_training_specification_isValid;

    m_inference_specification_isValid = ::OpenAPI::fromJsonValue(m_inference_specification, json[QString("InferenceSpecification")]);
    m_inference_specification_isSet = !json[QString("InferenceSpecification")].isNull() && m_inference_specification_isValid;

    m_validation_specification_isValid = ::OpenAPI::fromJsonValue(m_validation_specification, json[QString("ValidationSpecification")]);
    m_validation_specification_isSet = !json[QString("ValidationSpecification")].isNull() && m_validation_specification_isValid;

    m_algorithm_status_isValid = ::OpenAPI::fromJsonValue(m_algorithm_status, json[QString("AlgorithmStatus")]);
    m_algorithm_status_isSet = !json[QString("AlgorithmStatus")].isNull() && m_algorithm_status_isValid;

    m_algorithm_status_details_isValid = ::OpenAPI::fromJsonValue(m_algorithm_status_details, json[QString("AlgorithmStatusDetails")]);
    m_algorithm_status_details_isSet = !json[QString("AlgorithmStatusDetails")].isNull() && m_algorithm_status_details_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_certify_for_marketplace_isValid = ::OpenAPI::fromJsonValue(m_certify_for_marketplace, json[QString("CertifyForMarketplace")]);
    m_certify_for_marketplace_isSet = !json[QString("CertifyForMarketplace")].isNull() && m_certify_for_marketplace_isValid;
}

QString OAIDescribeAlgorithmOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAlgorithmOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_name_isSet) {
        obj.insert(QString("AlgorithmName"), ::OpenAPI::toJsonValue(m_algorithm_name));
    }
    if (m_algorithm_arn_isSet) {
        obj.insert(QString("AlgorithmArn"), ::OpenAPI::toJsonValue(m_algorithm_arn));
    }
    if (m_algorithm_description_isSet) {
        obj.insert(QString("AlgorithmDescription"), ::OpenAPI::toJsonValue(m_algorithm_description));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_training_specification.isSet()) {
        obj.insert(QString("TrainingSpecification"), ::OpenAPI::toJsonValue(m_training_specification));
    }
    if (m_inference_specification.isSet()) {
        obj.insert(QString("InferenceSpecification"), ::OpenAPI::toJsonValue(m_inference_specification));
    }
    if (m_validation_specification.isSet()) {
        obj.insert(QString("ValidationSpecification"), ::OpenAPI::toJsonValue(m_validation_specification));
    }
    if (m_algorithm_status.isSet()) {
        obj.insert(QString("AlgorithmStatus"), ::OpenAPI::toJsonValue(m_algorithm_status));
    }
    if (m_algorithm_status_details.isSet()) {
        obj.insert(QString("AlgorithmStatusDetails"), ::OpenAPI::toJsonValue(m_algorithm_status_details));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_certify_for_marketplace_isSet) {
        obj.insert(QString("CertifyForMarketplace"), ::OpenAPI::toJsonValue(m_certify_for_marketplace));
    }
    return obj;
}

QString OAIDescribeAlgorithmOutput::getAlgorithmName() const {
    return m_algorithm_name;
}
void OAIDescribeAlgorithmOutput::setAlgorithmName(const QString &algorithm_name) {
    m_algorithm_name = algorithm_name;
    m_algorithm_name_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_name_Set() const{
    return m_algorithm_name_isSet;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_name_Valid() const{
    return m_algorithm_name_isValid;
}

QString OAIDescribeAlgorithmOutput::getAlgorithmArn() const {
    return m_algorithm_arn;
}
void OAIDescribeAlgorithmOutput::setAlgorithmArn(const QString &algorithm_arn) {
    m_algorithm_arn = algorithm_arn;
    m_algorithm_arn_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_arn_Set() const{
    return m_algorithm_arn_isSet;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_arn_Valid() const{
    return m_algorithm_arn_isValid;
}

QString OAIDescribeAlgorithmOutput::getAlgorithmDescription() const {
    return m_algorithm_description;
}
void OAIDescribeAlgorithmOutput::setAlgorithmDescription(const QString &algorithm_description) {
    m_algorithm_description = algorithm_description;
    m_algorithm_description_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_description_Set() const{
    return m_algorithm_description_isSet;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_description_Valid() const{
    return m_algorithm_description_isValid;
}

QDateTime OAIDescribeAlgorithmOutput::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeAlgorithmOutput::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeAlgorithmOutput::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIDescribeAlgorithmOutput_TrainingSpecification OAIDescribeAlgorithmOutput::getTrainingSpecification() const {
    return m_training_specification;
}
void OAIDescribeAlgorithmOutput::setTrainingSpecification(const OAIDescribeAlgorithmOutput_TrainingSpecification &training_specification) {
    m_training_specification = training_specification;
    m_training_specification_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_training_specification_Set() const{
    return m_training_specification_isSet;
}

bool OAIDescribeAlgorithmOutput::is_training_specification_Valid() const{
    return m_training_specification_isValid;
}

OAIDescribeAlgorithmOutput_InferenceSpecification OAIDescribeAlgorithmOutput::getInferenceSpecification() const {
    return m_inference_specification;
}
void OAIDescribeAlgorithmOutput::setInferenceSpecification(const OAIDescribeAlgorithmOutput_InferenceSpecification &inference_specification) {
    m_inference_specification = inference_specification;
    m_inference_specification_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_inference_specification_Set() const{
    return m_inference_specification_isSet;
}

bool OAIDescribeAlgorithmOutput::is_inference_specification_Valid() const{
    return m_inference_specification_isValid;
}

OAIDescribeAlgorithmOutput_ValidationSpecification OAIDescribeAlgorithmOutput::getValidationSpecification() const {
    return m_validation_specification;
}
void OAIDescribeAlgorithmOutput::setValidationSpecification(const OAIDescribeAlgorithmOutput_ValidationSpecification &validation_specification) {
    m_validation_specification = validation_specification;
    m_validation_specification_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_validation_specification_Set() const{
    return m_validation_specification_isSet;
}

bool OAIDescribeAlgorithmOutput::is_validation_specification_Valid() const{
    return m_validation_specification_isValid;
}

OAIAlgorithmStatus OAIDescribeAlgorithmOutput::getAlgorithmStatus() const {
    return m_algorithm_status;
}
void OAIDescribeAlgorithmOutput::setAlgorithmStatus(const OAIAlgorithmStatus &algorithm_status) {
    m_algorithm_status = algorithm_status;
    m_algorithm_status_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_status_Set() const{
    return m_algorithm_status_isSet;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_status_Valid() const{
    return m_algorithm_status_isValid;
}

OAIDescribeAlgorithmOutput_AlgorithmStatusDetails OAIDescribeAlgorithmOutput::getAlgorithmStatusDetails() const {
    return m_algorithm_status_details;
}
void OAIDescribeAlgorithmOutput::setAlgorithmStatusDetails(const OAIDescribeAlgorithmOutput_AlgorithmStatusDetails &algorithm_status_details) {
    m_algorithm_status_details = algorithm_status_details;
    m_algorithm_status_details_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_status_details_Set() const{
    return m_algorithm_status_details_isSet;
}

bool OAIDescribeAlgorithmOutput::is_algorithm_status_details_Valid() const{
    return m_algorithm_status_details_isValid;
}

QString OAIDescribeAlgorithmOutput::getProductId() const {
    return m_product_id;
}
void OAIDescribeAlgorithmOutput::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDescribeAlgorithmOutput::is_product_id_Valid() const{
    return m_product_id_isValid;
}

bool OAIDescribeAlgorithmOutput::getCertifyForMarketplace() const {
    return m_certify_for_marketplace;
}
void OAIDescribeAlgorithmOutput::setCertifyForMarketplace(const bool &certify_for_marketplace) {
    m_certify_for_marketplace = certify_for_marketplace;
    m_certify_for_marketplace_isSet = true;
}

bool OAIDescribeAlgorithmOutput::is_certify_for_marketplace_Set() const{
    return m_certify_for_marketplace_isSet;
}

bool OAIDescribeAlgorithmOutput::is_certify_for_marketplace_Valid() const{
    return m_certify_for_marketplace_isValid;
}

bool OAIDescribeAlgorithmOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certify_for_marketplace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAlgorithmOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_algorithm_name_isValid && m_algorithm_arn_isValid && m_creation_time_isValid && m_training_specification_isValid && m_algorithm_status_isValid && m_algorithm_status_details_isValid && true;
}

} // namespace OpenAPI
