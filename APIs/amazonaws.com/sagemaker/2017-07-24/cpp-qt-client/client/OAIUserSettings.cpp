/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSettings::OAIUserSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSettings::OAIUserSettings() {
    this->initializeModel();
}

OAIUserSettings::~OAIUserSettings() {}

void OAIUserSettings::initializeModel() {

    m_execution_role_isSet = false;
    m_execution_role_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_sharing_settings_isSet = false;
    m_sharing_settings_isValid = false;

    m_jupyter_server_app_settings_isSet = false;
    m_jupyter_server_app_settings_isValid = false;

    m_kernel_gateway_app_settings_isSet = false;
    m_kernel_gateway_app_settings_isValid = false;

    m_tensor_board_app_settings_isSet = false;
    m_tensor_board_app_settings_isValid = false;

    m_r_studio_server_pro_app_settings_isSet = false;
    m_r_studio_server_pro_app_settings_isValid = false;

    m_r_session_app_settings_isSet = false;
    m_r_session_app_settings_isValid = false;

    m_canvas_app_settings_isSet = false;
    m_canvas_app_settings_isValid = false;
}

void OAIUserSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSettings::fromJsonObject(QJsonObject json) {

    m_execution_role_isValid = ::OpenAPI::fromJsonValue(m_execution_role, json[QString("ExecutionRole")]);
    m_execution_role_isSet = !json[QString("ExecutionRole")].isNull() && m_execution_role_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_sharing_settings_isValid = ::OpenAPI::fromJsonValue(m_sharing_settings, json[QString("SharingSettings")]);
    m_sharing_settings_isSet = !json[QString("SharingSettings")].isNull() && m_sharing_settings_isValid;

    m_jupyter_server_app_settings_isValid = ::OpenAPI::fromJsonValue(m_jupyter_server_app_settings, json[QString("JupyterServerAppSettings")]);
    m_jupyter_server_app_settings_isSet = !json[QString("JupyterServerAppSettings")].isNull() && m_jupyter_server_app_settings_isValid;

    m_kernel_gateway_app_settings_isValid = ::OpenAPI::fromJsonValue(m_kernel_gateway_app_settings, json[QString("KernelGatewayAppSettings")]);
    m_kernel_gateway_app_settings_isSet = !json[QString("KernelGatewayAppSettings")].isNull() && m_kernel_gateway_app_settings_isValid;

    m_tensor_board_app_settings_isValid = ::OpenAPI::fromJsonValue(m_tensor_board_app_settings, json[QString("TensorBoardAppSettings")]);
    m_tensor_board_app_settings_isSet = !json[QString("TensorBoardAppSettings")].isNull() && m_tensor_board_app_settings_isValid;

    m_r_studio_server_pro_app_settings_isValid = ::OpenAPI::fromJsonValue(m_r_studio_server_pro_app_settings, json[QString("RStudioServerProAppSettings")]);
    m_r_studio_server_pro_app_settings_isSet = !json[QString("RStudioServerProAppSettings")].isNull() && m_r_studio_server_pro_app_settings_isValid;

    m_r_session_app_settings_isValid = ::OpenAPI::fromJsonValue(m_r_session_app_settings, json[QString("RSessionAppSettings")]);
    m_r_session_app_settings_isSet = !json[QString("RSessionAppSettings")].isNull() && m_r_session_app_settings_isValid;

    m_canvas_app_settings_isValid = ::OpenAPI::fromJsonValue(m_canvas_app_settings, json[QString("CanvasAppSettings")]);
    m_canvas_app_settings_isSet = !json[QString("CanvasAppSettings")].isNull() && m_canvas_app_settings_isValid;
}

QString OAIUserSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_role_isSet) {
        obj.insert(QString("ExecutionRole"), ::OpenAPI::toJsonValue(m_execution_role));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_sharing_settings.isSet()) {
        obj.insert(QString("SharingSettings"), ::OpenAPI::toJsonValue(m_sharing_settings));
    }
    if (m_jupyter_server_app_settings.isSet()) {
        obj.insert(QString("JupyterServerAppSettings"), ::OpenAPI::toJsonValue(m_jupyter_server_app_settings));
    }
    if (m_kernel_gateway_app_settings.isSet()) {
        obj.insert(QString("KernelGatewayAppSettings"), ::OpenAPI::toJsonValue(m_kernel_gateway_app_settings));
    }
    if (m_tensor_board_app_settings.isSet()) {
        obj.insert(QString("TensorBoardAppSettings"), ::OpenAPI::toJsonValue(m_tensor_board_app_settings));
    }
    if (m_r_studio_server_pro_app_settings.isSet()) {
        obj.insert(QString("RStudioServerProAppSettings"), ::OpenAPI::toJsonValue(m_r_studio_server_pro_app_settings));
    }
    if (m_r_session_app_settings.isSet()) {
        obj.insert(QString("RSessionAppSettings"), ::OpenAPI::toJsonValue(m_r_session_app_settings));
    }
    if (m_canvas_app_settings.isSet()) {
        obj.insert(QString("CanvasAppSettings"), ::OpenAPI::toJsonValue(m_canvas_app_settings));
    }
    return obj;
}

QString OAIUserSettings::getExecutionRole() const {
    return m_execution_role;
}
void OAIUserSettings::setExecutionRole(const QString &execution_role) {
    m_execution_role = execution_role;
    m_execution_role_isSet = true;
}

bool OAIUserSettings::is_execution_role_Set() const{
    return m_execution_role_isSet;
}

bool OAIUserSettings::is_execution_role_Valid() const{
    return m_execution_role_isValid;
}

QList OAIUserSettings::getSecurityGroups() const {
    return m_security_groups;
}
void OAIUserSettings::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIUserSettings::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIUserSettings::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

OAIUserSettings_SharingSettings OAIUserSettings::getSharingSettings() const {
    return m_sharing_settings;
}
void OAIUserSettings::setSharingSettings(const OAIUserSettings_SharingSettings &sharing_settings) {
    m_sharing_settings = sharing_settings;
    m_sharing_settings_isSet = true;
}

bool OAIUserSettings::is_sharing_settings_Set() const{
    return m_sharing_settings_isSet;
}

bool OAIUserSettings::is_sharing_settings_Valid() const{
    return m_sharing_settings_isValid;
}

OAIUserSettings_JupyterServerAppSettings OAIUserSettings::getJupyterServerAppSettings() const {
    return m_jupyter_server_app_settings;
}
void OAIUserSettings::setJupyterServerAppSettings(const OAIUserSettings_JupyterServerAppSettings &jupyter_server_app_settings) {
    m_jupyter_server_app_settings = jupyter_server_app_settings;
    m_jupyter_server_app_settings_isSet = true;
}

bool OAIUserSettings::is_jupyter_server_app_settings_Set() const{
    return m_jupyter_server_app_settings_isSet;
}

bool OAIUserSettings::is_jupyter_server_app_settings_Valid() const{
    return m_jupyter_server_app_settings_isValid;
}

OAIUserSettings_KernelGatewayAppSettings OAIUserSettings::getKernelGatewayAppSettings() const {
    return m_kernel_gateway_app_settings;
}
void OAIUserSettings::setKernelGatewayAppSettings(const OAIUserSettings_KernelGatewayAppSettings &kernel_gateway_app_settings) {
    m_kernel_gateway_app_settings = kernel_gateway_app_settings;
    m_kernel_gateway_app_settings_isSet = true;
}

bool OAIUserSettings::is_kernel_gateway_app_settings_Set() const{
    return m_kernel_gateway_app_settings_isSet;
}

bool OAIUserSettings::is_kernel_gateway_app_settings_Valid() const{
    return m_kernel_gateway_app_settings_isValid;
}

OAIUserSettings_TensorBoardAppSettings OAIUserSettings::getTensorBoardAppSettings() const {
    return m_tensor_board_app_settings;
}
void OAIUserSettings::setTensorBoardAppSettings(const OAIUserSettings_TensorBoardAppSettings &tensor_board_app_settings) {
    m_tensor_board_app_settings = tensor_board_app_settings;
    m_tensor_board_app_settings_isSet = true;
}

bool OAIUserSettings::is_tensor_board_app_settings_Set() const{
    return m_tensor_board_app_settings_isSet;
}

bool OAIUserSettings::is_tensor_board_app_settings_Valid() const{
    return m_tensor_board_app_settings_isValid;
}

OAIUserSettings_RStudioServerProAppSettings OAIUserSettings::getRStudioServerProAppSettings() const {
    return m_r_studio_server_pro_app_settings;
}
void OAIUserSettings::setRStudioServerProAppSettings(const OAIUserSettings_RStudioServerProAppSettings &r_studio_server_pro_app_settings) {
    m_r_studio_server_pro_app_settings = r_studio_server_pro_app_settings;
    m_r_studio_server_pro_app_settings_isSet = true;
}

bool OAIUserSettings::is_r_studio_server_pro_app_settings_Set() const{
    return m_r_studio_server_pro_app_settings_isSet;
}

bool OAIUserSettings::is_r_studio_server_pro_app_settings_Valid() const{
    return m_r_studio_server_pro_app_settings_isValid;
}

OAIUserSettings_RSessionAppSettings OAIUserSettings::getRSessionAppSettings() const {
    return m_r_session_app_settings;
}
void OAIUserSettings::setRSessionAppSettings(const OAIUserSettings_RSessionAppSettings &r_session_app_settings) {
    m_r_session_app_settings = r_session_app_settings;
    m_r_session_app_settings_isSet = true;
}

bool OAIUserSettings::is_r_session_app_settings_Set() const{
    return m_r_session_app_settings_isSet;
}

bool OAIUserSettings::is_r_session_app_settings_Valid() const{
    return m_r_session_app_settings_isValid;
}

OAIUserSettings_CanvasAppSettings OAIUserSettings::getCanvasAppSettings() const {
    return m_canvas_app_settings;
}
void OAIUserSettings::setCanvasAppSettings(const OAIUserSettings_CanvasAppSettings &canvas_app_settings) {
    m_canvas_app_settings = canvas_app_settings;
    m_canvas_app_settings_isSet = true;
}

bool OAIUserSettings::is_canvas_app_settings_Set() const{
    return m_canvas_app_settings_isSet;
}

bool OAIUserSettings::is_canvas_app_settings_Valid() const{
    return m_canvas_app_settings_isValid;
}

bool OAIUserSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jupyter_server_app_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kernel_gateway_app_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensor_board_app_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_studio_server_pro_app_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_session_app_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canvas_app_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
