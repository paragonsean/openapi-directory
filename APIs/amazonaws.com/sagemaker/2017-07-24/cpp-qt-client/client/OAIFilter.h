/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFilter.h
 *
 * &lt;p&gt;A conditional statement for a search expression that includes a resource property, a Boolean operator, and a value. Resources that match the statement are returned in the results from the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;Value&lt;/code&gt;, but not an &lt;code&gt;Operator&lt;/code&gt;, SageMaker uses the equals operator.&lt;/p&gt; &lt;p&gt;In search, there are several property types:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;Metrics&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;To define a metric filter, enter a value using the form &lt;code&gt;\&quot;Metrics.&amp;lt;name&amp;gt;\&quot;&lt;/code&gt;, where &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is a metric name. For example, the following filter searches for training jobs with an &lt;code&gt;\&quot;accuracy\&quot;&lt;/code&gt; metric greater than &lt;code&gt;\&quot;0.9\&quot;&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Name\&quot;: \&quot;Metrics.accuracy\&quot;,&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Operator\&quot;: \&quot;GreaterThan\&quot;,&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Value\&quot;: \&quot;0.9\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;}&lt;/code&gt; &lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;HyperParameters&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;To define a hyperparameter filter, enter a value with the form &lt;code&gt;\&quot;HyperParameters.&amp;lt;name&amp;gt;\&quot;&lt;/code&gt;. Decimal hyperparameter values are treated as a decimal in a comparison if the specified &lt;code&gt;Value&lt;/code&gt; is also a decimal value. If the specified &lt;code&gt;Value&lt;/code&gt; is an integer, the decimal hyperparameter values are treated as integers. For example, the following filter is satisfied by training jobs with a &lt;code&gt;\&quot;learning_rate\&quot;&lt;/code&gt; hyperparameter that is less than &lt;code&gt;\&quot;0.5\&quot;&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt; {&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; \&quot;Name\&quot;: \&quot;HyperParameters.learning_rate\&quot;,&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; \&quot;Operator\&quot;: \&quot;LessThan\&quot;,&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; \&quot;Value\&quot;: \&quot;0.5\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; }&lt;/code&gt; &lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Tags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;To define a tag filter, enter a value with the form &lt;code&gt;Tags.&amp;lt;key&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
 */

#ifndef OAIFilter_H
#define OAIFilter_H

#include <QJsonObject>

#include "OAIOperator.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFilter : public OAIObject {
public:
    OAIFilter();
    OAIFilter(QString json);
    ~OAIFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIOperator getROperator() const;
    void setROperator(const OAIOperator &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIOperator m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFilter)

#endif // OAIFilter_H
