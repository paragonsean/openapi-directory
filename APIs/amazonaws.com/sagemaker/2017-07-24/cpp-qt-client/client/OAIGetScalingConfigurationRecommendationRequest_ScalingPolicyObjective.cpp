/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective() {
    this->initializeModel();
}

OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::~OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective() {}

void OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::initializeModel() {

    m_min_invocations_per_minute_isSet = false;
    m_min_invocations_per_minute_isValid = false;

    m_max_invocations_per_minute_isSet = false;
    m_max_invocations_per_minute_isValid = false;
}

void OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::fromJsonObject(QJsonObject json) {

    m_min_invocations_per_minute_isValid = ::OpenAPI::fromJsonValue(m_min_invocations_per_minute, json[QString("MinInvocationsPerMinute")]);
    m_min_invocations_per_minute_isSet = !json[QString("MinInvocationsPerMinute")].isNull() && m_min_invocations_per_minute_isValid;

    m_max_invocations_per_minute_isValid = ::OpenAPI::fromJsonValue(m_max_invocations_per_minute, json[QString("MaxInvocationsPerMinute")]);
    m_max_invocations_per_minute_isSet = !json[QString("MaxInvocationsPerMinute")].isNull() && m_max_invocations_per_minute_isValid;
}

QString OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::asJsonObject() const {
    QJsonObject obj;
    if (m_min_invocations_per_minute_isSet) {
        obj.insert(QString("MinInvocationsPerMinute"), ::OpenAPI::toJsonValue(m_min_invocations_per_minute));
    }
    if (m_max_invocations_per_minute_isSet) {
        obj.insert(QString("MaxInvocationsPerMinute"), ::OpenAPI::toJsonValue(m_max_invocations_per_minute));
    }
    return obj;
}

qint32 OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::getMinInvocationsPerMinute() const {
    return m_min_invocations_per_minute;
}
void OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::setMinInvocationsPerMinute(const qint32 &min_invocations_per_minute) {
    m_min_invocations_per_minute = min_invocations_per_minute;
    m_min_invocations_per_minute_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::is_min_invocations_per_minute_Set() const{
    return m_min_invocations_per_minute_isSet;
}

bool OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::is_min_invocations_per_minute_Valid() const{
    return m_min_invocations_per_minute_isValid;
}

qint32 OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::getMaxInvocationsPerMinute() const {
    return m_max_invocations_per_minute;
}
void OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::setMaxInvocationsPerMinute(const qint32 &max_invocations_per_minute) {
    m_max_invocations_per_minute = max_invocations_per_minute;
    m_max_invocations_per_minute_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::is_max_invocations_per_minute_Set() const{
    return m_max_invocations_per_minute_isSet;
}

bool OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::is_max_invocations_per_minute_Valid() const{
    return m_max_invocations_per_minute_isValid;
}

bool OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_invocations_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_invocations_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetScalingConfigurationRecommendationRequest_ScalingPolicyObjective::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
