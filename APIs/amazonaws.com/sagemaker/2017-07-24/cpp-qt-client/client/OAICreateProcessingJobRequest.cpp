/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProcessingJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProcessingJobRequest::OAICreateProcessingJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProcessingJobRequest::OAICreateProcessingJobRequest() {
    this->initializeModel();
}

OAICreateProcessingJobRequest::~OAICreateProcessingJobRequest() {}

void OAICreateProcessingJobRequest::initializeModel() {

    m_processing_inputs_isSet = false;
    m_processing_inputs_isValid = false;

    m_processing_output_config_isSet = false;
    m_processing_output_config_isValid = false;

    m_processing_job_name_isSet = false;
    m_processing_job_name_isValid = false;

    m_processing_resources_isSet = false;
    m_processing_resources_isValid = false;

    m_stopping_condition_isSet = false;
    m_stopping_condition_isValid = false;

    m_app_specification_isSet = false;
    m_app_specification_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_experiment_config_isSet = false;
    m_experiment_config_isValid = false;
}

void OAICreateProcessingJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProcessingJobRequest::fromJsonObject(QJsonObject json) {

    m_processing_inputs_isValid = ::OpenAPI::fromJsonValue(m_processing_inputs, json[QString("ProcessingInputs")]);
    m_processing_inputs_isSet = !json[QString("ProcessingInputs")].isNull() && m_processing_inputs_isValid;

    m_processing_output_config_isValid = ::OpenAPI::fromJsonValue(m_processing_output_config, json[QString("ProcessingOutputConfig")]);
    m_processing_output_config_isSet = !json[QString("ProcessingOutputConfig")].isNull() && m_processing_output_config_isValid;

    m_processing_job_name_isValid = ::OpenAPI::fromJsonValue(m_processing_job_name, json[QString("ProcessingJobName")]);
    m_processing_job_name_isSet = !json[QString("ProcessingJobName")].isNull() && m_processing_job_name_isValid;

    m_processing_resources_isValid = ::OpenAPI::fromJsonValue(m_processing_resources, json[QString("ProcessingResources")]);
    m_processing_resources_isSet = !json[QString("ProcessingResources")].isNull() && m_processing_resources_isValid;

    m_stopping_condition_isValid = ::OpenAPI::fromJsonValue(m_stopping_condition, json[QString("StoppingCondition")]);
    m_stopping_condition_isSet = !json[QString("StoppingCondition")].isNull() && m_stopping_condition_isValid;

    m_app_specification_isValid = ::OpenAPI::fromJsonValue(m_app_specification, json[QString("AppSpecification")]);
    m_app_specification_isSet = !json[QString("AppSpecification")].isNull() && m_app_specification_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("NetworkConfig")]);
    m_network_config_isSet = !json[QString("NetworkConfig")].isNull() && m_network_config_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_experiment_config_isValid = ::OpenAPI::fromJsonValue(m_experiment_config, json[QString("ExperimentConfig")]);
    m_experiment_config_isSet = !json[QString("ExperimentConfig")].isNull() && m_experiment_config_isValid;
}

QString OAICreateProcessingJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProcessingJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_processing_inputs.isSet()) {
        obj.insert(QString("ProcessingInputs"), ::OpenAPI::toJsonValue(m_processing_inputs));
    }
    if (m_processing_output_config.isSet()) {
        obj.insert(QString("ProcessingOutputConfig"), ::OpenAPI::toJsonValue(m_processing_output_config));
    }
    if (m_processing_job_name_isSet) {
        obj.insert(QString("ProcessingJobName"), ::OpenAPI::toJsonValue(m_processing_job_name));
    }
    if (m_processing_resources.isSet()) {
        obj.insert(QString("ProcessingResources"), ::OpenAPI::toJsonValue(m_processing_resources));
    }
    if (m_stopping_condition.isSet()) {
        obj.insert(QString("StoppingCondition"), ::OpenAPI::toJsonValue(m_stopping_condition));
    }
    if (m_app_specification.isSet()) {
        obj.insert(QString("AppSpecification"), ::OpenAPI::toJsonValue(m_app_specification));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("NetworkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_experiment_config.isSet()) {
        obj.insert(QString("ExperimentConfig"), ::OpenAPI::toJsonValue(m_experiment_config));
    }
    return obj;
}

QList OAICreateProcessingJobRequest::getProcessingInputs() const {
    return m_processing_inputs;
}
void OAICreateProcessingJobRequest::setProcessingInputs(const QList &processing_inputs) {
    m_processing_inputs = processing_inputs;
    m_processing_inputs_isSet = true;
}

bool OAICreateProcessingJobRequest::is_processing_inputs_Set() const{
    return m_processing_inputs_isSet;
}

bool OAICreateProcessingJobRequest::is_processing_inputs_Valid() const{
    return m_processing_inputs_isValid;
}

OAICreateProcessingJobRequest_ProcessingOutputConfig OAICreateProcessingJobRequest::getProcessingOutputConfig() const {
    return m_processing_output_config;
}
void OAICreateProcessingJobRequest::setProcessingOutputConfig(const OAICreateProcessingJobRequest_ProcessingOutputConfig &processing_output_config) {
    m_processing_output_config = processing_output_config;
    m_processing_output_config_isSet = true;
}

bool OAICreateProcessingJobRequest::is_processing_output_config_Set() const{
    return m_processing_output_config_isSet;
}

bool OAICreateProcessingJobRequest::is_processing_output_config_Valid() const{
    return m_processing_output_config_isValid;
}

QString OAICreateProcessingJobRequest::getProcessingJobName() const {
    return m_processing_job_name;
}
void OAICreateProcessingJobRequest::setProcessingJobName(const QString &processing_job_name) {
    m_processing_job_name = processing_job_name;
    m_processing_job_name_isSet = true;
}

bool OAICreateProcessingJobRequest::is_processing_job_name_Set() const{
    return m_processing_job_name_isSet;
}

bool OAICreateProcessingJobRequest::is_processing_job_name_Valid() const{
    return m_processing_job_name_isValid;
}

OAICreateProcessingJobRequest_ProcessingResources OAICreateProcessingJobRequest::getProcessingResources() const {
    return m_processing_resources;
}
void OAICreateProcessingJobRequest::setProcessingResources(const OAICreateProcessingJobRequest_ProcessingResources &processing_resources) {
    m_processing_resources = processing_resources;
    m_processing_resources_isSet = true;
}

bool OAICreateProcessingJobRequest::is_processing_resources_Set() const{
    return m_processing_resources_isSet;
}

bool OAICreateProcessingJobRequest::is_processing_resources_Valid() const{
    return m_processing_resources_isValid;
}

OAICreateProcessingJobRequest_StoppingCondition OAICreateProcessingJobRequest::getStoppingCondition() const {
    return m_stopping_condition;
}
void OAICreateProcessingJobRequest::setStoppingCondition(const OAICreateProcessingJobRequest_StoppingCondition &stopping_condition) {
    m_stopping_condition = stopping_condition;
    m_stopping_condition_isSet = true;
}

bool OAICreateProcessingJobRequest::is_stopping_condition_Set() const{
    return m_stopping_condition_isSet;
}

bool OAICreateProcessingJobRequest::is_stopping_condition_Valid() const{
    return m_stopping_condition_isValid;
}

OAICreateProcessingJobRequest_AppSpecification OAICreateProcessingJobRequest::getAppSpecification() const {
    return m_app_specification;
}
void OAICreateProcessingJobRequest::setAppSpecification(const OAICreateProcessingJobRequest_AppSpecification &app_specification) {
    m_app_specification = app_specification;
    m_app_specification_isSet = true;
}

bool OAICreateProcessingJobRequest::is_app_specification_Set() const{
    return m_app_specification_isSet;
}

bool OAICreateProcessingJobRequest::is_app_specification_Valid() const{
    return m_app_specification_isValid;
}

QMap OAICreateProcessingJobRequest::getEnvironment() const {
    return m_environment;
}
void OAICreateProcessingJobRequest::setEnvironment(const QMap &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAICreateProcessingJobRequest::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAICreateProcessingJobRequest::is_environment_Valid() const{
    return m_environment_isValid;
}

OAICreateProcessingJobRequest_NetworkConfig OAICreateProcessingJobRequest::getNetworkConfig() const {
    return m_network_config;
}
void OAICreateProcessingJobRequest::setNetworkConfig(const OAICreateProcessingJobRequest_NetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAICreateProcessingJobRequest::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAICreateProcessingJobRequest::is_network_config_Valid() const{
    return m_network_config_isValid;
}

QString OAICreateProcessingJobRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateProcessingJobRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateProcessingJobRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateProcessingJobRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAICreateProcessingJobRequest::getTags() const {
    return m_tags;
}
void OAICreateProcessingJobRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateProcessingJobRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateProcessingJobRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIExperimentConfig OAICreateProcessingJobRequest::getExperimentConfig() const {
    return m_experiment_config;
}
void OAICreateProcessingJobRequest::setExperimentConfig(const OAIExperimentConfig &experiment_config) {
    m_experiment_config = experiment_config;
    m_experiment_config_isSet = true;
}

bool OAICreateProcessingJobRequest::is_experiment_config_Set() const{
    return m_experiment_config_isSet;
}

bool OAICreateProcessingJobRequest::is_experiment_config_Valid() const{
    return m_experiment_config_isValid;
}

bool OAICreateProcessingJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_processing_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProcessingJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_processing_job_name_isValid && m_processing_resources_isValid && m_app_specification_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
