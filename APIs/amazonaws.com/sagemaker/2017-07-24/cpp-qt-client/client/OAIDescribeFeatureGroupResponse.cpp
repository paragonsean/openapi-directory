/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeFeatureGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeFeatureGroupResponse::OAIDescribeFeatureGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeFeatureGroupResponse::OAIDescribeFeatureGroupResponse() {
    this->initializeModel();
}

OAIDescribeFeatureGroupResponse::~OAIDescribeFeatureGroupResponse() {}

void OAIDescribeFeatureGroupResponse::initializeModel() {

    m_feature_group_arn_isSet = false;
    m_feature_group_arn_isValid = false;

    m_feature_group_name_isSet = false;
    m_feature_group_name_isValid = false;

    m_record_identifier_feature_name_isSet = false;
    m_record_identifier_feature_name_isValid = false;

    m_event_time_feature_name_isSet = false;
    m_event_time_feature_name_isValid = false;

    m_feature_definitions_isSet = false;
    m_feature_definitions_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_online_store_config_isSet = false;
    m_online_store_config_isValid = false;

    m_offline_store_config_isSet = false;
    m_offline_store_config_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_feature_group_status_isSet = false;
    m_feature_group_status_isValid = false;

    m_offline_store_status_isSet = false;
    m_offline_store_status_isValid = false;

    m_last_update_status_isSet = false;
    m_last_update_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_online_store_total_size_bytes_isSet = false;
    m_online_store_total_size_bytes_isValid = false;
}

void OAIDescribeFeatureGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeFeatureGroupResponse::fromJsonObject(QJsonObject json) {

    m_feature_group_arn_isValid = ::OpenAPI::fromJsonValue(m_feature_group_arn, json[QString("FeatureGroupArn")]);
    m_feature_group_arn_isSet = !json[QString("FeatureGroupArn")].isNull() && m_feature_group_arn_isValid;

    m_feature_group_name_isValid = ::OpenAPI::fromJsonValue(m_feature_group_name, json[QString("FeatureGroupName")]);
    m_feature_group_name_isSet = !json[QString("FeatureGroupName")].isNull() && m_feature_group_name_isValid;

    m_record_identifier_feature_name_isValid = ::OpenAPI::fromJsonValue(m_record_identifier_feature_name, json[QString("RecordIdentifierFeatureName")]);
    m_record_identifier_feature_name_isSet = !json[QString("RecordIdentifierFeatureName")].isNull() && m_record_identifier_feature_name_isValid;

    m_event_time_feature_name_isValid = ::OpenAPI::fromJsonValue(m_event_time_feature_name, json[QString("EventTimeFeatureName")]);
    m_event_time_feature_name_isSet = !json[QString("EventTimeFeatureName")].isNull() && m_event_time_feature_name_isValid;

    m_feature_definitions_isValid = ::OpenAPI::fromJsonValue(m_feature_definitions, json[QString("FeatureDefinitions")]);
    m_feature_definitions_isSet = !json[QString("FeatureDefinitions")].isNull() && m_feature_definitions_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_online_store_config_isValid = ::OpenAPI::fromJsonValue(m_online_store_config, json[QString("OnlineStoreConfig")]);
    m_online_store_config_isSet = !json[QString("OnlineStoreConfig")].isNull() && m_online_store_config_isValid;

    m_offline_store_config_isValid = ::OpenAPI::fromJsonValue(m_offline_store_config, json[QString("OfflineStoreConfig")]);
    m_offline_store_config_isSet = !json[QString("OfflineStoreConfig")].isNull() && m_offline_store_config_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_feature_group_status_isValid = ::OpenAPI::fromJsonValue(m_feature_group_status, json[QString("FeatureGroupStatus")]);
    m_feature_group_status_isSet = !json[QString("FeatureGroupStatus")].isNull() && m_feature_group_status_isValid;

    m_offline_store_status_isValid = ::OpenAPI::fromJsonValue(m_offline_store_status, json[QString("OfflineStoreStatus")]);
    m_offline_store_status_isSet = !json[QString("OfflineStoreStatus")].isNull() && m_offline_store_status_isValid;

    m_last_update_status_isValid = ::OpenAPI::fromJsonValue(m_last_update_status, json[QString("LastUpdateStatus")]);
    m_last_update_status_isSet = !json[QString("LastUpdateStatus")].isNull() && m_last_update_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_online_store_total_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_online_store_total_size_bytes, json[QString("OnlineStoreTotalSizeBytes")]);
    m_online_store_total_size_bytes_isSet = !json[QString("OnlineStoreTotalSizeBytes")].isNull() && m_online_store_total_size_bytes_isValid;
}

QString OAIDescribeFeatureGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeFeatureGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_group_arn_isSet) {
        obj.insert(QString("FeatureGroupArn"), ::OpenAPI::toJsonValue(m_feature_group_arn));
    }
    if (m_feature_group_name_isSet) {
        obj.insert(QString("FeatureGroupName"), ::OpenAPI::toJsonValue(m_feature_group_name));
    }
    if (m_record_identifier_feature_name_isSet) {
        obj.insert(QString("RecordIdentifierFeatureName"), ::OpenAPI::toJsonValue(m_record_identifier_feature_name));
    }
    if (m_event_time_feature_name_isSet) {
        obj.insert(QString("EventTimeFeatureName"), ::OpenAPI::toJsonValue(m_event_time_feature_name));
    }
    if (m_feature_definitions.isSet()) {
        obj.insert(QString("FeatureDefinitions"), ::OpenAPI::toJsonValue(m_feature_definitions));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_online_store_config.isSet()) {
        obj.insert(QString("OnlineStoreConfig"), ::OpenAPI::toJsonValue(m_online_store_config));
    }
    if (m_offline_store_config.isSet()) {
        obj.insert(QString("OfflineStoreConfig"), ::OpenAPI::toJsonValue(m_offline_store_config));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_feature_group_status.isSet()) {
        obj.insert(QString("FeatureGroupStatus"), ::OpenAPI::toJsonValue(m_feature_group_status));
    }
    if (m_offline_store_status.isSet()) {
        obj.insert(QString("OfflineStoreStatus"), ::OpenAPI::toJsonValue(m_offline_store_status));
    }
    if (m_last_update_status.isSet()) {
        obj.insert(QString("LastUpdateStatus"), ::OpenAPI::toJsonValue(m_last_update_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_online_store_total_size_bytes_isSet) {
        obj.insert(QString("OnlineStoreTotalSizeBytes"), ::OpenAPI::toJsonValue(m_online_store_total_size_bytes));
    }
    return obj;
}

QString OAIDescribeFeatureGroupResponse::getFeatureGroupArn() const {
    return m_feature_group_arn;
}
void OAIDescribeFeatureGroupResponse::setFeatureGroupArn(const QString &feature_group_arn) {
    m_feature_group_arn = feature_group_arn;
    m_feature_group_arn_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_feature_group_arn_Set() const{
    return m_feature_group_arn_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_feature_group_arn_Valid() const{
    return m_feature_group_arn_isValid;
}

QString OAIDescribeFeatureGroupResponse::getFeatureGroupName() const {
    return m_feature_group_name;
}
void OAIDescribeFeatureGroupResponse::setFeatureGroupName(const QString &feature_group_name) {
    m_feature_group_name = feature_group_name;
    m_feature_group_name_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_feature_group_name_Set() const{
    return m_feature_group_name_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_feature_group_name_Valid() const{
    return m_feature_group_name_isValid;
}

QString OAIDescribeFeatureGroupResponse::getRecordIdentifierFeatureName() const {
    return m_record_identifier_feature_name;
}
void OAIDescribeFeatureGroupResponse::setRecordIdentifierFeatureName(const QString &record_identifier_feature_name) {
    m_record_identifier_feature_name = record_identifier_feature_name;
    m_record_identifier_feature_name_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_record_identifier_feature_name_Set() const{
    return m_record_identifier_feature_name_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_record_identifier_feature_name_Valid() const{
    return m_record_identifier_feature_name_isValid;
}

QString OAIDescribeFeatureGroupResponse::getEventTimeFeatureName() const {
    return m_event_time_feature_name;
}
void OAIDescribeFeatureGroupResponse::setEventTimeFeatureName(const QString &event_time_feature_name) {
    m_event_time_feature_name = event_time_feature_name;
    m_event_time_feature_name_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_event_time_feature_name_Set() const{
    return m_event_time_feature_name_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_event_time_feature_name_Valid() const{
    return m_event_time_feature_name_isValid;
}

QList OAIDescribeFeatureGroupResponse::getFeatureDefinitions() const {
    return m_feature_definitions;
}
void OAIDescribeFeatureGroupResponse::setFeatureDefinitions(const QList &feature_definitions) {
    m_feature_definitions = feature_definitions;
    m_feature_definitions_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_feature_definitions_Set() const{
    return m_feature_definitions_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_feature_definitions_Valid() const{
    return m_feature_definitions_isValid;
}

QDateTime OAIDescribeFeatureGroupResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeFeatureGroupResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeFeatureGroupResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeFeatureGroupResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIDescribeFeatureGroupResponse_OnlineStoreConfig OAIDescribeFeatureGroupResponse::getOnlineStoreConfig() const {
    return m_online_store_config;
}
void OAIDescribeFeatureGroupResponse::setOnlineStoreConfig(const OAIDescribeFeatureGroupResponse_OnlineStoreConfig &online_store_config) {
    m_online_store_config = online_store_config;
    m_online_store_config_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_online_store_config_Set() const{
    return m_online_store_config_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_online_store_config_Valid() const{
    return m_online_store_config_isValid;
}

OAIDescribeFeatureGroupResponse_OfflineStoreConfig OAIDescribeFeatureGroupResponse::getOfflineStoreConfig() const {
    return m_offline_store_config;
}
void OAIDescribeFeatureGroupResponse::setOfflineStoreConfig(const OAIDescribeFeatureGroupResponse_OfflineStoreConfig &offline_store_config) {
    m_offline_store_config = offline_store_config;
    m_offline_store_config_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_offline_store_config_Set() const{
    return m_offline_store_config_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_offline_store_config_Valid() const{
    return m_offline_store_config_isValid;
}

QString OAIDescribeFeatureGroupResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeFeatureGroupResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIFeatureGroupStatus OAIDescribeFeatureGroupResponse::getFeatureGroupStatus() const {
    return m_feature_group_status;
}
void OAIDescribeFeatureGroupResponse::setFeatureGroupStatus(const OAIFeatureGroupStatus &feature_group_status) {
    m_feature_group_status = feature_group_status;
    m_feature_group_status_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_feature_group_status_Set() const{
    return m_feature_group_status_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_feature_group_status_Valid() const{
    return m_feature_group_status_isValid;
}

OAIDescribeFeatureGroupResponse_OfflineStoreStatus OAIDescribeFeatureGroupResponse::getOfflineStoreStatus() const {
    return m_offline_store_status;
}
void OAIDescribeFeatureGroupResponse::setOfflineStoreStatus(const OAIDescribeFeatureGroupResponse_OfflineStoreStatus &offline_store_status) {
    m_offline_store_status = offline_store_status;
    m_offline_store_status_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_offline_store_status_Set() const{
    return m_offline_store_status_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_offline_store_status_Valid() const{
    return m_offline_store_status_isValid;
}

OAIDescribeFeatureGroupResponse_LastUpdateStatus OAIDescribeFeatureGroupResponse::getLastUpdateStatus() const {
    return m_last_update_status;
}
void OAIDescribeFeatureGroupResponse::setLastUpdateStatus(const OAIDescribeFeatureGroupResponse_LastUpdateStatus &last_update_status) {
    m_last_update_status = last_update_status;
    m_last_update_status_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_last_update_status_Set() const{
    return m_last_update_status_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_last_update_status_Valid() const{
    return m_last_update_status_isValid;
}

QString OAIDescribeFeatureGroupResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIDescribeFeatureGroupResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIDescribeFeatureGroupResponse::getDescription() const {
    return m_description;
}
void OAIDescribeFeatureGroupResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeFeatureGroupResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeFeatureGroupResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeFeatureGroupResponse::getOnlineStoreTotalSizeBytes() const {
    return m_online_store_total_size_bytes;
}
void OAIDescribeFeatureGroupResponse::setOnlineStoreTotalSizeBytes(const qint32 &online_store_total_size_bytes) {
    m_online_store_total_size_bytes = online_store_total_size_bytes;
    m_online_store_total_size_bytes_isSet = true;
}

bool OAIDescribeFeatureGroupResponse::is_online_store_total_size_bytes_Set() const{
    return m_online_store_total_size_bytes_isSet;
}

bool OAIDescribeFeatureGroupResponse::is_online_store_total_size_bytes_Valid() const{
    return m_online_store_total_size_bytes_isValid;
}

bool OAIDescribeFeatureGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_identifier_feature_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_feature_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_store_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_store_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_group_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_store_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_store_total_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeFeatureGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_feature_group_arn_isValid && m_feature_group_name_isValid && m_record_identifier_feature_name_isValid && m_event_time_feature_name_isValid && m_feature_definitions_isValid && m_creation_time_isValid && m_next_token_isValid && true;
}

} // namespace OpenAPI
