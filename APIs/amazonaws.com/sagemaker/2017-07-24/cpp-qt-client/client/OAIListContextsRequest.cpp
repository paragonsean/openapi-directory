/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListContextsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListContextsRequest::OAIListContextsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListContextsRequest::OAIListContextsRequest() {
    this->initializeModel();
}

OAIListContextsRequest::~OAIListContextsRequest() {}

void OAIListContextsRequest::initializeModel() {

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;

    m_context_type_isSet = false;
    m_context_type_isValid = false;

    m_created_after_isSet = false;
    m_created_after_isValid = false;

    m_created_before_isSet = false;
    m_created_before_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListContextsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListContextsRequest::fromJsonObject(QJsonObject json) {

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("SourceUri")]);
    m_source_uri_isSet = !json[QString("SourceUri")].isNull() && m_source_uri_isValid;

    m_context_type_isValid = ::OpenAPI::fromJsonValue(m_context_type, json[QString("ContextType")]);
    m_context_type_isSet = !json[QString("ContextType")].isNull() && m_context_type_isValid;

    m_created_after_isValid = ::OpenAPI::fromJsonValue(m_created_after, json[QString("CreatedAfter")]);
    m_created_after_isSet = !json[QString("CreatedAfter")].isNull() && m_created_after_isValid;

    m_created_before_isValid = ::OpenAPI::fromJsonValue(m_created_before, json[QString("CreatedBefore")]);
    m_created_before_isSet = !json[QString("CreatedBefore")].isNull() && m_created_before_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListContextsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListContextsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_source_uri_isSet) {
        obj.insert(QString("SourceUri"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    if (m_context_type_isSet) {
        obj.insert(QString("ContextType"), ::OpenAPI::toJsonValue(m_context_type));
    }
    if (m_created_after_isSet) {
        obj.insert(QString("CreatedAfter"), ::OpenAPI::toJsonValue(m_created_after));
    }
    if (m_created_before_isSet) {
        obj.insert(QString("CreatedBefore"), ::OpenAPI::toJsonValue(m_created_before));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListContextsRequest::getSourceUri() const {
    return m_source_uri;
}
void OAIListContextsRequest::setSourceUri(const QString &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAIListContextsRequest::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAIListContextsRequest::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

QString OAIListContextsRequest::getContextType() const {
    return m_context_type;
}
void OAIListContextsRequest::setContextType(const QString &context_type) {
    m_context_type = context_type;
    m_context_type_isSet = true;
}

bool OAIListContextsRequest::is_context_type_Set() const{
    return m_context_type_isSet;
}

bool OAIListContextsRequest::is_context_type_Valid() const{
    return m_context_type_isValid;
}

QDateTime OAIListContextsRequest::getCreatedAfter() const {
    return m_created_after;
}
void OAIListContextsRequest::setCreatedAfter(const QDateTime &created_after) {
    m_created_after = created_after;
    m_created_after_isSet = true;
}

bool OAIListContextsRequest::is_created_after_Set() const{
    return m_created_after_isSet;
}

bool OAIListContextsRequest::is_created_after_Valid() const{
    return m_created_after_isValid;
}

QDateTime OAIListContextsRequest::getCreatedBefore() const {
    return m_created_before;
}
void OAIListContextsRequest::setCreatedBefore(const QDateTime &created_before) {
    m_created_before = created_before;
    m_created_before_isSet = true;
}

bool OAIListContextsRequest::is_created_before_Set() const{
    return m_created_before_isSet;
}

bool OAIListContextsRequest::is_created_before_Valid() const{
    return m_created_before_isValid;
}

OAISortContextsBy OAIListContextsRequest::getSortBy() const {
    return m_sort_by;
}
void OAIListContextsRequest::setSortBy(const OAISortContextsBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListContextsRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListContextsRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIListContextsRequest::getSortOrder() const {
    return m_sort_order;
}
void OAIListContextsRequest::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListContextsRequest::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListContextsRequest::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIListContextsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListContextsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListContextsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListContextsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListContextsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListContextsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListContextsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListContextsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListContextsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListContextsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
