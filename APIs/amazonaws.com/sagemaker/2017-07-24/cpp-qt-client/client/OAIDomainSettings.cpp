/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainSettings::OAIDomainSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainSettings::OAIDomainSettings() {
    this->initializeModel();
}

OAIDomainSettings::~OAIDomainSettings() {}

void OAIDomainSettings::initializeModel() {

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_r_studio_server_pro_domain_settings_isSet = false;
    m_r_studio_server_pro_domain_settings_isValid = false;

    m_execution_role_identity_config_isSet = false;
    m_execution_role_identity_config_isValid = false;
}

void OAIDomainSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainSettings::fromJsonObject(QJsonObject json) {

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_r_studio_server_pro_domain_settings_isValid = ::OpenAPI::fromJsonValue(m_r_studio_server_pro_domain_settings, json[QString("RStudioServerProDomainSettings")]);
    m_r_studio_server_pro_domain_settings_isSet = !json[QString("RStudioServerProDomainSettings")].isNull() && m_r_studio_server_pro_domain_settings_isValid;

    m_execution_role_identity_config_isValid = ::OpenAPI::fromJsonValue(m_execution_role_identity_config, json[QString("ExecutionRoleIdentityConfig")]);
    m_execution_role_identity_config_isSet = !json[QString("ExecutionRoleIdentityConfig")].isNull() && m_execution_role_identity_config_isValid;
}

QString OAIDomainSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_r_studio_server_pro_domain_settings.isSet()) {
        obj.insert(QString("RStudioServerProDomainSettings"), ::OpenAPI::toJsonValue(m_r_studio_server_pro_domain_settings));
    }
    if (m_execution_role_identity_config.isSet()) {
        obj.insert(QString("ExecutionRoleIdentityConfig"), ::OpenAPI::toJsonValue(m_execution_role_identity_config));
    }
    return obj;
}

QList OAIDomainSettings::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIDomainSettings::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIDomainSettings::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIDomainSettings::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

OAIDomainSettings_RStudioServerProDomainSettings OAIDomainSettings::getRStudioServerProDomainSettings() const {
    return m_r_studio_server_pro_domain_settings;
}
void OAIDomainSettings::setRStudioServerProDomainSettings(const OAIDomainSettings_RStudioServerProDomainSettings &r_studio_server_pro_domain_settings) {
    m_r_studio_server_pro_domain_settings = r_studio_server_pro_domain_settings;
    m_r_studio_server_pro_domain_settings_isSet = true;
}

bool OAIDomainSettings::is_r_studio_server_pro_domain_settings_Set() const{
    return m_r_studio_server_pro_domain_settings_isSet;
}

bool OAIDomainSettings::is_r_studio_server_pro_domain_settings_Valid() const{
    return m_r_studio_server_pro_domain_settings_isValid;
}

OAIExecutionRoleIdentityConfig OAIDomainSettings::getExecutionRoleIdentityConfig() const {
    return m_execution_role_identity_config;
}
void OAIDomainSettings::setExecutionRoleIdentityConfig(const OAIExecutionRoleIdentityConfig &execution_role_identity_config) {
    m_execution_role_identity_config = execution_role_identity_config;
    m_execution_role_identity_config_isSet = true;
}

bool OAIDomainSettings::is_execution_role_identity_config_Set() const{
    return m_execution_role_identity_config_isSet;
}

bool OAIDomainSettings::is_execution_role_identity_config_Valid() const{
    return m_execution_role_identity_config_isValid;
}

bool OAIDomainSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_studio_server_pro_domain_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_identity_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
