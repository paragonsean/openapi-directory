/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectStatus::OAIProjectStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectStatus::OAIProjectStatus() {
    this->initializeModel();
}

OAIProjectStatus::~OAIProjectStatus() {}

void OAIProjectStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProjectStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProjectStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CreateInProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::CREATEINPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CreateCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::CREATECOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CreateFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::CREATEFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeleteInProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::DELETEINPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeleteFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::DELETEFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeleteCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::DELETECOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdateInProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::UPDATEINPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdateCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::UPDATECOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdateFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProjectStatus::UPDATEFAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProjectStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProjectStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProjectStatus::PENDING:
            val = "Pending";
            break;
        case eOAIProjectStatus::CREATEINPROGRESS:
            val = "CreateInProgress";
            break;
        case eOAIProjectStatus::CREATECOMPLETED:
            val = "CreateCompleted";
            break;
        case eOAIProjectStatus::CREATEFAILED:
            val = "CreateFailed";
            break;
        case eOAIProjectStatus::DELETEINPROGRESS:
            val = "DeleteInProgress";
            break;
        case eOAIProjectStatus::DELETEFAILED:
            val = "DeleteFailed";
            break;
        case eOAIProjectStatus::DELETECOMPLETED:
            val = "DeleteCompleted";
            break;
        case eOAIProjectStatus::UPDATEINPROGRESS:
            val = "UpdateInProgress";
            break;
        case eOAIProjectStatus::UPDATECOMPLETED:
            val = "UpdateCompleted";
            break;
        case eOAIProjectStatus::UPDATEFAILED:
            val = "UpdateFailed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProjectStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProjectStatus::eOAIProjectStatus OAIProjectStatus::getValue() const {
    return m_value;
}

void OAIProjectStatus::setValue(const OAIProjectStatus::eOAIProjectStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProjectStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIProjectStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
