/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNotebookInstanceInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNotebookInstanceInput::OAIUpdateNotebookInstanceInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNotebookInstanceInput::OAIUpdateNotebookInstanceInput() {
    this->initializeModel();
}

OAIUpdateNotebookInstanceInput::~OAIUpdateNotebookInstanceInput() {}

void OAIUpdateNotebookInstanceInput::initializeModel() {

    m_notebook_instance_name_isSet = false;
    m_notebook_instance_name_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_lifecycle_config_name_isSet = false;
    m_lifecycle_config_name_isValid = false;

    m_disassociate_lifecycle_config_isSet = false;
    m_disassociate_lifecycle_config_isValid = false;

    m_volume_size_in_gb_isSet = false;
    m_volume_size_in_gb_isValid = false;

    m_default_code_repository_isSet = false;
    m_default_code_repository_isValid = false;

    m_additional_code_repositories_isSet = false;
    m_additional_code_repositories_isValid = false;

    m_accelerator_types_isSet = false;
    m_accelerator_types_isValid = false;

    m_disassociate_accelerator_types_isSet = false;
    m_disassociate_accelerator_types_isValid = false;

    m_disassociate_default_code_repository_isSet = false;
    m_disassociate_default_code_repository_isValid = false;

    m_disassociate_additional_code_repositories_isSet = false;
    m_disassociate_additional_code_repositories_isValid = false;

    m_root_access_isSet = false;
    m_root_access_isValid = false;

    m_instance_metadata_service_configuration_isSet = false;
    m_instance_metadata_service_configuration_isValid = false;
}

void OAIUpdateNotebookInstanceInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNotebookInstanceInput::fromJsonObject(QJsonObject json) {

    m_notebook_instance_name_isValid = ::OpenAPI::fromJsonValue(m_notebook_instance_name, json[QString("NotebookInstanceName")]);
    m_notebook_instance_name_isSet = !json[QString("NotebookInstanceName")].isNull() && m_notebook_instance_name_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_lifecycle_config_name_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_config_name, json[QString("LifecycleConfigName")]);
    m_lifecycle_config_name_isSet = !json[QString("LifecycleConfigName")].isNull() && m_lifecycle_config_name_isValid;

    m_disassociate_lifecycle_config_isValid = ::OpenAPI::fromJsonValue(m_disassociate_lifecycle_config, json[QString("DisassociateLifecycleConfig")]);
    m_disassociate_lifecycle_config_isSet = !json[QString("DisassociateLifecycleConfig")].isNull() && m_disassociate_lifecycle_config_isValid;

    m_volume_size_in_gb_isValid = ::OpenAPI::fromJsonValue(m_volume_size_in_gb, json[QString("VolumeSizeInGB")]);
    m_volume_size_in_gb_isSet = !json[QString("VolumeSizeInGB")].isNull() && m_volume_size_in_gb_isValid;

    m_default_code_repository_isValid = ::OpenAPI::fromJsonValue(m_default_code_repository, json[QString("DefaultCodeRepository")]);
    m_default_code_repository_isSet = !json[QString("DefaultCodeRepository")].isNull() && m_default_code_repository_isValid;

    m_additional_code_repositories_isValid = ::OpenAPI::fromJsonValue(m_additional_code_repositories, json[QString("AdditionalCodeRepositories")]);
    m_additional_code_repositories_isSet = !json[QString("AdditionalCodeRepositories")].isNull() && m_additional_code_repositories_isValid;

    m_accelerator_types_isValid = ::OpenAPI::fromJsonValue(m_accelerator_types, json[QString("AcceleratorTypes")]);
    m_accelerator_types_isSet = !json[QString("AcceleratorTypes")].isNull() && m_accelerator_types_isValid;

    m_disassociate_accelerator_types_isValid = ::OpenAPI::fromJsonValue(m_disassociate_accelerator_types, json[QString("DisassociateAcceleratorTypes")]);
    m_disassociate_accelerator_types_isSet = !json[QString("DisassociateAcceleratorTypes")].isNull() && m_disassociate_accelerator_types_isValid;

    m_disassociate_default_code_repository_isValid = ::OpenAPI::fromJsonValue(m_disassociate_default_code_repository, json[QString("DisassociateDefaultCodeRepository")]);
    m_disassociate_default_code_repository_isSet = !json[QString("DisassociateDefaultCodeRepository")].isNull() && m_disassociate_default_code_repository_isValid;

    m_disassociate_additional_code_repositories_isValid = ::OpenAPI::fromJsonValue(m_disassociate_additional_code_repositories, json[QString("DisassociateAdditionalCodeRepositories")]);
    m_disassociate_additional_code_repositories_isSet = !json[QString("DisassociateAdditionalCodeRepositories")].isNull() && m_disassociate_additional_code_repositories_isValid;

    m_root_access_isValid = ::OpenAPI::fromJsonValue(m_root_access, json[QString("RootAccess")]);
    m_root_access_isSet = !json[QString("RootAccess")].isNull() && m_root_access_isValid;

    m_instance_metadata_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_instance_metadata_service_configuration, json[QString("InstanceMetadataServiceConfiguration")]);
    m_instance_metadata_service_configuration_isSet = !json[QString("InstanceMetadataServiceConfiguration")].isNull() && m_instance_metadata_service_configuration_isValid;
}

QString OAIUpdateNotebookInstanceInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNotebookInstanceInput::asJsonObject() const {
    QJsonObject obj;
    if (m_notebook_instance_name_isSet) {
        obj.insert(QString("NotebookInstanceName"), ::OpenAPI::toJsonValue(m_notebook_instance_name));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_lifecycle_config_name_isSet) {
        obj.insert(QString("LifecycleConfigName"), ::OpenAPI::toJsonValue(m_lifecycle_config_name));
    }
    if (m_disassociate_lifecycle_config_isSet) {
        obj.insert(QString("DisassociateLifecycleConfig"), ::OpenAPI::toJsonValue(m_disassociate_lifecycle_config));
    }
    if (m_volume_size_in_gb_isSet) {
        obj.insert(QString("VolumeSizeInGB"), ::OpenAPI::toJsonValue(m_volume_size_in_gb));
    }
    if (m_default_code_repository_isSet) {
        obj.insert(QString("DefaultCodeRepository"), ::OpenAPI::toJsonValue(m_default_code_repository));
    }
    if (m_additional_code_repositories.isSet()) {
        obj.insert(QString("AdditionalCodeRepositories"), ::OpenAPI::toJsonValue(m_additional_code_repositories));
    }
    if (m_accelerator_types.isSet()) {
        obj.insert(QString("AcceleratorTypes"), ::OpenAPI::toJsonValue(m_accelerator_types));
    }
    if (m_disassociate_accelerator_types_isSet) {
        obj.insert(QString("DisassociateAcceleratorTypes"), ::OpenAPI::toJsonValue(m_disassociate_accelerator_types));
    }
    if (m_disassociate_default_code_repository_isSet) {
        obj.insert(QString("DisassociateDefaultCodeRepository"), ::OpenAPI::toJsonValue(m_disassociate_default_code_repository));
    }
    if (m_disassociate_additional_code_repositories_isSet) {
        obj.insert(QString("DisassociateAdditionalCodeRepositories"), ::OpenAPI::toJsonValue(m_disassociate_additional_code_repositories));
    }
    if (m_root_access.isSet()) {
        obj.insert(QString("RootAccess"), ::OpenAPI::toJsonValue(m_root_access));
    }
    if (m_instance_metadata_service_configuration.isSet()) {
        obj.insert(QString("InstanceMetadataServiceConfiguration"), ::OpenAPI::toJsonValue(m_instance_metadata_service_configuration));
    }
    return obj;
}

QString OAIUpdateNotebookInstanceInput::getNotebookInstanceName() const {
    return m_notebook_instance_name;
}
void OAIUpdateNotebookInstanceInput::setNotebookInstanceName(const QString &notebook_instance_name) {
    m_notebook_instance_name = notebook_instance_name;
    m_notebook_instance_name_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_notebook_instance_name_Set() const{
    return m_notebook_instance_name_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_notebook_instance_name_Valid() const{
    return m_notebook_instance_name_isValid;
}

OAIInstanceType OAIUpdateNotebookInstanceInput::getInstanceType() const {
    return m_instance_type;
}
void OAIUpdateNotebookInstanceInput::setInstanceType(const OAIInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIUpdateNotebookInstanceInput::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateNotebookInstanceInput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIUpdateNotebookInstanceInput::getLifecycleConfigName() const {
    return m_lifecycle_config_name;
}
void OAIUpdateNotebookInstanceInput::setLifecycleConfigName(const QString &lifecycle_config_name) {
    m_lifecycle_config_name = lifecycle_config_name;
    m_lifecycle_config_name_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_lifecycle_config_name_Set() const{
    return m_lifecycle_config_name_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_lifecycle_config_name_Valid() const{
    return m_lifecycle_config_name_isValid;
}

bool OAIUpdateNotebookInstanceInput::getDisassociateLifecycleConfig() const {
    return m_disassociate_lifecycle_config;
}
void OAIUpdateNotebookInstanceInput::setDisassociateLifecycleConfig(const bool &disassociate_lifecycle_config) {
    m_disassociate_lifecycle_config = disassociate_lifecycle_config;
    m_disassociate_lifecycle_config_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_disassociate_lifecycle_config_Set() const{
    return m_disassociate_lifecycle_config_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_disassociate_lifecycle_config_Valid() const{
    return m_disassociate_lifecycle_config_isValid;
}

qint32 OAIUpdateNotebookInstanceInput::getVolumeSizeInGb() const {
    return m_volume_size_in_gb;
}
void OAIUpdateNotebookInstanceInput::setVolumeSizeInGb(const qint32 &volume_size_in_gb) {
    m_volume_size_in_gb = volume_size_in_gb;
    m_volume_size_in_gb_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_volume_size_in_gb_Set() const{
    return m_volume_size_in_gb_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_volume_size_in_gb_Valid() const{
    return m_volume_size_in_gb_isValid;
}

QString OAIUpdateNotebookInstanceInput::getDefaultCodeRepository() const {
    return m_default_code_repository;
}
void OAIUpdateNotebookInstanceInput::setDefaultCodeRepository(const QString &default_code_repository) {
    m_default_code_repository = default_code_repository;
    m_default_code_repository_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_default_code_repository_Set() const{
    return m_default_code_repository_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_default_code_repository_Valid() const{
    return m_default_code_repository_isValid;
}

QList OAIUpdateNotebookInstanceInput::getAdditionalCodeRepositories() const {
    return m_additional_code_repositories;
}
void OAIUpdateNotebookInstanceInput::setAdditionalCodeRepositories(const QList &additional_code_repositories) {
    m_additional_code_repositories = additional_code_repositories;
    m_additional_code_repositories_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_additional_code_repositories_Set() const{
    return m_additional_code_repositories_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_additional_code_repositories_Valid() const{
    return m_additional_code_repositories_isValid;
}

QList OAIUpdateNotebookInstanceInput::getAcceleratorTypes() const {
    return m_accelerator_types;
}
void OAIUpdateNotebookInstanceInput::setAcceleratorTypes(const QList &accelerator_types) {
    m_accelerator_types = accelerator_types;
    m_accelerator_types_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_accelerator_types_Set() const{
    return m_accelerator_types_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_accelerator_types_Valid() const{
    return m_accelerator_types_isValid;
}

bool OAIUpdateNotebookInstanceInput::getDisassociateAcceleratorTypes() const {
    return m_disassociate_accelerator_types;
}
void OAIUpdateNotebookInstanceInput::setDisassociateAcceleratorTypes(const bool &disassociate_accelerator_types) {
    m_disassociate_accelerator_types = disassociate_accelerator_types;
    m_disassociate_accelerator_types_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_disassociate_accelerator_types_Set() const{
    return m_disassociate_accelerator_types_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_disassociate_accelerator_types_Valid() const{
    return m_disassociate_accelerator_types_isValid;
}

bool OAIUpdateNotebookInstanceInput::getDisassociateDefaultCodeRepository() const {
    return m_disassociate_default_code_repository;
}
void OAIUpdateNotebookInstanceInput::setDisassociateDefaultCodeRepository(const bool &disassociate_default_code_repository) {
    m_disassociate_default_code_repository = disassociate_default_code_repository;
    m_disassociate_default_code_repository_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_disassociate_default_code_repository_Set() const{
    return m_disassociate_default_code_repository_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_disassociate_default_code_repository_Valid() const{
    return m_disassociate_default_code_repository_isValid;
}

bool OAIUpdateNotebookInstanceInput::getDisassociateAdditionalCodeRepositories() const {
    return m_disassociate_additional_code_repositories;
}
void OAIUpdateNotebookInstanceInput::setDisassociateAdditionalCodeRepositories(const bool &disassociate_additional_code_repositories) {
    m_disassociate_additional_code_repositories = disassociate_additional_code_repositories;
    m_disassociate_additional_code_repositories_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_disassociate_additional_code_repositories_Set() const{
    return m_disassociate_additional_code_repositories_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_disassociate_additional_code_repositories_Valid() const{
    return m_disassociate_additional_code_repositories_isValid;
}

OAIRootAccess OAIUpdateNotebookInstanceInput::getRootAccess() const {
    return m_root_access;
}
void OAIUpdateNotebookInstanceInput::setRootAccess(const OAIRootAccess &root_access) {
    m_root_access = root_access;
    m_root_access_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_root_access_Set() const{
    return m_root_access_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_root_access_Valid() const{
    return m_root_access_isValid;
}

OAICreateNotebookInstanceInput_InstanceMetadataServiceConfiguration OAIUpdateNotebookInstanceInput::getInstanceMetadataServiceConfiguration() const {
    return m_instance_metadata_service_configuration;
}
void OAIUpdateNotebookInstanceInput::setInstanceMetadataServiceConfiguration(const OAICreateNotebookInstanceInput_InstanceMetadataServiceConfiguration &instance_metadata_service_configuration) {
    m_instance_metadata_service_configuration = instance_metadata_service_configuration;
    m_instance_metadata_service_configuration_isSet = true;
}

bool OAIUpdateNotebookInstanceInput::is_instance_metadata_service_configuration_Set() const{
    return m_instance_metadata_service_configuration_isSet;
}

bool OAIUpdateNotebookInstanceInput::is_instance_metadata_service_configuration_Valid() const{
    return m_instance_metadata_service_configuration_isValid;
}

bool OAIUpdateNotebookInstanceInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notebook_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassociate_lifecycle_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_code_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_code_repositories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassociate_accelerator_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassociate_default_code_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassociate_additional_code_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_metadata_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNotebookInstanceInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_notebook_instance_name_isValid && true;
}

} // namespace OpenAPI
