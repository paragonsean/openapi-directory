/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferenceRecommendationsJobStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferenceRecommendationsJobStep::OAIInferenceRecommendationsJobStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferenceRecommendationsJobStep::OAIInferenceRecommendationsJobStep() {
    this->initializeModel();
}

OAIInferenceRecommendationsJobStep::~OAIInferenceRecommendationsJobStep() {}

void OAIInferenceRecommendationsJobStep::initializeModel() {

    m_step_type_isSet = false;
    m_step_type_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_inference_benchmark_isSet = false;
    m_inference_benchmark_isValid = false;
}

void OAIInferenceRecommendationsJobStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInferenceRecommendationsJobStep::fromJsonObject(QJsonObject json) {

    m_step_type_isValid = ::OpenAPI::fromJsonValue(m_step_type, json[QString("StepType")]);
    m_step_type_isSet = !json[QString("StepType")].isNull() && m_step_type_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_inference_benchmark_isValid = ::OpenAPI::fromJsonValue(m_inference_benchmark, json[QString("InferenceBenchmark")]);
    m_inference_benchmark_isSet = !json[QString("InferenceBenchmark")].isNull() && m_inference_benchmark_isValid;
}

QString OAIInferenceRecommendationsJobStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInferenceRecommendationsJobStep::asJsonObject() const {
    QJsonObject obj;
    if (m_step_type.isSet()) {
        obj.insert(QString("StepType"), ::OpenAPI::toJsonValue(m_step_type));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_inference_benchmark.isSet()) {
        obj.insert(QString("InferenceBenchmark"), ::OpenAPI::toJsonValue(m_inference_benchmark));
    }
    return obj;
}

OAIRecommendationStepType OAIInferenceRecommendationsJobStep::getStepType() const {
    return m_step_type;
}
void OAIInferenceRecommendationsJobStep::setStepType(const OAIRecommendationStepType &step_type) {
    m_step_type = step_type;
    m_step_type_isSet = true;
}

bool OAIInferenceRecommendationsJobStep::is_step_type_Set() const{
    return m_step_type_isSet;
}

bool OAIInferenceRecommendationsJobStep::is_step_type_Valid() const{
    return m_step_type_isValid;
}

QString OAIInferenceRecommendationsJobStep::getJobName() const {
    return m_job_name;
}
void OAIInferenceRecommendationsJobStep::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIInferenceRecommendationsJobStep::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIInferenceRecommendationsJobStep::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIRecommendationJobStatus OAIInferenceRecommendationsJobStep::getStatus() const {
    return m_status;
}
void OAIInferenceRecommendationsJobStep::setStatus(const OAIRecommendationJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInferenceRecommendationsJobStep::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInferenceRecommendationsJobStep::is_status_Valid() const{
    return m_status_isValid;
}

OAIInferenceRecommendationsJobStep_InferenceBenchmark OAIInferenceRecommendationsJobStep::getInferenceBenchmark() const {
    return m_inference_benchmark;
}
void OAIInferenceRecommendationsJobStep::setInferenceBenchmark(const OAIInferenceRecommendationsJobStep_InferenceBenchmark &inference_benchmark) {
    m_inference_benchmark = inference_benchmark;
    m_inference_benchmark_isSet = true;
}

bool OAIInferenceRecommendationsJobStep::is_inference_benchmark_Set() const{
    return m_inference_benchmark_isSet;
}

bool OAIInferenceRecommendationsJobStep::is_inference_benchmark_Valid() const{
    return m_inference_benchmark_isValid;
}

bool OAIInferenceRecommendationsJobStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_step_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_benchmark.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInferenceRecommendationsJobStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_step_type_isValid && m_job_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
