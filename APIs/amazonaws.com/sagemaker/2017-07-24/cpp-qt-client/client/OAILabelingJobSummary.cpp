/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabelingJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabelingJobSummary::OAILabelingJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabelingJobSummary::OAILabelingJobSummary() {
    this->initializeModel();
}

OAILabelingJobSummary::~OAILabelingJobSummary() {}

void OAILabelingJobSummary::initializeModel() {

    m_labeling_job_name_isSet = false;
    m_labeling_job_name_isValid = false;

    m_labeling_job_arn_isSet = false;
    m_labeling_job_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_labeling_job_status_isSet = false;
    m_labeling_job_status_isValid = false;

    m_label_counters_isSet = false;
    m_label_counters_isValid = false;

    m_workteam_arn_isSet = false;
    m_workteam_arn_isValid = false;

    m_pre_human_task_lambda_arn_isSet = false;
    m_pre_human_task_lambda_arn_isValid = false;

    m_annotation_consolidation_lambda_arn_isSet = false;
    m_annotation_consolidation_lambda_arn_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_labeling_job_output_isSet = false;
    m_labeling_job_output_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;
}

void OAILabelingJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabelingJobSummary::fromJsonObject(QJsonObject json) {

    m_labeling_job_name_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_name, json[QString("LabelingJobName")]);
    m_labeling_job_name_isSet = !json[QString("LabelingJobName")].isNull() && m_labeling_job_name_isValid;

    m_labeling_job_arn_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_arn, json[QString("LabelingJobArn")]);
    m_labeling_job_arn_isSet = !json[QString("LabelingJobArn")].isNull() && m_labeling_job_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_labeling_job_status_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_status, json[QString("LabelingJobStatus")]);
    m_labeling_job_status_isSet = !json[QString("LabelingJobStatus")].isNull() && m_labeling_job_status_isValid;

    m_label_counters_isValid = ::OpenAPI::fromJsonValue(m_label_counters, json[QString("LabelCounters")]);
    m_label_counters_isSet = !json[QString("LabelCounters")].isNull() && m_label_counters_isValid;

    m_workteam_arn_isValid = ::OpenAPI::fromJsonValue(m_workteam_arn, json[QString("WorkteamArn")]);
    m_workteam_arn_isSet = !json[QString("WorkteamArn")].isNull() && m_workteam_arn_isValid;

    m_pre_human_task_lambda_arn_isValid = ::OpenAPI::fromJsonValue(m_pre_human_task_lambda_arn, json[QString("PreHumanTaskLambdaArn")]);
    m_pre_human_task_lambda_arn_isSet = !json[QString("PreHumanTaskLambdaArn")].isNull() && m_pre_human_task_lambda_arn_isValid;

    m_annotation_consolidation_lambda_arn_isValid = ::OpenAPI::fromJsonValue(m_annotation_consolidation_lambda_arn, json[QString("AnnotationConsolidationLambdaArn")]);
    m_annotation_consolidation_lambda_arn_isSet = !json[QString("AnnotationConsolidationLambdaArn")].isNull() && m_annotation_consolidation_lambda_arn_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_labeling_job_output_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_output, json[QString("LabelingJobOutput")]);
    m_labeling_job_output_isSet = !json[QString("LabelingJobOutput")].isNull() && m_labeling_job_output_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("InputConfig")]);
    m_input_config_isSet = !json[QString("InputConfig")].isNull() && m_input_config_isValid;
}

QString OAILabelingJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabelingJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_labeling_job_name_isSet) {
        obj.insert(QString("LabelingJobName"), ::OpenAPI::toJsonValue(m_labeling_job_name));
    }
    if (m_labeling_job_arn_isSet) {
        obj.insert(QString("LabelingJobArn"), ::OpenAPI::toJsonValue(m_labeling_job_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_labeling_job_status.isSet()) {
        obj.insert(QString("LabelingJobStatus"), ::OpenAPI::toJsonValue(m_labeling_job_status));
    }
    if (m_label_counters.isSet()) {
        obj.insert(QString("LabelCounters"), ::OpenAPI::toJsonValue(m_label_counters));
    }
    if (m_workteam_arn_isSet) {
        obj.insert(QString("WorkteamArn"), ::OpenAPI::toJsonValue(m_workteam_arn));
    }
    if (m_pre_human_task_lambda_arn_isSet) {
        obj.insert(QString("PreHumanTaskLambdaArn"), ::OpenAPI::toJsonValue(m_pre_human_task_lambda_arn));
    }
    if (m_annotation_consolidation_lambda_arn_isSet) {
        obj.insert(QString("AnnotationConsolidationLambdaArn"), ::OpenAPI::toJsonValue(m_annotation_consolidation_lambda_arn));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_labeling_job_output.isSet()) {
        obj.insert(QString("LabelingJobOutput"), ::OpenAPI::toJsonValue(m_labeling_job_output));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("InputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    return obj;
}

QString OAILabelingJobSummary::getLabelingJobName() const {
    return m_labeling_job_name;
}
void OAILabelingJobSummary::setLabelingJobName(const QString &labeling_job_name) {
    m_labeling_job_name = labeling_job_name;
    m_labeling_job_name_isSet = true;
}

bool OAILabelingJobSummary::is_labeling_job_name_Set() const{
    return m_labeling_job_name_isSet;
}

bool OAILabelingJobSummary::is_labeling_job_name_Valid() const{
    return m_labeling_job_name_isValid;
}

QString OAILabelingJobSummary::getLabelingJobArn() const {
    return m_labeling_job_arn;
}
void OAILabelingJobSummary::setLabelingJobArn(const QString &labeling_job_arn) {
    m_labeling_job_arn = labeling_job_arn;
    m_labeling_job_arn_isSet = true;
}

bool OAILabelingJobSummary::is_labeling_job_arn_Set() const{
    return m_labeling_job_arn_isSet;
}

bool OAILabelingJobSummary::is_labeling_job_arn_Valid() const{
    return m_labeling_job_arn_isValid;
}

QDateTime OAILabelingJobSummary::getCreationTime() const {
    return m_creation_time;
}
void OAILabelingJobSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAILabelingJobSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAILabelingJobSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAILabelingJobSummary::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAILabelingJobSummary::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAILabelingJobSummary::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAILabelingJobSummary::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAILabelingJobStatus OAILabelingJobSummary::getLabelingJobStatus() const {
    return m_labeling_job_status;
}
void OAILabelingJobSummary::setLabelingJobStatus(const OAILabelingJobStatus &labeling_job_status) {
    m_labeling_job_status = labeling_job_status;
    m_labeling_job_status_isSet = true;
}

bool OAILabelingJobSummary::is_labeling_job_status_Set() const{
    return m_labeling_job_status_isSet;
}

bool OAILabelingJobSummary::is_labeling_job_status_Valid() const{
    return m_labeling_job_status_isValid;
}

OAILabelingJobSummary_LabelCounters OAILabelingJobSummary::getLabelCounters() const {
    return m_label_counters;
}
void OAILabelingJobSummary::setLabelCounters(const OAILabelingJobSummary_LabelCounters &label_counters) {
    m_label_counters = label_counters;
    m_label_counters_isSet = true;
}

bool OAILabelingJobSummary::is_label_counters_Set() const{
    return m_label_counters_isSet;
}

bool OAILabelingJobSummary::is_label_counters_Valid() const{
    return m_label_counters_isValid;
}

QString OAILabelingJobSummary::getWorkteamArn() const {
    return m_workteam_arn;
}
void OAILabelingJobSummary::setWorkteamArn(const QString &workteam_arn) {
    m_workteam_arn = workteam_arn;
    m_workteam_arn_isSet = true;
}

bool OAILabelingJobSummary::is_workteam_arn_Set() const{
    return m_workteam_arn_isSet;
}

bool OAILabelingJobSummary::is_workteam_arn_Valid() const{
    return m_workteam_arn_isValid;
}

QString OAILabelingJobSummary::getPreHumanTaskLambdaArn() const {
    return m_pre_human_task_lambda_arn;
}
void OAILabelingJobSummary::setPreHumanTaskLambdaArn(const QString &pre_human_task_lambda_arn) {
    m_pre_human_task_lambda_arn = pre_human_task_lambda_arn;
    m_pre_human_task_lambda_arn_isSet = true;
}

bool OAILabelingJobSummary::is_pre_human_task_lambda_arn_Set() const{
    return m_pre_human_task_lambda_arn_isSet;
}

bool OAILabelingJobSummary::is_pre_human_task_lambda_arn_Valid() const{
    return m_pre_human_task_lambda_arn_isValid;
}

QString OAILabelingJobSummary::getAnnotationConsolidationLambdaArn() const {
    return m_annotation_consolidation_lambda_arn;
}
void OAILabelingJobSummary::setAnnotationConsolidationLambdaArn(const QString &annotation_consolidation_lambda_arn) {
    m_annotation_consolidation_lambda_arn = annotation_consolidation_lambda_arn;
    m_annotation_consolidation_lambda_arn_isSet = true;
}

bool OAILabelingJobSummary::is_annotation_consolidation_lambda_arn_Set() const{
    return m_annotation_consolidation_lambda_arn_isSet;
}

bool OAILabelingJobSummary::is_annotation_consolidation_lambda_arn_Valid() const{
    return m_annotation_consolidation_lambda_arn_isValid;
}

QString OAILabelingJobSummary::getFailureReason() const {
    return m_failure_reason;
}
void OAILabelingJobSummary::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAILabelingJobSummary::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAILabelingJobSummary::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIDescribeLabelingJobResponse_LabelingJobOutput OAILabelingJobSummary::getLabelingJobOutput() const {
    return m_labeling_job_output;
}
void OAILabelingJobSummary::setLabelingJobOutput(const OAIDescribeLabelingJobResponse_LabelingJobOutput &labeling_job_output) {
    m_labeling_job_output = labeling_job_output;
    m_labeling_job_output_isSet = true;
}

bool OAILabelingJobSummary::is_labeling_job_output_Set() const{
    return m_labeling_job_output_isSet;
}

bool OAILabelingJobSummary::is_labeling_job_output_Valid() const{
    return m_labeling_job_output_isValid;
}

OAILabelingJobSummary_InputConfig OAILabelingJobSummary::getInputConfig() const {
    return m_input_config;
}
void OAILabelingJobSummary::setInputConfig(const OAILabelingJobSummary_InputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAILabelingJobSummary::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAILabelingJobSummary::is_input_config_Valid() const{
    return m_input_config_isValid;
}

bool OAILabelingJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labeling_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_counters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workteam_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_human_task_lambda_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_consolidation_lambda_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_job_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabelingJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_labeling_job_name_isValid && m_labeling_job_arn_isValid && m_creation_time_isValid && m_last_modified_time_isValid && m_labeling_job_status_isValid && m_label_counters_isValid && m_workteam_arn_isValid && m_pre_human_task_lambda_arn_isValid && true;
}

} // namespace OpenAPI
