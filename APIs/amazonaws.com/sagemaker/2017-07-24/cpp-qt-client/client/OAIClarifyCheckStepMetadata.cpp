/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClarifyCheckStepMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClarifyCheckStepMetadata::OAIClarifyCheckStepMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClarifyCheckStepMetadata::OAIClarifyCheckStepMetadata() {
    this->initializeModel();
}

OAIClarifyCheckStepMetadata::~OAIClarifyCheckStepMetadata() {}

void OAIClarifyCheckStepMetadata::initializeModel() {

    m_check_type_isSet = false;
    m_check_type_isValid = false;

    m_baseline_used_for_drift_check_constraints_isSet = false;
    m_baseline_used_for_drift_check_constraints_isValid = false;

    m_calculated_baseline_constraints_isSet = false;
    m_calculated_baseline_constraints_isValid = false;

    m_model_package_group_name_isSet = false;
    m_model_package_group_name_isValid = false;

    m_violation_report_isSet = false;
    m_violation_report_isValid = false;

    m_check_job_arn_isSet = false;
    m_check_job_arn_isValid = false;

    m_skip_check_isSet = false;
    m_skip_check_isValid = false;

    m_register_new_baseline_isSet = false;
    m_register_new_baseline_isValid = false;
}

void OAIClarifyCheckStepMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClarifyCheckStepMetadata::fromJsonObject(QJsonObject json) {

    m_check_type_isValid = ::OpenAPI::fromJsonValue(m_check_type, json[QString("CheckType")]);
    m_check_type_isSet = !json[QString("CheckType")].isNull() && m_check_type_isValid;

    m_baseline_used_for_drift_check_constraints_isValid = ::OpenAPI::fromJsonValue(m_baseline_used_for_drift_check_constraints, json[QString("BaselineUsedForDriftCheckConstraints")]);
    m_baseline_used_for_drift_check_constraints_isSet = !json[QString("BaselineUsedForDriftCheckConstraints")].isNull() && m_baseline_used_for_drift_check_constraints_isValid;

    m_calculated_baseline_constraints_isValid = ::OpenAPI::fromJsonValue(m_calculated_baseline_constraints, json[QString("CalculatedBaselineConstraints")]);
    m_calculated_baseline_constraints_isSet = !json[QString("CalculatedBaselineConstraints")].isNull() && m_calculated_baseline_constraints_isValid;

    m_model_package_group_name_isValid = ::OpenAPI::fromJsonValue(m_model_package_group_name, json[QString("ModelPackageGroupName")]);
    m_model_package_group_name_isSet = !json[QString("ModelPackageGroupName")].isNull() && m_model_package_group_name_isValid;

    m_violation_report_isValid = ::OpenAPI::fromJsonValue(m_violation_report, json[QString("ViolationReport")]);
    m_violation_report_isSet = !json[QString("ViolationReport")].isNull() && m_violation_report_isValid;

    m_check_job_arn_isValid = ::OpenAPI::fromJsonValue(m_check_job_arn, json[QString("CheckJobArn")]);
    m_check_job_arn_isSet = !json[QString("CheckJobArn")].isNull() && m_check_job_arn_isValid;

    m_skip_check_isValid = ::OpenAPI::fromJsonValue(m_skip_check, json[QString("SkipCheck")]);
    m_skip_check_isSet = !json[QString("SkipCheck")].isNull() && m_skip_check_isValid;

    m_register_new_baseline_isValid = ::OpenAPI::fromJsonValue(m_register_new_baseline, json[QString("RegisterNewBaseline")]);
    m_register_new_baseline_isSet = !json[QString("RegisterNewBaseline")].isNull() && m_register_new_baseline_isValid;
}

QString OAIClarifyCheckStepMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClarifyCheckStepMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_check_type_isSet) {
        obj.insert(QString("CheckType"), ::OpenAPI::toJsonValue(m_check_type));
    }
    if (m_baseline_used_for_drift_check_constraints_isSet) {
        obj.insert(QString("BaselineUsedForDriftCheckConstraints"), ::OpenAPI::toJsonValue(m_baseline_used_for_drift_check_constraints));
    }
    if (m_calculated_baseline_constraints_isSet) {
        obj.insert(QString("CalculatedBaselineConstraints"), ::OpenAPI::toJsonValue(m_calculated_baseline_constraints));
    }
    if (m_model_package_group_name_isSet) {
        obj.insert(QString("ModelPackageGroupName"), ::OpenAPI::toJsonValue(m_model_package_group_name));
    }
    if (m_violation_report_isSet) {
        obj.insert(QString("ViolationReport"), ::OpenAPI::toJsonValue(m_violation_report));
    }
    if (m_check_job_arn_isSet) {
        obj.insert(QString("CheckJobArn"), ::OpenAPI::toJsonValue(m_check_job_arn));
    }
    if (m_skip_check_isSet) {
        obj.insert(QString("SkipCheck"), ::OpenAPI::toJsonValue(m_skip_check));
    }
    if (m_register_new_baseline_isSet) {
        obj.insert(QString("RegisterNewBaseline"), ::OpenAPI::toJsonValue(m_register_new_baseline));
    }
    return obj;
}

QString OAIClarifyCheckStepMetadata::getCheckType() const {
    return m_check_type;
}
void OAIClarifyCheckStepMetadata::setCheckType(const QString &check_type) {
    m_check_type = check_type;
    m_check_type_isSet = true;
}

bool OAIClarifyCheckStepMetadata::is_check_type_Set() const{
    return m_check_type_isSet;
}

bool OAIClarifyCheckStepMetadata::is_check_type_Valid() const{
    return m_check_type_isValid;
}

QString OAIClarifyCheckStepMetadata::getBaselineUsedForDriftCheckConstraints() const {
    return m_baseline_used_for_drift_check_constraints;
}
void OAIClarifyCheckStepMetadata::setBaselineUsedForDriftCheckConstraints(const QString &baseline_used_for_drift_check_constraints) {
    m_baseline_used_for_drift_check_constraints = baseline_used_for_drift_check_constraints;
    m_baseline_used_for_drift_check_constraints_isSet = true;
}

bool OAIClarifyCheckStepMetadata::is_baseline_used_for_drift_check_constraints_Set() const{
    return m_baseline_used_for_drift_check_constraints_isSet;
}

bool OAIClarifyCheckStepMetadata::is_baseline_used_for_drift_check_constraints_Valid() const{
    return m_baseline_used_for_drift_check_constraints_isValid;
}

QString OAIClarifyCheckStepMetadata::getCalculatedBaselineConstraints() const {
    return m_calculated_baseline_constraints;
}
void OAIClarifyCheckStepMetadata::setCalculatedBaselineConstraints(const QString &calculated_baseline_constraints) {
    m_calculated_baseline_constraints = calculated_baseline_constraints;
    m_calculated_baseline_constraints_isSet = true;
}

bool OAIClarifyCheckStepMetadata::is_calculated_baseline_constraints_Set() const{
    return m_calculated_baseline_constraints_isSet;
}

bool OAIClarifyCheckStepMetadata::is_calculated_baseline_constraints_Valid() const{
    return m_calculated_baseline_constraints_isValid;
}

QString OAIClarifyCheckStepMetadata::getModelPackageGroupName() const {
    return m_model_package_group_name;
}
void OAIClarifyCheckStepMetadata::setModelPackageGroupName(const QString &model_package_group_name) {
    m_model_package_group_name = model_package_group_name;
    m_model_package_group_name_isSet = true;
}

bool OAIClarifyCheckStepMetadata::is_model_package_group_name_Set() const{
    return m_model_package_group_name_isSet;
}

bool OAIClarifyCheckStepMetadata::is_model_package_group_name_Valid() const{
    return m_model_package_group_name_isValid;
}

QString OAIClarifyCheckStepMetadata::getViolationReport() const {
    return m_violation_report;
}
void OAIClarifyCheckStepMetadata::setViolationReport(const QString &violation_report) {
    m_violation_report = violation_report;
    m_violation_report_isSet = true;
}

bool OAIClarifyCheckStepMetadata::is_violation_report_Set() const{
    return m_violation_report_isSet;
}

bool OAIClarifyCheckStepMetadata::is_violation_report_Valid() const{
    return m_violation_report_isValid;
}

QString OAIClarifyCheckStepMetadata::getCheckJobArn() const {
    return m_check_job_arn;
}
void OAIClarifyCheckStepMetadata::setCheckJobArn(const QString &check_job_arn) {
    m_check_job_arn = check_job_arn;
    m_check_job_arn_isSet = true;
}

bool OAIClarifyCheckStepMetadata::is_check_job_arn_Set() const{
    return m_check_job_arn_isSet;
}

bool OAIClarifyCheckStepMetadata::is_check_job_arn_Valid() const{
    return m_check_job_arn_isValid;
}

bool OAIClarifyCheckStepMetadata::getSkipCheck() const {
    return m_skip_check;
}
void OAIClarifyCheckStepMetadata::setSkipCheck(const bool &skip_check) {
    m_skip_check = skip_check;
    m_skip_check_isSet = true;
}

bool OAIClarifyCheckStepMetadata::is_skip_check_Set() const{
    return m_skip_check_isSet;
}

bool OAIClarifyCheckStepMetadata::is_skip_check_Valid() const{
    return m_skip_check_isValid;
}

bool OAIClarifyCheckStepMetadata::getRegisterNewBaseline() const {
    return m_register_new_baseline;
}
void OAIClarifyCheckStepMetadata::setRegisterNewBaseline(const bool &register_new_baseline) {
    m_register_new_baseline = register_new_baseline;
    m_register_new_baseline_isSet = true;
}

bool OAIClarifyCheckStepMetadata::is_register_new_baseline_Set() const{
    return m_register_new_baseline_isSet;
}

bool OAIClarifyCheckStepMetadata::is_register_new_baseline_Valid() const{
    return m_register_new_baseline_isValid;
}

bool OAIClarifyCheckStepMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_used_for_drift_check_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_baseline_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_package_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_register_new_baseline_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClarifyCheckStepMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
