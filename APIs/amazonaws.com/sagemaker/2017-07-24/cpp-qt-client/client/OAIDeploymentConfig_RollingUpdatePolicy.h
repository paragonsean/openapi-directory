/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeploymentConfig_RollingUpdatePolicy.h
 *
 * 
 */

#ifndef OAIDeploymentConfig_RollingUpdatePolicy_H
#define OAIDeploymentConfig_RollingUpdatePolicy_H

#include <QJsonObject>

#include "OAIRollingUpdatePolicy_MaximumBatchSize.h"
#include "OAIRollingUpdatePolicy_RollbackMaximumBatchSize.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRollingUpdatePolicy_MaximumBatchSize;
class OAIRollingUpdatePolicy_RollbackMaximumBatchSize;

class OAIDeploymentConfig_RollingUpdatePolicy : public OAIObject {
public:
    OAIDeploymentConfig_RollingUpdatePolicy();
    OAIDeploymentConfig_RollingUpdatePolicy(QString json);
    ~OAIDeploymentConfig_RollingUpdatePolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRollingUpdatePolicy_MaximumBatchSize getMaximumBatchSize() const;
    void setMaximumBatchSize(const OAIRollingUpdatePolicy_MaximumBatchSize &maximum_batch_size);
    bool is_maximum_batch_size_Set() const;
    bool is_maximum_batch_size_Valid() const;

    qint32 getWaitIntervalInSeconds() const;
    void setWaitIntervalInSeconds(const qint32 &wait_interval_in_seconds);
    bool is_wait_interval_in_seconds_Set() const;
    bool is_wait_interval_in_seconds_Valid() const;

    qint32 getMaximumExecutionTimeoutInSeconds() const;
    void setMaximumExecutionTimeoutInSeconds(const qint32 &maximum_execution_timeout_in_seconds);
    bool is_maximum_execution_timeout_in_seconds_Set() const;
    bool is_maximum_execution_timeout_in_seconds_Valid() const;

    OAIRollingUpdatePolicy_RollbackMaximumBatchSize getRollbackMaximumBatchSize() const;
    void setRollbackMaximumBatchSize(const OAIRollingUpdatePolicy_RollbackMaximumBatchSize &rollback_maximum_batch_size);
    bool is_rollback_maximum_batch_size_Set() const;
    bool is_rollback_maximum_batch_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRollingUpdatePolicy_MaximumBatchSize m_maximum_batch_size;
    bool m_maximum_batch_size_isSet;
    bool m_maximum_batch_size_isValid;

    qint32 m_wait_interval_in_seconds;
    bool m_wait_interval_in_seconds_isSet;
    bool m_wait_interval_in_seconds_isValid;

    qint32 m_maximum_execution_timeout_in_seconds;
    bool m_maximum_execution_timeout_in_seconds_isSet;
    bool m_maximum_execution_timeout_in_seconds_isValid;

    OAIRollingUpdatePolicy_RollbackMaximumBatchSize m_rollback_maximum_batch_size;
    bool m_rollback_maximum_batch_size_isSet;
    bool m_rollback_maximum_batch_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeploymentConfig_RollingUpdatePolicy)

#endif // OAIDeploymentConfig_RollingUpdatePolicy_H
