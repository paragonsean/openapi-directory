/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceSelectionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceSelectionConfig::OAIDeviceSelectionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceSelectionConfig::OAIDeviceSelectionConfig() {
    this->initializeModel();
}

OAIDeviceSelectionConfig::~OAIDeviceSelectionConfig() {}

void OAIDeviceSelectionConfig::initializeModel() {

    m_device_subset_type_isSet = false;
    m_device_subset_type_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_device_names_isSet = false;
    m_device_names_isValid = false;

    m_device_name_contains_isSet = false;
    m_device_name_contains_isValid = false;
}

void OAIDeviceSelectionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceSelectionConfig::fromJsonObject(QJsonObject json) {

    m_device_subset_type_isValid = ::OpenAPI::fromJsonValue(m_device_subset_type, json[QString("DeviceSubsetType")]);
    m_device_subset_type_isSet = !json[QString("DeviceSubsetType")].isNull() && m_device_subset_type_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("Percentage")]);
    m_percentage_isSet = !json[QString("Percentage")].isNull() && m_percentage_isValid;

    m_device_names_isValid = ::OpenAPI::fromJsonValue(m_device_names, json[QString("DeviceNames")]);
    m_device_names_isSet = !json[QString("DeviceNames")].isNull() && m_device_names_isValid;

    m_device_name_contains_isValid = ::OpenAPI::fromJsonValue(m_device_name_contains, json[QString("DeviceNameContains")]);
    m_device_name_contains_isSet = !json[QString("DeviceNameContains")].isNull() && m_device_name_contains_isValid;
}

QString OAIDeviceSelectionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceSelectionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_device_subset_type.isSet()) {
        obj.insert(QString("DeviceSubsetType"), ::OpenAPI::toJsonValue(m_device_subset_type));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("Percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_device_names.isSet()) {
        obj.insert(QString("DeviceNames"), ::OpenAPI::toJsonValue(m_device_names));
    }
    if (m_device_name_contains_isSet) {
        obj.insert(QString("DeviceNameContains"), ::OpenAPI::toJsonValue(m_device_name_contains));
    }
    return obj;
}

OAIDeviceSubsetType OAIDeviceSelectionConfig::getDeviceSubsetType() const {
    return m_device_subset_type;
}
void OAIDeviceSelectionConfig::setDeviceSubsetType(const OAIDeviceSubsetType &device_subset_type) {
    m_device_subset_type = device_subset_type;
    m_device_subset_type_isSet = true;
}

bool OAIDeviceSelectionConfig::is_device_subset_type_Set() const{
    return m_device_subset_type_isSet;
}

bool OAIDeviceSelectionConfig::is_device_subset_type_Valid() const{
    return m_device_subset_type_isValid;
}

qint32 OAIDeviceSelectionConfig::getPercentage() const {
    return m_percentage;
}
void OAIDeviceSelectionConfig::setPercentage(const qint32 &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIDeviceSelectionConfig::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIDeviceSelectionConfig::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QList OAIDeviceSelectionConfig::getDeviceNames() const {
    return m_device_names;
}
void OAIDeviceSelectionConfig::setDeviceNames(const QList &device_names) {
    m_device_names = device_names;
    m_device_names_isSet = true;
}

bool OAIDeviceSelectionConfig::is_device_names_Set() const{
    return m_device_names_isSet;
}

bool OAIDeviceSelectionConfig::is_device_names_Valid() const{
    return m_device_names_isValid;
}

QString OAIDeviceSelectionConfig::getDeviceNameContains() const {
    return m_device_name_contains;
}
void OAIDeviceSelectionConfig::setDeviceNameContains(const QString &device_name_contains) {
    m_device_name_contains = device_name_contains;
    m_device_name_contains_isSet = true;
}

bool OAIDeviceSelectionConfig::is_device_name_contains_Set() const{
    return m_device_name_contains_isSet;
}

bool OAIDeviceSelectionConfig::is_device_name_contains_Valid() const{
    return m_device_name_contains_isValid;
}

bool OAIDeviceSelectionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_subset_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_contains_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceSelectionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_subset_type_isValid && true;
}

} // namespace OpenAPI
