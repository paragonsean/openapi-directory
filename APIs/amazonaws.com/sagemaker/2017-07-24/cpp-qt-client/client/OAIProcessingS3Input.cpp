/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessingS3Input.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessingS3Input::OAIProcessingS3Input(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessingS3Input::OAIProcessingS3Input() {
    this->initializeModel();
}

OAIProcessingS3Input::~OAIProcessingS3Input() {}

void OAIProcessingS3Input::initializeModel() {

    m_s3_uri_isSet = false;
    m_s3_uri_isValid = false;

    m_local_path_isSet = false;
    m_local_path_isValid = false;

    m_s3_data_type_isSet = false;
    m_s3_data_type_isValid = false;

    m_s3_input_mode_isSet = false;
    m_s3_input_mode_isValid = false;

    m_s3_data_distribution_type_isSet = false;
    m_s3_data_distribution_type_isValid = false;

    m_s3_compression_type_isSet = false;
    m_s3_compression_type_isValid = false;
}

void OAIProcessingS3Input::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessingS3Input::fromJsonObject(QJsonObject json) {

    m_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_s3_uri, json[QString("S3Uri")]);
    m_s3_uri_isSet = !json[QString("S3Uri")].isNull() && m_s3_uri_isValid;

    m_local_path_isValid = ::OpenAPI::fromJsonValue(m_local_path, json[QString("LocalPath")]);
    m_local_path_isSet = !json[QString("LocalPath")].isNull() && m_local_path_isValid;

    m_s3_data_type_isValid = ::OpenAPI::fromJsonValue(m_s3_data_type, json[QString("S3DataType")]);
    m_s3_data_type_isSet = !json[QString("S3DataType")].isNull() && m_s3_data_type_isValid;

    m_s3_input_mode_isValid = ::OpenAPI::fromJsonValue(m_s3_input_mode, json[QString("S3InputMode")]);
    m_s3_input_mode_isSet = !json[QString("S3InputMode")].isNull() && m_s3_input_mode_isValid;

    m_s3_data_distribution_type_isValid = ::OpenAPI::fromJsonValue(m_s3_data_distribution_type, json[QString("S3DataDistributionType")]);
    m_s3_data_distribution_type_isSet = !json[QString("S3DataDistributionType")].isNull() && m_s3_data_distribution_type_isValid;

    m_s3_compression_type_isValid = ::OpenAPI::fromJsonValue(m_s3_compression_type, json[QString("S3CompressionType")]);
    m_s3_compression_type_isSet = !json[QString("S3CompressionType")].isNull() && m_s3_compression_type_isValid;
}

QString OAIProcessingS3Input::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessingS3Input::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_uri_isSet) {
        obj.insert(QString("S3Uri"), ::OpenAPI::toJsonValue(m_s3_uri));
    }
    if (m_local_path_isSet) {
        obj.insert(QString("LocalPath"), ::OpenAPI::toJsonValue(m_local_path));
    }
    if (m_s3_data_type.isSet()) {
        obj.insert(QString("S3DataType"), ::OpenAPI::toJsonValue(m_s3_data_type));
    }
    if (m_s3_input_mode.isSet()) {
        obj.insert(QString("S3InputMode"), ::OpenAPI::toJsonValue(m_s3_input_mode));
    }
    if (m_s3_data_distribution_type.isSet()) {
        obj.insert(QString("S3DataDistributionType"), ::OpenAPI::toJsonValue(m_s3_data_distribution_type));
    }
    if (m_s3_compression_type.isSet()) {
        obj.insert(QString("S3CompressionType"), ::OpenAPI::toJsonValue(m_s3_compression_type));
    }
    return obj;
}

QString OAIProcessingS3Input::getS3Uri() const {
    return m_s3_uri;
}
void OAIProcessingS3Input::setS3Uri(const QString &s3_uri) {
    m_s3_uri = s3_uri;
    m_s3_uri_isSet = true;
}

bool OAIProcessingS3Input::is_s3_uri_Set() const{
    return m_s3_uri_isSet;
}

bool OAIProcessingS3Input::is_s3_uri_Valid() const{
    return m_s3_uri_isValid;
}

QString OAIProcessingS3Input::getLocalPath() const {
    return m_local_path;
}
void OAIProcessingS3Input::setLocalPath(const QString &local_path) {
    m_local_path = local_path;
    m_local_path_isSet = true;
}

bool OAIProcessingS3Input::is_local_path_Set() const{
    return m_local_path_isSet;
}

bool OAIProcessingS3Input::is_local_path_Valid() const{
    return m_local_path_isValid;
}

OAIProcessingS3DataType OAIProcessingS3Input::getS3DataType() const {
    return m_s3_data_type;
}
void OAIProcessingS3Input::setS3DataType(const OAIProcessingS3DataType &s3_data_type) {
    m_s3_data_type = s3_data_type;
    m_s3_data_type_isSet = true;
}

bool OAIProcessingS3Input::is_s3_data_type_Set() const{
    return m_s3_data_type_isSet;
}

bool OAIProcessingS3Input::is_s3_data_type_Valid() const{
    return m_s3_data_type_isValid;
}

OAIProcessingS3InputMode OAIProcessingS3Input::getS3InputMode() const {
    return m_s3_input_mode;
}
void OAIProcessingS3Input::setS3InputMode(const OAIProcessingS3InputMode &s3_input_mode) {
    m_s3_input_mode = s3_input_mode;
    m_s3_input_mode_isSet = true;
}

bool OAIProcessingS3Input::is_s3_input_mode_Set() const{
    return m_s3_input_mode_isSet;
}

bool OAIProcessingS3Input::is_s3_input_mode_Valid() const{
    return m_s3_input_mode_isValid;
}

OAIProcessingS3DataDistributionType OAIProcessingS3Input::getS3DataDistributionType() const {
    return m_s3_data_distribution_type;
}
void OAIProcessingS3Input::setS3DataDistributionType(const OAIProcessingS3DataDistributionType &s3_data_distribution_type) {
    m_s3_data_distribution_type = s3_data_distribution_type;
    m_s3_data_distribution_type_isSet = true;
}

bool OAIProcessingS3Input::is_s3_data_distribution_type_Set() const{
    return m_s3_data_distribution_type_isSet;
}

bool OAIProcessingS3Input::is_s3_data_distribution_type_Valid() const{
    return m_s3_data_distribution_type_isValid;
}

OAIProcessingS3CompressionType OAIProcessingS3Input::getS3CompressionType() const {
    return m_s3_compression_type;
}
void OAIProcessingS3Input::setS3CompressionType(const OAIProcessingS3CompressionType &s3_compression_type) {
    m_s3_compression_type = s3_compression_type;
    m_s3_compression_type_isSet = true;
}

bool OAIProcessingS3Input::is_s3_compression_type_Set() const{
    return m_s3_compression_type_isSet;
}

bool OAIProcessingS3Input::is_s3_compression_type_Valid() const{
    return m_s3_compression_type_isValid;
}

bool OAIProcessingS3Input::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_input_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_data_distribution_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_compression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessingS3Input::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_uri_isValid && m_s3_data_type_isValid && true;
}

} // namespace OpenAPI
