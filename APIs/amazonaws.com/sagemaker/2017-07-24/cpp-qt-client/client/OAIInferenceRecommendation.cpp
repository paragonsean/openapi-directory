/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferenceRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferenceRecommendation::OAIInferenceRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferenceRecommendation::OAIInferenceRecommendation() {
    this->initializeModel();
}

OAIInferenceRecommendation::~OAIInferenceRecommendation() {}

void OAIInferenceRecommendation::initializeModel() {

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_endpoint_configuration_isSet = false;
    m_endpoint_configuration_isValid = false;

    m_model_configuration_isSet = false;
    m_model_configuration_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_invocation_end_time_isSet = false;
    m_invocation_end_time_isValid = false;

    m_invocation_start_time_isSet = false;
    m_invocation_start_time_isValid = false;
}

void OAIInferenceRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInferenceRecommendation::fromJsonObject(QJsonObject json) {

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;

    m_endpoint_configuration_isValid = ::OpenAPI::fromJsonValue(m_endpoint_configuration, json[QString("EndpointConfiguration")]);
    m_endpoint_configuration_isSet = !json[QString("EndpointConfiguration")].isNull() && m_endpoint_configuration_isValid;

    m_model_configuration_isValid = ::OpenAPI::fromJsonValue(m_model_configuration, json[QString("ModelConfiguration")]);
    m_model_configuration_isSet = !json[QString("ModelConfiguration")].isNull() && m_model_configuration_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_invocation_end_time_isValid = ::OpenAPI::fromJsonValue(m_invocation_end_time, json[QString("InvocationEndTime")]);
    m_invocation_end_time_isSet = !json[QString("InvocationEndTime")].isNull() && m_invocation_end_time_isValid;

    m_invocation_start_time_isValid = ::OpenAPI::fromJsonValue(m_invocation_start_time, json[QString("InvocationStartTime")]);
    m_invocation_start_time_isSet = !json[QString("InvocationStartTime")].isNull() && m_invocation_start_time_isValid;
}

QString OAIInferenceRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInferenceRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_endpoint_configuration.isSet()) {
        obj.insert(QString("EndpointConfiguration"), ::OpenAPI::toJsonValue(m_endpoint_configuration));
    }
    if (m_model_configuration.isSet()) {
        obj.insert(QString("ModelConfiguration"), ::OpenAPI::toJsonValue(m_model_configuration));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_invocation_end_time_isSet) {
        obj.insert(QString("InvocationEndTime"), ::OpenAPI::toJsonValue(m_invocation_end_time));
    }
    if (m_invocation_start_time_isSet) {
        obj.insert(QString("InvocationStartTime"), ::OpenAPI::toJsonValue(m_invocation_start_time));
    }
    return obj;
}

OAIInferenceRecommendation_Metrics OAIInferenceRecommendation::getMetrics() const {
    return m_metrics;
}
void OAIInferenceRecommendation::setMetrics(const OAIInferenceRecommendation_Metrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIInferenceRecommendation::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIInferenceRecommendation::is_metrics_Valid() const{
    return m_metrics_isValid;
}

OAIInferenceRecommendation_EndpointConfiguration OAIInferenceRecommendation::getEndpointConfiguration() const {
    return m_endpoint_configuration;
}
void OAIInferenceRecommendation::setEndpointConfiguration(const OAIInferenceRecommendation_EndpointConfiguration &endpoint_configuration) {
    m_endpoint_configuration = endpoint_configuration;
    m_endpoint_configuration_isSet = true;
}

bool OAIInferenceRecommendation::is_endpoint_configuration_Set() const{
    return m_endpoint_configuration_isSet;
}

bool OAIInferenceRecommendation::is_endpoint_configuration_Valid() const{
    return m_endpoint_configuration_isValid;
}

OAIInferenceRecommendation_ModelConfiguration OAIInferenceRecommendation::getModelConfiguration() const {
    return m_model_configuration;
}
void OAIInferenceRecommendation::setModelConfiguration(const OAIInferenceRecommendation_ModelConfiguration &model_configuration) {
    m_model_configuration = model_configuration;
    m_model_configuration_isSet = true;
}

bool OAIInferenceRecommendation::is_model_configuration_Set() const{
    return m_model_configuration_isSet;
}

bool OAIInferenceRecommendation::is_model_configuration_Valid() const{
    return m_model_configuration_isValid;
}

QString OAIInferenceRecommendation::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIInferenceRecommendation::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIInferenceRecommendation::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIInferenceRecommendation::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QDateTime OAIInferenceRecommendation::getInvocationEndTime() const {
    return m_invocation_end_time;
}
void OAIInferenceRecommendation::setInvocationEndTime(const QDateTime &invocation_end_time) {
    m_invocation_end_time = invocation_end_time;
    m_invocation_end_time_isSet = true;
}

bool OAIInferenceRecommendation::is_invocation_end_time_Set() const{
    return m_invocation_end_time_isSet;
}

bool OAIInferenceRecommendation::is_invocation_end_time_Valid() const{
    return m_invocation_end_time_isValid;
}

QDateTime OAIInferenceRecommendation::getInvocationStartTime() const {
    return m_invocation_start_time;
}
void OAIInferenceRecommendation::setInvocationStartTime(const QDateTime &invocation_start_time) {
    m_invocation_start_time = invocation_start_time;
    m_invocation_start_time_isSet = true;
}

bool OAIInferenceRecommendation::is_invocation_start_time_Set() const{
    return m_invocation_start_time_isSet;
}

bool OAIInferenceRecommendation::is_invocation_start_time_Valid() const{
    return m_invocation_start_time_isValid;
}

bool OAIInferenceRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInferenceRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metrics_isValid && m_endpoint_configuration_isValid && m_model_configuration_isValid && true;
}

} // namespace OpenAPI
