/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateInferenceExperimentRequest.h
 *
 * 
 */

#ifndef OAICreateInferenceExperimentRequest_H
#define OAICreateInferenceExperimentRequest_H

#include <QJsonObject>

#include "OAICreateInferenceExperimentRequest_DataStorageConfig.h"
#include "OAICreateInferenceExperimentRequest_Schedule.h"
#include "OAICreateInferenceExperimentRequest_ShadowModeConfig.h"
#include "OAIInferenceExperimentType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateInferenceExperimentRequest_Schedule;
class OAICreateInferenceExperimentRequest_DataStorageConfig;
class OAICreateInferenceExperimentRequest_ShadowModeConfig;

class OAICreateInferenceExperimentRequest : public OAIObject {
public:
    OAICreateInferenceExperimentRequest();
    OAICreateInferenceExperimentRequest(QString json);
    ~OAICreateInferenceExperimentRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIInferenceExperimentType getType() const;
    void setType(const OAIInferenceExperimentType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAICreateInferenceExperimentRequest_Schedule getSchedule() const;
    void setSchedule(const OAICreateInferenceExperimentRequest_Schedule &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QString getEndpointName() const;
    void setEndpointName(const QString &endpoint_name);
    bool is_endpoint_name_Set() const;
    bool is_endpoint_name_Valid() const;

    QList getModelVariants() const;
    void setModelVariants(const QList &model_variants);
    bool is_model_variants_Set() const;
    bool is_model_variants_Valid() const;

    OAICreateInferenceExperimentRequest_DataStorageConfig getDataStorageConfig() const;
    void setDataStorageConfig(const OAICreateInferenceExperimentRequest_DataStorageConfig &data_storage_config);
    bool is_data_storage_config_Set() const;
    bool is_data_storage_config_Valid() const;

    OAICreateInferenceExperimentRequest_ShadowModeConfig getShadowModeConfig() const;
    void setShadowModeConfig(const OAICreateInferenceExperimentRequest_ShadowModeConfig &shadow_mode_config);
    bool is_shadow_mode_config_Set() const;
    bool is_shadow_mode_config_Valid() const;

    QString getKmsKey() const;
    void setKmsKey(const QString &kms_key);
    bool is_kms_key_Set() const;
    bool is_kms_key_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIInferenceExperimentType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAICreateInferenceExperimentRequest_Schedule m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QString m_endpoint_name;
    bool m_endpoint_name_isSet;
    bool m_endpoint_name_isValid;

    QList m_model_variants;
    bool m_model_variants_isSet;
    bool m_model_variants_isValid;

    OAICreateInferenceExperimentRequest_DataStorageConfig m_data_storage_config;
    bool m_data_storage_config_isSet;
    bool m_data_storage_config_isValid;

    OAICreateInferenceExperimentRequest_ShadowModeConfig m_shadow_mode_config;
    bool m_shadow_mode_config_isSet;
    bool m_shadow_mode_config_isValid;

    QString m_kms_key;
    bool m_kms_key_isSet;
    bool m_kms_key_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateInferenceExperimentRequest)

#endif // OAICreateInferenceExperimentRequest_H
