/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIShuffleConfig.h
 *
 * &lt;p&gt;A configuration for a shuffle option for input data in a channel. If you use &lt;code&gt;S3Prefix&lt;/code&gt; for &lt;code&gt;S3DataType&lt;/code&gt;, the results of the S3 key prefix matches are shuffled. If you use &lt;code&gt;ManifestFile&lt;/code&gt;, the order of the S3 object references in the &lt;code&gt;ManifestFile&lt;/code&gt; is shuffled. If you use &lt;code&gt;AugmentedManifestFile&lt;/code&gt;, the order of the JSON lines in the &lt;code&gt;AugmentedManifestFile&lt;/code&gt; is shuffled. The shuffling order is determined using the &lt;code&gt;Seed&lt;/code&gt; value.&lt;/p&gt; &lt;p&gt;For Pipe input mode, when &lt;code&gt;ShuffleConfig&lt;/code&gt; is specified shuffling is done at the start of every epoch. With large datasets, this ensures that the order of the training data is different for each epoch, and it helps reduce bias and possible overfitting. In a multi-node training job when &lt;code&gt;ShuffleConfig&lt;/code&gt; is combined with &lt;code&gt;S3DataDistributionType&lt;/code&gt; of &lt;code&gt;ShardedByS3Key&lt;/code&gt;, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.&lt;/p&gt;
 */

#ifndef OAIShuffleConfig_H
#define OAIShuffleConfig_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIShuffleConfig : public OAIObject {
public:
    OAIShuffleConfig();
    OAIShuffleConfig(QString json);
    ~OAIShuffleConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getSeed() const;
    void setSeed(const qint32 &seed);
    bool is_seed_Set() const;
    bool is_seed_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_seed;
    bool m_seed_isSet;
    bool m_seed_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIShuffleConfig)

#endif // OAIShuffleConfig_H
