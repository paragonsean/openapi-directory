/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelLatencyThreshold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelLatencyThreshold::OAIModelLatencyThreshold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelLatencyThreshold::OAIModelLatencyThreshold() {
    this->initializeModel();
}

OAIModelLatencyThreshold::~OAIModelLatencyThreshold() {}

void OAIModelLatencyThreshold::initializeModel() {

    m_percentile_isSet = false;
    m_percentile_isValid = false;

    m_value_in_milliseconds_isSet = false;
    m_value_in_milliseconds_isValid = false;
}

void OAIModelLatencyThreshold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelLatencyThreshold::fromJsonObject(QJsonObject json) {

    m_percentile_isValid = ::OpenAPI::fromJsonValue(m_percentile, json[QString("Percentile")]);
    m_percentile_isSet = !json[QString("Percentile")].isNull() && m_percentile_isValid;

    m_value_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_value_in_milliseconds, json[QString("ValueInMilliseconds")]);
    m_value_in_milliseconds_isSet = !json[QString("ValueInMilliseconds")].isNull() && m_value_in_milliseconds_isValid;
}

QString OAIModelLatencyThreshold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelLatencyThreshold::asJsonObject() const {
    QJsonObject obj;
    if (m_percentile_isSet) {
        obj.insert(QString("Percentile"), ::OpenAPI::toJsonValue(m_percentile));
    }
    if (m_value_in_milliseconds_isSet) {
        obj.insert(QString("ValueInMilliseconds"), ::OpenAPI::toJsonValue(m_value_in_milliseconds));
    }
    return obj;
}

QString OAIModelLatencyThreshold::getPercentile() const {
    return m_percentile;
}
void OAIModelLatencyThreshold::setPercentile(const QString &percentile) {
    m_percentile = percentile;
    m_percentile_isSet = true;
}

bool OAIModelLatencyThreshold::is_percentile_Set() const{
    return m_percentile_isSet;
}

bool OAIModelLatencyThreshold::is_percentile_Valid() const{
    return m_percentile_isValid;
}

qint32 OAIModelLatencyThreshold::getValueInMilliseconds() const {
    return m_value_in_milliseconds;
}
void OAIModelLatencyThreshold::setValueInMilliseconds(const qint32 &value_in_milliseconds) {
    m_value_in_milliseconds = value_in_milliseconds;
    m_value_in_milliseconds_isSet = true;
}

bool OAIModelLatencyThreshold::is_value_in_milliseconds_Set() const{
    return m_value_in_milliseconds_isSet;
}

bool OAIModelLatencyThreshold::is_value_in_milliseconds_Valid() const{
    return m_value_in_milliseconds_isValid;
}

bool OAIModelLatencyThreshold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percentile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelLatencyThreshold::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
