/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoMLMetricExtendedEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoMLMetricExtendedEnum::OAIAutoMLMetricExtendedEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoMLMetricExtendedEnum::OAIAutoMLMetricExtendedEnum() {
    this->initializeModel();
}

OAIAutoMLMetricExtendedEnum::~OAIAutoMLMetricExtendedEnum() {}

void OAIAutoMLMetricExtendedEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAutoMLMetricExtendedEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAutoMLMetricExtendedEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Accuracy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::ACCURACY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::MSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("F1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::F1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("F1macro", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::F1MACRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::AUC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RMSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::RMSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::MAE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("R2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::R2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BalancedAccuracy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::BALANCEDACCURACY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Precision", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::PRECISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PrecisionMacro", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::PRECISIONMACRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Recall", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::RECALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RecallMacro", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::RECALLMACRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LogLoss", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::LOGLOSS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InferenceLatency", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::INFERENCELATENCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::MAPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::MASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::WAPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AverageWeightedQuantileLoss", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAutoMLMetricExtendedEnum::AVERAGEWEIGHTEDQUANTILELOSS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAutoMLMetricExtendedEnum::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAutoMLMetricExtendedEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAutoMLMetricExtendedEnum::ACCURACY:
            val = "Accuracy";
            break;
        case eOAIAutoMLMetricExtendedEnum::MSE:
            val = "MSE";
            break;
        case eOAIAutoMLMetricExtendedEnum::F1:
            val = "F1";
            break;
        case eOAIAutoMLMetricExtendedEnum::F1MACRO:
            val = "F1macro";
            break;
        case eOAIAutoMLMetricExtendedEnum::AUC:
            val = "AUC";
            break;
        case eOAIAutoMLMetricExtendedEnum::RMSE:
            val = "RMSE";
            break;
        case eOAIAutoMLMetricExtendedEnum::MAE:
            val = "MAE";
            break;
        case eOAIAutoMLMetricExtendedEnum::R2:
            val = "R2";
            break;
        case eOAIAutoMLMetricExtendedEnum::BALANCEDACCURACY:
            val = "BalancedAccuracy";
            break;
        case eOAIAutoMLMetricExtendedEnum::PRECISION:
            val = "Precision";
            break;
        case eOAIAutoMLMetricExtendedEnum::PRECISIONMACRO:
            val = "PrecisionMacro";
            break;
        case eOAIAutoMLMetricExtendedEnum::RECALL:
            val = "Recall";
            break;
        case eOAIAutoMLMetricExtendedEnum::RECALLMACRO:
            val = "RecallMacro";
            break;
        case eOAIAutoMLMetricExtendedEnum::LOGLOSS:
            val = "LogLoss";
            break;
        case eOAIAutoMLMetricExtendedEnum::INFERENCELATENCY:
            val = "InferenceLatency";
            break;
        case eOAIAutoMLMetricExtendedEnum::MAPE:
            val = "MAPE";
            break;
        case eOAIAutoMLMetricExtendedEnum::MASE:
            val = "MASE";
            break;
        case eOAIAutoMLMetricExtendedEnum::WAPE:
            val = "WAPE";
            break;
        case eOAIAutoMLMetricExtendedEnum::AVERAGEWEIGHTEDQUANTILELOSS:
            val = "AverageWeightedQuantileLoss";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAutoMLMetricExtendedEnum::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAutoMLMetricExtendedEnum::eOAIAutoMLMetricExtendedEnum OAIAutoMLMetricExtendedEnum::getValue() const {
    return m_value;
}

void OAIAutoMLMetricExtendedEnum::setValue(const OAIAutoMLMetricExtendedEnum::eOAIAutoMLMetricExtendedEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAutoMLMetricExtendedEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAIAutoMLMetricExtendedEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
