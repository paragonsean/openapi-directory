/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateImageVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateImageVersionRequest::OAICreateImageVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateImageVersionRequest::OAICreateImageVersionRequest() {
    this->initializeModel();
}

OAICreateImageVersionRequest::~OAICreateImageVersionRequest() {}

void OAICreateImageVersionRequest::initializeModel() {

    m_base_image_isSet = false;
    m_base_image_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_vendor_guidance_isSet = false;
    m_vendor_guidance_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_ml_framework_isSet = false;
    m_ml_framework_isValid = false;

    m_programming_lang_isSet = false;
    m_programming_lang_isValid = false;

    m_processor_isSet = false;
    m_processor_isValid = false;

    m_horovod_isSet = false;
    m_horovod_isValid = false;

    m_release_notes_isSet = false;
    m_release_notes_isValid = false;
}

void OAICreateImageVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateImageVersionRequest::fromJsonObject(QJsonObject json) {

    m_base_image_isValid = ::OpenAPI::fromJsonValue(m_base_image, json[QString("BaseImage")]);
    m_base_image_isSet = !json[QString("BaseImage")].isNull() && m_base_image_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("ImageName")]);
    m_image_name_isSet = !json[QString("ImageName")].isNull() && m_image_name_isValid;

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("Aliases")]);
    m_aliases_isSet = !json[QString("Aliases")].isNull() && m_aliases_isValid;

    m_vendor_guidance_isValid = ::OpenAPI::fromJsonValue(m_vendor_guidance, json[QString("VendorGuidance")]);
    m_vendor_guidance_isSet = !json[QString("VendorGuidance")].isNull() && m_vendor_guidance_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_ml_framework_isValid = ::OpenAPI::fromJsonValue(m_ml_framework, json[QString("MLFramework")]);
    m_ml_framework_isSet = !json[QString("MLFramework")].isNull() && m_ml_framework_isValid;

    m_programming_lang_isValid = ::OpenAPI::fromJsonValue(m_programming_lang, json[QString("ProgrammingLang")]);
    m_programming_lang_isSet = !json[QString("ProgrammingLang")].isNull() && m_programming_lang_isValid;

    m_processor_isValid = ::OpenAPI::fromJsonValue(m_processor, json[QString("Processor")]);
    m_processor_isSet = !json[QString("Processor")].isNull() && m_processor_isValid;

    m_horovod_isValid = ::OpenAPI::fromJsonValue(m_horovod, json[QString("Horovod")]);
    m_horovod_isSet = !json[QString("Horovod")].isNull() && m_horovod_isValid;

    m_release_notes_isValid = ::OpenAPI::fromJsonValue(m_release_notes, json[QString("ReleaseNotes")]);
    m_release_notes_isSet = !json[QString("ReleaseNotes")].isNull() && m_release_notes_isValid;
}

QString OAICreateImageVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateImageVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_base_image_isSet) {
        obj.insert(QString("BaseImage"), ::OpenAPI::toJsonValue(m_base_image));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("ImageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_aliases.isSet()) {
        obj.insert(QString("Aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_vendor_guidance.isSet()) {
        obj.insert(QString("VendorGuidance"), ::OpenAPI::toJsonValue(m_vendor_guidance));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_ml_framework_isSet) {
        obj.insert(QString("MLFramework"), ::OpenAPI::toJsonValue(m_ml_framework));
    }
    if (m_programming_lang_isSet) {
        obj.insert(QString("ProgrammingLang"), ::OpenAPI::toJsonValue(m_programming_lang));
    }
    if (m_processor.isSet()) {
        obj.insert(QString("Processor"), ::OpenAPI::toJsonValue(m_processor));
    }
    if (m_horovod_isSet) {
        obj.insert(QString("Horovod"), ::OpenAPI::toJsonValue(m_horovod));
    }
    if (m_release_notes_isSet) {
        obj.insert(QString("ReleaseNotes"), ::OpenAPI::toJsonValue(m_release_notes));
    }
    return obj;
}

QString OAICreateImageVersionRequest::getBaseImage() const {
    return m_base_image;
}
void OAICreateImageVersionRequest::setBaseImage(const QString &base_image) {
    m_base_image = base_image;
    m_base_image_isSet = true;
}

bool OAICreateImageVersionRequest::is_base_image_Set() const{
    return m_base_image_isSet;
}

bool OAICreateImageVersionRequest::is_base_image_Valid() const{
    return m_base_image_isValid;
}

QString OAICreateImageVersionRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateImageVersionRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateImageVersionRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateImageVersionRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateImageVersionRequest::getImageName() const {
    return m_image_name;
}
void OAICreateImageVersionRequest::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAICreateImageVersionRequest::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAICreateImageVersionRequest::is_image_name_Valid() const{
    return m_image_name_isValid;
}

QList OAICreateImageVersionRequest::getAliases() const {
    return m_aliases;
}
void OAICreateImageVersionRequest::setAliases(const QList &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAICreateImageVersionRequest::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAICreateImageVersionRequest::is_aliases_Valid() const{
    return m_aliases_isValid;
}

OAIVendorGuidance OAICreateImageVersionRequest::getVendorGuidance() const {
    return m_vendor_guidance;
}
void OAICreateImageVersionRequest::setVendorGuidance(const OAIVendorGuidance &vendor_guidance) {
    m_vendor_guidance = vendor_guidance;
    m_vendor_guidance_isSet = true;
}

bool OAICreateImageVersionRequest::is_vendor_guidance_Set() const{
    return m_vendor_guidance_isSet;
}

bool OAICreateImageVersionRequest::is_vendor_guidance_Valid() const{
    return m_vendor_guidance_isValid;
}

OAIJobType OAICreateImageVersionRequest::getJobType() const {
    return m_job_type;
}
void OAICreateImageVersionRequest::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAICreateImageVersionRequest::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAICreateImageVersionRequest::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAICreateImageVersionRequest::getMlFramework() const {
    return m_ml_framework;
}
void OAICreateImageVersionRequest::setMlFramework(const QString &ml_framework) {
    m_ml_framework = ml_framework;
    m_ml_framework_isSet = true;
}

bool OAICreateImageVersionRequest::is_ml_framework_Set() const{
    return m_ml_framework_isSet;
}

bool OAICreateImageVersionRequest::is_ml_framework_Valid() const{
    return m_ml_framework_isValid;
}

QString OAICreateImageVersionRequest::getProgrammingLang() const {
    return m_programming_lang;
}
void OAICreateImageVersionRequest::setProgrammingLang(const QString &programming_lang) {
    m_programming_lang = programming_lang;
    m_programming_lang_isSet = true;
}

bool OAICreateImageVersionRequest::is_programming_lang_Set() const{
    return m_programming_lang_isSet;
}

bool OAICreateImageVersionRequest::is_programming_lang_Valid() const{
    return m_programming_lang_isValid;
}

OAIProcessor OAICreateImageVersionRequest::getProcessor() const {
    return m_processor;
}
void OAICreateImageVersionRequest::setProcessor(const OAIProcessor &processor) {
    m_processor = processor;
    m_processor_isSet = true;
}

bool OAICreateImageVersionRequest::is_processor_Set() const{
    return m_processor_isSet;
}

bool OAICreateImageVersionRequest::is_processor_Valid() const{
    return m_processor_isValid;
}

bool OAICreateImageVersionRequest::getHorovod() const {
    return m_horovod;
}
void OAICreateImageVersionRequest::setHorovod(const bool &horovod) {
    m_horovod = horovod;
    m_horovod_isSet = true;
}

bool OAICreateImageVersionRequest::is_horovod_Set() const{
    return m_horovod_isSet;
}

bool OAICreateImageVersionRequest::is_horovod_Valid() const{
    return m_horovod_isValid;
}

QString OAICreateImageVersionRequest::getReleaseNotes() const {
    return m_release_notes;
}
void OAICreateImageVersionRequest::setReleaseNotes(const QString &release_notes) {
    m_release_notes = release_notes;
    m_release_notes_isSet = true;
}

bool OAICreateImageVersionRequest::is_release_notes_Set() const{
    return m_release_notes_isSet;
}

bool OAICreateImageVersionRequest::is_release_notes_Valid() const{
    return m_release_notes_isValid;
}

bool OAICreateImageVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_guidance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ml_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programming_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_horovod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_notes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateImageVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_image_isValid && m_client_token_isValid && m_image_name_isValid && true;
}

} // namespace OpenAPI
