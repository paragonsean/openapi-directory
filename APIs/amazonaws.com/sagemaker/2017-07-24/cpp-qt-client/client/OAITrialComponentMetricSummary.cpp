/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrialComponentMetricSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrialComponentMetricSummary::OAITrialComponentMetricSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrialComponentMetricSummary::OAITrialComponentMetricSummary() {
    this->initializeModel();
}

OAITrialComponentMetricSummary::~OAITrialComponentMetricSummary() {}

void OAITrialComponentMetricSummary::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_avg_isSet = false;
    m_avg_isValid = false;

    m_std_dev_isSet = false;
    m_std_dev_isValid = false;
}

void OAITrialComponentMetricSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrialComponentMetricSummary::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("SourceArn")]);
    m_source_arn_isSet = !json[QString("SourceArn")].isNull() && m_source_arn_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("Max")]);
    m_max_isSet = !json[QString("Max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("Min")]);
    m_min_isSet = !json[QString("Min")].isNull() && m_min_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("Last")]);
    m_last_isSet = !json[QString("Last")].isNull() && m_last_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_avg_isValid = ::OpenAPI::fromJsonValue(m_avg, json[QString("Avg")]);
    m_avg_isSet = !json[QString("Avg")].isNull() && m_avg_isValid;

    m_std_dev_isValid = ::OpenAPI::fromJsonValue(m_std_dev, json[QString("StdDev")]);
    m_std_dev_isSet = !json[QString("StdDev")].isNull() && m_std_dev_isValid;
}

QString OAITrialComponentMetricSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrialComponentMetricSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("SourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_max_isSet) {
        obj.insert(QString("Max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("Min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_last_isSet) {
        obj.insert(QString("Last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_avg_isSet) {
        obj.insert(QString("Avg"), ::OpenAPI::toJsonValue(m_avg));
    }
    if (m_std_dev_isSet) {
        obj.insert(QString("StdDev"), ::OpenAPI::toJsonValue(m_std_dev));
    }
    return obj;
}

QString OAITrialComponentMetricSummary::getMetricName() const {
    return m_metric_name;
}
void OAITrialComponentMetricSummary::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAITrialComponentMetricSummary::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAITrialComponentMetricSummary::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAITrialComponentMetricSummary::getSourceArn() const {
    return m_source_arn;
}
void OAITrialComponentMetricSummary::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAITrialComponentMetricSummary::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAITrialComponentMetricSummary::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

QDateTime OAITrialComponentMetricSummary::getTimeStamp() const {
    return m_time_stamp;
}
void OAITrialComponentMetricSummary::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAITrialComponentMetricSummary::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAITrialComponentMetricSummary::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

double OAITrialComponentMetricSummary::getMax() const {
    return m_max;
}
void OAITrialComponentMetricSummary::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAITrialComponentMetricSummary::is_max_Set() const{
    return m_max_isSet;
}

bool OAITrialComponentMetricSummary::is_max_Valid() const{
    return m_max_isValid;
}

double OAITrialComponentMetricSummary::getMin() const {
    return m_min;
}
void OAITrialComponentMetricSummary::setMin(const double &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAITrialComponentMetricSummary::is_min_Set() const{
    return m_min_isSet;
}

bool OAITrialComponentMetricSummary::is_min_Valid() const{
    return m_min_isValid;
}

double OAITrialComponentMetricSummary::getLast() const {
    return m_last;
}
void OAITrialComponentMetricSummary::setLast(const double &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAITrialComponentMetricSummary::is_last_Set() const{
    return m_last_isSet;
}

bool OAITrialComponentMetricSummary::is_last_Valid() const{
    return m_last_isValid;
}

qint32 OAITrialComponentMetricSummary::getCount() const {
    return m_count;
}
void OAITrialComponentMetricSummary::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAITrialComponentMetricSummary::is_count_Set() const{
    return m_count_isSet;
}

bool OAITrialComponentMetricSummary::is_count_Valid() const{
    return m_count_isValid;
}

double OAITrialComponentMetricSummary::getAvg() const {
    return m_avg;
}
void OAITrialComponentMetricSummary::setAvg(const double &avg) {
    m_avg = avg;
    m_avg_isSet = true;
}

bool OAITrialComponentMetricSummary::is_avg_Set() const{
    return m_avg_isSet;
}

bool OAITrialComponentMetricSummary::is_avg_Valid() const{
    return m_avg_isValid;
}

double OAITrialComponentMetricSummary::getStdDev() const {
    return m_std_dev;
}
void OAITrialComponentMetricSummary::setStdDev(const double &std_dev) {
    m_std_dev = std_dev;
    m_std_dev_isSet = true;
}

bool OAITrialComponentMetricSummary::is_std_dev_Set() const{
    return m_std_dev_isSet;
}

bool OAITrialComponentMetricSummary::is_std_dev_Valid() const{
    return m_std_dev_isValid;
}

bool OAITrialComponentMetricSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_std_dev_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrialComponentMetricSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
