/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPendingDeploymentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPendingDeploymentSummary::OAIPendingDeploymentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPendingDeploymentSummary::OAIPendingDeploymentSummary() {
    this->initializeModel();
}

OAIPendingDeploymentSummary::~OAIPendingDeploymentSummary() {}

void OAIPendingDeploymentSummary::initializeModel() {

    m_endpoint_config_name_isSet = false;
    m_endpoint_config_name_isValid = false;

    m_production_variants_isSet = false;
    m_production_variants_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_shadow_production_variants_isSet = false;
    m_shadow_production_variants_isValid = false;
}

void OAIPendingDeploymentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPendingDeploymentSummary::fromJsonObject(QJsonObject json) {

    m_endpoint_config_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_config_name, json[QString("EndpointConfigName")]);
    m_endpoint_config_name_isSet = !json[QString("EndpointConfigName")].isNull() && m_endpoint_config_name_isValid;

    m_production_variants_isValid = ::OpenAPI::fromJsonValue(m_production_variants, json[QString("ProductionVariants")]);
    m_production_variants_isSet = !json[QString("ProductionVariants")].isNull() && m_production_variants_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_shadow_production_variants_isValid = ::OpenAPI::fromJsonValue(m_shadow_production_variants, json[QString("ShadowProductionVariants")]);
    m_shadow_production_variants_isSet = !json[QString("ShadowProductionVariants")].isNull() && m_shadow_production_variants_isValid;
}

QString OAIPendingDeploymentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPendingDeploymentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_config_name_isSet) {
        obj.insert(QString("EndpointConfigName"), ::OpenAPI::toJsonValue(m_endpoint_config_name));
    }
    if (m_production_variants.isSet()) {
        obj.insert(QString("ProductionVariants"), ::OpenAPI::toJsonValue(m_production_variants));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_shadow_production_variants.isSet()) {
        obj.insert(QString("ShadowProductionVariants"), ::OpenAPI::toJsonValue(m_shadow_production_variants));
    }
    return obj;
}

QString OAIPendingDeploymentSummary::getEndpointConfigName() const {
    return m_endpoint_config_name;
}
void OAIPendingDeploymentSummary::setEndpointConfigName(const QString &endpoint_config_name) {
    m_endpoint_config_name = endpoint_config_name;
    m_endpoint_config_name_isSet = true;
}

bool OAIPendingDeploymentSummary::is_endpoint_config_name_Set() const{
    return m_endpoint_config_name_isSet;
}

bool OAIPendingDeploymentSummary::is_endpoint_config_name_Valid() const{
    return m_endpoint_config_name_isValid;
}

QList OAIPendingDeploymentSummary::getProductionVariants() const {
    return m_production_variants;
}
void OAIPendingDeploymentSummary::setProductionVariants(const QList &production_variants) {
    m_production_variants = production_variants;
    m_production_variants_isSet = true;
}

bool OAIPendingDeploymentSummary::is_production_variants_Set() const{
    return m_production_variants_isSet;
}

bool OAIPendingDeploymentSummary::is_production_variants_Valid() const{
    return m_production_variants_isValid;
}

QDateTime OAIPendingDeploymentSummary::getStartTime() const {
    return m_start_time;
}
void OAIPendingDeploymentSummary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPendingDeploymentSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPendingDeploymentSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList OAIPendingDeploymentSummary::getShadowProductionVariants() const {
    return m_shadow_production_variants;
}
void OAIPendingDeploymentSummary::setShadowProductionVariants(const QList &shadow_production_variants) {
    m_shadow_production_variants = shadow_production_variants;
    m_shadow_production_variants_isSet = true;
}

bool OAIPendingDeploymentSummary::is_shadow_production_variants_Set() const{
    return m_shadow_production_variants_isSet;
}

bool OAIPendingDeploymentSummary::is_shadow_production_variants_Valid() const{
    return m_shadow_production_variants_isValid;
}

bool OAIPendingDeploymentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_production_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPendingDeploymentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_config_name_isValid && true;
}

} // namespace OpenAPI
