/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrialComponentMetricSummary.h
 *
 * A summary of the metrics of a trial component.
 */

#ifndef OAITrialComponentMetricSummary_H
#define OAITrialComponentMetricSummary_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITrialComponentMetricSummary : public OAIObject {
public:
    OAITrialComponentMetricSummary();
    OAITrialComponentMetricSummary(QString json);
    ~OAITrialComponentMetricSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    QString getSourceArn() const;
    void setSourceArn(const QString &source_arn);
    bool is_source_arn_Set() const;
    bool is_source_arn_Valid() const;

    QDateTime getTimeStamp() const;
    void setTimeStamp(const QDateTime &time_stamp);
    bool is_time_stamp_Set() const;
    bool is_time_stamp_Valid() const;

    double getMax() const;
    void setMax(const double &max);
    bool is_max_Set() const;
    bool is_max_Valid() const;

    double getMin() const;
    void setMin(const double &min);
    bool is_min_Set() const;
    bool is_min_Valid() const;

    double getLast() const;
    void setLast(const double &last);
    bool is_last_Set() const;
    bool is_last_Valid() const;

    qint32 getCount() const;
    void setCount(const qint32 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    double getAvg() const;
    void setAvg(const double &avg);
    bool is_avg_Set() const;
    bool is_avg_Valid() const;

    double getStdDev() const;
    void setStdDev(const double &std_dev);
    bool is_std_dev_Set() const;
    bool is_std_dev_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    QString m_source_arn;
    bool m_source_arn_isSet;
    bool m_source_arn_isValid;

    QDateTime m_time_stamp;
    bool m_time_stamp_isSet;
    bool m_time_stamp_isValid;

    double m_max;
    bool m_max_isSet;
    bool m_max_isValid;

    double m_min;
    bool m_min_isSet;
    bool m_min_isValid;

    double m_last;
    bool m_last_isSet;
    bool m_last_isValid;

    qint32 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    double m_avg;
    bool m_avg_isSet;
    bool m_avg_isValid;

    double m_std_dev;
    bool m_std_dev_isSet;
    bool m_std_dev_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrialComponentMetricSummary)

#endif // OAITrialComponentMetricSummary_H
