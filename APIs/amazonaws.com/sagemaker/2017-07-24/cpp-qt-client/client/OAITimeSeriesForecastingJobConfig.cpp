/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesForecastingJobConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesForecastingJobConfig::OAITimeSeriesForecastingJobConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesForecastingJobConfig::OAITimeSeriesForecastingJobConfig() {
    this->initializeModel();
}

OAITimeSeriesForecastingJobConfig::~OAITimeSeriesForecastingJobConfig() {}

void OAITimeSeriesForecastingJobConfig::initializeModel() {

    m_feature_specification_s3_uri_isSet = false;
    m_feature_specification_s3_uri_isValid = false;

    m_completion_criteria_isSet = false;
    m_completion_criteria_isValid = false;

    m_forecast_frequency_isSet = false;
    m_forecast_frequency_isValid = false;

    m_forecast_horizon_isSet = false;
    m_forecast_horizon_isValid = false;

    m_forecast_quantiles_isSet = false;
    m_forecast_quantiles_isValid = false;

    m_transformations_isSet = false;
    m_transformations_isValid = false;

    m_time_series_config_isSet = false;
    m_time_series_config_isValid = false;
}

void OAITimeSeriesForecastingJobConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesForecastingJobConfig::fromJsonObject(QJsonObject json) {

    m_feature_specification_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_feature_specification_s3_uri, json[QString("FeatureSpecificationS3Uri")]);
    m_feature_specification_s3_uri_isSet = !json[QString("FeatureSpecificationS3Uri")].isNull() && m_feature_specification_s3_uri_isValid;

    m_completion_criteria_isValid = ::OpenAPI::fromJsonValue(m_completion_criteria, json[QString("CompletionCriteria")]);
    m_completion_criteria_isSet = !json[QString("CompletionCriteria")].isNull() && m_completion_criteria_isValid;

    m_forecast_frequency_isValid = ::OpenAPI::fromJsonValue(m_forecast_frequency, json[QString("ForecastFrequency")]);
    m_forecast_frequency_isSet = !json[QString("ForecastFrequency")].isNull() && m_forecast_frequency_isValid;

    m_forecast_horizon_isValid = ::OpenAPI::fromJsonValue(m_forecast_horizon, json[QString("ForecastHorizon")]);
    m_forecast_horizon_isSet = !json[QString("ForecastHorizon")].isNull() && m_forecast_horizon_isValid;

    m_forecast_quantiles_isValid = ::OpenAPI::fromJsonValue(m_forecast_quantiles, json[QString("ForecastQuantiles")]);
    m_forecast_quantiles_isSet = !json[QString("ForecastQuantiles")].isNull() && m_forecast_quantiles_isValid;

    m_transformations_isValid = ::OpenAPI::fromJsonValue(m_transformations, json[QString("Transformations")]);
    m_transformations_isSet = !json[QString("Transformations")].isNull() && m_transformations_isValid;

    m_time_series_config_isValid = ::OpenAPI::fromJsonValue(m_time_series_config, json[QString("TimeSeriesConfig")]);
    m_time_series_config_isSet = !json[QString("TimeSeriesConfig")].isNull() && m_time_series_config_isValid;
}

QString OAITimeSeriesForecastingJobConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesForecastingJobConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_specification_s3_uri_isSet) {
        obj.insert(QString("FeatureSpecificationS3Uri"), ::OpenAPI::toJsonValue(m_feature_specification_s3_uri));
    }
    if (m_completion_criteria.isSet()) {
        obj.insert(QString("CompletionCriteria"), ::OpenAPI::toJsonValue(m_completion_criteria));
    }
    if (m_forecast_frequency_isSet) {
        obj.insert(QString("ForecastFrequency"), ::OpenAPI::toJsonValue(m_forecast_frequency));
    }
    if (m_forecast_horizon_isSet) {
        obj.insert(QString("ForecastHorizon"), ::OpenAPI::toJsonValue(m_forecast_horizon));
    }
    if (m_forecast_quantiles.isSet()) {
        obj.insert(QString("ForecastQuantiles"), ::OpenAPI::toJsonValue(m_forecast_quantiles));
    }
    if (m_transformations.isSet()) {
        obj.insert(QString("Transformations"), ::OpenAPI::toJsonValue(m_transformations));
    }
    if (m_time_series_config.isSet()) {
        obj.insert(QString("TimeSeriesConfig"), ::OpenAPI::toJsonValue(m_time_series_config));
    }
    return obj;
}

QString OAITimeSeriesForecastingJobConfig::getFeatureSpecificationS3Uri() const {
    return m_feature_specification_s3_uri;
}
void OAITimeSeriesForecastingJobConfig::setFeatureSpecificationS3Uri(const QString &feature_specification_s3_uri) {
    m_feature_specification_s3_uri = feature_specification_s3_uri;
    m_feature_specification_s3_uri_isSet = true;
}

bool OAITimeSeriesForecastingJobConfig::is_feature_specification_s3_uri_Set() const{
    return m_feature_specification_s3_uri_isSet;
}

bool OAITimeSeriesForecastingJobConfig::is_feature_specification_s3_uri_Valid() const{
    return m_feature_specification_s3_uri_isValid;
}

OAIAutoMLJobCompletionCriteria OAITimeSeriesForecastingJobConfig::getCompletionCriteria() const {
    return m_completion_criteria;
}
void OAITimeSeriesForecastingJobConfig::setCompletionCriteria(const OAIAutoMLJobCompletionCriteria &completion_criteria) {
    m_completion_criteria = completion_criteria;
    m_completion_criteria_isSet = true;
}

bool OAITimeSeriesForecastingJobConfig::is_completion_criteria_Set() const{
    return m_completion_criteria_isSet;
}

bool OAITimeSeriesForecastingJobConfig::is_completion_criteria_Valid() const{
    return m_completion_criteria_isValid;
}

QString OAITimeSeriesForecastingJobConfig::getForecastFrequency() const {
    return m_forecast_frequency;
}
void OAITimeSeriesForecastingJobConfig::setForecastFrequency(const QString &forecast_frequency) {
    m_forecast_frequency = forecast_frequency;
    m_forecast_frequency_isSet = true;
}

bool OAITimeSeriesForecastingJobConfig::is_forecast_frequency_Set() const{
    return m_forecast_frequency_isSet;
}

bool OAITimeSeriesForecastingJobConfig::is_forecast_frequency_Valid() const{
    return m_forecast_frequency_isValid;
}

qint32 OAITimeSeriesForecastingJobConfig::getForecastHorizon() const {
    return m_forecast_horizon;
}
void OAITimeSeriesForecastingJobConfig::setForecastHorizon(const qint32 &forecast_horizon) {
    m_forecast_horizon = forecast_horizon;
    m_forecast_horizon_isSet = true;
}

bool OAITimeSeriesForecastingJobConfig::is_forecast_horizon_Set() const{
    return m_forecast_horizon_isSet;
}

bool OAITimeSeriesForecastingJobConfig::is_forecast_horizon_Valid() const{
    return m_forecast_horizon_isValid;
}

QList OAITimeSeriesForecastingJobConfig::getForecastQuantiles() const {
    return m_forecast_quantiles;
}
void OAITimeSeriesForecastingJobConfig::setForecastQuantiles(const QList &forecast_quantiles) {
    m_forecast_quantiles = forecast_quantiles;
    m_forecast_quantiles_isSet = true;
}

bool OAITimeSeriesForecastingJobConfig::is_forecast_quantiles_Set() const{
    return m_forecast_quantiles_isSet;
}

bool OAITimeSeriesForecastingJobConfig::is_forecast_quantiles_Valid() const{
    return m_forecast_quantiles_isValid;
}

OAITimeSeriesForecastingJobConfig_Transformations OAITimeSeriesForecastingJobConfig::getTransformations() const {
    return m_transformations;
}
void OAITimeSeriesForecastingJobConfig::setTransformations(const OAITimeSeriesForecastingJobConfig_Transformations &transformations) {
    m_transformations = transformations;
    m_transformations_isSet = true;
}

bool OAITimeSeriesForecastingJobConfig::is_transformations_Set() const{
    return m_transformations_isSet;
}

bool OAITimeSeriesForecastingJobConfig::is_transformations_Valid() const{
    return m_transformations_isValid;
}

OAITimeSeriesForecastingJobConfig_TimeSeriesConfig OAITimeSeriesForecastingJobConfig::getTimeSeriesConfig() const {
    return m_time_series_config;
}
void OAITimeSeriesForecastingJobConfig::setTimeSeriesConfig(const OAITimeSeriesForecastingJobConfig_TimeSeriesConfig &time_series_config) {
    m_time_series_config = time_series_config;
    m_time_series_config_isSet = true;
}

bool OAITimeSeriesForecastingJobConfig::is_time_series_config_Set() const{
    return m_time_series_config_isSet;
}

bool OAITimeSeriesForecastingJobConfig::is_time_series_config_Valid() const{
    return m_time_series_config_isValid;
}

bool OAITimeSeriesForecastingJobConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_specification_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_horizon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_quantiles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesForecastingJobConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_forecast_frequency_isValid && m_forecast_horizon_isValid && m_time_series_config_isValid && true;
}

} // namespace OpenAPI
