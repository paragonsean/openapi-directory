/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabelingJobForWorkteamSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabelingJobForWorkteamSummary::OAILabelingJobForWorkteamSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabelingJobForWorkteamSummary::OAILabelingJobForWorkteamSummary() {
    this->initializeModel();
}

OAILabelingJobForWorkteamSummary::~OAILabelingJobForWorkteamSummary() {}

void OAILabelingJobForWorkteamSummary::initializeModel() {

    m_labeling_job_name_isSet = false;
    m_labeling_job_name_isValid = false;

    m_job_reference_code_isSet = false;
    m_job_reference_code_isValid = false;

    m_work_requester_account_id_isSet = false;
    m_work_requester_account_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_label_counters_isSet = false;
    m_label_counters_isValid = false;

    m_number_of_human_workers_per_data_object_isSet = false;
    m_number_of_human_workers_per_data_object_isValid = false;
}

void OAILabelingJobForWorkteamSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabelingJobForWorkteamSummary::fromJsonObject(QJsonObject json) {

    m_labeling_job_name_isValid = ::OpenAPI::fromJsonValue(m_labeling_job_name, json[QString("LabelingJobName")]);
    m_labeling_job_name_isSet = !json[QString("LabelingJobName")].isNull() && m_labeling_job_name_isValid;

    m_job_reference_code_isValid = ::OpenAPI::fromJsonValue(m_job_reference_code, json[QString("JobReferenceCode")]);
    m_job_reference_code_isSet = !json[QString("JobReferenceCode")].isNull() && m_job_reference_code_isValid;

    m_work_requester_account_id_isValid = ::OpenAPI::fromJsonValue(m_work_requester_account_id, json[QString("WorkRequesterAccountId")]);
    m_work_requester_account_id_isSet = !json[QString("WorkRequesterAccountId")].isNull() && m_work_requester_account_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_label_counters_isValid = ::OpenAPI::fromJsonValue(m_label_counters, json[QString("LabelCounters")]);
    m_label_counters_isSet = !json[QString("LabelCounters")].isNull() && m_label_counters_isValid;

    m_number_of_human_workers_per_data_object_isValid = ::OpenAPI::fromJsonValue(m_number_of_human_workers_per_data_object, json[QString("NumberOfHumanWorkersPerDataObject")]);
    m_number_of_human_workers_per_data_object_isSet = !json[QString("NumberOfHumanWorkersPerDataObject")].isNull() && m_number_of_human_workers_per_data_object_isValid;
}

QString OAILabelingJobForWorkteamSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabelingJobForWorkteamSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_labeling_job_name_isSet) {
        obj.insert(QString("LabelingJobName"), ::OpenAPI::toJsonValue(m_labeling_job_name));
    }
    if (m_job_reference_code_isSet) {
        obj.insert(QString("JobReferenceCode"), ::OpenAPI::toJsonValue(m_job_reference_code));
    }
    if (m_work_requester_account_id_isSet) {
        obj.insert(QString("WorkRequesterAccountId"), ::OpenAPI::toJsonValue(m_work_requester_account_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_label_counters.isSet()) {
        obj.insert(QString("LabelCounters"), ::OpenAPI::toJsonValue(m_label_counters));
    }
    if (m_number_of_human_workers_per_data_object_isSet) {
        obj.insert(QString("NumberOfHumanWorkersPerDataObject"), ::OpenAPI::toJsonValue(m_number_of_human_workers_per_data_object));
    }
    return obj;
}

QString OAILabelingJobForWorkteamSummary::getLabelingJobName() const {
    return m_labeling_job_name;
}
void OAILabelingJobForWorkteamSummary::setLabelingJobName(const QString &labeling_job_name) {
    m_labeling_job_name = labeling_job_name;
    m_labeling_job_name_isSet = true;
}

bool OAILabelingJobForWorkteamSummary::is_labeling_job_name_Set() const{
    return m_labeling_job_name_isSet;
}

bool OAILabelingJobForWorkteamSummary::is_labeling_job_name_Valid() const{
    return m_labeling_job_name_isValid;
}

QString OAILabelingJobForWorkteamSummary::getJobReferenceCode() const {
    return m_job_reference_code;
}
void OAILabelingJobForWorkteamSummary::setJobReferenceCode(const QString &job_reference_code) {
    m_job_reference_code = job_reference_code;
    m_job_reference_code_isSet = true;
}

bool OAILabelingJobForWorkteamSummary::is_job_reference_code_Set() const{
    return m_job_reference_code_isSet;
}

bool OAILabelingJobForWorkteamSummary::is_job_reference_code_Valid() const{
    return m_job_reference_code_isValid;
}

QString OAILabelingJobForWorkteamSummary::getWorkRequesterAccountId() const {
    return m_work_requester_account_id;
}
void OAILabelingJobForWorkteamSummary::setWorkRequesterAccountId(const QString &work_requester_account_id) {
    m_work_requester_account_id = work_requester_account_id;
    m_work_requester_account_id_isSet = true;
}

bool OAILabelingJobForWorkteamSummary::is_work_requester_account_id_Set() const{
    return m_work_requester_account_id_isSet;
}

bool OAILabelingJobForWorkteamSummary::is_work_requester_account_id_Valid() const{
    return m_work_requester_account_id_isValid;
}

QDateTime OAILabelingJobForWorkteamSummary::getCreationTime() const {
    return m_creation_time;
}
void OAILabelingJobForWorkteamSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAILabelingJobForWorkteamSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAILabelingJobForWorkteamSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAILabelingJobForWorkteamSummary_LabelCounters OAILabelingJobForWorkteamSummary::getLabelCounters() const {
    return m_label_counters;
}
void OAILabelingJobForWorkteamSummary::setLabelCounters(const OAILabelingJobForWorkteamSummary_LabelCounters &label_counters) {
    m_label_counters = label_counters;
    m_label_counters_isSet = true;
}

bool OAILabelingJobForWorkteamSummary::is_label_counters_Set() const{
    return m_label_counters_isSet;
}

bool OAILabelingJobForWorkteamSummary::is_label_counters_Valid() const{
    return m_label_counters_isValid;
}

qint32 OAILabelingJobForWorkteamSummary::getNumberOfHumanWorkersPerDataObject() const {
    return m_number_of_human_workers_per_data_object;
}
void OAILabelingJobForWorkteamSummary::setNumberOfHumanWorkersPerDataObject(const qint32 &number_of_human_workers_per_data_object) {
    m_number_of_human_workers_per_data_object = number_of_human_workers_per_data_object;
    m_number_of_human_workers_per_data_object_isSet = true;
}

bool OAILabelingJobForWorkteamSummary::is_number_of_human_workers_per_data_object_Set() const{
    return m_number_of_human_workers_per_data_object_isSet;
}

bool OAILabelingJobForWorkteamSummary::is_number_of_human_workers_per_data_object_Valid() const{
    return m_number_of_human_workers_per_data_object_isValid;
}

bool OAILabelingJobForWorkteamSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labeling_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_reference_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_requester_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_counters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_human_workers_per_data_object_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabelingJobForWorkteamSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_reference_code_isValid && m_work_requester_account_id_isValid && m_creation_time_isValid && true;
}

} // namespace OpenAPI
