/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecommendationJobStoppingConditions.h
 *
 * Specifies conditions for stopping a job. When a job reaches a stopping condition limit, SageMaker ends the job.
 */

#ifndef OAIRecommendationJobStoppingConditions_H
#define OAIRecommendationJobStoppingConditions_H

#include <QJsonObject>

#include "OAIFlatInvocations.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRecommendationJobStoppingConditions : public OAIObject {
public:
    OAIRecommendationJobStoppingConditions();
    OAIRecommendationJobStoppingConditions(QString json);
    ~OAIRecommendationJobStoppingConditions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMaxInvocations() const;
    void setMaxInvocations(const qint32 &max_invocations);
    bool is_max_invocations_Set() const;
    bool is_max_invocations_Valid() const;

    QList getModelLatencyThresholds() const;
    void setModelLatencyThresholds(const QList &model_latency_thresholds);
    bool is_model_latency_thresholds_Set() const;
    bool is_model_latency_thresholds_Valid() const;

    OAIFlatInvocations getFlatInvocations() const;
    void setFlatInvocations(const OAIFlatInvocations &flat_invocations);
    bool is_flat_invocations_Set() const;
    bool is_flat_invocations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_max_invocations;
    bool m_max_invocations_isSet;
    bool m_max_invocations_isValid;

    QList m_model_latency_thresholds;
    bool m_model_latency_thresholds_isSet;
    bool m_model_latency_thresholds_isValid;

    OAIFlatInvocations m_flat_invocations;
    bool m_flat_invocations_isSet;
    bool m_flat_invocations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecommendationJobStoppingConditions)

#endif // OAIRecommendationJobStoppingConditions_H
