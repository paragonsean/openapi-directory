/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetPlatform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetPlatform::OAITargetPlatform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetPlatform::OAITargetPlatform() {
    this->initializeModel();
}

OAITargetPlatform::~OAITargetPlatform() {}

void OAITargetPlatform::initializeModel() {

    m_os_isSet = false;
    m_os_isValid = false;

    m_arch_isSet = false;
    m_arch_isValid = false;

    m_accelerator_isSet = false;
    m_accelerator_isValid = false;
}

void OAITargetPlatform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetPlatform::fromJsonObject(QJsonObject json) {

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("Os")]);
    m_os_isSet = !json[QString("Os")].isNull() && m_os_isValid;

    m_arch_isValid = ::OpenAPI::fromJsonValue(m_arch, json[QString("Arch")]);
    m_arch_isSet = !json[QString("Arch")].isNull() && m_arch_isValid;

    m_accelerator_isValid = ::OpenAPI::fromJsonValue(m_accelerator, json[QString("Accelerator")]);
    m_accelerator_isSet = !json[QString("Accelerator")].isNull() && m_accelerator_isValid;
}

QString OAITargetPlatform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetPlatform::asJsonObject() const {
    QJsonObject obj;
    if (m_os.isSet()) {
        obj.insert(QString("Os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_arch.isSet()) {
        obj.insert(QString("Arch"), ::OpenAPI::toJsonValue(m_arch));
    }
    if (m_accelerator.isSet()) {
        obj.insert(QString("Accelerator"), ::OpenAPI::toJsonValue(m_accelerator));
    }
    return obj;
}

OAITargetPlatformOs OAITargetPlatform::getOs() const {
    return m_os;
}
void OAITargetPlatform::setOs(const OAITargetPlatformOs &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAITargetPlatform::is_os_Set() const{
    return m_os_isSet;
}

bool OAITargetPlatform::is_os_Valid() const{
    return m_os_isValid;
}

OAITargetPlatformArch OAITargetPlatform::getArch() const {
    return m_arch;
}
void OAITargetPlatform::setArch(const OAITargetPlatformArch &arch) {
    m_arch = arch;
    m_arch_isSet = true;
}

bool OAITargetPlatform::is_arch_Set() const{
    return m_arch_isSet;
}

bool OAITargetPlatform::is_arch_Valid() const{
    return m_arch_isValid;
}

OAITargetPlatformAccelerator OAITargetPlatform::getAccelerator() const {
    return m_accelerator;
}
void OAITargetPlatform::setAccelerator(const OAITargetPlatformAccelerator &accelerator) {
    m_accelerator = accelerator;
    m_accelerator_isSet = true;
}

bool OAITargetPlatform::is_accelerator_Set() const{
    return m_accelerator_isSet;
}

bool OAITargetPlatform::is_accelerator_Valid() const{
    return m_accelerator_isValid;
}

bool OAITargetPlatform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetPlatform::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_os_isValid && m_arch_isValid && true;
}

} // namespace OpenAPI
