/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTrialComponentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTrialComponentRequest::OAIUpdateTrialComponentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTrialComponentRequest::OAIUpdateTrialComponentRequest() {
    this->initializeModel();
}

OAIUpdateTrialComponentRequest::~OAIUpdateTrialComponentRequest() {}

void OAIUpdateTrialComponentRequest::initializeModel() {

    m_trial_component_name_isSet = false;
    m_trial_component_name_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_parameters_to_remove_isSet = false;
    m_parameters_to_remove_isValid = false;

    m_input_artifacts_isSet = false;
    m_input_artifacts_isValid = false;

    m_input_artifacts_to_remove_isSet = false;
    m_input_artifacts_to_remove_isValid = false;

    m_output_artifacts_isSet = false;
    m_output_artifacts_isValid = false;

    m_output_artifacts_to_remove_isSet = false;
    m_output_artifacts_to_remove_isValid = false;
}

void OAIUpdateTrialComponentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTrialComponentRequest::fromJsonObject(QJsonObject json) {

    m_trial_component_name_isValid = ::OpenAPI::fromJsonValue(m_trial_component_name, json[QString("TrialComponentName")]);
    m_trial_component_name_isSet = !json[QString("TrialComponentName")].isNull() && m_trial_component_name_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_parameters_to_remove_isValid = ::OpenAPI::fromJsonValue(m_parameters_to_remove, json[QString("ParametersToRemove")]);
    m_parameters_to_remove_isSet = !json[QString("ParametersToRemove")].isNull() && m_parameters_to_remove_isValid;

    m_input_artifacts_isValid = ::OpenAPI::fromJsonValue(m_input_artifacts, json[QString("InputArtifacts")]);
    m_input_artifacts_isSet = !json[QString("InputArtifacts")].isNull() && m_input_artifacts_isValid;

    m_input_artifacts_to_remove_isValid = ::OpenAPI::fromJsonValue(m_input_artifacts_to_remove, json[QString("InputArtifactsToRemove")]);
    m_input_artifacts_to_remove_isSet = !json[QString("InputArtifactsToRemove")].isNull() && m_input_artifacts_to_remove_isValid;

    m_output_artifacts_isValid = ::OpenAPI::fromJsonValue(m_output_artifacts, json[QString("OutputArtifacts")]);
    m_output_artifacts_isSet = !json[QString("OutputArtifacts")].isNull() && m_output_artifacts_isValid;

    m_output_artifacts_to_remove_isValid = ::OpenAPI::fromJsonValue(m_output_artifacts_to_remove, json[QString("OutputArtifactsToRemove")]);
    m_output_artifacts_to_remove_isSet = !json[QString("OutputArtifactsToRemove")].isNull() && m_output_artifacts_to_remove_isValid;
}

QString OAIUpdateTrialComponentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTrialComponentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_trial_component_name_isSet) {
        obj.insert(QString("TrialComponentName"), ::OpenAPI::toJsonValue(m_trial_component_name));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_parameters_to_remove.isSet()) {
        obj.insert(QString("ParametersToRemove"), ::OpenAPI::toJsonValue(m_parameters_to_remove));
    }
    if (m_input_artifacts.isSet()) {
        obj.insert(QString("InputArtifacts"), ::OpenAPI::toJsonValue(m_input_artifacts));
    }
    if (m_input_artifacts_to_remove.isSet()) {
        obj.insert(QString("InputArtifactsToRemove"), ::OpenAPI::toJsonValue(m_input_artifacts_to_remove));
    }
    if (m_output_artifacts.isSet()) {
        obj.insert(QString("OutputArtifacts"), ::OpenAPI::toJsonValue(m_output_artifacts));
    }
    if (m_output_artifacts_to_remove.isSet()) {
        obj.insert(QString("OutputArtifactsToRemove"), ::OpenAPI::toJsonValue(m_output_artifacts_to_remove));
    }
    return obj;
}

QString OAIUpdateTrialComponentRequest::getTrialComponentName() const {
    return m_trial_component_name;
}
void OAIUpdateTrialComponentRequest::setTrialComponentName(const QString &trial_component_name) {
    m_trial_component_name = trial_component_name;
    m_trial_component_name_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_trial_component_name_Set() const{
    return m_trial_component_name_isSet;
}

bool OAIUpdateTrialComponentRequest::is_trial_component_name_Valid() const{
    return m_trial_component_name_isValid;
}

QString OAIUpdateTrialComponentRequest::getDisplayName() const {
    return m_display_name;
}
void OAIUpdateTrialComponentRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUpdateTrialComponentRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIUpdateTrialComponentRequest_Status OAIUpdateTrialComponentRequest::getStatus() const {
    return m_status;
}
void OAIUpdateTrialComponentRequest::setStatus(const OAIUpdateTrialComponentRequest_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateTrialComponentRequest::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIUpdateTrialComponentRequest::getStartTime() const {
    return m_start_time;
}
void OAIUpdateTrialComponentRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIUpdateTrialComponentRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIUpdateTrialComponentRequest::getEndTime() const {
    return m_end_time;
}
void OAIUpdateTrialComponentRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIUpdateTrialComponentRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QMap OAIUpdateTrialComponentRequest::getParameters() const {
    return m_parameters;
}
void OAIUpdateTrialComponentRequest::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIUpdateTrialComponentRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList OAIUpdateTrialComponentRequest::getParametersToRemove() const {
    return m_parameters_to_remove;
}
void OAIUpdateTrialComponentRequest::setParametersToRemove(const QList &parameters_to_remove) {
    m_parameters_to_remove = parameters_to_remove;
    m_parameters_to_remove_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_parameters_to_remove_Set() const{
    return m_parameters_to_remove_isSet;
}

bool OAIUpdateTrialComponentRequest::is_parameters_to_remove_Valid() const{
    return m_parameters_to_remove_isValid;
}

QMap OAIUpdateTrialComponentRequest::getInputArtifacts() const {
    return m_input_artifacts;
}
void OAIUpdateTrialComponentRequest::setInputArtifacts(const QMap &input_artifacts) {
    m_input_artifacts = input_artifacts;
    m_input_artifacts_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_input_artifacts_Set() const{
    return m_input_artifacts_isSet;
}

bool OAIUpdateTrialComponentRequest::is_input_artifacts_Valid() const{
    return m_input_artifacts_isValid;
}

QList OAIUpdateTrialComponentRequest::getInputArtifactsToRemove() const {
    return m_input_artifacts_to_remove;
}
void OAIUpdateTrialComponentRequest::setInputArtifactsToRemove(const QList &input_artifacts_to_remove) {
    m_input_artifacts_to_remove = input_artifacts_to_remove;
    m_input_artifacts_to_remove_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_input_artifacts_to_remove_Set() const{
    return m_input_artifacts_to_remove_isSet;
}

bool OAIUpdateTrialComponentRequest::is_input_artifacts_to_remove_Valid() const{
    return m_input_artifacts_to_remove_isValid;
}

QMap OAIUpdateTrialComponentRequest::getOutputArtifacts() const {
    return m_output_artifacts;
}
void OAIUpdateTrialComponentRequest::setOutputArtifacts(const QMap &output_artifacts) {
    m_output_artifacts = output_artifacts;
    m_output_artifacts_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_output_artifacts_Set() const{
    return m_output_artifacts_isSet;
}

bool OAIUpdateTrialComponentRequest::is_output_artifacts_Valid() const{
    return m_output_artifacts_isValid;
}

QList OAIUpdateTrialComponentRequest::getOutputArtifactsToRemove() const {
    return m_output_artifacts_to_remove;
}
void OAIUpdateTrialComponentRequest::setOutputArtifactsToRemove(const QList &output_artifacts_to_remove) {
    m_output_artifacts_to_remove = output_artifacts_to_remove;
    m_output_artifacts_to_remove_isSet = true;
}

bool OAIUpdateTrialComponentRequest::is_output_artifacts_to_remove_Set() const{
    return m_output_artifacts_to_remove_isSet;
}

bool OAIUpdateTrialComponentRequest::is_output_artifacts_to_remove_Valid() const{
    return m_output_artifacts_to_remove_isValid;
}

bool OAIUpdateTrialComponentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trial_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_artifacts_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_artifacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_artifacts_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTrialComponentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_trial_component_name_isValid && true;
}

} // namespace OpenAPI
