/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClarifyInferenceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClarifyInferenceConfig::OAIClarifyInferenceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClarifyInferenceConfig::OAIClarifyInferenceConfig() {
    this->initializeModel();
}

OAIClarifyInferenceConfig::~OAIClarifyInferenceConfig() {}

void OAIClarifyInferenceConfig::initializeModel() {

    m_features_attribute_isSet = false;
    m_features_attribute_isValid = false;

    m_content_template_isSet = false;
    m_content_template_isValid = false;

    m_max_record_count_isSet = false;
    m_max_record_count_isValid = false;

    m_max_payload_in_mb_isSet = false;
    m_max_payload_in_mb_isValid = false;

    m_probability_index_isSet = false;
    m_probability_index_isValid = false;

    m_label_index_isSet = false;
    m_label_index_isValid = false;

    m_probability_attribute_isSet = false;
    m_probability_attribute_isValid = false;

    m_label_attribute_isSet = false;
    m_label_attribute_isValid = false;

    m_label_headers_isSet = false;
    m_label_headers_isValid = false;

    m_feature_headers_isSet = false;
    m_feature_headers_isValid = false;

    m_feature_types_isSet = false;
    m_feature_types_isValid = false;
}

void OAIClarifyInferenceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClarifyInferenceConfig::fromJsonObject(QJsonObject json) {

    m_features_attribute_isValid = ::OpenAPI::fromJsonValue(m_features_attribute, json[QString("FeaturesAttribute")]);
    m_features_attribute_isSet = !json[QString("FeaturesAttribute")].isNull() && m_features_attribute_isValid;

    m_content_template_isValid = ::OpenAPI::fromJsonValue(m_content_template, json[QString("ContentTemplate")]);
    m_content_template_isSet = !json[QString("ContentTemplate")].isNull() && m_content_template_isValid;

    m_max_record_count_isValid = ::OpenAPI::fromJsonValue(m_max_record_count, json[QString("MaxRecordCount")]);
    m_max_record_count_isSet = !json[QString("MaxRecordCount")].isNull() && m_max_record_count_isValid;

    m_max_payload_in_mb_isValid = ::OpenAPI::fromJsonValue(m_max_payload_in_mb, json[QString("MaxPayloadInMB")]);
    m_max_payload_in_mb_isSet = !json[QString("MaxPayloadInMB")].isNull() && m_max_payload_in_mb_isValid;

    m_probability_index_isValid = ::OpenAPI::fromJsonValue(m_probability_index, json[QString("ProbabilityIndex")]);
    m_probability_index_isSet = !json[QString("ProbabilityIndex")].isNull() && m_probability_index_isValid;

    m_label_index_isValid = ::OpenAPI::fromJsonValue(m_label_index, json[QString("LabelIndex")]);
    m_label_index_isSet = !json[QString("LabelIndex")].isNull() && m_label_index_isValid;

    m_probability_attribute_isValid = ::OpenAPI::fromJsonValue(m_probability_attribute, json[QString("ProbabilityAttribute")]);
    m_probability_attribute_isSet = !json[QString("ProbabilityAttribute")].isNull() && m_probability_attribute_isValid;

    m_label_attribute_isValid = ::OpenAPI::fromJsonValue(m_label_attribute, json[QString("LabelAttribute")]);
    m_label_attribute_isSet = !json[QString("LabelAttribute")].isNull() && m_label_attribute_isValid;

    m_label_headers_isValid = ::OpenAPI::fromJsonValue(m_label_headers, json[QString("LabelHeaders")]);
    m_label_headers_isSet = !json[QString("LabelHeaders")].isNull() && m_label_headers_isValid;

    m_feature_headers_isValid = ::OpenAPI::fromJsonValue(m_feature_headers, json[QString("FeatureHeaders")]);
    m_feature_headers_isSet = !json[QString("FeatureHeaders")].isNull() && m_feature_headers_isValid;

    m_feature_types_isValid = ::OpenAPI::fromJsonValue(m_feature_types, json[QString("FeatureTypes")]);
    m_feature_types_isSet = !json[QString("FeatureTypes")].isNull() && m_feature_types_isValid;
}

QString OAIClarifyInferenceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClarifyInferenceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_features_attribute_isSet) {
        obj.insert(QString("FeaturesAttribute"), ::OpenAPI::toJsonValue(m_features_attribute));
    }
    if (m_content_template_isSet) {
        obj.insert(QString("ContentTemplate"), ::OpenAPI::toJsonValue(m_content_template));
    }
    if (m_max_record_count_isSet) {
        obj.insert(QString("MaxRecordCount"), ::OpenAPI::toJsonValue(m_max_record_count));
    }
    if (m_max_payload_in_mb_isSet) {
        obj.insert(QString("MaxPayloadInMB"), ::OpenAPI::toJsonValue(m_max_payload_in_mb));
    }
    if (m_probability_index_isSet) {
        obj.insert(QString("ProbabilityIndex"), ::OpenAPI::toJsonValue(m_probability_index));
    }
    if (m_label_index_isSet) {
        obj.insert(QString("LabelIndex"), ::OpenAPI::toJsonValue(m_label_index));
    }
    if (m_probability_attribute_isSet) {
        obj.insert(QString("ProbabilityAttribute"), ::OpenAPI::toJsonValue(m_probability_attribute));
    }
    if (m_label_attribute_isSet) {
        obj.insert(QString("LabelAttribute"), ::OpenAPI::toJsonValue(m_label_attribute));
    }
    if (m_label_headers.isSet()) {
        obj.insert(QString("LabelHeaders"), ::OpenAPI::toJsonValue(m_label_headers));
    }
    if (m_feature_headers.isSet()) {
        obj.insert(QString("FeatureHeaders"), ::OpenAPI::toJsonValue(m_feature_headers));
    }
    if (m_feature_types.isSet()) {
        obj.insert(QString("FeatureTypes"), ::OpenAPI::toJsonValue(m_feature_types));
    }
    return obj;
}

QString OAIClarifyInferenceConfig::getFeaturesAttribute() const {
    return m_features_attribute;
}
void OAIClarifyInferenceConfig::setFeaturesAttribute(const QString &features_attribute) {
    m_features_attribute = features_attribute;
    m_features_attribute_isSet = true;
}

bool OAIClarifyInferenceConfig::is_features_attribute_Set() const{
    return m_features_attribute_isSet;
}

bool OAIClarifyInferenceConfig::is_features_attribute_Valid() const{
    return m_features_attribute_isValid;
}

QString OAIClarifyInferenceConfig::getContentTemplate() const {
    return m_content_template;
}
void OAIClarifyInferenceConfig::setContentTemplate(const QString &content_template) {
    m_content_template = content_template;
    m_content_template_isSet = true;
}

bool OAIClarifyInferenceConfig::is_content_template_Set() const{
    return m_content_template_isSet;
}

bool OAIClarifyInferenceConfig::is_content_template_Valid() const{
    return m_content_template_isValid;
}

qint32 OAIClarifyInferenceConfig::getMaxRecordCount() const {
    return m_max_record_count;
}
void OAIClarifyInferenceConfig::setMaxRecordCount(const qint32 &max_record_count) {
    m_max_record_count = max_record_count;
    m_max_record_count_isSet = true;
}

bool OAIClarifyInferenceConfig::is_max_record_count_Set() const{
    return m_max_record_count_isSet;
}

bool OAIClarifyInferenceConfig::is_max_record_count_Valid() const{
    return m_max_record_count_isValid;
}

qint32 OAIClarifyInferenceConfig::getMaxPayloadInMb() const {
    return m_max_payload_in_mb;
}
void OAIClarifyInferenceConfig::setMaxPayloadInMb(const qint32 &max_payload_in_mb) {
    m_max_payload_in_mb = max_payload_in_mb;
    m_max_payload_in_mb_isSet = true;
}

bool OAIClarifyInferenceConfig::is_max_payload_in_mb_Set() const{
    return m_max_payload_in_mb_isSet;
}

bool OAIClarifyInferenceConfig::is_max_payload_in_mb_Valid() const{
    return m_max_payload_in_mb_isValid;
}

qint32 OAIClarifyInferenceConfig::getProbabilityIndex() const {
    return m_probability_index;
}
void OAIClarifyInferenceConfig::setProbabilityIndex(const qint32 &probability_index) {
    m_probability_index = probability_index;
    m_probability_index_isSet = true;
}

bool OAIClarifyInferenceConfig::is_probability_index_Set() const{
    return m_probability_index_isSet;
}

bool OAIClarifyInferenceConfig::is_probability_index_Valid() const{
    return m_probability_index_isValid;
}

qint32 OAIClarifyInferenceConfig::getLabelIndex() const {
    return m_label_index;
}
void OAIClarifyInferenceConfig::setLabelIndex(const qint32 &label_index) {
    m_label_index = label_index;
    m_label_index_isSet = true;
}

bool OAIClarifyInferenceConfig::is_label_index_Set() const{
    return m_label_index_isSet;
}

bool OAIClarifyInferenceConfig::is_label_index_Valid() const{
    return m_label_index_isValid;
}

QString OAIClarifyInferenceConfig::getProbabilityAttribute() const {
    return m_probability_attribute;
}
void OAIClarifyInferenceConfig::setProbabilityAttribute(const QString &probability_attribute) {
    m_probability_attribute = probability_attribute;
    m_probability_attribute_isSet = true;
}

bool OAIClarifyInferenceConfig::is_probability_attribute_Set() const{
    return m_probability_attribute_isSet;
}

bool OAIClarifyInferenceConfig::is_probability_attribute_Valid() const{
    return m_probability_attribute_isValid;
}

QString OAIClarifyInferenceConfig::getLabelAttribute() const {
    return m_label_attribute;
}
void OAIClarifyInferenceConfig::setLabelAttribute(const QString &label_attribute) {
    m_label_attribute = label_attribute;
    m_label_attribute_isSet = true;
}

bool OAIClarifyInferenceConfig::is_label_attribute_Set() const{
    return m_label_attribute_isSet;
}

bool OAIClarifyInferenceConfig::is_label_attribute_Valid() const{
    return m_label_attribute_isValid;
}

QList OAIClarifyInferenceConfig::getLabelHeaders() const {
    return m_label_headers;
}
void OAIClarifyInferenceConfig::setLabelHeaders(const QList &label_headers) {
    m_label_headers = label_headers;
    m_label_headers_isSet = true;
}

bool OAIClarifyInferenceConfig::is_label_headers_Set() const{
    return m_label_headers_isSet;
}

bool OAIClarifyInferenceConfig::is_label_headers_Valid() const{
    return m_label_headers_isValid;
}

QList OAIClarifyInferenceConfig::getFeatureHeaders() const {
    return m_feature_headers;
}
void OAIClarifyInferenceConfig::setFeatureHeaders(const QList &feature_headers) {
    m_feature_headers = feature_headers;
    m_feature_headers_isSet = true;
}

bool OAIClarifyInferenceConfig::is_feature_headers_Set() const{
    return m_feature_headers_isSet;
}

bool OAIClarifyInferenceConfig::is_feature_headers_Valid() const{
    return m_feature_headers_isValid;
}

QList OAIClarifyInferenceConfig::getFeatureTypes() const {
    return m_feature_types;
}
void OAIClarifyInferenceConfig::setFeatureTypes(const QList &feature_types) {
    m_feature_types = feature_types;
    m_feature_types_isSet = true;
}

bool OAIClarifyInferenceConfig::is_feature_types_Set() const{
    return m_feature_types_isSet;
}

bool OAIClarifyInferenceConfig::is_feature_types_Valid() const{
    return m_feature_types_isValid;
}

bool OAIClarifyInferenceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_features_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_payload_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClarifyInferenceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
