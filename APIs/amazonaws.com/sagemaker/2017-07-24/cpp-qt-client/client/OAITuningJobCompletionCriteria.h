/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITuningJobCompletionCriteria.h
 *
 * The job completion criteria.
 */

#ifndef OAITuningJobCompletionCriteria_H
#define OAITuningJobCompletionCriteria_H

#include <QJsonObject>

#include "OAITuningJobCompletionCriteria_BestObjectiveNotImproving.h"
#include "OAITuningJobCompletionCriteria_ConvergenceDetected.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITuningJobCompletionCriteria_BestObjectiveNotImproving;
class OAITuningJobCompletionCriteria_ConvergenceDetected;

class OAITuningJobCompletionCriteria : public OAIObject {
public:
    OAITuningJobCompletionCriteria();
    OAITuningJobCompletionCriteria(QString json);
    ~OAITuningJobCompletionCriteria() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getTargetObjectiveMetricValue() const;
    void setTargetObjectiveMetricValue(const float &target_objective_metric_value);
    bool is_target_objective_metric_value_Set() const;
    bool is_target_objective_metric_value_Valid() const;

    OAITuningJobCompletionCriteria_BestObjectiveNotImproving getBestObjectiveNotImproving() const;
    void setBestObjectiveNotImproving(const OAITuningJobCompletionCriteria_BestObjectiveNotImproving &best_objective_not_improving);
    bool is_best_objective_not_improving_Set() const;
    bool is_best_objective_not_improving_Valid() const;

    OAITuningJobCompletionCriteria_ConvergenceDetected getConvergenceDetected() const;
    void setConvergenceDetected(const OAITuningJobCompletionCriteria_ConvergenceDetected &convergence_detected);
    bool is_convergence_detected_Set() const;
    bool is_convergence_detected_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_target_objective_metric_value;
    bool m_target_objective_metric_value_isSet;
    bool m_target_objective_metric_value_isValid;

    OAITuningJobCompletionCriteria_BestObjectiveNotImproving m_best_objective_not_improving;
    bool m_best_objective_not_improving_isSet;
    bool m_best_objective_not_improving_isValid;

    OAITuningJobCompletionCriteria_ConvergenceDetected m_convergence_detected;
    bool m_convergence_detected_isSet;
    bool m_convergence_detected_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITuningJobCompletionCriteria)

#endif // OAITuningJobCompletionCriteria_H
