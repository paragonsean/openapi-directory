/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeWorkteamResponse_Workteam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeWorkteamResponse_Workteam::OAIDescribeWorkteamResponse_Workteam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeWorkteamResponse_Workteam::OAIDescribeWorkteamResponse_Workteam() {
    this->initializeModel();
}

OAIDescribeWorkteamResponse_Workteam::~OAIDescribeWorkteamResponse_Workteam() {}

void OAIDescribeWorkteamResponse_Workteam::initializeModel() {

    m_workteam_name_isSet = false;
    m_workteam_name_isValid = false;

    m_member_definitions_isSet = false;
    m_member_definitions_isValid = false;

    m_workteam_arn_isSet = false;
    m_workteam_arn_isValid = false;

    m_workforce_arn_isSet = false;
    m_workforce_arn_isValid = false;

    m_product_listing_ids_isSet = false;
    m_product_listing_ids_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_sub_domain_isSet = false;
    m_sub_domain_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_notification_configuration_isSet = false;
    m_notification_configuration_isValid = false;
}

void OAIDescribeWorkteamResponse_Workteam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeWorkteamResponse_Workteam::fromJsonObject(QJsonObject json) {

    m_workteam_name_isValid = ::OpenAPI::fromJsonValue(m_workteam_name, json[QString("WorkteamName")]);
    m_workteam_name_isSet = !json[QString("WorkteamName")].isNull() && m_workteam_name_isValid;

    m_member_definitions_isValid = ::OpenAPI::fromJsonValue(m_member_definitions, json[QString("MemberDefinitions")]);
    m_member_definitions_isSet = !json[QString("MemberDefinitions")].isNull() && m_member_definitions_isValid;

    m_workteam_arn_isValid = ::OpenAPI::fromJsonValue(m_workteam_arn, json[QString("WorkteamArn")]);
    m_workteam_arn_isSet = !json[QString("WorkteamArn")].isNull() && m_workteam_arn_isValid;

    m_workforce_arn_isValid = ::OpenAPI::fromJsonValue(m_workforce_arn, json[QString("WorkforceArn")]);
    m_workforce_arn_isSet = !json[QString("WorkforceArn")].isNull() && m_workforce_arn_isValid;

    m_product_listing_ids_isValid = ::OpenAPI::fromJsonValue(m_product_listing_ids, json[QString("ProductListingIds")]);
    m_product_listing_ids_isSet = !json[QString("ProductListingIds")].isNull() && m_product_listing_ids_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_sub_domain_isValid = ::OpenAPI::fromJsonValue(m_sub_domain, json[QString("SubDomain")]);
    m_sub_domain_isSet = !json[QString("SubDomain")].isNull() && m_sub_domain_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("CreateDate")]);
    m_create_date_isSet = !json[QString("CreateDate")].isNull() && m_create_date_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("LastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("LastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_notification_configuration_isValid = ::OpenAPI::fromJsonValue(m_notification_configuration, json[QString("NotificationConfiguration")]);
    m_notification_configuration_isSet = !json[QString("NotificationConfiguration")].isNull() && m_notification_configuration_isValid;
}

QString OAIDescribeWorkteamResponse_Workteam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeWorkteamResponse_Workteam::asJsonObject() const {
    QJsonObject obj;
    if (m_workteam_name_isSet) {
        obj.insert(QString("WorkteamName"), ::OpenAPI::toJsonValue(m_workteam_name));
    }
    if (m_member_definitions.isSet()) {
        obj.insert(QString("MemberDefinitions"), ::OpenAPI::toJsonValue(m_member_definitions));
    }
    if (m_workteam_arn_isSet) {
        obj.insert(QString("WorkteamArn"), ::OpenAPI::toJsonValue(m_workteam_arn));
    }
    if (m_workforce_arn_isSet) {
        obj.insert(QString("WorkforceArn"), ::OpenAPI::toJsonValue(m_workforce_arn));
    }
    if (m_product_listing_ids.isSet()) {
        obj.insert(QString("ProductListingIds"), ::OpenAPI::toJsonValue(m_product_listing_ids));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_sub_domain_isSet) {
        obj.insert(QString("SubDomain"), ::OpenAPI::toJsonValue(m_sub_domain));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("CreateDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("LastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_notification_configuration.isSet()) {
        obj.insert(QString("NotificationConfiguration"), ::OpenAPI::toJsonValue(m_notification_configuration));
    }
    return obj;
}

QString OAIDescribeWorkteamResponse_Workteam::getWorkteamName() const {
    return m_workteam_name;
}
void OAIDescribeWorkteamResponse_Workteam::setWorkteamName(const QString &workteam_name) {
    m_workteam_name = workteam_name;
    m_workteam_name_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_workteam_name_Set() const{
    return m_workteam_name_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_workteam_name_Valid() const{
    return m_workteam_name_isValid;
}

QList OAIDescribeWorkteamResponse_Workteam::getMemberDefinitions() const {
    return m_member_definitions;
}
void OAIDescribeWorkteamResponse_Workteam::setMemberDefinitions(const QList &member_definitions) {
    m_member_definitions = member_definitions;
    m_member_definitions_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_member_definitions_Set() const{
    return m_member_definitions_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_member_definitions_Valid() const{
    return m_member_definitions_isValid;
}

QString OAIDescribeWorkteamResponse_Workteam::getWorkteamArn() const {
    return m_workteam_arn;
}
void OAIDescribeWorkteamResponse_Workteam::setWorkteamArn(const QString &workteam_arn) {
    m_workteam_arn = workteam_arn;
    m_workteam_arn_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_workteam_arn_Set() const{
    return m_workteam_arn_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_workteam_arn_Valid() const{
    return m_workteam_arn_isValid;
}

QString OAIDescribeWorkteamResponse_Workteam::getWorkforceArn() const {
    return m_workforce_arn;
}
void OAIDescribeWorkteamResponse_Workteam::setWorkforceArn(const QString &workforce_arn) {
    m_workforce_arn = workforce_arn;
    m_workforce_arn_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_workforce_arn_Set() const{
    return m_workforce_arn_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_workforce_arn_Valid() const{
    return m_workforce_arn_isValid;
}

QList OAIDescribeWorkteamResponse_Workteam::getProductListingIds() const {
    return m_product_listing_ids;
}
void OAIDescribeWorkteamResponse_Workteam::setProductListingIds(const QList &product_listing_ids) {
    m_product_listing_ids = product_listing_ids;
    m_product_listing_ids_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_product_listing_ids_Set() const{
    return m_product_listing_ids_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_product_listing_ids_Valid() const{
    return m_product_listing_ids_isValid;
}

QString OAIDescribeWorkteamResponse_Workteam::getDescription() const {
    return m_description;
}
void OAIDescribeWorkteamResponse_Workteam::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeWorkteamResponse_Workteam::getSubDomain() const {
    return m_sub_domain;
}
void OAIDescribeWorkteamResponse_Workteam::setSubDomain(const QString &sub_domain) {
    m_sub_domain = sub_domain;
    m_sub_domain_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_sub_domain_Set() const{
    return m_sub_domain_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_sub_domain_Valid() const{
    return m_sub_domain_isValid;
}

QDateTime OAIDescribeWorkteamResponse_Workteam::getCreateDate() const {
    return m_create_date;
}
void OAIDescribeWorkteamResponse_Workteam::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QDateTime OAIDescribeWorkteamResponse_Workteam::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAIDescribeWorkteamResponse_Workteam::setLastUpdatedDate(const QDateTime &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

OAIWorkteam_NotificationConfiguration OAIDescribeWorkteamResponse_Workteam::getNotificationConfiguration() const {
    return m_notification_configuration;
}
void OAIDescribeWorkteamResponse_Workteam::setNotificationConfiguration(const OAIWorkteam_NotificationConfiguration &notification_configuration) {
    m_notification_configuration = notification_configuration;
    m_notification_configuration_isSet = true;
}

bool OAIDescribeWorkteamResponse_Workteam::is_notification_configuration_Set() const{
    return m_notification_configuration_isSet;
}

bool OAIDescribeWorkteamResponse_Workteam::is_notification_configuration_Valid() const{
    return m_notification_configuration_isValid;
}

bool OAIDescribeWorkteamResponse_Workteam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workteam_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workteam_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workforce_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_listing_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeWorkteamResponse_Workteam::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workteam_name_isValid && m_member_definitions_isValid && m_workteam_arn_isValid && m_description_isValid && true;
}

} // namespace OpenAPI
