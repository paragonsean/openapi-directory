/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetScalingConfigurationRecommendationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetScalingConfigurationRecommendationResponse::OAIGetScalingConfigurationRecommendationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetScalingConfigurationRecommendationResponse::OAIGetScalingConfigurationRecommendationResponse() {
    this->initializeModel();
}

OAIGetScalingConfigurationRecommendationResponse::~OAIGetScalingConfigurationRecommendationResponse() {}

void OAIGetScalingConfigurationRecommendationResponse::initializeModel() {

    m_inference_recommendations_job_name_isSet = false;
    m_inference_recommendations_job_name_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_target_cpu_utilization_per_core_isSet = false;
    m_target_cpu_utilization_per_core_isValid = false;

    m_scaling_policy_objective_isSet = false;
    m_scaling_policy_objective_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_dynamic_scaling_configuration_isSet = false;
    m_dynamic_scaling_configuration_isValid = false;
}

void OAIGetScalingConfigurationRecommendationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetScalingConfigurationRecommendationResponse::fromJsonObject(QJsonObject json) {

    m_inference_recommendations_job_name_isValid = ::OpenAPI::fromJsonValue(m_inference_recommendations_job_name, json[QString("InferenceRecommendationsJobName")]);
    m_inference_recommendations_job_name_isSet = !json[QString("InferenceRecommendationsJobName")].isNull() && m_inference_recommendations_job_name_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("RecommendationId")]);
    m_recommendation_id_isSet = !json[QString("RecommendationId")].isNull() && m_recommendation_id_isValid;

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("EndpointName")]);
    m_endpoint_name_isSet = !json[QString("EndpointName")].isNull() && m_endpoint_name_isValid;

    m_target_cpu_utilization_per_core_isValid = ::OpenAPI::fromJsonValue(m_target_cpu_utilization_per_core, json[QString("TargetCpuUtilizationPerCore")]);
    m_target_cpu_utilization_per_core_isSet = !json[QString("TargetCpuUtilizationPerCore")].isNull() && m_target_cpu_utilization_per_core_isValid;

    m_scaling_policy_objective_isValid = ::OpenAPI::fromJsonValue(m_scaling_policy_objective, json[QString("ScalingPolicyObjective")]);
    m_scaling_policy_objective_isSet = !json[QString("ScalingPolicyObjective")].isNull() && m_scaling_policy_objective_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("Metric")]);
    m_metric_isSet = !json[QString("Metric")].isNull() && m_metric_isValid;

    m_dynamic_scaling_configuration_isValid = ::OpenAPI::fromJsonValue(m_dynamic_scaling_configuration, json[QString("DynamicScalingConfiguration")]);
    m_dynamic_scaling_configuration_isSet = !json[QString("DynamicScalingConfiguration")].isNull() && m_dynamic_scaling_configuration_isValid;
}

QString OAIGetScalingConfigurationRecommendationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetScalingConfigurationRecommendationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_inference_recommendations_job_name_isSet) {
        obj.insert(QString("InferenceRecommendationsJobName"), ::OpenAPI::toJsonValue(m_inference_recommendations_job_name));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("RecommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_endpoint_name_isSet) {
        obj.insert(QString("EndpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_target_cpu_utilization_per_core_isSet) {
        obj.insert(QString("TargetCpuUtilizationPerCore"), ::OpenAPI::toJsonValue(m_target_cpu_utilization_per_core));
    }
    if (m_scaling_policy_objective.isSet()) {
        obj.insert(QString("ScalingPolicyObjective"), ::OpenAPI::toJsonValue(m_scaling_policy_objective));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("Metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_dynamic_scaling_configuration.isSet()) {
        obj.insert(QString("DynamicScalingConfiguration"), ::OpenAPI::toJsonValue(m_dynamic_scaling_configuration));
    }
    return obj;
}

QString OAIGetScalingConfigurationRecommendationResponse::getInferenceRecommendationsJobName() const {
    return m_inference_recommendations_job_name;
}
void OAIGetScalingConfigurationRecommendationResponse::setInferenceRecommendationsJobName(const QString &inference_recommendations_job_name) {
    m_inference_recommendations_job_name = inference_recommendations_job_name;
    m_inference_recommendations_job_name_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_inference_recommendations_job_name_Set() const{
    return m_inference_recommendations_job_name_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_inference_recommendations_job_name_Valid() const{
    return m_inference_recommendations_job_name_isValid;
}

QString OAIGetScalingConfigurationRecommendationResponse::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIGetScalingConfigurationRecommendationResponse::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QString OAIGetScalingConfigurationRecommendationResponse::getEndpointName() const {
    return m_endpoint_name;
}
void OAIGetScalingConfigurationRecommendationResponse::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

qint32 OAIGetScalingConfigurationRecommendationResponse::getTargetCpuUtilizationPerCore() const {
    return m_target_cpu_utilization_per_core;
}
void OAIGetScalingConfigurationRecommendationResponse::setTargetCpuUtilizationPerCore(const qint32 &target_cpu_utilization_per_core) {
    m_target_cpu_utilization_per_core = target_cpu_utilization_per_core;
    m_target_cpu_utilization_per_core_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_target_cpu_utilization_per_core_Set() const{
    return m_target_cpu_utilization_per_core_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_target_cpu_utilization_per_core_Valid() const{
    return m_target_cpu_utilization_per_core_isValid;
}

OAIGetScalingConfigurationRecommendationResponse_ScalingPolicyObjective OAIGetScalingConfigurationRecommendationResponse::getScalingPolicyObjective() const {
    return m_scaling_policy_objective;
}
void OAIGetScalingConfigurationRecommendationResponse::setScalingPolicyObjective(const OAIGetScalingConfigurationRecommendationResponse_ScalingPolicyObjective &scaling_policy_objective) {
    m_scaling_policy_objective = scaling_policy_objective;
    m_scaling_policy_objective_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_scaling_policy_objective_Set() const{
    return m_scaling_policy_objective_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_scaling_policy_objective_Valid() const{
    return m_scaling_policy_objective_isValid;
}

OAIGetScalingConfigurationRecommendationResponse_Metric OAIGetScalingConfigurationRecommendationResponse::getMetric() const {
    return m_metric;
}
void OAIGetScalingConfigurationRecommendationResponse::setMetric(const OAIGetScalingConfigurationRecommendationResponse_Metric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_metric_Valid() const{
    return m_metric_isValid;
}

OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration OAIGetScalingConfigurationRecommendationResponse::getDynamicScalingConfiguration() const {
    return m_dynamic_scaling_configuration;
}
void OAIGetScalingConfigurationRecommendationResponse::setDynamicScalingConfiguration(const OAIGetScalingConfigurationRecommendationResponse_DynamicScalingConfiguration &dynamic_scaling_configuration) {
    m_dynamic_scaling_configuration = dynamic_scaling_configuration;
    m_dynamic_scaling_configuration_isSet = true;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_dynamic_scaling_configuration_Set() const{
    return m_dynamic_scaling_configuration_isSet;
}

bool OAIGetScalingConfigurationRecommendationResponse::is_dynamic_scaling_configuration_Valid() const{
    return m_dynamic_scaling_configuration_isValid;
}

bool OAIGetScalingConfigurationRecommendationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inference_recommendations_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_cpu_utilization_per_core_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_policy_objective.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_scaling_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetScalingConfigurationRecommendationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
