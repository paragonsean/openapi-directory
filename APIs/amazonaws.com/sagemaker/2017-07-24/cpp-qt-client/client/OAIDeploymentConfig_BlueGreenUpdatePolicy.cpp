/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentConfig_BlueGreenUpdatePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentConfig_BlueGreenUpdatePolicy::OAIDeploymentConfig_BlueGreenUpdatePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentConfig_BlueGreenUpdatePolicy::OAIDeploymentConfig_BlueGreenUpdatePolicy() {
    this->initializeModel();
}

OAIDeploymentConfig_BlueGreenUpdatePolicy::~OAIDeploymentConfig_BlueGreenUpdatePolicy() {}

void OAIDeploymentConfig_BlueGreenUpdatePolicy::initializeModel() {

    m_traffic_routing_configuration_isSet = false;
    m_traffic_routing_configuration_isValid = false;

    m_termination_wait_in_seconds_isSet = false;
    m_termination_wait_in_seconds_isValid = false;

    m_maximum_execution_timeout_in_seconds_isSet = false;
    m_maximum_execution_timeout_in_seconds_isValid = false;
}

void OAIDeploymentConfig_BlueGreenUpdatePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentConfig_BlueGreenUpdatePolicy::fromJsonObject(QJsonObject json) {

    m_traffic_routing_configuration_isValid = ::OpenAPI::fromJsonValue(m_traffic_routing_configuration, json[QString("TrafficRoutingConfiguration")]);
    m_traffic_routing_configuration_isSet = !json[QString("TrafficRoutingConfiguration")].isNull() && m_traffic_routing_configuration_isValid;

    m_termination_wait_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_termination_wait_in_seconds, json[QString("TerminationWaitInSeconds")]);
    m_termination_wait_in_seconds_isSet = !json[QString("TerminationWaitInSeconds")].isNull() && m_termination_wait_in_seconds_isValid;

    m_maximum_execution_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_maximum_execution_timeout_in_seconds, json[QString("MaximumExecutionTimeoutInSeconds")]);
    m_maximum_execution_timeout_in_seconds_isSet = !json[QString("MaximumExecutionTimeoutInSeconds")].isNull() && m_maximum_execution_timeout_in_seconds_isValid;
}

QString OAIDeploymentConfig_BlueGreenUpdatePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentConfig_BlueGreenUpdatePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_traffic_routing_configuration.isSet()) {
        obj.insert(QString("TrafficRoutingConfiguration"), ::OpenAPI::toJsonValue(m_traffic_routing_configuration));
    }
    if (m_termination_wait_in_seconds_isSet) {
        obj.insert(QString("TerminationWaitInSeconds"), ::OpenAPI::toJsonValue(m_termination_wait_in_seconds));
    }
    if (m_maximum_execution_timeout_in_seconds_isSet) {
        obj.insert(QString("MaximumExecutionTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_maximum_execution_timeout_in_seconds));
    }
    return obj;
}

OAIBlueGreenUpdatePolicy_TrafficRoutingConfiguration OAIDeploymentConfig_BlueGreenUpdatePolicy::getTrafficRoutingConfiguration() const {
    return m_traffic_routing_configuration;
}
void OAIDeploymentConfig_BlueGreenUpdatePolicy::setTrafficRoutingConfiguration(const OAIBlueGreenUpdatePolicy_TrafficRoutingConfiguration &traffic_routing_configuration) {
    m_traffic_routing_configuration = traffic_routing_configuration;
    m_traffic_routing_configuration_isSet = true;
}

bool OAIDeploymentConfig_BlueGreenUpdatePolicy::is_traffic_routing_configuration_Set() const{
    return m_traffic_routing_configuration_isSet;
}

bool OAIDeploymentConfig_BlueGreenUpdatePolicy::is_traffic_routing_configuration_Valid() const{
    return m_traffic_routing_configuration_isValid;
}

qint32 OAIDeploymentConfig_BlueGreenUpdatePolicy::getTerminationWaitInSeconds() const {
    return m_termination_wait_in_seconds;
}
void OAIDeploymentConfig_BlueGreenUpdatePolicy::setTerminationWaitInSeconds(const qint32 &termination_wait_in_seconds) {
    m_termination_wait_in_seconds = termination_wait_in_seconds;
    m_termination_wait_in_seconds_isSet = true;
}

bool OAIDeploymentConfig_BlueGreenUpdatePolicy::is_termination_wait_in_seconds_Set() const{
    return m_termination_wait_in_seconds_isSet;
}

bool OAIDeploymentConfig_BlueGreenUpdatePolicy::is_termination_wait_in_seconds_Valid() const{
    return m_termination_wait_in_seconds_isValid;
}

qint32 OAIDeploymentConfig_BlueGreenUpdatePolicy::getMaximumExecutionTimeoutInSeconds() const {
    return m_maximum_execution_timeout_in_seconds;
}
void OAIDeploymentConfig_BlueGreenUpdatePolicy::setMaximumExecutionTimeoutInSeconds(const qint32 &maximum_execution_timeout_in_seconds) {
    m_maximum_execution_timeout_in_seconds = maximum_execution_timeout_in_seconds;
    m_maximum_execution_timeout_in_seconds_isSet = true;
}

bool OAIDeploymentConfig_BlueGreenUpdatePolicy::is_maximum_execution_timeout_in_seconds_Set() const{
    return m_maximum_execution_timeout_in_seconds_isSet;
}

bool OAIDeploymentConfig_BlueGreenUpdatePolicy::is_maximum_execution_timeout_in_seconds_Valid() const{
    return m_maximum_execution_timeout_in_seconds_isValid;
}

bool OAIDeploymentConfig_BlueGreenUpdatePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_traffic_routing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_wait_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_execution_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentConfig_BlueGreenUpdatePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_traffic_routing_configuration_isValid && true;
}

} // namespace OpenAPI
