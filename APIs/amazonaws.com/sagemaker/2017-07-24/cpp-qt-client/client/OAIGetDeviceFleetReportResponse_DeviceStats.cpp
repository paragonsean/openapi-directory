/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceFleetReportResponse_DeviceStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceFleetReportResponse_DeviceStats::OAIGetDeviceFleetReportResponse_DeviceStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceFleetReportResponse_DeviceStats::OAIGetDeviceFleetReportResponse_DeviceStats() {
    this->initializeModel();
}

OAIGetDeviceFleetReportResponse_DeviceStats::~OAIGetDeviceFleetReportResponse_DeviceStats() {}

void OAIGetDeviceFleetReportResponse_DeviceStats::initializeModel() {

    m_connected_device_count_isSet = false;
    m_connected_device_count_isValid = false;

    m_registered_device_count_isSet = false;
    m_registered_device_count_isValid = false;
}

void OAIGetDeviceFleetReportResponse_DeviceStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceFleetReportResponse_DeviceStats::fromJsonObject(QJsonObject json) {

    m_connected_device_count_isValid = ::OpenAPI::fromJsonValue(m_connected_device_count, json[QString("ConnectedDeviceCount")]);
    m_connected_device_count_isSet = !json[QString("ConnectedDeviceCount")].isNull() && m_connected_device_count_isValid;

    m_registered_device_count_isValid = ::OpenAPI::fromJsonValue(m_registered_device_count, json[QString("RegisteredDeviceCount")]);
    m_registered_device_count_isSet = !json[QString("RegisteredDeviceCount")].isNull() && m_registered_device_count_isValid;
}

QString OAIGetDeviceFleetReportResponse_DeviceStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceFleetReportResponse_DeviceStats::asJsonObject() const {
    QJsonObject obj;
    if (m_connected_device_count_isSet) {
        obj.insert(QString("ConnectedDeviceCount"), ::OpenAPI::toJsonValue(m_connected_device_count));
    }
    if (m_registered_device_count_isSet) {
        obj.insert(QString("RegisteredDeviceCount"), ::OpenAPI::toJsonValue(m_registered_device_count));
    }
    return obj;
}

qint32 OAIGetDeviceFleetReportResponse_DeviceStats::getConnectedDeviceCount() const {
    return m_connected_device_count;
}
void OAIGetDeviceFleetReportResponse_DeviceStats::setConnectedDeviceCount(const qint32 &connected_device_count) {
    m_connected_device_count = connected_device_count;
    m_connected_device_count_isSet = true;
}

bool OAIGetDeviceFleetReportResponse_DeviceStats::is_connected_device_count_Set() const{
    return m_connected_device_count_isSet;
}

bool OAIGetDeviceFleetReportResponse_DeviceStats::is_connected_device_count_Valid() const{
    return m_connected_device_count_isValid;
}

qint32 OAIGetDeviceFleetReportResponse_DeviceStats::getRegisteredDeviceCount() const {
    return m_registered_device_count;
}
void OAIGetDeviceFleetReportResponse_DeviceStats::setRegisteredDeviceCount(const qint32 &registered_device_count) {
    m_registered_device_count = registered_device_count;
    m_registered_device_count_isSet = true;
}

bool OAIGetDeviceFleetReportResponse_DeviceStats::is_registered_device_count_Set() const{
    return m_registered_device_count_isSet;
}

bool OAIGetDeviceFleetReportResponse_DeviceStats::is_registered_device_count_Valid() const{
    return m_registered_device_count_isValid;
}

bool OAIGetDeviceFleetReportResponse_DeviceStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connected_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceFleetReportResponse_DeviceStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connected_device_count_isValid && m_registered_device_count_isValid && true;
}

} // namespace OpenAPI
