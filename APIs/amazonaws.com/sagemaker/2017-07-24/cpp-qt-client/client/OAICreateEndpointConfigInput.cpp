/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEndpointConfigInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEndpointConfigInput::OAICreateEndpointConfigInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEndpointConfigInput::OAICreateEndpointConfigInput() {
    this->initializeModel();
}

OAICreateEndpointConfigInput::~OAICreateEndpointConfigInput() {}

void OAICreateEndpointConfigInput::initializeModel() {

    m_endpoint_config_name_isSet = false;
    m_endpoint_config_name_isValid = false;

    m_production_variants_isSet = false;
    m_production_variants_isValid = false;

    m_data_capture_config_isSet = false;
    m_data_capture_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_async_inference_config_isSet = false;
    m_async_inference_config_isValid = false;

    m_explainer_config_isSet = false;
    m_explainer_config_isValid = false;

    m_shadow_production_variants_isSet = false;
    m_shadow_production_variants_isValid = false;
}

void OAICreateEndpointConfigInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEndpointConfigInput::fromJsonObject(QJsonObject json) {

    m_endpoint_config_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_config_name, json[QString("EndpointConfigName")]);
    m_endpoint_config_name_isSet = !json[QString("EndpointConfigName")].isNull() && m_endpoint_config_name_isValid;

    m_production_variants_isValid = ::OpenAPI::fromJsonValue(m_production_variants, json[QString("ProductionVariants")]);
    m_production_variants_isSet = !json[QString("ProductionVariants")].isNull() && m_production_variants_isValid;

    m_data_capture_config_isValid = ::OpenAPI::fromJsonValue(m_data_capture_config, json[QString("DataCaptureConfig")]);
    m_data_capture_config_isSet = !json[QString("DataCaptureConfig")].isNull() && m_data_capture_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_async_inference_config_isValid = ::OpenAPI::fromJsonValue(m_async_inference_config, json[QString("AsyncInferenceConfig")]);
    m_async_inference_config_isSet = !json[QString("AsyncInferenceConfig")].isNull() && m_async_inference_config_isValid;

    m_explainer_config_isValid = ::OpenAPI::fromJsonValue(m_explainer_config, json[QString("ExplainerConfig")]);
    m_explainer_config_isSet = !json[QString("ExplainerConfig")].isNull() && m_explainer_config_isValid;

    m_shadow_production_variants_isValid = ::OpenAPI::fromJsonValue(m_shadow_production_variants, json[QString("ShadowProductionVariants")]);
    m_shadow_production_variants_isSet = !json[QString("ShadowProductionVariants")].isNull() && m_shadow_production_variants_isValid;
}

QString OAICreateEndpointConfigInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEndpointConfigInput::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_config_name_isSet) {
        obj.insert(QString("EndpointConfigName"), ::OpenAPI::toJsonValue(m_endpoint_config_name));
    }
    if (m_production_variants.isSet()) {
        obj.insert(QString("ProductionVariants"), ::OpenAPI::toJsonValue(m_production_variants));
    }
    if (m_data_capture_config.isSet()) {
        obj.insert(QString("DataCaptureConfig"), ::OpenAPI::toJsonValue(m_data_capture_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_async_inference_config.isSet()) {
        obj.insert(QString("AsyncInferenceConfig"), ::OpenAPI::toJsonValue(m_async_inference_config));
    }
    if (m_explainer_config.isSet()) {
        obj.insert(QString("ExplainerConfig"), ::OpenAPI::toJsonValue(m_explainer_config));
    }
    if (m_shadow_production_variants.isSet()) {
        obj.insert(QString("ShadowProductionVariants"), ::OpenAPI::toJsonValue(m_shadow_production_variants));
    }
    return obj;
}

QString OAICreateEndpointConfigInput::getEndpointConfigName() const {
    return m_endpoint_config_name;
}
void OAICreateEndpointConfigInput::setEndpointConfigName(const QString &endpoint_config_name) {
    m_endpoint_config_name = endpoint_config_name;
    m_endpoint_config_name_isSet = true;
}

bool OAICreateEndpointConfigInput::is_endpoint_config_name_Set() const{
    return m_endpoint_config_name_isSet;
}

bool OAICreateEndpointConfigInput::is_endpoint_config_name_Valid() const{
    return m_endpoint_config_name_isValid;
}

QList OAICreateEndpointConfigInput::getProductionVariants() const {
    return m_production_variants;
}
void OAICreateEndpointConfigInput::setProductionVariants(const QList &production_variants) {
    m_production_variants = production_variants;
    m_production_variants_isSet = true;
}

bool OAICreateEndpointConfigInput::is_production_variants_Set() const{
    return m_production_variants_isSet;
}

bool OAICreateEndpointConfigInput::is_production_variants_Valid() const{
    return m_production_variants_isValid;
}

OAIDataCaptureConfig OAICreateEndpointConfigInput::getDataCaptureConfig() const {
    return m_data_capture_config;
}
void OAICreateEndpointConfigInput::setDataCaptureConfig(const OAIDataCaptureConfig &data_capture_config) {
    m_data_capture_config = data_capture_config;
    m_data_capture_config_isSet = true;
}

bool OAICreateEndpointConfigInput::is_data_capture_config_Set() const{
    return m_data_capture_config_isSet;
}

bool OAICreateEndpointConfigInput::is_data_capture_config_Valid() const{
    return m_data_capture_config_isValid;
}

QList OAICreateEndpointConfigInput::getTags() const {
    return m_tags;
}
void OAICreateEndpointConfigInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateEndpointConfigInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateEndpointConfigInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateEndpointConfigInput::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateEndpointConfigInput::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateEndpointConfigInput::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateEndpointConfigInput::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

OAICreateEndpointConfigInput_AsyncInferenceConfig OAICreateEndpointConfigInput::getAsyncInferenceConfig() const {
    return m_async_inference_config;
}
void OAICreateEndpointConfigInput::setAsyncInferenceConfig(const OAICreateEndpointConfigInput_AsyncInferenceConfig &async_inference_config) {
    m_async_inference_config = async_inference_config;
    m_async_inference_config_isSet = true;
}

bool OAICreateEndpointConfigInput::is_async_inference_config_Set() const{
    return m_async_inference_config_isSet;
}

bool OAICreateEndpointConfigInput::is_async_inference_config_Valid() const{
    return m_async_inference_config_isValid;
}

OAICreateEndpointConfigInput_ExplainerConfig OAICreateEndpointConfigInput::getExplainerConfig() const {
    return m_explainer_config;
}
void OAICreateEndpointConfigInput::setExplainerConfig(const OAICreateEndpointConfigInput_ExplainerConfig &explainer_config) {
    m_explainer_config = explainer_config;
    m_explainer_config_isSet = true;
}

bool OAICreateEndpointConfigInput::is_explainer_config_Set() const{
    return m_explainer_config_isSet;
}

bool OAICreateEndpointConfigInput::is_explainer_config_Valid() const{
    return m_explainer_config_isValid;
}

QList OAICreateEndpointConfigInput::getShadowProductionVariants() const {
    return m_shadow_production_variants;
}
void OAICreateEndpointConfigInput::setShadowProductionVariants(const QList &shadow_production_variants) {
    m_shadow_production_variants = shadow_production_variants;
    m_shadow_production_variants_isSet = true;
}

bool OAICreateEndpointConfigInput::is_shadow_production_variants_Set() const{
    return m_shadow_production_variants_isSet;
}

bool OAICreateEndpointConfigInput::is_shadow_production_variants_Valid() const{
    return m_shadow_production_variants_isValid;
}

bool OAICreateEndpointConfigInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_capture_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_async_inference_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explainer_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_production_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEndpointConfigInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_config_name_isValid && m_production_variants_isValid && true;
}

} // namespace OpenAPI
