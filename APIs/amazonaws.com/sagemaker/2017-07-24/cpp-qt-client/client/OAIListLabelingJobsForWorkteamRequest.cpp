/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLabelingJobsForWorkteamRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLabelingJobsForWorkteamRequest::OAIListLabelingJobsForWorkteamRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLabelingJobsForWorkteamRequest::OAIListLabelingJobsForWorkteamRequest() {
    this->initializeModel();
}

OAIListLabelingJobsForWorkteamRequest::~OAIListLabelingJobsForWorkteamRequest() {}

void OAIListLabelingJobsForWorkteamRequest::initializeModel() {

    m_workteam_arn_isSet = false;
    m_workteam_arn_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_creation_time_after_isSet = false;
    m_creation_time_after_isValid = false;

    m_creation_time_before_isSet = false;
    m_creation_time_before_isValid = false;

    m_job_reference_code_contains_isSet = false;
    m_job_reference_code_contains_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListLabelingJobsForWorkteamRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLabelingJobsForWorkteamRequest::fromJsonObject(QJsonObject json) {

    m_workteam_arn_isValid = ::OpenAPI::fromJsonValue(m_workteam_arn, json[QString("WorkteamArn")]);
    m_workteam_arn_isSet = !json[QString("WorkteamArn")].isNull() && m_workteam_arn_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_creation_time_after_isValid = ::OpenAPI::fromJsonValue(m_creation_time_after, json[QString("CreationTimeAfter")]);
    m_creation_time_after_isSet = !json[QString("CreationTimeAfter")].isNull() && m_creation_time_after_isValid;

    m_creation_time_before_isValid = ::OpenAPI::fromJsonValue(m_creation_time_before, json[QString("CreationTimeBefore")]);
    m_creation_time_before_isSet = !json[QString("CreationTimeBefore")].isNull() && m_creation_time_before_isValid;

    m_job_reference_code_contains_isValid = ::OpenAPI::fromJsonValue(m_job_reference_code_contains, json[QString("JobReferenceCodeContains")]);
    m_job_reference_code_contains_isSet = !json[QString("JobReferenceCodeContains")].isNull() && m_job_reference_code_contains_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIListLabelingJobsForWorkteamRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLabelingJobsForWorkteamRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_workteam_arn_isSet) {
        obj.insert(QString("WorkteamArn"), ::OpenAPI::toJsonValue(m_workteam_arn));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_creation_time_after_isSet) {
        obj.insert(QString("CreationTimeAfter"), ::OpenAPI::toJsonValue(m_creation_time_after));
    }
    if (m_creation_time_before_isSet) {
        obj.insert(QString("CreationTimeBefore"), ::OpenAPI::toJsonValue(m_creation_time_before));
    }
    if (m_job_reference_code_contains_isSet) {
        obj.insert(QString("JobReferenceCodeContains"), ::OpenAPI::toJsonValue(m_job_reference_code_contains));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QString OAIListLabelingJobsForWorkteamRequest::getWorkteamArn() const {
    return m_workteam_arn;
}
void OAIListLabelingJobsForWorkteamRequest::setWorkteamArn(const QString &workteam_arn) {
    m_workteam_arn = workteam_arn;
    m_workteam_arn_isSet = true;
}

bool OAIListLabelingJobsForWorkteamRequest::is_workteam_arn_Set() const{
    return m_workteam_arn_isSet;
}

bool OAIListLabelingJobsForWorkteamRequest::is_workteam_arn_Valid() const{
    return m_workteam_arn_isValid;
}

qint32 OAIListLabelingJobsForWorkteamRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListLabelingJobsForWorkteamRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListLabelingJobsForWorkteamRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListLabelingJobsForWorkteamRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListLabelingJobsForWorkteamRequest::getNextToken() const {
    return m_next_token;
}
void OAIListLabelingJobsForWorkteamRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListLabelingJobsForWorkteamRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListLabelingJobsForWorkteamRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QDateTime OAIListLabelingJobsForWorkteamRequest::getCreationTimeAfter() const {
    return m_creation_time_after;
}
void OAIListLabelingJobsForWorkteamRequest::setCreationTimeAfter(const QDateTime &creation_time_after) {
    m_creation_time_after = creation_time_after;
    m_creation_time_after_isSet = true;
}

bool OAIListLabelingJobsForWorkteamRequest::is_creation_time_after_Set() const{
    return m_creation_time_after_isSet;
}

bool OAIListLabelingJobsForWorkteamRequest::is_creation_time_after_Valid() const{
    return m_creation_time_after_isValid;
}

QDateTime OAIListLabelingJobsForWorkteamRequest::getCreationTimeBefore() const {
    return m_creation_time_before;
}
void OAIListLabelingJobsForWorkteamRequest::setCreationTimeBefore(const QDateTime &creation_time_before) {
    m_creation_time_before = creation_time_before;
    m_creation_time_before_isSet = true;
}

bool OAIListLabelingJobsForWorkteamRequest::is_creation_time_before_Set() const{
    return m_creation_time_before_isSet;
}

bool OAIListLabelingJobsForWorkteamRequest::is_creation_time_before_Valid() const{
    return m_creation_time_before_isValid;
}

QString OAIListLabelingJobsForWorkteamRequest::getJobReferenceCodeContains() const {
    return m_job_reference_code_contains;
}
void OAIListLabelingJobsForWorkteamRequest::setJobReferenceCodeContains(const QString &job_reference_code_contains) {
    m_job_reference_code_contains = job_reference_code_contains;
    m_job_reference_code_contains_isSet = true;
}

bool OAIListLabelingJobsForWorkteamRequest::is_job_reference_code_contains_Set() const{
    return m_job_reference_code_contains_isSet;
}

bool OAIListLabelingJobsForWorkteamRequest::is_job_reference_code_contains_Valid() const{
    return m_job_reference_code_contains_isValid;
}

OAIListLabelingJobsForWorkteamSortByOptions OAIListLabelingJobsForWorkteamRequest::getSortBy() const {
    return m_sort_by;
}
void OAIListLabelingJobsForWorkteamRequest::setSortBy(const OAIListLabelingJobsForWorkteamSortByOptions &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListLabelingJobsForWorkteamRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListLabelingJobsForWorkteamRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIListLabelingJobsForWorkteamRequest::getSortOrder() const {
    return m_sort_order;
}
void OAIListLabelingJobsForWorkteamRequest::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListLabelingJobsForWorkteamRequest::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListLabelingJobsForWorkteamRequest::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListLabelingJobsForWorkteamRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workteam_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_reference_code_contains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLabelingJobsForWorkteamRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workteam_arn_isValid && true;
}

} // namespace OpenAPI
