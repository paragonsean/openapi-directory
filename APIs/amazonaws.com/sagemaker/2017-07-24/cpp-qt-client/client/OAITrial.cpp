/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrial::OAITrial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrial::OAITrial() {
    this->initializeModel();
}

OAITrial::~OAITrial() {}

void OAITrial::initializeModel() {

    m_trial_name_isSet = false;
    m_trial_name_isValid = false;

    m_trial_arn_isSet = false;
    m_trial_arn_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_experiment_name_isSet = false;
    m_experiment_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_metadata_properties_isSet = false;
    m_metadata_properties_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_trial_component_summaries_isSet = false;
    m_trial_component_summaries_isValid = false;
}

void OAITrial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrial::fromJsonObject(QJsonObject json) {

    m_trial_name_isValid = ::OpenAPI::fromJsonValue(m_trial_name, json[QString("TrialName")]);
    m_trial_name_isSet = !json[QString("TrialName")].isNull() && m_trial_name_isValid;

    m_trial_arn_isValid = ::OpenAPI::fromJsonValue(m_trial_arn, json[QString("TrialArn")]);
    m_trial_arn_isSet = !json[QString("TrialArn")].isNull() && m_trial_arn_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_experiment_name_isValid = ::OpenAPI::fromJsonValue(m_experiment_name, json[QString("ExperimentName")]);
    m_experiment_name_isSet = !json[QString("ExperimentName")].isNull() && m_experiment_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_metadata_properties_isValid = ::OpenAPI::fromJsonValue(m_metadata_properties, json[QString("MetadataProperties")]);
    m_metadata_properties_isSet = !json[QString("MetadataProperties")].isNull() && m_metadata_properties_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_trial_component_summaries_isValid = ::OpenAPI::fromJsonValue(m_trial_component_summaries, json[QString("TrialComponentSummaries")]);
    m_trial_component_summaries_isSet = !json[QString("TrialComponentSummaries")].isNull() && m_trial_component_summaries_isValid;
}

QString OAITrial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrial::asJsonObject() const {
    QJsonObject obj;
    if (m_trial_name_isSet) {
        obj.insert(QString("TrialName"), ::OpenAPI::toJsonValue(m_trial_name));
    }
    if (m_trial_arn_isSet) {
        obj.insert(QString("TrialArn"), ::OpenAPI::toJsonValue(m_trial_arn));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_experiment_name_isSet) {
        obj.insert(QString("ExperimentName"), ::OpenAPI::toJsonValue(m_experiment_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_last_modified_by.isSet()) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_metadata_properties.isSet()) {
        obj.insert(QString("MetadataProperties"), ::OpenAPI::toJsonValue(m_metadata_properties));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_trial_component_summaries.isSet()) {
        obj.insert(QString("TrialComponentSummaries"), ::OpenAPI::toJsonValue(m_trial_component_summaries));
    }
    return obj;
}

QString OAITrial::getTrialName() const {
    return m_trial_name;
}
void OAITrial::setTrialName(const QString &trial_name) {
    m_trial_name = trial_name;
    m_trial_name_isSet = true;
}

bool OAITrial::is_trial_name_Set() const{
    return m_trial_name_isSet;
}

bool OAITrial::is_trial_name_Valid() const{
    return m_trial_name_isValid;
}

QString OAITrial::getTrialArn() const {
    return m_trial_arn;
}
void OAITrial::setTrialArn(const QString &trial_arn) {
    m_trial_arn = trial_arn;
    m_trial_arn_isSet = true;
}

bool OAITrial::is_trial_arn_Set() const{
    return m_trial_arn_isSet;
}

bool OAITrial::is_trial_arn_Valid() const{
    return m_trial_arn_isValid;
}

QString OAITrial::getDisplayName() const {
    return m_display_name;
}
void OAITrial::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITrial::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITrial::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITrial::getExperimentName() const {
    return m_experiment_name;
}
void OAITrial::setExperimentName(const QString &experiment_name) {
    m_experiment_name = experiment_name;
    m_experiment_name_isSet = true;
}

bool OAITrial::is_experiment_name_Set() const{
    return m_experiment_name_isSet;
}

bool OAITrial::is_experiment_name_Valid() const{
    return m_experiment_name_isValid;
}

OAITrialSource OAITrial::getSource() const {
    return m_source;
}
void OAITrial::setSource(const OAITrialSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITrial::is_source_Set() const{
    return m_source_isSet;
}

bool OAITrial::is_source_Valid() const{
    return m_source_isValid;
}

QDateTime OAITrial::getCreationTime() const {
    return m_creation_time;
}
void OAITrial::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAITrial::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAITrial::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIDescribeTrialResponse_CreatedBy OAITrial::getCreatedBy() const {
    return m_created_by;
}
void OAITrial::setCreatedBy(const OAIDescribeTrialResponse_CreatedBy &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAITrial::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAITrial::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAITrial::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAITrial::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAITrial::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAITrial::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIUserContext OAITrial::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAITrial::setLastModifiedBy(const OAIUserContext &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAITrial::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAITrial::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

OAIMetadataProperties OAITrial::getMetadataProperties() const {
    return m_metadata_properties;
}
void OAITrial::setMetadataProperties(const OAIMetadataProperties &metadata_properties) {
    m_metadata_properties = metadata_properties;
    m_metadata_properties_isSet = true;
}

bool OAITrial::is_metadata_properties_Set() const{
    return m_metadata_properties_isSet;
}

bool OAITrial::is_metadata_properties_Valid() const{
    return m_metadata_properties_isValid;
}

QList OAITrial::getTags() const {
    return m_tags;
}
void OAITrial::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITrial::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITrial::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAITrial::getTrialComponentSummaries() const {
    return m_trial_component_summaries;
}
void OAITrial::setTrialComponentSummaries(const QList &trial_component_summaries) {
    m_trial_component_summaries = trial_component_summaries;
    m_trial_component_summaries_isSet = true;
}

bool OAITrial::is_trial_component_summaries_Set() const{
    return m_trial_component_summaries_isSet;
}

bool OAITrial::is_trial_component_summaries_Valid() const{
    return m_trial_component_summaries_isValid;
}

bool OAITrial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trial_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_component_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
