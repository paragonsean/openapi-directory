/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataCaptureConfigSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataCaptureConfigSummary::OAIDataCaptureConfigSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataCaptureConfigSummary::OAIDataCaptureConfigSummary() {
    this->initializeModel();
}

OAIDataCaptureConfigSummary::~OAIDataCaptureConfigSummary() {}

void OAIDataCaptureConfigSummary::initializeModel() {

    m_enable_capture_isSet = false;
    m_enable_capture_isValid = false;

    m_capture_status_isSet = false;
    m_capture_status_isValid = false;

    m_current_sampling_percentage_isSet = false;
    m_current_sampling_percentage_isValid = false;

    m_destination_s3_uri_isSet = false;
    m_destination_s3_uri_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAIDataCaptureConfigSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataCaptureConfigSummary::fromJsonObject(QJsonObject json) {

    m_enable_capture_isValid = ::OpenAPI::fromJsonValue(m_enable_capture, json[QString("EnableCapture")]);
    m_enable_capture_isSet = !json[QString("EnableCapture")].isNull() && m_enable_capture_isValid;

    m_capture_status_isValid = ::OpenAPI::fromJsonValue(m_capture_status, json[QString("CaptureStatus")]);
    m_capture_status_isSet = !json[QString("CaptureStatus")].isNull() && m_capture_status_isValid;

    m_current_sampling_percentage_isValid = ::OpenAPI::fromJsonValue(m_current_sampling_percentage, json[QString("CurrentSamplingPercentage")]);
    m_current_sampling_percentage_isSet = !json[QString("CurrentSamplingPercentage")].isNull() && m_current_sampling_percentage_isValid;

    m_destination_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_destination_s3_uri, json[QString("DestinationS3Uri")]);
    m_destination_s3_uri_isSet = !json[QString("DestinationS3Uri")].isNull() && m_destination_s3_uri_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;
}

QString OAIDataCaptureConfigSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataCaptureConfigSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_capture_isSet) {
        obj.insert(QString("EnableCapture"), ::OpenAPI::toJsonValue(m_enable_capture));
    }
    if (m_capture_status.isSet()) {
        obj.insert(QString("CaptureStatus"), ::OpenAPI::toJsonValue(m_capture_status));
    }
    if (m_current_sampling_percentage_isSet) {
        obj.insert(QString("CurrentSamplingPercentage"), ::OpenAPI::toJsonValue(m_current_sampling_percentage));
    }
    if (m_destination_s3_uri_isSet) {
        obj.insert(QString("DestinationS3Uri"), ::OpenAPI::toJsonValue(m_destination_s3_uri));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

bool OAIDataCaptureConfigSummary::getEnableCapture() const {
    return m_enable_capture;
}
void OAIDataCaptureConfigSummary::setEnableCapture(const bool &enable_capture) {
    m_enable_capture = enable_capture;
    m_enable_capture_isSet = true;
}

bool OAIDataCaptureConfigSummary::is_enable_capture_Set() const{
    return m_enable_capture_isSet;
}

bool OAIDataCaptureConfigSummary::is_enable_capture_Valid() const{
    return m_enable_capture_isValid;
}

OAICaptureStatus OAIDataCaptureConfigSummary::getCaptureStatus() const {
    return m_capture_status;
}
void OAIDataCaptureConfigSummary::setCaptureStatus(const OAICaptureStatus &capture_status) {
    m_capture_status = capture_status;
    m_capture_status_isSet = true;
}

bool OAIDataCaptureConfigSummary::is_capture_status_Set() const{
    return m_capture_status_isSet;
}

bool OAIDataCaptureConfigSummary::is_capture_status_Valid() const{
    return m_capture_status_isValid;
}

qint32 OAIDataCaptureConfigSummary::getCurrentSamplingPercentage() const {
    return m_current_sampling_percentage;
}
void OAIDataCaptureConfigSummary::setCurrentSamplingPercentage(const qint32 &current_sampling_percentage) {
    m_current_sampling_percentage = current_sampling_percentage;
    m_current_sampling_percentage_isSet = true;
}

bool OAIDataCaptureConfigSummary::is_current_sampling_percentage_Set() const{
    return m_current_sampling_percentage_isSet;
}

bool OAIDataCaptureConfigSummary::is_current_sampling_percentage_Valid() const{
    return m_current_sampling_percentage_isValid;
}

QString OAIDataCaptureConfigSummary::getDestinationS3Uri() const {
    return m_destination_s3_uri;
}
void OAIDataCaptureConfigSummary::setDestinationS3Uri(const QString &destination_s3_uri) {
    m_destination_s3_uri = destination_s3_uri;
    m_destination_s3_uri_isSet = true;
}

bool OAIDataCaptureConfigSummary::is_destination_s3_uri_Set() const{
    return m_destination_s3_uri_isSet;
}

bool OAIDataCaptureConfigSummary::is_destination_s3_uri_Valid() const{
    return m_destination_s3_uri_isValid;
}

QString OAIDataCaptureConfigSummary::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDataCaptureConfigSummary::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDataCaptureConfigSummary::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDataCaptureConfigSummary::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIDataCaptureConfigSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_capture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_sampling_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataCaptureConfigSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enable_capture_isValid && m_capture_status_isValid && m_current_sampling_percentage_isValid && m_destination_s3_uri_isValid && m_kms_key_id_isValid && true;
}

} // namespace OpenAPI
