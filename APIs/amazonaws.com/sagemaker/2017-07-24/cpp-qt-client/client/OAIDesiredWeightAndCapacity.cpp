/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDesiredWeightAndCapacity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDesiredWeightAndCapacity::OAIDesiredWeightAndCapacity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDesiredWeightAndCapacity::OAIDesiredWeightAndCapacity() {
    this->initializeModel();
}

OAIDesiredWeightAndCapacity::~OAIDesiredWeightAndCapacity() {}

void OAIDesiredWeightAndCapacity::initializeModel() {

    m_variant_name_isSet = false;
    m_variant_name_isValid = false;

    m_desired_weight_isSet = false;
    m_desired_weight_isValid = false;

    m_desired_instance_count_isSet = false;
    m_desired_instance_count_isValid = false;

    m_serverless_update_config_isSet = false;
    m_serverless_update_config_isValid = false;
}

void OAIDesiredWeightAndCapacity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDesiredWeightAndCapacity::fromJsonObject(QJsonObject json) {

    m_variant_name_isValid = ::OpenAPI::fromJsonValue(m_variant_name, json[QString("VariantName")]);
    m_variant_name_isSet = !json[QString("VariantName")].isNull() && m_variant_name_isValid;

    m_desired_weight_isValid = ::OpenAPI::fromJsonValue(m_desired_weight, json[QString("DesiredWeight")]);
    m_desired_weight_isSet = !json[QString("DesiredWeight")].isNull() && m_desired_weight_isValid;

    m_desired_instance_count_isValid = ::OpenAPI::fromJsonValue(m_desired_instance_count, json[QString("DesiredInstanceCount")]);
    m_desired_instance_count_isSet = !json[QString("DesiredInstanceCount")].isNull() && m_desired_instance_count_isValid;

    m_serverless_update_config_isValid = ::OpenAPI::fromJsonValue(m_serverless_update_config, json[QString("ServerlessUpdateConfig")]);
    m_serverless_update_config_isSet = !json[QString("ServerlessUpdateConfig")].isNull() && m_serverless_update_config_isValid;
}

QString OAIDesiredWeightAndCapacity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDesiredWeightAndCapacity::asJsonObject() const {
    QJsonObject obj;
    if (m_variant_name_isSet) {
        obj.insert(QString("VariantName"), ::OpenAPI::toJsonValue(m_variant_name));
    }
    if (m_desired_weight_isSet) {
        obj.insert(QString("DesiredWeight"), ::OpenAPI::toJsonValue(m_desired_weight));
    }
    if (m_desired_instance_count_isSet) {
        obj.insert(QString("DesiredInstanceCount"), ::OpenAPI::toJsonValue(m_desired_instance_count));
    }
    if (m_serverless_update_config.isSet()) {
        obj.insert(QString("ServerlessUpdateConfig"), ::OpenAPI::toJsonValue(m_serverless_update_config));
    }
    return obj;
}

QString OAIDesiredWeightAndCapacity::getVariantName() const {
    return m_variant_name;
}
void OAIDesiredWeightAndCapacity::setVariantName(const QString &variant_name) {
    m_variant_name = variant_name;
    m_variant_name_isSet = true;
}

bool OAIDesiredWeightAndCapacity::is_variant_name_Set() const{
    return m_variant_name_isSet;
}

bool OAIDesiredWeightAndCapacity::is_variant_name_Valid() const{
    return m_variant_name_isValid;
}

float OAIDesiredWeightAndCapacity::getDesiredWeight() const {
    return m_desired_weight;
}
void OAIDesiredWeightAndCapacity::setDesiredWeight(const float &desired_weight) {
    m_desired_weight = desired_weight;
    m_desired_weight_isSet = true;
}

bool OAIDesiredWeightAndCapacity::is_desired_weight_Set() const{
    return m_desired_weight_isSet;
}

bool OAIDesiredWeightAndCapacity::is_desired_weight_Valid() const{
    return m_desired_weight_isValid;
}

qint32 OAIDesiredWeightAndCapacity::getDesiredInstanceCount() const {
    return m_desired_instance_count;
}
void OAIDesiredWeightAndCapacity::setDesiredInstanceCount(const qint32 &desired_instance_count) {
    m_desired_instance_count = desired_instance_count;
    m_desired_instance_count_isSet = true;
}

bool OAIDesiredWeightAndCapacity::is_desired_instance_count_Set() const{
    return m_desired_instance_count_isSet;
}

bool OAIDesiredWeightAndCapacity::is_desired_instance_count_Valid() const{
    return m_desired_instance_count_isValid;
}

OAIDesiredWeightAndCapacity_ServerlessUpdateConfig OAIDesiredWeightAndCapacity::getServerlessUpdateConfig() const {
    return m_serverless_update_config;
}
void OAIDesiredWeightAndCapacity::setServerlessUpdateConfig(const OAIDesiredWeightAndCapacity_ServerlessUpdateConfig &serverless_update_config) {
    m_serverless_update_config = serverless_update_config;
    m_serverless_update_config_isSet = true;
}

bool OAIDesiredWeightAndCapacity::is_serverless_update_config_Set() const{
    return m_serverless_update_config_isSet;
}

bool OAIDesiredWeightAndCapacity::is_serverless_update_config_Valid() const{
    return m_serverless_update_config_isValid;
}

bool OAIDesiredWeightAndCapacity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_variant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless_update_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDesiredWeightAndCapacity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_variant_name_isValid && true;
}

} // namespace OpenAPI
