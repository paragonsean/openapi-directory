/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductionVariant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductionVariant::OAIProductionVariant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductionVariant::OAIProductionVariant() {
    this->initializeModel();
}

OAIProductionVariant::~OAIProductionVariant() {}

void OAIProductionVariant::initializeModel() {

    m_variant_name_isSet = false;
    m_variant_name_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_initial_instance_count_isSet = false;
    m_initial_instance_count_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_initial_variant_weight_isSet = false;
    m_initial_variant_weight_isValid = false;

    m_accelerator_type_isSet = false;
    m_accelerator_type_isValid = false;

    m_core_dump_config_isSet = false;
    m_core_dump_config_isValid = false;

    m_serverless_config_isSet = false;
    m_serverless_config_isValid = false;

    m_volume_size_in_gb_isSet = false;
    m_volume_size_in_gb_isValid = false;

    m_model_data_download_timeout_in_seconds_isSet = false;
    m_model_data_download_timeout_in_seconds_isValid = false;

    m_container_startup_health_check_timeout_in_seconds_isSet = false;
    m_container_startup_health_check_timeout_in_seconds_isValid = false;

    m_enable_ssm_access_isSet = false;
    m_enable_ssm_access_isValid = false;
}

void OAIProductionVariant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductionVariant::fromJsonObject(QJsonObject json) {

    m_variant_name_isValid = ::OpenAPI::fromJsonValue(m_variant_name, json[QString("VariantName")]);
    m_variant_name_isSet = !json[QString("VariantName")].isNull() && m_variant_name_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_initial_instance_count_isValid = ::OpenAPI::fromJsonValue(m_initial_instance_count, json[QString("InitialInstanceCount")]);
    m_initial_instance_count_isSet = !json[QString("InitialInstanceCount")].isNull() && m_initial_instance_count_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_initial_variant_weight_isValid = ::OpenAPI::fromJsonValue(m_initial_variant_weight, json[QString("InitialVariantWeight")]);
    m_initial_variant_weight_isSet = !json[QString("InitialVariantWeight")].isNull() && m_initial_variant_weight_isValid;

    m_accelerator_type_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type, json[QString("AcceleratorType")]);
    m_accelerator_type_isSet = !json[QString("AcceleratorType")].isNull() && m_accelerator_type_isValid;

    m_core_dump_config_isValid = ::OpenAPI::fromJsonValue(m_core_dump_config, json[QString("CoreDumpConfig")]);
    m_core_dump_config_isSet = !json[QString("CoreDumpConfig")].isNull() && m_core_dump_config_isValid;

    m_serverless_config_isValid = ::OpenAPI::fromJsonValue(m_serverless_config, json[QString("ServerlessConfig")]);
    m_serverless_config_isSet = !json[QString("ServerlessConfig")].isNull() && m_serverless_config_isValid;

    m_volume_size_in_gb_isValid = ::OpenAPI::fromJsonValue(m_volume_size_in_gb, json[QString("VolumeSizeInGB")]);
    m_volume_size_in_gb_isSet = !json[QString("VolumeSizeInGB")].isNull() && m_volume_size_in_gb_isValid;

    m_model_data_download_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_model_data_download_timeout_in_seconds, json[QString("ModelDataDownloadTimeoutInSeconds")]);
    m_model_data_download_timeout_in_seconds_isSet = !json[QString("ModelDataDownloadTimeoutInSeconds")].isNull() && m_model_data_download_timeout_in_seconds_isValid;

    m_container_startup_health_check_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_container_startup_health_check_timeout_in_seconds, json[QString("ContainerStartupHealthCheckTimeoutInSeconds")]);
    m_container_startup_health_check_timeout_in_seconds_isSet = !json[QString("ContainerStartupHealthCheckTimeoutInSeconds")].isNull() && m_container_startup_health_check_timeout_in_seconds_isValid;

    m_enable_ssm_access_isValid = ::OpenAPI::fromJsonValue(m_enable_ssm_access, json[QString("EnableSSMAccess")]);
    m_enable_ssm_access_isSet = !json[QString("EnableSSMAccess")].isNull() && m_enable_ssm_access_isValid;
}

QString OAIProductionVariant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductionVariant::asJsonObject() const {
    QJsonObject obj;
    if (m_variant_name_isSet) {
        obj.insert(QString("VariantName"), ::OpenAPI::toJsonValue(m_variant_name));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_initial_instance_count_isSet) {
        obj.insert(QString("InitialInstanceCount"), ::OpenAPI::toJsonValue(m_initial_instance_count));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_initial_variant_weight_isSet) {
        obj.insert(QString("InitialVariantWeight"), ::OpenAPI::toJsonValue(m_initial_variant_weight));
    }
    if (m_accelerator_type.isSet()) {
        obj.insert(QString("AcceleratorType"), ::OpenAPI::toJsonValue(m_accelerator_type));
    }
    if (m_core_dump_config.isSet()) {
        obj.insert(QString("CoreDumpConfig"), ::OpenAPI::toJsonValue(m_core_dump_config));
    }
    if (m_serverless_config.isSet()) {
        obj.insert(QString("ServerlessConfig"), ::OpenAPI::toJsonValue(m_serverless_config));
    }
    if (m_volume_size_in_gb_isSet) {
        obj.insert(QString("VolumeSizeInGB"), ::OpenAPI::toJsonValue(m_volume_size_in_gb));
    }
    if (m_model_data_download_timeout_in_seconds_isSet) {
        obj.insert(QString("ModelDataDownloadTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_model_data_download_timeout_in_seconds));
    }
    if (m_container_startup_health_check_timeout_in_seconds_isSet) {
        obj.insert(QString("ContainerStartupHealthCheckTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_container_startup_health_check_timeout_in_seconds));
    }
    if (m_enable_ssm_access_isSet) {
        obj.insert(QString("EnableSSMAccess"), ::OpenAPI::toJsonValue(m_enable_ssm_access));
    }
    return obj;
}

QString OAIProductionVariant::getVariantName() const {
    return m_variant_name;
}
void OAIProductionVariant::setVariantName(const QString &variant_name) {
    m_variant_name = variant_name;
    m_variant_name_isSet = true;
}

bool OAIProductionVariant::is_variant_name_Set() const{
    return m_variant_name_isSet;
}

bool OAIProductionVariant::is_variant_name_Valid() const{
    return m_variant_name_isValid;
}

QString OAIProductionVariant::getModelName() const {
    return m_model_name;
}
void OAIProductionVariant::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAIProductionVariant::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAIProductionVariant::is_model_name_Valid() const{
    return m_model_name_isValid;
}

qint32 OAIProductionVariant::getInitialInstanceCount() const {
    return m_initial_instance_count;
}
void OAIProductionVariant::setInitialInstanceCount(const qint32 &initial_instance_count) {
    m_initial_instance_count = initial_instance_count;
    m_initial_instance_count_isSet = true;
}

bool OAIProductionVariant::is_initial_instance_count_Set() const{
    return m_initial_instance_count_isSet;
}

bool OAIProductionVariant::is_initial_instance_count_Valid() const{
    return m_initial_instance_count_isValid;
}

OAIProductionVariantInstanceType OAIProductionVariant::getInstanceType() const {
    return m_instance_type;
}
void OAIProductionVariant::setInstanceType(const OAIProductionVariantInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIProductionVariant::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIProductionVariant::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

float OAIProductionVariant::getInitialVariantWeight() const {
    return m_initial_variant_weight;
}
void OAIProductionVariant::setInitialVariantWeight(const float &initial_variant_weight) {
    m_initial_variant_weight = initial_variant_weight;
    m_initial_variant_weight_isSet = true;
}

bool OAIProductionVariant::is_initial_variant_weight_Set() const{
    return m_initial_variant_weight_isSet;
}

bool OAIProductionVariant::is_initial_variant_weight_Valid() const{
    return m_initial_variant_weight_isValid;
}

OAIProductionVariantAcceleratorType OAIProductionVariant::getAcceleratorType() const {
    return m_accelerator_type;
}
void OAIProductionVariant::setAcceleratorType(const OAIProductionVariantAcceleratorType &accelerator_type) {
    m_accelerator_type = accelerator_type;
    m_accelerator_type_isSet = true;
}

bool OAIProductionVariant::is_accelerator_type_Set() const{
    return m_accelerator_type_isSet;
}

bool OAIProductionVariant::is_accelerator_type_Valid() const{
    return m_accelerator_type_isValid;
}

OAIProductionVariant_CoreDumpConfig OAIProductionVariant::getCoreDumpConfig() const {
    return m_core_dump_config;
}
void OAIProductionVariant::setCoreDumpConfig(const OAIProductionVariant_CoreDumpConfig &core_dump_config) {
    m_core_dump_config = core_dump_config;
    m_core_dump_config_isSet = true;
}

bool OAIProductionVariant::is_core_dump_config_Set() const{
    return m_core_dump_config_isSet;
}

bool OAIProductionVariant::is_core_dump_config_Valid() const{
    return m_core_dump_config_isValid;
}

OAIProductionVariant_ServerlessConfig OAIProductionVariant::getServerlessConfig() const {
    return m_serverless_config;
}
void OAIProductionVariant::setServerlessConfig(const OAIProductionVariant_ServerlessConfig &serverless_config) {
    m_serverless_config = serverless_config;
    m_serverless_config_isSet = true;
}

bool OAIProductionVariant::is_serverless_config_Set() const{
    return m_serverless_config_isSet;
}

bool OAIProductionVariant::is_serverless_config_Valid() const{
    return m_serverless_config_isValid;
}

qint32 OAIProductionVariant::getVolumeSizeInGb() const {
    return m_volume_size_in_gb;
}
void OAIProductionVariant::setVolumeSizeInGb(const qint32 &volume_size_in_gb) {
    m_volume_size_in_gb = volume_size_in_gb;
    m_volume_size_in_gb_isSet = true;
}

bool OAIProductionVariant::is_volume_size_in_gb_Set() const{
    return m_volume_size_in_gb_isSet;
}

bool OAIProductionVariant::is_volume_size_in_gb_Valid() const{
    return m_volume_size_in_gb_isValid;
}

qint32 OAIProductionVariant::getModelDataDownloadTimeoutInSeconds() const {
    return m_model_data_download_timeout_in_seconds;
}
void OAIProductionVariant::setModelDataDownloadTimeoutInSeconds(const qint32 &model_data_download_timeout_in_seconds) {
    m_model_data_download_timeout_in_seconds = model_data_download_timeout_in_seconds;
    m_model_data_download_timeout_in_seconds_isSet = true;
}

bool OAIProductionVariant::is_model_data_download_timeout_in_seconds_Set() const{
    return m_model_data_download_timeout_in_seconds_isSet;
}

bool OAIProductionVariant::is_model_data_download_timeout_in_seconds_Valid() const{
    return m_model_data_download_timeout_in_seconds_isValid;
}

qint32 OAIProductionVariant::getContainerStartupHealthCheckTimeoutInSeconds() const {
    return m_container_startup_health_check_timeout_in_seconds;
}
void OAIProductionVariant::setContainerStartupHealthCheckTimeoutInSeconds(const qint32 &container_startup_health_check_timeout_in_seconds) {
    m_container_startup_health_check_timeout_in_seconds = container_startup_health_check_timeout_in_seconds;
    m_container_startup_health_check_timeout_in_seconds_isSet = true;
}

bool OAIProductionVariant::is_container_startup_health_check_timeout_in_seconds_Set() const{
    return m_container_startup_health_check_timeout_in_seconds_isSet;
}

bool OAIProductionVariant::is_container_startup_health_check_timeout_in_seconds_Valid() const{
    return m_container_startup_health_check_timeout_in_seconds_isValid;
}

bool OAIProductionVariant::getEnableSsmAccess() const {
    return m_enable_ssm_access;
}
void OAIProductionVariant::setEnableSsmAccess(const bool &enable_ssm_access) {
    m_enable_ssm_access = enable_ssm_access;
    m_enable_ssm_access_isSet = true;
}

bool OAIProductionVariant::is_enable_ssm_access_Set() const{
    return m_enable_ssm_access_isSet;
}

bool OAIProductionVariant::is_enable_ssm_access_Valid() const{
    return m_enable_ssm_access_isValid;
}

bool OAIProductionVariant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_variant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_variant_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_dump_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_data_download_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_startup_health_check_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ssm_access_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductionVariant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_variant_name_isValid && m_model_name_isValid && true;
}

} // namespace OpenAPI
