/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRecord_Experiment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRecord_Experiment::OAISearchRecord_Experiment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRecord_Experiment::OAISearchRecord_Experiment() {
    this->initializeModel();
}

OAISearchRecord_Experiment::~OAISearchRecord_Experiment() {}

void OAISearchRecord_Experiment::initializeModel() {

    m_experiment_name_isSet = false;
    m_experiment_name_isValid = false;

    m_experiment_arn_isSet = false;
    m_experiment_arn_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISearchRecord_Experiment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRecord_Experiment::fromJsonObject(QJsonObject json) {

    m_experiment_name_isValid = ::OpenAPI::fromJsonValue(m_experiment_name, json[QString("ExperimentName")]);
    m_experiment_name_isSet = !json[QString("ExperimentName")].isNull() && m_experiment_name_isValid;

    m_experiment_arn_isValid = ::OpenAPI::fromJsonValue(m_experiment_arn, json[QString("ExperimentArn")]);
    m_experiment_arn_isSet = !json[QString("ExperimentArn")].isNull() && m_experiment_arn_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAISearchRecord_Experiment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRecord_Experiment::asJsonObject() const {
    QJsonObject obj;
    if (m_experiment_name_isSet) {
        obj.insert(QString("ExperimentName"), ::OpenAPI::toJsonValue(m_experiment_name));
    }
    if (m_experiment_arn_isSet) {
        obj.insert(QString("ExperimentArn"), ::OpenAPI::toJsonValue(m_experiment_arn));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_last_modified_by.isSet()) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAISearchRecord_Experiment::getExperimentName() const {
    return m_experiment_name;
}
void OAISearchRecord_Experiment::setExperimentName(const QString &experiment_name) {
    m_experiment_name = experiment_name;
    m_experiment_name_isSet = true;
}

bool OAISearchRecord_Experiment::is_experiment_name_Set() const{
    return m_experiment_name_isSet;
}

bool OAISearchRecord_Experiment::is_experiment_name_Valid() const{
    return m_experiment_name_isValid;
}

QString OAISearchRecord_Experiment::getExperimentArn() const {
    return m_experiment_arn;
}
void OAISearchRecord_Experiment::setExperimentArn(const QString &experiment_arn) {
    m_experiment_arn = experiment_arn;
    m_experiment_arn_isSet = true;
}

bool OAISearchRecord_Experiment::is_experiment_arn_Set() const{
    return m_experiment_arn_isSet;
}

bool OAISearchRecord_Experiment::is_experiment_arn_Valid() const{
    return m_experiment_arn_isValid;
}

QString OAISearchRecord_Experiment::getDisplayName() const {
    return m_display_name;
}
void OAISearchRecord_Experiment::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISearchRecord_Experiment::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISearchRecord_Experiment::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIExperimentSource OAISearchRecord_Experiment::getSource() const {
    return m_source;
}
void OAISearchRecord_Experiment::setSource(const OAIExperimentSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAISearchRecord_Experiment::is_source_Set() const{
    return m_source_isSet;
}

bool OAISearchRecord_Experiment::is_source_Valid() const{
    return m_source_isValid;
}

QString OAISearchRecord_Experiment::getDescription() const {
    return m_description;
}
void OAISearchRecord_Experiment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISearchRecord_Experiment::is_description_Set() const{
    return m_description_isSet;
}

bool OAISearchRecord_Experiment::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAISearchRecord_Experiment::getCreationTime() const {
    return m_creation_time;
}
void OAISearchRecord_Experiment::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISearchRecord_Experiment::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISearchRecord_Experiment::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIDescribeExperimentResponse_CreatedBy OAISearchRecord_Experiment::getCreatedBy() const {
    return m_created_by;
}
void OAISearchRecord_Experiment::setCreatedBy(const OAIDescribeExperimentResponse_CreatedBy &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAISearchRecord_Experiment::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAISearchRecord_Experiment::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAISearchRecord_Experiment::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAISearchRecord_Experiment::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAISearchRecord_Experiment::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAISearchRecord_Experiment::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIUserContext OAISearchRecord_Experiment::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAISearchRecord_Experiment::setLastModifiedBy(const OAIUserContext &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAISearchRecord_Experiment::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAISearchRecord_Experiment::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QList OAISearchRecord_Experiment::getTags() const {
    return m_tags;
}
void OAISearchRecord_Experiment::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISearchRecord_Experiment::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISearchRecord_Experiment::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISearchRecord_Experiment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_experiment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRecord_Experiment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
