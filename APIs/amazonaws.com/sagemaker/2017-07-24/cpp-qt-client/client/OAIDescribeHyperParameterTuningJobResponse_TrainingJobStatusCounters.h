/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeHyperParameterTuningJobResponse_TrainingJobStatusCounters.h
 *
 * 
 */

#ifndef OAIDescribeHyperParameterTuningJobResponse_TrainingJobStatusCounters_H
#define OAIDescribeHyperParameterTuningJobResponse_TrainingJobStatusCounters_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeHyperParameterTuningJobResponse_TrainingJobStatusCounters : public OAIObject {
public:
    OAIDescribeHyperParameterTuningJobResponse_TrainingJobStatusCounters();
    OAIDescribeHyperParameterTuningJobResponse_TrainingJobStatusCounters(QString json);
    ~OAIDescribeHyperParameterTuningJobResponse_TrainingJobStatusCounters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCompleted() const;
    void setCompleted(const qint32 &completed);
    bool is_completed_Set() const;
    bool is_completed_Valid() const;

    qint32 getInProgress() const;
    void setInProgress(const qint32 &in_progress);
    bool is_in_progress_Set() const;
    bool is_in_progress_Valid() const;

    qint32 getRetryableError() const;
    void setRetryableError(const qint32 &retryable_error);
    bool is_retryable_error_Set() const;
    bool is_retryable_error_Valid() const;

    qint32 getNonRetryableError() const;
    void setNonRetryableError(const qint32 &non_retryable_error);
    bool is_non_retryable_error_Set() const;
    bool is_non_retryable_error_Valid() const;

    qint32 getStopped() const;
    void setStopped(const qint32 &stopped);
    bool is_stopped_Set() const;
    bool is_stopped_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_completed;
    bool m_completed_isSet;
    bool m_completed_isValid;

    qint32 m_in_progress;
    bool m_in_progress_isSet;
    bool m_in_progress_isValid;

    qint32 m_retryable_error;
    bool m_retryable_error_isSet;
    bool m_retryable_error_isValid;

    qint32 m_non_retryable_error;
    bool m_non_retryable_error_isSet;
    bool m_non_retryable_error_isValid;

    qint32 m_stopped;
    bool m_stopped_isSet;
    bool m_stopped_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeHyperParameterTuningJobResponse_TrainingJobStatusCounters)

#endif // OAIDescribeHyperParameterTuningJobResponse_TrainingJobStatusCounters_H
