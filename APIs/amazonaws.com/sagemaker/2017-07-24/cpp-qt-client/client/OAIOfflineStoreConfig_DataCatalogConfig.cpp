/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfflineStoreConfig_DataCatalogConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfflineStoreConfig_DataCatalogConfig::OAIOfflineStoreConfig_DataCatalogConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfflineStoreConfig_DataCatalogConfig::OAIOfflineStoreConfig_DataCatalogConfig() {
    this->initializeModel();
}

OAIOfflineStoreConfig_DataCatalogConfig::~OAIOfflineStoreConfig_DataCatalogConfig() {}

void OAIOfflineStoreConfig_DataCatalogConfig::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_catalog_isSet = false;
    m_catalog_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;
}

void OAIOfflineStoreConfig_DataCatalogConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfflineStoreConfig_DataCatalogConfig::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_catalog_isValid = ::OpenAPI::fromJsonValue(m_catalog, json[QString("Catalog")]);
    m_catalog_isSet = !json[QString("Catalog")].isNull() && m_catalog_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;
}

QString OAIOfflineStoreConfig_DataCatalogConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfflineStoreConfig_DataCatalogConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_catalog_isSet) {
        obj.insert(QString("Catalog"), ::OpenAPI::toJsonValue(m_catalog));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    return obj;
}

QString OAIOfflineStoreConfig_DataCatalogConfig::getTableName() const {
    return m_table_name;
}
void OAIOfflineStoreConfig_DataCatalogConfig::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIOfflineStoreConfig_DataCatalogConfig::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIOfflineStoreConfig_DataCatalogConfig::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIOfflineStoreConfig_DataCatalogConfig::getCatalog() const {
    return m_catalog;
}
void OAIOfflineStoreConfig_DataCatalogConfig::setCatalog(const QString &catalog) {
    m_catalog = catalog;
    m_catalog_isSet = true;
}

bool OAIOfflineStoreConfig_DataCatalogConfig::is_catalog_Set() const{
    return m_catalog_isSet;
}

bool OAIOfflineStoreConfig_DataCatalogConfig::is_catalog_Valid() const{
    return m_catalog_isValid;
}

QString OAIOfflineStoreConfig_DataCatalogConfig::getDatabase() const {
    return m_database;
}
void OAIOfflineStoreConfig_DataCatalogConfig::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIOfflineStoreConfig_DataCatalogConfig::is_database_Set() const{
    return m_database_isSet;
}

bool OAIOfflineStoreConfig_DataCatalogConfig::is_database_Valid() const{
    return m_database_isValid;
}

bool OAIOfflineStoreConfig_DataCatalogConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfflineStoreConfig_DataCatalogConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && m_catalog_isValid && m_database_isValid && true;
}

} // namespace OpenAPI
