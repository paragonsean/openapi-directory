/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrainingJobStatusCounters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrainingJobStatusCounters::OAITrainingJobStatusCounters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrainingJobStatusCounters::OAITrainingJobStatusCounters() {
    this->initializeModel();
}

OAITrainingJobStatusCounters::~OAITrainingJobStatusCounters() {}

void OAITrainingJobStatusCounters::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_in_progress_isSet = false;
    m_in_progress_isValid = false;

    m_retryable_error_isSet = false;
    m_retryable_error_isValid = false;

    m_non_retryable_error_isSet = false;
    m_non_retryable_error_isValid = false;

    m_stopped_isSet = false;
    m_stopped_isValid = false;
}

void OAITrainingJobStatusCounters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrainingJobStatusCounters::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("Completed")]);
    m_completed_isSet = !json[QString("Completed")].isNull() && m_completed_isValid;

    m_in_progress_isValid = ::OpenAPI::fromJsonValue(m_in_progress, json[QString("InProgress")]);
    m_in_progress_isSet = !json[QString("InProgress")].isNull() && m_in_progress_isValid;

    m_retryable_error_isValid = ::OpenAPI::fromJsonValue(m_retryable_error, json[QString("RetryableError")]);
    m_retryable_error_isSet = !json[QString("RetryableError")].isNull() && m_retryable_error_isValid;

    m_non_retryable_error_isValid = ::OpenAPI::fromJsonValue(m_non_retryable_error, json[QString("NonRetryableError")]);
    m_non_retryable_error_isSet = !json[QString("NonRetryableError")].isNull() && m_non_retryable_error_isValid;

    m_stopped_isValid = ::OpenAPI::fromJsonValue(m_stopped, json[QString("Stopped")]);
    m_stopped_isSet = !json[QString("Stopped")].isNull() && m_stopped_isValid;
}

QString OAITrainingJobStatusCounters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrainingJobStatusCounters::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_isSet) {
        obj.insert(QString("Completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_in_progress_isSet) {
        obj.insert(QString("InProgress"), ::OpenAPI::toJsonValue(m_in_progress));
    }
    if (m_retryable_error_isSet) {
        obj.insert(QString("RetryableError"), ::OpenAPI::toJsonValue(m_retryable_error));
    }
    if (m_non_retryable_error_isSet) {
        obj.insert(QString("NonRetryableError"), ::OpenAPI::toJsonValue(m_non_retryable_error));
    }
    if (m_stopped_isSet) {
        obj.insert(QString("Stopped"), ::OpenAPI::toJsonValue(m_stopped));
    }
    return obj;
}

qint32 OAITrainingJobStatusCounters::getCompleted() const {
    return m_completed;
}
void OAITrainingJobStatusCounters::setCompleted(const qint32 &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAITrainingJobStatusCounters::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAITrainingJobStatusCounters::is_completed_Valid() const{
    return m_completed_isValid;
}

qint32 OAITrainingJobStatusCounters::getInProgress() const {
    return m_in_progress;
}
void OAITrainingJobStatusCounters::setInProgress(const qint32 &in_progress) {
    m_in_progress = in_progress;
    m_in_progress_isSet = true;
}

bool OAITrainingJobStatusCounters::is_in_progress_Set() const{
    return m_in_progress_isSet;
}

bool OAITrainingJobStatusCounters::is_in_progress_Valid() const{
    return m_in_progress_isValid;
}

qint32 OAITrainingJobStatusCounters::getRetryableError() const {
    return m_retryable_error;
}
void OAITrainingJobStatusCounters::setRetryableError(const qint32 &retryable_error) {
    m_retryable_error = retryable_error;
    m_retryable_error_isSet = true;
}

bool OAITrainingJobStatusCounters::is_retryable_error_Set() const{
    return m_retryable_error_isSet;
}

bool OAITrainingJobStatusCounters::is_retryable_error_Valid() const{
    return m_retryable_error_isValid;
}

qint32 OAITrainingJobStatusCounters::getNonRetryableError() const {
    return m_non_retryable_error;
}
void OAITrainingJobStatusCounters::setNonRetryableError(const qint32 &non_retryable_error) {
    m_non_retryable_error = non_retryable_error;
    m_non_retryable_error_isSet = true;
}

bool OAITrainingJobStatusCounters::is_non_retryable_error_Set() const{
    return m_non_retryable_error_isSet;
}

bool OAITrainingJobStatusCounters::is_non_retryable_error_Valid() const{
    return m_non_retryable_error_isValid;
}

qint32 OAITrainingJobStatusCounters::getStopped() const {
    return m_stopped;
}
void OAITrainingJobStatusCounters::setStopped(const qint32 &stopped) {
    m_stopped = stopped;
    m_stopped_isSet = true;
}

bool OAITrainingJobStatusCounters::is_stopped_Set() const{
    return m_stopped_isSet;
}

bool OAITrainingJobStatusCounters::is_stopped_Valid() const{
    return m_stopped_isValid;
}

bool OAITrainingJobStatusCounters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retryable_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_retryable_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrainingJobStatusCounters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
