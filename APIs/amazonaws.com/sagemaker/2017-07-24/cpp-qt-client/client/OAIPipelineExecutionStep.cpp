/**
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineExecutionStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineExecutionStep::OAIPipelineExecutionStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineExecutionStep::OAIPipelineExecutionStep() {
    this->initializeModel();
}

OAIPipelineExecutionStep::~OAIPipelineExecutionStep() {}

void OAIPipelineExecutionStep::initializeModel() {

    m_step_name_isSet = false;
    m_step_name_isValid = false;

    m_step_display_name_isSet = false;
    m_step_display_name_isValid = false;

    m_step_description_isSet = false;
    m_step_description_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_step_status_isSet = false;
    m_step_status_isValid = false;

    m_cache_hit_result_isSet = false;
    m_cache_hit_result_isValid = false;

    m_attempt_count_isSet = false;
    m_attempt_count_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_selective_execution_result_isSet = false;
    m_selective_execution_result_isValid = false;
}

void OAIPipelineExecutionStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineExecutionStep::fromJsonObject(QJsonObject json) {

    m_step_name_isValid = ::OpenAPI::fromJsonValue(m_step_name, json[QString("StepName")]);
    m_step_name_isSet = !json[QString("StepName")].isNull() && m_step_name_isValid;

    m_step_display_name_isValid = ::OpenAPI::fromJsonValue(m_step_display_name, json[QString("StepDisplayName")]);
    m_step_display_name_isSet = !json[QString("StepDisplayName")].isNull() && m_step_display_name_isValid;

    m_step_description_isValid = ::OpenAPI::fromJsonValue(m_step_description, json[QString("StepDescription")]);
    m_step_description_isSet = !json[QString("StepDescription")].isNull() && m_step_description_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_step_status_isValid = ::OpenAPI::fromJsonValue(m_step_status, json[QString("StepStatus")]);
    m_step_status_isSet = !json[QString("StepStatus")].isNull() && m_step_status_isValid;

    m_cache_hit_result_isValid = ::OpenAPI::fromJsonValue(m_cache_hit_result, json[QString("CacheHitResult")]);
    m_cache_hit_result_isSet = !json[QString("CacheHitResult")].isNull() && m_cache_hit_result_isValid;

    m_attempt_count_isValid = ::OpenAPI::fromJsonValue(m_attempt_count, json[QString("AttemptCount")]);
    m_attempt_count_isSet = !json[QString("AttemptCount")].isNull() && m_attempt_count_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_selective_execution_result_isValid = ::OpenAPI::fromJsonValue(m_selective_execution_result, json[QString("SelectiveExecutionResult")]);
    m_selective_execution_result_isSet = !json[QString("SelectiveExecutionResult")].isNull() && m_selective_execution_result_isValid;
}

QString OAIPipelineExecutionStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineExecutionStep::asJsonObject() const {
    QJsonObject obj;
    if (m_step_name_isSet) {
        obj.insert(QString("StepName"), ::OpenAPI::toJsonValue(m_step_name));
    }
    if (m_step_display_name_isSet) {
        obj.insert(QString("StepDisplayName"), ::OpenAPI::toJsonValue(m_step_display_name));
    }
    if (m_step_description_isSet) {
        obj.insert(QString("StepDescription"), ::OpenAPI::toJsonValue(m_step_description));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_step_status.isSet()) {
        obj.insert(QString("StepStatus"), ::OpenAPI::toJsonValue(m_step_status));
    }
    if (m_cache_hit_result.isSet()) {
        obj.insert(QString("CacheHitResult"), ::OpenAPI::toJsonValue(m_cache_hit_result));
    }
    if (m_attempt_count_isSet) {
        obj.insert(QString("AttemptCount"), ::OpenAPI::toJsonValue(m_attempt_count));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_selective_execution_result.isSet()) {
        obj.insert(QString("SelectiveExecutionResult"), ::OpenAPI::toJsonValue(m_selective_execution_result));
    }
    return obj;
}

QString OAIPipelineExecutionStep::getStepName() const {
    return m_step_name;
}
void OAIPipelineExecutionStep::setStepName(const QString &step_name) {
    m_step_name = step_name;
    m_step_name_isSet = true;
}

bool OAIPipelineExecutionStep::is_step_name_Set() const{
    return m_step_name_isSet;
}

bool OAIPipelineExecutionStep::is_step_name_Valid() const{
    return m_step_name_isValid;
}

QString OAIPipelineExecutionStep::getStepDisplayName() const {
    return m_step_display_name;
}
void OAIPipelineExecutionStep::setStepDisplayName(const QString &step_display_name) {
    m_step_display_name = step_display_name;
    m_step_display_name_isSet = true;
}

bool OAIPipelineExecutionStep::is_step_display_name_Set() const{
    return m_step_display_name_isSet;
}

bool OAIPipelineExecutionStep::is_step_display_name_Valid() const{
    return m_step_display_name_isValid;
}

QString OAIPipelineExecutionStep::getStepDescription() const {
    return m_step_description;
}
void OAIPipelineExecutionStep::setStepDescription(const QString &step_description) {
    m_step_description = step_description;
    m_step_description_isSet = true;
}

bool OAIPipelineExecutionStep::is_step_description_Set() const{
    return m_step_description_isSet;
}

bool OAIPipelineExecutionStep::is_step_description_Valid() const{
    return m_step_description_isValid;
}

QDateTime OAIPipelineExecutionStep::getStartTime() const {
    return m_start_time;
}
void OAIPipelineExecutionStep::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPipelineExecutionStep::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPipelineExecutionStep::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIPipelineExecutionStep::getEndTime() const {
    return m_end_time;
}
void OAIPipelineExecutionStep::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPipelineExecutionStep::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPipelineExecutionStep::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIStepStatus OAIPipelineExecutionStep::getStepStatus() const {
    return m_step_status;
}
void OAIPipelineExecutionStep::setStepStatus(const OAIStepStatus &step_status) {
    m_step_status = step_status;
    m_step_status_isSet = true;
}

bool OAIPipelineExecutionStep::is_step_status_Set() const{
    return m_step_status_isSet;
}

bool OAIPipelineExecutionStep::is_step_status_Valid() const{
    return m_step_status_isValid;
}

OAIPipelineExecutionStep_CacheHitResult OAIPipelineExecutionStep::getCacheHitResult() const {
    return m_cache_hit_result;
}
void OAIPipelineExecutionStep::setCacheHitResult(const OAIPipelineExecutionStep_CacheHitResult &cache_hit_result) {
    m_cache_hit_result = cache_hit_result;
    m_cache_hit_result_isSet = true;
}

bool OAIPipelineExecutionStep::is_cache_hit_result_Set() const{
    return m_cache_hit_result_isSet;
}

bool OAIPipelineExecutionStep::is_cache_hit_result_Valid() const{
    return m_cache_hit_result_isValid;
}

qint32 OAIPipelineExecutionStep::getAttemptCount() const {
    return m_attempt_count;
}
void OAIPipelineExecutionStep::setAttemptCount(const qint32 &attempt_count) {
    m_attempt_count = attempt_count;
    m_attempt_count_isSet = true;
}

bool OAIPipelineExecutionStep::is_attempt_count_Set() const{
    return m_attempt_count_isSet;
}

bool OAIPipelineExecutionStep::is_attempt_count_Valid() const{
    return m_attempt_count_isValid;
}

QString OAIPipelineExecutionStep::getFailureReason() const {
    return m_failure_reason;
}
void OAIPipelineExecutionStep::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIPipelineExecutionStep::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIPipelineExecutionStep::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIPipelineExecutionStep_Metadata OAIPipelineExecutionStep::getMetadata() const {
    return m_metadata;
}
void OAIPipelineExecutionStep::setMetadata(const OAIPipelineExecutionStep_Metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPipelineExecutionStep::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPipelineExecutionStep::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIPipelineExecutionStep_SelectiveExecutionResult OAIPipelineExecutionStep::getSelectiveExecutionResult() const {
    return m_selective_execution_result;
}
void OAIPipelineExecutionStep::setSelectiveExecutionResult(const OAIPipelineExecutionStep_SelectiveExecutionResult &selective_execution_result) {
    m_selective_execution_result = selective_execution_result;
    m_selective_execution_result_isSet = true;
}

bool OAIPipelineExecutionStep::is_selective_execution_result_Set() const{
    return m_selective_execution_result_isSet;
}

bool OAIPipelineExecutionStep::is_selective_execution_result_Valid() const{
    return m_selective_execution_result_isValid;
}

bool OAIPipelineExecutionStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_hit_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selective_execution_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineExecutionStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
