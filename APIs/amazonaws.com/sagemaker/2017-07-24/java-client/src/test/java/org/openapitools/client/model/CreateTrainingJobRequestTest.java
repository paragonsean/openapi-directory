/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateTrainingJobRequestAlgorithmSpecification;
import org.openapitools.client.model.CreateTrainingJobRequestCheckpointConfig;
import org.openapitools.client.model.CreateTrainingJobRequestOutputDataConfig;
import org.openapitools.client.model.CreateTrainingJobRequestResourceConfig;
import org.openapitools.client.model.CreateTrainingJobRequestRetryStrategy;
import org.openapitools.client.model.CreateTrainingJobRequestStoppingCondition;
import org.openapitools.client.model.CreateTrainingJobRequestVpcConfig;
import org.openapitools.client.model.DebugHookConfig;
import org.openapitools.client.model.ExperimentConfig;
import org.openapitools.client.model.ProfilerConfig;
import org.openapitools.client.model.TensorBoardOutputConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CreateTrainingJobRequest
 */
public class CreateTrainingJobRequestTest {
    private final CreateTrainingJobRequest model = new CreateTrainingJobRequest();

    /**
     * Model tests for CreateTrainingJobRequest
     */
    @Test
    public void testCreateTrainingJobRequest() {
        // TODO: test CreateTrainingJobRequest
    }

    /**
     * Test the property 'trainingJobName'
     */
    @Test
    public void trainingJobNameTest() {
        // TODO: test trainingJobName
    }

    /**
     * Test the property 'hyperParameters'
     */
    @Test
    public void hyperParametersTest() {
        // TODO: test hyperParameters
    }

    /**
     * Test the property 'algorithmSpecification'
     */
    @Test
    public void algorithmSpecificationTest() {
        // TODO: test algorithmSpecification
    }

    /**
     * Test the property 'roleArn'
     */
    @Test
    public void roleArnTest() {
        // TODO: test roleArn
    }

    /**
     * Test the property 'inputDataConfig'
     */
    @Test
    public void inputDataConfigTest() {
        // TODO: test inputDataConfig
    }

    /**
     * Test the property 'outputDataConfig'
     */
    @Test
    public void outputDataConfigTest() {
        // TODO: test outputDataConfig
    }

    /**
     * Test the property 'resourceConfig'
     */
    @Test
    public void resourceConfigTest() {
        // TODO: test resourceConfig
    }

    /**
     * Test the property 'vpcConfig'
     */
    @Test
    public void vpcConfigTest() {
        // TODO: test vpcConfig
    }

    /**
     * Test the property 'stoppingCondition'
     */
    @Test
    public void stoppingConditionTest() {
        // TODO: test stoppingCondition
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'enableNetworkIsolation'
     */
    @Test
    public void enableNetworkIsolationTest() {
        // TODO: test enableNetworkIsolation
    }

    /**
     * Test the property 'enableInterContainerTrafficEncryption'
     */
    @Test
    public void enableInterContainerTrafficEncryptionTest() {
        // TODO: test enableInterContainerTrafficEncryption
    }

    /**
     * Test the property 'enableManagedSpotTraining'
     */
    @Test
    public void enableManagedSpotTrainingTest() {
        // TODO: test enableManagedSpotTraining
    }

    /**
     * Test the property 'checkpointConfig'
     */
    @Test
    public void checkpointConfigTest() {
        // TODO: test checkpointConfig
    }

    /**
     * Test the property 'debugHookConfig'
     */
    @Test
    public void debugHookConfigTest() {
        // TODO: test debugHookConfig
    }

    /**
     * Test the property 'debugRuleConfigurations'
     */
    @Test
    public void debugRuleConfigurationsTest() {
        // TODO: test debugRuleConfigurations
    }

    /**
     * Test the property 'tensorBoardOutputConfig'
     */
    @Test
    public void tensorBoardOutputConfigTest() {
        // TODO: test tensorBoardOutputConfig
    }

    /**
     * Test the property 'experimentConfig'
     */
    @Test
    public void experimentConfigTest() {
        // TODO: test experimentConfig
    }

    /**
     * Test the property 'profilerConfig'
     */
    @Test
    public void profilerConfigTest() {
        // TODO: test profilerConfig
    }

    /**
     * Test the property 'profilerRuleConfigurations'
     */
    @Test
    public void profilerRuleConfigurationsTest() {
        // TODO: test profilerRuleConfigurations
    }

    /**
     * Test the property 'environment'
     */
    @Test
    public void environmentTest() {
        // TODO: test environment
    }

    /**
     * Test the property 'retryStrategy'
     */
    @Test
    public void retryStrategyTest() {
        // TODO: test retryStrategy
    }

}
