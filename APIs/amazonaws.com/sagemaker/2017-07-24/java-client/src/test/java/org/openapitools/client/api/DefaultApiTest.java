/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddAssociationRequest;
import org.openapitools.client.model.AddAssociationResponse;
import org.openapitools.client.model.AddTagsInput;
import org.openapitools.client.model.AddTagsOutput;
import org.openapitools.client.model.AssociateTrialComponentRequest;
import org.openapitools.client.model.AssociateTrialComponentResponse;
import org.openapitools.client.model.BatchDescribeModelPackageInput;
import org.openapitools.client.model.BatchDescribeModelPackageOutput;
import org.openapitools.client.model.CreateActionRequest;
import org.openapitools.client.model.CreateActionResponse;
import org.openapitools.client.model.CreateAlgorithmInput;
import org.openapitools.client.model.CreateAlgorithmOutput;
import org.openapitools.client.model.CreateAppImageConfigRequest;
import org.openapitools.client.model.CreateAppImageConfigResponse;
import org.openapitools.client.model.CreateAppRequest;
import org.openapitools.client.model.CreateAppResponse;
import org.openapitools.client.model.CreateArtifactRequest;
import org.openapitools.client.model.CreateArtifactResponse;
import org.openapitools.client.model.CreateAutoMLJobRequest;
import org.openapitools.client.model.CreateAutoMLJobResponse;
import org.openapitools.client.model.CreateAutoMLJobV2Request;
import org.openapitools.client.model.CreateAutoMLJobV2Response;
import org.openapitools.client.model.CreateCodeRepositoryInput;
import org.openapitools.client.model.CreateCodeRepositoryOutput;
import org.openapitools.client.model.CreateCompilationJobRequest;
import org.openapitools.client.model.CreateCompilationJobResponse;
import org.openapitools.client.model.CreateContextRequest;
import org.openapitools.client.model.CreateContextResponse;
import org.openapitools.client.model.CreateDataQualityJobDefinitionRequest;
import org.openapitools.client.model.CreateDataQualityJobDefinitionResponse;
import org.openapitools.client.model.CreateDeviceFleetRequest;
import org.openapitools.client.model.CreateDomainRequest;
import org.openapitools.client.model.CreateDomainResponse;
import org.openapitools.client.model.CreateEdgeDeploymentPlanRequest;
import org.openapitools.client.model.CreateEdgeDeploymentPlanResponse;
import org.openapitools.client.model.CreateEdgeDeploymentStageRequest;
import org.openapitools.client.model.CreateEdgePackagingJobRequest;
import org.openapitools.client.model.CreateEndpointConfigInput;
import org.openapitools.client.model.CreateEndpointConfigOutput;
import org.openapitools.client.model.CreateEndpointInput;
import org.openapitools.client.model.CreateEndpointOutput;
import org.openapitools.client.model.CreateExperimentRequest;
import org.openapitools.client.model.CreateExperimentResponse;
import org.openapitools.client.model.CreateFeatureGroupRequest;
import org.openapitools.client.model.CreateFeatureGroupResponse;
import org.openapitools.client.model.CreateFlowDefinitionRequest;
import org.openapitools.client.model.CreateFlowDefinitionResponse;
import org.openapitools.client.model.CreateHubRequest;
import org.openapitools.client.model.CreateHubResponse;
import org.openapitools.client.model.CreateHumanTaskUiRequest;
import org.openapitools.client.model.CreateHumanTaskUiResponse;
import org.openapitools.client.model.CreateHyperParameterTuningJobRequest;
import org.openapitools.client.model.CreateHyperParameterTuningJobResponse;
import org.openapitools.client.model.CreateImageRequest;
import org.openapitools.client.model.CreateImageResponse;
import org.openapitools.client.model.CreateImageVersionRequest;
import org.openapitools.client.model.CreateImageVersionResponse;
import org.openapitools.client.model.CreateInferenceExperimentRequest;
import org.openapitools.client.model.CreateInferenceExperimentResponse;
import org.openapitools.client.model.CreateInferenceRecommendationsJobRequest;
import org.openapitools.client.model.CreateInferenceRecommendationsJobResponse;
import org.openapitools.client.model.CreateLabelingJobRequest;
import org.openapitools.client.model.CreateLabelingJobResponse;
import org.openapitools.client.model.CreateModelBiasJobDefinitionRequest;
import org.openapitools.client.model.CreateModelBiasJobDefinitionResponse;
import org.openapitools.client.model.CreateModelCardExportJobRequest;
import org.openapitools.client.model.CreateModelCardExportJobResponse;
import org.openapitools.client.model.CreateModelCardRequest;
import org.openapitools.client.model.CreateModelCardResponse;
import org.openapitools.client.model.CreateModelExplainabilityJobDefinitionRequest;
import org.openapitools.client.model.CreateModelExplainabilityJobDefinitionResponse;
import org.openapitools.client.model.CreateModelInput;
import org.openapitools.client.model.CreateModelOutput;
import org.openapitools.client.model.CreateModelPackageGroupInput;
import org.openapitools.client.model.CreateModelPackageGroupOutput;
import org.openapitools.client.model.CreateModelPackageInput;
import org.openapitools.client.model.CreateModelPackageOutput;
import org.openapitools.client.model.CreateModelQualityJobDefinitionRequest;
import org.openapitools.client.model.CreateModelQualityJobDefinitionResponse;
import org.openapitools.client.model.CreateMonitoringScheduleRequest;
import org.openapitools.client.model.CreateMonitoringScheduleResponse;
import org.openapitools.client.model.CreateNotebookInstanceInput;
import org.openapitools.client.model.CreateNotebookInstanceLifecycleConfigInput;
import org.openapitools.client.model.CreateNotebookInstanceLifecycleConfigOutput;
import org.openapitools.client.model.CreateNotebookInstanceOutput;
import org.openapitools.client.model.CreatePipelineRequest;
import org.openapitools.client.model.CreatePipelineResponse;
import org.openapitools.client.model.CreatePresignedDomainUrlRequest;
import org.openapitools.client.model.CreatePresignedDomainUrlResponse;
import org.openapitools.client.model.CreatePresignedNotebookInstanceUrlInput;
import org.openapitools.client.model.CreatePresignedNotebookInstanceUrlOutput;
import org.openapitools.client.model.CreateProcessingJobRequest;
import org.openapitools.client.model.CreateProcessingJobResponse;
import org.openapitools.client.model.CreateProjectInput;
import org.openapitools.client.model.CreateProjectOutput;
import org.openapitools.client.model.CreateSpaceRequest;
import org.openapitools.client.model.CreateSpaceResponse;
import org.openapitools.client.model.CreateStudioLifecycleConfigRequest;
import org.openapitools.client.model.CreateStudioLifecycleConfigResponse;
import org.openapitools.client.model.CreateTrainingJobRequest;
import org.openapitools.client.model.CreateTrainingJobResponse;
import org.openapitools.client.model.CreateTransformJobRequest;
import org.openapitools.client.model.CreateTransformJobResponse;
import org.openapitools.client.model.CreateTrialComponentRequest;
import org.openapitools.client.model.CreateTrialComponentResponse;
import org.openapitools.client.model.CreateTrialRequest;
import org.openapitools.client.model.CreateTrialResponse;
import org.openapitools.client.model.CreateUserProfileRequest;
import org.openapitools.client.model.CreateUserProfileResponse;
import org.openapitools.client.model.CreateWorkforceRequest;
import org.openapitools.client.model.CreateWorkforceResponse;
import org.openapitools.client.model.CreateWorkteamRequest;
import org.openapitools.client.model.CreateWorkteamResponse;
import org.openapitools.client.model.DeleteActionRequest;
import org.openapitools.client.model.DeleteActionResponse;
import org.openapitools.client.model.DeleteAlgorithmInput;
import org.openapitools.client.model.DeleteAppImageConfigRequest;
import org.openapitools.client.model.DeleteAppRequest;
import org.openapitools.client.model.DeleteArtifactRequest;
import org.openapitools.client.model.DeleteArtifactResponse;
import org.openapitools.client.model.DeleteAssociationRequest;
import org.openapitools.client.model.DeleteAssociationResponse;
import org.openapitools.client.model.DeleteCodeRepositoryInput;
import org.openapitools.client.model.DeleteContextRequest;
import org.openapitools.client.model.DeleteContextResponse;
import org.openapitools.client.model.DeleteDataQualityJobDefinitionRequest;
import org.openapitools.client.model.DeleteDeviceFleetRequest;
import org.openapitools.client.model.DeleteDomainRequest;
import org.openapitools.client.model.DeleteEdgeDeploymentPlanRequest;
import org.openapitools.client.model.DeleteEdgeDeploymentStageRequest;
import org.openapitools.client.model.DeleteEndpointConfigInput;
import org.openapitools.client.model.DeleteEndpointInput;
import org.openapitools.client.model.DeleteExperimentRequest;
import org.openapitools.client.model.DeleteExperimentResponse;
import org.openapitools.client.model.DeleteFeatureGroupRequest;
import org.openapitools.client.model.DeleteFlowDefinitionRequest;
import org.openapitools.client.model.DeleteHubContentRequest;
import org.openapitools.client.model.DeleteHubRequest;
import org.openapitools.client.model.DeleteHumanTaskUiRequest;
import org.openapitools.client.model.DeleteImageRequest;
import org.openapitools.client.model.DeleteImageVersionRequest;
import org.openapitools.client.model.DeleteInferenceExperimentRequest;
import org.openapitools.client.model.DeleteInferenceExperimentResponse;
import org.openapitools.client.model.DeleteModelBiasJobDefinitionRequest;
import org.openapitools.client.model.DeleteModelCardRequest;
import org.openapitools.client.model.DeleteModelExplainabilityJobDefinitionRequest;
import org.openapitools.client.model.DeleteModelInput;
import org.openapitools.client.model.DeleteModelPackageGroupInput;
import org.openapitools.client.model.DeleteModelPackageGroupPolicyInput;
import org.openapitools.client.model.DeleteModelPackageInput;
import org.openapitools.client.model.DeleteModelQualityJobDefinitionRequest;
import org.openapitools.client.model.DeleteMonitoringScheduleRequest;
import org.openapitools.client.model.DeleteNotebookInstanceInput;
import org.openapitools.client.model.DeleteNotebookInstanceLifecycleConfigInput;
import org.openapitools.client.model.DeletePipelineRequest;
import org.openapitools.client.model.DeletePipelineResponse;
import org.openapitools.client.model.DeleteProjectInput;
import org.openapitools.client.model.DeleteSpaceRequest;
import org.openapitools.client.model.DeleteStudioLifecycleConfigRequest;
import org.openapitools.client.model.DeleteTagsInput;
import org.openapitools.client.model.DeleteTrialComponentRequest;
import org.openapitools.client.model.DeleteTrialComponentResponse;
import org.openapitools.client.model.DeleteTrialRequest;
import org.openapitools.client.model.DeleteTrialResponse;
import org.openapitools.client.model.DeleteUserProfileRequest;
import org.openapitools.client.model.DeleteWorkforceRequest;
import org.openapitools.client.model.DeleteWorkteamRequest;
import org.openapitools.client.model.DeleteWorkteamResponse;
import org.openapitools.client.model.DeregisterDevicesRequest;
import org.openapitools.client.model.DescribeActionRequest;
import org.openapitools.client.model.DescribeActionResponse;
import org.openapitools.client.model.DescribeAlgorithmInput;
import org.openapitools.client.model.DescribeAlgorithmOutput;
import org.openapitools.client.model.DescribeAppImageConfigRequest;
import org.openapitools.client.model.DescribeAppImageConfigResponse;
import org.openapitools.client.model.DescribeAppRequest;
import org.openapitools.client.model.DescribeAppResponse;
import org.openapitools.client.model.DescribeArtifactRequest;
import org.openapitools.client.model.DescribeArtifactResponse;
import org.openapitools.client.model.DescribeAutoMLJobRequest;
import org.openapitools.client.model.DescribeAutoMLJobResponse;
import org.openapitools.client.model.DescribeAutoMLJobV2Request;
import org.openapitools.client.model.DescribeAutoMLJobV2Response;
import org.openapitools.client.model.DescribeCodeRepositoryInput;
import org.openapitools.client.model.DescribeCodeRepositoryOutput;
import org.openapitools.client.model.DescribeCompilationJobRequest;
import org.openapitools.client.model.DescribeCompilationJobResponse;
import org.openapitools.client.model.DescribeContextRequest;
import org.openapitools.client.model.DescribeContextResponse;
import org.openapitools.client.model.DescribeDataQualityJobDefinitionRequest;
import org.openapitools.client.model.DescribeDataQualityJobDefinitionResponse;
import org.openapitools.client.model.DescribeDeviceFleetRequest;
import org.openapitools.client.model.DescribeDeviceFleetResponse;
import org.openapitools.client.model.DescribeDeviceRequest;
import org.openapitools.client.model.DescribeDeviceResponse;
import org.openapitools.client.model.DescribeDomainRequest;
import org.openapitools.client.model.DescribeDomainResponse;
import org.openapitools.client.model.DescribeEdgeDeploymentPlanRequest;
import org.openapitools.client.model.DescribeEdgeDeploymentPlanResponse;
import org.openapitools.client.model.DescribeEdgePackagingJobRequest;
import org.openapitools.client.model.DescribeEdgePackagingJobResponse;
import org.openapitools.client.model.DescribeEndpointConfigInput;
import org.openapitools.client.model.DescribeEndpointConfigOutput;
import org.openapitools.client.model.DescribeEndpointInput;
import org.openapitools.client.model.DescribeEndpointOutput;
import org.openapitools.client.model.DescribeExperimentRequest;
import org.openapitools.client.model.DescribeExperimentResponse;
import org.openapitools.client.model.DescribeFeatureGroupRequest;
import org.openapitools.client.model.DescribeFeatureGroupResponse;
import org.openapitools.client.model.DescribeFeatureMetadataRequest;
import org.openapitools.client.model.DescribeFeatureMetadataResponse;
import org.openapitools.client.model.DescribeFlowDefinitionRequest;
import org.openapitools.client.model.DescribeFlowDefinitionResponse;
import org.openapitools.client.model.DescribeHubContentRequest;
import org.openapitools.client.model.DescribeHubContentResponse;
import org.openapitools.client.model.DescribeHubRequest;
import org.openapitools.client.model.DescribeHubResponse;
import org.openapitools.client.model.DescribeHumanTaskUiRequest;
import org.openapitools.client.model.DescribeHumanTaskUiResponse;
import org.openapitools.client.model.DescribeHyperParameterTuningJobRequest;
import org.openapitools.client.model.DescribeHyperParameterTuningJobResponse;
import org.openapitools.client.model.DescribeImageRequest;
import org.openapitools.client.model.DescribeImageResponse;
import org.openapitools.client.model.DescribeImageVersionRequest;
import org.openapitools.client.model.DescribeImageVersionResponse;
import org.openapitools.client.model.DescribeInferenceExperimentRequest;
import org.openapitools.client.model.DescribeInferenceExperimentResponse;
import org.openapitools.client.model.DescribeInferenceRecommendationsJobRequest;
import org.openapitools.client.model.DescribeInferenceRecommendationsJobResponse;
import org.openapitools.client.model.DescribeLabelingJobRequest;
import org.openapitools.client.model.DescribeLabelingJobResponse;
import org.openapitools.client.model.DescribeLineageGroupRequest;
import org.openapitools.client.model.DescribeLineageGroupResponse;
import org.openapitools.client.model.DescribeModelBiasJobDefinitionRequest;
import org.openapitools.client.model.DescribeModelBiasJobDefinitionResponse;
import org.openapitools.client.model.DescribeModelCardExportJobRequest;
import org.openapitools.client.model.DescribeModelCardExportJobResponse;
import org.openapitools.client.model.DescribeModelCardRequest;
import org.openapitools.client.model.DescribeModelCardResponse;
import org.openapitools.client.model.DescribeModelExplainabilityJobDefinitionRequest;
import org.openapitools.client.model.DescribeModelExplainabilityJobDefinitionResponse;
import org.openapitools.client.model.DescribeModelInput;
import org.openapitools.client.model.DescribeModelOutput;
import org.openapitools.client.model.DescribeModelPackageGroupInput;
import org.openapitools.client.model.DescribeModelPackageGroupOutput;
import org.openapitools.client.model.DescribeModelPackageInput;
import org.openapitools.client.model.DescribeModelPackageOutput;
import org.openapitools.client.model.DescribeModelQualityJobDefinitionRequest;
import org.openapitools.client.model.DescribeModelQualityJobDefinitionResponse;
import org.openapitools.client.model.DescribeMonitoringScheduleRequest;
import org.openapitools.client.model.DescribeMonitoringScheduleResponse;
import org.openapitools.client.model.DescribeNotebookInstanceInput;
import org.openapitools.client.model.DescribeNotebookInstanceLifecycleConfigInput;
import org.openapitools.client.model.DescribeNotebookInstanceLifecycleConfigOutput;
import org.openapitools.client.model.DescribeNotebookInstanceOutput;
import org.openapitools.client.model.DescribePipelineDefinitionForExecutionRequest;
import org.openapitools.client.model.DescribePipelineDefinitionForExecutionResponse;
import org.openapitools.client.model.DescribePipelineExecutionRequest;
import org.openapitools.client.model.DescribePipelineExecutionResponse;
import org.openapitools.client.model.DescribePipelineRequest;
import org.openapitools.client.model.DescribePipelineResponse;
import org.openapitools.client.model.DescribeProcessingJobRequest;
import org.openapitools.client.model.DescribeProcessingJobResponse;
import org.openapitools.client.model.DescribeProjectInput;
import org.openapitools.client.model.DescribeProjectOutput;
import org.openapitools.client.model.DescribeSpaceRequest;
import org.openapitools.client.model.DescribeSpaceResponse;
import org.openapitools.client.model.DescribeStudioLifecycleConfigRequest;
import org.openapitools.client.model.DescribeStudioLifecycleConfigResponse;
import org.openapitools.client.model.DescribeSubscribedWorkteamRequest;
import org.openapitools.client.model.DescribeSubscribedWorkteamResponse;
import org.openapitools.client.model.DescribeTrainingJobRequest;
import org.openapitools.client.model.DescribeTrainingJobResponse;
import org.openapitools.client.model.DescribeTransformJobRequest;
import org.openapitools.client.model.DescribeTransformJobResponse;
import org.openapitools.client.model.DescribeTrialComponentRequest;
import org.openapitools.client.model.DescribeTrialComponentResponse;
import org.openapitools.client.model.DescribeTrialRequest;
import org.openapitools.client.model.DescribeTrialResponse;
import org.openapitools.client.model.DescribeUserProfileRequest;
import org.openapitools.client.model.DescribeUserProfileResponse;
import org.openapitools.client.model.DescribeWorkforceRequest;
import org.openapitools.client.model.DescribeWorkforceResponse;
import org.openapitools.client.model.DescribeWorkteamRequest;
import org.openapitools.client.model.DescribeWorkteamResponse;
import org.openapitools.client.model.DisassociateTrialComponentRequest;
import org.openapitools.client.model.DisassociateTrialComponentResponse;
import org.openapitools.client.model.GetDeviceFleetReportRequest;
import org.openapitools.client.model.GetDeviceFleetReportResponse;
import org.openapitools.client.model.GetLineageGroupPolicyRequest;
import org.openapitools.client.model.GetLineageGroupPolicyResponse;
import org.openapitools.client.model.GetModelPackageGroupPolicyInput;
import org.openapitools.client.model.GetModelPackageGroupPolicyOutput;
import org.openapitools.client.model.GetSagemakerServicecatalogPortfolioStatusOutput;
import org.openapitools.client.model.GetScalingConfigurationRecommendationRequest;
import org.openapitools.client.model.GetScalingConfigurationRecommendationResponse;
import org.openapitools.client.model.GetSearchSuggestionsRequest;
import org.openapitools.client.model.GetSearchSuggestionsResponse;
import org.openapitools.client.model.ImportHubContentRequest;
import org.openapitools.client.model.ImportHubContentResponse;
import org.openapitools.client.model.ListActionsRequest;
import org.openapitools.client.model.ListActionsResponse;
import org.openapitools.client.model.ListAlgorithmsInput;
import org.openapitools.client.model.ListAlgorithmsOutput;
import org.openapitools.client.model.ListAliasesRequest;
import org.openapitools.client.model.ListAliasesResponse;
import org.openapitools.client.model.ListAppImageConfigsRequest;
import org.openapitools.client.model.ListAppImageConfigsResponse;
import org.openapitools.client.model.ListAppsRequest;
import org.openapitools.client.model.ListAppsResponse;
import org.openapitools.client.model.ListArtifactsRequest;
import org.openapitools.client.model.ListArtifactsResponse;
import org.openapitools.client.model.ListAssociationsRequest;
import org.openapitools.client.model.ListAssociationsResponse;
import org.openapitools.client.model.ListAutoMLJobsRequest;
import org.openapitools.client.model.ListAutoMLJobsResponse;
import org.openapitools.client.model.ListCandidatesForAutoMLJobRequest;
import org.openapitools.client.model.ListCandidatesForAutoMLJobResponse;
import org.openapitools.client.model.ListCodeRepositoriesInput;
import org.openapitools.client.model.ListCodeRepositoriesOutput;
import org.openapitools.client.model.ListCompilationJobsRequest;
import org.openapitools.client.model.ListCompilationJobsResponse;
import org.openapitools.client.model.ListContextsRequest;
import org.openapitools.client.model.ListContextsResponse;
import org.openapitools.client.model.ListDataQualityJobDefinitionsRequest;
import org.openapitools.client.model.ListDataQualityJobDefinitionsResponse;
import org.openapitools.client.model.ListDeviceFleetsRequest;
import org.openapitools.client.model.ListDeviceFleetsResponse;
import org.openapitools.client.model.ListDevicesRequest;
import org.openapitools.client.model.ListDevicesResponse;
import org.openapitools.client.model.ListDomainsRequest;
import org.openapitools.client.model.ListDomainsResponse;
import org.openapitools.client.model.ListEdgeDeploymentPlansRequest;
import org.openapitools.client.model.ListEdgeDeploymentPlansResponse;
import org.openapitools.client.model.ListEdgePackagingJobsRequest;
import org.openapitools.client.model.ListEdgePackagingJobsResponse;
import org.openapitools.client.model.ListEndpointConfigsInput;
import org.openapitools.client.model.ListEndpointConfigsOutput;
import org.openapitools.client.model.ListEndpointsInput;
import org.openapitools.client.model.ListEndpointsOutput;
import org.openapitools.client.model.ListExperimentsRequest;
import org.openapitools.client.model.ListExperimentsResponse;
import org.openapitools.client.model.ListFeatureGroupsRequest;
import org.openapitools.client.model.ListFeatureGroupsResponse;
import org.openapitools.client.model.ListFlowDefinitionsRequest;
import org.openapitools.client.model.ListFlowDefinitionsResponse;
import org.openapitools.client.model.ListHubContentVersionsRequest;
import org.openapitools.client.model.ListHubContentVersionsResponse;
import org.openapitools.client.model.ListHubContentsRequest;
import org.openapitools.client.model.ListHubContentsResponse;
import org.openapitools.client.model.ListHubsRequest;
import org.openapitools.client.model.ListHubsResponse;
import org.openapitools.client.model.ListHumanTaskUisRequest;
import org.openapitools.client.model.ListHumanTaskUisResponse;
import org.openapitools.client.model.ListHyperParameterTuningJobsRequest;
import org.openapitools.client.model.ListHyperParameterTuningJobsResponse;
import org.openapitools.client.model.ListImageVersionsRequest;
import org.openapitools.client.model.ListImageVersionsResponse;
import org.openapitools.client.model.ListImagesRequest;
import org.openapitools.client.model.ListImagesResponse;
import org.openapitools.client.model.ListInferenceExperimentsRequest;
import org.openapitools.client.model.ListInferenceExperimentsResponse;
import org.openapitools.client.model.ListInferenceRecommendationsJobStepsRequest;
import org.openapitools.client.model.ListInferenceRecommendationsJobStepsResponse;
import org.openapitools.client.model.ListInferenceRecommendationsJobsRequest;
import org.openapitools.client.model.ListInferenceRecommendationsJobsResponse;
import org.openapitools.client.model.ListLabelingJobsForWorkteamRequest;
import org.openapitools.client.model.ListLabelingJobsForWorkteamResponse;
import org.openapitools.client.model.ListLabelingJobsRequest;
import org.openapitools.client.model.ListLabelingJobsResponse;
import org.openapitools.client.model.ListLineageGroupsRequest;
import org.openapitools.client.model.ListLineageGroupsResponse;
import org.openapitools.client.model.ListModelBiasJobDefinitionsRequest;
import org.openapitools.client.model.ListModelBiasJobDefinitionsResponse;
import org.openapitools.client.model.ListModelCardExportJobsRequest;
import org.openapitools.client.model.ListModelCardExportJobsResponse;
import org.openapitools.client.model.ListModelCardVersionsRequest;
import org.openapitools.client.model.ListModelCardVersionsResponse;
import org.openapitools.client.model.ListModelCardsRequest;
import org.openapitools.client.model.ListModelCardsResponse;
import org.openapitools.client.model.ListModelExplainabilityJobDefinitionsRequest;
import org.openapitools.client.model.ListModelExplainabilityJobDefinitionsResponse;
import org.openapitools.client.model.ListModelMetadataRequest;
import org.openapitools.client.model.ListModelMetadataResponse;
import org.openapitools.client.model.ListModelPackageGroupsInput;
import org.openapitools.client.model.ListModelPackageGroupsOutput;
import org.openapitools.client.model.ListModelPackagesInput;
import org.openapitools.client.model.ListModelPackagesOutput;
import org.openapitools.client.model.ListModelQualityJobDefinitionsRequest;
import org.openapitools.client.model.ListModelQualityJobDefinitionsResponse;
import org.openapitools.client.model.ListModelsInput;
import org.openapitools.client.model.ListModelsOutput;
import org.openapitools.client.model.ListMonitoringAlertHistoryRequest;
import org.openapitools.client.model.ListMonitoringAlertHistoryResponse;
import org.openapitools.client.model.ListMonitoringAlertsRequest;
import org.openapitools.client.model.ListMonitoringAlertsResponse;
import org.openapitools.client.model.ListMonitoringExecutionsRequest;
import org.openapitools.client.model.ListMonitoringExecutionsResponse;
import org.openapitools.client.model.ListMonitoringSchedulesRequest;
import org.openapitools.client.model.ListMonitoringSchedulesResponse;
import org.openapitools.client.model.ListNotebookInstanceLifecycleConfigsInput;
import org.openapitools.client.model.ListNotebookInstanceLifecycleConfigsOutput;
import org.openapitools.client.model.ListNotebookInstancesInput;
import org.openapitools.client.model.ListNotebookInstancesOutput;
import org.openapitools.client.model.ListPipelineExecutionStepsRequest;
import org.openapitools.client.model.ListPipelineExecutionStepsResponse;
import org.openapitools.client.model.ListPipelineExecutionsRequest;
import org.openapitools.client.model.ListPipelineExecutionsResponse;
import org.openapitools.client.model.ListPipelineParametersForExecutionRequest;
import org.openapitools.client.model.ListPipelineParametersForExecutionResponse;
import org.openapitools.client.model.ListPipelinesRequest;
import org.openapitools.client.model.ListPipelinesResponse;
import org.openapitools.client.model.ListProcessingJobsRequest;
import org.openapitools.client.model.ListProcessingJobsResponse;
import org.openapitools.client.model.ListProjectsInput;
import org.openapitools.client.model.ListProjectsOutput;
import org.openapitools.client.model.ListResourceCatalogsRequest;
import org.openapitools.client.model.ListResourceCatalogsResponse;
import org.openapitools.client.model.ListSpacesRequest;
import org.openapitools.client.model.ListSpacesResponse;
import org.openapitools.client.model.ListStageDevicesRequest;
import org.openapitools.client.model.ListStageDevicesResponse;
import org.openapitools.client.model.ListStudioLifecycleConfigsRequest;
import org.openapitools.client.model.ListStudioLifecycleConfigsResponse;
import org.openapitools.client.model.ListSubscribedWorkteamsRequest;
import org.openapitools.client.model.ListSubscribedWorkteamsResponse;
import org.openapitools.client.model.ListTagsInput;
import org.openapitools.client.model.ListTagsOutput;
import org.openapitools.client.model.ListTrainingJobsForHyperParameterTuningJobRequest;
import org.openapitools.client.model.ListTrainingJobsForHyperParameterTuningJobResponse;
import org.openapitools.client.model.ListTrainingJobsRequest;
import org.openapitools.client.model.ListTrainingJobsResponse;
import org.openapitools.client.model.ListTransformJobsRequest;
import org.openapitools.client.model.ListTransformJobsResponse;
import org.openapitools.client.model.ListTrialComponentsRequest;
import org.openapitools.client.model.ListTrialComponentsResponse;
import org.openapitools.client.model.ListTrialsRequest;
import org.openapitools.client.model.ListTrialsResponse;
import org.openapitools.client.model.ListUserProfilesRequest;
import org.openapitools.client.model.ListUserProfilesResponse;
import org.openapitools.client.model.ListWorkforcesRequest;
import org.openapitools.client.model.ListWorkforcesResponse;
import org.openapitools.client.model.ListWorkteamsRequest;
import org.openapitools.client.model.ListWorkteamsResponse;
import org.openapitools.client.model.PutModelPackageGroupPolicyInput;
import org.openapitools.client.model.PutModelPackageGroupPolicyOutput;
import org.openapitools.client.model.QueryLineageRequest;
import org.openapitools.client.model.QueryLineageResponse;
import org.openapitools.client.model.RegisterDevicesRequest;
import org.openapitools.client.model.RenderUiTemplateRequest;
import org.openapitools.client.model.RenderUiTemplateResponse;
import org.openapitools.client.model.RetryPipelineExecutionRequest;
import org.openapitools.client.model.RetryPipelineExecutionResponse;
import org.openapitools.client.model.SearchRequest;
import org.openapitools.client.model.SearchResponse;
import org.openapitools.client.model.SendPipelineExecutionStepFailureRequest;
import org.openapitools.client.model.SendPipelineExecutionStepFailureResponse;
import org.openapitools.client.model.SendPipelineExecutionStepSuccessRequest;
import org.openapitools.client.model.SendPipelineExecutionStepSuccessResponse;
import org.openapitools.client.model.StartEdgeDeploymentStageRequest;
import org.openapitools.client.model.StartInferenceExperimentRequest;
import org.openapitools.client.model.StartInferenceExperimentResponse;
import org.openapitools.client.model.StartMonitoringScheduleRequest;
import org.openapitools.client.model.StartNotebookInstanceInput;
import org.openapitools.client.model.StartPipelineExecutionRequest;
import org.openapitools.client.model.StartPipelineExecutionResponse;
import org.openapitools.client.model.StopAutoMLJobRequest;
import org.openapitools.client.model.StopCompilationJobRequest;
import org.openapitools.client.model.StopEdgeDeploymentStageRequest;
import org.openapitools.client.model.StopEdgePackagingJobRequest;
import org.openapitools.client.model.StopHyperParameterTuningJobRequest;
import org.openapitools.client.model.StopInferenceExperimentRequest;
import org.openapitools.client.model.StopInferenceExperimentResponse;
import org.openapitools.client.model.StopInferenceRecommendationsJobRequest;
import org.openapitools.client.model.StopLabelingJobRequest;
import org.openapitools.client.model.StopMonitoringScheduleRequest;
import org.openapitools.client.model.StopNotebookInstanceInput;
import org.openapitools.client.model.StopPipelineExecutionRequest;
import org.openapitools.client.model.StopPipelineExecutionResponse;
import org.openapitools.client.model.StopProcessingJobRequest;
import org.openapitools.client.model.StopTrainingJobRequest;
import org.openapitools.client.model.StopTransformJobRequest;
import org.openapitools.client.model.UpdateActionRequest;
import org.openapitools.client.model.UpdateActionResponse;
import org.openapitools.client.model.UpdateAppImageConfigRequest;
import org.openapitools.client.model.UpdateAppImageConfigResponse;
import org.openapitools.client.model.UpdateArtifactRequest;
import org.openapitools.client.model.UpdateArtifactResponse;
import org.openapitools.client.model.UpdateCodeRepositoryInput;
import org.openapitools.client.model.UpdateCodeRepositoryOutput;
import org.openapitools.client.model.UpdateContextRequest;
import org.openapitools.client.model.UpdateContextResponse;
import org.openapitools.client.model.UpdateDeviceFleetRequest;
import org.openapitools.client.model.UpdateDevicesRequest;
import org.openapitools.client.model.UpdateDomainRequest;
import org.openapitools.client.model.UpdateDomainResponse;
import org.openapitools.client.model.UpdateEndpointInput;
import org.openapitools.client.model.UpdateEndpointOutput;
import org.openapitools.client.model.UpdateEndpointWeightsAndCapacitiesInput;
import org.openapitools.client.model.UpdateEndpointWeightsAndCapacitiesOutput;
import org.openapitools.client.model.UpdateExperimentRequest;
import org.openapitools.client.model.UpdateExperimentResponse;
import org.openapitools.client.model.UpdateFeatureGroupRequest;
import org.openapitools.client.model.UpdateFeatureGroupResponse;
import org.openapitools.client.model.UpdateFeatureMetadataRequest;
import org.openapitools.client.model.UpdateHubRequest;
import org.openapitools.client.model.UpdateHubResponse;
import org.openapitools.client.model.UpdateImageRequest;
import org.openapitools.client.model.UpdateImageResponse;
import org.openapitools.client.model.UpdateImageVersionRequest;
import org.openapitools.client.model.UpdateImageVersionResponse;
import org.openapitools.client.model.UpdateInferenceExperimentRequest;
import org.openapitools.client.model.UpdateInferenceExperimentResponse;
import org.openapitools.client.model.UpdateModelCardRequest;
import org.openapitools.client.model.UpdateModelCardResponse;
import org.openapitools.client.model.UpdateModelPackageInput;
import org.openapitools.client.model.UpdateModelPackageOutput;
import org.openapitools.client.model.UpdateMonitoringAlertRequest;
import org.openapitools.client.model.UpdateMonitoringAlertResponse;
import org.openapitools.client.model.UpdateMonitoringScheduleRequest;
import org.openapitools.client.model.UpdateMonitoringScheduleResponse;
import org.openapitools.client.model.UpdateNotebookInstanceInput;
import org.openapitools.client.model.UpdateNotebookInstanceLifecycleConfigInput;
import org.openapitools.client.model.UpdatePipelineExecutionRequest;
import org.openapitools.client.model.UpdatePipelineExecutionResponse;
import org.openapitools.client.model.UpdatePipelineRequest;
import org.openapitools.client.model.UpdatePipelineResponse;
import org.openapitools.client.model.UpdateProjectInput;
import org.openapitools.client.model.UpdateProjectOutput;
import org.openapitools.client.model.UpdateSpaceRequest;
import org.openapitools.client.model.UpdateSpaceResponse;
import org.openapitools.client.model.UpdateTrainingJobRequest;
import org.openapitools.client.model.UpdateTrainingJobResponse;
import org.openapitools.client.model.UpdateTrialComponentRequest;
import org.openapitools.client.model.UpdateTrialComponentResponse;
import org.openapitools.client.model.UpdateTrialRequest;
import org.openapitools.client.model.UpdateTrialResponse;
import org.openapitools.client.model.UpdateUserProfileRequest;
import org.openapitools.client.model.UpdateUserProfileResponse;
import org.openapitools.client.model.UpdateWorkforceRequest;
import org.openapitools.client.model.UpdateWorkforceResponse;
import org.openapitools.client.model.UpdateWorkteamRequest;
import org.openapitools.client.model.UpdateWorkteamResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates an &lt;i&gt;association&lt;/i&gt; between the source and the destination. A source can be associated with multiple destinations, and a destination can be associated with multiple sources. An association is a lineage tracking entity. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\&quot;&gt;Amazon SageMaker ML Lineage Tracking&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAssociationTest() throws ApiException {
        String xAmzTarget = null;
        AddAssociationRequest addAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddAssociationResponse response = api.addAssociation(xAmzTarget, addAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds or overwrites one or more tags for the specified SageMaker resource. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/answers/account-management/aws-tagging-strategies/\&quot;&gt;Amazon Web Services Tagging Strategies&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Tags that you add to a hyperparameter tuning job by calling this API are also added to any training jobs that the hyperparameter tuning job launches after you call this API, but not to training jobs that the hyperparameter tuning job launched before you called this API. To make sure that the tags associated with a hyperparameter tuning job are also added to all training jobs that the hyperparameter tuning job launches, add the tags when you first create the tuning job by specifying them in the &lt;code&gt;Tags&lt;/code&gt; parameter of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html\&quot;&gt;CreateHyperParameterTuningJob&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Tags that you add to a SageMaker Studio Domain or User Profile by calling this API are also added to any Apps that the Domain or User Profile launches after you call this API, but not to Apps that the Domain or User Profile launched before you called this API. To make sure that the tags associated with a Domain or User Profile are also added to all Apps that the Domain or User Profile launches, add the tags when you first create the Domain or User Profile by specifying them in the &lt;code&gt;Tags&lt;/code&gt; parameter of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html\&quot;&gt;CreateDomain&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html\&quot;&gt;CreateUserProfile&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTagsTest() throws ApiException {
        String xAmzTarget = null;
        AddTagsInput addTagsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddTagsOutput response = api.addTags(xAmzTarget, addTagsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a trial component with a trial. A trial component can be associated with multiple trials. To disassociate a trial component from a trial, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html\&quot;&gt;DisassociateTrialComponent&lt;/a&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateTrialComponentTest() throws ApiException {
        String xAmzTarget = null;
        AssociateTrialComponentRequest associateTrialComponentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateTrialComponentResponse response = api.associateTrialComponent(xAmzTarget, associateTrialComponentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This action batch describes a list of versioned model packages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDescribeModelPackageTest() throws ApiException {
        String xAmzTarget = null;
        BatchDescribeModelPackageInput batchDescribeModelPackageInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDescribeModelPackageOutput response = api.batchDescribeModelPackage(xAmzTarget, batchDescribeModelPackageInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an &lt;i&gt;action&lt;/i&gt;. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\&quot;&gt;Amazon SageMaker ML Lineage Tracking&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createActionTest() throws ApiException {
        String xAmzTarget = null;
        CreateActionRequest createActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateActionResponse response = api.createAction(xAmzTarget, createActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAlgorithmTest() throws ApiException {
        String xAmzTarget = null;
        CreateAlgorithmInput createAlgorithmInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAlgorithmOutput response = api.createAlgorithm(xAmzTarget, createAlgorithmInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a running app for the specified UserProfile. This operation is automatically invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppTest() throws ApiException {
        String xAmzTarget = null;
        CreateAppRequest createAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAppResponse response = api.createApp(xAmzTarget, createAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppImageConfigTest() throws ApiException {
        String xAmzTarget = null;
        CreateAppImageConfigRequest createAppImageConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAppImageConfigResponse response = api.createAppImageConfig(xAmzTarget, createAppImageConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an &lt;i&gt;artifact&lt;/i&gt;. An artifact is a lineage tracking entity that represents a URI addressable object or data. Some examples are the S3 URI of a dataset and the ECR registry path of an image. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\&quot;&gt;Amazon SageMaker ML Lineage Tracking&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createArtifactTest() throws ApiException {
        String xAmzTarget = null;
        CreateArtifactRequest createArtifactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateArtifactResponse response = api.createArtifact(xAmzTarget, createArtifactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Autopilot job also referred to as Autopilot experiment or AutoML job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend using the new versions &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\&quot;&gt;CreateAutoMLJobV2&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\&quot;&gt;DescribeAutoMLJobV2&lt;/a&gt;, which offer backward compatibility.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt; can manage tabular problem types identical to those of its previous version &lt;code&gt;CreateAutoMLJob&lt;/code&gt;, as well as non-tabular problem types such as image or text classification.&lt;/p&gt; &lt;p&gt;Find guidelines about how to migrate a &lt;code&gt;CreateAutoMLJob&lt;/code&gt; to &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2\&quot;&gt;Migrate a CreateAutoMLJob to CreateAutoMLJobV2&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can find the best-performing model after you run an AutoML job by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\&quot;&gt;DescribeAutoMLJobV2&lt;/a&gt; (recommended) or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html\&quot;&gt;DescribeAutoMLJob&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAutoMLJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateAutoMLJobRequest createAutoMLJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAutoMLJobResponse response = api.createAutoMLJob(xAmzTarget, createAutoMLJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Autopilot job also referred to as Autopilot experiment or AutoML job V2.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\&quot;&gt;CreateAutoMLJobV2&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\&quot;&gt;DescribeAutoMLJobV2&lt;/a&gt; are new versions of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html\&quot;&gt;CreateAutoMLJob&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html\&quot;&gt;DescribeAutoMLJob&lt;/a&gt; which offer backward compatibility.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt; can manage tabular problem types identical to those of its previous version &lt;code&gt;CreateAutoMLJob&lt;/code&gt;, as well as non-tabular problem types such as image or text classification.&lt;/p&gt; &lt;p&gt;Find guidelines about how to migrate a &lt;code&gt;CreateAutoMLJob&lt;/code&gt; to &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt; in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2\&quot;&gt;Migrate a CreateAutoMLJob to CreateAutoMLJobV2&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For the list of available problem types supported by &lt;code&gt;CreateAutoMLJobV2&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLProblemTypeConfig.html\&quot;&gt;AutoMLProblemTypeConfig&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can find the best-performing model after you run an AutoML job V2 by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html\&quot;&gt;DescribeAutoMLJobV2&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAutoMLJobV2Test() throws ApiException {
        String xAmzTarget = null;
        CreateAutoMLJobV2Request createAutoMLJobV2Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAutoMLJobV2Response response = api.createAutoMLJobV2(xAmzTarget, createAutoMLJobV2Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a Git repository as a resource in your SageMaker account. You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with.&lt;/p&gt; &lt;p&gt;The repository can be hosted either in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\&quot;&gt;Amazon Web Services CodeCommit&lt;/a&gt; or in any other Git repository.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCodeRepositoryTest() throws ApiException {
        String xAmzTarget = null;
        CreateCodeRepositoryInput createCodeRepositoryInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCodeRepositoryOutput response = api.createCodeRepository(xAmzTarget, createCodeRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. &lt;/p&gt; &lt;p&gt;If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with Amazon Web Services IoT Greengrass. In that case, deploy them as an ML resource.&lt;/p&gt; &lt;p&gt;In the request body, you provide the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name for the compilation job&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; Information about the input model artifacts &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The output location for the compiled model and the device (target) that the model runs on &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can also provide a &lt;code&gt;Tag&lt;/code&gt; to track the model compilation job&#39;s resource use and costs. The response body contains the &lt;code&gt;CompilationJobArn&lt;/code&gt; for the compiled job.&lt;/p&gt; &lt;p&gt;To stop a model compilation job, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopCompilationJob.html\&quot;&gt;StopCompilationJob&lt;/a&gt;. To get information about a particular model compilation job, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html\&quot;&gt;DescribeCompilationJob&lt;/a&gt;. To get information about multiple model compilation jobs, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html\&quot;&gt;ListCompilationJobs&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompilationJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateCompilationJobRequest createCompilationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCompilationJobResponse response = api.createCompilationJob(xAmzTarget, createCompilationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a &lt;i&gt;context&lt;/i&gt;. A context is a lineage tracking entity that represents a logical grouping of other tracking or experiment entities. Some examples are an endpoint and a model package. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html\&quot;&gt;Amazon SageMaker ML Lineage Tracking&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContextTest() throws ApiException {
        String xAmzTarget = null;
        CreateContextRequest createContextRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContextResponse response = api.createContext(xAmzTarget, createContextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a definition for a job that monitors data quality and drift. For information about model monitor, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html\&quot;&gt;Amazon SageMaker Model Monitor&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataQualityJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        CreateDataQualityJobDefinitionRequest createDataQualityJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataQualityJobDefinitionResponse response = api.createDataQualityJobDefinition(xAmzTarget, createDataQualityJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a device fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceFleetTest() throws ApiException {
        String xAmzTarget = null;
        CreateDeviceFleetRequest createDeviceFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.createDeviceFleet(xAmzTarget, createDeviceFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a &lt;code&gt;Domain&lt;/code&gt; used by Amazon SageMaker Studio. A domain consists of an associated Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. Users within a domain can share notebook files and other artifacts with each other.&lt;/p&gt; &lt;p&gt; &lt;b&gt;EFS storage&lt;/b&gt; &lt;/p&gt; &lt;p&gt;When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files.&lt;/p&gt; &lt;p&gt;SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, you can specify a customer managed key. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html\&quot;&gt;Protect Data at Rest Using Encryption&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;VPC configuration&lt;/b&gt; &lt;/p&gt; &lt;p&gt;All SageMaker Studio traffic between the domain and the EFS volume is through the specified VPC and subnets. For other Studio traffic, you can specify the &lt;code&gt;AppNetworkAccessType&lt;/code&gt; parameter. &lt;code&gt;AppNetworkAccessType&lt;/code&gt; corresponds to the network access type that you choose when you onboard to Studio. The following options are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PublicInternetOnly&lt;/code&gt; - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VpcOnly&lt;/code&gt; - All Studio traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway.&lt;/p&gt; &lt;p&gt;When internet access is disabled, you won&#39;t be able to run a Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt;NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a SageMaker Studio app successfully.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html\&quot;&gt;Connect SageMaker Studio Notebooks to Resources in a VPC&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDomainTest() throws ApiException {
        String xAmzTarget = null;
        CreateDomainRequest createDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDomainResponse response = api.createDomain(xAmzTarget, createDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEdgeDeploymentPlanTest() throws ApiException {
        String xAmzTarget = null;
        CreateEdgeDeploymentPlanRequest createEdgeDeploymentPlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEdgeDeploymentPlanResponse response = api.createEdgeDeploymentPlan(xAmzTarget, createEdgeDeploymentPlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new stage in an existing edge deployment plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEdgeDeploymentStageTest() throws ApiException {
        String xAmzTarget = null;
        CreateEdgeDeploymentStageRequest createEdgeDeploymentStageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.createEdgeDeploymentStage(xAmzTarget, createEdgeDeploymentStageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEdgePackagingJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateEdgePackagingJobRequest createEdgePackagingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.createEdgePackagingJob(xAmzTarget, createEdgePackagingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an endpoint using the endpoint configuration specified in the request. SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html\&quot;&gt;CreateEndpointConfig&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt; Use this API to deploy models using SageMaker hosting services. &lt;/p&gt; &lt;p&gt;For an example that calls this method when deploying a model to SageMaker hosting services, see the &lt;a href&#x3D;\&quot;https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb\&quot;&gt;Create Endpoint example notebook.&lt;/a&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt; You must not delete an &lt;code&gt;EndpointConfig&lt;/code&gt; that is in use by an endpoint that is live or while the &lt;code&gt;UpdateEndpoint&lt;/code&gt; or &lt;code&gt;CreateEndpoint&lt;/code&gt; operations are being performed on the endpoint. To update an endpoint, you must create a new &lt;code&gt;EndpointConfig&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. &lt;/p&gt; &lt;p&gt;When it receives the request, SageMaker creates the endpoint, launches the resources (ML compute instances), and deploys the model(s) on them. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt;, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html\&quot;&gt; &lt;code&gt;Eventually Consistent Reads&lt;/code&gt; &lt;/a&gt;, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html\&quot;&gt;DescribeEndpointConfig&lt;/a&gt; before calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; to minimize the potential impact of a DynamoDB eventually consistent read.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;When SageMaker receives the request, it sets the endpoint status to &lt;code&gt;Creating&lt;/code&gt;. After it creates the endpoint, it sets the status to &lt;code&gt;InService&lt;/code&gt;. SageMaker can then process incoming requests for inferences. To check the status of an endpoint, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html\&quot;&gt;DescribeEndpoint&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If any of the models hosted at this endpoint get model data from an Amazon S3 location, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provided. Amazon Web Services STS is activated in your Amazon Web Services account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html\&quot;&gt;Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; To add the IAM role policies for using this API operation, go to the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/iam/\&quot;&gt;IAM console&lt;/a&gt;, and choose Roles in the left navigation pane. Search the IAM role that you want to grant access to use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html\&quot;&gt;CreateEndpointConfig&lt;/a&gt; API operations, add the following policies to the role. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Option 1: For a full SageMaker access, search and attach the &lt;code&gt;AmazonSageMakerFullAccess&lt;/code&gt; policy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Option 2: For granting a limited access to an IAM role, paste the following Action elements manually into the JSON file of the IAM role: &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Action\&quot;: [\&quot;sagemaker:CreateEndpoint\&quot;, \&quot;sagemaker:CreateEndpointConfig\&quot;]&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Resource\&quot;: [&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;arn:aws:sagemaker:region:account-id:endpoint/endpointName\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;]&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html\&quot;&gt;SageMaker API Permissions: Actions, Permissions, and Resources Reference&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEndpointTest() throws ApiException {
        String xAmzTarget = null;
        CreateEndpointInput createEndpointInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEndpointOutput response = api.createEndpoint(xAmzTarget, createEndpointInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In the configuration, you identify one or more models, created using the &lt;code&gt;CreateModel&lt;/code&gt; API, to deploy and the resources that you want SageMaker to provision. Then you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; API.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Use this API if you want to use SageMaker hosting services to deploy models into production. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;In the request, you define a &lt;code&gt;ProductionVariant&lt;/code&gt;, for each model that you want to deploy. Each &lt;code&gt;ProductionVariant&lt;/code&gt; parameter also describes the resources that you want SageMaker to provision. This includes the number and type of ML compute instances to deploy. &lt;/p&gt; &lt;p&gt;If you are hosting multiple models, you also assign a &lt;code&gt;VariantWeight&lt;/code&gt; to specify how much traffic you want to allocate to each model. For example, suppose that you want to host two models, A and B, and you assign traffic weight 2 for model A and 1 for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to model B. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt;, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html\&quot;&gt; &lt;code&gt;Eventually Consistent Reads&lt;/code&gt; &lt;/a&gt;, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html\&quot;&gt;DescribeEndpointConfig&lt;/a&gt; before calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; to minimize the potential impact of a DynamoDB eventually consistent read.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEndpointConfigTest() throws ApiException {
        String xAmzTarget = null;
        CreateEndpointConfigInput createEndpointConfigInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEndpointConfigOutput response = api.createEndpointConfig(xAmzTarget, createEndpointConfigInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a SageMaker &lt;i&gt;experiment&lt;/i&gt;. An experiment is a collection of &lt;i&gt;trials&lt;/i&gt; that are observed, compared and evaluated as a group. A trial is a set of steps, called &lt;i&gt;trial components&lt;/i&gt;, that produce a machine learning model.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the Studio UI, trials are referred to as &lt;i&gt;run groups&lt;/i&gt; and trial components are referred to as &lt;i&gt;runs&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The goal of an experiment is to determine the components that produce the best model. Multiple trials are performed, each one isolating and measuring the impact of a change to one or more inputs, while keeping the remaining inputs constant.&lt;/p&gt; &lt;p&gt;When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.&lt;/p&gt; &lt;p&gt;You can add tags to experiments, trials, trial components and then use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API to search for the tags.&lt;/p&gt; &lt;p&gt;To add a description to an experiment, specify the optional &lt;code&gt;Description&lt;/code&gt; parameter. To add a description later, or to change the description, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateExperiment.html\&quot;&gt;UpdateExperiment&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;To get a list of all your experiments, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListExperiments.html\&quot;&gt;ListExperiments&lt;/a&gt; API. To view an experiment&#39;s properties, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html\&quot;&gt;DescribeExperiment&lt;/a&gt; API. To get a list of all the trials associated with an experiment, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html\&quot;&gt;ListTrials&lt;/a&gt; API. To create a trial call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrial.html\&quot;&gt;CreateTrial&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExperimentTest() throws ApiException {
        String xAmzTarget = null;
        CreateExperimentRequest createExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateExperimentResponse response = api.createExperiment(xAmzTarget, createExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create a new &lt;code&gt;FeatureGroup&lt;/code&gt;. A &lt;code&gt;FeatureGroup&lt;/code&gt; is a group of &lt;code&gt;Features&lt;/code&gt; defined in the &lt;code&gt;FeatureStore&lt;/code&gt; to describe a &lt;code&gt;Record&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;FeatureGroup&lt;/code&gt; defines the schema and features contained in the FeatureGroup. A &lt;code&gt;FeatureGroup&lt;/code&gt; definition is composed of a list of &lt;code&gt;Features&lt;/code&gt;, a &lt;code&gt;RecordIdentifierFeatureName&lt;/code&gt;, an &lt;code&gt;EventTimeFeatureName&lt;/code&gt; and configurations for its &lt;code&gt;OnlineStore&lt;/code&gt; and &lt;code&gt;OfflineStore&lt;/code&gt;. Check &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Web Services service quotas&lt;/a&gt; to see the &lt;code&gt;FeatureGroup&lt;/code&gt;s quota for your Amazon Web Services account.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must include at least one of &lt;code&gt;OnlineStoreConfig&lt;/code&gt; and &lt;code&gt;OfflineStoreConfig&lt;/code&gt; to create a &lt;code&gt;FeatureGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFeatureGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateFeatureGroupRequest createFeatureGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFeatureGroupResponse response = api.createFeatureGroup(xAmzTarget, createFeatureGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a flow definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFlowDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        CreateFlowDefinitionRequest createFlowDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFlowDefinitionResponse response = api.createFlowDefinition(xAmzTarget, createFlowDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHubTest() throws ApiException {
        String xAmzTarget = null;
        CreateHubRequest createHubRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateHubResponse response = api.createHub(xAmzTarget, createHubRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHumanTaskUiTest() throws ApiException {
        String xAmzTarget = null;
        CreateHumanTaskUiRequest createHumanTaskUiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateHumanTaskUiResponse response = api.createHumanTaskUi(xAmzTarget, createHumanTaskUiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version of a model by running many training jobs on your dataset using the algorithm you choose and values for hyperparameters within ranges that you specify. It then chooses the hyperparameter values that result in a model that performs the best, as measured by an objective metric that you choose.&lt;/p&gt; &lt;p&gt;A hyperparameter tuning job automatically creates Amazon SageMaker experiments, trials, and trial components for each training job that it runs. You can view these entities in Amazon SageMaker Studio. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/experiments-view-compare.html#experiments-view\&quot;&gt;View Experiments, Trials, and Trial Components&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHyperParameterTuningJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateHyperParameterTuningJobRequest createHyperParameterTuningJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateHyperParameterTuningJobResponse response = api.createHyperParameterTuningJob(xAmzTarget, createHyperParameterTuningJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html\&quot;&gt;Bring your own SageMaker image&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImageTest() throws ApiException {
        String xAmzTarget = null;
        CreateImageRequest createImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateImageResponse response = api.createImage(xAmzTarget, createImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a version of the SageMaker image specified by &lt;code&gt;ImageName&lt;/code&gt;. The version represents the Amazon Elastic Container Registry (ECR) container image specified by &lt;code&gt;BaseImage&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImageVersionTest() throws ApiException {
        String xAmzTarget = null;
        CreateImageVersionRequest createImageVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateImageVersionResponse response = api.createImageVersion(xAmzTarget, createImageVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Creates an inference experiment using the configurations specified in the request. &lt;/p&gt; &lt;p&gt; Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html\&quot;&gt;Shadow tests&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint&#39;s model variants based on your specified configuration. &lt;/p&gt; &lt;p&gt; While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html\&quot;&gt;View, monitor, and edit shadow tests&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInferenceExperimentTest() throws ApiException {
        String xAmzTarget = null;
        CreateInferenceExperimentRequest createInferenceExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInferenceExperimentResponse response = api.createInferenceExperiment(xAmzTarget, createInferenceExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a recommendation job. You can create either an instance recommendation or load test job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInferenceRecommendationsJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateInferenceRecommendationsJobRequest createInferenceRecommendationsJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInferenceRecommendationsJobResponse response = api.createInferenceRecommendationsJob(xAmzTarget, createInferenceRecommendationsJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a job that uses workers to label the data objects in your input dataset. You can use the labeled data to train machine learning models. &lt;/p&gt; &lt;p&gt;You can select your workforce from one of three providers:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A private workforce that you create. It can include employees, contractors, and outside experts. Use a private workforce when want the data to stay within your organization or when a specific set of skills is required.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide expertise in specific areas. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Amazon Mechanical Turk workforce. This is the largest workforce, but it should only be used for public data or data that has been stripped of any personally identifiable information.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can also use &lt;i&gt;automated data labeling&lt;/i&gt; to reduce the number of data objects that need to be labeled by a human. Automated data labeling uses &lt;i&gt;active learning&lt;/i&gt; to determine if a data object can be labeled by machine or if it needs to be sent to a human worker. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html\&quot;&gt;Using Automated Data Labeling&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The data objects to be labeled are contained in an Amazon S3 bucket. You create a &lt;i&gt;manifest file&lt;/i&gt; that describes the location of each object. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html\&quot;&gt;Using Input and Output Data&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The output can be used as the manifest file for another labeling job or as training data for your machine learning models.&lt;/p&gt; &lt;p&gt;You can use this operation to create a static labeling job or a streaming labeling job. A static labeling job stops if all data objects in the input manifest file identified in &lt;code&gt;ManifestS3Uri&lt;/code&gt; have been labeled. A streaming labeling job runs perpetually until it is manually stopped, or remains idle for 10 days. You can send new data objects to an active (&lt;code&gt;InProgress&lt;/code&gt;) streaming labeling job in real time. To learn how to create a static labeling job, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html\&quot;&gt;Create a Labeling Job (API) &lt;/a&gt; in the Amazon SageMaker Developer Guide. To learn how to create a streaming labeling job, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html\&quot;&gt;Create a Streaming Labeling Job&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLabelingJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateLabelingJobRequest createLabelingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLabelingJobResponse response = api.createLabelingJob(xAmzTarget, createLabelingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a model in SageMaker. In the request, you name the model and describe a primary container. For the primary container, you specify the Docker image that contains inference code, artifacts (from prior training), and a custom environment map that the inference code uses when you deploy the model for predictions.&lt;/p&gt; &lt;p&gt;Use this API to create a model if you want to use SageMaker hosting services or run a batch transform job.&lt;/p&gt; &lt;p&gt;To host your model, you create an endpoint configuration with the &lt;code&gt;CreateEndpointConfig&lt;/code&gt; API, and then create an endpoint with the &lt;code&gt;CreateEndpoint&lt;/code&gt; API. SageMaker then deploys all of the containers that you defined for the model in the hosting environment. &lt;/p&gt; &lt;p&gt;For an example that calls this method when deploying a model to SageMaker hosting services, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model\&quot;&gt;Create a Model (Amazon Web Services SDK for Python (Boto 3)).&lt;/a&gt; &lt;/p&gt; &lt;p&gt;To run a batch transform using your model, you start a job with the &lt;code&gt;CreateTransformJob&lt;/code&gt; API. SageMaker uses your model and your dataset to get inferences which are then saved to a specified S3 location.&lt;/p&gt; &lt;p&gt;In the request, you also provide an IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute hosting instances or for batch transform jobs. In addition, you also use the IAM role to manage permissions the inference code needs. For example, if the inference code access any other Amazon Web Services resources, you grant necessary permissions via this role.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelInput createModelInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelOutput response = api.createModel(xAmzTarget, createModelInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates the definition for a model bias job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelBiasJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelBiasJobDefinitionRequest createModelBiasJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelBiasJobDefinitionResponse response = api.createModelBiasJobDefinition(xAmzTarget, createModelBiasJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon SageMaker Model Card.&lt;/p&gt; &lt;p&gt;For information about how to use model cards, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html\&quot;&gt;Amazon SageMaker Model Card&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelCardTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelCardRequest createModelCardRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelCardResponse response = api.createModelCard(xAmzTarget, createModelCardRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Amazon SageMaker Model Card export job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelCardExportJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelCardExportJobRequest createModelCardExportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelCardExportJobResponse response = api.createModelCardExportJob(xAmzTarget, createModelCardExportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates the definition for a model explainability job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelExplainabilityJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelExplainabilityJobDefinitionRequest createModelExplainabilityJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelExplainabilityJobDefinitionResponse response = api.createModelExplainabilityJobDefinition(xAmzTarget, createModelExplainabilityJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.&lt;/p&gt; &lt;p&gt;To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for &lt;code&gt;InferenceSpecification&lt;/code&gt;. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for &lt;code&gt;SourceAlgorithmSpecification&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;There are two types of model packages:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Versioned - a model that is part of a model group in the model registry.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Unversioned - a model package that is not part of a model group.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelPackageTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelPackageInput createModelPackageInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelPackageOutput response = api.createModelPackage(xAmzTarget, createModelPackageInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a model group. A model group contains a group of model versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelPackageGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelPackageGroupInput createModelPackageGroupInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelPackageGroupOutput response = api.createModelPackageGroup(xAmzTarget, createModelPackageGroupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a definition for a job that monitors model quality and drift. For information about model monitor, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html\&quot;&gt;Amazon SageMaker Model Monitor&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelQualityJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        CreateModelQualityJobDefinitionRequest createModelQualityJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelQualityJobDefinitionResponse response = api.createModelQualityJobDefinition(xAmzTarget, createModelQualityJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data captured for an Amazon SageMaker Endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMonitoringScheduleTest() throws ApiException {
        String xAmzTarget = null;
        CreateMonitoringScheduleRequest createMonitoringScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMonitoringScheduleResponse response = api.createMonitoringSchedule(xAmzTarget, createMonitoringScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook. &lt;/p&gt; &lt;p&gt;In a &lt;code&gt;CreateNotebookInstance&lt;/code&gt; request, specify the type of ML compute instance that you want to run. SageMaker launches the instance, installs common libraries that you can use to explore datasets for model training, and attaches an ML storage volume to the notebook instance. &lt;/p&gt; &lt;p&gt;SageMaker also provides a set of example notebooks. Each notebook demonstrates how to use SageMaker with a specific algorithm or with a machine learning framework. &lt;/p&gt; &lt;p&gt;After receiving the request, SageMaker does the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Creates a network interface in the SageMaker VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Option) If you specified &lt;code&gt;SubnetId&lt;/code&gt;, SageMaker creates a network interface in your own VPC, which is inferred from the subnet ID that you provide in the input. When creating this network interface, SageMaker attaches the security group that you specified in the request to the network interface that it creates in your VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Launches an EC2 instance of the type specified in the request in the SageMaker VPC. If you specified &lt;code&gt;SubnetId&lt;/code&gt; of your VPC, SageMaker specifies both network interfaces when launching this instance. This enables inbound traffic from your own VPC to the notebook instance, assuming that the security groups allow it.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN). You can&#39;t change the name of a notebook instance after you create it.&lt;/p&gt; &lt;p&gt;After SageMaker creates the notebook instance, you can connect to the Jupyter server and work in Jupyter notebooks. For example, you can write code to explore a dataset that you can use for model training, train a model, host models by creating SageMaker endpoints, and validate hosted models. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html\&quot;&gt;How It Works&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNotebookInstanceTest() throws ApiException {
        String xAmzTarget = null;
        CreateNotebookInstanceInput createNotebookInstanceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateNotebookInstanceOutput response = api.createNotebookInstance(xAmzTarget, createNotebookInstanceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a lifecycle configuration that you can associate with a notebook instance. A &lt;i&gt;lifecycle configuration&lt;/i&gt; is a collection of shell scripts that run when you create or start a notebook instance.&lt;/p&gt; &lt;p&gt;Each lifecycle configuration script has a limit of 16384 characters.&lt;/p&gt; &lt;p&gt;The value of the &lt;code&gt;$PATH&lt;/code&gt; environment variable that is available to both scripts is &lt;code&gt;/sbin:bin:/usr/sbin:/usr/bin&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;View CloudWatch Logs for notebook instance lifecycle configurations in log group &lt;code&gt;/aws/sagemaker/NotebookInstances&lt;/code&gt; in log stream &lt;code&gt;[notebook-instance-name]/[LifecycleConfigHook]&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.&lt;/p&gt; &lt;p&gt;For information about notebook instance lifestyle configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\&quot;&gt;Step 2.1: (Optional) Customize a Notebook Instance&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNotebookInstanceLifecycleConfigTest() throws ApiException {
        String xAmzTarget = null;
        CreateNotebookInstanceLifecycleConfigInput createNotebookInstanceLifecycleConfigInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateNotebookInstanceLifecycleConfigOutput response = api.createNotebookInstanceLifecycleConfig(xAmzTarget, createNotebookInstanceLifecycleConfigInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a pipeline using a JSON pipeline definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPipelineTest() throws ApiException {
        String xAmzTarget = null;
        CreatePipelineRequest createPipelineRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePipelineResponse response = api.createPipeline(xAmzTarget, createPipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a URL for a specified UserProfile in a Domain. When accessed in a web browser, the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of the Apps and files associated with the Domain&#39;s Amazon Elastic File System (EFS) volume. This operation can only be called when the authentication mode equals IAM. &lt;/p&gt; &lt;p&gt;The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app.&lt;/p&gt; &lt;p&gt;You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html\&quot;&gt;Connect to SageMaker Studio Through an Interface VPC Endpoint&lt;/a&gt; .&lt;/p&gt; &lt;note&gt; &lt;p&gt;The URL that you get from a call to &lt;code&gt;CreatePresignedDomainUrl&lt;/code&gt; has a default timeout of 5 minutes. You can configure this value using &lt;code&gt;ExpiresInSeconds&lt;/code&gt;. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPresignedDomainUrlTest() throws ApiException {
        String xAmzTarget = null;
        CreatePresignedDomainUrlRequest createPresignedDomainUrlRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePresignedDomainUrlResponse response = api.createPresignedDomainUrl(xAmzTarget, createPresignedDomainUrlRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose &lt;code&gt;Open&lt;/code&gt; next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page.&lt;/p&gt; &lt;p&gt; The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance.&lt;/p&gt; &lt;p&gt;You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the &lt;code&gt;NotIpAddress&lt;/code&gt; condition operator and the &lt;code&gt;aws:SourceIP&lt;/code&gt; condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter\&quot;&gt;Limit Access to a Notebook Instance by IP Address&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The URL that you get from a call to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreatePresignedNotebookInstanceUrl.html\&quot;&gt;CreatePresignedNotebookInstanceUrl&lt;/a&gt; is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPresignedNotebookInstanceUrlTest() throws ApiException {
        String xAmzTarget = null;
        CreatePresignedNotebookInstanceUrlInput createPresignedNotebookInstanceUrlInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePresignedNotebookInstanceUrlOutput response = api.createPresignedNotebookInstanceUrl(xAmzTarget, createPresignedNotebookInstanceUrlInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a processing job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProcessingJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateProcessingJobRequest createProcessingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProcessingJobResponse response = api.createProcessingJob(xAmzTarget, createProcessingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        String xAmzTarget = null;
        CreateProjectInput createProjectInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProjectOutput response = api.createProject(xAmzTarget, createProjectInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a space used for real time collaboration in a Domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSpaceTest() throws ApiException {
        String xAmzTarget = null;
        CreateSpaceRequest createSpaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSpaceResponse response = api.createSpace(xAmzTarget, createSpaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new Studio Lifecycle Configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStudioLifecycleConfigTest() throws ApiException {
        String xAmzTarget = null;
        CreateStudioLifecycleConfigRequest createStudioLifecycleConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStudioLifecycleConfigResponse response = api.createStudioLifecycleConfig(xAmzTarget, createStudioLifecycleConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a model training job. After training completes, SageMaker saves the resulting model artifacts to an Amazon S3 location that you specify. &lt;/p&gt; &lt;p&gt;If you choose to host your model using SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts in a machine learning service other than SageMaker, provided that you know how to use them for inference. &lt;/p&gt; &lt;p&gt;In the request body, you provide the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlgorithmSpecification&lt;/code&gt; - Identifies the training algorithm to use. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HyperParameters&lt;/code&gt; - Specify these algorithm-specific parameters to enable the estimation of model parameters during training. Hyperparameters can be tuned to optimize this learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\&quot;&gt;Algorithms&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InputDataConfig&lt;/code&gt; - Describes the input required by the training job and the Amazon S3, EFS, or FSx location where it is stored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OutputDataConfig&lt;/code&gt; - Identifies the Amazon S3 bucket where you want SageMaker to save the results of model training. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ResourceConfig&lt;/code&gt; - Identifies the resources, ML compute instances, and ML storage volumes to deploy for model training. In distributed training, you specify more than one instance. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EnableManagedSpotTraining&lt;/code&gt; - Optimize the cost of training machine learning models by up to 80% by using Amazon EC2 Spot instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html\&quot;&gt;Managed Spot Training&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RoleArn&lt;/code&gt; - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during model training. You must grant this role the necessary permissions so that SageMaker can successfully complete model training. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StoppingCondition&lt;/code&gt; - To help cap training costs, use &lt;code&gt;MaxRuntimeInSeconds&lt;/code&gt; to set a time limit for training. Use &lt;code&gt;MaxWaitTimeInSeconds&lt;/code&gt; to specify how long a managed spot training job has to complete. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Environment&lt;/code&gt; - The environment variables to set in the Docker container.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RetryStrategy&lt;/code&gt; - The number of times to retry the job when the job fails due to an &lt;code&gt;InternalServerError&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information about SageMaker, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html\&quot;&gt;How It Works&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrainingJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateTrainingJobRequest createTrainingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTrainingJobResponse response = api.createTrainingJob(xAmzTarget, createTrainingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a transform job. A transform job uses a trained model to get inferences on a dataset and saves these results to an Amazon S3 location that you specify.&lt;/p&gt; &lt;p&gt;To perform batch transformations, you create a transform job and use the data that you have readily available.&lt;/p&gt; &lt;p&gt;In the request body, you provide the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TransformJobName&lt;/code&gt; - Identifies the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ModelName&lt;/code&gt; - Identifies the model to use. &lt;code&gt;ModelName&lt;/code&gt; must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services account. For information on creating a model, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html\&quot;&gt;CreateModel&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TransformInput&lt;/code&gt; - Describes the dataset to be transformed and the Amazon S3 location where it is stored.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TransformOutput&lt;/code&gt; - Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TransformResources&lt;/code&gt; - Identifies the ML compute instances for the transform job.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how batch transformation works, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html\&quot;&gt;Batch Transform&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransformJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateTransformJobRequest createTransformJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTransformJobResponse response = api.createTransformJob(xAmzTarget, createTransformJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an SageMaker &lt;i&gt;trial&lt;/i&gt;. A trial is a set of steps called &lt;i&gt;trial components&lt;/i&gt; that produce a machine learning model. A trial is part of a single SageMaker &lt;i&gt;experiment&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.&lt;/p&gt; &lt;p&gt;You can add tags to a trial and then use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API to search for the tags.&lt;/p&gt; &lt;p&gt;To get a list of all your trials, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html\&quot;&gt;ListTrials&lt;/a&gt; API. To view a trial&#39;s properties, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html\&quot;&gt;DescribeTrial&lt;/a&gt; API. To create a trial component, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html\&quot;&gt;CreateTrialComponent&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrialTest() throws ApiException {
        String xAmzTarget = null;
        CreateTrialRequest createTrialRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTrialResponse response = api.createTrial(xAmzTarget, createTrialRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a &lt;i&gt;trial component&lt;/i&gt;, which is a stage of a machine learning &lt;i&gt;trial&lt;/i&gt;. A trial is composed of one or more trial components. A trial component can be used in multiple trials.&lt;/p&gt; &lt;p&gt;Trial components include pre-processing jobs, training jobs, and batch transform jobs.&lt;/p&gt; &lt;p&gt;When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.&lt;/p&gt; &lt;p&gt;You can add tags to a trial component and then use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API to search for the tags.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrialComponentTest() throws ApiException {
        String xAmzTarget = null;
        CreateTrialComponentRequest createTrialComponentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTrialComponentResponse response = api.createTrialComponent(xAmzTarget, createTrialComponentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a \&quot;person\&quot; for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user&#39;s private Amazon Elastic File System (EFS) home directory. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserProfileTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserProfileRequest createUserProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserProfileResponse response = api.createUserProfile(xAmzTarget, createUserProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this operation to create a workforce. This operation will return an error if a workforce already exists in the Amazon Web Services Region that you specify. You can only create one workforce in each Amazon Web Services Region per Amazon Web Services account.&lt;/p&gt; &lt;p&gt;If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkforce.html\&quot;&gt;DeleteWorkforce&lt;/a&gt; API operation to delete the existing workforce and then use &lt;code&gt;CreateWorkforce&lt;/code&gt; to create a new workforce.&lt;/p&gt; &lt;p&gt;To create a private workforce using Amazon Cognito, you must specify a Cognito user pool in &lt;code&gt;CognitoConfig&lt;/code&gt;. You can also create an Amazon Cognito workforce using the Amazon SageMaker console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html\&quot;&gt; Create a Private Workforce (Amazon Cognito)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP configuration in &lt;code&gt;OidcConfig&lt;/code&gt;. Your OIDC IdP must support &lt;i&gt;groups&lt;/i&gt; because groups are used by Ground Truth and Amazon A2I to create work teams. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html\&quot;&gt; Create a Private Workforce (OIDC IdP)&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkforceTest() throws ApiException {
        String xAmzTarget = null;
        CreateWorkforceRequest createWorkforceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkforceResponse response = api.createWorkforce(xAmzTarget, createWorkforceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new work team for labeling your data. A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team.&lt;/p&gt; &lt;p&gt;You cannot create more than 25 work teams in an account and region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkteamTest() throws ApiException {
        String xAmzTarget = null;
        CreateWorkteamRequest createWorkteamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkteamResponse response = api.createWorkteam(xAmzTarget, createWorkteamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteActionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteActionRequest deleteActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteActionResponse response = api.deleteAction(xAmzTarget, deleteActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified algorithm from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlgorithmTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAlgorithmInput deleteAlgorithmInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAlgorithm(xAmzTarget, deleteAlgorithmInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used to stop and delete an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAppRequest deleteAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteApp(xAmzTarget, deleteAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an AppImageConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppImageConfigTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAppImageConfigRequest deleteAppImageConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAppImageConfig(xAmzTarget, deleteAppImageConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an artifact. Either &lt;code&gt;ArtifactArn&lt;/code&gt; or &lt;code&gt;Source&lt;/code&gt; must be specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteArtifactTest() throws ApiException {
        String xAmzTarget = null;
        DeleteArtifactRequest deleteArtifactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteArtifactResponse response = api.deleteArtifact(xAmzTarget, deleteArtifactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssociationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAssociationRequest deleteAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAssociationResponse response = api.deleteAssociation(xAmzTarget, deleteAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified Git repository from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCodeRepositoryTest() throws ApiException {
        String xAmzTarget = null;
        DeleteCodeRepositoryInput deleteCodeRepositoryInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteCodeRepository(xAmzTarget, deleteCodeRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContextTest() throws ApiException {
        String xAmzTarget = null;
        DeleteContextRequest deleteContextRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteContextResponse response = api.deleteContext(xAmzTarget, deleteContextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a data quality monitoring job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataQualityJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDataQualityJobDefinitionRequest deleteDataQualityJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDataQualityJobDefinition(xAmzTarget, deleteDataQualityJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceFleetTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDeviceFleetRequest deleteDeviceFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDeviceFleet(xAmzTarget, deleteDeviceFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used to delete a domain. If you onboarded with IAM mode, you will need to delete your domain to onboard again using IAM Identity Center. Use with caution. All of the members of the domain will lose access to their EFS volume, including data, notebooks, and other artifacts. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDomainRequest deleteDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDomain(xAmzTarget, deleteDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEdgeDeploymentPlanTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEdgeDeploymentPlanRequest deleteEdgeDeploymentPlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteEdgeDeploymentPlan(xAmzTarget, deleteEdgeDeploymentPlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete a stage in an edge deployment plan if (and only if) the stage is inactive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEdgeDeploymentStageTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEdgeDeploymentStageRequest deleteEdgeDeploymentStageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteEdgeDeploymentStage(xAmzTarget, deleteEdgeDeploymentStageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the endpoint was created. &lt;/p&gt; &lt;p&gt;SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don&#39;t need to use the &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html\&quot;&gt;RevokeGrant&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants. You might still see these resources in your account for a few minutes after deleting your endpoint. Do not delete or revoke the permissions for your &lt;code&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn\&quot;&gt;ExecutionRoleArn&lt;/a&gt; &lt;/code&gt;, otherwise SageMaker cannot delete these resources.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEndpointTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEndpointInput deleteEndpointInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteEndpoint(xAmzTarget, deleteEndpointInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an endpoint configuration. The &lt;code&gt;DeleteEndpointConfig&lt;/code&gt; API deletes only the specified configuration. It does not delete endpoints created using the configuration. &lt;/p&gt; &lt;p&gt;You must not delete an &lt;code&gt;EndpointConfig&lt;/code&gt; in use by an endpoint that is live or while the &lt;code&gt;UpdateEndpoint&lt;/code&gt; or &lt;code&gt;CreateEndpoint&lt;/code&gt; operations are being performed on the endpoint. If you delete the &lt;code&gt;EndpointConfig&lt;/code&gt; of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEndpointConfigTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEndpointConfigInput deleteEndpointConfigInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteEndpointConfig(xAmzTarget, deleteEndpointConfigInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an SageMaker experiment. All trials associated with the experiment must be deleted first. Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html\&quot;&gt;ListTrials&lt;/a&gt; API to get a list of the trials associated with the experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExperimentTest() throws ApiException {
        String xAmzTarget = null;
        DeleteExperimentRequest deleteExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteExperimentResponse response = api.deleteExperiment(xAmzTarget, deleteExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete the &lt;code&gt;FeatureGroup&lt;/code&gt; and any data that was written to the &lt;code&gt;OnlineStore&lt;/code&gt; of the &lt;code&gt;FeatureGroup&lt;/code&gt;. Data cannot be accessed from the &lt;code&gt;OnlineStore&lt;/code&gt; immediately after &lt;code&gt;DeleteFeatureGroup&lt;/code&gt; is called. &lt;/p&gt; &lt;p&gt;Data written into the &lt;code&gt;OfflineStore&lt;/code&gt; will not be deleted. The Amazon Web Services Glue database and tables that are automatically created for your &lt;code&gt;OfflineStore&lt;/code&gt; are not deleted. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFeatureGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFeatureGroupRequest deleteFeatureGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteFeatureGroup(xAmzTarget, deleteFeatureGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified flow definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFlowDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFlowDefinitionRequest deleteFlowDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteFlowDefinition(xAmzTarget, deleteFlowDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHubTest() throws ApiException {
        String xAmzTarget = null;
        DeleteHubRequest deleteHubRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteHub(xAmzTarget, deleteHubRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete the contents of a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHubContentTest() throws ApiException {
        String xAmzTarget = null;
        DeleteHubContentRequest deleteHubContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteHubContent(xAmzTarget, deleteHubContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this operation to delete a human task user interface (worker task template).&lt;/p&gt; &lt;p&gt; To see a list of human task user interfaces (work task templates) in your account, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListHumanTaskUis.html\&quot;&gt;ListHumanTaskUis&lt;/a&gt;. When you delete a worker task template, it no longer appears when you call &lt;code&gt;ListHumanTaskUis&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHumanTaskUiTest() throws ApiException {
        String xAmzTarget = null;
        DeleteHumanTaskUiRequest deleteHumanTaskUiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteHumanTaskUi(xAmzTarget, deleteHumanTaskUiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a SageMaker image and all versions of the image. The container images aren&#39;t deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageTest() throws ApiException {
        String xAmzTarget = null;
        DeleteImageRequest deleteImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteImage(xAmzTarget, deleteImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a version of a SageMaker image. The container image the version represents isn&#39;t deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageVersionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteImageVersionRequest deleteImageVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteImageVersion(xAmzTarget, deleteImageVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an inference experiment.&lt;/p&gt; &lt;note&gt; &lt;p&gt; This operation does not delete your endpoint, variants, or any underlying resources. This operation only deletes the metadata of your experiment. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInferenceExperimentTest() throws ApiException {
        String xAmzTarget = null;
        DeleteInferenceExperimentRequest deleteInferenceExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteInferenceExperimentResponse response = api.deleteInferenceExperiment(xAmzTarget, deleteInferenceExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a model. The &lt;code&gt;DeleteModel&lt;/code&gt; API deletes only the model entry that was created in SageMaker when you called the &lt;code&gt;CreateModel&lt;/code&gt; API. It does not delete model artifacts, inference code, or the IAM role that you specified when creating the model. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelInput deleteModelInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModel(xAmzTarget, deleteModelInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon SageMaker model bias job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelBiasJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelBiasJobDefinitionRequest deleteModelBiasJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModelBiasJobDefinition(xAmzTarget, deleteModelBiasJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon SageMaker Model Card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelCardTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelCardRequest deleteModelCardRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModelCard(xAmzTarget, deleteModelCardRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon SageMaker model explainability job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelExplainabilityJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelExplainabilityJobDefinitionRequest deleteModelExplainabilityJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModelExplainabilityJobDefinition(xAmzTarget, deleteModelExplainabilityJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a model package.&lt;/p&gt; &lt;p&gt;A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelPackageTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelPackageInput deleteModelPackageInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModelPackage(xAmzTarget, deleteModelPackageInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified model group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelPackageGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelPackageGroupInput deleteModelPackageGroupInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModelPackageGroup(xAmzTarget, deleteModelPackageGroupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a model group resource policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelPackageGroupPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelPackageGroupPolicyInput deleteModelPackageGroupPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModelPackageGroupPolicy(xAmzTarget, deleteModelPackageGroupPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the secified model quality monitoring job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelQualityJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteModelQualityJobDefinitionRequest deleteModelQualityJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModelQualityJobDefinition(xAmzTarget, deleteModelQualityJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a monitoring schedule. Also stops the schedule had not already been stopped. This does not delete the job execution history of the monitoring schedule. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMonitoringScheduleTest() throws ApiException {
        String xAmzTarget = null;
        DeleteMonitoringScheduleRequest deleteMonitoringScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteMonitoringSchedule(xAmzTarget, deleteMonitoringScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you must call the &lt;code&gt;StopNotebookInstance&lt;/code&gt; API. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you delete a notebook instance, you lose all of your data. SageMaker removes the ML compute instance, and deletes the ML storage volume and the network interface associated with the notebook instance. &lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNotebookInstanceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteNotebookInstanceInput deleteNotebookInstanceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteNotebookInstance(xAmzTarget, deleteNotebookInstanceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a notebook instance lifecycle configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNotebookInstanceLifecycleConfigTest() throws ApiException {
        String xAmzTarget = null;
        DeleteNotebookInstanceLifecycleConfigInput deleteNotebookInstanceLifecycleConfigInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteNotebookInstanceLifecycleConfig(xAmzTarget, deleteNotebookInstanceLifecycleConfigInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a pipeline if there are no running instances of the pipeline. To delete a pipeline, you must stop all running instances of the pipeline using the &lt;code&gt;StopPipelineExecution&lt;/code&gt; API. When you delete a pipeline, all instances of the pipeline are deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePipelineTest() throws ApiException {
        String xAmzTarget = null;
        DeletePipelineRequest deletePipelineRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeletePipelineResponse response = api.deletePipeline(xAmzTarget, deletePipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProjectInput deleteProjectInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteProject(xAmzTarget, deleteProjectInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used to delete a space.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpaceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSpaceRequest deleteSpaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSpace(xAmzTarget, deleteSpaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStudioLifecycleConfigTest() throws ApiException {
        String xAmzTarget = null;
        DeleteStudioLifecycleConfigRequest deleteStudioLifecycleConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteStudioLifecycleConfig(xAmzTarget, deleteStudioLifecycleConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified tags from an SageMaker resource.&lt;/p&gt; &lt;p&gt;To list a resource&#39;s tags, use the &lt;code&gt;ListTags&lt;/code&gt; API. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you call this API to delete tags from a hyperparameter tuning job, the deleted tags are not removed from training jobs that the hyperparameter tuning job launched before you called this API.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;When you call this API to delete tags from a SageMaker Studio Domain or User Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain or User Profile launched before you called this API.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagsTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTagsInput deleteTagsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTags(xAmzTarget, deleteTagsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified trial. All trial components that make up the trial must be deleted first. Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html\&quot;&gt;DescribeTrialComponent&lt;/a&gt; API to get the list of trial components.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrialTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTrialRequest deleteTrialRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTrialResponse response = api.deleteTrial(xAmzTarget, deleteTrialRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified trial component. A trial component must be disassociated from all trials before the trial component can be deleted. To disassociate a trial component from a trial, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html\&quot;&gt;DisassociateTrialComponent&lt;/a&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrialComponentTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTrialComponentRequest deleteTrialComponentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTrialComponentResponse response = api.deleteTrialComponent(xAmzTarget, deleteTrialComponentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a user profile. When a user profile is deleted, the user loses access to their EFS volume, including data, notebooks, and other artifacts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserProfileTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserProfileRequest deleteUserProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUserProfile(xAmzTarget, deleteUserProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this operation to delete a workforce.&lt;/p&gt; &lt;p&gt;If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use this operation to delete the existing workforce and then use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateWorkforce.html\&quot;&gt;CreateWorkforce&lt;/a&gt; to create a new workforce.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If a private workforce contains one or more work teams, you must use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html\&quot;&gt;DeleteWorkteam&lt;/a&gt; operation to delete all work teams before you delete the workforce. If you try to delete a workforce that contains one or more work teams, you will recieve a &lt;code&gt;ResourceInUse&lt;/code&gt; error.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkforceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteWorkforceRequest deleteWorkforceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWorkforce(xAmzTarget, deleteWorkforceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing work team. This operation can&#39;t be undone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkteamTest() throws ApiException {
        String xAmzTarget = null;
        DeleteWorkteamRequest deleteWorkteamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteWorkteamResponse response = api.deleteWorkteam(xAmzTarget, deleteWorkteamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterDevicesTest() throws ApiException {
        String xAmzTarget = null;
        DeregisterDevicesRequest deregisterDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deregisterDevices(xAmzTarget, deregisterDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeActionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeActionRequest describeActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeActionResponse response = api.describeAction(xAmzTarget, describeActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a description of the specified algorithm that is in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAlgorithmTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAlgorithmInput describeAlgorithmInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAlgorithmOutput response = api.describeAlgorithm(xAmzTarget, describeAlgorithmInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAppTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAppRequest describeAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAppResponse response = api.describeApp(xAmzTarget, describeAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an AppImageConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAppImageConfigTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAppImageConfigRequest describeAppImageConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAppImageConfigResponse response = api.describeAppImageConfig(xAmzTarget, describeAppImageConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeArtifactTest() throws ApiException {
        String xAmzTarget = null;
        DescribeArtifactRequest describeArtifactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeArtifactResponse response = api.describeArtifact(xAmzTarget, describeArtifactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about an AutoML job created by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html\&quot;&gt;CreateAutoMLJob&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;AutoML jobs created by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\&quot;&gt;CreateAutoMLJobV2&lt;/a&gt; cannot be described by &lt;code&gt;DescribeAutoMLJob&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAutoMLJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAutoMLJobRequest describeAutoMLJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAutoMLJobResponse response = api.describeAutoMLJob(xAmzTarget, describeAutoMLJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about an AutoML job created by calling &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html\&quot;&gt;CreateAutoMLJobV2&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html\&quot;&gt;CreateAutoMLJob&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAutoMLJobV2Test() throws ApiException {
        String xAmzTarget = null;
        DescribeAutoMLJobV2Request describeAutoMLJobV2Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAutoMLJobV2Response response = api.describeAutoMLJobV2(xAmzTarget, describeAutoMLJobV2Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details about the specified Git repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCodeRepositoryTest() throws ApiException {
        String xAmzTarget = null;
        DescribeCodeRepositoryInput describeCodeRepositoryInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeCodeRepositoryOutput response = api.describeCodeRepository(xAmzTarget, describeCodeRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about a model compilation job.&lt;/p&gt; &lt;p&gt;To create a model compilation job, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html\&quot;&gt;CreateCompilationJob&lt;/a&gt;. To get information about multiple model compilation jobs, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html\&quot;&gt;ListCompilationJobs&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCompilationJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeCompilationJobRequest describeCompilationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeCompilationJobResponse response = api.describeCompilationJob(xAmzTarget, describeCompilationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeContextTest() throws ApiException {
        String xAmzTarget = null;
        DescribeContextRequest describeContextRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeContextResponse response = api.describeContext(xAmzTarget, describeContextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the details of a data quality monitoring job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDataQualityJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDataQualityJobDefinitionRequest describeDataQualityJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDataQualityJobDefinitionResponse response = api.describeDataQualityJobDefinition(xAmzTarget, describeDataQualityJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDeviceTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDeviceRequest describeDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDeviceResponse response = api.describeDevice(xAmzTarget, describeDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A description of the fleet the device belongs to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDeviceFleetTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDeviceFleetRequest describeDeviceFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDeviceFleetResponse response = api.describeDeviceFleet(xAmzTarget, describeDeviceFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The description of the domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDomainTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDomainRequest describeDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDomainResponse response = api.describeDomain(xAmzTarget, describeDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an edge deployment plan with deployment status per stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEdgeDeploymentPlanTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEdgeDeploymentPlanRequest describeEdgeDeploymentPlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEdgeDeploymentPlanResponse response = api.describeEdgeDeploymentPlan(xAmzTarget, describeEdgeDeploymentPlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A description of edge packaging jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEdgePackagingJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEdgePackagingJobRequest describeEdgePackagingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEdgePackagingJobResponse response = api.describeEdgePackagingJob(xAmzTarget, describeEdgePackagingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the description of an endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEndpointTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEndpointInput describeEndpointInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEndpointOutput response = api.describeEndpoint(xAmzTarget, describeEndpointInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the description of an endpoint configuration created using the &lt;code&gt;CreateEndpointConfig&lt;/code&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEndpointConfigTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEndpointConfigInput describeEndpointConfigInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEndpointConfigOutput response = api.describeEndpointConfig(xAmzTarget, describeEndpointConfigInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides a list of an experiment&#39;s properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeExperimentTest() throws ApiException {
        String xAmzTarget = null;
        DescribeExperimentRequest describeExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeExperimentResponse response = api.describeExperiment(xAmzTarget, describeExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Use this operation to describe a &lt;code&gt;FeatureGroup&lt;/code&gt;. The response includes information on the creation time, &lt;code&gt;FeatureGroup&lt;/code&gt; name, the unique identifier for each &lt;code&gt;FeatureGroup&lt;/code&gt;, and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFeatureGroupTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFeatureGroupRequest describeFeatureGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFeatureGroupResponse response = api.describeFeatureGroup(xAmzTarget, describeFeatureGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Shows the metadata for a feature within a feature group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFeatureMetadataTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFeatureMetadataRequest describeFeatureMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFeatureMetadataResponse response = api.describeFeatureMetadata(xAmzTarget, describeFeatureMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the specified flow definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFlowDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFlowDefinitionRequest describeFlowDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFlowDefinitionResponse response = api.describeFlowDefinition(xAmzTarget, describeFlowDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describe a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeHubTest() throws ApiException {
        String xAmzTarget = null;
        DescribeHubRequest describeHubRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeHubResponse response = api.describeHub(xAmzTarget, describeHubRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describe the content of a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeHubContentTest() throws ApiException {
        String xAmzTarget = null;
        DescribeHubContentRequest describeHubContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeHubContentResponse response = api.describeHubContent(xAmzTarget, describeHubContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the requested human task user interface (worker task template).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeHumanTaskUiTest() throws ApiException {
        String xAmzTarget = null;
        DescribeHumanTaskUiRequest describeHumanTaskUiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeHumanTaskUiResponse response = api.describeHumanTaskUi(xAmzTarget, describeHumanTaskUiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a description of a hyperparameter tuning job, depending on the fields selected. These fields can include the name, Amazon Resource Name (ARN), job status of your tuning job and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeHyperParameterTuningJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeHyperParameterTuningJobRequest describeHyperParameterTuningJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeHyperParameterTuningJobResponse response = api.describeHyperParameterTuningJob(xAmzTarget, describeHyperParameterTuningJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a SageMaker image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImageTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImageRequest describeImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeImageResponse response = api.describeImage(xAmzTarget, describeImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a version of a SageMaker image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImageVersionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImageVersionRequest describeImageVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeImageVersionResponse response = api.describeImageVersion(xAmzTarget, describeImageVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns details about an inference experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInferenceExperimentTest() throws ApiException {
        String xAmzTarget = null;
        DescribeInferenceExperimentRequest describeInferenceExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInferenceExperimentResponse response = api.describeInferenceExperiment(xAmzTarget, describeInferenceExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides the results of the Inference Recommender job. One or more recommendation jobs are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInferenceRecommendationsJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeInferenceRecommendationsJobRequest describeInferenceRecommendationsJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInferenceRecommendationsJobResponse response = api.describeInferenceRecommendationsJob(xAmzTarget, describeInferenceRecommendationsJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a labeling job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeLabelingJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeLabelingJobRequest describeLabelingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLabelingJobResponse response = api.describeLabelingJob(xAmzTarget, describeLabelingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides a list of properties for the requested lineage group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html\&quot;&gt; Cross-Account Lineage Tracking &lt;/a&gt; in the &lt;i&gt;Amazon SageMaker Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeLineageGroupTest() throws ApiException {
        String xAmzTarget = null;
        DescribeLineageGroupRequest describeLineageGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLineageGroupResponse response = api.describeLineageGroup(xAmzTarget, describeLineageGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a model that you created using the &lt;code&gt;CreateModel&lt;/code&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelInput describeModelInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelOutput response = api.describeModel(xAmzTarget, describeModelInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a description of a model bias job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelBiasJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelBiasJobDefinitionRequest describeModelBiasJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelBiasJobDefinitionResponse response = api.describeModelBiasJobDefinition(xAmzTarget, describeModelBiasJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the content, creation time, and security configuration of an Amazon SageMaker Model Card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelCardTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelCardRequest describeModelCardRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelCardResponse response = api.describeModelCard(xAmzTarget, describeModelCardRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an Amazon SageMaker Model Card export job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelCardExportJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelCardExportJobRequest describeModelCardExportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelCardExportJobResponse response = api.describeModelCardExportJob(xAmzTarget, describeModelCardExportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a description of a model explainability job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelExplainabilityJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelExplainabilityJobDefinitionRequest describeModelExplainabilityJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelExplainabilityJobDefinitionResponse response = api.describeModelExplainabilityJobDefinition(xAmzTarget, describeModelExplainabilityJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a description of the specified model package, which is used to create SageMaker models or list them on Amazon Web Services Marketplace.&lt;/p&gt; &lt;p&gt;To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services Marketplace.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelPackageTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelPackageInput describeModelPackageInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelPackageOutput response = api.describeModelPackage(xAmzTarget, describeModelPackageInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a description for the specified model group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelPackageGroupTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelPackageGroupInput describeModelPackageGroupInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelPackageGroupOutput response = api.describeModelPackageGroup(xAmzTarget, describeModelPackageGroupInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a description of a model quality job definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeModelQualityJobDefinitionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeModelQualityJobDefinitionRequest describeModelQualityJobDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeModelQualityJobDefinitionResponse response = api.describeModelQualityJobDefinition(xAmzTarget, describeModelQualityJobDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the schedule for a monitoring job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMonitoringScheduleTest() throws ApiException {
        String xAmzTarget = null;
        DescribeMonitoringScheduleRequest describeMonitoringScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMonitoringScheduleResponse response = api.describeMonitoringSchedule(xAmzTarget, describeMonitoringScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a notebook instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeNotebookInstanceTest() throws ApiException {
        String xAmzTarget = null;
        DescribeNotebookInstanceInput describeNotebookInstanceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeNotebookInstanceOutput response = api.describeNotebookInstance(xAmzTarget, describeNotebookInstanceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a description of a notebook instance lifecycle configuration.&lt;/p&gt; &lt;p&gt;For information about notebook instance lifestyle configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\&quot;&gt;Step 2.1: (Optional) Customize a Notebook Instance&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeNotebookInstanceLifecycleConfigTest() throws ApiException {
        String xAmzTarget = null;
        DescribeNotebookInstanceLifecycleConfigInput describeNotebookInstanceLifecycleConfigInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeNotebookInstanceLifecycleConfigOutput response = api.describeNotebookInstanceLifecycleConfig(xAmzTarget, describeNotebookInstanceLifecycleConfigInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the details of a pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePipelineTest() throws ApiException {
        String xAmzTarget = null;
        DescribePipelineRequest describePipelineRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePipelineResponse response = api.describePipeline(xAmzTarget, describePipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the details of an execution&#39;s pipeline definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePipelineDefinitionForExecutionTest() throws ApiException {
        String xAmzTarget = null;
        DescribePipelineDefinitionForExecutionRequest describePipelineDefinitionForExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePipelineDefinitionForExecutionResponse response = api.describePipelineDefinitionForExecution(xAmzTarget, describePipelineDefinitionForExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the details of a pipeline execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePipelineExecutionTest() throws ApiException {
        String xAmzTarget = null;
        DescribePipelineExecutionRequest describePipelineExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePipelineExecutionResponse response = api.describePipelineExecution(xAmzTarget, describePipelineExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a description of a processing job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProcessingJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProcessingJobRequest describeProcessingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProcessingJobResponse response = api.describeProcessingJob(xAmzTarget, describeProcessingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the details of a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProjectTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProjectInput describeProjectInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProjectOutput response = api.describeProject(xAmzTarget, describeProjectInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the space.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSpaceTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSpaceRequest describeSpaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSpaceResponse response = api.describeSpace(xAmzTarget, describeSpaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the Studio Lifecycle Configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeStudioLifecycleConfigTest() throws ApiException {
        String xAmzTarget = null;
        DescribeStudioLifecycleConfigRequest describeStudioLifecycleConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeStudioLifecycleConfigResponse response = api.describeStudioLifecycleConfig(xAmzTarget, describeStudioLifecycleConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a work team provided by a vendor. It returns details about the subscription with a vendor in the Amazon Web Services Marketplace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSubscribedWorkteamTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSubscribedWorkteamRequest describeSubscribedWorkteamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSubscribedWorkteamResponse response = api.describeSubscribedWorkteam(xAmzTarget, describeSubscribedWorkteamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about a training job. &lt;/p&gt; &lt;p&gt;Some of the attributes below only appear if the training job successfully starts. If the training job fails, &lt;code&gt;TrainingJobStatus&lt;/code&gt; is &lt;code&gt;Failed&lt;/code&gt; and, depending on the &lt;code&gt;FailureReason&lt;/code&gt;, attributes like &lt;code&gt;TrainingStartTime&lt;/code&gt;, &lt;code&gt;TrainingTimeInSeconds&lt;/code&gt;, &lt;code&gt;TrainingEndTime&lt;/code&gt;, and &lt;code&gt;BillableTimeInSeconds&lt;/code&gt; may not be present in the response.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTrainingJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTrainingJobRequest describeTrainingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTrainingJobResponse response = api.describeTrainingJob(xAmzTarget, describeTrainingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a transform job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTransformJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTransformJobRequest describeTransformJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTransformJobResponse response = api.describeTransformJob(xAmzTarget, describeTransformJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides a list of a trial&#39;s properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTrialTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTrialRequest describeTrialRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTrialResponse response = api.describeTrial(xAmzTarget, describeTrialRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides a list of a trials component&#39;s properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTrialComponentTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTrialComponentRequest describeTrialComponentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTrialComponentResponse response = api.describeTrialComponent(xAmzTarget, describeTrialComponentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a user profile. For more information, see &lt;code&gt;CreateUserProfile&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserProfileTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUserProfileRequest describeUserProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserProfileResponse response = api.describeUserProfile(xAmzTarget, describeUserProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists private workforce information, including workforce name, Amazon Resource Name (ARN), and, if applicable, allowed IP address ranges (&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;CIDRs&lt;/a&gt;). Allowable IP address ranges are the IP addresses that workers can use to access tasks. &lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation applies only to private workforces.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkforceTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkforceRequest describeWorkforceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkforceResponse response = api.describeWorkforce(xAmzTarget, describeWorkforceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specific work team. You can see information such as the create date, the last updated date, membership information, and the work team&#39;s Amazon Resource Name (ARN).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkteamTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkteamRequest describeWorkteamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkteamResponse response = api.describeWorkteam(xAmzTarget, describeWorkteamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableSagemakerServicecatalogPortfolioTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableSagemakerServicecatalogPortfolio(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates a trial component from a trial. This doesn&#39;t effect other trials the component is associated with. Before you can delete a component, you must disassociate the component from all trials it is associated with. To associate a trial component with a trial, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AssociateTrialComponent.html\&quot;&gt;AssociateTrialComponent&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;To get a list of the trials a component is associated with, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\&quot;&gt;Search&lt;/a&gt; API. Specify &lt;code&gt;ExperimentTrialComponent&lt;/code&gt; for the &lt;code&gt;Resource&lt;/code&gt; parameter. The list appears in the response under &lt;code&gt;Results.TrialComponent.Parents&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateTrialComponentTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateTrialComponentRequest disassociateTrialComponentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateTrialComponentResponse response = api.disassociateTrialComponent(xAmzTarget, disassociateTrialComponentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableSagemakerServicecatalogPortfolioTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.enableSagemakerServicecatalogPortfolio(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceFleetReportTest() throws ApiException {
        String xAmzTarget = null;
        GetDeviceFleetReportRequest getDeviceFleetReportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeviceFleetReportResponse response = api.getDeviceFleetReport(xAmzTarget, getDeviceFleetReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The resource policy for the lineage group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLineageGroupPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetLineageGroupPolicyRequest getLineageGroupPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLineageGroupPolicyResponse response = api.getLineageGroupPolicy(xAmzTarget, getLineageGroupPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a resource policy that manages access for a model group. For information about resource policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html\&quot;&gt;Identity-based policies and resource-based policies&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide.&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelPackageGroupPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetModelPackageGroupPolicyInput getModelPackageGroupPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetModelPackageGroupPolicyOutput response = api.getModelPackageGroupPolicy(xAmzTarget, getModelPackageGroupPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the status of Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSagemakerServicecatalogPortfolioStatusTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSagemakerServicecatalogPortfolioStatusOutput response = api.getSagemakerServicecatalogPortfolioStatus(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an Amazon SageMaker Inference Recommender autoscaling recommendation job. Returns recommendations for autoscaling policies that you can apply to your SageMaker endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScalingConfigurationRecommendationTest() throws ApiException {
        String xAmzTarget = null;
        GetScalingConfigurationRecommendationRequest getScalingConfigurationRecommendationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetScalingConfigurationRecommendationResponse response = api.getScalingConfigurationRecommendation(xAmzTarget, getScalingConfigurationRecommendationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * An auto-complete API for the search functionality in the SageMaker console. It returns suggestions of possible matches for the property name to use in &lt;code&gt;Search&lt;/code&gt; queries. Provides suggestions for &lt;code&gt;HyperParameters&lt;/code&gt;, &lt;code&gt;Tags&lt;/code&gt;, and &lt;code&gt;Metrics&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSearchSuggestionsTest() throws ApiException {
        String xAmzTarget = null;
        GetSearchSuggestionsRequest getSearchSuggestionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSearchSuggestionsResponse response = api.getSearchSuggestions(xAmzTarget, getSearchSuggestionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Import hub content.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importHubContentTest() throws ApiException {
        String xAmzTarget = null;
        ImportHubContentRequest importHubContentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportHubContentResponse response = api.importHubContent(xAmzTarget, importHubContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the actions in your account and their properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActionsTest() throws ApiException {
        String xAmzTarget = null;
        ListActionsRequest listActionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListActionsResponse response = api.listActions(xAmzTarget, listActionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the machine learning algorithms that have been created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAlgorithmsTest() throws ApiException {
        String xAmzTarget = null;
        ListAlgorithmsInput listAlgorithmsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAlgorithmsOutput response = api.listAlgorithms(xAmzTarget, listAlgorithmsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the aliases of a specified image or image version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAliasesTest() throws ApiException {
        String xAmzTarget = null;
        ListAliasesRequest listAliasesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAliasesResponse response = api.listAliases(xAmzTarget, listAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppImageConfigsTest() throws ApiException {
        String xAmzTarget = null;
        ListAppImageConfigsRequest listAppImageConfigsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAppImageConfigsResponse response = api.listAppImageConfigs(xAmzTarget, listAppImageConfigsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists apps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppsTest() throws ApiException {
        String xAmzTarget = null;
        ListAppsRequest listAppsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAppsResponse response = api.listApps(xAmzTarget, listAppsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the artifacts in your account and their properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listArtifactsTest() throws ApiException {
        String xAmzTarget = null;
        ListArtifactsRequest listArtifactsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListArtifactsResponse response = api.listArtifacts(xAmzTarget, listArtifactsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the associations in your account and their properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssociationsTest() throws ApiException {
        String xAmzTarget = null;
        ListAssociationsRequest listAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAssociationsResponse response = api.listAssociations(xAmzTarget, listAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Request a list of jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAutoMLJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListAutoMLJobsRequest listAutoMLJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAutoMLJobsResponse response = api.listAutoMLJobs(xAmzTarget, listAutoMLJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List the candidates created for the job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCandidatesForAutoMLJobTest() throws ApiException {
        String xAmzTarget = null;
        ListCandidatesForAutoMLJobRequest listCandidatesForAutoMLJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCandidatesForAutoMLJobResponse response = api.listCandidatesForAutoMLJob(xAmzTarget, listCandidatesForAutoMLJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of the Git repositories in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCodeRepositoriesTest() throws ApiException {
        String xAmzTarget = null;
        ListCodeRepositoriesInput listCodeRepositoriesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCodeRepositoriesOutput response = api.listCodeRepositories(xAmzTarget, listCodeRepositoriesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists model compilation jobs that satisfy various filters.&lt;/p&gt; &lt;p&gt;To create a model compilation job, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html\&quot;&gt;CreateCompilationJob&lt;/a&gt;. To get information about a particular model compilation job you have created, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html\&quot;&gt;DescribeCompilationJob&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCompilationJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListCompilationJobsRequest listCompilationJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCompilationJobsResponse response = api.listCompilationJobs(xAmzTarget, listCompilationJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the contexts in your account and their properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContextsTest() throws ApiException {
        String xAmzTarget = null;
        ListContextsRequest listContextsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListContextsResponse response = api.listContexts(xAmzTarget, listContextsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the data quality job definitions in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataQualityJobDefinitionsTest() throws ApiException {
        String xAmzTarget = null;
        ListDataQualityJobDefinitionsRequest listDataQualityJobDefinitionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataQualityJobDefinitionsResponse response = api.listDataQualityJobDefinitions(xAmzTarget, listDataQualityJobDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of devices in the fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeviceFleetsTest() throws ApiException {
        String xAmzTarget = null;
        ListDeviceFleetsRequest listDeviceFleetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDeviceFleetsResponse response = api.listDeviceFleets(xAmzTarget, listDeviceFleetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * A list of devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesTest() throws ApiException {
        String xAmzTarget = null;
        ListDevicesRequest listDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDevicesResponse response = api.listDevices(xAmzTarget, listDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDomainsTest() throws ApiException {
        String xAmzTarget = null;
        ListDomainsRequest listDomainsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDomainsResponse response = api.listDomains(xAmzTarget, listDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all edge deployment plans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEdgeDeploymentPlansTest() throws ApiException {
        String xAmzTarget = null;
        ListEdgeDeploymentPlansRequest listEdgeDeploymentPlansRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEdgeDeploymentPlansResponse response = api.listEdgeDeploymentPlans(xAmzTarget, listEdgeDeploymentPlansRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of edge packaging jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEdgePackagingJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListEdgePackagingJobsRequest listEdgePackagingJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEdgePackagingJobsResponse response = api.listEdgePackagingJobs(xAmzTarget, listEdgePackagingJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists endpoint configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEndpointConfigsTest() throws ApiException {
        String xAmzTarget = null;
        ListEndpointConfigsInput listEndpointConfigsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEndpointConfigsOutput response = api.listEndpointConfigs(xAmzTarget, listEndpointConfigsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEndpointsTest() throws ApiException {
        String xAmzTarget = null;
        ListEndpointsInput listEndpointsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEndpointsOutput response = api.listEndpoints(xAmzTarget, listEndpointsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExperimentsTest() throws ApiException {
        String xAmzTarget = null;
        ListExperimentsRequest listExperimentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListExperimentsResponse response = api.listExperiments(xAmzTarget, listExperimentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List &lt;code&gt;FeatureGroup&lt;/code&gt;s based on given filter and order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFeatureGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListFeatureGroupsRequest listFeatureGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFeatureGroupsResponse response = api.listFeatureGroups(xAmzTarget, listFeatureGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about the flow definitions in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFlowDefinitionsTest() throws ApiException {
        String xAmzTarget = null;
        ListFlowDefinitionsRequest listFlowDefinitionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFlowDefinitionsResponse response = api.listFlowDefinitions(xAmzTarget, listFlowDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;List hub content versions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHubContentVersionsTest() throws ApiException {
        String xAmzTarget = null;
        ListHubContentVersionsRequest listHubContentVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListHubContentVersionsResponse response = api.listHubContentVersions(xAmzTarget, listHubContentVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;List the contents of a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHubContentsTest() throws ApiException {
        String xAmzTarget = null;
        ListHubContentsRequest listHubContentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListHubContentsResponse response = api.listHubContents(xAmzTarget, listHubContentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;List all existing hubs.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHubsTest() throws ApiException {
        String xAmzTarget = null;
        ListHubsRequest listHubsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListHubsResponse response = api.listHubs(xAmzTarget, listHubsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the human task user interfaces in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHumanTaskUisTest() throws ApiException {
        String xAmzTarget = null;
        ListHumanTaskUisRequest listHumanTaskUisRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListHumanTaskUisResponse response = api.listHumanTaskUis(xAmzTarget, listHumanTaskUisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobSummary.html\&quot;&gt;HyperParameterTuningJobSummary&lt;/a&gt; objects that describe the hyperparameter tuning jobs launched in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHyperParameterTuningJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListHyperParameterTuningJobsRequest listHyperParameterTuningJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListHyperParameterTuningJobsResponse response = api.listHyperParameterTuningJobs(xAmzTarget, listHyperParameterTuningJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImageVersionsTest() throws ApiException {
        String xAmzTarget = null;
        ListImageVersionsRequest listImageVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListImageVersionsResponse response = api.listImageVersions(xAmzTarget, listImageVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImagesTest() throws ApiException {
        String xAmzTarget = null;
        ListImagesRequest listImagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListImagesResponse response = api.listImages(xAmzTarget, listImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the list of all inference experiments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInferenceExperimentsTest() throws ApiException {
        String xAmzTarget = null;
        ListInferenceExperimentsRequest listInferenceExperimentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInferenceExperimentsResponse response = api.listInferenceExperiments(xAmzTarget, listInferenceExperimentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the subtasks for an Inference Recommender job.&lt;/p&gt; &lt;p&gt;The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInferenceRecommendationsJobStepsTest() throws ApiException {
        String xAmzTarget = null;
        ListInferenceRecommendationsJobStepsRequest listInferenceRecommendationsJobStepsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInferenceRecommendationsJobStepsResponse response = api.listInferenceRecommendationsJobSteps(xAmzTarget, listInferenceRecommendationsJobStepsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists recommendation jobs that satisfy various filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInferenceRecommendationsJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListInferenceRecommendationsJobsRequest listInferenceRecommendationsJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInferenceRecommendationsJobsResponse response = api.listInferenceRecommendationsJobs(xAmzTarget, listInferenceRecommendationsJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of labeling jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLabelingJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListLabelingJobsRequest listLabelingJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListLabelingJobsResponse response = api.listLabelingJobs(xAmzTarget, listLabelingJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of labeling jobs assigned to a specified work team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLabelingJobsForWorkteamTest() throws ApiException {
        String xAmzTarget = null;
        ListLabelingJobsForWorkteamRequest listLabelingJobsForWorkteamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListLabelingJobsForWorkteamResponse response = api.listLabelingJobsForWorkteam(xAmzTarget, listLabelingJobsForWorkteamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * A list of lineage groups shared with your Amazon Web Services account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html\&quot;&gt; Cross-Account Lineage Tracking &lt;/a&gt; in the &lt;i&gt;Amazon SageMaker Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLineageGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListLineageGroupsRequest listLineageGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListLineageGroupsResponse response = api.listLineageGroups(xAmzTarget, listLineageGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists model bias jobs definitions that satisfy various filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelBiasJobDefinitionsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelBiasJobDefinitionsRequest listModelBiasJobDefinitionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelBiasJobDefinitionsResponse response = api.listModelBiasJobDefinitions(xAmzTarget, listModelBiasJobDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List the export jobs for the Amazon SageMaker Model Card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelCardExportJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelCardExportJobsRequest listModelCardExportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelCardExportJobsResponse response = api.listModelCardExportJobs(xAmzTarget, listModelCardExportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List existing versions of an Amazon SageMaker Model Card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelCardVersionsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelCardVersionsRequest listModelCardVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelCardVersionsResponse response = api.listModelCardVersions(xAmzTarget, listModelCardVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List existing model cards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelCardsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelCardsRequest listModelCardsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelCardsResponse response = api.listModelCards(xAmzTarget, listModelCardsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists model explainability job definitions that satisfy various filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelExplainabilityJobDefinitionsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelExplainabilityJobDefinitionsRequest listModelExplainabilityJobDefinitionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelExplainabilityJobDefinitionsResponse response = api.listModelExplainabilityJobDefinitions(xAmzTarget, listModelExplainabilityJobDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the domain, framework, task, and model name of standard machine learning models found in common model zoos.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelMetadataTest() throws ApiException {
        String xAmzTarget = null;
        ListModelMetadataRequest listModelMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelMetadataResponse response = api.listModelMetadata(xAmzTarget, listModelMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of the model groups in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelPackageGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelPackageGroupsInput listModelPackageGroupsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelPackageGroupsOutput response = api.listModelPackageGroups(xAmzTarget, listModelPackageGroupsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the model packages that have been created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelPackagesTest() throws ApiException {
        String xAmzTarget = null;
        ListModelPackagesInput listModelPackagesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelPackagesOutput response = api.listModelPackages(xAmzTarget, listModelPackagesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of model quality monitoring job definitions in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelQualityJobDefinitionsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelQualityJobDefinitionsRequest listModelQualityJobDefinitionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelQualityJobDefinitionsResponse response = api.listModelQualityJobDefinitions(xAmzTarget, listModelQualityJobDefinitionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists models created with the &lt;code&gt;CreateModel&lt;/code&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listModelsTest() throws ApiException {
        String xAmzTarget = null;
        ListModelsInput listModelsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListModelsOutput response = api.listModels(xAmzTarget, listModelsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of past alerts in a model monitoring schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMonitoringAlertHistoryTest() throws ApiException {
        String xAmzTarget = null;
        ListMonitoringAlertHistoryRequest listMonitoringAlertHistoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMonitoringAlertHistoryResponse response = api.listMonitoringAlertHistory(xAmzTarget, listMonitoringAlertHistoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the alerts for a single monitoring schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMonitoringAlertsTest() throws ApiException {
        String xAmzTarget = null;
        ListMonitoringAlertsRequest listMonitoringAlertsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMonitoringAlertsResponse response = api.listMonitoringAlerts(xAmzTarget, listMonitoringAlertsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns list of all monitoring job executions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMonitoringExecutionsTest() throws ApiException {
        String xAmzTarget = null;
        ListMonitoringExecutionsRequest listMonitoringExecutionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMonitoringExecutionsResponse response = api.listMonitoringExecutions(xAmzTarget, listMonitoringExecutionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns list of all monitoring schedules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMonitoringSchedulesTest() throws ApiException {
        String xAmzTarget = null;
        ListMonitoringSchedulesRequest listMonitoringSchedulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMonitoringSchedulesResponse response = api.listMonitoringSchedules(xAmzTarget, listMonitoringSchedulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists notebook instance lifestyle configurations created with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html\&quot;&gt;CreateNotebookInstanceLifecycleConfig&lt;/a&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNotebookInstanceLifecycleConfigsTest() throws ApiException {
        String xAmzTarget = null;
        ListNotebookInstanceLifecycleConfigsInput listNotebookInstanceLifecycleConfigsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListNotebookInstanceLifecycleConfigsOutput response = api.listNotebookInstanceLifecycleConfigs(xAmzTarget, listNotebookInstanceLifecycleConfigsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of the SageMaker notebook instances in the requester&#39;s account in an Amazon Web Services Region. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNotebookInstancesTest() throws ApiException {
        String xAmzTarget = null;
        ListNotebookInstancesInput listNotebookInstancesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListNotebookInstancesOutput response = api.listNotebookInstances(xAmzTarget, listNotebookInstancesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of &lt;code&gt;PipeLineExecutionStep&lt;/code&gt; objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPipelineExecutionStepsTest() throws ApiException {
        String xAmzTarget = null;
        ListPipelineExecutionStepsRequest listPipelineExecutionStepsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPipelineExecutionStepsResponse response = api.listPipelineExecutionSteps(xAmzTarget, listPipelineExecutionStepsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of the pipeline executions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPipelineExecutionsTest() throws ApiException {
        String xAmzTarget = null;
        ListPipelineExecutionsRequest listPipelineExecutionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPipelineExecutionsResponse response = api.listPipelineExecutions(xAmzTarget, listPipelineExecutionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of parameters for a pipeline execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPipelineParametersForExecutionTest() throws ApiException {
        String xAmzTarget = null;
        ListPipelineParametersForExecutionRequest listPipelineParametersForExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPipelineParametersForExecutionResponse response = api.listPipelineParametersForExecution(xAmzTarget, listPipelineParametersForExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of pipelines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPipelinesTest() throws ApiException {
        String xAmzTarget = null;
        ListPipelinesRequest listPipelinesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPipelinesResponse response = api.listPipelines(xAmzTarget, listPipelinesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists processing jobs that satisfy various filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProcessingJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListProcessingJobsRequest listProcessingJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListProcessingJobsResponse response = api.listProcessingJobs(xAmzTarget, listProcessingJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of the projects in an Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectsTest() throws ApiException {
        String xAmzTarget = null;
        ListProjectsInput listProjectsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListProjectsOutput response = api.listProjects(xAmzTarget, listProjectsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Lists Amazon SageMaker Catalogs based on given filters and orders. The maximum number of &lt;code&gt;ResourceCatalog&lt;/code&gt;s viewable is 1000. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourceCatalogsTest() throws ApiException {
        String xAmzTarget = null;
        ListResourceCatalogsRequest listResourceCatalogsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResourceCatalogsResponse response = api.listResourceCatalogs(xAmzTarget, listResourceCatalogsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists spaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSpacesTest() throws ApiException {
        String xAmzTarget = null;
        ListSpacesRequest listSpacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSpacesResponse response = api.listSpaces(xAmzTarget, listSpacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists devices allocated to the stage, containing detailed device information and deployment status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStageDevicesTest() throws ApiException {
        String xAmzTarget = null;
        ListStageDevicesRequest listStageDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListStageDevicesResponse response = api.listStageDevices(xAmzTarget, listStageDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStudioLifecycleConfigsTest() throws ApiException {
        String xAmzTarget = null;
        ListStudioLifecycleConfigsRequest listStudioLifecycleConfigsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListStudioLifecycleConfigsResponse response = api.listStudioLifecycleConfigs(xAmzTarget, listStudioLifecycleConfigsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the &lt;code&gt;NameContains&lt;/code&gt; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubscribedWorkteamsTest() throws ApiException {
        String xAmzTarget = null;
        ListSubscribedWorkteamsRequest listSubscribedWorkteamsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSubscribedWorkteamsResponse response = api.listSubscribedWorkteams(xAmzTarget, listSubscribedWorkteamsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the tags for the specified SageMaker resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsInput listTagsInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsOutput response = api.listTags(xAmzTarget, listTagsInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists training jobs.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When &lt;code&gt;StatusEquals&lt;/code&gt; and &lt;code&gt;MaxResults&lt;/code&gt; are set at the same time, the &lt;code&gt;MaxResults&lt;/code&gt; number of training jobs are first retrieved ignoring the &lt;code&gt;StatusEquals&lt;/code&gt; parameter and then they are filtered by the &lt;code&gt;StatusEquals&lt;/code&gt; parameter, which is returned as a response.&lt;/p&gt; &lt;p&gt;For example, if &lt;code&gt;ListTrainingJobs&lt;/code&gt; is invoked with the following parameters:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ ... MaxResults: 100, StatusEquals: InProgress ... }&lt;/code&gt; &lt;/p&gt; &lt;p&gt;First, 100 trainings jobs with any status, including those other than &lt;code&gt;InProgress&lt;/code&gt;, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of &lt;code&gt;InProgress&lt;/code&gt; are returned.&lt;/p&gt; &lt;p&gt;You can quickly test the API using the following Amazon Web Services CLI code.&lt;/p&gt; &lt;p&gt; &lt;code&gt;aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress&lt;/code&gt; &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrainingJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListTrainingJobsRequest listTrainingJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTrainingJobsResponse response = api.listTrainingJobs(xAmzTarget, listTrainingJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html\&quot;&gt;TrainingJobSummary&lt;/a&gt; objects that describe the training jobs that a hyperparameter tuning job launched.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrainingJobsForHyperParameterTuningJobTest() throws ApiException {
        String xAmzTarget = null;
        ListTrainingJobsForHyperParameterTuningJobRequest listTrainingJobsForHyperParameterTuningJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTrainingJobsForHyperParameterTuningJobResponse response = api.listTrainingJobsForHyperParameterTuningJob(xAmzTarget, listTrainingJobsForHyperParameterTuningJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists transform jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransformJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListTransformJobsRequest listTransformJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTransformJobsResponse response = api.listTransformJobs(xAmzTarget, listTransformJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExperimentName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceArn&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TrialName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrialComponentsTest() throws ApiException {
        String xAmzTarget = null;
        ListTrialComponentsRequest listTrialComponentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTrialComponentsResponse response = api.listTrialComponents(xAmzTarget, listTrialComponentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrialsTest() throws ApiException {
        String xAmzTarget = null;
        ListTrialsRequest listTrialsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTrialsResponse response = api.listTrials(xAmzTarget, listTrialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists user profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserProfilesTest() throws ApiException {
        String xAmzTarget = null;
        ListUserProfilesRequest listUserProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListUserProfilesResponse response = api.listUserProfiles(xAmzTarget, listUserProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only have one private workforce per Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkforcesTest() throws ApiException {
        String xAmzTarget = null;
        ListWorkforcesRequest listWorkforcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListWorkforcesResponse response = api.listWorkforces(xAmzTarget, listWorkforcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the &lt;code&gt;NameContains&lt;/code&gt; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkteamsTest() throws ApiException {
        String xAmzTarget = null;
        ListWorkteamsRequest listWorkteamsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListWorkteamsResponse response = api.listWorkteams(xAmzTarget, listWorkteamsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Adds a resouce policy to control access to a model group. For information about resoure policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html\&quot;&gt;Identity-based policies and resource-based policies&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide.&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putModelPackageGroupPolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutModelPackageGroupPolicyInput putModelPackageGroupPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutModelPackageGroupPolicyOutput response = api.putModelPackageGroupPolicy(xAmzTarget, putModelPackageGroupPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Use this action to inspect your lineage and discover relationships between entities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html\&quot;&gt; Querying Lineage Entities&lt;/a&gt; in the &lt;i&gt;Amazon SageMaker Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryLineageTest() throws ApiException {
        String xAmzTarget = null;
        QueryLineageRequest queryLineageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        QueryLineageResponse response = api.queryLineage(xAmzTarget, queryLineageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Register devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerDevicesTest() throws ApiException {
        String xAmzTarget = null;
        RegisterDevicesRequest registerDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.registerDevices(xAmzTarget, registerDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Renders the UI template so that you can preview the worker&#39;s experience. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renderUiTemplateTest() throws ApiException {
        String xAmzTarget = null;
        RenderUiTemplateRequest renderUiTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RenderUiTemplateResponse response = api.renderUiTemplate(xAmzTarget, renderUiTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retry the execution of the pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryPipelineExecutionTest() throws ApiException {
        String xAmzTarget = null;
        RetryPipelineExecutionRequest retryPipelineExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RetryPipelineExecutionResponse response = api.retryPipelineExecution(xAmzTarget, retryPipelineExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Finds SageMaker resources that match a search query. Matching resources are returned as a list of &lt;code&gt;SearchRecord&lt;/code&gt; objects in the response. You can sort the search results by any resource property in a ascending or descending order.&lt;/p&gt; &lt;p&gt;You can query against the following value types: numeric, text, Boolean, and timestamp.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Search API may provide access to otherwise restricted data. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html\&quot;&gt;Amazon SageMaker API Permissions: Actions, Permissions, and Resources Reference&lt;/a&gt; for more information.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        String xAmzTarget = null;
        SearchRequest searchRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchResponse response = api.search(xAmzTarget, searchRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Notifies the pipeline that the execution of a callback step failed, along with a message describing why. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendPipelineExecutionStepFailureTest() throws ApiException {
        String xAmzTarget = null;
        SendPipelineExecutionStepFailureRequest sendPipelineExecutionStepFailureRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendPipelineExecutionStepFailureResponse response = api.sendPipelineExecutionStepFailure(xAmzTarget, sendPipelineExecutionStepFailureRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Notifies the pipeline that the execution of a callback step succeeded and provides a list of the step&#39;s output parameters. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendPipelineExecutionStepSuccessTest() throws ApiException {
        String xAmzTarget = null;
        SendPipelineExecutionStepSuccessRequest sendPipelineExecutionStepSuccessRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendPipelineExecutionStepSuccessResponse response = api.sendPipelineExecutionStepSuccess(xAmzTarget, sendPipelineExecutionStepSuccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a stage in an edge deployment plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startEdgeDeploymentStageTest() throws ApiException {
        String xAmzTarget = null;
        StartEdgeDeploymentStageRequest startEdgeDeploymentStageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.startEdgeDeploymentStage(xAmzTarget, startEdgeDeploymentStageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an inference experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startInferenceExperimentTest() throws ApiException {
        String xAmzTarget = null;
        StartInferenceExperimentRequest startInferenceExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartInferenceExperimentResponse response = api.startInferenceExperiment(xAmzTarget, startInferenceExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a previously stopped monitoring schedule.&lt;/p&gt; &lt;note&gt; &lt;p&gt;By default, when you successfully create a new schedule, the status of a monitoring schedule is &lt;code&gt;scheduled&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMonitoringScheduleTest() throws ApiException {
        String xAmzTarget = null;
        StartMonitoringScheduleRequest startMonitoringScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.startMonitoringSchedule(xAmzTarget, startMonitoringScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Launches an ML compute instance with the latest version of the libraries and attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the notebook instance status to &lt;code&gt;InService&lt;/code&gt;. A notebook instance&#39;s status must be &lt;code&gt;InService&lt;/code&gt; before you can connect to your Jupyter notebook. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startNotebookInstanceTest() throws ApiException {
        String xAmzTarget = null;
        StartNotebookInstanceInput startNotebookInstanceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.startNotebookInstance(xAmzTarget, startNotebookInstanceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a pipeline execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPipelineExecutionTest() throws ApiException {
        String xAmzTarget = null;
        StartPipelineExecutionRequest startPipelineExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartPipelineExecutionResponse response = api.startPipelineExecution(xAmzTarget, startPipelineExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A method for forcing a running job to shut down.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopAutoMLJobTest() throws ApiException {
        String xAmzTarget = null;
        StopAutoMLJobRequest stopAutoMLJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopAutoMLJob(xAmzTarget, stopAutoMLJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops a model compilation job.&lt;/p&gt; &lt;p&gt; To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the job down. If the job hasn&#39;t stopped, it sends the SIGKILL signal.&lt;/p&gt; &lt;p&gt;When it receives a &lt;code&gt;StopCompilationJob&lt;/code&gt; request, Amazon SageMaker changes the &lt;code&gt;CompilationJobStatus&lt;/code&gt; of the job to &lt;code&gt;Stopping&lt;/code&gt;. After Amazon SageMaker stops the job, it sets the &lt;code&gt;CompilationJobStatus&lt;/code&gt; to &lt;code&gt;Stopped&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopCompilationJobTest() throws ApiException {
        String xAmzTarget = null;
        StopCompilationJobRequest stopCompilationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopCompilationJob(xAmzTarget, stopCompilationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a stage in an edge deployment plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopEdgeDeploymentStageTest() throws ApiException {
        String xAmzTarget = null;
        StopEdgeDeploymentStageRequest stopEdgeDeploymentStageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopEdgeDeploymentStage(xAmzTarget, stopEdgeDeploymentStageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Request to stop an edge packaging job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopEdgePackagingJobTest() throws ApiException {
        String xAmzTarget = null;
        StopEdgePackagingJobRequest stopEdgePackagingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopEdgePackagingJob(xAmzTarget, stopEdgePackagingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched.&lt;/p&gt; &lt;p&gt;All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the &lt;code&gt;Stopped&lt;/code&gt; state, it releases all reserved resources for the tuning job.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopHyperParameterTuningJobTest() throws ApiException {
        String xAmzTarget = null;
        StopHyperParameterTuningJobRequest stopHyperParameterTuningJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopHyperParameterTuningJob(xAmzTarget, stopHyperParameterTuningJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops an inference experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopInferenceExperimentTest() throws ApiException {
        String xAmzTarget = null;
        StopInferenceExperimentRequest stopInferenceExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopInferenceExperimentResponse response = api.stopInferenceExperiment(xAmzTarget, stopInferenceExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops an Inference Recommender job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopInferenceRecommendationsJobTest() throws ApiException {
        String xAmzTarget = null;
        StopInferenceRecommendationsJobRequest stopInferenceRecommendationsJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopInferenceRecommendationsJob(xAmzTarget, stopInferenceRecommendationsJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a running labeling job. A job that is stopped cannot be restarted. Any results obtained before the job is stopped are placed in the Amazon S3 output bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopLabelingJobTest() throws ApiException {
        String xAmzTarget = null;
        StopLabelingJobRequest stopLabelingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopLabelingJob(xAmzTarget, stopLabelingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a previously started monitoring schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopMonitoringScheduleTest() throws ApiException {
        String xAmzTarget = null;
        StopMonitoringScheduleRequest stopMonitoringScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopMonitoringSchedule(xAmzTarget, stopMonitoringScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call &lt;code&gt;StopNotebookInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To access data on the ML storage volume for a notebook instance that has been terminated, call the &lt;code&gt;StartNotebookInstance&lt;/code&gt; API. &lt;code&gt;StartNotebookInstance&lt;/code&gt; launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopNotebookInstanceTest() throws ApiException {
        String xAmzTarget = null;
        StopNotebookInstanceInput stopNotebookInstanceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopNotebookInstance(xAmzTarget, stopNotebookInstanceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops a pipeline execution.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Callback Step&lt;/b&gt; &lt;/p&gt; &lt;p&gt;A pipeline execution won&#39;t stop while a callback step is running. When you call &lt;code&gt;StopPipelineExecution&lt;/code&gt; on a pipeline execution with a running callback step, SageMaker Pipelines sends an additional Amazon SQS message to the specified SQS queue. The body of the SQS message contains a \&quot;Status\&quot; field which is set to \&quot;Stopping\&quot;.&lt;/p&gt; &lt;p&gt;You should add logic to your Amazon SQS message consumer to take any needed action (for example, resource cleanup) upon receipt of the message followed by a call to &lt;code&gt;SendPipelineExecutionStepSuccess&lt;/code&gt; or &lt;code&gt;SendPipelineExecutionStepFailure&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Lambda Step&lt;/b&gt; &lt;/p&gt; &lt;p&gt;A pipeline execution can&#39;t be stopped while a lambda step is running because the Lambda function invoked by the lambda step can&#39;t be stopped. If you attempt to stop the execution while the Lambda function is running, the pipeline waits for the Lambda function to finish or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function finishes, the pipeline execution status is &lt;code&gt;Stopped&lt;/code&gt;. If the timeout is hit the pipeline execution status is &lt;code&gt;Failed&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopPipelineExecutionTest() throws ApiException {
        String xAmzTarget = null;
        StopPipelineExecutionRequest stopPipelineExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopPipelineExecutionResponse response = api.stopPipelineExecution(xAmzTarget, stopPipelineExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a processing job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopProcessingJobTest() throws ApiException {
        String xAmzTarget = null;
        StopProcessingJobRequest stopProcessingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopProcessingJob(xAmzTarget, stopProcessingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops a training job. To stop a job, SageMaker sends the algorithm the &lt;code&gt;SIGTERM&lt;/code&gt; signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts, so the results of the training is not lost. &lt;/p&gt; &lt;p&gt;When it receives a &lt;code&gt;StopTrainingJob&lt;/code&gt; request, SageMaker changes the status of the job to &lt;code&gt;Stopping&lt;/code&gt;. After SageMaker stops the job, it sets the status to &lt;code&gt;Stopped&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopTrainingJobTest() throws ApiException {
        String xAmzTarget = null;
        StopTrainingJobRequest stopTrainingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopTrainingJob(xAmzTarget, stopTrainingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops a batch transform job.&lt;/p&gt; &lt;p&gt;When Amazon SageMaker receives a &lt;code&gt;StopTransformJob&lt;/code&gt; request, the status of the job changes to &lt;code&gt;Stopping&lt;/code&gt;. After Amazon SageMaker stops the job, the status is set to &lt;code&gt;Stopped&lt;/code&gt;. When you stop a batch transform job before it is completed, Amazon SageMaker doesn&#39;t store the job&#39;s output in Amazon S3.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopTransformJobTest() throws ApiException {
        String xAmzTarget = null;
        StopTransformJobRequest stopTransformJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopTransformJob(xAmzTarget, stopTransformJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateActionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateActionRequest updateActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateActionResponse response = api.updateAction(xAmzTarget, updateActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the properties of an AppImageConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAppImageConfigTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAppImageConfigRequest updateAppImageConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAppImageConfigResponse response = api.updateAppImageConfig(xAmzTarget, updateAppImageConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateArtifactTest() throws ApiException {
        String xAmzTarget = null;
        UpdateArtifactRequest updateArtifactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateArtifactResponse response = api.updateArtifact(xAmzTarget, updateArtifactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified Git repository with the specified values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCodeRepositoryTest() throws ApiException {
        String xAmzTarget = null;
        UpdateCodeRepositoryInput updateCodeRepositoryInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateCodeRepositoryOutput response = api.updateCodeRepository(xAmzTarget, updateCodeRepositoryInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a context.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContextTest() throws ApiException {
        String xAmzTarget = null;
        UpdateContextRequest updateContextRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateContextResponse response = api.updateContext(xAmzTarget, updateContextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a fleet of devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceFleetTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDeviceFleetRequest updateDeviceFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateDeviceFleet(xAmzTarget, updateDeviceFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates one or more devices in a fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDevicesTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDevicesRequest updateDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateDevices(xAmzTarget, updateDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the default settings for new user profiles in the domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDomainRequest updateDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDomainResponse response = api.updateDomain(xAmzTarget, updateDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deploys the new &lt;code&gt;EndpointConfig&lt;/code&gt; specified in the request, switches to using newly created endpoint, and then deletes resources provisioned for the endpoint using the previous &lt;code&gt;EndpointConfig&lt;/code&gt; (there is no availability loss). &lt;/p&gt; &lt;p&gt;When SageMaker receives the request, it sets the endpoint status to &lt;code&gt;Updating&lt;/code&gt;. After updating the endpoint, it sets the status to &lt;code&gt;InService&lt;/code&gt;. To check the status of an endpoint, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html\&quot;&gt;DescribeEndpoint&lt;/a&gt; API. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You must not delete an &lt;code&gt;EndpointConfig&lt;/code&gt; in use by an endpoint that is live or while the &lt;code&gt;UpdateEndpoint&lt;/code&gt; or &lt;code&gt;CreateEndpoint&lt;/code&gt; operations are being performed on the endpoint. To update an endpoint, you must create a new &lt;code&gt;EndpointConfig&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you delete the &lt;code&gt;EndpointConfig&lt;/code&gt; of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEndpointTest() throws ApiException {
        String xAmzTarget = null;
        UpdateEndpointInput updateEndpointInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEndpointOutput response = api.updateEndpoint(xAmzTarget, updateEndpointInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to &lt;code&gt;Updating&lt;/code&gt;. After updating the endpoint, it sets the status to &lt;code&gt;InService&lt;/code&gt;. To check the status of an endpoint, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html\&quot;&gt;DescribeEndpoint&lt;/a&gt; API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEndpointWeightsAndCapacitiesTest() throws ApiException {
        String xAmzTarget = null;
        UpdateEndpointWeightsAndCapacitiesInput updateEndpointWeightsAndCapacitiesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEndpointWeightsAndCapacitiesOutput response = api.updateEndpointWeightsAndCapacities(xAmzTarget, updateEndpointWeightsAndCapacitiesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds, updates, or removes the description of an experiment. Updates the display name of an experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExperimentTest() throws ApiException {
        String xAmzTarget = null;
        UpdateExperimentRequest updateExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateExperimentResponse response = api.updateExperiment(xAmzTarget, updateExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the feature group by either adding features or updating the online store configuration. Use one of the following request parameters at a time while using the &lt;code&gt;UpdateFeatureGroup&lt;/code&gt; API.&lt;/p&gt; &lt;p&gt;You can add features for your feature group using the &lt;code&gt;FeatureAdditions&lt;/code&gt; request parameter. Features cannot be removed from a feature group.&lt;/p&gt; &lt;p&gt;You can update the online store configuration by using the &lt;code&gt;OnlineStoreConfig&lt;/code&gt; request parameter. If a &lt;code&gt;TtlDuration&lt;/code&gt; is specified, the default &lt;code&gt;TtlDuration&lt;/code&gt; applies for all records added to the feature group &lt;i&gt;after the feature group is updated&lt;/i&gt;. If a record level &lt;code&gt;TtlDuration&lt;/code&gt; exists from using the &lt;code&gt;PutRecord&lt;/code&gt; API, the record level &lt;code&gt;TtlDuration&lt;/code&gt; applies to that record instead of the default &lt;code&gt;TtlDuration&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFeatureGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFeatureGroupRequest updateFeatureGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFeatureGroupResponse response = api.updateFeatureGroup(xAmzTarget, updateFeatureGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the description and parameters of the feature group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFeatureMetadataTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFeatureMetadataRequest updateFeatureMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateFeatureMetadata(xAmzTarget, updateFeatureMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update a hub.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Hub APIs are only callable through SageMaker Studio.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHubTest() throws ApiException {
        String xAmzTarget = null;
        UpdateHubRequest updateHubRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateHubResponse response = api.updateHub(xAmzTarget, updateHubRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the properties of a SageMaker image. To change the image&#39;s tags, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html\&quot;&gt;AddTags&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteTags.html\&quot;&gt;DeleteTags&lt;/a&gt; APIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateImageTest() throws ApiException {
        String xAmzTarget = null;
        UpdateImageRequest updateImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateImageResponse response = api.updateImage(xAmzTarget, updateImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the properties of a SageMaker image version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateImageVersionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateImageVersionRequest updateImageVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateImageVersionResponse response = api.updateImageVersion(xAmzTarget, updateImageVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Updates an inference experiment that you created. The status of the inference experiment has to be either &lt;code&gt;Created&lt;/code&gt;, &lt;code&gt;Running&lt;/code&gt;. For more information on the status of an inference experiment, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeInferenceExperiment.html\&quot;&gt;DescribeInferenceExperiment&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInferenceExperimentTest() throws ApiException {
        String xAmzTarget = null;
        UpdateInferenceExperimentRequest updateInferenceExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateInferenceExperimentResponse response = api.updateInferenceExperiment(xAmzTarget, updateInferenceExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update an Amazon SageMaker Model Card.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You cannot update both model card content and model card status in a single call.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateModelCardTest() throws ApiException {
        String xAmzTarget = null;
        UpdateModelCardRequest updateModelCardRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateModelCardResponse response = api.updateModelCard(xAmzTarget, updateModelCardRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a versioned model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateModelPackageTest() throws ApiException {
        String xAmzTarget = null;
        UpdateModelPackageInput updateModelPackageInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateModelPackageOutput response = api.updateModelPackage(xAmzTarget, updateModelPackageInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update the parameters of a model monitor alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMonitoringAlertTest() throws ApiException {
        String xAmzTarget = null;
        UpdateMonitoringAlertRequest updateMonitoringAlertRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMonitoringAlertResponse response = api.updateMonitoringAlert(xAmzTarget, updateMonitoringAlertRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a previously created schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMonitoringScheduleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateMonitoringScheduleRequest updateMonitoringScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMonitoringScheduleResponse response = api.updateMonitoringSchedule(xAmzTarget, updateMonitoringScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a notebook instance. NotebookInstance updates include upgrading or downgrading the ML compute instance used for your notebook instance to accommodate changes in your workload requirements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNotebookInstanceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateNotebookInstanceInput updateNotebookInstanceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateNotebookInstance(xAmzTarget, updateNotebookInstanceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a notebook instance lifecycle configuration created with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html\&quot;&gt;CreateNotebookInstanceLifecycleConfig&lt;/a&gt; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNotebookInstanceLifecycleConfigTest() throws ApiException {
        String xAmzTarget = null;
        UpdateNotebookInstanceLifecycleConfigInput updateNotebookInstanceLifecycleConfigInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateNotebookInstanceLifecycleConfig(xAmzTarget, updateNotebookInstanceLifecycleConfigInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePipelineTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePipelineRequest updatePipelineRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePipelineResponse response = api.updatePipeline(xAmzTarget, updatePipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a pipeline execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePipelineExecutionTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePipelineExecutionRequest updatePipelineExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePipelineExecutionResponse response = api.updatePipelineExecution(xAmzTarget, updatePipelineExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a machine learning (ML) project that is created from a template that sets up an ML pipeline from training to deploying an approved model.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must not update a project that is in use. If you update the &lt;code&gt;ServiceCatalogProvisioningUpdateDetails&lt;/code&gt; of a project that is active or being created, or updated, you may lose resources already created by the project.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProjectInput updateProjectInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProjectOutput response = api.updateProject(xAmzTarget, updateProjectInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the settings of a space.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpaceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateSpaceRequest updateSpaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSpaceResponse response = api.updateSpace(xAmzTarget, updateSpaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update a model training job to request a new Debugger profiling configuration or to change warm pool retention length.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrainingJobTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTrainingJobRequest updateTrainingJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTrainingJobResponse response = api.updateTrainingJob(xAmzTarget, updateTrainingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the display name of a trial.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrialTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTrialRequest updateTrialRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTrialResponse response = api.updateTrial(xAmzTarget, updateTrialRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates one or more properties of a trial component.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrialComponentTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTrialComponentRequest updateTrialComponentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTrialComponentResponse response = api.updateTrialComponent(xAmzTarget, updateTrialComponentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a user profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserProfileTest() throws ApiException {
        String xAmzTarget = null;
        UpdateUserProfileRequest updateUserProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateUserProfileResponse response = api.updateUserProfile(xAmzTarget, updateUserProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this operation to update your workforce. You can use this operation to require that workers use specific IP addresses to work on tasks and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.&lt;/p&gt; &lt;p&gt;The worker portal is now supported in VPC and public internet.&lt;/p&gt; &lt;p&gt; Use &lt;code&gt;SourceIpConfig&lt;/code&gt; to restrict worker access to tasks to a specific range of IP addresses. You specify allowed IP addresses by creating a list of up to ten &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;CIDRs&lt;/a&gt;. By default, a workforce isn&#39;t restricted to specific IP addresses. If you specify a range of IP addresses, workers who attempt to access tasks using any IP address outside the specified range are denied and get a &lt;code&gt;Not Found&lt;/code&gt; error message on the worker portal.&lt;/p&gt; &lt;p&gt;To restrict access to all the workers in public internet, add the &lt;code&gt;SourceIpConfig&lt;/code&gt; CIDR value as \&quot;10.0.0.0/16\&quot;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Use &lt;code&gt;OidcConfig&lt;/code&gt; to update the configuration of a workforce created using your own OIDC IdP. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You can only update your OIDC IdP configuration when there are no work teams associated with your workforce. You can delete work teams using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html\&quot;&gt;DeleteWorkteam&lt;/a&gt; operation.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you can view details about your update workforce using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeWorkforce.html\&quot;&gt;DescribeWorkforce&lt;/a&gt; operation.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation only applies to private workforces.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkforceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateWorkforceRequest updateWorkforceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateWorkforceResponse response = api.updateWorkforce(xAmzTarget, updateWorkforceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing work team with new member definitions or description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkteamTest() throws ApiException {
        String xAmzTarget = null;
        UpdateWorkteamRequest updateWorkteamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateWorkteamResponse response = api.updateWorkteam(xAmzTarget, updateWorkteamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
