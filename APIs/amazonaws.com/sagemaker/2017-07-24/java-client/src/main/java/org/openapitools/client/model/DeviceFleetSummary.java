/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary of the device fleet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceFleetSummary {
  public static final String SERIALIZED_NAME_DEVICE_FLEET_ARN = "DeviceFleetArn";
  @SerializedName(SERIALIZED_NAME_DEVICE_FLEET_ARN)
  private String deviceFleetArn;

  public static final String SERIALIZED_NAME_DEVICE_FLEET_NAME = "DeviceFleetName";
  @SerializedName(SERIALIZED_NAME_DEVICE_FLEET_NAME)
  private String deviceFleetName;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public DeviceFleetSummary() {
  }

  public DeviceFleetSummary deviceFleetArn(String deviceFleetArn) {
    this.deviceFleetArn = deviceFleetArn;
    return this;
  }

  /**
   * Get deviceFleetArn
   * @return deviceFleetArn
   */
  @javax.annotation.Nonnull
  public String getDeviceFleetArn() {
    return deviceFleetArn;
  }

  public void setDeviceFleetArn(String deviceFleetArn) {
    this.deviceFleetArn = deviceFleetArn;
  }


  public DeviceFleetSummary deviceFleetName(String deviceFleetName) {
    this.deviceFleetName = deviceFleetName;
    return this;
  }

  /**
   * Get deviceFleetName
   * @return deviceFleetName
   */
  @javax.annotation.Nonnull
  public String getDeviceFleetName() {
    return deviceFleetName;
  }

  public void setDeviceFleetName(String deviceFleetName) {
    this.deviceFleetName = deviceFleetName;
  }


  public DeviceFleetSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DeviceFleetSummary lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceFleetSummary deviceFleetSummary = (DeviceFleetSummary) o;
    return Objects.equals(this.deviceFleetArn, deviceFleetSummary.deviceFleetArn) &&
        Objects.equals(this.deviceFleetName, deviceFleetSummary.deviceFleetName) &&
        Objects.equals(this.creationTime, deviceFleetSummary.creationTime) &&
        Objects.equals(this.lastModifiedTime, deviceFleetSummary.lastModifiedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceFleetArn, deviceFleetName, creationTime, lastModifiedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceFleetSummary {\n");
    sb.append("    deviceFleetArn: ").append(toIndentedString(deviceFleetArn)).append("\n");
    sb.append("    deviceFleetName: ").append(toIndentedString(deviceFleetName)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceFleetArn");
    openapiFields.add("DeviceFleetName");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModifiedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeviceFleetArn");
    openapiRequiredFields.add("DeviceFleetName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceFleetSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceFleetSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceFleetSummary is not found in the empty JSON string", DeviceFleetSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceFleetSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceFleetSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceFleetSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DeviceFleetArn`
      String.validateJsonElement(jsonObj.get("DeviceFleetArn"));
      // validate the required field `DeviceFleetName`
      String.validateJsonElement(jsonObj.get("DeviceFleetName"));
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceFleetSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceFleetSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceFleetSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceFleetSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceFleetSummary>() {
           @Override
           public void write(JsonWriter out, DeviceFleetSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceFleetSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceFleetSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceFleetSummary
   * @throws IOException if the JSON string is invalid with respect to DeviceFleetSummary
   */
  public static DeviceFleetSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceFleetSummary.class);
  }

  /**
   * Convert an instance of DeviceFleetSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

