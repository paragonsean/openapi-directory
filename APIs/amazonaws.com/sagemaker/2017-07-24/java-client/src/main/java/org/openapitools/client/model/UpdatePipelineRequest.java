/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreatePipelineRequestPipelineDefinitionS3Location;
import org.openapitools.client.model.UpdatePipelineRequestParallelismConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePipelineRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePipelineRequest {
  public static final String SERIALIZED_NAME_PIPELINE_NAME = "PipelineName";
  @SerializedName(SERIALIZED_NAME_PIPELINE_NAME)
  private String pipelineName;

  public static final String SERIALIZED_NAME_PIPELINE_DISPLAY_NAME = "PipelineDisplayName";
  @SerializedName(SERIALIZED_NAME_PIPELINE_DISPLAY_NAME)
  private String pipelineDisplayName;

  public static final String SERIALIZED_NAME_PIPELINE_DEFINITION = "PipelineDefinition";
  @SerializedName(SERIALIZED_NAME_PIPELINE_DEFINITION)
  private String pipelineDefinition;

  public static final String SERIALIZED_NAME_PIPELINE_DEFINITION_S3_LOCATION = "PipelineDefinitionS3Location";
  @SerializedName(SERIALIZED_NAME_PIPELINE_DEFINITION_S3_LOCATION)
  private CreatePipelineRequestPipelineDefinitionS3Location pipelineDefinitionS3Location;

  public static final String SERIALIZED_NAME_PIPELINE_DESCRIPTION = "PipelineDescription";
  @SerializedName(SERIALIZED_NAME_PIPELINE_DESCRIPTION)
  private String pipelineDescription;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_PARALLELISM_CONFIGURATION = "ParallelismConfiguration";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_CONFIGURATION)
  private UpdatePipelineRequestParallelismConfiguration parallelismConfiguration;

  public UpdatePipelineRequest() {
  }

  public UpdatePipelineRequest pipelineName(String pipelineName) {
    this.pipelineName = pipelineName;
    return this;
  }

  /**
   * Get pipelineName
   * @return pipelineName
   */
  @javax.annotation.Nonnull
  public String getPipelineName() {
    return pipelineName;
  }

  public void setPipelineName(String pipelineName) {
    this.pipelineName = pipelineName;
  }


  public UpdatePipelineRequest pipelineDisplayName(String pipelineDisplayName) {
    this.pipelineDisplayName = pipelineDisplayName;
    return this;
  }

  /**
   * Get pipelineDisplayName
   * @return pipelineDisplayName
   */
  @javax.annotation.Nullable
  public String getPipelineDisplayName() {
    return pipelineDisplayName;
  }

  public void setPipelineDisplayName(String pipelineDisplayName) {
    this.pipelineDisplayName = pipelineDisplayName;
  }


  public UpdatePipelineRequest pipelineDefinition(String pipelineDefinition) {
    this.pipelineDefinition = pipelineDefinition;
    return this;
  }

  /**
   * Get pipelineDefinition
   * @return pipelineDefinition
   */
  @javax.annotation.Nullable
  public String getPipelineDefinition() {
    return pipelineDefinition;
  }

  public void setPipelineDefinition(String pipelineDefinition) {
    this.pipelineDefinition = pipelineDefinition;
  }


  public UpdatePipelineRequest pipelineDefinitionS3Location(CreatePipelineRequestPipelineDefinitionS3Location pipelineDefinitionS3Location) {
    this.pipelineDefinitionS3Location = pipelineDefinitionS3Location;
    return this;
  }

  /**
   * Get pipelineDefinitionS3Location
   * @return pipelineDefinitionS3Location
   */
  @javax.annotation.Nullable
  public CreatePipelineRequestPipelineDefinitionS3Location getPipelineDefinitionS3Location() {
    return pipelineDefinitionS3Location;
  }

  public void setPipelineDefinitionS3Location(CreatePipelineRequestPipelineDefinitionS3Location pipelineDefinitionS3Location) {
    this.pipelineDefinitionS3Location = pipelineDefinitionS3Location;
  }


  public UpdatePipelineRequest pipelineDescription(String pipelineDescription) {
    this.pipelineDescription = pipelineDescription;
    return this;
  }

  /**
   * Get pipelineDescription
   * @return pipelineDescription
   */
  @javax.annotation.Nullable
  public String getPipelineDescription() {
    return pipelineDescription;
  }

  public void setPipelineDescription(String pipelineDescription) {
    this.pipelineDescription = pipelineDescription;
  }


  public UpdatePipelineRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public UpdatePipelineRequest parallelismConfiguration(UpdatePipelineRequestParallelismConfiguration parallelismConfiguration) {
    this.parallelismConfiguration = parallelismConfiguration;
    return this;
  }

  /**
   * Get parallelismConfiguration
   * @return parallelismConfiguration
   */
  @javax.annotation.Nullable
  public UpdatePipelineRequestParallelismConfiguration getParallelismConfiguration() {
    return parallelismConfiguration;
  }

  public void setParallelismConfiguration(UpdatePipelineRequestParallelismConfiguration parallelismConfiguration) {
    this.parallelismConfiguration = parallelismConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePipelineRequest updatePipelineRequest = (UpdatePipelineRequest) o;
    return Objects.equals(this.pipelineName, updatePipelineRequest.pipelineName) &&
        Objects.equals(this.pipelineDisplayName, updatePipelineRequest.pipelineDisplayName) &&
        Objects.equals(this.pipelineDefinition, updatePipelineRequest.pipelineDefinition) &&
        Objects.equals(this.pipelineDefinitionS3Location, updatePipelineRequest.pipelineDefinitionS3Location) &&
        Objects.equals(this.pipelineDescription, updatePipelineRequest.pipelineDescription) &&
        Objects.equals(this.roleArn, updatePipelineRequest.roleArn) &&
        Objects.equals(this.parallelismConfiguration, updatePipelineRequest.parallelismConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pipelineName, pipelineDisplayName, pipelineDefinition, pipelineDefinitionS3Location, pipelineDescription, roleArn, parallelismConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePipelineRequest {\n");
    sb.append("    pipelineName: ").append(toIndentedString(pipelineName)).append("\n");
    sb.append("    pipelineDisplayName: ").append(toIndentedString(pipelineDisplayName)).append("\n");
    sb.append("    pipelineDefinition: ").append(toIndentedString(pipelineDefinition)).append("\n");
    sb.append("    pipelineDefinitionS3Location: ").append(toIndentedString(pipelineDefinitionS3Location)).append("\n");
    sb.append("    pipelineDescription: ").append(toIndentedString(pipelineDescription)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    parallelismConfiguration: ").append(toIndentedString(parallelismConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PipelineName");
    openapiFields.add("PipelineDisplayName");
    openapiFields.add("PipelineDefinition");
    openapiFields.add("PipelineDefinitionS3Location");
    openapiFields.add("PipelineDescription");
    openapiFields.add("RoleArn");
    openapiFields.add("ParallelismConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PipelineName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePipelineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePipelineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePipelineRequest is not found in the empty JSON string", UpdatePipelineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePipelineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePipelineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdatePipelineRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `PipelineName`
      String.validateJsonElement(jsonObj.get("PipelineName"));
      // validate the optional field `PipelineDisplayName`
      if (jsonObj.get("PipelineDisplayName") != null && !jsonObj.get("PipelineDisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineDisplayName"));
      }
      // validate the optional field `PipelineDefinition`
      if (jsonObj.get("PipelineDefinition") != null && !jsonObj.get("PipelineDefinition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineDefinition"));
      }
      // validate the optional field `PipelineDefinitionS3Location`
      if (jsonObj.get("PipelineDefinitionS3Location") != null && !jsonObj.get("PipelineDefinitionS3Location").isJsonNull()) {
        CreatePipelineRequestPipelineDefinitionS3Location.validateJsonElement(jsonObj.get("PipelineDefinitionS3Location"));
      }
      // validate the optional field `PipelineDescription`
      if (jsonObj.get("PipelineDescription") != null && !jsonObj.get("PipelineDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineDescription"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `ParallelismConfiguration`
      if (jsonObj.get("ParallelismConfiguration") != null && !jsonObj.get("ParallelismConfiguration").isJsonNull()) {
        UpdatePipelineRequestParallelismConfiguration.validateJsonElement(jsonObj.get("ParallelismConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePipelineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePipelineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePipelineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePipelineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePipelineRequest>() {
           @Override
           public void write(JsonWriter out, UpdatePipelineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePipelineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePipelineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePipelineRequest
   * @throws IOException if the JSON string is invalid with respect to UpdatePipelineRequest
   */
  public static UpdatePipelineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePipelineRequest.class);
  }

  /**
   * Convert an instance of UpdatePipelineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

