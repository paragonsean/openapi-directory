/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WorkteamNotificationConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeWorkteamResponseWorkteam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeWorkteamResponseWorkteam {
  public static final String SERIALIZED_NAME_WORKTEAM_NAME = "WorkteamName";
  @SerializedName(SERIALIZED_NAME_WORKTEAM_NAME)
  private String workteamName;

  public static final String SERIALIZED_NAME_MEMBER_DEFINITIONS = "MemberDefinitions";
  @SerializedName(SERIALIZED_NAME_MEMBER_DEFINITIONS)
  private List memberDefinitions;

  public static final String SERIALIZED_NAME_WORKTEAM_ARN = "WorkteamArn";
  @SerializedName(SERIALIZED_NAME_WORKTEAM_ARN)
  private String workteamArn;

  public static final String SERIALIZED_NAME_WORKFORCE_ARN = "WorkforceArn";
  @SerializedName(SERIALIZED_NAME_WORKFORCE_ARN)
  private String workforceArn;

  public static final String SERIALIZED_NAME_PRODUCT_LISTING_IDS = "ProductListingIds";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LISTING_IDS)
  private List productListingIds;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SUB_DOMAIN = "SubDomain";
  @SerializedName(SERIALIZED_NAME_SUB_DOMAIN)
  private String subDomain;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "LastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  private OffsetDateTime lastUpdatedDate;

  public static final String SERIALIZED_NAME_NOTIFICATION_CONFIGURATION = "NotificationConfiguration";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CONFIGURATION)
  private WorkteamNotificationConfiguration notificationConfiguration;

  public DescribeWorkteamResponseWorkteam() {
  }

  public DescribeWorkteamResponseWorkteam workteamName(String workteamName) {
    this.workteamName = workteamName;
    return this;
  }

  /**
   * Get workteamName
   * @return workteamName
   */
  @javax.annotation.Nonnull
  public String getWorkteamName() {
    return workteamName;
  }

  public void setWorkteamName(String workteamName) {
    this.workteamName = workteamName;
  }


  public DescribeWorkteamResponseWorkteam memberDefinitions(List memberDefinitions) {
    this.memberDefinitions = memberDefinitions;
    return this;
  }

  /**
   * Get memberDefinitions
   * @return memberDefinitions
   */
  @javax.annotation.Nonnull
  public List getMemberDefinitions() {
    return memberDefinitions;
  }

  public void setMemberDefinitions(List memberDefinitions) {
    this.memberDefinitions = memberDefinitions;
  }


  public DescribeWorkteamResponseWorkteam workteamArn(String workteamArn) {
    this.workteamArn = workteamArn;
    return this;
  }

  /**
   * Get workteamArn
   * @return workteamArn
   */
  @javax.annotation.Nonnull
  public String getWorkteamArn() {
    return workteamArn;
  }

  public void setWorkteamArn(String workteamArn) {
    this.workteamArn = workteamArn;
  }


  public DescribeWorkteamResponseWorkteam workforceArn(String workforceArn) {
    this.workforceArn = workforceArn;
    return this;
  }

  /**
   * Get workforceArn
   * @return workforceArn
   */
  @javax.annotation.Nullable
  public String getWorkforceArn() {
    return workforceArn;
  }

  public void setWorkforceArn(String workforceArn) {
    this.workforceArn = workforceArn;
  }


  public DescribeWorkteamResponseWorkteam productListingIds(List productListingIds) {
    this.productListingIds = productListingIds;
    return this;
  }

  /**
   * Get productListingIds
   * @return productListingIds
   */
  @javax.annotation.Nullable
  public List getProductListingIds() {
    return productListingIds;
  }

  public void setProductListingIds(List productListingIds) {
    this.productListingIds = productListingIds;
  }


  public DescribeWorkteamResponseWorkteam description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeWorkteamResponseWorkteam subDomain(String subDomain) {
    this.subDomain = subDomain;
    return this;
  }

  /**
   * Get subDomain
   * @return subDomain
   */
  @javax.annotation.Nullable
  public String getSubDomain() {
    return subDomain;
  }

  public void setSubDomain(String subDomain) {
    this.subDomain = subDomain;
  }


  public DescribeWorkteamResponseWorkteam createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public DescribeWorkteamResponseWorkteam lastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

  /**
   * Get lastUpdatedDate
   * @return lastUpdatedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDate() {
    return lastUpdatedDate;
  }

  public void setLastUpdatedDate(OffsetDateTime lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
  }


  public DescribeWorkteamResponseWorkteam notificationConfiguration(WorkteamNotificationConfiguration notificationConfiguration) {
    this.notificationConfiguration = notificationConfiguration;
    return this;
  }

  /**
   * Get notificationConfiguration
   * @return notificationConfiguration
   */
  @javax.annotation.Nullable
  public WorkteamNotificationConfiguration getNotificationConfiguration() {
    return notificationConfiguration;
  }

  public void setNotificationConfiguration(WorkteamNotificationConfiguration notificationConfiguration) {
    this.notificationConfiguration = notificationConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeWorkteamResponseWorkteam describeWorkteamResponseWorkteam = (DescribeWorkteamResponseWorkteam) o;
    return Objects.equals(this.workteamName, describeWorkteamResponseWorkteam.workteamName) &&
        Objects.equals(this.memberDefinitions, describeWorkteamResponseWorkteam.memberDefinitions) &&
        Objects.equals(this.workteamArn, describeWorkteamResponseWorkteam.workteamArn) &&
        Objects.equals(this.workforceArn, describeWorkteamResponseWorkteam.workforceArn) &&
        Objects.equals(this.productListingIds, describeWorkteamResponseWorkteam.productListingIds) &&
        Objects.equals(this.description, describeWorkteamResponseWorkteam.description) &&
        Objects.equals(this.subDomain, describeWorkteamResponseWorkteam.subDomain) &&
        Objects.equals(this.createDate, describeWorkteamResponseWorkteam.createDate) &&
        Objects.equals(this.lastUpdatedDate, describeWorkteamResponseWorkteam.lastUpdatedDate) &&
        Objects.equals(this.notificationConfiguration, describeWorkteamResponseWorkteam.notificationConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workteamName, memberDefinitions, workteamArn, workforceArn, productListingIds, description, subDomain, createDate, lastUpdatedDate, notificationConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeWorkteamResponseWorkteam {\n");
    sb.append("    workteamName: ").append(toIndentedString(workteamName)).append("\n");
    sb.append("    memberDefinitions: ").append(toIndentedString(memberDefinitions)).append("\n");
    sb.append("    workteamArn: ").append(toIndentedString(workteamArn)).append("\n");
    sb.append("    workforceArn: ").append(toIndentedString(workforceArn)).append("\n");
    sb.append("    productListingIds: ").append(toIndentedString(productListingIds)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    subDomain: ").append(toIndentedString(subDomain)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("    notificationConfiguration: ").append(toIndentedString(notificationConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WorkteamName");
    openapiFields.add("MemberDefinitions");
    openapiFields.add("WorkteamArn");
    openapiFields.add("WorkforceArn");
    openapiFields.add("ProductListingIds");
    openapiFields.add("Description");
    openapiFields.add("SubDomain");
    openapiFields.add("CreateDate");
    openapiFields.add("LastUpdatedDate");
    openapiFields.add("NotificationConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("WorkteamName");
    openapiRequiredFields.add("MemberDefinitions");
    openapiRequiredFields.add("WorkteamArn");
    openapiRequiredFields.add("Description");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeWorkteamResponseWorkteam
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeWorkteamResponseWorkteam.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeWorkteamResponseWorkteam is not found in the empty JSON string", DescribeWorkteamResponseWorkteam.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeWorkteamResponseWorkteam.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeWorkteamResponseWorkteam` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeWorkteamResponseWorkteam.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `WorkteamName`
      String.validateJsonElement(jsonObj.get("WorkteamName"));
      // validate the required field `MemberDefinitions`
      List.validateJsonElement(jsonObj.get("MemberDefinitions"));
      // validate the required field `WorkteamArn`
      String.validateJsonElement(jsonObj.get("WorkteamArn"));
      // validate the optional field `WorkforceArn`
      if (jsonObj.get("WorkforceArn") != null && !jsonObj.get("WorkforceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkforceArn"));
      }
      // validate the optional field `ProductListingIds`
      if (jsonObj.get("ProductListingIds") != null && !jsonObj.get("ProductListingIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProductListingIds"));
      }
      // validate the required field `Description`
      String.validateJsonElement(jsonObj.get("Description"));
      // validate the optional field `SubDomain`
      if (jsonObj.get("SubDomain") != null && !jsonObj.get("SubDomain").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubDomain"));
      }
      // validate the optional field `CreateDate`
      if (jsonObj.get("CreateDate") != null && !jsonObj.get("CreateDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreateDate"));
      }
      // validate the optional field `LastUpdatedDate`
      if (jsonObj.get("LastUpdatedDate") != null && !jsonObj.get("LastUpdatedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedDate"));
      }
      // validate the optional field `NotificationConfiguration`
      if (jsonObj.get("NotificationConfiguration") != null && !jsonObj.get("NotificationConfiguration").isJsonNull()) {
        WorkteamNotificationConfiguration.validateJsonElement(jsonObj.get("NotificationConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeWorkteamResponseWorkteam.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeWorkteamResponseWorkteam' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeWorkteamResponseWorkteam> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeWorkteamResponseWorkteam.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeWorkteamResponseWorkteam>() {
           @Override
           public void write(JsonWriter out, DescribeWorkteamResponseWorkteam value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeWorkteamResponseWorkteam read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeWorkteamResponseWorkteam given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeWorkteamResponseWorkteam
   * @throws IOException if the JSON string is invalid with respect to DescribeWorkteamResponseWorkteam
   */
  public static DescribeWorkteamResponseWorkteam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeWorkteamResponseWorkteam.class);
  }

  /**
   * Convert an instance of DescribeWorkteamResponseWorkteam to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

