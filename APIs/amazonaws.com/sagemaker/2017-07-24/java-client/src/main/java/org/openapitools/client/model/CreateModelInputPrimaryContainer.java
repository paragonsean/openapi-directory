/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ContainerDefinitionImageConfig;
import org.openapitools.client.model.ContainerDefinitionModelDataSource;
import org.openapitools.client.model.ContainerDefinitionMultiModelConfig;
import org.openapitools.client.model.ContainerMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateModelInputPrimaryContainer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateModelInputPrimaryContainer {
  public static final String SERIALIZED_NAME_CONTAINER_HOSTNAME = "ContainerHostname";
  @SerializedName(SERIALIZED_NAME_CONTAINER_HOSTNAME)
  private String containerHostname;

  public static final String SERIALIZED_NAME_IMAGE = "Image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IMAGE_CONFIG = "ImageConfig";
  @SerializedName(SERIALIZED_NAME_IMAGE_CONFIG)
  private ContainerDefinitionImageConfig imageConfig;

  public static final String SERIALIZED_NAME_MODE = "Mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ContainerMode mode;

  public static final String SERIALIZED_NAME_MODEL_DATA_URL = "ModelDataUrl";
  @SerializedName(SERIALIZED_NAME_MODEL_DATA_URL)
  private String modelDataUrl;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "Environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Map environment;

  public static final String SERIALIZED_NAME_MODEL_PACKAGE_NAME = "ModelPackageName";
  @SerializedName(SERIALIZED_NAME_MODEL_PACKAGE_NAME)
  private String modelPackageName;

  public static final String SERIALIZED_NAME_INFERENCE_SPECIFICATION_NAME = "InferenceSpecificationName";
  @SerializedName(SERIALIZED_NAME_INFERENCE_SPECIFICATION_NAME)
  private String inferenceSpecificationName;

  public static final String SERIALIZED_NAME_MULTI_MODEL_CONFIG = "MultiModelConfig";
  @SerializedName(SERIALIZED_NAME_MULTI_MODEL_CONFIG)
  private ContainerDefinitionMultiModelConfig multiModelConfig;

  public static final String SERIALIZED_NAME_MODEL_DATA_SOURCE = "ModelDataSource";
  @SerializedName(SERIALIZED_NAME_MODEL_DATA_SOURCE)
  private ContainerDefinitionModelDataSource modelDataSource;

  public CreateModelInputPrimaryContainer() {
  }

  public CreateModelInputPrimaryContainer containerHostname(String containerHostname) {
    this.containerHostname = containerHostname;
    return this;
  }

  /**
   * Get containerHostname
   * @return containerHostname
   */
  @javax.annotation.Nullable
  public String getContainerHostname() {
    return containerHostname;
  }

  public void setContainerHostname(String containerHostname) {
    this.containerHostname = containerHostname;
  }


  public CreateModelInputPrimaryContainer image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public CreateModelInputPrimaryContainer imageConfig(ContainerDefinitionImageConfig imageConfig) {
    this.imageConfig = imageConfig;
    return this;
  }

  /**
   * Get imageConfig
   * @return imageConfig
   */
  @javax.annotation.Nullable
  public ContainerDefinitionImageConfig getImageConfig() {
    return imageConfig;
  }

  public void setImageConfig(ContainerDefinitionImageConfig imageConfig) {
    this.imageConfig = imageConfig;
  }


  public CreateModelInputPrimaryContainer mode(ContainerMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ContainerMode getMode() {
    return mode;
  }

  public void setMode(ContainerMode mode) {
    this.mode = mode;
  }


  public CreateModelInputPrimaryContainer modelDataUrl(String modelDataUrl) {
    this.modelDataUrl = modelDataUrl;
    return this;
  }

  /**
   * Get modelDataUrl
   * @return modelDataUrl
   */
  @javax.annotation.Nullable
  public String getModelDataUrl() {
    return modelDataUrl;
  }

  public void setModelDataUrl(String modelDataUrl) {
    this.modelDataUrl = modelDataUrl;
  }


  public CreateModelInputPrimaryContainer environment(Map environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Map getEnvironment() {
    return environment;
  }

  public void setEnvironment(Map environment) {
    this.environment = environment;
  }


  public CreateModelInputPrimaryContainer modelPackageName(String modelPackageName) {
    this.modelPackageName = modelPackageName;
    return this;
  }

  /**
   * Get modelPackageName
   * @return modelPackageName
   */
  @javax.annotation.Nullable
  public String getModelPackageName() {
    return modelPackageName;
  }

  public void setModelPackageName(String modelPackageName) {
    this.modelPackageName = modelPackageName;
  }


  public CreateModelInputPrimaryContainer inferenceSpecificationName(String inferenceSpecificationName) {
    this.inferenceSpecificationName = inferenceSpecificationName;
    return this;
  }

  /**
   * Get inferenceSpecificationName
   * @return inferenceSpecificationName
   */
  @javax.annotation.Nullable
  public String getInferenceSpecificationName() {
    return inferenceSpecificationName;
  }

  public void setInferenceSpecificationName(String inferenceSpecificationName) {
    this.inferenceSpecificationName = inferenceSpecificationName;
  }


  public CreateModelInputPrimaryContainer multiModelConfig(ContainerDefinitionMultiModelConfig multiModelConfig) {
    this.multiModelConfig = multiModelConfig;
    return this;
  }

  /**
   * Get multiModelConfig
   * @return multiModelConfig
   */
  @javax.annotation.Nullable
  public ContainerDefinitionMultiModelConfig getMultiModelConfig() {
    return multiModelConfig;
  }

  public void setMultiModelConfig(ContainerDefinitionMultiModelConfig multiModelConfig) {
    this.multiModelConfig = multiModelConfig;
  }


  public CreateModelInputPrimaryContainer modelDataSource(ContainerDefinitionModelDataSource modelDataSource) {
    this.modelDataSource = modelDataSource;
    return this;
  }

  /**
   * Get modelDataSource
   * @return modelDataSource
   */
  @javax.annotation.Nullable
  public ContainerDefinitionModelDataSource getModelDataSource() {
    return modelDataSource;
  }

  public void setModelDataSource(ContainerDefinitionModelDataSource modelDataSource) {
    this.modelDataSource = modelDataSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateModelInputPrimaryContainer createModelInputPrimaryContainer = (CreateModelInputPrimaryContainer) o;
    return Objects.equals(this.containerHostname, createModelInputPrimaryContainer.containerHostname) &&
        Objects.equals(this.image, createModelInputPrimaryContainer.image) &&
        Objects.equals(this.imageConfig, createModelInputPrimaryContainer.imageConfig) &&
        Objects.equals(this.mode, createModelInputPrimaryContainer.mode) &&
        Objects.equals(this.modelDataUrl, createModelInputPrimaryContainer.modelDataUrl) &&
        Objects.equals(this.environment, createModelInputPrimaryContainer.environment) &&
        Objects.equals(this.modelPackageName, createModelInputPrimaryContainer.modelPackageName) &&
        Objects.equals(this.inferenceSpecificationName, createModelInputPrimaryContainer.inferenceSpecificationName) &&
        Objects.equals(this.multiModelConfig, createModelInputPrimaryContainer.multiModelConfig) &&
        Objects.equals(this.modelDataSource, createModelInputPrimaryContainer.modelDataSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerHostname, image, imageConfig, mode, modelDataUrl, environment, modelPackageName, inferenceSpecificationName, multiModelConfig, modelDataSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateModelInputPrimaryContainer {\n");
    sb.append("    containerHostname: ").append(toIndentedString(containerHostname)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageConfig: ").append(toIndentedString(imageConfig)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    modelDataUrl: ").append(toIndentedString(modelDataUrl)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    modelPackageName: ").append(toIndentedString(modelPackageName)).append("\n");
    sb.append("    inferenceSpecificationName: ").append(toIndentedString(inferenceSpecificationName)).append("\n");
    sb.append("    multiModelConfig: ").append(toIndentedString(multiModelConfig)).append("\n");
    sb.append("    modelDataSource: ").append(toIndentedString(modelDataSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContainerHostname");
    openapiFields.add("Image");
    openapiFields.add("ImageConfig");
    openapiFields.add("Mode");
    openapiFields.add("ModelDataUrl");
    openapiFields.add("Environment");
    openapiFields.add("ModelPackageName");
    openapiFields.add("InferenceSpecificationName");
    openapiFields.add("MultiModelConfig");
    openapiFields.add("ModelDataSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateModelInputPrimaryContainer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateModelInputPrimaryContainer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateModelInputPrimaryContainer is not found in the empty JSON string", CreateModelInputPrimaryContainer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateModelInputPrimaryContainer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateModelInputPrimaryContainer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ContainerHostname`
      if (jsonObj.get("ContainerHostname") != null && !jsonObj.get("ContainerHostname").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContainerHostname"));
      }
      // validate the optional field `Image`
      if (jsonObj.get("Image") != null && !jsonObj.get("Image").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Image"));
      }
      // validate the optional field `ImageConfig`
      if (jsonObj.get("ImageConfig") != null && !jsonObj.get("ImageConfig").isJsonNull()) {
        ContainerDefinitionImageConfig.validateJsonElement(jsonObj.get("ImageConfig"));
      }
      // validate the optional field `Mode`
      if (jsonObj.get("Mode") != null && !jsonObj.get("Mode").isJsonNull()) {
        ContainerMode.validateJsonElement(jsonObj.get("Mode"));
      }
      // validate the optional field `ModelDataUrl`
      if (jsonObj.get("ModelDataUrl") != null && !jsonObj.get("ModelDataUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModelDataUrl"));
      }
      // validate the optional field `Environment`
      if (jsonObj.get("Environment") != null && !jsonObj.get("Environment").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Environment"));
      }
      // validate the optional field `ModelPackageName`
      if (jsonObj.get("ModelPackageName") != null && !jsonObj.get("ModelPackageName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModelPackageName"));
      }
      // validate the optional field `InferenceSpecificationName`
      if (jsonObj.get("InferenceSpecificationName") != null && !jsonObj.get("InferenceSpecificationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InferenceSpecificationName"));
      }
      // validate the optional field `MultiModelConfig`
      if (jsonObj.get("MultiModelConfig") != null && !jsonObj.get("MultiModelConfig").isJsonNull()) {
        ContainerDefinitionMultiModelConfig.validateJsonElement(jsonObj.get("MultiModelConfig"));
      }
      // validate the optional field `ModelDataSource`
      if (jsonObj.get("ModelDataSource") != null && !jsonObj.get("ModelDataSource").isJsonNull()) {
        ContainerDefinitionModelDataSource.validateJsonElement(jsonObj.get("ModelDataSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateModelInputPrimaryContainer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateModelInputPrimaryContainer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateModelInputPrimaryContainer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateModelInputPrimaryContainer.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateModelInputPrimaryContainer>() {
           @Override
           public void write(JsonWriter out, CreateModelInputPrimaryContainer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateModelInputPrimaryContainer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateModelInputPrimaryContainer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateModelInputPrimaryContainer
   * @throws IOException if the JSON string is invalid with respect to CreateModelInputPrimaryContainer
   */
  public static CreateModelInputPrimaryContainer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateModelInputPrimaryContainer.class);
  }

  /**
   * Convert an instance of CreateModelInputPrimaryContainer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

