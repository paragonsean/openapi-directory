/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DescribeLabelingJobResponseLabelingJobOutput;
import org.openapitools.client.model.LabelingJobStatus;
import org.openapitools.client.model.LabelingJobSummaryInputConfig;
import org.openapitools.client.model.LabelingJobSummaryLabelCounters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides summary information about a labeling job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabelingJobSummary {
  public static final String SERIALIZED_NAME_LABELING_JOB_NAME = "LabelingJobName";
  @SerializedName(SERIALIZED_NAME_LABELING_JOB_NAME)
  private String labelingJobName;

  public static final String SERIALIZED_NAME_LABELING_JOB_ARN = "LabelingJobArn";
  @SerializedName(SERIALIZED_NAME_LABELING_JOB_ARN)
  private String labelingJobArn;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_LABELING_JOB_STATUS = "LabelingJobStatus";
  @SerializedName(SERIALIZED_NAME_LABELING_JOB_STATUS)
  private LabelingJobStatus labelingJobStatus;

  public static final String SERIALIZED_NAME_LABEL_COUNTERS = "LabelCounters";
  @SerializedName(SERIALIZED_NAME_LABEL_COUNTERS)
  private LabelingJobSummaryLabelCounters labelCounters;

  public static final String SERIALIZED_NAME_WORKTEAM_ARN = "WorkteamArn";
  @SerializedName(SERIALIZED_NAME_WORKTEAM_ARN)
  private String workteamArn;

  public static final String SERIALIZED_NAME_PRE_HUMAN_TASK_LAMBDA_ARN = "PreHumanTaskLambdaArn";
  @SerializedName(SERIALIZED_NAME_PRE_HUMAN_TASK_LAMBDA_ARN)
  private String preHumanTaskLambdaArn;

  public static final String SERIALIZED_NAME_ANNOTATION_CONSOLIDATION_LAMBDA_ARN = "AnnotationConsolidationLambdaArn";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_CONSOLIDATION_LAMBDA_ARN)
  private String annotationConsolidationLambdaArn;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_LABELING_JOB_OUTPUT = "LabelingJobOutput";
  @SerializedName(SERIALIZED_NAME_LABELING_JOB_OUTPUT)
  private DescribeLabelingJobResponseLabelingJobOutput labelingJobOutput;

  public static final String SERIALIZED_NAME_INPUT_CONFIG = "InputConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIG)
  private LabelingJobSummaryInputConfig inputConfig;

  public LabelingJobSummary() {
  }

  public LabelingJobSummary labelingJobName(String labelingJobName) {
    this.labelingJobName = labelingJobName;
    return this;
  }

  /**
   * Get labelingJobName
   * @return labelingJobName
   */
  @javax.annotation.Nonnull
  public String getLabelingJobName() {
    return labelingJobName;
  }

  public void setLabelingJobName(String labelingJobName) {
    this.labelingJobName = labelingJobName;
  }


  public LabelingJobSummary labelingJobArn(String labelingJobArn) {
    this.labelingJobArn = labelingJobArn;
    return this;
  }

  /**
   * Get labelingJobArn
   * @return labelingJobArn
   */
  @javax.annotation.Nonnull
  public String getLabelingJobArn() {
    return labelingJobArn;
  }

  public void setLabelingJobArn(String labelingJobArn) {
    this.labelingJobArn = labelingJobArn;
  }


  public LabelingJobSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public LabelingJobSummary lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public LabelingJobSummary labelingJobStatus(LabelingJobStatus labelingJobStatus) {
    this.labelingJobStatus = labelingJobStatus;
    return this;
  }

  /**
   * Get labelingJobStatus
   * @return labelingJobStatus
   */
  @javax.annotation.Nonnull
  public LabelingJobStatus getLabelingJobStatus() {
    return labelingJobStatus;
  }

  public void setLabelingJobStatus(LabelingJobStatus labelingJobStatus) {
    this.labelingJobStatus = labelingJobStatus;
  }


  public LabelingJobSummary labelCounters(LabelingJobSummaryLabelCounters labelCounters) {
    this.labelCounters = labelCounters;
    return this;
  }

  /**
   * Get labelCounters
   * @return labelCounters
   */
  @javax.annotation.Nonnull
  public LabelingJobSummaryLabelCounters getLabelCounters() {
    return labelCounters;
  }

  public void setLabelCounters(LabelingJobSummaryLabelCounters labelCounters) {
    this.labelCounters = labelCounters;
  }


  public LabelingJobSummary workteamArn(String workteamArn) {
    this.workteamArn = workteamArn;
    return this;
  }

  /**
   * Get workteamArn
   * @return workteamArn
   */
  @javax.annotation.Nonnull
  public String getWorkteamArn() {
    return workteamArn;
  }

  public void setWorkteamArn(String workteamArn) {
    this.workteamArn = workteamArn;
  }


  public LabelingJobSummary preHumanTaskLambdaArn(String preHumanTaskLambdaArn) {
    this.preHumanTaskLambdaArn = preHumanTaskLambdaArn;
    return this;
  }

  /**
   * Get preHumanTaskLambdaArn
   * @return preHumanTaskLambdaArn
   */
  @javax.annotation.Nonnull
  public String getPreHumanTaskLambdaArn() {
    return preHumanTaskLambdaArn;
  }

  public void setPreHumanTaskLambdaArn(String preHumanTaskLambdaArn) {
    this.preHumanTaskLambdaArn = preHumanTaskLambdaArn;
  }


  public LabelingJobSummary annotationConsolidationLambdaArn(String annotationConsolidationLambdaArn) {
    this.annotationConsolidationLambdaArn = annotationConsolidationLambdaArn;
    return this;
  }

  /**
   * Get annotationConsolidationLambdaArn
   * @return annotationConsolidationLambdaArn
   */
  @javax.annotation.Nullable
  public String getAnnotationConsolidationLambdaArn() {
    return annotationConsolidationLambdaArn;
  }

  public void setAnnotationConsolidationLambdaArn(String annotationConsolidationLambdaArn) {
    this.annotationConsolidationLambdaArn = annotationConsolidationLambdaArn;
  }


  public LabelingJobSummary failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public LabelingJobSummary labelingJobOutput(DescribeLabelingJobResponseLabelingJobOutput labelingJobOutput) {
    this.labelingJobOutput = labelingJobOutput;
    return this;
  }

  /**
   * Get labelingJobOutput
   * @return labelingJobOutput
   */
  @javax.annotation.Nullable
  public DescribeLabelingJobResponseLabelingJobOutput getLabelingJobOutput() {
    return labelingJobOutput;
  }

  public void setLabelingJobOutput(DescribeLabelingJobResponseLabelingJobOutput labelingJobOutput) {
    this.labelingJobOutput = labelingJobOutput;
  }


  public LabelingJobSummary inputConfig(LabelingJobSummaryInputConfig inputConfig) {
    this.inputConfig = inputConfig;
    return this;
  }

  /**
   * Get inputConfig
   * @return inputConfig
   */
  @javax.annotation.Nullable
  public LabelingJobSummaryInputConfig getInputConfig() {
    return inputConfig;
  }

  public void setInputConfig(LabelingJobSummaryInputConfig inputConfig) {
    this.inputConfig = inputConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabelingJobSummary labelingJobSummary = (LabelingJobSummary) o;
    return Objects.equals(this.labelingJobName, labelingJobSummary.labelingJobName) &&
        Objects.equals(this.labelingJobArn, labelingJobSummary.labelingJobArn) &&
        Objects.equals(this.creationTime, labelingJobSummary.creationTime) &&
        Objects.equals(this.lastModifiedTime, labelingJobSummary.lastModifiedTime) &&
        Objects.equals(this.labelingJobStatus, labelingJobSummary.labelingJobStatus) &&
        Objects.equals(this.labelCounters, labelingJobSummary.labelCounters) &&
        Objects.equals(this.workteamArn, labelingJobSummary.workteamArn) &&
        Objects.equals(this.preHumanTaskLambdaArn, labelingJobSummary.preHumanTaskLambdaArn) &&
        Objects.equals(this.annotationConsolidationLambdaArn, labelingJobSummary.annotationConsolidationLambdaArn) &&
        Objects.equals(this.failureReason, labelingJobSummary.failureReason) &&
        Objects.equals(this.labelingJobOutput, labelingJobSummary.labelingJobOutput) &&
        Objects.equals(this.inputConfig, labelingJobSummary.inputConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labelingJobName, labelingJobArn, creationTime, lastModifiedTime, labelingJobStatus, labelCounters, workteamArn, preHumanTaskLambdaArn, annotationConsolidationLambdaArn, failureReason, labelingJobOutput, inputConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabelingJobSummary {\n");
    sb.append("    labelingJobName: ").append(toIndentedString(labelingJobName)).append("\n");
    sb.append("    labelingJobArn: ").append(toIndentedString(labelingJobArn)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    labelingJobStatus: ").append(toIndentedString(labelingJobStatus)).append("\n");
    sb.append("    labelCounters: ").append(toIndentedString(labelCounters)).append("\n");
    sb.append("    workteamArn: ").append(toIndentedString(workteamArn)).append("\n");
    sb.append("    preHumanTaskLambdaArn: ").append(toIndentedString(preHumanTaskLambdaArn)).append("\n");
    sb.append("    annotationConsolidationLambdaArn: ").append(toIndentedString(annotationConsolidationLambdaArn)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    labelingJobOutput: ").append(toIndentedString(labelingJobOutput)).append("\n");
    sb.append("    inputConfig: ").append(toIndentedString(inputConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LabelingJobName");
    openapiFields.add("LabelingJobArn");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("LabelingJobStatus");
    openapiFields.add("LabelCounters");
    openapiFields.add("WorkteamArn");
    openapiFields.add("PreHumanTaskLambdaArn");
    openapiFields.add("AnnotationConsolidationLambdaArn");
    openapiFields.add("FailureReason");
    openapiFields.add("LabelingJobOutput");
    openapiFields.add("InputConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LabelingJobName");
    openapiRequiredFields.add("LabelingJobArn");
    openapiRequiredFields.add("CreationTime");
    openapiRequiredFields.add("LastModifiedTime");
    openapiRequiredFields.add("LabelingJobStatus");
    openapiRequiredFields.add("LabelCounters");
    openapiRequiredFields.add("WorkteamArn");
    openapiRequiredFields.add("PreHumanTaskLambdaArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabelingJobSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabelingJobSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabelingJobSummary is not found in the empty JSON string", LabelingJobSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabelingJobSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabelingJobSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LabelingJobSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LabelingJobName`
      String.validateJsonElement(jsonObj.get("LabelingJobName"));
      // validate the required field `LabelingJobArn`
      String.validateJsonElement(jsonObj.get("LabelingJobArn"));
      // validate the required field `CreationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      // validate the required field `LastModifiedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      // validate the required field `LabelingJobStatus`
      LabelingJobStatus.validateJsonElement(jsonObj.get("LabelingJobStatus"));
      // validate the required field `LabelCounters`
      LabelingJobSummaryLabelCounters.validateJsonElement(jsonObj.get("LabelCounters"));
      // validate the required field `WorkteamArn`
      String.validateJsonElement(jsonObj.get("WorkteamArn"));
      // validate the required field `PreHumanTaskLambdaArn`
      String.validateJsonElement(jsonObj.get("PreHumanTaskLambdaArn"));
      // validate the optional field `AnnotationConsolidationLambdaArn`
      if (jsonObj.get("AnnotationConsolidationLambdaArn") != null && !jsonObj.get("AnnotationConsolidationLambdaArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AnnotationConsolidationLambdaArn"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureReason"));
      }
      // validate the optional field `LabelingJobOutput`
      if (jsonObj.get("LabelingJobOutput") != null && !jsonObj.get("LabelingJobOutput").isJsonNull()) {
        DescribeLabelingJobResponseLabelingJobOutput.validateJsonElement(jsonObj.get("LabelingJobOutput"));
      }
      // validate the optional field `InputConfig`
      if (jsonObj.get("InputConfig") != null && !jsonObj.get("InputConfig").isJsonNull()) {
        LabelingJobSummaryInputConfig.validateJsonElement(jsonObj.get("InputConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabelingJobSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabelingJobSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabelingJobSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabelingJobSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<LabelingJobSummary>() {
           @Override
           public void write(JsonWriter out, LabelingJobSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabelingJobSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabelingJobSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabelingJobSummary
   * @throws IOException if the JSON string is invalid with respect to LabelingJobSummary
   */
  public static LabelingJobSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabelingJobSummary.class);
  }

  /**
   * Convert an instance of LabelingJobSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

