/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HyperParameterTuningJobSummaryTrainingJobStatusCounters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HyperParameterTuningJobSummaryTrainingJobStatusCounters {
  public static final String SERIALIZED_NAME_COMPLETED = "Completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Integer completed;

  public static final String SERIALIZED_NAME_IN_PROGRESS = "InProgress";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS)
  private Integer inProgress;

  public static final String SERIALIZED_NAME_RETRYABLE_ERROR = "RetryableError";
  @SerializedName(SERIALIZED_NAME_RETRYABLE_ERROR)
  private Integer retryableError;

  public static final String SERIALIZED_NAME_NON_RETRYABLE_ERROR = "NonRetryableError";
  @SerializedName(SERIALIZED_NAME_NON_RETRYABLE_ERROR)
  private Integer nonRetryableError;

  public static final String SERIALIZED_NAME_STOPPED = "Stopped";
  @SerializedName(SERIALIZED_NAME_STOPPED)
  private Integer stopped;

  public HyperParameterTuningJobSummaryTrainingJobStatusCounters() {
  }

  public HyperParameterTuningJobSummaryTrainingJobStatusCounters completed(Integer completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Get completed
   * @return completed
   */
  @javax.annotation.Nullable
  public Integer getCompleted() {
    return completed;
  }

  public void setCompleted(Integer completed) {
    this.completed = completed;
  }


  public HyperParameterTuningJobSummaryTrainingJobStatusCounters inProgress(Integer inProgress) {
    this.inProgress = inProgress;
    return this;
  }

  /**
   * Get inProgress
   * @return inProgress
   */
  @javax.annotation.Nullable
  public Integer getInProgress() {
    return inProgress;
  }

  public void setInProgress(Integer inProgress) {
    this.inProgress = inProgress;
  }


  public HyperParameterTuningJobSummaryTrainingJobStatusCounters retryableError(Integer retryableError) {
    this.retryableError = retryableError;
    return this;
  }

  /**
   * Get retryableError
   * @return retryableError
   */
  @javax.annotation.Nullable
  public Integer getRetryableError() {
    return retryableError;
  }

  public void setRetryableError(Integer retryableError) {
    this.retryableError = retryableError;
  }


  public HyperParameterTuningJobSummaryTrainingJobStatusCounters nonRetryableError(Integer nonRetryableError) {
    this.nonRetryableError = nonRetryableError;
    return this;
  }

  /**
   * Get nonRetryableError
   * @return nonRetryableError
   */
  @javax.annotation.Nullable
  public Integer getNonRetryableError() {
    return nonRetryableError;
  }

  public void setNonRetryableError(Integer nonRetryableError) {
    this.nonRetryableError = nonRetryableError;
  }


  public HyperParameterTuningJobSummaryTrainingJobStatusCounters stopped(Integer stopped) {
    this.stopped = stopped;
    return this;
  }

  /**
   * Get stopped
   * @return stopped
   */
  @javax.annotation.Nullable
  public Integer getStopped() {
    return stopped;
  }

  public void setStopped(Integer stopped) {
    this.stopped = stopped;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperParameterTuningJobSummaryTrainingJobStatusCounters hyperParameterTuningJobSummaryTrainingJobStatusCounters = (HyperParameterTuningJobSummaryTrainingJobStatusCounters) o;
    return Objects.equals(this.completed, hyperParameterTuningJobSummaryTrainingJobStatusCounters.completed) &&
        Objects.equals(this.inProgress, hyperParameterTuningJobSummaryTrainingJobStatusCounters.inProgress) &&
        Objects.equals(this.retryableError, hyperParameterTuningJobSummaryTrainingJobStatusCounters.retryableError) &&
        Objects.equals(this.nonRetryableError, hyperParameterTuningJobSummaryTrainingJobStatusCounters.nonRetryableError) &&
        Objects.equals(this.stopped, hyperParameterTuningJobSummaryTrainingJobStatusCounters.stopped);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completed, inProgress, retryableError, nonRetryableError, stopped);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperParameterTuningJobSummaryTrainingJobStatusCounters {\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    retryableError: ").append(toIndentedString(retryableError)).append("\n");
    sb.append("    nonRetryableError: ").append(toIndentedString(nonRetryableError)).append("\n");
    sb.append("    stopped: ").append(toIndentedString(stopped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Completed");
    openapiFields.add("InProgress");
    openapiFields.add("RetryableError");
    openapiFields.add("NonRetryableError");
    openapiFields.add("Stopped");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HyperParameterTuningJobSummaryTrainingJobStatusCounters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperParameterTuningJobSummaryTrainingJobStatusCounters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperParameterTuningJobSummaryTrainingJobStatusCounters is not found in the empty JSON string", HyperParameterTuningJobSummaryTrainingJobStatusCounters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperParameterTuningJobSummaryTrainingJobStatusCounters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperParameterTuningJobSummaryTrainingJobStatusCounters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Completed`
      if (jsonObj.get("Completed") != null && !jsonObj.get("Completed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Completed"));
      }
      // validate the optional field `InProgress`
      if (jsonObj.get("InProgress") != null && !jsonObj.get("InProgress").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InProgress"));
      }
      // validate the optional field `RetryableError`
      if (jsonObj.get("RetryableError") != null && !jsonObj.get("RetryableError").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RetryableError"));
      }
      // validate the optional field `NonRetryableError`
      if (jsonObj.get("NonRetryableError") != null && !jsonObj.get("NonRetryableError").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NonRetryableError"));
      }
      // validate the optional field `Stopped`
      if (jsonObj.get("Stopped") != null && !jsonObj.get("Stopped").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Stopped"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperParameterTuningJobSummaryTrainingJobStatusCounters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperParameterTuningJobSummaryTrainingJobStatusCounters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperParameterTuningJobSummaryTrainingJobStatusCounters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperParameterTuningJobSummaryTrainingJobStatusCounters.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperParameterTuningJobSummaryTrainingJobStatusCounters>() {
           @Override
           public void write(JsonWriter out, HyperParameterTuningJobSummaryTrainingJobStatusCounters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperParameterTuningJobSummaryTrainingJobStatusCounters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HyperParameterTuningJobSummaryTrainingJobStatusCounters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HyperParameterTuningJobSummaryTrainingJobStatusCounters
   * @throws IOException if the JSON string is invalid with respect to HyperParameterTuningJobSummaryTrainingJobStatusCounters
   */
  public static HyperParameterTuningJobSummaryTrainingJobStatusCounters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperParameterTuningJobSummaryTrainingJobStatusCounters.class);
  }

  /**
   * Convert an instance of HyperParameterTuningJobSummaryTrainingJobStatusCounters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

