/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ModelApprovalStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateModelPackageInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateModelPackageInput {
  public static final String SERIALIZED_NAME_MODEL_PACKAGE_ARN = "ModelPackageArn";
  @SerializedName(SERIALIZED_NAME_MODEL_PACKAGE_ARN)
  private String modelPackageArn;

  public static final String SERIALIZED_NAME_MODEL_APPROVAL_STATUS = "ModelApprovalStatus";
  @SerializedName(SERIALIZED_NAME_MODEL_APPROVAL_STATUS)
  private ModelApprovalStatus modelApprovalStatus;

  public static final String SERIALIZED_NAME_APPROVAL_DESCRIPTION = "ApprovalDescription";
  @SerializedName(SERIALIZED_NAME_APPROVAL_DESCRIPTION)
  private String approvalDescription;

  public static final String SERIALIZED_NAME_CUSTOMER_METADATA_PROPERTIES = "CustomerMetadataProperties";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_METADATA_PROPERTIES)
  private Map customerMetadataProperties;

  public static final String SERIALIZED_NAME_CUSTOMER_METADATA_PROPERTIES_TO_REMOVE = "CustomerMetadataPropertiesToRemove";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_METADATA_PROPERTIES_TO_REMOVE)
  private List customerMetadataPropertiesToRemove;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFERENCE_SPECIFICATIONS_TO_ADD = "AdditionalInferenceSpecificationsToAdd";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFERENCE_SPECIFICATIONS_TO_ADD)
  private List additionalInferenceSpecificationsToAdd;

  public UpdateModelPackageInput() {
  }

  public UpdateModelPackageInput modelPackageArn(String modelPackageArn) {
    this.modelPackageArn = modelPackageArn;
    return this;
  }

  /**
   * Get modelPackageArn
   * @return modelPackageArn
   */
  @javax.annotation.Nonnull
  public String getModelPackageArn() {
    return modelPackageArn;
  }

  public void setModelPackageArn(String modelPackageArn) {
    this.modelPackageArn = modelPackageArn;
  }


  public UpdateModelPackageInput modelApprovalStatus(ModelApprovalStatus modelApprovalStatus) {
    this.modelApprovalStatus = modelApprovalStatus;
    return this;
  }

  /**
   * Get modelApprovalStatus
   * @return modelApprovalStatus
   */
  @javax.annotation.Nullable
  public ModelApprovalStatus getModelApprovalStatus() {
    return modelApprovalStatus;
  }

  public void setModelApprovalStatus(ModelApprovalStatus modelApprovalStatus) {
    this.modelApprovalStatus = modelApprovalStatus;
  }


  public UpdateModelPackageInput approvalDescription(String approvalDescription) {
    this.approvalDescription = approvalDescription;
    return this;
  }

  /**
   * Get approvalDescription
   * @return approvalDescription
   */
  @javax.annotation.Nullable
  public String getApprovalDescription() {
    return approvalDescription;
  }

  public void setApprovalDescription(String approvalDescription) {
    this.approvalDescription = approvalDescription;
  }


  public UpdateModelPackageInput customerMetadataProperties(Map customerMetadataProperties) {
    this.customerMetadataProperties = customerMetadataProperties;
    return this;
  }

  /**
   * Get customerMetadataProperties
   * @return customerMetadataProperties
   */
  @javax.annotation.Nullable
  public Map getCustomerMetadataProperties() {
    return customerMetadataProperties;
  }

  public void setCustomerMetadataProperties(Map customerMetadataProperties) {
    this.customerMetadataProperties = customerMetadataProperties;
  }


  public UpdateModelPackageInput customerMetadataPropertiesToRemove(List customerMetadataPropertiesToRemove) {
    this.customerMetadataPropertiesToRemove = customerMetadataPropertiesToRemove;
    return this;
  }

  /**
   * Get customerMetadataPropertiesToRemove
   * @return customerMetadataPropertiesToRemove
   */
  @javax.annotation.Nullable
  public List getCustomerMetadataPropertiesToRemove() {
    return customerMetadataPropertiesToRemove;
  }

  public void setCustomerMetadataPropertiesToRemove(List customerMetadataPropertiesToRemove) {
    this.customerMetadataPropertiesToRemove = customerMetadataPropertiesToRemove;
  }


  public UpdateModelPackageInput additionalInferenceSpecificationsToAdd(List additionalInferenceSpecificationsToAdd) {
    this.additionalInferenceSpecificationsToAdd = additionalInferenceSpecificationsToAdd;
    return this;
  }

  /**
   * Get additionalInferenceSpecificationsToAdd
   * @return additionalInferenceSpecificationsToAdd
   */
  @javax.annotation.Nullable
  public List getAdditionalInferenceSpecificationsToAdd() {
    return additionalInferenceSpecificationsToAdd;
  }

  public void setAdditionalInferenceSpecificationsToAdd(List additionalInferenceSpecificationsToAdd) {
    this.additionalInferenceSpecificationsToAdd = additionalInferenceSpecificationsToAdd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateModelPackageInput updateModelPackageInput = (UpdateModelPackageInput) o;
    return Objects.equals(this.modelPackageArn, updateModelPackageInput.modelPackageArn) &&
        Objects.equals(this.modelApprovalStatus, updateModelPackageInput.modelApprovalStatus) &&
        Objects.equals(this.approvalDescription, updateModelPackageInput.approvalDescription) &&
        Objects.equals(this.customerMetadataProperties, updateModelPackageInput.customerMetadataProperties) &&
        Objects.equals(this.customerMetadataPropertiesToRemove, updateModelPackageInput.customerMetadataPropertiesToRemove) &&
        Objects.equals(this.additionalInferenceSpecificationsToAdd, updateModelPackageInput.additionalInferenceSpecificationsToAdd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelPackageArn, modelApprovalStatus, approvalDescription, customerMetadataProperties, customerMetadataPropertiesToRemove, additionalInferenceSpecificationsToAdd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateModelPackageInput {\n");
    sb.append("    modelPackageArn: ").append(toIndentedString(modelPackageArn)).append("\n");
    sb.append("    modelApprovalStatus: ").append(toIndentedString(modelApprovalStatus)).append("\n");
    sb.append("    approvalDescription: ").append(toIndentedString(approvalDescription)).append("\n");
    sb.append("    customerMetadataProperties: ").append(toIndentedString(customerMetadataProperties)).append("\n");
    sb.append("    customerMetadataPropertiesToRemove: ").append(toIndentedString(customerMetadataPropertiesToRemove)).append("\n");
    sb.append("    additionalInferenceSpecificationsToAdd: ").append(toIndentedString(additionalInferenceSpecificationsToAdd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ModelPackageArn");
    openapiFields.add("ModelApprovalStatus");
    openapiFields.add("ApprovalDescription");
    openapiFields.add("CustomerMetadataProperties");
    openapiFields.add("CustomerMetadataPropertiesToRemove");
    openapiFields.add("AdditionalInferenceSpecificationsToAdd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ModelPackageArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateModelPackageInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateModelPackageInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateModelPackageInput is not found in the empty JSON string", UpdateModelPackageInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateModelPackageInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateModelPackageInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateModelPackageInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ModelPackageArn`
      String.validateJsonElement(jsonObj.get("ModelPackageArn"));
      // validate the optional field `ModelApprovalStatus`
      if (jsonObj.get("ModelApprovalStatus") != null && !jsonObj.get("ModelApprovalStatus").isJsonNull()) {
        ModelApprovalStatus.validateJsonElement(jsonObj.get("ModelApprovalStatus"));
      }
      // validate the optional field `ApprovalDescription`
      if (jsonObj.get("ApprovalDescription") != null && !jsonObj.get("ApprovalDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApprovalDescription"));
      }
      // validate the optional field `CustomerMetadataProperties`
      if (jsonObj.get("CustomerMetadataProperties") != null && !jsonObj.get("CustomerMetadataProperties").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("CustomerMetadataProperties"));
      }
      // validate the optional field `CustomerMetadataPropertiesToRemove`
      if (jsonObj.get("CustomerMetadataPropertiesToRemove") != null && !jsonObj.get("CustomerMetadataPropertiesToRemove").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CustomerMetadataPropertiesToRemove"));
      }
      // validate the optional field `AdditionalInferenceSpecificationsToAdd`
      if (jsonObj.get("AdditionalInferenceSpecificationsToAdd") != null && !jsonObj.get("AdditionalInferenceSpecificationsToAdd").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalInferenceSpecificationsToAdd"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateModelPackageInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateModelPackageInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateModelPackageInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateModelPackageInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateModelPackageInput>() {
           @Override
           public void write(JsonWriter out, UpdateModelPackageInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateModelPackageInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateModelPackageInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateModelPackageInput
   * @throws IOException if the JSON string is invalid with respect to UpdateModelPackageInput
   */
  public static UpdateModelPackageInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateModelPackageInput.class);
  }

  /**
   * Convert an instance of UpdateModelPackageInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

