/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AutoMLMetricEnum;
import org.openapitools.client.model.AutoMLMetricExtendedEnum;
import org.openapitools.client.model.MetricSetSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the metric for a candidate produced by an AutoML job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricDatum {
  public static final String SERIALIZED_NAME_METRIC_NAME = "MetricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private AutoMLMetricEnum metricName;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Float value;

  public static final String SERIALIZED_NAME_SET = "Set";
  @SerializedName(SERIALIZED_NAME_SET)
  private MetricSetSource set;

  public static final String SERIALIZED_NAME_STANDARD_METRIC_NAME = "StandardMetricName";
  @SerializedName(SERIALIZED_NAME_STANDARD_METRIC_NAME)
  private AutoMLMetricExtendedEnum standardMetricName;

  public MetricDatum() {
  }

  public MetricDatum metricName(AutoMLMetricEnum metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nullable
  public AutoMLMetricEnum getMetricName() {
    return metricName;
  }

  public void setMetricName(AutoMLMetricEnum metricName) {
    this.metricName = metricName;
  }


  public MetricDatum value(Float value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Float getValue() {
    return value;
  }

  public void setValue(Float value) {
    this.value = value;
  }


  public MetricDatum set(MetricSetSource set) {
    this.set = set;
    return this;
  }

  /**
   * Get set
   * @return set
   */
  @javax.annotation.Nullable
  public MetricSetSource getSet() {
    return set;
  }

  public void setSet(MetricSetSource set) {
    this.set = set;
  }


  public MetricDatum standardMetricName(AutoMLMetricExtendedEnum standardMetricName) {
    this.standardMetricName = standardMetricName;
    return this;
  }

  /**
   * Get standardMetricName
   * @return standardMetricName
   */
  @javax.annotation.Nullable
  public AutoMLMetricExtendedEnum getStandardMetricName() {
    return standardMetricName;
  }

  public void setStandardMetricName(AutoMLMetricExtendedEnum standardMetricName) {
    this.standardMetricName = standardMetricName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDatum metricDatum = (MetricDatum) o;
    return Objects.equals(this.metricName, metricDatum.metricName) &&
        Objects.equals(this.value, metricDatum.value) &&
        Objects.equals(this.set, metricDatum.set) &&
        Objects.equals(this.standardMetricName, metricDatum.standardMetricName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricName, value, set, standardMetricName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDatum {\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    set: ").append(toIndentedString(set)).append("\n");
    sb.append("    standardMetricName: ").append(toIndentedString(standardMetricName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricName");
    openapiFields.add("Value");
    openapiFields.add("Set");
    openapiFields.add("StandardMetricName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricDatum
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricDatum.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricDatum is not found in the empty JSON string", MetricDatum.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricDatum.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricDatum` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MetricName`
      if (jsonObj.get("MetricName") != null && !jsonObj.get("MetricName").isJsonNull()) {
        AutoMLMetricEnum.validateJsonElement(jsonObj.get("MetricName"));
      }
      // validate the optional field `Value`
      if (jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("Value"));
      }
      // validate the optional field `Set`
      if (jsonObj.get("Set") != null && !jsonObj.get("Set").isJsonNull()) {
        MetricSetSource.validateJsonElement(jsonObj.get("Set"));
      }
      // validate the optional field `StandardMetricName`
      if (jsonObj.get("StandardMetricName") != null && !jsonObj.get("StandardMetricName").isJsonNull()) {
        AutoMLMetricExtendedEnum.validateJsonElement(jsonObj.get("StandardMetricName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricDatum.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricDatum' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricDatum> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricDatum.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricDatum>() {
           @Override
           public void write(JsonWriter out, MetricDatum value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricDatum read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricDatum given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricDatum
   * @throws IOException if the JSON string is invalid with respect to MetricDatum
   */
  public static MetricDatum fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricDatum.class);
  }

  /**
   * Convert an instance of MetricDatum to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

