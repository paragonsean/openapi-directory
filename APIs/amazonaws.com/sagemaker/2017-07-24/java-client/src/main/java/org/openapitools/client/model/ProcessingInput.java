/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProcessingInputDatasetDefinition;
import org.openapitools.client.model.ProcessingInputS3Input;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The inputs for a processing job. The processing input must specify exactly one of either &lt;code&gt;S3Input&lt;/code&gt; or &lt;code&gt;DatasetDefinition&lt;/code&gt; types.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProcessingInput {
  public static final String SERIALIZED_NAME_INPUT_NAME = "InputName";
  @SerializedName(SERIALIZED_NAME_INPUT_NAME)
  private String inputName;

  public static final String SERIALIZED_NAME_APP_MANAGED = "AppManaged";
  @SerializedName(SERIALIZED_NAME_APP_MANAGED)
  private Boolean appManaged;

  public static final String SERIALIZED_NAME_S3_INPUT = "S3Input";
  @SerializedName(SERIALIZED_NAME_S3_INPUT)
  private ProcessingInputS3Input s3Input;

  public static final String SERIALIZED_NAME_DATASET_DEFINITION = "DatasetDefinition";
  @SerializedName(SERIALIZED_NAME_DATASET_DEFINITION)
  private ProcessingInputDatasetDefinition datasetDefinition;

  public ProcessingInput() {
  }

  public ProcessingInput inputName(String inputName) {
    this.inputName = inputName;
    return this;
  }

  /**
   * Get inputName
   * @return inputName
   */
  @javax.annotation.Nonnull
  public String getInputName() {
    return inputName;
  }

  public void setInputName(String inputName) {
    this.inputName = inputName;
  }


  public ProcessingInput appManaged(Boolean appManaged) {
    this.appManaged = appManaged;
    return this;
  }

  /**
   * Get appManaged
   * @return appManaged
   */
  @javax.annotation.Nullable
  public Boolean getAppManaged() {
    return appManaged;
  }

  public void setAppManaged(Boolean appManaged) {
    this.appManaged = appManaged;
  }


  public ProcessingInput s3Input(ProcessingInputS3Input s3Input) {
    this.s3Input = s3Input;
    return this;
  }

  /**
   * Get s3Input
   * @return s3Input
   */
  @javax.annotation.Nullable
  public ProcessingInputS3Input getS3Input() {
    return s3Input;
  }

  public void setS3Input(ProcessingInputS3Input s3Input) {
    this.s3Input = s3Input;
  }


  public ProcessingInput datasetDefinition(ProcessingInputDatasetDefinition datasetDefinition) {
    this.datasetDefinition = datasetDefinition;
    return this;
  }

  /**
   * Get datasetDefinition
   * @return datasetDefinition
   */
  @javax.annotation.Nullable
  public ProcessingInputDatasetDefinition getDatasetDefinition() {
    return datasetDefinition;
  }

  public void setDatasetDefinition(ProcessingInputDatasetDefinition datasetDefinition) {
    this.datasetDefinition = datasetDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingInput processingInput = (ProcessingInput) o;
    return Objects.equals(this.inputName, processingInput.inputName) &&
        Objects.equals(this.appManaged, processingInput.appManaged) &&
        Objects.equals(this.s3Input, processingInput.s3Input) &&
        Objects.equals(this.datasetDefinition, processingInput.datasetDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputName, appManaged, s3Input, datasetDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingInput {\n");
    sb.append("    inputName: ").append(toIndentedString(inputName)).append("\n");
    sb.append("    appManaged: ").append(toIndentedString(appManaged)).append("\n");
    sb.append("    s3Input: ").append(toIndentedString(s3Input)).append("\n");
    sb.append("    datasetDefinition: ").append(toIndentedString(datasetDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InputName");
    openapiFields.add("AppManaged");
    openapiFields.add("S3Input");
    openapiFields.add("DatasetDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InputName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProcessingInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProcessingInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessingInput is not found in the empty JSON string", ProcessingInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProcessingInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProcessingInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProcessingInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `InputName`
      String.validateJsonElement(jsonObj.get("InputName"));
      // validate the optional field `AppManaged`
      if (jsonObj.get("AppManaged") != null && !jsonObj.get("AppManaged").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AppManaged"));
      }
      // validate the optional field `S3Input`
      if (jsonObj.get("S3Input") != null && !jsonObj.get("S3Input").isJsonNull()) {
        ProcessingInputS3Input.validateJsonElement(jsonObj.get("S3Input"));
      }
      // validate the optional field `DatasetDefinition`
      if (jsonObj.get("DatasetDefinition") != null && !jsonObj.get("DatasetDefinition").isJsonNull()) {
        ProcessingInputDatasetDefinition.validateJsonElement(jsonObj.get("DatasetDefinition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessingInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessingInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessingInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessingInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessingInput>() {
           @Override
           public void write(JsonWriter out, ProcessingInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessingInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProcessingInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProcessingInput
   * @throws IOException if the JSON string is invalid with respect to ProcessingInput
   */
  public static ProcessingInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessingInput.class);
  }

  /**
   * Convert an instance of ProcessingInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

