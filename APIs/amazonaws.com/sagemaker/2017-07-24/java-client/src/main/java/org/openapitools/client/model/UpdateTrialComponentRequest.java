/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.UpdateTrialComponentRequestStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateTrialComponentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateTrialComponentRequest {
  public static final String SERIALIZED_NAME_TRIAL_COMPONENT_NAME = "TrialComponentName";
  @SerializedName(SERIALIZED_NAME_TRIAL_COMPONENT_NAME)
  private String trialComponentName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private UpdateTrialComponentRequestStatus status;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_PARAMETERS_TO_REMOVE = "ParametersToRemove";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_TO_REMOVE)
  private List parametersToRemove;

  public static final String SERIALIZED_NAME_INPUT_ARTIFACTS = "InputArtifacts";
  @SerializedName(SERIALIZED_NAME_INPUT_ARTIFACTS)
  private Map inputArtifacts;

  public static final String SERIALIZED_NAME_INPUT_ARTIFACTS_TO_REMOVE = "InputArtifactsToRemove";
  @SerializedName(SERIALIZED_NAME_INPUT_ARTIFACTS_TO_REMOVE)
  private List inputArtifactsToRemove;

  public static final String SERIALIZED_NAME_OUTPUT_ARTIFACTS = "OutputArtifacts";
  @SerializedName(SERIALIZED_NAME_OUTPUT_ARTIFACTS)
  private Map outputArtifacts;

  public static final String SERIALIZED_NAME_OUTPUT_ARTIFACTS_TO_REMOVE = "OutputArtifactsToRemove";
  @SerializedName(SERIALIZED_NAME_OUTPUT_ARTIFACTS_TO_REMOVE)
  private List outputArtifactsToRemove;

  public UpdateTrialComponentRequest() {
  }

  public UpdateTrialComponentRequest trialComponentName(String trialComponentName) {
    this.trialComponentName = trialComponentName;
    return this;
  }

  /**
   * Get trialComponentName
   * @return trialComponentName
   */
  @javax.annotation.Nonnull
  public String getTrialComponentName() {
    return trialComponentName;
  }

  public void setTrialComponentName(String trialComponentName) {
    this.trialComponentName = trialComponentName;
  }


  public UpdateTrialComponentRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UpdateTrialComponentRequest status(UpdateTrialComponentRequestStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public UpdateTrialComponentRequestStatus getStatus() {
    return status;
  }

  public void setStatus(UpdateTrialComponentRequestStatus status) {
    this.status = status;
  }


  public UpdateTrialComponentRequest startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public UpdateTrialComponentRequest endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public UpdateTrialComponentRequest parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public UpdateTrialComponentRequest parametersToRemove(List parametersToRemove) {
    this.parametersToRemove = parametersToRemove;
    return this;
  }

  /**
   * Get parametersToRemove
   * @return parametersToRemove
   */
  @javax.annotation.Nullable
  public List getParametersToRemove() {
    return parametersToRemove;
  }

  public void setParametersToRemove(List parametersToRemove) {
    this.parametersToRemove = parametersToRemove;
  }


  public UpdateTrialComponentRequest inputArtifacts(Map inputArtifacts) {
    this.inputArtifacts = inputArtifacts;
    return this;
  }

  /**
   * Get inputArtifacts
   * @return inputArtifacts
   */
  @javax.annotation.Nullable
  public Map getInputArtifacts() {
    return inputArtifacts;
  }

  public void setInputArtifacts(Map inputArtifacts) {
    this.inputArtifacts = inputArtifacts;
  }


  public UpdateTrialComponentRequest inputArtifactsToRemove(List inputArtifactsToRemove) {
    this.inputArtifactsToRemove = inputArtifactsToRemove;
    return this;
  }

  /**
   * Get inputArtifactsToRemove
   * @return inputArtifactsToRemove
   */
  @javax.annotation.Nullable
  public List getInputArtifactsToRemove() {
    return inputArtifactsToRemove;
  }

  public void setInputArtifactsToRemove(List inputArtifactsToRemove) {
    this.inputArtifactsToRemove = inputArtifactsToRemove;
  }


  public UpdateTrialComponentRequest outputArtifacts(Map outputArtifacts) {
    this.outputArtifacts = outputArtifacts;
    return this;
  }

  /**
   * Get outputArtifacts
   * @return outputArtifacts
   */
  @javax.annotation.Nullable
  public Map getOutputArtifacts() {
    return outputArtifacts;
  }

  public void setOutputArtifacts(Map outputArtifacts) {
    this.outputArtifacts = outputArtifacts;
  }


  public UpdateTrialComponentRequest outputArtifactsToRemove(List outputArtifactsToRemove) {
    this.outputArtifactsToRemove = outputArtifactsToRemove;
    return this;
  }

  /**
   * Get outputArtifactsToRemove
   * @return outputArtifactsToRemove
   */
  @javax.annotation.Nullable
  public List getOutputArtifactsToRemove() {
    return outputArtifactsToRemove;
  }

  public void setOutputArtifactsToRemove(List outputArtifactsToRemove) {
    this.outputArtifactsToRemove = outputArtifactsToRemove;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTrialComponentRequest updateTrialComponentRequest = (UpdateTrialComponentRequest) o;
    return Objects.equals(this.trialComponentName, updateTrialComponentRequest.trialComponentName) &&
        Objects.equals(this.displayName, updateTrialComponentRequest.displayName) &&
        Objects.equals(this.status, updateTrialComponentRequest.status) &&
        Objects.equals(this.startTime, updateTrialComponentRequest.startTime) &&
        Objects.equals(this.endTime, updateTrialComponentRequest.endTime) &&
        Objects.equals(this.parameters, updateTrialComponentRequest.parameters) &&
        Objects.equals(this.parametersToRemove, updateTrialComponentRequest.parametersToRemove) &&
        Objects.equals(this.inputArtifacts, updateTrialComponentRequest.inputArtifacts) &&
        Objects.equals(this.inputArtifactsToRemove, updateTrialComponentRequest.inputArtifactsToRemove) &&
        Objects.equals(this.outputArtifacts, updateTrialComponentRequest.outputArtifacts) &&
        Objects.equals(this.outputArtifactsToRemove, updateTrialComponentRequest.outputArtifactsToRemove);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trialComponentName, displayName, status, startTime, endTime, parameters, parametersToRemove, inputArtifacts, inputArtifactsToRemove, outputArtifacts, outputArtifactsToRemove);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTrialComponentRequest {\n");
    sb.append("    trialComponentName: ").append(toIndentedString(trialComponentName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    parametersToRemove: ").append(toIndentedString(parametersToRemove)).append("\n");
    sb.append("    inputArtifacts: ").append(toIndentedString(inputArtifacts)).append("\n");
    sb.append("    inputArtifactsToRemove: ").append(toIndentedString(inputArtifactsToRemove)).append("\n");
    sb.append("    outputArtifacts: ").append(toIndentedString(outputArtifacts)).append("\n");
    sb.append("    outputArtifactsToRemove: ").append(toIndentedString(outputArtifactsToRemove)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TrialComponentName");
    openapiFields.add("DisplayName");
    openapiFields.add("Status");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("Parameters");
    openapiFields.add("ParametersToRemove");
    openapiFields.add("InputArtifacts");
    openapiFields.add("InputArtifactsToRemove");
    openapiFields.add("OutputArtifacts");
    openapiFields.add("OutputArtifactsToRemove");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TrialComponentName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTrialComponentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTrialComponentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTrialComponentRequest is not found in the empty JSON string", UpdateTrialComponentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTrialComponentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTrialComponentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateTrialComponentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TrialComponentName`
      String.validateJsonElement(jsonObj.get("TrialComponentName"));
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        UpdateTrialComponentRequestStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `ParametersToRemove`
      if (jsonObj.get("ParametersToRemove") != null && !jsonObj.get("ParametersToRemove").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ParametersToRemove"));
      }
      // validate the optional field `InputArtifacts`
      if (jsonObj.get("InputArtifacts") != null && !jsonObj.get("InputArtifacts").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("InputArtifacts"));
      }
      // validate the optional field `InputArtifactsToRemove`
      if (jsonObj.get("InputArtifactsToRemove") != null && !jsonObj.get("InputArtifactsToRemove").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InputArtifactsToRemove"));
      }
      // validate the optional field `OutputArtifacts`
      if (jsonObj.get("OutputArtifacts") != null && !jsonObj.get("OutputArtifacts").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("OutputArtifacts"));
      }
      // validate the optional field `OutputArtifactsToRemove`
      if (jsonObj.get("OutputArtifactsToRemove") != null && !jsonObj.get("OutputArtifactsToRemove").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OutputArtifactsToRemove"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTrialComponentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTrialComponentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTrialComponentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTrialComponentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTrialComponentRequest>() {
           @Override
           public void write(JsonWriter out, UpdateTrialComponentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTrialComponentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTrialComponentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTrialComponentRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateTrialComponentRequest
   */
  public static UpdateTrialComponentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTrialComponentRequest.class);
  }

  /**
   * Convert an instance of UpdateTrialComponentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

