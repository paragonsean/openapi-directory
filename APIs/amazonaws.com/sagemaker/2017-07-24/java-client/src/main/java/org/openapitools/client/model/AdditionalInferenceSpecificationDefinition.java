/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalInferenceSpecificationDefinition {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CONTAINERS = "Containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List containers;

  public static final String SERIALIZED_NAME_SUPPORTED_TRANSFORM_INSTANCE_TYPES = "SupportedTransformInstanceTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_TRANSFORM_INSTANCE_TYPES)
  private List supportedTransformInstanceTypes;

  public static final String SERIALIZED_NAME_SUPPORTED_REALTIME_INFERENCE_INSTANCE_TYPES = "SupportedRealtimeInferenceInstanceTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_REALTIME_INFERENCE_INSTANCE_TYPES)
  private List supportedRealtimeInferenceInstanceTypes;

  public static final String SERIALIZED_NAME_SUPPORTED_CONTENT_TYPES = "SupportedContentTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_CONTENT_TYPES)
  private List supportedContentTypes;

  public static final String SERIALIZED_NAME_SUPPORTED_RESPONSE_M_I_M_E_TYPES = "SupportedResponseMIMETypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_RESPONSE_M_I_M_E_TYPES)
  private List supportedResponseMIMETypes;

  public AdditionalInferenceSpecificationDefinition() {
  }

  public AdditionalInferenceSpecificationDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AdditionalInferenceSpecificationDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AdditionalInferenceSpecificationDefinition containers(List containers) {
    this.containers = containers;
    return this;
  }

  /**
   * Get containers
   * @return containers
   */
  @javax.annotation.Nonnull
  public List getContainers() {
    return containers;
  }

  public void setContainers(List containers) {
    this.containers = containers;
  }


  public AdditionalInferenceSpecificationDefinition supportedTransformInstanceTypes(List supportedTransformInstanceTypes) {
    this.supportedTransformInstanceTypes = supportedTransformInstanceTypes;
    return this;
  }

  /**
   * Get supportedTransformInstanceTypes
   * @return supportedTransformInstanceTypes
   */
  @javax.annotation.Nullable
  public List getSupportedTransformInstanceTypes() {
    return supportedTransformInstanceTypes;
  }

  public void setSupportedTransformInstanceTypes(List supportedTransformInstanceTypes) {
    this.supportedTransformInstanceTypes = supportedTransformInstanceTypes;
  }


  public AdditionalInferenceSpecificationDefinition supportedRealtimeInferenceInstanceTypes(List supportedRealtimeInferenceInstanceTypes) {
    this.supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes;
    return this;
  }

  /**
   * Get supportedRealtimeInferenceInstanceTypes
   * @return supportedRealtimeInferenceInstanceTypes
   */
  @javax.annotation.Nullable
  public List getSupportedRealtimeInferenceInstanceTypes() {
    return supportedRealtimeInferenceInstanceTypes;
  }

  public void setSupportedRealtimeInferenceInstanceTypes(List supportedRealtimeInferenceInstanceTypes) {
    this.supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes;
  }


  public AdditionalInferenceSpecificationDefinition supportedContentTypes(List supportedContentTypes) {
    this.supportedContentTypes = supportedContentTypes;
    return this;
  }

  /**
   * Get supportedContentTypes
   * @return supportedContentTypes
   */
  @javax.annotation.Nullable
  public List getSupportedContentTypes() {
    return supportedContentTypes;
  }

  public void setSupportedContentTypes(List supportedContentTypes) {
    this.supportedContentTypes = supportedContentTypes;
  }


  public AdditionalInferenceSpecificationDefinition supportedResponseMIMETypes(List supportedResponseMIMETypes) {
    this.supportedResponseMIMETypes = supportedResponseMIMETypes;
    return this;
  }

  /**
   * Get supportedResponseMIMETypes
   * @return supportedResponseMIMETypes
   */
  @javax.annotation.Nullable
  public List getSupportedResponseMIMETypes() {
    return supportedResponseMIMETypes;
  }

  public void setSupportedResponseMIMETypes(List supportedResponseMIMETypes) {
    this.supportedResponseMIMETypes = supportedResponseMIMETypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalInferenceSpecificationDefinition additionalInferenceSpecificationDefinition = (AdditionalInferenceSpecificationDefinition) o;
    return Objects.equals(this.name, additionalInferenceSpecificationDefinition.name) &&
        Objects.equals(this.description, additionalInferenceSpecificationDefinition.description) &&
        Objects.equals(this.containers, additionalInferenceSpecificationDefinition.containers) &&
        Objects.equals(this.supportedTransformInstanceTypes, additionalInferenceSpecificationDefinition.supportedTransformInstanceTypes) &&
        Objects.equals(this.supportedRealtimeInferenceInstanceTypes, additionalInferenceSpecificationDefinition.supportedRealtimeInferenceInstanceTypes) &&
        Objects.equals(this.supportedContentTypes, additionalInferenceSpecificationDefinition.supportedContentTypes) &&
        Objects.equals(this.supportedResponseMIMETypes, additionalInferenceSpecificationDefinition.supportedResponseMIMETypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, containers, supportedTransformInstanceTypes, supportedRealtimeInferenceInstanceTypes, supportedContentTypes, supportedResponseMIMETypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalInferenceSpecificationDefinition {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    supportedTransformInstanceTypes: ").append(toIndentedString(supportedTransformInstanceTypes)).append("\n");
    sb.append("    supportedRealtimeInferenceInstanceTypes: ").append(toIndentedString(supportedRealtimeInferenceInstanceTypes)).append("\n");
    sb.append("    supportedContentTypes: ").append(toIndentedString(supportedContentTypes)).append("\n");
    sb.append("    supportedResponseMIMETypes: ").append(toIndentedString(supportedResponseMIMETypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("Containers");
    openapiFields.add("SupportedTransformInstanceTypes");
    openapiFields.add("SupportedRealtimeInferenceInstanceTypes");
    openapiFields.add("SupportedContentTypes");
    openapiFields.add("SupportedResponseMIMETypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Containers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalInferenceSpecificationDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalInferenceSpecificationDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalInferenceSpecificationDefinition is not found in the empty JSON string", AdditionalInferenceSpecificationDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalInferenceSpecificationDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalInferenceSpecificationDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdditionalInferenceSpecificationDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the required field `Containers`
      List.validateJsonElement(jsonObj.get("Containers"));
      // validate the optional field `SupportedTransformInstanceTypes`
      if (jsonObj.get("SupportedTransformInstanceTypes") != null && !jsonObj.get("SupportedTransformInstanceTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedTransformInstanceTypes"));
      }
      // validate the optional field `SupportedRealtimeInferenceInstanceTypes`
      if (jsonObj.get("SupportedRealtimeInferenceInstanceTypes") != null && !jsonObj.get("SupportedRealtimeInferenceInstanceTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedRealtimeInferenceInstanceTypes"));
      }
      // validate the optional field `SupportedContentTypes`
      if (jsonObj.get("SupportedContentTypes") != null && !jsonObj.get("SupportedContentTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedContentTypes"));
      }
      // validate the optional field `SupportedResponseMIMETypes`
      if (jsonObj.get("SupportedResponseMIMETypes") != null && !jsonObj.get("SupportedResponseMIMETypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedResponseMIMETypes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalInferenceSpecificationDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalInferenceSpecificationDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalInferenceSpecificationDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalInferenceSpecificationDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalInferenceSpecificationDefinition>() {
           @Override
           public void write(JsonWriter out, AdditionalInferenceSpecificationDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalInferenceSpecificationDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalInferenceSpecificationDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalInferenceSpecificationDefinition
   * @throws IOException if the JSON string is invalid with respect to AdditionalInferenceSpecificationDefinition
   */
  public static AdditionalInferenceSpecificationDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalInferenceSpecificationDefinition.class);
  }

  /**
   * Convert an instance of AdditionalInferenceSpecificationDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

