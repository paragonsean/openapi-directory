/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BlueGreenUpdatePolicyTrafficRoutingConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlueGreenUpdatePolicy {
  public static final String SERIALIZED_NAME_TRAFFIC_ROUTING_CONFIGURATION = "TrafficRoutingConfiguration";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_ROUTING_CONFIGURATION)
  private BlueGreenUpdatePolicyTrafficRoutingConfiguration trafficRoutingConfiguration;

  public static final String SERIALIZED_NAME_TERMINATION_WAIT_IN_SECONDS = "TerminationWaitInSeconds";
  @SerializedName(SERIALIZED_NAME_TERMINATION_WAIT_IN_SECONDS)
  private Integer terminationWaitInSeconds;

  public static final String SERIALIZED_NAME_MAXIMUM_EXECUTION_TIMEOUT_IN_SECONDS = "MaximumExecutionTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_EXECUTION_TIMEOUT_IN_SECONDS)
  private Integer maximumExecutionTimeoutInSeconds;

  public BlueGreenUpdatePolicy() {
  }

  public BlueGreenUpdatePolicy trafficRoutingConfiguration(BlueGreenUpdatePolicyTrafficRoutingConfiguration trafficRoutingConfiguration) {
    this.trafficRoutingConfiguration = trafficRoutingConfiguration;
    return this;
  }

  /**
   * Get trafficRoutingConfiguration
   * @return trafficRoutingConfiguration
   */
  @javax.annotation.Nonnull
  public BlueGreenUpdatePolicyTrafficRoutingConfiguration getTrafficRoutingConfiguration() {
    return trafficRoutingConfiguration;
  }

  public void setTrafficRoutingConfiguration(BlueGreenUpdatePolicyTrafficRoutingConfiguration trafficRoutingConfiguration) {
    this.trafficRoutingConfiguration = trafficRoutingConfiguration;
  }


  public BlueGreenUpdatePolicy terminationWaitInSeconds(Integer terminationWaitInSeconds) {
    this.terminationWaitInSeconds = terminationWaitInSeconds;
    return this;
  }

  /**
   * Get terminationWaitInSeconds
   * @return terminationWaitInSeconds
   */
  @javax.annotation.Nullable
  public Integer getTerminationWaitInSeconds() {
    return terminationWaitInSeconds;
  }

  public void setTerminationWaitInSeconds(Integer terminationWaitInSeconds) {
    this.terminationWaitInSeconds = terminationWaitInSeconds;
  }


  public BlueGreenUpdatePolicy maximumExecutionTimeoutInSeconds(Integer maximumExecutionTimeoutInSeconds) {
    this.maximumExecutionTimeoutInSeconds = maximumExecutionTimeoutInSeconds;
    return this;
  }

  /**
   * Get maximumExecutionTimeoutInSeconds
   * @return maximumExecutionTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaximumExecutionTimeoutInSeconds() {
    return maximumExecutionTimeoutInSeconds;
  }

  public void setMaximumExecutionTimeoutInSeconds(Integer maximumExecutionTimeoutInSeconds) {
    this.maximumExecutionTimeoutInSeconds = maximumExecutionTimeoutInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueGreenUpdatePolicy blueGreenUpdatePolicy = (BlueGreenUpdatePolicy) o;
    return Objects.equals(this.trafficRoutingConfiguration, blueGreenUpdatePolicy.trafficRoutingConfiguration) &&
        Objects.equals(this.terminationWaitInSeconds, blueGreenUpdatePolicy.terminationWaitInSeconds) &&
        Objects.equals(this.maximumExecutionTimeoutInSeconds, blueGreenUpdatePolicy.maximumExecutionTimeoutInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trafficRoutingConfiguration, terminationWaitInSeconds, maximumExecutionTimeoutInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueGreenUpdatePolicy {\n");
    sb.append("    trafficRoutingConfiguration: ").append(toIndentedString(trafficRoutingConfiguration)).append("\n");
    sb.append("    terminationWaitInSeconds: ").append(toIndentedString(terminationWaitInSeconds)).append("\n");
    sb.append("    maximumExecutionTimeoutInSeconds: ").append(toIndentedString(maximumExecutionTimeoutInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TrafficRoutingConfiguration");
    openapiFields.add("TerminationWaitInSeconds");
    openapiFields.add("MaximumExecutionTimeoutInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TrafficRoutingConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlueGreenUpdatePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlueGreenUpdatePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlueGreenUpdatePolicy is not found in the empty JSON string", BlueGreenUpdatePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlueGreenUpdatePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlueGreenUpdatePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlueGreenUpdatePolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TrafficRoutingConfiguration`
      BlueGreenUpdatePolicyTrafficRoutingConfiguration.validateJsonElement(jsonObj.get("TrafficRoutingConfiguration"));
      // validate the optional field `TerminationWaitInSeconds`
      if (jsonObj.get("TerminationWaitInSeconds") != null && !jsonObj.get("TerminationWaitInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TerminationWaitInSeconds"));
      }
      // validate the optional field `MaximumExecutionTimeoutInSeconds`
      if (jsonObj.get("MaximumExecutionTimeoutInSeconds") != null && !jsonObj.get("MaximumExecutionTimeoutInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaximumExecutionTimeoutInSeconds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlueGreenUpdatePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlueGreenUpdatePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlueGreenUpdatePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlueGreenUpdatePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<BlueGreenUpdatePolicy>() {
           @Override
           public void write(JsonWriter out, BlueGreenUpdatePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlueGreenUpdatePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlueGreenUpdatePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlueGreenUpdatePolicy
   * @throws IOException if the JSON string is invalid with respect to BlueGreenUpdatePolicy
   */
  public static BlueGreenUpdatePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlueGreenUpdatePolicy.class);
  }

  /**
   * Convert an instance of BlueGreenUpdatePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

