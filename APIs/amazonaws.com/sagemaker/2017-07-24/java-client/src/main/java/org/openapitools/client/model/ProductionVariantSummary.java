/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PendingProductionVariantSummaryCurrentServerlessConfig;
import org.openapitools.client.model.ProductionVariantSummaryDesiredServerlessConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes weight and capacities for a production variant associated with an endpoint. If you sent a request to the &lt;code&gt;UpdateEndpointWeightsAndCapacities&lt;/code&gt; API and the endpoint status is &lt;code&gt;Updating&lt;/code&gt;, you get different desired and current values. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductionVariantSummary {
  public static final String SERIALIZED_NAME_VARIANT_NAME = "VariantName";
  @SerializedName(SERIALIZED_NAME_VARIANT_NAME)
  private String variantName;

  public static final String SERIALIZED_NAME_DEPLOYED_IMAGES = "DeployedImages";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_IMAGES)
  private List deployedImages;

  public static final String SERIALIZED_NAME_CURRENT_WEIGHT = "CurrentWeight";
  @SerializedName(SERIALIZED_NAME_CURRENT_WEIGHT)
  private Float currentWeight;

  public static final String SERIALIZED_NAME_DESIRED_WEIGHT = "DesiredWeight";
  @SerializedName(SERIALIZED_NAME_DESIRED_WEIGHT)
  private Float desiredWeight;

  public static final String SERIALIZED_NAME_CURRENT_INSTANCE_COUNT = "CurrentInstanceCount";
  @SerializedName(SERIALIZED_NAME_CURRENT_INSTANCE_COUNT)
  private Integer currentInstanceCount;

  public static final String SERIALIZED_NAME_DESIRED_INSTANCE_COUNT = "DesiredInstanceCount";
  @SerializedName(SERIALIZED_NAME_DESIRED_INSTANCE_COUNT)
  private Integer desiredInstanceCount;

  public static final String SERIALIZED_NAME_VARIANT_STATUS = "VariantStatus";
  @SerializedName(SERIALIZED_NAME_VARIANT_STATUS)
  private List variantStatus;

  public static final String SERIALIZED_NAME_CURRENT_SERVERLESS_CONFIG = "CurrentServerlessConfig";
  @SerializedName(SERIALIZED_NAME_CURRENT_SERVERLESS_CONFIG)
  private PendingProductionVariantSummaryCurrentServerlessConfig currentServerlessConfig;

  public static final String SERIALIZED_NAME_DESIRED_SERVERLESS_CONFIG = "DesiredServerlessConfig";
  @SerializedName(SERIALIZED_NAME_DESIRED_SERVERLESS_CONFIG)
  private ProductionVariantSummaryDesiredServerlessConfig desiredServerlessConfig;

  public ProductionVariantSummary() {
  }

  public ProductionVariantSummary variantName(String variantName) {
    this.variantName = variantName;
    return this;
  }

  /**
   * Get variantName
   * @return variantName
   */
  @javax.annotation.Nonnull
  public String getVariantName() {
    return variantName;
  }

  public void setVariantName(String variantName) {
    this.variantName = variantName;
  }


  public ProductionVariantSummary deployedImages(List deployedImages) {
    this.deployedImages = deployedImages;
    return this;
  }

  /**
   * Get deployedImages
   * @return deployedImages
   */
  @javax.annotation.Nullable
  public List getDeployedImages() {
    return deployedImages;
  }

  public void setDeployedImages(List deployedImages) {
    this.deployedImages = deployedImages;
  }


  public ProductionVariantSummary currentWeight(Float currentWeight) {
    this.currentWeight = currentWeight;
    return this;
  }

  /**
   * Get currentWeight
   * @return currentWeight
   */
  @javax.annotation.Nullable
  public Float getCurrentWeight() {
    return currentWeight;
  }

  public void setCurrentWeight(Float currentWeight) {
    this.currentWeight = currentWeight;
  }


  public ProductionVariantSummary desiredWeight(Float desiredWeight) {
    this.desiredWeight = desiredWeight;
    return this;
  }

  /**
   * Get desiredWeight
   * @return desiredWeight
   */
  @javax.annotation.Nullable
  public Float getDesiredWeight() {
    return desiredWeight;
  }

  public void setDesiredWeight(Float desiredWeight) {
    this.desiredWeight = desiredWeight;
  }


  public ProductionVariantSummary currentInstanceCount(Integer currentInstanceCount) {
    this.currentInstanceCount = currentInstanceCount;
    return this;
  }

  /**
   * Get currentInstanceCount
   * @return currentInstanceCount
   */
  @javax.annotation.Nullable
  public Integer getCurrentInstanceCount() {
    return currentInstanceCount;
  }

  public void setCurrentInstanceCount(Integer currentInstanceCount) {
    this.currentInstanceCount = currentInstanceCount;
  }


  public ProductionVariantSummary desiredInstanceCount(Integer desiredInstanceCount) {
    this.desiredInstanceCount = desiredInstanceCount;
    return this;
  }

  /**
   * Get desiredInstanceCount
   * @return desiredInstanceCount
   */
  @javax.annotation.Nullable
  public Integer getDesiredInstanceCount() {
    return desiredInstanceCount;
  }

  public void setDesiredInstanceCount(Integer desiredInstanceCount) {
    this.desiredInstanceCount = desiredInstanceCount;
  }


  public ProductionVariantSummary variantStatus(List variantStatus) {
    this.variantStatus = variantStatus;
    return this;
  }

  /**
   * Get variantStatus
   * @return variantStatus
   */
  @javax.annotation.Nullable
  public List getVariantStatus() {
    return variantStatus;
  }

  public void setVariantStatus(List variantStatus) {
    this.variantStatus = variantStatus;
  }


  public ProductionVariantSummary currentServerlessConfig(PendingProductionVariantSummaryCurrentServerlessConfig currentServerlessConfig) {
    this.currentServerlessConfig = currentServerlessConfig;
    return this;
  }

  /**
   * Get currentServerlessConfig
   * @return currentServerlessConfig
   */
  @javax.annotation.Nullable
  public PendingProductionVariantSummaryCurrentServerlessConfig getCurrentServerlessConfig() {
    return currentServerlessConfig;
  }

  public void setCurrentServerlessConfig(PendingProductionVariantSummaryCurrentServerlessConfig currentServerlessConfig) {
    this.currentServerlessConfig = currentServerlessConfig;
  }


  public ProductionVariantSummary desiredServerlessConfig(ProductionVariantSummaryDesiredServerlessConfig desiredServerlessConfig) {
    this.desiredServerlessConfig = desiredServerlessConfig;
    return this;
  }

  /**
   * Get desiredServerlessConfig
   * @return desiredServerlessConfig
   */
  @javax.annotation.Nullable
  public ProductionVariantSummaryDesiredServerlessConfig getDesiredServerlessConfig() {
    return desiredServerlessConfig;
  }

  public void setDesiredServerlessConfig(ProductionVariantSummaryDesiredServerlessConfig desiredServerlessConfig) {
    this.desiredServerlessConfig = desiredServerlessConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductionVariantSummary productionVariantSummary = (ProductionVariantSummary) o;
    return Objects.equals(this.variantName, productionVariantSummary.variantName) &&
        Objects.equals(this.deployedImages, productionVariantSummary.deployedImages) &&
        Objects.equals(this.currentWeight, productionVariantSummary.currentWeight) &&
        Objects.equals(this.desiredWeight, productionVariantSummary.desiredWeight) &&
        Objects.equals(this.currentInstanceCount, productionVariantSummary.currentInstanceCount) &&
        Objects.equals(this.desiredInstanceCount, productionVariantSummary.desiredInstanceCount) &&
        Objects.equals(this.variantStatus, productionVariantSummary.variantStatus) &&
        Objects.equals(this.currentServerlessConfig, productionVariantSummary.currentServerlessConfig) &&
        Objects.equals(this.desiredServerlessConfig, productionVariantSummary.desiredServerlessConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variantName, deployedImages, currentWeight, desiredWeight, currentInstanceCount, desiredInstanceCount, variantStatus, currentServerlessConfig, desiredServerlessConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductionVariantSummary {\n");
    sb.append("    variantName: ").append(toIndentedString(variantName)).append("\n");
    sb.append("    deployedImages: ").append(toIndentedString(deployedImages)).append("\n");
    sb.append("    currentWeight: ").append(toIndentedString(currentWeight)).append("\n");
    sb.append("    desiredWeight: ").append(toIndentedString(desiredWeight)).append("\n");
    sb.append("    currentInstanceCount: ").append(toIndentedString(currentInstanceCount)).append("\n");
    sb.append("    desiredInstanceCount: ").append(toIndentedString(desiredInstanceCount)).append("\n");
    sb.append("    variantStatus: ").append(toIndentedString(variantStatus)).append("\n");
    sb.append("    currentServerlessConfig: ").append(toIndentedString(currentServerlessConfig)).append("\n");
    sb.append("    desiredServerlessConfig: ").append(toIndentedString(desiredServerlessConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VariantName");
    openapiFields.add("DeployedImages");
    openapiFields.add("CurrentWeight");
    openapiFields.add("DesiredWeight");
    openapiFields.add("CurrentInstanceCount");
    openapiFields.add("DesiredInstanceCount");
    openapiFields.add("VariantStatus");
    openapiFields.add("CurrentServerlessConfig");
    openapiFields.add("DesiredServerlessConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("VariantName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductionVariantSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductionVariantSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductionVariantSummary is not found in the empty JSON string", ProductionVariantSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductionVariantSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductionVariantSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductionVariantSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `VariantName`
      String.validateJsonElement(jsonObj.get("VariantName"));
      // validate the optional field `DeployedImages`
      if (jsonObj.get("DeployedImages") != null && !jsonObj.get("DeployedImages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DeployedImages"));
      }
      // validate the optional field `CurrentWeight`
      if (jsonObj.get("CurrentWeight") != null && !jsonObj.get("CurrentWeight").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("CurrentWeight"));
      }
      // validate the optional field `DesiredWeight`
      if (jsonObj.get("DesiredWeight") != null && !jsonObj.get("DesiredWeight").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("DesiredWeight"));
      }
      // validate the optional field `CurrentInstanceCount`
      if (jsonObj.get("CurrentInstanceCount") != null && !jsonObj.get("CurrentInstanceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CurrentInstanceCount"));
      }
      // validate the optional field `DesiredInstanceCount`
      if (jsonObj.get("DesiredInstanceCount") != null && !jsonObj.get("DesiredInstanceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DesiredInstanceCount"));
      }
      // validate the optional field `VariantStatus`
      if (jsonObj.get("VariantStatus") != null && !jsonObj.get("VariantStatus").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VariantStatus"));
      }
      // validate the optional field `CurrentServerlessConfig`
      if (jsonObj.get("CurrentServerlessConfig") != null && !jsonObj.get("CurrentServerlessConfig").isJsonNull()) {
        PendingProductionVariantSummaryCurrentServerlessConfig.validateJsonElement(jsonObj.get("CurrentServerlessConfig"));
      }
      // validate the optional field `DesiredServerlessConfig`
      if (jsonObj.get("DesiredServerlessConfig") != null && !jsonObj.get("DesiredServerlessConfig").isJsonNull()) {
        ProductionVariantSummaryDesiredServerlessConfig.validateJsonElement(jsonObj.get("DesiredServerlessConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductionVariantSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductionVariantSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductionVariantSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductionVariantSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductionVariantSummary>() {
           @Override
           public void write(JsonWriter out, ProductionVariantSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductionVariantSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductionVariantSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductionVariantSummary
   * @throws IOException if the JSON string is invalid with respect to ProductionVariantSummary
   */
  public static ProductionVariantSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductionVariantSummary.class);
  }

  /**
   * Convert an instance of ProductionVariantSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

