/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProductionVariantAcceleratorType;
import org.openapitools.client.model.ProductionVariantCoreDumpConfig;
import org.openapitools.client.model.ProductionVariantInstanceType;
import org.openapitools.client.model.ProductionVariantServerlessConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic among the models by specifying variant weights. For more information on production variants, check &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html\&quot;&gt; Production variants&lt;/a&gt;. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductionVariant {
  public static final String SERIALIZED_NAME_VARIANT_NAME = "VariantName";
  @SerializedName(SERIALIZED_NAME_VARIANT_NAME)
  private String variantName;

  public static final String SERIALIZED_NAME_MODEL_NAME = "ModelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_INITIAL_INSTANCE_COUNT = "InitialInstanceCount";
  @SerializedName(SERIALIZED_NAME_INITIAL_INSTANCE_COUNT)
  private Integer initialInstanceCount;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private ProductionVariantInstanceType instanceType;

  public static final String SERIALIZED_NAME_INITIAL_VARIANT_WEIGHT = "InitialVariantWeight";
  @SerializedName(SERIALIZED_NAME_INITIAL_VARIANT_WEIGHT)
  private Float initialVariantWeight;

  public static final String SERIALIZED_NAME_ACCELERATOR_TYPE = "AcceleratorType";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_TYPE)
  private ProductionVariantAcceleratorType acceleratorType;

  public static final String SERIALIZED_NAME_CORE_DUMP_CONFIG = "CoreDumpConfig";
  @SerializedName(SERIALIZED_NAME_CORE_DUMP_CONFIG)
  private ProductionVariantCoreDumpConfig coreDumpConfig;

  public static final String SERIALIZED_NAME_SERVERLESS_CONFIG = "ServerlessConfig";
  @SerializedName(SERIALIZED_NAME_SERVERLESS_CONFIG)
  private ProductionVariantServerlessConfig serverlessConfig;

  public static final String SERIALIZED_NAME_VOLUME_SIZE_IN_G_B = "VolumeSizeInGB";
  @SerializedName(SERIALIZED_NAME_VOLUME_SIZE_IN_G_B)
  private Integer volumeSizeInGB;

  public static final String SERIALIZED_NAME_MODEL_DATA_DOWNLOAD_TIMEOUT_IN_SECONDS = "ModelDataDownloadTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_MODEL_DATA_DOWNLOAD_TIMEOUT_IN_SECONDS)
  private Integer modelDataDownloadTimeoutInSeconds;

  public static final String SERIALIZED_NAME_CONTAINER_STARTUP_HEALTH_CHECK_TIMEOUT_IN_SECONDS = "ContainerStartupHealthCheckTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_CONTAINER_STARTUP_HEALTH_CHECK_TIMEOUT_IN_SECONDS)
  private Integer containerStartupHealthCheckTimeoutInSeconds;

  public static final String SERIALIZED_NAME_ENABLE_S_S_M_ACCESS = "EnableSSMAccess";
  @SerializedName(SERIALIZED_NAME_ENABLE_S_S_M_ACCESS)
  private Boolean enableSSMAccess;

  public ProductionVariant() {
  }

  public ProductionVariant variantName(String variantName) {
    this.variantName = variantName;
    return this;
  }

  /**
   * Get variantName
   * @return variantName
   */
  @javax.annotation.Nonnull
  public String getVariantName() {
    return variantName;
  }

  public void setVariantName(String variantName) {
    this.variantName = variantName;
  }


  public ProductionVariant modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Get modelName
   * @return modelName
   */
  @javax.annotation.Nonnull
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public ProductionVariant initialInstanceCount(Integer initialInstanceCount) {
    this.initialInstanceCount = initialInstanceCount;
    return this;
  }

  /**
   * Get initialInstanceCount
   * @return initialInstanceCount
   */
  @javax.annotation.Nullable
  public Integer getInitialInstanceCount() {
    return initialInstanceCount;
  }

  public void setInitialInstanceCount(Integer initialInstanceCount) {
    this.initialInstanceCount = initialInstanceCount;
  }


  public ProductionVariant instanceType(ProductionVariantInstanceType instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public ProductionVariantInstanceType getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(ProductionVariantInstanceType instanceType) {
    this.instanceType = instanceType;
  }


  public ProductionVariant initialVariantWeight(Float initialVariantWeight) {
    this.initialVariantWeight = initialVariantWeight;
    return this;
  }

  /**
   * Get initialVariantWeight
   * @return initialVariantWeight
   */
  @javax.annotation.Nullable
  public Float getInitialVariantWeight() {
    return initialVariantWeight;
  }

  public void setInitialVariantWeight(Float initialVariantWeight) {
    this.initialVariantWeight = initialVariantWeight;
  }


  public ProductionVariant acceleratorType(ProductionVariantAcceleratorType acceleratorType) {
    this.acceleratorType = acceleratorType;
    return this;
  }

  /**
   * Get acceleratorType
   * @return acceleratorType
   */
  @javax.annotation.Nullable
  public ProductionVariantAcceleratorType getAcceleratorType() {
    return acceleratorType;
  }

  public void setAcceleratorType(ProductionVariantAcceleratorType acceleratorType) {
    this.acceleratorType = acceleratorType;
  }


  public ProductionVariant coreDumpConfig(ProductionVariantCoreDumpConfig coreDumpConfig) {
    this.coreDumpConfig = coreDumpConfig;
    return this;
  }

  /**
   * Get coreDumpConfig
   * @return coreDumpConfig
   */
  @javax.annotation.Nullable
  public ProductionVariantCoreDumpConfig getCoreDumpConfig() {
    return coreDumpConfig;
  }

  public void setCoreDumpConfig(ProductionVariantCoreDumpConfig coreDumpConfig) {
    this.coreDumpConfig = coreDumpConfig;
  }


  public ProductionVariant serverlessConfig(ProductionVariantServerlessConfig serverlessConfig) {
    this.serverlessConfig = serverlessConfig;
    return this;
  }

  /**
   * Get serverlessConfig
   * @return serverlessConfig
   */
  @javax.annotation.Nullable
  public ProductionVariantServerlessConfig getServerlessConfig() {
    return serverlessConfig;
  }

  public void setServerlessConfig(ProductionVariantServerlessConfig serverlessConfig) {
    this.serverlessConfig = serverlessConfig;
  }


  public ProductionVariant volumeSizeInGB(Integer volumeSizeInGB) {
    this.volumeSizeInGB = volumeSizeInGB;
    return this;
  }

  /**
   * Get volumeSizeInGB
   * @return volumeSizeInGB
   */
  @javax.annotation.Nullable
  public Integer getVolumeSizeInGB() {
    return volumeSizeInGB;
  }

  public void setVolumeSizeInGB(Integer volumeSizeInGB) {
    this.volumeSizeInGB = volumeSizeInGB;
  }


  public ProductionVariant modelDataDownloadTimeoutInSeconds(Integer modelDataDownloadTimeoutInSeconds) {
    this.modelDataDownloadTimeoutInSeconds = modelDataDownloadTimeoutInSeconds;
    return this;
  }

  /**
   * Get modelDataDownloadTimeoutInSeconds
   * @return modelDataDownloadTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Integer getModelDataDownloadTimeoutInSeconds() {
    return modelDataDownloadTimeoutInSeconds;
  }

  public void setModelDataDownloadTimeoutInSeconds(Integer modelDataDownloadTimeoutInSeconds) {
    this.modelDataDownloadTimeoutInSeconds = modelDataDownloadTimeoutInSeconds;
  }


  public ProductionVariant containerStartupHealthCheckTimeoutInSeconds(Integer containerStartupHealthCheckTimeoutInSeconds) {
    this.containerStartupHealthCheckTimeoutInSeconds = containerStartupHealthCheckTimeoutInSeconds;
    return this;
  }

  /**
   * Get containerStartupHealthCheckTimeoutInSeconds
   * @return containerStartupHealthCheckTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Integer getContainerStartupHealthCheckTimeoutInSeconds() {
    return containerStartupHealthCheckTimeoutInSeconds;
  }

  public void setContainerStartupHealthCheckTimeoutInSeconds(Integer containerStartupHealthCheckTimeoutInSeconds) {
    this.containerStartupHealthCheckTimeoutInSeconds = containerStartupHealthCheckTimeoutInSeconds;
  }


  public ProductionVariant enableSSMAccess(Boolean enableSSMAccess) {
    this.enableSSMAccess = enableSSMAccess;
    return this;
  }

  /**
   * Get enableSSMAccess
   * @return enableSSMAccess
   */
  @javax.annotation.Nullable
  public Boolean getEnableSSMAccess() {
    return enableSSMAccess;
  }

  public void setEnableSSMAccess(Boolean enableSSMAccess) {
    this.enableSSMAccess = enableSSMAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductionVariant productionVariant = (ProductionVariant) o;
    return Objects.equals(this.variantName, productionVariant.variantName) &&
        Objects.equals(this.modelName, productionVariant.modelName) &&
        Objects.equals(this.initialInstanceCount, productionVariant.initialInstanceCount) &&
        Objects.equals(this.instanceType, productionVariant.instanceType) &&
        Objects.equals(this.initialVariantWeight, productionVariant.initialVariantWeight) &&
        Objects.equals(this.acceleratorType, productionVariant.acceleratorType) &&
        Objects.equals(this.coreDumpConfig, productionVariant.coreDumpConfig) &&
        Objects.equals(this.serverlessConfig, productionVariant.serverlessConfig) &&
        Objects.equals(this.volumeSizeInGB, productionVariant.volumeSizeInGB) &&
        Objects.equals(this.modelDataDownloadTimeoutInSeconds, productionVariant.modelDataDownloadTimeoutInSeconds) &&
        Objects.equals(this.containerStartupHealthCheckTimeoutInSeconds, productionVariant.containerStartupHealthCheckTimeoutInSeconds) &&
        Objects.equals(this.enableSSMAccess, productionVariant.enableSSMAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variantName, modelName, initialInstanceCount, instanceType, initialVariantWeight, acceleratorType, coreDumpConfig, serverlessConfig, volumeSizeInGB, modelDataDownloadTimeoutInSeconds, containerStartupHealthCheckTimeoutInSeconds, enableSSMAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductionVariant {\n");
    sb.append("    variantName: ").append(toIndentedString(variantName)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    initialInstanceCount: ").append(toIndentedString(initialInstanceCount)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    initialVariantWeight: ").append(toIndentedString(initialVariantWeight)).append("\n");
    sb.append("    acceleratorType: ").append(toIndentedString(acceleratorType)).append("\n");
    sb.append("    coreDumpConfig: ").append(toIndentedString(coreDumpConfig)).append("\n");
    sb.append("    serverlessConfig: ").append(toIndentedString(serverlessConfig)).append("\n");
    sb.append("    volumeSizeInGB: ").append(toIndentedString(volumeSizeInGB)).append("\n");
    sb.append("    modelDataDownloadTimeoutInSeconds: ").append(toIndentedString(modelDataDownloadTimeoutInSeconds)).append("\n");
    sb.append("    containerStartupHealthCheckTimeoutInSeconds: ").append(toIndentedString(containerStartupHealthCheckTimeoutInSeconds)).append("\n");
    sb.append("    enableSSMAccess: ").append(toIndentedString(enableSSMAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VariantName");
    openapiFields.add("ModelName");
    openapiFields.add("InitialInstanceCount");
    openapiFields.add("InstanceType");
    openapiFields.add("InitialVariantWeight");
    openapiFields.add("AcceleratorType");
    openapiFields.add("CoreDumpConfig");
    openapiFields.add("ServerlessConfig");
    openapiFields.add("VolumeSizeInGB");
    openapiFields.add("ModelDataDownloadTimeoutInSeconds");
    openapiFields.add("ContainerStartupHealthCheckTimeoutInSeconds");
    openapiFields.add("EnableSSMAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("VariantName");
    openapiRequiredFields.add("ModelName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductionVariant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductionVariant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductionVariant is not found in the empty JSON string", ProductionVariant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductionVariant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductionVariant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductionVariant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `VariantName`
      String.validateJsonElement(jsonObj.get("VariantName"));
      // validate the required field `ModelName`
      String.validateJsonElement(jsonObj.get("ModelName"));
      // validate the optional field `InitialInstanceCount`
      if (jsonObj.get("InitialInstanceCount") != null && !jsonObj.get("InitialInstanceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InitialInstanceCount"));
      }
      // validate the optional field `InstanceType`
      if (jsonObj.get("InstanceType") != null && !jsonObj.get("InstanceType").isJsonNull()) {
        ProductionVariantInstanceType.validateJsonElement(jsonObj.get("InstanceType"));
      }
      // validate the optional field `InitialVariantWeight`
      if (jsonObj.get("InitialVariantWeight") != null && !jsonObj.get("InitialVariantWeight").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("InitialVariantWeight"));
      }
      // validate the optional field `AcceleratorType`
      if (jsonObj.get("AcceleratorType") != null && !jsonObj.get("AcceleratorType").isJsonNull()) {
        ProductionVariantAcceleratorType.validateJsonElement(jsonObj.get("AcceleratorType"));
      }
      // validate the optional field `CoreDumpConfig`
      if (jsonObj.get("CoreDumpConfig") != null && !jsonObj.get("CoreDumpConfig").isJsonNull()) {
        ProductionVariantCoreDumpConfig.validateJsonElement(jsonObj.get("CoreDumpConfig"));
      }
      // validate the optional field `ServerlessConfig`
      if (jsonObj.get("ServerlessConfig") != null && !jsonObj.get("ServerlessConfig").isJsonNull()) {
        ProductionVariantServerlessConfig.validateJsonElement(jsonObj.get("ServerlessConfig"));
      }
      // validate the optional field `VolumeSizeInGB`
      if (jsonObj.get("VolumeSizeInGB") != null && !jsonObj.get("VolumeSizeInGB").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("VolumeSizeInGB"));
      }
      // validate the optional field `ModelDataDownloadTimeoutInSeconds`
      if (jsonObj.get("ModelDataDownloadTimeoutInSeconds") != null && !jsonObj.get("ModelDataDownloadTimeoutInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ModelDataDownloadTimeoutInSeconds"));
      }
      // validate the optional field `ContainerStartupHealthCheckTimeoutInSeconds`
      if (jsonObj.get("ContainerStartupHealthCheckTimeoutInSeconds") != null && !jsonObj.get("ContainerStartupHealthCheckTimeoutInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ContainerStartupHealthCheckTimeoutInSeconds"));
      }
      // validate the optional field `EnableSSMAccess`
      if (jsonObj.get("EnableSSMAccess") != null && !jsonObj.get("EnableSSMAccess").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableSSMAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductionVariant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductionVariant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductionVariant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductionVariant.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductionVariant>() {
           @Override
           public void write(JsonWriter out, ProductionVariant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductionVariant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductionVariant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductionVariant
   * @throws IOException if the JSON string is invalid with respect to ProductionVariant
   */
  public static ProductionVariant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductionVariant.class);
  }

  /**
   * Convert an instance of ProductionVariant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

