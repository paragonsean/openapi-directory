/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImageVersionStatus;
import org.openapitools.client.model.JobType;
import org.openapitools.client.model.Processor;
import org.openapitools.client.model.VendorGuidance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeImageVersionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeImageVersionResponse {
  public static final String SERIALIZED_NAME_BASE_IMAGE = "BaseImage";
  @SerializedName(SERIALIZED_NAME_BASE_IMAGE)
  private String baseImage;

  public static final String SERIALIZED_NAME_CONTAINER_IMAGE = "ContainerImage";
  @SerializedName(SERIALIZED_NAME_CONTAINER_IMAGE)
  private String containerImage;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_IMAGE_ARN = "ImageArn";
  @SerializedName(SERIALIZED_NAME_IMAGE_ARN)
  private String imageArn;

  public static final String SERIALIZED_NAME_IMAGE_VERSION_ARN = "ImageVersionArn";
  @SerializedName(SERIALIZED_NAME_IMAGE_VERSION_ARN)
  private String imageVersionArn;

  public static final String SERIALIZED_NAME_IMAGE_VERSION_STATUS = "ImageVersionStatus";
  @SerializedName(SERIALIZED_NAME_IMAGE_VERSION_STATUS)
  private ImageVersionStatus imageVersionStatus;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_VENDOR_GUIDANCE = "VendorGuidance";
  @SerializedName(SERIALIZED_NAME_VENDOR_GUIDANCE)
  private VendorGuidance vendorGuidance;

  public static final String SERIALIZED_NAME_JOB_TYPE = "JobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobType jobType;

  public static final String SERIALIZED_NAME_ML_FRAMEWORK = "MLFramework";
  @SerializedName(SERIALIZED_NAME_ML_FRAMEWORK)
  private String mlFramework;

  public static final String SERIALIZED_NAME_PROGRAMMING_LANG = "ProgrammingLang";
  @SerializedName(SERIALIZED_NAME_PROGRAMMING_LANG)
  private String programmingLang;

  public static final String SERIALIZED_NAME_PROCESSOR = "Processor";
  @SerializedName(SERIALIZED_NAME_PROCESSOR)
  private Processor processor;

  public static final String SERIALIZED_NAME_HOROVOD = "Horovod";
  @SerializedName(SERIALIZED_NAME_HOROVOD)
  private Boolean horovod;

  public static final String SERIALIZED_NAME_RELEASE_NOTES = "ReleaseNotes";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES)
  private String releaseNotes;

  public DescribeImageVersionResponse() {
  }

  public DescribeImageVersionResponse baseImage(String baseImage) {
    this.baseImage = baseImage;
    return this;
  }

  /**
   * Get baseImage
   * @return baseImage
   */
  @javax.annotation.Nullable
  public String getBaseImage() {
    return baseImage;
  }

  public void setBaseImage(String baseImage) {
    this.baseImage = baseImage;
  }


  public DescribeImageVersionResponse containerImage(String containerImage) {
    this.containerImage = containerImage;
    return this;
  }

  /**
   * Get containerImage
   * @return containerImage
   */
  @javax.annotation.Nullable
  public String getContainerImage() {
    return containerImage;
  }

  public void setContainerImage(String containerImage) {
    this.containerImage = containerImage;
  }


  public DescribeImageVersionResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeImageVersionResponse failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public DescribeImageVersionResponse imageArn(String imageArn) {
    this.imageArn = imageArn;
    return this;
  }

  /**
   * Get imageArn
   * @return imageArn
   */
  @javax.annotation.Nullable
  public String getImageArn() {
    return imageArn;
  }

  public void setImageArn(String imageArn) {
    this.imageArn = imageArn;
  }


  public DescribeImageVersionResponse imageVersionArn(String imageVersionArn) {
    this.imageVersionArn = imageVersionArn;
    return this;
  }

  /**
   * Get imageVersionArn
   * @return imageVersionArn
   */
  @javax.annotation.Nullable
  public String getImageVersionArn() {
    return imageVersionArn;
  }

  public void setImageVersionArn(String imageVersionArn) {
    this.imageVersionArn = imageVersionArn;
  }


  public DescribeImageVersionResponse imageVersionStatus(ImageVersionStatus imageVersionStatus) {
    this.imageVersionStatus = imageVersionStatus;
    return this;
  }

  /**
   * Get imageVersionStatus
   * @return imageVersionStatus
   */
  @javax.annotation.Nullable
  public ImageVersionStatus getImageVersionStatus() {
    return imageVersionStatus;
  }

  public void setImageVersionStatus(ImageVersionStatus imageVersionStatus) {
    this.imageVersionStatus = imageVersionStatus;
  }


  public DescribeImageVersionResponse lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public DescribeImageVersionResponse version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public DescribeImageVersionResponse vendorGuidance(VendorGuidance vendorGuidance) {
    this.vendorGuidance = vendorGuidance;
    return this;
  }

  /**
   * Get vendorGuidance
   * @return vendorGuidance
   */
  @javax.annotation.Nullable
  public VendorGuidance getVendorGuidance() {
    return vendorGuidance;
  }

  public void setVendorGuidance(VendorGuidance vendorGuidance) {
    this.vendorGuidance = vendorGuidance;
  }


  public DescribeImageVersionResponse jobType(JobType jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nullable
  public JobType getJobType() {
    return jobType;
  }

  public void setJobType(JobType jobType) {
    this.jobType = jobType;
  }


  public DescribeImageVersionResponse mlFramework(String mlFramework) {
    this.mlFramework = mlFramework;
    return this;
  }

  /**
   * Get mlFramework
   * @return mlFramework
   */
  @javax.annotation.Nullable
  public String getMlFramework() {
    return mlFramework;
  }

  public void setMlFramework(String mlFramework) {
    this.mlFramework = mlFramework;
  }


  public DescribeImageVersionResponse programmingLang(String programmingLang) {
    this.programmingLang = programmingLang;
    return this;
  }

  /**
   * Get programmingLang
   * @return programmingLang
   */
  @javax.annotation.Nullable
  public String getProgrammingLang() {
    return programmingLang;
  }

  public void setProgrammingLang(String programmingLang) {
    this.programmingLang = programmingLang;
  }


  public DescribeImageVersionResponse processor(Processor processor) {
    this.processor = processor;
    return this;
  }

  /**
   * Get processor
   * @return processor
   */
  @javax.annotation.Nullable
  public Processor getProcessor() {
    return processor;
  }

  public void setProcessor(Processor processor) {
    this.processor = processor;
  }


  public DescribeImageVersionResponse horovod(Boolean horovod) {
    this.horovod = horovod;
    return this;
  }

  /**
   * Get horovod
   * @return horovod
   */
  @javax.annotation.Nullable
  public Boolean getHorovod() {
    return horovod;
  }

  public void setHorovod(Boolean horovod) {
    this.horovod = horovod;
  }


  public DescribeImageVersionResponse releaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

  /**
   * Get releaseNotes
   * @return releaseNotes
   */
  @javax.annotation.Nullable
  public String getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeImageVersionResponse describeImageVersionResponse = (DescribeImageVersionResponse) o;
    return Objects.equals(this.baseImage, describeImageVersionResponse.baseImage) &&
        Objects.equals(this.containerImage, describeImageVersionResponse.containerImage) &&
        Objects.equals(this.creationTime, describeImageVersionResponse.creationTime) &&
        Objects.equals(this.failureReason, describeImageVersionResponse.failureReason) &&
        Objects.equals(this.imageArn, describeImageVersionResponse.imageArn) &&
        Objects.equals(this.imageVersionArn, describeImageVersionResponse.imageVersionArn) &&
        Objects.equals(this.imageVersionStatus, describeImageVersionResponse.imageVersionStatus) &&
        Objects.equals(this.lastModifiedTime, describeImageVersionResponse.lastModifiedTime) &&
        Objects.equals(this.version, describeImageVersionResponse.version) &&
        Objects.equals(this.vendorGuidance, describeImageVersionResponse.vendorGuidance) &&
        Objects.equals(this.jobType, describeImageVersionResponse.jobType) &&
        Objects.equals(this.mlFramework, describeImageVersionResponse.mlFramework) &&
        Objects.equals(this.programmingLang, describeImageVersionResponse.programmingLang) &&
        Objects.equals(this.processor, describeImageVersionResponse.processor) &&
        Objects.equals(this.horovod, describeImageVersionResponse.horovod) &&
        Objects.equals(this.releaseNotes, describeImageVersionResponse.releaseNotes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseImage, containerImage, creationTime, failureReason, imageArn, imageVersionArn, imageVersionStatus, lastModifiedTime, version, vendorGuidance, jobType, mlFramework, programmingLang, processor, horovod, releaseNotes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeImageVersionResponse {\n");
    sb.append("    baseImage: ").append(toIndentedString(baseImage)).append("\n");
    sb.append("    containerImage: ").append(toIndentedString(containerImage)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    imageArn: ").append(toIndentedString(imageArn)).append("\n");
    sb.append("    imageVersionArn: ").append(toIndentedString(imageVersionArn)).append("\n");
    sb.append("    imageVersionStatus: ").append(toIndentedString(imageVersionStatus)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vendorGuidance: ").append(toIndentedString(vendorGuidance)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    mlFramework: ").append(toIndentedString(mlFramework)).append("\n");
    sb.append("    programmingLang: ").append(toIndentedString(programmingLang)).append("\n");
    sb.append("    processor: ").append(toIndentedString(processor)).append("\n");
    sb.append("    horovod: ").append(toIndentedString(horovod)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BaseImage");
    openapiFields.add("ContainerImage");
    openapiFields.add("CreationTime");
    openapiFields.add("FailureReason");
    openapiFields.add("ImageArn");
    openapiFields.add("ImageVersionArn");
    openapiFields.add("ImageVersionStatus");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("Version");
    openapiFields.add("VendorGuidance");
    openapiFields.add("JobType");
    openapiFields.add("MLFramework");
    openapiFields.add("ProgrammingLang");
    openapiFields.add("Processor");
    openapiFields.add("Horovod");
    openapiFields.add("ReleaseNotes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeImageVersionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeImageVersionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeImageVersionResponse is not found in the empty JSON string", DescribeImageVersionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeImageVersionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeImageVersionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BaseImage`
      if (jsonObj.get("BaseImage") != null && !jsonObj.get("BaseImage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BaseImage"));
      }
      // validate the optional field `ContainerImage`
      if (jsonObj.get("ContainerImage") != null && !jsonObj.get("ContainerImage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContainerImage"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureReason"));
      }
      // validate the optional field `ImageArn`
      if (jsonObj.get("ImageArn") != null && !jsonObj.get("ImageArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageArn"));
      }
      // validate the optional field `ImageVersionArn`
      if (jsonObj.get("ImageVersionArn") != null && !jsonObj.get("ImageVersionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageVersionArn"));
      }
      // validate the optional field `ImageVersionStatus`
      if (jsonObj.get("ImageVersionStatus") != null && !jsonObj.get("ImageVersionStatus").isJsonNull()) {
        ImageVersionStatus.validateJsonElement(jsonObj.get("ImageVersionStatus"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Version"));
      }
      // validate the optional field `VendorGuidance`
      if (jsonObj.get("VendorGuidance") != null && !jsonObj.get("VendorGuidance").isJsonNull()) {
        VendorGuidance.validateJsonElement(jsonObj.get("VendorGuidance"));
      }
      // validate the optional field `JobType`
      if (jsonObj.get("JobType") != null && !jsonObj.get("JobType").isJsonNull()) {
        JobType.validateJsonElement(jsonObj.get("JobType"));
      }
      // validate the optional field `MLFramework`
      if (jsonObj.get("MLFramework") != null && !jsonObj.get("MLFramework").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MLFramework"));
      }
      // validate the optional field `ProgrammingLang`
      if (jsonObj.get("ProgrammingLang") != null && !jsonObj.get("ProgrammingLang").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProgrammingLang"));
      }
      // validate the optional field `Processor`
      if (jsonObj.get("Processor") != null && !jsonObj.get("Processor").isJsonNull()) {
        Processor.validateJsonElement(jsonObj.get("Processor"));
      }
      // validate the optional field `Horovod`
      if (jsonObj.get("Horovod") != null && !jsonObj.get("Horovod").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Horovod"));
      }
      // validate the optional field `ReleaseNotes`
      if (jsonObj.get("ReleaseNotes") != null && !jsonObj.get("ReleaseNotes").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReleaseNotes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeImageVersionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeImageVersionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeImageVersionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeImageVersionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeImageVersionResponse>() {
           @Override
           public void write(JsonWriter out, DescribeImageVersionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeImageVersionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeImageVersionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeImageVersionResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeImageVersionResponse
   */
  public static DescribeImageVersionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeImageVersionResponse.class);
  }

  /**
   * Convert an instance of DescribeImageVersionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

