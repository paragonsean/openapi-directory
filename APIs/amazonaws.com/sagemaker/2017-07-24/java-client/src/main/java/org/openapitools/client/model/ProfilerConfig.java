/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProfilerConfig {
  public static final String SERIALIZED_NAME_S3_OUTPUT_PATH = "S3OutputPath";
  @SerializedName(SERIALIZED_NAME_S3_OUTPUT_PATH)
  private String s3OutputPath;

  public static final String SERIALIZED_NAME_PROFILING_INTERVAL_IN_MILLISECONDS = "ProfilingIntervalInMilliseconds";
  @SerializedName(SERIALIZED_NAME_PROFILING_INTERVAL_IN_MILLISECONDS)
  private Integer profilingIntervalInMilliseconds;

  public static final String SERIALIZED_NAME_PROFILING_PARAMETERS = "ProfilingParameters";
  @SerializedName(SERIALIZED_NAME_PROFILING_PARAMETERS)
  private Map profilingParameters;

  public static final String SERIALIZED_NAME_DISABLE_PROFILER = "DisableProfiler";
  @SerializedName(SERIALIZED_NAME_DISABLE_PROFILER)
  private Boolean disableProfiler;

  public ProfilerConfig() {
  }

  public ProfilerConfig s3OutputPath(String s3OutputPath) {
    this.s3OutputPath = s3OutputPath;
    return this;
  }

  /**
   * Get s3OutputPath
   * @return s3OutputPath
   */
  @javax.annotation.Nullable
  public String getS3OutputPath() {
    return s3OutputPath;
  }

  public void setS3OutputPath(String s3OutputPath) {
    this.s3OutputPath = s3OutputPath;
  }


  public ProfilerConfig profilingIntervalInMilliseconds(Integer profilingIntervalInMilliseconds) {
    this.profilingIntervalInMilliseconds = profilingIntervalInMilliseconds;
    return this;
  }

  /**
   * Get profilingIntervalInMilliseconds
   * @return profilingIntervalInMilliseconds
   */
  @javax.annotation.Nullable
  public Integer getProfilingIntervalInMilliseconds() {
    return profilingIntervalInMilliseconds;
  }

  public void setProfilingIntervalInMilliseconds(Integer profilingIntervalInMilliseconds) {
    this.profilingIntervalInMilliseconds = profilingIntervalInMilliseconds;
  }


  public ProfilerConfig profilingParameters(Map profilingParameters) {
    this.profilingParameters = profilingParameters;
    return this;
  }

  /**
   * Get profilingParameters
   * @return profilingParameters
   */
  @javax.annotation.Nullable
  public Map getProfilingParameters() {
    return profilingParameters;
  }

  public void setProfilingParameters(Map profilingParameters) {
    this.profilingParameters = profilingParameters;
  }


  public ProfilerConfig disableProfiler(Boolean disableProfiler) {
    this.disableProfiler = disableProfiler;
    return this;
  }

  /**
   * Get disableProfiler
   * @return disableProfiler
   */
  @javax.annotation.Nullable
  public Boolean getDisableProfiler() {
    return disableProfiler;
  }

  public void setDisableProfiler(Boolean disableProfiler) {
    this.disableProfiler = disableProfiler;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfilerConfig profilerConfig = (ProfilerConfig) o;
    return Objects.equals(this.s3OutputPath, profilerConfig.s3OutputPath) &&
        Objects.equals(this.profilingIntervalInMilliseconds, profilerConfig.profilingIntervalInMilliseconds) &&
        Objects.equals(this.profilingParameters, profilerConfig.profilingParameters) &&
        Objects.equals(this.disableProfiler, profilerConfig.disableProfiler);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3OutputPath, profilingIntervalInMilliseconds, profilingParameters, disableProfiler);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfilerConfig {\n");
    sb.append("    s3OutputPath: ").append(toIndentedString(s3OutputPath)).append("\n");
    sb.append("    profilingIntervalInMilliseconds: ").append(toIndentedString(profilingIntervalInMilliseconds)).append("\n");
    sb.append("    profilingParameters: ").append(toIndentedString(profilingParameters)).append("\n");
    sb.append("    disableProfiler: ").append(toIndentedString(disableProfiler)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3OutputPath");
    openapiFields.add("ProfilingIntervalInMilliseconds");
    openapiFields.add("ProfilingParameters");
    openapiFields.add("DisableProfiler");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProfilerConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfilerConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfilerConfig is not found in the empty JSON string", ProfilerConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfilerConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfilerConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S3OutputPath`
      if (jsonObj.get("S3OutputPath") != null && !jsonObj.get("S3OutputPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3OutputPath"));
      }
      // validate the optional field `ProfilingIntervalInMilliseconds`
      if (jsonObj.get("ProfilingIntervalInMilliseconds") != null && !jsonObj.get("ProfilingIntervalInMilliseconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProfilingIntervalInMilliseconds"));
      }
      // validate the optional field `ProfilingParameters`
      if (jsonObj.get("ProfilingParameters") != null && !jsonObj.get("ProfilingParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ProfilingParameters"));
      }
      // validate the optional field `DisableProfiler`
      if (jsonObj.get("DisableProfiler") != null && !jsonObj.get("DisableProfiler").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DisableProfiler"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfilerConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfilerConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfilerConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfilerConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfilerConfig>() {
           @Override
           public void write(JsonWriter out, ProfilerConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfilerConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProfilerConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProfilerConfig
   * @throws IOException if the JSON string is invalid with respect to ProfilerConfig
   */
  public static ProfilerConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfilerConfig.class);
  }

  /**
   * Convert an instance of ProfilerConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

