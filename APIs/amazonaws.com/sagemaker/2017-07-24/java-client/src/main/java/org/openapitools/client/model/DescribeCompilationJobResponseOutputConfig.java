/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OutputConfigTargetPlatform;
import org.openapitools.client.model.TargetDevice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeCompilationJobResponseOutputConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeCompilationJobResponseOutputConfig {
  public static final String SERIALIZED_NAME_S3_OUTPUT_LOCATION = "S3OutputLocation";
  @SerializedName(SERIALIZED_NAME_S3_OUTPUT_LOCATION)
  private String s3OutputLocation;

  public static final String SERIALIZED_NAME_TARGET_DEVICE = "TargetDevice";
  @SerializedName(SERIALIZED_NAME_TARGET_DEVICE)
  private TargetDevice targetDevice;

  public static final String SERIALIZED_NAME_TARGET_PLATFORM = "TargetPlatform";
  @SerializedName(SERIALIZED_NAME_TARGET_PLATFORM)
  private OutputConfigTargetPlatform targetPlatform;

  public static final String SERIALIZED_NAME_COMPILER_OPTIONS = "CompilerOptions";
  @SerializedName(SERIALIZED_NAME_COMPILER_OPTIONS)
  private String compilerOptions;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public DescribeCompilationJobResponseOutputConfig() {
  }

  public DescribeCompilationJobResponseOutputConfig s3OutputLocation(String s3OutputLocation) {
    this.s3OutputLocation = s3OutputLocation;
    return this;
  }

  /**
   * Get s3OutputLocation
   * @return s3OutputLocation
   */
  @javax.annotation.Nonnull
  public String getS3OutputLocation() {
    return s3OutputLocation;
  }

  public void setS3OutputLocation(String s3OutputLocation) {
    this.s3OutputLocation = s3OutputLocation;
  }


  public DescribeCompilationJobResponseOutputConfig targetDevice(TargetDevice targetDevice) {
    this.targetDevice = targetDevice;
    return this;
  }

  /**
   * Get targetDevice
   * @return targetDevice
   */
  @javax.annotation.Nullable
  public TargetDevice getTargetDevice() {
    return targetDevice;
  }

  public void setTargetDevice(TargetDevice targetDevice) {
    this.targetDevice = targetDevice;
  }


  public DescribeCompilationJobResponseOutputConfig targetPlatform(OutputConfigTargetPlatform targetPlatform) {
    this.targetPlatform = targetPlatform;
    return this;
  }

  /**
   * Get targetPlatform
   * @return targetPlatform
   */
  @javax.annotation.Nullable
  public OutputConfigTargetPlatform getTargetPlatform() {
    return targetPlatform;
  }

  public void setTargetPlatform(OutputConfigTargetPlatform targetPlatform) {
    this.targetPlatform = targetPlatform;
  }


  public DescribeCompilationJobResponseOutputConfig compilerOptions(String compilerOptions) {
    this.compilerOptions = compilerOptions;
    return this;
  }

  /**
   * Get compilerOptions
   * @return compilerOptions
   */
  @javax.annotation.Nullable
  public String getCompilerOptions() {
    return compilerOptions;
  }

  public void setCompilerOptions(String compilerOptions) {
    this.compilerOptions = compilerOptions;
  }


  public DescribeCompilationJobResponseOutputConfig kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeCompilationJobResponseOutputConfig describeCompilationJobResponseOutputConfig = (DescribeCompilationJobResponseOutputConfig) o;
    return Objects.equals(this.s3OutputLocation, describeCompilationJobResponseOutputConfig.s3OutputLocation) &&
        Objects.equals(this.targetDevice, describeCompilationJobResponseOutputConfig.targetDevice) &&
        Objects.equals(this.targetPlatform, describeCompilationJobResponseOutputConfig.targetPlatform) &&
        Objects.equals(this.compilerOptions, describeCompilationJobResponseOutputConfig.compilerOptions) &&
        Objects.equals(this.kmsKeyId, describeCompilationJobResponseOutputConfig.kmsKeyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3OutputLocation, targetDevice, targetPlatform, compilerOptions, kmsKeyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeCompilationJobResponseOutputConfig {\n");
    sb.append("    s3OutputLocation: ").append(toIndentedString(s3OutputLocation)).append("\n");
    sb.append("    targetDevice: ").append(toIndentedString(targetDevice)).append("\n");
    sb.append("    targetPlatform: ").append(toIndentedString(targetPlatform)).append("\n");
    sb.append("    compilerOptions: ").append(toIndentedString(compilerOptions)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3OutputLocation");
    openapiFields.add("TargetDevice");
    openapiFields.add("TargetPlatform");
    openapiFields.add("CompilerOptions");
    openapiFields.add("KmsKeyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("S3OutputLocation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeCompilationJobResponseOutputConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeCompilationJobResponseOutputConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeCompilationJobResponseOutputConfig is not found in the empty JSON string", DescribeCompilationJobResponseOutputConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeCompilationJobResponseOutputConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeCompilationJobResponseOutputConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeCompilationJobResponseOutputConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `S3OutputLocation`
      String.validateJsonElement(jsonObj.get("S3OutputLocation"));
      // validate the optional field `TargetDevice`
      if (jsonObj.get("TargetDevice") != null && !jsonObj.get("TargetDevice").isJsonNull()) {
        TargetDevice.validateJsonElement(jsonObj.get("TargetDevice"));
      }
      // validate the optional field `TargetPlatform`
      if (jsonObj.get("TargetPlatform") != null && !jsonObj.get("TargetPlatform").isJsonNull()) {
        OutputConfigTargetPlatform.validateJsonElement(jsonObj.get("TargetPlatform"));
      }
      // validate the optional field `CompilerOptions`
      if (jsonObj.get("CompilerOptions") != null && !jsonObj.get("CompilerOptions").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CompilerOptions"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeCompilationJobResponseOutputConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeCompilationJobResponseOutputConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeCompilationJobResponseOutputConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeCompilationJobResponseOutputConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeCompilationJobResponseOutputConfig>() {
           @Override
           public void write(JsonWriter out, DescribeCompilationJobResponseOutputConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeCompilationJobResponseOutputConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeCompilationJobResponseOutputConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeCompilationJobResponseOutputConfig
   * @throws IOException if the JSON string is invalid with respect to DescribeCompilationJobResponseOutputConfig
   */
  public static DescribeCompilationJobResponseOutputConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeCompilationJobResponseOutputConfig.class);
  }

  /**
   * Convert an instance of DescribeCompilationJobResponseOutputConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

