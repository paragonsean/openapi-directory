/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets TargetDevice
 */
@JsonAdapter(TargetDevice.Adapter.class)
public enum TargetDevice {
  
  LAMBDA("lambda"),
  
  ML_M4("ml_m4"),
  
  ML_M5("ml_m5"),
  
  ML_C4("ml_c4"),
  
  ML_C5("ml_c5"),
  
  ML_P2("ml_p2"),
  
  ML_P3("ml_p3"),
  
  ML_G4DN("ml_g4dn"),
  
  ML_INF1("ml_inf1"),
  
  ML_INF2("ml_inf2"),
  
  ML_TRN1("ml_trn1"),
  
  ML_EIA2("ml_eia2"),
  
  JETSON_TX1("jetson_tx1"),
  
  JETSON_TX2("jetson_tx2"),
  
  JETSON_NANO("jetson_nano"),
  
  JETSON_XAVIER("jetson_xavier"),
  
  RASP3B("rasp3b"),
  
  IMX8QM("imx8qm"),
  
  DEEPLENS("deeplens"),
  
  RK3399("rk3399"),
  
  RK3288("rk3288"),
  
  AISAGE("aisage"),
  
  SBE_C("sbe_c"),
  
  QCS605("qcs605"),
  
  QCS603("qcs603"),
  
  SITARA_AM57X("sitara_am57x"),
  
  AMBA_CV2("amba_cv2"),
  
  AMBA_CV22("amba_cv22"),
  
  AMBA_CV25("amba_cv25"),
  
  X86_WIN32("x86_win32"),
  
  X86_WIN64("x86_win64"),
  
  COREML("coreml"),
  
  JACINTO_TDA4VM("jacinto_tda4vm"),
  
  IMX8MPLUS("imx8mplus");

  private String value;

  TargetDevice(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TargetDevice fromValue(String value) {
    for (TargetDevice b : TargetDevice.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TargetDevice> {
    @Override
    public void write(final JsonWriter jsonWriter, final TargetDevice enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TargetDevice read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TargetDevice.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TargetDevice.fromValue(value);
  }
}

