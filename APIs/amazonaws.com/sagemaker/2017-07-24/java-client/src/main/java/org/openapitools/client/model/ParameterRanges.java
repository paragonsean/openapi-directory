/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The maximum number of items specified for &lt;code&gt;Array Members&lt;/code&gt; refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can&#39;t exceed the maximum number specified.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParameterRanges {
  public static final String SERIALIZED_NAME_INTEGER_PARAMETER_RANGES = "IntegerParameterRanges";
  @SerializedName(SERIALIZED_NAME_INTEGER_PARAMETER_RANGES)
  private List integerParameterRanges;

  public static final String SERIALIZED_NAME_CONTINUOUS_PARAMETER_RANGES = "ContinuousParameterRanges";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_PARAMETER_RANGES)
  private List continuousParameterRanges;

  public static final String SERIALIZED_NAME_CATEGORICAL_PARAMETER_RANGES = "CategoricalParameterRanges";
  @SerializedName(SERIALIZED_NAME_CATEGORICAL_PARAMETER_RANGES)
  private List categoricalParameterRanges;

  public static final String SERIALIZED_NAME_AUTO_PARAMETERS = "AutoParameters";
  @SerializedName(SERIALIZED_NAME_AUTO_PARAMETERS)
  private List autoParameters;

  public ParameterRanges() {
  }

  public ParameterRanges integerParameterRanges(List integerParameterRanges) {
    this.integerParameterRanges = integerParameterRanges;
    return this;
  }

  /**
   * Get integerParameterRanges
   * @return integerParameterRanges
   */
  @javax.annotation.Nullable
  public List getIntegerParameterRanges() {
    return integerParameterRanges;
  }

  public void setIntegerParameterRanges(List integerParameterRanges) {
    this.integerParameterRanges = integerParameterRanges;
  }


  public ParameterRanges continuousParameterRanges(List continuousParameterRanges) {
    this.continuousParameterRanges = continuousParameterRanges;
    return this;
  }

  /**
   * Get continuousParameterRanges
   * @return continuousParameterRanges
   */
  @javax.annotation.Nullable
  public List getContinuousParameterRanges() {
    return continuousParameterRanges;
  }

  public void setContinuousParameterRanges(List continuousParameterRanges) {
    this.continuousParameterRanges = continuousParameterRanges;
  }


  public ParameterRanges categoricalParameterRanges(List categoricalParameterRanges) {
    this.categoricalParameterRanges = categoricalParameterRanges;
    return this;
  }

  /**
   * Get categoricalParameterRanges
   * @return categoricalParameterRanges
   */
  @javax.annotation.Nullable
  public List getCategoricalParameterRanges() {
    return categoricalParameterRanges;
  }

  public void setCategoricalParameterRanges(List categoricalParameterRanges) {
    this.categoricalParameterRanges = categoricalParameterRanges;
  }


  public ParameterRanges autoParameters(List autoParameters) {
    this.autoParameters = autoParameters;
    return this;
  }

  /**
   * Get autoParameters
   * @return autoParameters
   */
  @javax.annotation.Nullable
  public List getAutoParameters() {
    return autoParameters;
  }

  public void setAutoParameters(List autoParameters) {
    this.autoParameters = autoParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterRanges parameterRanges = (ParameterRanges) o;
    return Objects.equals(this.integerParameterRanges, parameterRanges.integerParameterRanges) &&
        Objects.equals(this.continuousParameterRanges, parameterRanges.continuousParameterRanges) &&
        Objects.equals(this.categoricalParameterRanges, parameterRanges.categoricalParameterRanges) &&
        Objects.equals(this.autoParameters, parameterRanges.autoParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integerParameterRanges, continuousParameterRanges, categoricalParameterRanges, autoParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterRanges {\n");
    sb.append("    integerParameterRanges: ").append(toIndentedString(integerParameterRanges)).append("\n");
    sb.append("    continuousParameterRanges: ").append(toIndentedString(continuousParameterRanges)).append("\n");
    sb.append("    categoricalParameterRanges: ").append(toIndentedString(categoricalParameterRanges)).append("\n");
    sb.append("    autoParameters: ").append(toIndentedString(autoParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntegerParameterRanges");
    openapiFields.add("ContinuousParameterRanges");
    openapiFields.add("CategoricalParameterRanges");
    openapiFields.add("AutoParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParameterRanges
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParameterRanges.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParameterRanges is not found in the empty JSON string", ParameterRanges.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParameterRanges.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParameterRanges` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IntegerParameterRanges`
      if (jsonObj.get("IntegerParameterRanges") != null && !jsonObj.get("IntegerParameterRanges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IntegerParameterRanges"));
      }
      // validate the optional field `ContinuousParameterRanges`
      if (jsonObj.get("ContinuousParameterRanges") != null && !jsonObj.get("ContinuousParameterRanges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ContinuousParameterRanges"));
      }
      // validate the optional field `CategoricalParameterRanges`
      if (jsonObj.get("CategoricalParameterRanges") != null && !jsonObj.get("CategoricalParameterRanges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CategoricalParameterRanges"));
      }
      // validate the optional field `AutoParameters`
      if (jsonObj.get("AutoParameters") != null && !jsonObj.get("AutoParameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AutoParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParameterRanges.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParameterRanges' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParameterRanges> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParameterRanges.class));

       return (TypeAdapter<T>) new TypeAdapter<ParameterRanges>() {
           @Override
           public void write(JsonWriter out, ParameterRanges value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParameterRanges read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParameterRanges given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParameterRanges
   * @throws IOException if the JSON string is invalid with respect to ParameterRanges
   */
  public static ParameterRanges fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParameterRanges.class);
  }

  /**
   * Convert an instance of ParameterRanges to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

