/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JoinSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html\&quot;&gt;Associate Prediction Results with their Corresponding Input Records&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataProcessing {
  public static final String SERIALIZED_NAME_INPUT_FILTER = "InputFilter";
  @SerializedName(SERIALIZED_NAME_INPUT_FILTER)
  private String inputFilter;

  public static final String SERIALIZED_NAME_OUTPUT_FILTER = "OutputFilter";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FILTER)
  private String outputFilter;

  public static final String SERIALIZED_NAME_JOIN_SOURCE = "JoinSource";
  @SerializedName(SERIALIZED_NAME_JOIN_SOURCE)
  private JoinSource joinSource;

  public DataProcessing() {
  }

  public DataProcessing inputFilter(String inputFilter) {
    this.inputFilter = inputFilter;
    return this;
  }

  /**
   * Get inputFilter
   * @return inputFilter
   */
  @javax.annotation.Nullable
  public String getInputFilter() {
    return inputFilter;
  }

  public void setInputFilter(String inputFilter) {
    this.inputFilter = inputFilter;
  }


  public DataProcessing outputFilter(String outputFilter) {
    this.outputFilter = outputFilter;
    return this;
  }

  /**
   * Get outputFilter
   * @return outputFilter
   */
  @javax.annotation.Nullable
  public String getOutputFilter() {
    return outputFilter;
  }

  public void setOutputFilter(String outputFilter) {
    this.outputFilter = outputFilter;
  }


  public DataProcessing joinSource(JoinSource joinSource) {
    this.joinSource = joinSource;
    return this;
  }

  /**
   * Get joinSource
   * @return joinSource
   */
  @javax.annotation.Nullable
  public JoinSource getJoinSource() {
    return joinSource;
  }

  public void setJoinSource(JoinSource joinSource) {
    this.joinSource = joinSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataProcessing dataProcessing = (DataProcessing) o;
    return Objects.equals(this.inputFilter, dataProcessing.inputFilter) &&
        Objects.equals(this.outputFilter, dataProcessing.outputFilter) &&
        Objects.equals(this.joinSource, dataProcessing.joinSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputFilter, outputFilter, joinSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataProcessing {\n");
    sb.append("    inputFilter: ").append(toIndentedString(inputFilter)).append("\n");
    sb.append("    outputFilter: ").append(toIndentedString(outputFilter)).append("\n");
    sb.append("    joinSource: ").append(toIndentedString(joinSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InputFilter");
    openapiFields.add("OutputFilter");
    openapiFields.add("JoinSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataProcessing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataProcessing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataProcessing is not found in the empty JSON string", DataProcessing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataProcessing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataProcessing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InputFilter`
      if (jsonObj.get("InputFilter") != null && !jsonObj.get("InputFilter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputFilter"));
      }
      // validate the optional field `OutputFilter`
      if (jsonObj.get("OutputFilter") != null && !jsonObj.get("OutputFilter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputFilter"));
      }
      // validate the optional field `JoinSource`
      if (jsonObj.get("JoinSource") != null && !jsonObj.get("JoinSource").isJsonNull()) {
        JoinSource.validateJsonElement(jsonObj.get("JoinSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataProcessing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataProcessing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataProcessing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataProcessing.class));

       return (TypeAdapter<T>) new TypeAdapter<DataProcessing>() {
           @Override
           public void write(JsonWriter out, DataProcessing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataProcessing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataProcessing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataProcessing
   * @throws IOException if the JSON string is invalid with respect to DataProcessing
   */
  public static DataProcessing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataProcessing.class);
  }

  /**
   * Convert an instance of DataProcessing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

