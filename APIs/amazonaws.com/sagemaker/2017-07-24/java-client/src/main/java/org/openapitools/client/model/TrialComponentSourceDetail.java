/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TrialComponentSourceDetailProcessingJob;
import org.openapitools.client.model.TrialComponentSourceDetailTrainingJob;
import org.openapitools.client.model.TrialComponentSourceDetailTransformJob;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrialComponentSourceDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrialComponentSourceDetail {
  public static final String SERIALIZED_NAME_SOURCE_ARN = "SourceArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_ARN)
  private String sourceArn;

  public static final String SERIALIZED_NAME_TRAINING_JOB = "TrainingJob";
  @SerializedName(SERIALIZED_NAME_TRAINING_JOB)
  private TrialComponentSourceDetailTrainingJob trainingJob;

  public static final String SERIALIZED_NAME_PROCESSING_JOB = "ProcessingJob";
  @SerializedName(SERIALIZED_NAME_PROCESSING_JOB)
  private TrialComponentSourceDetailProcessingJob processingJob;

  public static final String SERIALIZED_NAME_TRANSFORM_JOB = "TransformJob";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_JOB)
  private TrialComponentSourceDetailTransformJob transformJob;

  public TrialComponentSourceDetail() {
  }

  public TrialComponentSourceDetail sourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
    return this;
  }

  /**
   * Get sourceArn
   * @return sourceArn
   */
  @javax.annotation.Nullable
  public String getSourceArn() {
    return sourceArn;
  }

  public void setSourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
  }


  public TrialComponentSourceDetail trainingJob(TrialComponentSourceDetailTrainingJob trainingJob) {
    this.trainingJob = trainingJob;
    return this;
  }

  /**
   * Get trainingJob
   * @return trainingJob
   */
  @javax.annotation.Nullable
  public TrialComponentSourceDetailTrainingJob getTrainingJob() {
    return trainingJob;
  }

  public void setTrainingJob(TrialComponentSourceDetailTrainingJob trainingJob) {
    this.trainingJob = trainingJob;
  }


  public TrialComponentSourceDetail processingJob(TrialComponentSourceDetailProcessingJob processingJob) {
    this.processingJob = processingJob;
    return this;
  }

  /**
   * Get processingJob
   * @return processingJob
   */
  @javax.annotation.Nullable
  public TrialComponentSourceDetailProcessingJob getProcessingJob() {
    return processingJob;
  }

  public void setProcessingJob(TrialComponentSourceDetailProcessingJob processingJob) {
    this.processingJob = processingJob;
  }


  public TrialComponentSourceDetail transformJob(TrialComponentSourceDetailTransformJob transformJob) {
    this.transformJob = transformJob;
    return this;
  }

  /**
   * Get transformJob
   * @return transformJob
   */
  @javax.annotation.Nullable
  public TrialComponentSourceDetailTransformJob getTransformJob() {
    return transformJob;
  }

  public void setTransformJob(TrialComponentSourceDetailTransformJob transformJob) {
    this.transformJob = transformJob;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrialComponentSourceDetail trialComponentSourceDetail = (TrialComponentSourceDetail) o;
    return Objects.equals(this.sourceArn, trialComponentSourceDetail.sourceArn) &&
        Objects.equals(this.trainingJob, trialComponentSourceDetail.trainingJob) &&
        Objects.equals(this.processingJob, trialComponentSourceDetail.processingJob) &&
        Objects.equals(this.transformJob, trialComponentSourceDetail.transformJob);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceArn, trainingJob, processingJob, transformJob);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrialComponentSourceDetail {\n");
    sb.append("    sourceArn: ").append(toIndentedString(sourceArn)).append("\n");
    sb.append("    trainingJob: ").append(toIndentedString(trainingJob)).append("\n");
    sb.append("    processingJob: ").append(toIndentedString(processingJob)).append("\n");
    sb.append("    transformJob: ").append(toIndentedString(transformJob)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceArn");
    openapiFields.add("TrainingJob");
    openapiFields.add("ProcessingJob");
    openapiFields.add("TransformJob");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrialComponentSourceDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrialComponentSourceDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrialComponentSourceDetail is not found in the empty JSON string", TrialComponentSourceDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrialComponentSourceDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrialComponentSourceDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SourceArn`
      if (jsonObj.get("SourceArn") != null && !jsonObj.get("SourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceArn"));
      }
      // validate the optional field `TrainingJob`
      if (jsonObj.get("TrainingJob") != null && !jsonObj.get("TrainingJob").isJsonNull()) {
        TrialComponentSourceDetailTrainingJob.validateJsonElement(jsonObj.get("TrainingJob"));
      }
      // validate the optional field `ProcessingJob`
      if (jsonObj.get("ProcessingJob") != null && !jsonObj.get("ProcessingJob").isJsonNull()) {
        TrialComponentSourceDetailProcessingJob.validateJsonElement(jsonObj.get("ProcessingJob"));
      }
      // validate the optional field `TransformJob`
      if (jsonObj.get("TransformJob") != null && !jsonObj.get("TransformJob").isJsonNull()) {
        TrialComponentSourceDetailTransformJob.validateJsonElement(jsonObj.get("TransformJob"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrialComponentSourceDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrialComponentSourceDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrialComponentSourceDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrialComponentSourceDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<TrialComponentSourceDetail>() {
           @Override
           public void write(JsonWriter out, TrialComponentSourceDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrialComponentSourceDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrialComponentSourceDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrialComponentSourceDetail
   * @throws IOException if the JSON string is invalid with respect to TrialComponentSourceDetail
   */
  public static TrialComponentSourceDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrialComponentSourceDetail.class);
  }

  /**
   * Convert an instance of TrialComponentSourceDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

