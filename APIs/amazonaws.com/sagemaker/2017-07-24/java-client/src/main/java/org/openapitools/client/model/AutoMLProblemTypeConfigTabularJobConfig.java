/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AutoMLJobCompletionCriteria;
import org.openapitools.client.model.AutoMLMode;
import org.openapitools.client.model.ProblemType;
import org.openapitools.client.model.TabularJobConfigCandidateGenerationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutoMLProblemTypeConfigTabularJobConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoMLProblemTypeConfigTabularJobConfig {
  public static final String SERIALIZED_NAME_CANDIDATE_GENERATION_CONFIG = "CandidateGenerationConfig";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_GENERATION_CONFIG)
  private TabularJobConfigCandidateGenerationConfig candidateGenerationConfig;

  public static final String SERIALIZED_NAME_COMPLETION_CRITERIA = "CompletionCriteria";
  @SerializedName(SERIALIZED_NAME_COMPLETION_CRITERIA)
  private AutoMLJobCompletionCriteria completionCriteria;

  public static final String SERIALIZED_NAME_FEATURE_SPECIFICATION_S3_URI = "FeatureSpecificationS3Uri";
  @SerializedName(SERIALIZED_NAME_FEATURE_SPECIFICATION_S3_URI)
  private String featureSpecificationS3Uri;

  public static final String SERIALIZED_NAME_MODE = "Mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private AutoMLMode mode;

  public static final String SERIALIZED_NAME_GENERATE_CANDIDATE_DEFINITIONS_ONLY = "GenerateCandidateDefinitionsOnly";
  @SerializedName(SERIALIZED_NAME_GENERATE_CANDIDATE_DEFINITIONS_ONLY)
  private Boolean generateCandidateDefinitionsOnly;

  public static final String SERIALIZED_NAME_PROBLEM_TYPE = "ProblemType";
  @SerializedName(SERIALIZED_NAME_PROBLEM_TYPE)
  private ProblemType problemType;

  public static final String SERIALIZED_NAME_TARGET_ATTRIBUTE_NAME = "TargetAttributeName";
  @SerializedName(SERIALIZED_NAME_TARGET_ATTRIBUTE_NAME)
  private String targetAttributeName;

  public static final String SERIALIZED_NAME_SAMPLE_WEIGHT_ATTRIBUTE_NAME = "SampleWeightAttributeName";
  @SerializedName(SERIALIZED_NAME_SAMPLE_WEIGHT_ATTRIBUTE_NAME)
  private String sampleWeightAttributeName;

  public AutoMLProblemTypeConfigTabularJobConfig() {
  }

  public AutoMLProblemTypeConfigTabularJobConfig candidateGenerationConfig(TabularJobConfigCandidateGenerationConfig candidateGenerationConfig) {
    this.candidateGenerationConfig = candidateGenerationConfig;
    return this;
  }

  /**
   * Get candidateGenerationConfig
   * @return candidateGenerationConfig
   */
  @javax.annotation.Nullable
  public TabularJobConfigCandidateGenerationConfig getCandidateGenerationConfig() {
    return candidateGenerationConfig;
  }

  public void setCandidateGenerationConfig(TabularJobConfigCandidateGenerationConfig candidateGenerationConfig) {
    this.candidateGenerationConfig = candidateGenerationConfig;
  }


  public AutoMLProblemTypeConfigTabularJobConfig completionCriteria(AutoMLJobCompletionCriteria completionCriteria) {
    this.completionCriteria = completionCriteria;
    return this;
  }

  /**
   * Get completionCriteria
   * @return completionCriteria
   */
  @javax.annotation.Nullable
  public AutoMLJobCompletionCriteria getCompletionCriteria() {
    return completionCriteria;
  }

  public void setCompletionCriteria(AutoMLJobCompletionCriteria completionCriteria) {
    this.completionCriteria = completionCriteria;
  }


  public AutoMLProblemTypeConfigTabularJobConfig featureSpecificationS3Uri(String featureSpecificationS3Uri) {
    this.featureSpecificationS3Uri = featureSpecificationS3Uri;
    return this;
  }

  /**
   * Get featureSpecificationS3Uri
   * @return featureSpecificationS3Uri
   */
  @javax.annotation.Nullable
  public String getFeatureSpecificationS3Uri() {
    return featureSpecificationS3Uri;
  }

  public void setFeatureSpecificationS3Uri(String featureSpecificationS3Uri) {
    this.featureSpecificationS3Uri = featureSpecificationS3Uri;
  }


  public AutoMLProblemTypeConfigTabularJobConfig mode(AutoMLMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public AutoMLMode getMode() {
    return mode;
  }

  public void setMode(AutoMLMode mode) {
    this.mode = mode;
  }


  public AutoMLProblemTypeConfigTabularJobConfig generateCandidateDefinitionsOnly(Boolean generateCandidateDefinitionsOnly) {
    this.generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnly;
    return this;
  }

  /**
   * Get generateCandidateDefinitionsOnly
   * @return generateCandidateDefinitionsOnly
   */
  @javax.annotation.Nullable
  public Boolean getGenerateCandidateDefinitionsOnly() {
    return generateCandidateDefinitionsOnly;
  }

  public void setGenerateCandidateDefinitionsOnly(Boolean generateCandidateDefinitionsOnly) {
    this.generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnly;
  }


  public AutoMLProblemTypeConfigTabularJobConfig problemType(ProblemType problemType) {
    this.problemType = problemType;
    return this;
  }

  /**
   * Get problemType
   * @return problemType
   */
  @javax.annotation.Nullable
  public ProblemType getProblemType() {
    return problemType;
  }

  public void setProblemType(ProblemType problemType) {
    this.problemType = problemType;
  }


  public AutoMLProblemTypeConfigTabularJobConfig targetAttributeName(String targetAttributeName) {
    this.targetAttributeName = targetAttributeName;
    return this;
  }

  /**
   * Get targetAttributeName
   * @return targetAttributeName
   */
  @javax.annotation.Nonnull
  public String getTargetAttributeName() {
    return targetAttributeName;
  }

  public void setTargetAttributeName(String targetAttributeName) {
    this.targetAttributeName = targetAttributeName;
  }


  public AutoMLProblemTypeConfigTabularJobConfig sampleWeightAttributeName(String sampleWeightAttributeName) {
    this.sampleWeightAttributeName = sampleWeightAttributeName;
    return this;
  }

  /**
   * Get sampleWeightAttributeName
   * @return sampleWeightAttributeName
   */
  @javax.annotation.Nullable
  public String getSampleWeightAttributeName() {
    return sampleWeightAttributeName;
  }

  public void setSampleWeightAttributeName(String sampleWeightAttributeName) {
    this.sampleWeightAttributeName = sampleWeightAttributeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoMLProblemTypeConfigTabularJobConfig autoMLProblemTypeConfigTabularJobConfig = (AutoMLProblemTypeConfigTabularJobConfig) o;
    return Objects.equals(this.candidateGenerationConfig, autoMLProblemTypeConfigTabularJobConfig.candidateGenerationConfig) &&
        Objects.equals(this.completionCriteria, autoMLProblemTypeConfigTabularJobConfig.completionCriteria) &&
        Objects.equals(this.featureSpecificationS3Uri, autoMLProblemTypeConfigTabularJobConfig.featureSpecificationS3Uri) &&
        Objects.equals(this.mode, autoMLProblemTypeConfigTabularJobConfig.mode) &&
        Objects.equals(this.generateCandidateDefinitionsOnly, autoMLProblemTypeConfigTabularJobConfig.generateCandidateDefinitionsOnly) &&
        Objects.equals(this.problemType, autoMLProblemTypeConfigTabularJobConfig.problemType) &&
        Objects.equals(this.targetAttributeName, autoMLProblemTypeConfigTabularJobConfig.targetAttributeName) &&
        Objects.equals(this.sampleWeightAttributeName, autoMLProblemTypeConfigTabularJobConfig.sampleWeightAttributeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateGenerationConfig, completionCriteria, featureSpecificationS3Uri, mode, generateCandidateDefinitionsOnly, problemType, targetAttributeName, sampleWeightAttributeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoMLProblemTypeConfigTabularJobConfig {\n");
    sb.append("    candidateGenerationConfig: ").append(toIndentedString(candidateGenerationConfig)).append("\n");
    sb.append("    completionCriteria: ").append(toIndentedString(completionCriteria)).append("\n");
    sb.append("    featureSpecificationS3Uri: ").append(toIndentedString(featureSpecificationS3Uri)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    generateCandidateDefinitionsOnly: ").append(toIndentedString(generateCandidateDefinitionsOnly)).append("\n");
    sb.append("    problemType: ").append(toIndentedString(problemType)).append("\n");
    sb.append("    targetAttributeName: ").append(toIndentedString(targetAttributeName)).append("\n");
    sb.append("    sampleWeightAttributeName: ").append(toIndentedString(sampleWeightAttributeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CandidateGenerationConfig");
    openapiFields.add("CompletionCriteria");
    openapiFields.add("FeatureSpecificationS3Uri");
    openapiFields.add("Mode");
    openapiFields.add("GenerateCandidateDefinitionsOnly");
    openapiFields.add("ProblemType");
    openapiFields.add("TargetAttributeName");
    openapiFields.add("SampleWeightAttributeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TargetAttributeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoMLProblemTypeConfigTabularJobConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoMLProblemTypeConfigTabularJobConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoMLProblemTypeConfigTabularJobConfig is not found in the empty JSON string", AutoMLProblemTypeConfigTabularJobConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoMLProblemTypeConfigTabularJobConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoMLProblemTypeConfigTabularJobConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutoMLProblemTypeConfigTabularJobConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CandidateGenerationConfig`
      if (jsonObj.get("CandidateGenerationConfig") != null && !jsonObj.get("CandidateGenerationConfig").isJsonNull()) {
        TabularJobConfigCandidateGenerationConfig.validateJsonElement(jsonObj.get("CandidateGenerationConfig"));
      }
      // validate the optional field `CompletionCriteria`
      if (jsonObj.get("CompletionCriteria") != null && !jsonObj.get("CompletionCriteria").isJsonNull()) {
        AutoMLJobCompletionCriteria.validateJsonElement(jsonObj.get("CompletionCriteria"));
      }
      // validate the optional field `FeatureSpecificationS3Uri`
      if (jsonObj.get("FeatureSpecificationS3Uri") != null && !jsonObj.get("FeatureSpecificationS3Uri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeatureSpecificationS3Uri"));
      }
      // validate the optional field `Mode`
      if (jsonObj.get("Mode") != null && !jsonObj.get("Mode").isJsonNull()) {
        AutoMLMode.validateJsonElement(jsonObj.get("Mode"));
      }
      // validate the optional field `GenerateCandidateDefinitionsOnly`
      if (jsonObj.get("GenerateCandidateDefinitionsOnly") != null && !jsonObj.get("GenerateCandidateDefinitionsOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("GenerateCandidateDefinitionsOnly"));
      }
      // validate the optional field `ProblemType`
      if (jsonObj.get("ProblemType") != null && !jsonObj.get("ProblemType").isJsonNull()) {
        ProblemType.validateJsonElement(jsonObj.get("ProblemType"));
      }
      // validate the required field `TargetAttributeName`
      String.validateJsonElement(jsonObj.get("TargetAttributeName"));
      // validate the optional field `SampleWeightAttributeName`
      if (jsonObj.get("SampleWeightAttributeName") != null && !jsonObj.get("SampleWeightAttributeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SampleWeightAttributeName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoMLProblemTypeConfigTabularJobConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoMLProblemTypeConfigTabularJobConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoMLProblemTypeConfigTabularJobConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoMLProblemTypeConfigTabularJobConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoMLProblemTypeConfigTabularJobConfig>() {
           @Override
           public void write(JsonWriter out, AutoMLProblemTypeConfigTabularJobConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoMLProblemTypeConfigTabularJobConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoMLProblemTypeConfigTabularJobConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoMLProblemTypeConfigTabularJobConfig
   * @throws IOException if the JSON string is invalid with respect to AutoMLProblemTypeConfigTabularJobConfig
   */
  public static AutoMLProblemTypeConfigTabularJobConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoMLProblemTypeConfigTabularJobConfig.class);
  }

  /**
   * Convert an instance of AutoMLProblemTypeConfigTabularJobConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

