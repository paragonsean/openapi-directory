/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeSubscribedWorkteamResponseSubscribedWorkteam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeSubscribedWorkteamResponseSubscribedWorkteam {
  public static final String SERIALIZED_NAME_WORKTEAM_ARN = "WorkteamArn";
  @SerializedName(SERIALIZED_NAME_WORKTEAM_ARN)
  private String workteamArn;

  public static final String SERIALIZED_NAME_MARKETPLACE_TITLE = "MarketplaceTitle";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_TITLE)
  private String marketplaceTitle;

  public static final String SERIALIZED_NAME_SELLER_NAME = "SellerName";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private String sellerName;

  public static final String SERIALIZED_NAME_MARKETPLACE_DESCRIPTION = "MarketplaceDescription";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_DESCRIPTION)
  private String marketplaceDescription;

  public static final String SERIALIZED_NAME_LISTING_ID = "ListingId";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private String listingId;

  public DescribeSubscribedWorkteamResponseSubscribedWorkteam() {
  }

  public DescribeSubscribedWorkteamResponseSubscribedWorkteam workteamArn(String workteamArn) {
    this.workteamArn = workteamArn;
    return this;
  }

  /**
   * Get workteamArn
   * @return workteamArn
   */
  @javax.annotation.Nonnull
  public String getWorkteamArn() {
    return workteamArn;
  }

  public void setWorkteamArn(String workteamArn) {
    this.workteamArn = workteamArn;
  }


  public DescribeSubscribedWorkteamResponseSubscribedWorkteam marketplaceTitle(String marketplaceTitle) {
    this.marketplaceTitle = marketplaceTitle;
    return this;
  }

  /**
   * Get marketplaceTitle
   * @return marketplaceTitle
   */
  @javax.annotation.Nullable
  public String getMarketplaceTitle() {
    return marketplaceTitle;
  }

  public void setMarketplaceTitle(String marketplaceTitle) {
    this.marketplaceTitle = marketplaceTitle;
  }


  public DescribeSubscribedWorkteamResponseSubscribedWorkteam sellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  /**
   * Get sellerName
   * @return sellerName
   */
  @javax.annotation.Nullable
  public String getSellerName() {
    return sellerName;
  }

  public void setSellerName(String sellerName) {
    this.sellerName = sellerName;
  }


  public DescribeSubscribedWorkteamResponseSubscribedWorkteam marketplaceDescription(String marketplaceDescription) {
    this.marketplaceDescription = marketplaceDescription;
    return this;
  }

  /**
   * Get marketplaceDescription
   * @return marketplaceDescription
   */
  @javax.annotation.Nullable
  public String getMarketplaceDescription() {
    return marketplaceDescription;
  }

  public void setMarketplaceDescription(String marketplaceDescription) {
    this.marketplaceDescription = marketplaceDescription;
  }


  public DescribeSubscribedWorkteamResponseSubscribedWorkteam listingId(String listingId) {
    this.listingId = listingId;
    return this;
  }

  /**
   * Get listingId
   * @return listingId
   */
  @javax.annotation.Nullable
  public String getListingId() {
    return listingId;
  }

  public void setListingId(String listingId) {
    this.listingId = listingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeSubscribedWorkteamResponseSubscribedWorkteam describeSubscribedWorkteamResponseSubscribedWorkteam = (DescribeSubscribedWorkteamResponseSubscribedWorkteam) o;
    return Objects.equals(this.workteamArn, describeSubscribedWorkteamResponseSubscribedWorkteam.workteamArn) &&
        Objects.equals(this.marketplaceTitle, describeSubscribedWorkteamResponseSubscribedWorkteam.marketplaceTitle) &&
        Objects.equals(this.sellerName, describeSubscribedWorkteamResponseSubscribedWorkteam.sellerName) &&
        Objects.equals(this.marketplaceDescription, describeSubscribedWorkteamResponseSubscribedWorkteam.marketplaceDescription) &&
        Objects.equals(this.listingId, describeSubscribedWorkteamResponseSubscribedWorkteam.listingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workteamArn, marketplaceTitle, sellerName, marketplaceDescription, listingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeSubscribedWorkteamResponseSubscribedWorkteam {\n");
    sb.append("    workteamArn: ").append(toIndentedString(workteamArn)).append("\n");
    sb.append("    marketplaceTitle: ").append(toIndentedString(marketplaceTitle)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    marketplaceDescription: ").append(toIndentedString(marketplaceDescription)).append("\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WorkteamArn");
    openapiFields.add("MarketplaceTitle");
    openapiFields.add("SellerName");
    openapiFields.add("MarketplaceDescription");
    openapiFields.add("ListingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("WorkteamArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeSubscribedWorkteamResponseSubscribedWorkteam
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeSubscribedWorkteamResponseSubscribedWorkteam.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeSubscribedWorkteamResponseSubscribedWorkteam is not found in the empty JSON string", DescribeSubscribedWorkteamResponseSubscribedWorkteam.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeSubscribedWorkteamResponseSubscribedWorkteam.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeSubscribedWorkteamResponseSubscribedWorkteam` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeSubscribedWorkteamResponseSubscribedWorkteam.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `WorkteamArn`
      String.validateJsonElement(jsonObj.get("WorkteamArn"));
      // validate the optional field `MarketplaceTitle`
      if (jsonObj.get("MarketplaceTitle") != null && !jsonObj.get("MarketplaceTitle").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MarketplaceTitle"));
      }
      // validate the optional field `SellerName`
      if (jsonObj.get("SellerName") != null && !jsonObj.get("SellerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SellerName"));
      }
      // validate the optional field `MarketplaceDescription`
      if (jsonObj.get("MarketplaceDescription") != null && !jsonObj.get("MarketplaceDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MarketplaceDescription"));
      }
      // validate the optional field `ListingId`
      if (jsonObj.get("ListingId") != null && !jsonObj.get("ListingId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ListingId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeSubscribedWorkteamResponseSubscribedWorkteam.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeSubscribedWorkteamResponseSubscribedWorkteam' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeSubscribedWorkteamResponseSubscribedWorkteam> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeSubscribedWorkteamResponseSubscribedWorkteam.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeSubscribedWorkteamResponseSubscribedWorkteam>() {
           @Override
           public void write(JsonWriter out, DescribeSubscribedWorkteamResponseSubscribedWorkteam value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeSubscribedWorkteamResponseSubscribedWorkteam read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeSubscribedWorkteamResponseSubscribedWorkteam given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeSubscribedWorkteamResponseSubscribedWorkteam
   * @throws IOException if the JSON string is invalid with respect to DescribeSubscribedWorkteamResponseSubscribedWorkteam
   */
  public static DescribeSubscribedWorkteamResponseSubscribedWorkteam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeSubscribedWorkteamResponseSubscribedWorkteam.class);
  }

  /**
   * Convert an instance of DescribeSubscribedWorkteamResponseSubscribedWorkteam to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

