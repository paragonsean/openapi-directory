/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribePipelineExecutionResponseSelectiveExecutionConfig;
import org.openapitools.client.model.PipelineExecutionParallelismConfiguration;
import org.openapitools.client.model.PipelineExecutionStatus;
import org.openapitools.client.model.PipelineExperimentConfig;
import org.openapitools.client.model.UserContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An execution of a pipeline.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipelineExecution {
  public static final String SERIALIZED_NAME_PIPELINE_ARN = "PipelineArn";
  @SerializedName(SERIALIZED_NAME_PIPELINE_ARN)
  private String pipelineArn;

  public static final String SERIALIZED_NAME_PIPELINE_EXECUTION_ARN = "PipelineExecutionArn";
  @SerializedName(SERIALIZED_NAME_PIPELINE_EXECUTION_ARN)
  private String pipelineExecutionArn;

  public static final String SERIALIZED_NAME_PIPELINE_EXECUTION_DISPLAY_NAME = "PipelineExecutionDisplayName";
  @SerializedName(SERIALIZED_NAME_PIPELINE_EXECUTION_DISPLAY_NAME)
  private String pipelineExecutionDisplayName;

  public static final String SERIALIZED_NAME_PIPELINE_EXECUTION_STATUS = "PipelineExecutionStatus";
  @SerializedName(SERIALIZED_NAME_PIPELINE_EXECUTION_STATUS)
  private PipelineExecutionStatus pipelineExecutionStatus;

  public static final String SERIALIZED_NAME_PIPELINE_EXECUTION_DESCRIPTION = "PipelineExecutionDescription";
  @SerializedName(SERIALIZED_NAME_PIPELINE_EXECUTION_DESCRIPTION)
  private String pipelineExecutionDescription;

  public static final String SERIALIZED_NAME_PIPELINE_EXPERIMENT_CONFIG = "PipelineExperimentConfig";
  @SerializedName(SERIALIZED_NAME_PIPELINE_EXPERIMENT_CONFIG)
  private PipelineExperimentConfig pipelineExperimentConfig;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_CREATED_BY = "CreatedBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserContext createdBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "LastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private UserContext lastModifiedBy;

  public static final String SERIALIZED_NAME_PARALLELISM_CONFIGURATION = "ParallelismConfiguration";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_CONFIGURATION)
  private PipelineExecutionParallelismConfiguration parallelismConfiguration;

  public static final String SERIALIZED_NAME_PIPELINE_PARAMETERS = "PipelineParameters";
  @SerializedName(SERIALIZED_NAME_PIPELINE_PARAMETERS)
  private List pipelineParameters;

  public static final String SERIALIZED_NAME_SELECTIVE_EXECUTION_CONFIG = "SelectiveExecutionConfig";
  @SerializedName(SERIALIZED_NAME_SELECTIVE_EXECUTION_CONFIG)
  private DescribePipelineExecutionResponseSelectiveExecutionConfig selectiveExecutionConfig;

  public PipelineExecution() {
  }

  public PipelineExecution pipelineArn(String pipelineArn) {
    this.pipelineArn = pipelineArn;
    return this;
  }

  /**
   * Get pipelineArn
   * @return pipelineArn
   */
  @javax.annotation.Nullable
  public String getPipelineArn() {
    return pipelineArn;
  }

  public void setPipelineArn(String pipelineArn) {
    this.pipelineArn = pipelineArn;
  }


  public PipelineExecution pipelineExecutionArn(String pipelineExecutionArn) {
    this.pipelineExecutionArn = pipelineExecutionArn;
    return this;
  }

  /**
   * Get pipelineExecutionArn
   * @return pipelineExecutionArn
   */
  @javax.annotation.Nullable
  public String getPipelineExecutionArn() {
    return pipelineExecutionArn;
  }

  public void setPipelineExecutionArn(String pipelineExecutionArn) {
    this.pipelineExecutionArn = pipelineExecutionArn;
  }


  public PipelineExecution pipelineExecutionDisplayName(String pipelineExecutionDisplayName) {
    this.pipelineExecutionDisplayName = pipelineExecutionDisplayName;
    return this;
  }

  /**
   * Get pipelineExecutionDisplayName
   * @return pipelineExecutionDisplayName
   */
  @javax.annotation.Nullable
  public String getPipelineExecutionDisplayName() {
    return pipelineExecutionDisplayName;
  }

  public void setPipelineExecutionDisplayName(String pipelineExecutionDisplayName) {
    this.pipelineExecutionDisplayName = pipelineExecutionDisplayName;
  }


  public PipelineExecution pipelineExecutionStatus(PipelineExecutionStatus pipelineExecutionStatus) {
    this.pipelineExecutionStatus = pipelineExecutionStatus;
    return this;
  }

  /**
   * Get pipelineExecutionStatus
   * @return pipelineExecutionStatus
   */
  @javax.annotation.Nullable
  public PipelineExecutionStatus getPipelineExecutionStatus() {
    return pipelineExecutionStatus;
  }

  public void setPipelineExecutionStatus(PipelineExecutionStatus pipelineExecutionStatus) {
    this.pipelineExecutionStatus = pipelineExecutionStatus;
  }


  public PipelineExecution pipelineExecutionDescription(String pipelineExecutionDescription) {
    this.pipelineExecutionDescription = pipelineExecutionDescription;
    return this;
  }

  /**
   * Get pipelineExecutionDescription
   * @return pipelineExecutionDescription
   */
  @javax.annotation.Nullable
  public String getPipelineExecutionDescription() {
    return pipelineExecutionDescription;
  }

  public void setPipelineExecutionDescription(String pipelineExecutionDescription) {
    this.pipelineExecutionDescription = pipelineExecutionDescription;
  }


  public PipelineExecution pipelineExperimentConfig(PipelineExperimentConfig pipelineExperimentConfig) {
    this.pipelineExperimentConfig = pipelineExperimentConfig;
    return this;
  }

  /**
   * Get pipelineExperimentConfig
   * @return pipelineExperimentConfig
   */
  @javax.annotation.Nullable
  public PipelineExperimentConfig getPipelineExperimentConfig() {
    return pipelineExperimentConfig;
  }

  public void setPipelineExperimentConfig(PipelineExperimentConfig pipelineExperimentConfig) {
    this.pipelineExperimentConfig = pipelineExperimentConfig;
  }


  public PipelineExecution failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public PipelineExecution creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public PipelineExecution lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public PipelineExecution createdBy(UserContext createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserContext getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserContext createdBy) {
    this.createdBy = createdBy;
  }


  public PipelineExecution lastModifiedBy(UserContext lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Get lastModifiedBy
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public UserContext getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(UserContext lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public PipelineExecution parallelismConfiguration(PipelineExecutionParallelismConfiguration parallelismConfiguration) {
    this.parallelismConfiguration = parallelismConfiguration;
    return this;
  }

  /**
   * Get parallelismConfiguration
   * @return parallelismConfiguration
   */
  @javax.annotation.Nullable
  public PipelineExecutionParallelismConfiguration getParallelismConfiguration() {
    return parallelismConfiguration;
  }

  public void setParallelismConfiguration(PipelineExecutionParallelismConfiguration parallelismConfiguration) {
    this.parallelismConfiguration = parallelismConfiguration;
  }


  public PipelineExecution pipelineParameters(List pipelineParameters) {
    this.pipelineParameters = pipelineParameters;
    return this;
  }

  /**
   * Get pipelineParameters
   * @return pipelineParameters
   */
  @javax.annotation.Nullable
  public List getPipelineParameters() {
    return pipelineParameters;
  }

  public void setPipelineParameters(List pipelineParameters) {
    this.pipelineParameters = pipelineParameters;
  }


  public PipelineExecution selectiveExecutionConfig(DescribePipelineExecutionResponseSelectiveExecutionConfig selectiveExecutionConfig) {
    this.selectiveExecutionConfig = selectiveExecutionConfig;
    return this;
  }

  /**
   * Get selectiveExecutionConfig
   * @return selectiveExecutionConfig
   */
  @javax.annotation.Nullable
  public DescribePipelineExecutionResponseSelectiveExecutionConfig getSelectiveExecutionConfig() {
    return selectiveExecutionConfig;
  }

  public void setSelectiveExecutionConfig(DescribePipelineExecutionResponseSelectiveExecutionConfig selectiveExecutionConfig) {
    this.selectiveExecutionConfig = selectiveExecutionConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineExecution pipelineExecution = (PipelineExecution) o;
    return Objects.equals(this.pipelineArn, pipelineExecution.pipelineArn) &&
        Objects.equals(this.pipelineExecutionArn, pipelineExecution.pipelineExecutionArn) &&
        Objects.equals(this.pipelineExecutionDisplayName, pipelineExecution.pipelineExecutionDisplayName) &&
        Objects.equals(this.pipelineExecutionStatus, pipelineExecution.pipelineExecutionStatus) &&
        Objects.equals(this.pipelineExecutionDescription, pipelineExecution.pipelineExecutionDescription) &&
        Objects.equals(this.pipelineExperimentConfig, pipelineExecution.pipelineExperimentConfig) &&
        Objects.equals(this.failureReason, pipelineExecution.failureReason) &&
        Objects.equals(this.creationTime, pipelineExecution.creationTime) &&
        Objects.equals(this.lastModifiedTime, pipelineExecution.lastModifiedTime) &&
        Objects.equals(this.createdBy, pipelineExecution.createdBy) &&
        Objects.equals(this.lastModifiedBy, pipelineExecution.lastModifiedBy) &&
        Objects.equals(this.parallelismConfiguration, pipelineExecution.parallelismConfiguration) &&
        Objects.equals(this.pipelineParameters, pipelineExecution.pipelineParameters) &&
        Objects.equals(this.selectiveExecutionConfig, pipelineExecution.selectiveExecutionConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pipelineArn, pipelineExecutionArn, pipelineExecutionDisplayName, pipelineExecutionStatus, pipelineExecutionDescription, pipelineExperimentConfig, failureReason, creationTime, lastModifiedTime, createdBy, lastModifiedBy, parallelismConfiguration, pipelineParameters, selectiveExecutionConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineExecution {\n");
    sb.append("    pipelineArn: ").append(toIndentedString(pipelineArn)).append("\n");
    sb.append("    pipelineExecutionArn: ").append(toIndentedString(pipelineExecutionArn)).append("\n");
    sb.append("    pipelineExecutionDisplayName: ").append(toIndentedString(pipelineExecutionDisplayName)).append("\n");
    sb.append("    pipelineExecutionStatus: ").append(toIndentedString(pipelineExecutionStatus)).append("\n");
    sb.append("    pipelineExecutionDescription: ").append(toIndentedString(pipelineExecutionDescription)).append("\n");
    sb.append("    pipelineExperimentConfig: ").append(toIndentedString(pipelineExperimentConfig)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    parallelismConfiguration: ").append(toIndentedString(parallelismConfiguration)).append("\n");
    sb.append("    pipelineParameters: ").append(toIndentedString(pipelineParameters)).append("\n");
    sb.append("    selectiveExecutionConfig: ").append(toIndentedString(selectiveExecutionConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PipelineArn");
    openapiFields.add("PipelineExecutionArn");
    openapiFields.add("PipelineExecutionDisplayName");
    openapiFields.add("PipelineExecutionStatus");
    openapiFields.add("PipelineExecutionDescription");
    openapiFields.add("PipelineExperimentConfig");
    openapiFields.add("FailureReason");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("CreatedBy");
    openapiFields.add("LastModifiedBy");
    openapiFields.add("ParallelismConfiguration");
    openapiFields.add("PipelineParameters");
    openapiFields.add("SelectiveExecutionConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipelineExecution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipelineExecution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipelineExecution is not found in the empty JSON string", PipelineExecution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PipelineExecution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PipelineExecution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PipelineArn`
      if (jsonObj.get("PipelineArn") != null && !jsonObj.get("PipelineArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineArn"));
      }
      // validate the optional field `PipelineExecutionArn`
      if (jsonObj.get("PipelineExecutionArn") != null && !jsonObj.get("PipelineExecutionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineExecutionArn"));
      }
      // validate the optional field `PipelineExecutionDisplayName`
      if (jsonObj.get("PipelineExecutionDisplayName") != null && !jsonObj.get("PipelineExecutionDisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineExecutionDisplayName"));
      }
      // validate the optional field `PipelineExecutionStatus`
      if (jsonObj.get("PipelineExecutionStatus") != null && !jsonObj.get("PipelineExecutionStatus").isJsonNull()) {
        PipelineExecutionStatus.validateJsonElement(jsonObj.get("PipelineExecutionStatus"));
      }
      // validate the optional field `PipelineExecutionDescription`
      if (jsonObj.get("PipelineExecutionDescription") != null && !jsonObj.get("PipelineExecutionDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineExecutionDescription"));
      }
      // validate the optional field `PipelineExperimentConfig`
      if (jsonObj.get("PipelineExperimentConfig") != null && !jsonObj.get("PipelineExperimentConfig").isJsonNull()) {
        PipelineExperimentConfig.validateJsonElement(jsonObj.get("PipelineExperimentConfig"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureReason"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
      // validate the optional field `CreatedBy`
      if (jsonObj.get("CreatedBy") != null && !jsonObj.get("CreatedBy").isJsonNull()) {
        UserContext.validateJsonElement(jsonObj.get("CreatedBy"));
      }
      // validate the optional field `LastModifiedBy`
      if (jsonObj.get("LastModifiedBy") != null && !jsonObj.get("LastModifiedBy").isJsonNull()) {
        UserContext.validateJsonElement(jsonObj.get("LastModifiedBy"));
      }
      // validate the optional field `ParallelismConfiguration`
      if (jsonObj.get("ParallelismConfiguration") != null && !jsonObj.get("ParallelismConfiguration").isJsonNull()) {
        PipelineExecutionParallelismConfiguration.validateJsonElement(jsonObj.get("ParallelismConfiguration"));
      }
      // validate the optional field `PipelineParameters`
      if (jsonObj.get("PipelineParameters") != null && !jsonObj.get("PipelineParameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PipelineParameters"));
      }
      // validate the optional field `SelectiveExecutionConfig`
      if (jsonObj.get("SelectiveExecutionConfig") != null && !jsonObj.get("SelectiveExecutionConfig").isJsonNull()) {
        DescribePipelineExecutionResponseSelectiveExecutionConfig.validateJsonElement(jsonObj.get("SelectiveExecutionConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipelineExecution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipelineExecution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipelineExecution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipelineExecution.class));

       return (TypeAdapter<T>) new TypeAdapter<PipelineExecution>() {
           @Override
           public void write(JsonWriter out, PipelineExecution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PipelineExecution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipelineExecution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipelineExecution
   * @throws IOException if the JSON string is invalid with respect to PipelineExecution
   */
  public static PipelineExecution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipelineExecution.class);
  }

  /**
   * Convert an instance of PipelineExecution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

