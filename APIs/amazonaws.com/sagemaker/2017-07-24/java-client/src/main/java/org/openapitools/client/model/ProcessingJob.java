/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AppSpecification;
import org.openapitools.client.model.ExperimentConfig;
import org.openapitools.client.model.NetworkConfig;
import org.openapitools.client.model.ProcessingJobStatus;
import org.openapitools.client.model.ProcessingOutputConfig;
import org.openapitools.client.model.ProcessingResources;
import org.openapitools.client.model.ProcessingStoppingCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Amazon SageMaker processing job that is used to analyze data and evaluate models. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html\&quot;&gt;Process Data and Evaluate Models&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProcessingJob {
  public static final String SERIALIZED_NAME_PROCESSING_INPUTS = "ProcessingInputs";
  @SerializedName(SERIALIZED_NAME_PROCESSING_INPUTS)
  private List processingInputs;

  public static final String SERIALIZED_NAME_PROCESSING_OUTPUT_CONFIG = "ProcessingOutputConfig";
  @SerializedName(SERIALIZED_NAME_PROCESSING_OUTPUT_CONFIG)
  private ProcessingOutputConfig processingOutputConfig;

  public static final String SERIALIZED_NAME_PROCESSING_JOB_NAME = "ProcessingJobName";
  @SerializedName(SERIALIZED_NAME_PROCESSING_JOB_NAME)
  private String processingJobName;

  public static final String SERIALIZED_NAME_PROCESSING_RESOURCES = "ProcessingResources";
  @SerializedName(SERIALIZED_NAME_PROCESSING_RESOURCES)
  private ProcessingResources processingResources;

  public static final String SERIALIZED_NAME_STOPPING_CONDITION = "StoppingCondition";
  @SerializedName(SERIALIZED_NAME_STOPPING_CONDITION)
  private ProcessingStoppingCondition stoppingCondition;

  public static final String SERIALIZED_NAME_APP_SPECIFICATION = "AppSpecification";
  @SerializedName(SERIALIZED_NAME_APP_SPECIFICATION)
  private AppSpecification appSpecification;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "Environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Map environment;

  public static final String SERIALIZED_NAME_NETWORK_CONFIG = "NetworkConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIG)
  private NetworkConfig networkConfig;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_EXPERIMENT_CONFIG = "ExperimentConfig";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_CONFIG)
  private ExperimentConfig experimentConfig;

  public static final String SERIALIZED_NAME_PROCESSING_JOB_ARN = "ProcessingJobArn";
  @SerializedName(SERIALIZED_NAME_PROCESSING_JOB_ARN)
  private String processingJobArn;

  public static final String SERIALIZED_NAME_PROCESSING_JOB_STATUS = "ProcessingJobStatus";
  @SerializedName(SERIALIZED_NAME_PROCESSING_JOB_STATUS)
  private ProcessingJobStatus processingJobStatus;

  public static final String SERIALIZED_NAME_EXIT_MESSAGE = "ExitMessage";
  @SerializedName(SERIALIZED_NAME_EXIT_MESSAGE)
  private String exitMessage;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_PROCESSING_END_TIME = "ProcessingEndTime";
  @SerializedName(SERIALIZED_NAME_PROCESSING_END_TIME)
  private OffsetDateTime processingEndTime;

  public static final String SERIALIZED_NAME_PROCESSING_START_TIME = "ProcessingStartTime";
  @SerializedName(SERIALIZED_NAME_PROCESSING_START_TIME)
  private OffsetDateTime processingStartTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_MONITORING_SCHEDULE_ARN = "MonitoringScheduleArn";
  @SerializedName(SERIALIZED_NAME_MONITORING_SCHEDULE_ARN)
  private String monitoringScheduleArn;

  public static final String SERIALIZED_NAME_AUTO_M_L_JOB_ARN = "AutoMLJobArn";
  @SerializedName(SERIALIZED_NAME_AUTO_M_L_JOB_ARN)
  private String autoMLJobArn;

  public static final String SERIALIZED_NAME_TRAINING_JOB_ARN = "TrainingJobArn";
  @SerializedName(SERIALIZED_NAME_TRAINING_JOB_ARN)
  private String trainingJobArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public ProcessingJob() {
  }

  public ProcessingJob processingInputs(List processingInputs) {
    this.processingInputs = processingInputs;
    return this;
  }

  /**
   * Get processingInputs
   * @return processingInputs
   */
  @javax.annotation.Nullable
  public List getProcessingInputs() {
    return processingInputs;
  }

  public void setProcessingInputs(List processingInputs) {
    this.processingInputs = processingInputs;
  }


  public ProcessingJob processingOutputConfig(ProcessingOutputConfig processingOutputConfig) {
    this.processingOutputConfig = processingOutputConfig;
    return this;
  }

  /**
   * Get processingOutputConfig
   * @return processingOutputConfig
   */
  @javax.annotation.Nullable
  public ProcessingOutputConfig getProcessingOutputConfig() {
    return processingOutputConfig;
  }

  public void setProcessingOutputConfig(ProcessingOutputConfig processingOutputConfig) {
    this.processingOutputConfig = processingOutputConfig;
  }


  public ProcessingJob processingJobName(String processingJobName) {
    this.processingJobName = processingJobName;
    return this;
  }

  /**
   * Get processingJobName
   * @return processingJobName
   */
  @javax.annotation.Nullable
  public String getProcessingJobName() {
    return processingJobName;
  }

  public void setProcessingJobName(String processingJobName) {
    this.processingJobName = processingJobName;
  }


  public ProcessingJob processingResources(ProcessingResources processingResources) {
    this.processingResources = processingResources;
    return this;
  }

  /**
   * Get processingResources
   * @return processingResources
   */
  @javax.annotation.Nullable
  public ProcessingResources getProcessingResources() {
    return processingResources;
  }

  public void setProcessingResources(ProcessingResources processingResources) {
    this.processingResources = processingResources;
  }


  public ProcessingJob stoppingCondition(ProcessingStoppingCondition stoppingCondition) {
    this.stoppingCondition = stoppingCondition;
    return this;
  }

  /**
   * Get stoppingCondition
   * @return stoppingCondition
   */
  @javax.annotation.Nullable
  public ProcessingStoppingCondition getStoppingCondition() {
    return stoppingCondition;
  }

  public void setStoppingCondition(ProcessingStoppingCondition stoppingCondition) {
    this.stoppingCondition = stoppingCondition;
  }


  public ProcessingJob appSpecification(AppSpecification appSpecification) {
    this.appSpecification = appSpecification;
    return this;
  }

  /**
   * Get appSpecification
   * @return appSpecification
   */
  @javax.annotation.Nullable
  public AppSpecification getAppSpecification() {
    return appSpecification;
  }

  public void setAppSpecification(AppSpecification appSpecification) {
    this.appSpecification = appSpecification;
  }


  public ProcessingJob environment(Map environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Map getEnvironment() {
    return environment;
  }

  public void setEnvironment(Map environment) {
    this.environment = environment;
  }


  public ProcessingJob networkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * Get networkConfig
   * @return networkConfig
   */
  @javax.annotation.Nullable
  public NetworkConfig getNetworkConfig() {
    return networkConfig;
  }

  public void setNetworkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
  }


  public ProcessingJob roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public ProcessingJob experimentConfig(ExperimentConfig experimentConfig) {
    this.experimentConfig = experimentConfig;
    return this;
  }

  /**
   * Get experimentConfig
   * @return experimentConfig
   */
  @javax.annotation.Nullable
  public ExperimentConfig getExperimentConfig() {
    return experimentConfig;
  }

  public void setExperimentConfig(ExperimentConfig experimentConfig) {
    this.experimentConfig = experimentConfig;
  }


  public ProcessingJob processingJobArn(String processingJobArn) {
    this.processingJobArn = processingJobArn;
    return this;
  }

  /**
   * Get processingJobArn
   * @return processingJobArn
   */
  @javax.annotation.Nullable
  public String getProcessingJobArn() {
    return processingJobArn;
  }

  public void setProcessingJobArn(String processingJobArn) {
    this.processingJobArn = processingJobArn;
  }


  public ProcessingJob processingJobStatus(ProcessingJobStatus processingJobStatus) {
    this.processingJobStatus = processingJobStatus;
    return this;
  }

  /**
   * Get processingJobStatus
   * @return processingJobStatus
   */
  @javax.annotation.Nullable
  public ProcessingJobStatus getProcessingJobStatus() {
    return processingJobStatus;
  }

  public void setProcessingJobStatus(ProcessingJobStatus processingJobStatus) {
    this.processingJobStatus = processingJobStatus;
  }


  public ProcessingJob exitMessage(String exitMessage) {
    this.exitMessage = exitMessage;
    return this;
  }

  /**
   * Get exitMessage
   * @return exitMessage
   */
  @javax.annotation.Nullable
  public String getExitMessage() {
    return exitMessage;
  }

  public void setExitMessage(String exitMessage) {
    this.exitMessage = exitMessage;
  }


  public ProcessingJob failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public ProcessingJob processingEndTime(OffsetDateTime processingEndTime) {
    this.processingEndTime = processingEndTime;
    return this;
  }

  /**
   * Get processingEndTime
   * @return processingEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProcessingEndTime() {
    return processingEndTime;
  }

  public void setProcessingEndTime(OffsetDateTime processingEndTime) {
    this.processingEndTime = processingEndTime;
  }


  public ProcessingJob processingStartTime(OffsetDateTime processingStartTime) {
    this.processingStartTime = processingStartTime;
    return this;
  }

  /**
   * Get processingStartTime
   * @return processingStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProcessingStartTime() {
    return processingStartTime;
  }

  public void setProcessingStartTime(OffsetDateTime processingStartTime) {
    this.processingStartTime = processingStartTime;
  }


  public ProcessingJob lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public ProcessingJob creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ProcessingJob monitoringScheduleArn(String monitoringScheduleArn) {
    this.monitoringScheduleArn = monitoringScheduleArn;
    return this;
  }

  /**
   * Get monitoringScheduleArn
   * @return monitoringScheduleArn
   */
  @javax.annotation.Nullable
  public String getMonitoringScheduleArn() {
    return monitoringScheduleArn;
  }

  public void setMonitoringScheduleArn(String monitoringScheduleArn) {
    this.monitoringScheduleArn = monitoringScheduleArn;
  }


  public ProcessingJob autoMLJobArn(String autoMLJobArn) {
    this.autoMLJobArn = autoMLJobArn;
    return this;
  }

  /**
   * Get autoMLJobArn
   * @return autoMLJobArn
   */
  @javax.annotation.Nullable
  public String getAutoMLJobArn() {
    return autoMLJobArn;
  }

  public void setAutoMLJobArn(String autoMLJobArn) {
    this.autoMLJobArn = autoMLJobArn;
  }


  public ProcessingJob trainingJobArn(String trainingJobArn) {
    this.trainingJobArn = trainingJobArn;
    return this;
  }

  /**
   * Get trainingJobArn
   * @return trainingJobArn
   */
  @javax.annotation.Nullable
  public String getTrainingJobArn() {
    return trainingJobArn;
  }

  public void setTrainingJobArn(String trainingJobArn) {
    this.trainingJobArn = trainingJobArn;
  }


  public ProcessingJob tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingJob processingJob = (ProcessingJob) o;
    return Objects.equals(this.processingInputs, processingJob.processingInputs) &&
        Objects.equals(this.processingOutputConfig, processingJob.processingOutputConfig) &&
        Objects.equals(this.processingJobName, processingJob.processingJobName) &&
        Objects.equals(this.processingResources, processingJob.processingResources) &&
        Objects.equals(this.stoppingCondition, processingJob.stoppingCondition) &&
        Objects.equals(this.appSpecification, processingJob.appSpecification) &&
        Objects.equals(this.environment, processingJob.environment) &&
        Objects.equals(this.networkConfig, processingJob.networkConfig) &&
        Objects.equals(this.roleArn, processingJob.roleArn) &&
        Objects.equals(this.experimentConfig, processingJob.experimentConfig) &&
        Objects.equals(this.processingJobArn, processingJob.processingJobArn) &&
        Objects.equals(this.processingJobStatus, processingJob.processingJobStatus) &&
        Objects.equals(this.exitMessage, processingJob.exitMessage) &&
        Objects.equals(this.failureReason, processingJob.failureReason) &&
        Objects.equals(this.processingEndTime, processingJob.processingEndTime) &&
        Objects.equals(this.processingStartTime, processingJob.processingStartTime) &&
        Objects.equals(this.lastModifiedTime, processingJob.lastModifiedTime) &&
        Objects.equals(this.creationTime, processingJob.creationTime) &&
        Objects.equals(this.monitoringScheduleArn, processingJob.monitoringScheduleArn) &&
        Objects.equals(this.autoMLJobArn, processingJob.autoMLJobArn) &&
        Objects.equals(this.trainingJobArn, processingJob.trainingJobArn) &&
        Objects.equals(this.tags, processingJob.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processingInputs, processingOutputConfig, processingJobName, processingResources, stoppingCondition, appSpecification, environment, networkConfig, roleArn, experimentConfig, processingJobArn, processingJobStatus, exitMessage, failureReason, processingEndTime, processingStartTime, lastModifiedTime, creationTime, monitoringScheduleArn, autoMLJobArn, trainingJobArn, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingJob {\n");
    sb.append("    processingInputs: ").append(toIndentedString(processingInputs)).append("\n");
    sb.append("    processingOutputConfig: ").append(toIndentedString(processingOutputConfig)).append("\n");
    sb.append("    processingJobName: ").append(toIndentedString(processingJobName)).append("\n");
    sb.append("    processingResources: ").append(toIndentedString(processingResources)).append("\n");
    sb.append("    stoppingCondition: ").append(toIndentedString(stoppingCondition)).append("\n");
    sb.append("    appSpecification: ").append(toIndentedString(appSpecification)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    networkConfig: ").append(toIndentedString(networkConfig)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    experimentConfig: ").append(toIndentedString(experimentConfig)).append("\n");
    sb.append("    processingJobArn: ").append(toIndentedString(processingJobArn)).append("\n");
    sb.append("    processingJobStatus: ").append(toIndentedString(processingJobStatus)).append("\n");
    sb.append("    exitMessage: ").append(toIndentedString(exitMessage)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    processingEndTime: ").append(toIndentedString(processingEndTime)).append("\n");
    sb.append("    processingStartTime: ").append(toIndentedString(processingStartTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    monitoringScheduleArn: ").append(toIndentedString(monitoringScheduleArn)).append("\n");
    sb.append("    autoMLJobArn: ").append(toIndentedString(autoMLJobArn)).append("\n");
    sb.append("    trainingJobArn: ").append(toIndentedString(trainingJobArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProcessingInputs");
    openapiFields.add("ProcessingOutputConfig");
    openapiFields.add("ProcessingJobName");
    openapiFields.add("ProcessingResources");
    openapiFields.add("StoppingCondition");
    openapiFields.add("AppSpecification");
    openapiFields.add("Environment");
    openapiFields.add("NetworkConfig");
    openapiFields.add("RoleArn");
    openapiFields.add("ExperimentConfig");
    openapiFields.add("ProcessingJobArn");
    openapiFields.add("ProcessingJobStatus");
    openapiFields.add("ExitMessage");
    openapiFields.add("FailureReason");
    openapiFields.add("ProcessingEndTime");
    openapiFields.add("ProcessingStartTime");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("CreationTime");
    openapiFields.add("MonitoringScheduleArn");
    openapiFields.add("AutoMLJobArn");
    openapiFields.add("TrainingJobArn");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProcessingJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProcessingJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessingJob is not found in the empty JSON string", ProcessingJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProcessingJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProcessingJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ProcessingInputs`
      if (jsonObj.get("ProcessingInputs") != null && !jsonObj.get("ProcessingInputs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProcessingInputs"));
      }
      // validate the optional field `ProcessingOutputConfig`
      if (jsonObj.get("ProcessingOutputConfig") != null && !jsonObj.get("ProcessingOutputConfig").isJsonNull()) {
        ProcessingOutputConfig.validateJsonElement(jsonObj.get("ProcessingOutputConfig"));
      }
      // validate the optional field `ProcessingJobName`
      if (jsonObj.get("ProcessingJobName") != null && !jsonObj.get("ProcessingJobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProcessingJobName"));
      }
      // validate the optional field `ProcessingResources`
      if (jsonObj.get("ProcessingResources") != null && !jsonObj.get("ProcessingResources").isJsonNull()) {
        ProcessingResources.validateJsonElement(jsonObj.get("ProcessingResources"));
      }
      // validate the optional field `StoppingCondition`
      if (jsonObj.get("StoppingCondition") != null && !jsonObj.get("StoppingCondition").isJsonNull()) {
        ProcessingStoppingCondition.validateJsonElement(jsonObj.get("StoppingCondition"));
      }
      // validate the optional field `AppSpecification`
      if (jsonObj.get("AppSpecification") != null && !jsonObj.get("AppSpecification").isJsonNull()) {
        AppSpecification.validateJsonElement(jsonObj.get("AppSpecification"));
      }
      // validate the optional field `Environment`
      if (jsonObj.get("Environment") != null && !jsonObj.get("Environment").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Environment"));
      }
      // validate the optional field `NetworkConfig`
      if (jsonObj.get("NetworkConfig") != null && !jsonObj.get("NetworkConfig").isJsonNull()) {
        NetworkConfig.validateJsonElement(jsonObj.get("NetworkConfig"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `ExperimentConfig`
      if (jsonObj.get("ExperimentConfig") != null && !jsonObj.get("ExperimentConfig").isJsonNull()) {
        ExperimentConfig.validateJsonElement(jsonObj.get("ExperimentConfig"));
      }
      // validate the optional field `ProcessingJobArn`
      if (jsonObj.get("ProcessingJobArn") != null && !jsonObj.get("ProcessingJobArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProcessingJobArn"));
      }
      // validate the optional field `ProcessingJobStatus`
      if (jsonObj.get("ProcessingJobStatus") != null && !jsonObj.get("ProcessingJobStatus").isJsonNull()) {
        ProcessingJobStatus.validateJsonElement(jsonObj.get("ProcessingJobStatus"));
      }
      // validate the optional field `ExitMessage`
      if (jsonObj.get("ExitMessage") != null && !jsonObj.get("ExitMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExitMessage"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureReason"));
      }
      // validate the optional field `ProcessingEndTime`
      if (jsonObj.get("ProcessingEndTime") != null && !jsonObj.get("ProcessingEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ProcessingEndTime"));
      }
      // validate the optional field `ProcessingStartTime`
      if (jsonObj.get("ProcessingStartTime") != null && !jsonObj.get("ProcessingStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ProcessingStartTime"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `MonitoringScheduleArn`
      if (jsonObj.get("MonitoringScheduleArn") != null && !jsonObj.get("MonitoringScheduleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MonitoringScheduleArn"));
      }
      // validate the optional field `AutoMLJobArn`
      if (jsonObj.get("AutoMLJobArn") != null && !jsonObj.get("AutoMLJobArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AutoMLJobArn"));
      }
      // validate the optional field `TrainingJobArn`
      if (jsonObj.get("TrainingJobArn") != null && !jsonObj.get("TrainingJobArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TrainingJobArn"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessingJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessingJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessingJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessingJob.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessingJob>() {
           @Override
           public void write(JsonWriter out, ProcessingJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessingJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProcessingJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProcessingJob
   * @throws IOException if the JSON string is invalid with respect to ProcessingJob
   */
  public static ProcessingJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessingJob.class);
  }

  /**
   * Convert an instance of ProcessingJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

