/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TrialSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A summary of the properties of a trial. To get the complete set of properties, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html\&quot;&gt;DescribeTrial&lt;/a&gt; API and provide the &lt;code&gt;TrialName&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrialSummary {
  public static final String SERIALIZED_NAME_TRIAL_ARN = "TrialArn";
  @SerializedName(SERIALIZED_NAME_TRIAL_ARN)
  private String trialArn;

  public static final String SERIALIZED_NAME_TRIAL_NAME = "TrialName";
  @SerializedName(SERIALIZED_NAME_TRIAL_NAME)
  private String trialName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_TRIAL_SOURCE = "TrialSource";
  @SerializedName(SERIALIZED_NAME_TRIAL_SOURCE)
  private TrialSource trialSource;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public TrialSummary() {
  }

  public TrialSummary trialArn(String trialArn) {
    this.trialArn = trialArn;
    return this;
  }

  /**
   * Get trialArn
   * @return trialArn
   */
  @javax.annotation.Nullable
  public String getTrialArn() {
    return trialArn;
  }

  public void setTrialArn(String trialArn) {
    this.trialArn = trialArn;
  }


  public TrialSummary trialName(String trialName) {
    this.trialName = trialName;
    return this;
  }

  /**
   * Get trialName
   * @return trialName
   */
  @javax.annotation.Nullable
  public String getTrialName() {
    return trialName;
  }

  public void setTrialName(String trialName) {
    this.trialName = trialName;
  }


  public TrialSummary displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public TrialSummary trialSource(TrialSource trialSource) {
    this.trialSource = trialSource;
    return this;
  }

  /**
   * Get trialSource
   * @return trialSource
   */
  @javax.annotation.Nullable
  public TrialSource getTrialSource() {
    return trialSource;
  }

  public void setTrialSource(TrialSource trialSource) {
    this.trialSource = trialSource;
  }


  public TrialSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public TrialSummary lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrialSummary trialSummary = (TrialSummary) o;
    return Objects.equals(this.trialArn, trialSummary.trialArn) &&
        Objects.equals(this.trialName, trialSummary.trialName) &&
        Objects.equals(this.displayName, trialSummary.displayName) &&
        Objects.equals(this.trialSource, trialSummary.trialSource) &&
        Objects.equals(this.creationTime, trialSummary.creationTime) &&
        Objects.equals(this.lastModifiedTime, trialSummary.lastModifiedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trialArn, trialName, displayName, trialSource, creationTime, lastModifiedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrialSummary {\n");
    sb.append("    trialArn: ").append(toIndentedString(trialArn)).append("\n");
    sb.append("    trialName: ").append(toIndentedString(trialName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    trialSource: ").append(toIndentedString(trialSource)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TrialArn");
    openapiFields.add("TrialName");
    openapiFields.add("DisplayName");
    openapiFields.add("TrialSource");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModifiedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrialSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrialSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrialSummary is not found in the empty JSON string", TrialSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrialSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrialSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TrialArn`
      if (jsonObj.get("TrialArn") != null && !jsonObj.get("TrialArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TrialArn"));
      }
      // validate the optional field `TrialName`
      if (jsonObj.get("TrialName") != null && !jsonObj.get("TrialName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TrialName"));
      }
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `TrialSource`
      if (jsonObj.get("TrialSource") != null && !jsonObj.get("TrialSource").isJsonNull()) {
        TrialSource.validateJsonElement(jsonObj.get("TrialSource"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrialSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrialSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrialSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrialSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TrialSummary>() {
           @Override
           public void write(JsonWriter out, TrialSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrialSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrialSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrialSummary
   * @throws IOException if the JSON string is invalid with respect to TrialSummary
   */
  public static TrialSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrialSummary.class);
  }

  /**
   * Convert an instance of TrialSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

