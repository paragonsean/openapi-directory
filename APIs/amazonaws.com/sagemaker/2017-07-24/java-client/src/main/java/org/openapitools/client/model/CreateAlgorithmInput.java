/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAlgorithmInputInferenceSpecification;
import org.openapitools.client.model.CreateAlgorithmInputTrainingSpecification;
import org.openapitools.client.model.CreateAlgorithmInputValidationSpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAlgorithmInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAlgorithmInput {
  public static final String SERIALIZED_NAME_ALGORITHM_NAME = "AlgorithmName";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_NAME)
  private String algorithmName;

  public static final String SERIALIZED_NAME_ALGORITHM_DESCRIPTION = "AlgorithmDescription";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_DESCRIPTION)
  private String algorithmDescription;

  public static final String SERIALIZED_NAME_TRAINING_SPECIFICATION = "TrainingSpecification";
  @SerializedName(SERIALIZED_NAME_TRAINING_SPECIFICATION)
  private CreateAlgorithmInputTrainingSpecification trainingSpecification;

  public static final String SERIALIZED_NAME_INFERENCE_SPECIFICATION = "InferenceSpecification";
  @SerializedName(SERIALIZED_NAME_INFERENCE_SPECIFICATION)
  private CreateAlgorithmInputInferenceSpecification inferenceSpecification;

  public static final String SERIALIZED_NAME_VALIDATION_SPECIFICATION = "ValidationSpecification";
  @SerializedName(SERIALIZED_NAME_VALIDATION_SPECIFICATION)
  private CreateAlgorithmInputValidationSpecification validationSpecification;

  public static final String SERIALIZED_NAME_CERTIFY_FOR_MARKETPLACE = "CertifyForMarketplace";
  @SerializedName(SERIALIZED_NAME_CERTIFY_FOR_MARKETPLACE)
  private Boolean certifyForMarketplace;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateAlgorithmInput() {
  }

  public CreateAlgorithmInput algorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  /**
   * Get algorithmName
   * @return algorithmName
   */
  @javax.annotation.Nonnull
  public String getAlgorithmName() {
    return algorithmName;
  }

  public void setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
  }


  public CreateAlgorithmInput algorithmDescription(String algorithmDescription) {
    this.algorithmDescription = algorithmDescription;
    return this;
  }

  /**
   * Get algorithmDescription
   * @return algorithmDescription
   */
  @javax.annotation.Nullable
  public String getAlgorithmDescription() {
    return algorithmDescription;
  }

  public void setAlgorithmDescription(String algorithmDescription) {
    this.algorithmDescription = algorithmDescription;
  }


  public CreateAlgorithmInput trainingSpecification(CreateAlgorithmInputTrainingSpecification trainingSpecification) {
    this.trainingSpecification = trainingSpecification;
    return this;
  }

  /**
   * Get trainingSpecification
   * @return trainingSpecification
   */
  @javax.annotation.Nonnull
  public CreateAlgorithmInputTrainingSpecification getTrainingSpecification() {
    return trainingSpecification;
  }

  public void setTrainingSpecification(CreateAlgorithmInputTrainingSpecification trainingSpecification) {
    this.trainingSpecification = trainingSpecification;
  }


  public CreateAlgorithmInput inferenceSpecification(CreateAlgorithmInputInferenceSpecification inferenceSpecification) {
    this.inferenceSpecification = inferenceSpecification;
    return this;
  }

  /**
   * Get inferenceSpecification
   * @return inferenceSpecification
   */
  @javax.annotation.Nullable
  public CreateAlgorithmInputInferenceSpecification getInferenceSpecification() {
    return inferenceSpecification;
  }

  public void setInferenceSpecification(CreateAlgorithmInputInferenceSpecification inferenceSpecification) {
    this.inferenceSpecification = inferenceSpecification;
  }


  public CreateAlgorithmInput validationSpecification(CreateAlgorithmInputValidationSpecification validationSpecification) {
    this.validationSpecification = validationSpecification;
    return this;
  }

  /**
   * Get validationSpecification
   * @return validationSpecification
   */
  @javax.annotation.Nullable
  public CreateAlgorithmInputValidationSpecification getValidationSpecification() {
    return validationSpecification;
  }

  public void setValidationSpecification(CreateAlgorithmInputValidationSpecification validationSpecification) {
    this.validationSpecification = validationSpecification;
  }


  public CreateAlgorithmInput certifyForMarketplace(Boolean certifyForMarketplace) {
    this.certifyForMarketplace = certifyForMarketplace;
    return this;
  }

  /**
   * Get certifyForMarketplace
   * @return certifyForMarketplace
   */
  @javax.annotation.Nullable
  public Boolean getCertifyForMarketplace() {
    return certifyForMarketplace;
  }

  public void setCertifyForMarketplace(Boolean certifyForMarketplace) {
    this.certifyForMarketplace = certifyForMarketplace;
  }


  public CreateAlgorithmInput tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAlgorithmInput createAlgorithmInput = (CreateAlgorithmInput) o;
    return Objects.equals(this.algorithmName, createAlgorithmInput.algorithmName) &&
        Objects.equals(this.algorithmDescription, createAlgorithmInput.algorithmDescription) &&
        Objects.equals(this.trainingSpecification, createAlgorithmInput.trainingSpecification) &&
        Objects.equals(this.inferenceSpecification, createAlgorithmInput.inferenceSpecification) &&
        Objects.equals(this.validationSpecification, createAlgorithmInput.validationSpecification) &&
        Objects.equals(this.certifyForMarketplace, createAlgorithmInput.certifyForMarketplace) &&
        Objects.equals(this.tags, createAlgorithmInput.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithmName, algorithmDescription, trainingSpecification, inferenceSpecification, validationSpecification, certifyForMarketplace, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAlgorithmInput {\n");
    sb.append("    algorithmName: ").append(toIndentedString(algorithmName)).append("\n");
    sb.append("    algorithmDescription: ").append(toIndentedString(algorithmDescription)).append("\n");
    sb.append("    trainingSpecification: ").append(toIndentedString(trainingSpecification)).append("\n");
    sb.append("    inferenceSpecification: ").append(toIndentedString(inferenceSpecification)).append("\n");
    sb.append("    validationSpecification: ").append(toIndentedString(validationSpecification)).append("\n");
    sb.append("    certifyForMarketplace: ").append(toIndentedString(certifyForMarketplace)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlgorithmName");
    openapiFields.add("AlgorithmDescription");
    openapiFields.add("TrainingSpecification");
    openapiFields.add("InferenceSpecification");
    openapiFields.add("ValidationSpecification");
    openapiFields.add("CertifyForMarketplace");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AlgorithmName");
    openapiRequiredFields.add("TrainingSpecification");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAlgorithmInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAlgorithmInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAlgorithmInput is not found in the empty JSON string", CreateAlgorithmInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAlgorithmInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAlgorithmInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAlgorithmInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AlgorithmName`
      String.validateJsonElement(jsonObj.get("AlgorithmName"));
      // validate the optional field `AlgorithmDescription`
      if (jsonObj.get("AlgorithmDescription") != null && !jsonObj.get("AlgorithmDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AlgorithmDescription"));
      }
      // validate the required field `TrainingSpecification`
      CreateAlgorithmInputTrainingSpecification.validateJsonElement(jsonObj.get("TrainingSpecification"));
      // validate the optional field `InferenceSpecification`
      if (jsonObj.get("InferenceSpecification") != null && !jsonObj.get("InferenceSpecification").isJsonNull()) {
        CreateAlgorithmInputInferenceSpecification.validateJsonElement(jsonObj.get("InferenceSpecification"));
      }
      // validate the optional field `ValidationSpecification`
      if (jsonObj.get("ValidationSpecification") != null && !jsonObj.get("ValidationSpecification").isJsonNull()) {
        CreateAlgorithmInputValidationSpecification.validateJsonElement(jsonObj.get("ValidationSpecification"));
      }
      // validate the optional field `CertifyForMarketplace`
      if (jsonObj.get("CertifyForMarketplace") != null && !jsonObj.get("CertifyForMarketplace").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CertifyForMarketplace"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAlgorithmInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAlgorithmInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAlgorithmInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAlgorithmInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAlgorithmInput>() {
           @Override
           public void write(JsonWriter out, CreateAlgorithmInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAlgorithmInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAlgorithmInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAlgorithmInput
   * @throws IOException if the JSON string is invalid with respect to CreateAlgorithmInput
   */
  public static CreateAlgorithmInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAlgorithmInput.class);
  }

  /**
   * Convert an instance of CreateAlgorithmInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

