/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The collection of components that defines the time-series.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesConfig {
  public static final String SERIALIZED_NAME_TARGET_ATTRIBUTE_NAME = "TargetAttributeName";
  @SerializedName(SERIALIZED_NAME_TARGET_ATTRIBUTE_NAME)
  private String targetAttributeName;

  public static final String SERIALIZED_NAME_TIMESTAMP_ATTRIBUTE_NAME = "TimestampAttributeName";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_ATTRIBUTE_NAME)
  private String timestampAttributeName;

  public static final String SERIALIZED_NAME_ITEM_IDENTIFIER_ATTRIBUTE_NAME = "ItemIdentifierAttributeName";
  @SerializedName(SERIALIZED_NAME_ITEM_IDENTIFIER_ATTRIBUTE_NAME)
  private String itemIdentifierAttributeName;

  public static final String SERIALIZED_NAME_GROUPING_ATTRIBUTE_NAMES = "GroupingAttributeNames";
  @SerializedName(SERIALIZED_NAME_GROUPING_ATTRIBUTE_NAMES)
  private List groupingAttributeNames;

  public TimeSeriesConfig() {
  }

  public TimeSeriesConfig targetAttributeName(String targetAttributeName) {
    this.targetAttributeName = targetAttributeName;
    return this;
  }

  /**
   * Get targetAttributeName
   * @return targetAttributeName
   */
  @javax.annotation.Nonnull
  public String getTargetAttributeName() {
    return targetAttributeName;
  }

  public void setTargetAttributeName(String targetAttributeName) {
    this.targetAttributeName = targetAttributeName;
  }


  public TimeSeriesConfig timestampAttributeName(String timestampAttributeName) {
    this.timestampAttributeName = timestampAttributeName;
    return this;
  }

  /**
   * Get timestampAttributeName
   * @return timestampAttributeName
   */
  @javax.annotation.Nonnull
  public String getTimestampAttributeName() {
    return timestampAttributeName;
  }

  public void setTimestampAttributeName(String timestampAttributeName) {
    this.timestampAttributeName = timestampAttributeName;
  }


  public TimeSeriesConfig itemIdentifierAttributeName(String itemIdentifierAttributeName) {
    this.itemIdentifierAttributeName = itemIdentifierAttributeName;
    return this;
  }

  /**
   * Get itemIdentifierAttributeName
   * @return itemIdentifierAttributeName
   */
  @javax.annotation.Nonnull
  public String getItemIdentifierAttributeName() {
    return itemIdentifierAttributeName;
  }

  public void setItemIdentifierAttributeName(String itemIdentifierAttributeName) {
    this.itemIdentifierAttributeName = itemIdentifierAttributeName;
  }


  public TimeSeriesConfig groupingAttributeNames(List groupingAttributeNames) {
    this.groupingAttributeNames = groupingAttributeNames;
    return this;
  }

  /**
   * Get groupingAttributeNames
   * @return groupingAttributeNames
   */
  @javax.annotation.Nullable
  public List getGroupingAttributeNames() {
    return groupingAttributeNames;
  }

  public void setGroupingAttributeNames(List groupingAttributeNames) {
    this.groupingAttributeNames = groupingAttributeNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesConfig timeSeriesConfig = (TimeSeriesConfig) o;
    return Objects.equals(this.targetAttributeName, timeSeriesConfig.targetAttributeName) &&
        Objects.equals(this.timestampAttributeName, timeSeriesConfig.timestampAttributeName) &&
        Objects.equals(this.itemIdentifierAttributeName, timeSeriesConfig.itemIdentifierAttributeName) &&
        Objects.equals(this.groupingAttributeNames, timeSeriesConfig.groupingAttributeNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetAttributeName, timestampAttributeName, itemIdentifierAttributeName, groupingAttributeNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesConfig {\n");
    sb.append("    targetAttributeName: ").append(toIndentedString(targetAttributeName)).append("\n");
    sb.append("    timestampAttributeName: ").append(toIndentedString(timestampAttributeName)).append("\n");
    sb.append("    itemIdentifierAttributeName: ").append(toIndentedString(itemIdentifierAttributeName)).append("\n");
    sb.append("    groupingAttributeNames: ").append(toIndentedString(groupingAttributeNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TargetAttributeName");
    openapiFields.add("TimestampAttributeName");
    openapiFields.add("ItemIdentifierAttributeName");
    openapiFields.add("GroupingAttributeNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TargetAttributeName");
    openapiRequiredFields.add("TimestampAttributeName");
    openapiRequiredFields.add("ItemIdentifierAttributeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesConfig is not found in the empty JSON string", TimeSeriesConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeSeriesConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TargetAttributeName`
      String.validateJsonElement(jsonObj.get("TargetAttributeName"));
      // validate the required field `TimestampAttributeName`
      String.validateJsonElement(jsonObj.get("TimestampAttributeName"));
      // validate the required field `ItemIdentifierAttributeName`
      String.validateJsonElement(jsonObj.get("ItemIdentifierAttributeName"));
      // validate the optional field `GroupingAttributeNames`
      if (jsonObj.get("GroupingAttributeNames") != null && !jsonObj.get("GroupingAttributeNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GroupingAttributeNames"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesConfig>() {
           @Override
           public void write(JsonWriter out, TimeSeriesConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesConfig
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesConfig
   */
  public static TimeSeriesConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesConfig.class);
  }

  /**
   * Convert an instance of TimeSeriesConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

