/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RedshiftResultCompressionType;
import org.openapitools.client.model.RedshiftResultFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for Redshift Dataset Definition input.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RedshiftDatasetDefinition {
  public static final String SERIALIZED_NAME_CLUSTER_ID = "ClusterId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private String clusterId;

  public static final String SERIALIZED_NAME_DATABASE = "Database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_DB_USER = "DbUser";
  @SerializedName(SERIALIZED_NAME_DB_USER)
  private String dbUser;

  public static final String SERIALIZED_NAME_QUERY_STRING = "QueryString";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING)
  private String queryString;

  public static final String SERIALIZED_NAME_CLUSTER_ROLE_ARN = "ClusterRoleArn";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ROLE_ARN)
  private String clusterRoleArn;

  public static final String SERIALIZED_NAME_OUTPUT_S3_URI = "OutputS3Uri";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_URI)
  private String outputS3Uri;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "OutputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private RedshiftResultFormat outputFormat;

  public static final String SERIALIZED_NAME_OUTPUT_COMPRESSION = "OutputCompression";
  @SerializedName(SERIALIZED_NAME_OUTPUT_COMPRESSION)
  private RedshiftResultCompressionType outputCompression;

  public RedshiftDatasetDefinition() {
  }

  public RedshiftDatasetDefinition clusterId(String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  /**
   * The Redshift cluster Identifier.
   * @return clusterId
   */
  @javax.annotation.Nonnull
  public String getClusterId() {
    return clusterId;
  }

  public void setClusterId(String clusterId) {
    this.clusterId = clusterId;
  }


  public RedshiftDatasetDefinition database(String database) {
    this.database = database;
    return this;
  }

  /**
   * The name of the Redshift database used in Redshift query execution.
   * @return database
   */
  @javax.annotation.Nonnull
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public RedshiftDatasetDefinition dbUser(String dbUser) {
    this.dbUser = dbUser;
    return this;
  }

  /**
   * The database user name used in Redshift query execution.
   * @return dbUser
   */
  @javax.annotation.Nonnull
  public String getDbUser() {
    return dbUser;
  }

  public void setDbUser(String dbUser) {
    this.dbUser = dbUser;
  }


  public RedshiftDatasetDefinition queryString(String queryString) {
    this.queryString = queryString;
    return this;
  }

  /**
   * The SQL query statements to be executed.
   * @return queryString
   */
  @javax.annotation.Nonnull
  public String getQueryString() {
    return queryString;
  }

  public void setQueryString(String queryString) {
    this.queryString = queryString;
  }


  public RedshiftDatasetDefinition clusterRoleArn(String clusterRoleArn) {
    this.clusterRoleArn = clusterRoleArn;
    return this;
  }

  /**
   * Get clusterRoleArn
   * @return clusterRoleArn
   */
  @javax.annotation.Nonnull
  public String getClusterRoleArn() {
    return clusterRoleArn;
  }

  public void setClusterRoleArn(String clusterRoleArn) {
    this.clusterRoleArn = clusterRoleArn;
  }


  public RedshiftDatasetDefinition outputS3Uri(String outputS3Uri) {
    this.outputS3Uri = outputS3Uri;
    return this;
  }

  /**
   * Get outputS3Uri
   * @return outputS3Uri
   */
  @javax.annotation.Nonnull
  public String getOutputS3Uri() {
    return outputS3Uri;
  }

  public void setOutputS3Uri(String outputS3Uri) {
    this.outputS3Uri = outputS3Uri;
  }


  public RedshiftDatasetDefinition kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public RedshiftDatasetDefinition outputFormat(RedshiftResultFormat outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * @return outputFormat
   */
  @javax.annotation.Nonnull
  public RedshiftResultFormat getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(RedshiftResultFormat outputFormat) {
    this.outputFormat = outputFormat;
  }


  public RedshiftDatasetDefinition outputCompression(RedshiftResultCompressionType outputCompression) {
    this.outputCompression = outputCompression;
    return this;
  }

  /**
   * Get outputCompression
   * @return outputCompression
   */
  @javax.annotation.Nullable
  public RedshiftResultCompressionType getOutputCompression() {
    return outputCompression;
  }

  public void setOutputCompression(RedshiftResultCompressionType outputCompression) {
    this.outputCompression = outputCompression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedshiftDatasetDefinition redshiftDatasetDefinition = (RedshiftDatasetDefinition) o;
    return Objects.equals(this.clusterId, redshiftDatasetDefinition.clusterId) &&
        Objects.equals(this.database, redshiftDatasetDefinition.database) &&
        Objects.equals(this.dbUser, redshiftDatasetDefinition.dbUser) &&
        Objects.equals(this.queryString, redshiftDatasetDefinition.queryString) &&
        Objects.equals(this.clusterRoleArn, redshiftDatasetDefinition.clusterRoleArn) &&
        Objects.equals(this.outputS3Uri, redshiftDatasetDefinition.outputS3Uri) &&
        Objects.equals(this.kmsKeyId, redshiftDatasetDefinition.kmsKeyId) &&
        Objects.equals(this.outputFormat, redshiftDatasetDefinition.outputFormat) &&
        Objects.equals(this.outputCompression, redshiftDatasetDefinition.outputCompression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterId, database, dbUser, queryString, clusterRoleArn, outputS3Uri, kmsKeyId, outputFormat, outputCompression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedshiftDatasetDefinition {\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    dbUser: ").append(toIndentedString(dbUser)).append("\n");
    sb.append("    queryString: ").append(toIndentedString(queryString)).append("\n");
    sb.append("    clusterRoleArn: ").append(toIndentedString(clusterRoleArn)).append("\n");
    sb.append("    outputS3Uri: ").append(toIndentedString(outputS3Uri)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    outputCompression: ").append(toIndentedString(outputCompression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClusterId");
    openapiFields.add("Database");
    openapiFields.add("DbUser");
    openapiFields.add("QueryString");
    openapiFields.add("ClusterRoleArn");
    openapiFields.add("OutputS3Uri");
    openapiFields.add("KmsKeyId");
    openapiFields.add("OutputFormat");
    openapiFields.add("OutputCompression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClusterId");
    openapiRequiredFields.add("Database");
    openapiRequiredFields.add("DbUser");
    openapiRequiredFields.add("QueryString");
    openapiRequiredFields.add("ClusterRoleArn");
    openapiRequiredFields.add("OutputS3Uri");
    openapiRequiredFields.add("OutputFormat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RedshiftDatasetDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedshiftDatasetDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedshiftDatasetDefinition is not found in the empty JSON string", RedshiftDatasetDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedshiftDatasetDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedshiftDatasetDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RedshiftDatasetDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ClusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterId").toString()));
      }
      if (!jsonObj.get("Database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Database").toString()));
      }
      if (!jsonObj.get("DbUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DbUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DbUser").toString()));
      }
      if (!jsonObj.get("QueryString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QueryString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QueryString").toString()));
      }
      // validate the required field `ClusterRoleArn`
      String.validateJsonElement(jsonObj.get("ClusterRoleArn"));
      // validate the required field `OutputS3Uri`
      String.validateJsonElement(jsonObj.get("OutputS3Uri"));
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the required field `OutputFormat`
      RedshiftResultFormat.validateJsonElement(jsonObj.get("OutputFormat"));
      // validate the optional field `OutputCompression`
      if (jsonObj.get("OutputCompression") != null && !jsonObj.get("OutputCompression").isJsonNull()) {
        RedshiftResultCompressionType.validateJsonElement(jsonObj.get("OutputCompression"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedshiftDatasetDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedshiftDatasetDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedshiftDatasetDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedshiftDatasetDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<RedshiftDatasetDefinition>() {
           @Override
           public void write(JsonWriter out, RedshiftDatasetDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedshiftDatasetDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RedshiftDatasetDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RedshiftDatasetDefinition
   * @throws IOException if the JSON string is invalid with respect to RedshiftDatasetDefinition
   */
  public static RedshiftDatasetDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedshiftDatasetDefinition.class);
  }

  /**
   * Convert an instance of RedshiftDatasetDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

