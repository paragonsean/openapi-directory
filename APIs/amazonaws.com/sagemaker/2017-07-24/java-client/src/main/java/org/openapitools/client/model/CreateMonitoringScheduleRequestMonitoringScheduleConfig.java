/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MonitoringScheduleConfigMonitoringJobDefinition;
import org.openapitools.client.model.MonitoringScheduleConfigScheduleConfig;
import org.openapitools.client.model.MonitoringType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMonitoringScheduleRequestMonitoringScheduleConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMonitoringScheduleRequestMonitoringScheduleConfig {
  public static final String SERIALIZED_NAME_SCHEDULE_CONFIG = "ScheduleConfig";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_CONFIG)
  private MonitoringScheduleConfigScheduleConfig scheduleConfig;

  public static final String SERIALIZED_NAME_MONITORING_JOB_DEFINITION = "MonitoringJobDefinition";
  @SerializedName(SERIALIZED_NAME_MONITORING_JOB_DEFINITION)
  private MonitoringScheduleConfigMonitoringJobDefinition monitoringJobDefinition;

  public static final String SERIALIZED_NAME_MONITORING_JOB_DEFINITION_NAME = "MonitoringJobDefinitionName";
  @SerializedName(SERIALIZED_NAME_MONITORING_JOB_DEFINITION_NAME)
  private String monitoringJobDefinitionName;

  public static final String SERIALIZED_NAME_MONITORING_TYPE = "MonitoringType";
  @SerializedName(SERIALIZED_NAME_MONITORING_TYPE)
  private MonitoringType monitoringType;

  public CreateMonitoringScheduleRequestMonitoringScheduleConfig() {
  }

  public CreateMonitoringScheduleRequestMonitoringScheduleConfig scheduleConfig(MonitoringScheduleConfigScheduleConfig scheduleConfig) {
    this.scheduleConfig = scheduleConfig;
    return this;
  }

  /**
   * Get scheduleConfig
   * @return scheduleConfig
   */
  @javax.annotation.Nullable
  public MonitoringScheduleConfigScheduleConfig getScheduleConfig() {
    return scheduleConfig;
  }

  public void setScheduleConfig(MonitoringScheduleConfigScheduleConfig scheduleConfig) {
    this.scheduleConfig = scheduleConfig;
  }


  public CreateMonitoringScheduleRequestMonitoringScheduleConfig monitoringJobDefinition(MonitoringScheduleConfigMonitoringJobDefinition monitoringJobDefinition) {
    this.monitoringJobDefinition = monitoringJobDefinition;
    return this;
  }

  /**
   * Get monitoringJobDefinition
   * @return monitoringJobDefinition
   */
  @javax.annotation.Nullable
  public MonitoringScheduleConfigMonitoringJobDefinition getMonitoringJobDefinition() {
    return monitoringJobDefinition;
  }

  public void setMonitoringJobDefinition(MonitoringScheduleConfigMonitoringJobDefinition monitoringJobDefinition) {
    this.monitoringJobDefinition = monitoringJobDefinition;
  }


  public CreateMonitoringScheduleRequestMonitoringScheduleConfig monitoringJobDefinitionName(String monitoringJobDefinitionName) {
    this.monitoringJobDefinitionName = monitoringJobDefinitionName;
    return this;
  }

  /**
   * Get monitoringJobDefinitionName
   * @return monitoringJobDefinitionName
   */
  @javax.annotation.Nullable
  public String getMonitoringJobDefinitionName() {
    return monitoringJobDefinitionName;
  }

  public void setMonitoringJobDefinitionName(String monitoringJobDefinitionName) {
    this.monitoringJobDefinitionName = monitoringJobDefinitionName;
  }


  public CreateMonitoringScheduleRequestMonitoringScheduleConfig monitoringType(MonitoringType monitoringType) {
    this.monitoringType = monitoringType;
    return this;
  }

  /**
   * Get monitoringType
   * @return monitoringType
   */
  @javax.annotation.Nullable
  public MonitoringType getMonitoringType() {
    return monitoringType;
  }

  public void setMonitoringType(MonitoringType monitoringType) {
    this.monitoringType = monitoringType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMonitoringScheduleRequestMonitoringScheduleConfig createMonitoringScheduleRequestMonitoringScheduleConfig = (CreateMonitoringScheduleRequestMonitoringScheduleConfig) o;
    return Objects.equals(this.scheduleConfig, createMonitoringScheduleRequestMonitoringScheduleConfig.scheduleConfig) &&
        Objects.equals(this.monitoringJobDefinition, createMonitoringScheduleRequestMonitoringScheduleConfig.monitoringJobDefinition) &&
        Objects.equals(this.monitoringJobDefinitionName, createMonitoringScheduleRequestMonitoringScheduleConfig.monitoringJobDefinitionName) &&
        Objects.equals(this.monitoringType, createMonitoringScheduleRequestMonitoringScheduleConfig.monitoringType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scheduleConfig, monitoringJobDefinition, monitoringJobDefinitionName, monitoringType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMonitoringScheduleRequestMonitoringScheduleConfig {\n");
    sb.append("    scheduleConfig: ").append(toIndentedString(scheduleConfig)).append("\n");
    sb.append("    monitoringJobDefinition: ").append(toIndentedString(monitoringJobDefinition)).append("\n");
    sb.append("    monitoringJobDefinitionName: ").append(toIndentedString(monitoringJobDefinitionName)).append("\n");
    sb.append("    monitoringType: ").append(toIndentedString(monitoringType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ScheduleConfig");
    openapiFields.add("MonitoringJobDefinition");
    openapiFields.add("MonitoringJobDefinitionName");
    openapiFields.add("MonitoringType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMonitoringScheduleRequestMonitoringScheduleConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMonitoringScheduleRequestMonitoringScheduleConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMonitoringScheduleRequestMonitoringScheduleConfig is not found in the empty JSON string", CreateMonitoringScheduleRequestMonitoringScheduleConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMonitoringScheduleRequestMonitoringScheduleConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMonitoringScheduleRequestMonitoringScheduleConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ScheduleConfig`
      if (jsonObj.get("ScheduleConfig") != null && !jsonObj.get("ScheduleConfig").isJsonNull()) {
        MonitoringScheduleConfigScheduleConfig.validateJsonElement(jsonObj.get("ScheduleConfig"));
      }
      // validate the optional field `MonitoringJobDefinition`
      if (jsonObj.get("MonitoringJobDefinition") != null && !jsonObj.get("MonitoringJobDefinition").isJsonNull()) {
        MonitoringScheduleConfigMonitoringJobDefinition.validateJsonElement(jsonObj.get("MonitoringJobDefinition"));
      }
      // validate the optional field `MonitoringJobDefinitionName`
      if (jsonObj.get("MonitoringJobDefinitionName") != null && !jsonObj.get("MonitoringJobDefinitionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MonitoringJobDefinitionName"));
      }
      // validate the optional field `MonitoringType`
      if (jsonObj.get("MonitoringType") != null && !jsonObj.get("MonitoringType").isJsonNull()) {
        MonitoringType.validateJsonElement(jsonObj.get("MonitoringType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMonitoringScheduleRequestMonitoringScheduleConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMonitoringScheduleRequestMonitoringScheduleConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMonitoringScheduleRequestMonitoringScheduleConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMonitoringScheduleRequestMonitoringScheduleConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMonitoringScheduleRequestMonitoringScheduleConfig>() {
           @Override
           public void write(JsonWriter out, CreateMonitoringScheduleRequestMonitoringScheduleConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMonitoringScheduleRequestMonitoringScheduleConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMonitoringScheduleRequestMonitoringScheduleConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMonitoringScheduleRequestMonitoringScheduleConfig
   * @throws IOException if the JSON string is invalid with respect to CreateMonitoringScheduleRequestMonitoringScheduleConfig
   */
  public static CreateMonitoringScheduleRequestMonitoringScheduleConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMonitoringScheduleRequestMonitoringScheduleConfig.class);
  }

  /**
   * Convert an instance of CreateMonitoringScheduleRequestMonitoringScheduleConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

