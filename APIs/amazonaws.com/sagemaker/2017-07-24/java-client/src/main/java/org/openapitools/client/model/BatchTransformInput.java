/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BatchTransformInputDatasetFormat;
import org.openapitools.client.model.ProcessingS3DataDistributionType;
import org.openapitools.client.model.ProcessingS3InputMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input object for the batch transform job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchTransformInput {
  public static final String SERIALIZED_NAME_DATA_CAPTURED_DESTINATION_S3_URI = "DataCapturedDestinationS3Uri";
  @SerializedName(SERIALIZED_NAME_DATA_CAPTURED_DESTINATION_S3_URI)
  private String dataCapturedDestinationS3Uri;

  public static final String SERIALIZED_NAME_DATASET_FORMAT = "DatasetFormat";
  @SerializedName(SERIALIZED_NAME_DATASET_FORMAT)
  private BatchTransformInputDatasetFormat datasetFormat;

  public static final String SERIALIZED_NAME_LOCAL_PATH = "LocalPath";
  @SerializedName(SERIALIZED_NAME_LOCAL_PATH)
  private String localPath;

  public static final String SERIALIZED_NAME_S3_INPUT_MODE = "S3InputMode";
  @SerializedName(SERIALIZED_NAME_S3_INPUT_MODE)
  private ProcessingS3InputMode s3InputMode;

  public static final String SERIALIZED_NAME_S3_DATA_DISTRIBUTION_TYPE = "S3DataDistributionType";
  @SerializedName(SERIALIZED_NAME_S3_DATA_DISTRIBUTION_TYPE)
  private ProcessingS3DataDistributionType s3DataDistributionType;

  public static final String SERIALIZED_NAME_FEATURES_ATTRIBUTE = "FeaturesAttribute";
  @SerializedName(SERIALIZED_NAME_FEATURES_ATTRIBUTE)
  private String featuresAttribute;

  public static final String SERIALIZED_NAME_INFERENCE_ATTRIBUTE = "InferenceAttribute";
  @SerializedName(SERIALIZED_NAME_INFERENCE_ATTRIBUTE)
  private String inferenceAttribute;

  public static final String SERIALIZED_NAME_PROBABILITY_ATTRIBUTE = "ProbabilityAttribute";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_ATTRIBUTE)
  private String probabilityAttribute;

  public static final String SERIALIZED_NAME_PROBABILITY_THRESHOLD_ATTRIBUTE = "ProbabilityThresholdAttribute";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_THRESHOLD_ATTRIBUTE)
  private Double probabilityThresholdAttribute;

  public static final String SERIALIZED_NAME_START_TIME_OFFSET = "StartTimeOffset";
  @SerializedName(SERIALIZED_NAME_START_TIME_OFFSET)
  private String startTimeOffset;

  public static final String SERIALIZED_NAME_END_TIME_OFFSET = "EndTimeOffset";
  @SerializedName(SERIALIZED_NAME_END_TIME_OFFSET)
  private String endTimeOffset;

  public BatchTransformInput() {
  }

  public BatchTransformInput dataCapturedDestinationS3Uri(String dataCapturedDestinationS3Uri) {
    this.dataCapturedDestinationS3Uri = dataCapturedDestinationS3Uri;
    return this;
  }

  /**
   * Get dataCapturedDestinationS3Uri
   * @return dataCapturedDestinationS3Uri
   */
  @javax.annotation.Nonnull
  public String getDataCapturedDestinationS3Uri() {
    return dataCapturedDestinationS3Uri;
  }

  public void setDataCapturedDestinationS3Uri(String dataCapturedDestinationS3Uri) {
    this.dataCapturedDestinationS3Uri = dataCapturedDestinationS3Uri;
  }


  public BatchTransformInput datasetFormat(BatchTransformInputDatasetFormat datasetFormat) {
    this.datasetFormat = datasetFormat;
    return this;
  }

  /**
   * Get datasetFormat
   * @return datasetFormat
   */
  @javax.annotation.Nonnull
  public BatchTransformInputDatasetFormat getDatasetFormat() {
    return datasetFormat;
  }

  public void setDatasetFormat(BatchTransformInputDatasetFormat datasetFormat) {
    this.datasetFormat = datasetFormat;
  }


  public BatchTransformInput localPath(String localPath) {
    this.localPath = localPath;
    return this;
  }

  /**
   * Get localPath
   * @return localPath
   */
  @javax.annotation.Nonnull
  public String getLocalPath() {
    return localPath;
  }

  public void setLocalPath(String localPath) {
    this.localPath = localPath;
  }


  public BatchTransformInput s3InputMode(ProcessingS3InputMode s3InputMode) {
    this.s3InputMode = s3InputMode;
    return this;
  }

  /**
   * Get s3InputMode
   * @return s3InputMode
   */
  @javax.annotation.Nullable
  public ProcessingS3InputMode getS3InputMode() {
    return s3InputMode;
  }

  public void setS3InputMode(ProcessingS3InputMode s3InputMode) {
    this.s3InputMode = s3InputMode;
  }


  public BatchTransformInput s3DataDistributionType(ProcessingS3DataDistributionType s3DataDistributionType) {
    this.s3DataDistributionType = s3DataDistributionType;
    return this;
  }

  /**
   * Get s3DataDistributionType
   * @return s3DataDistributionType
   */
  @javax.annotation.Nullable
  public ProcessingS3DataDistributionType getS3DataDistributionType() {
    return s3DataDistributionType;
  }

  public void setS3DataDistributionType(ProcessingS3DataDistributionType s3DataDistributionType) {
    this.s3DataDistributionType = s3DataDistributionType;
  }


  public BatchTransformInput featuresAttribute(String featuresAttribute) {
    this.featuresAttribute = featuresAttribute;
    return this;
  }

  /**
   * Get featuresAttribute
   * @return featuresAttribute
   */
  @javax.annotation.Nullable
  public String getFeaturesAttribute() {
    return featuresAttribute;
  }

  public void setFeaturesAttribute(String featuresAttribute) {
    this.featuresAttribute = featuresAttribute;
  }


  public BatchTransformInput inferenceAttribute(String inferenceAttribute) {
    this.inferenceAttribute = inferenceAttribute;
    return this;
  }

  /**
   * Get inferenceAttribute
   * @return inferenceAttribute
   */
  @javax.annotation.Nullable
  public String getInferenceAttribute() {
    return inferenceAttribute;
  }

  public void setInferenceAttribute(String inferenceAttribute) {
    this.inferenceAttribute = inferenceAttribute;
  }


  public BatchTransformInput probabilityAttribute(String probabilityAttribute) {
    this.probabilityAttribute = probabilityAttribute;
    return this;
  }

  /**
   * Get probabilityAttribute
   * @return probabilityAttribute
   */
  @javax.annotation.Nullable
  public String getProbabilityAttribute() {
    return probabilityAttribute;
  }

  public void setProbabilityAttribute(String probabilityAttribute) {
    this.probabilityAttribute = probabilityAttribute;
  }


  public BatchTransformInput probabilityThresholdAttribute(Double probabilityThresholdAttribute) {
    this.probabilityThresholdAttribute = probabilityThresholdAttribute;
    return this;
  }

  /**
   * Get probabilityThresholdAttribute
   * @return probabilityThresholdAttribute
   */
  @javax.annotation.Nullable
  public Double getProbabilityThresholdAttribute() {
    return probabilityThresholdAttribute;
  }

  public void setProbabilityThresholdAttribute(Double probabilityThresholdAttribute) {
    this.probabilityThresholdAttribute = probabilityThresholdAttribute;
  }


  public BatchTransformInput startTimeOffset(String startTimeOffset) {
    this.startTimeOffset = startTimeOffset;
    return this;
  }

  /**
   * Get startTimeOffset
   * @return startTimeOffset
   */
  @javax.annotation.Nullable
  public String getStartTimeOffset() {
    return startTimeOffset;
  }

  public void setStartTimeOffset(String startTimeOffset) {
    this.startTimeOffset = startTimeOffset;
  }


  public BatchTransformInput endTimeOffset(String endTimeOffset) {
    this.endTimeOffset = endTimeOffset;
    return this;
  }

  /**
   * Get endTimeOffset
   * @return endTimeOffset
   */
  @javax.annotation.Nullable
  public String getEndTimeOffset() {
    return endTimeOffset;
  }

  public void setEndTimeOffset(String endTimeOffset) {
    this.endTimeOffset = endTimeOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchTransformInput batchTransformInput = (BatchTransformInput) o;
    return Objects.equals(this.dataCapturedDestinationS3Uri, batchTransformInput.dataCapturedDestinationS3Uri) &&
        Objects.equals(this.datasetFormat, batchTransformInput.datasetFormat) &&
        Objects.equals(this.localPath, batchTransformInput.localPath) &&
        Objects.equals(this.s3InputMode, batchTransformInput.s3InputMode) &&
        Objects.equals(this.s3DataDistributionType, batchTransformInput.s3DataDistributionType) &&
        Objects.equals(this.featuresAttribute, batchTransformInput.featuresAttribute) &&
        Objects.equals(this.inferenceAttribute, batchTransformInput.inferenceAttribute) &&
        Objects.equals(this.probabilityAttribute, batchTransformInput.probabilityAttribute) &&
        Objects.equals(this.probabilityThresholdAttribute, batchTransformInput.probabilityThresholdAttribute) &&
        Objects.equals(this.startTimeOffset, batchTransformInput.startTimeOffset) &&
        Objects.equals(this.endTimeOffset, batchTransformInput.endTimeOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataCapturedDestinationS3Uri, datasetFormat, localPath, s3InputMode, s3DataDistributionType, featuresAttribute, inferenceAttribute, probabilityAttribute, probabilityThresholdAttribute, startTimeOffset, endTimeOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchTransformInput {\n");
    sb.append("    dataCapturedDestinationS3Uri: ").append(toIndentedString(dataCapturedDestinationS3Uri)).append("\n");
    sb.append("    datasetFormat: ").append(toIndentedString(datasetFormat)).append("\n");
    sb.append("    localPath: ").append(toIndentedString(localPath)).append("\n");
    sb.append("    s3InputMode: ").append(toIndentedString(s3InputMode)).append("\n");
    sb.append("    s3DataDistributionType: ").append(toIndentedString(s3DataDistributionType)).append("\n");
    sb.append("    featuresAttribute: ").append(toIndentedString(featuresAttribute)).append("\n");
    sb.append("    inferenceAttribute: ").append(toIndentedString(inferenceAttribute)).append("\n");
    sb.append("    probabilityAttribute: ").append(toIndentedString(probabilityAttribute)).append("\n");
    sb.append("    probabilityThresholdAttribute: ").append(toIndentedString(probabilityThresholdAttribute)).append("\n");
    sb.append("    startTimeOffset: ").append(toIndentedString(startTimeOffset)).append("\n");
    sb.append("    endTimeOffset: ").append(toIndentedString(endTimeOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataCapturedDestinationS3Uri");
    openapiFields.add("DatasetFormat");
    openapiFields.add("LocalPath");
    openapiFields.add("S3InputMode");
    openapiFields.add("S3DataDistributionType");
    openapiFields.add("FeaturesAttribute");
    openapiFields.add("InferenceAttribute");
    openapiFields.add("ProbabilityAttribute");
    openapiFields.add("ProbabilityThresholdAttribute");
    openapiFields.add("StartTimeOffset");
    openapiFields.add("EndTimeOffset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DataCapturedDestinationS3Uri");
    openapiRequiredFields.add("DatasetFormat");
    openapiRequiredFields.add("LocalPath");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchTransformInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchTransformInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchTransformInput is not found in the empty JSON string", BatchTransformInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchTransformInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchTransformInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchTransformInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DataCapturedDestinationS3Uri`
      String.validateJsonElement(jsonObj.get("DataCapturedDestinationS3Uri"));
      // validate the required field `DatasetFormat`
      BatchTransformInputDatasetFormat.validateJsonElement(jsonObj.get("DatasetFormat"));
      // validate the required field `LocalPath`
      String.validateJsonElement(jsonObj.get("LocalPath"));
      // validate the optional field `S3InputMode`
      if (jsonObj.get("S3InputMode") != null && !jsonObj.get("S3InputMode").isJsonNull()) {
        ProcessingS3InputMode.validateJsonElement(jsonObj.get("S3InputMode"));
      }
      // validate the optional field `S3DataDistributionType`
      if (jsonObj.get("S3DataDistributionType") != null && !jsonObj.get("S3DataDistributionType").isJsonNull()) {
        ProcessingS3DataDistributionType.validateJsonElement(jsonObj.get("S3DataDistributionType"));
      }
      // validate the optional field `FeaturesAttribute`
      if (jsonObj.get("FeaturesAttribute") != null && !jsonObj.get("FeaturesAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeaturesAttribute"));
      }
      // validate the optional field `InferenceAttribute`
      if (jsonObj.get("InferenceAttribute") != null && !jsonObj.get("InferenceAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InferenceAttribute"));
      }
      // validate the optional field `ProbabilityAttribute`
      if (jsonObj.get("ProbabilityAttribute") != null && !jsonObj.get("ProbabilityAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProbabilityAttribute"));
      }
      // validate the optional field `ProbabilityThresholdAttribute`
      if (jsonObj.get("ProbabilityThresholdAttribute") != null && !jsonObj.get("ProbabilityThresholdAttribute").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ProbabilityThresholdAttribute"));
      }
      // validate the optional field `StartTimeOffset`
      if (jsonObj.get("StartTimeOffset") != null && !jsonObj.get("StartTimeOffset").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartTimeOffset"));
      }
      // validate the optional field `EndTimeOffset`
      if (jsonObj.get("EndTimeOffset") != null && !jsonObj.get("EndTimeOffset").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndTimeOffset"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchTransformInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchTransformInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchTransformInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchTransformInput.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchTransformInput>() {
           @Override
           public void write(JsonWriter out, BatchTransformInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchTransformInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchTransformInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchTransformInput
   * @throws IOException if the JSON string is invalid with respect to BatchTransformInput
   */
  public static BatchTransformInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchTransformInput.class);
  }

  /**
   * Convert an instance of BatchTransformInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

