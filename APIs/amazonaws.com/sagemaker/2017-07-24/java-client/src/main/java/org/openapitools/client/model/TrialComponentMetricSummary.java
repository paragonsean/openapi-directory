/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A summary of the metrics of a trial component.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrialComponentMetricSummary {
  public static final String SERIALIZED_NAME_METRIC_NAME = "MetricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_SOURCE_ARN = "SourceArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_ARN)
  private String sourceArn;

  public static final String SERIALIZED_NAME_TIME_STAMP = "TimeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private OffsetDateTime timeStamp;

  public static final String SERIALIZED_NAME_MAX = "Max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Double max;

  public static final String SERIALIZED_NAME_MIN = "Min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Double min;

  public static final String SERIALIZED_NAME_LAST = "Last";
  @SerializedName(SERIALIZED_NAME_LAST)
  private Double last;

  public static final String SERIALIZED_NAME_COUNT = "Count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_AVG = "Avg";
  @SerializedName(SERIALIZED_NAME_AVG)
  private Double avg;

  public static final String SERIALIZED_NAME_STD_DEV = "StdDev";
  @SerializedName(SERIALIZED_NAME_STD_DEV)
  private Double stdDev;

  public TrialComponentMetricSummary() {
  }

  public TrialComponentMetricSummary metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public TrialComponentMetricSummary sourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
    return this;
  }

  /**
   * Get sourceArn
   * @return sourceArn
   */
  @javax.annotation.Nullable
  public String getSourceArn() {
    return sourceArn;
  }

  public void setSourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
  }


  public TrialComponentMetricSummary timeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Get timeStamp
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
  }


  public TrialComponentMetricSummary max(Double max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public Double getMax() {
    return max;
  }

  public void setMax(Double max) {
    this.max = max;
  }


  public TrialComponentMetricSummary min(Double min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  public Double getMin() {
    return min;
  }

  public void setMin(Double min) {
    this.min = min;
  }


  public TrialComponentMetricSummary last(Double last) {
    this.last = last;
    return this;
  }

  /**
   * Get last
   * @return last
   */
  @javax.annotation.Nullable
  public Double getLast() {
    return last;
  }

  public void setLast(Double last) {
    this.last = last;
  }


  public TrialComponentMetricSummary count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public TrialComponentMetricSummary avg(Double avg) {
    this.avg = avg;
    return this;
  }

  /**
   * Get avg
   * @return avg
   */
  @javax.annotation.Nullable
  public Double getAvg() {
    return avg;
  }

  public void setAvg(Double avg) {
    this.avg = avg;
  }


  public TrialComponentMetricSummary stdDev(Double stdDev) {
    this.stdDev = stdDev;
    return this;
  }

  /**
   * Get stdDev
   * @return stdDev
   */
  @javax.annotation.Nullable
  public Double getStdDev() {
    return stdDev;
  }

  public void setStdDev(Double stdDev) {
    this.stdDev = stdDev;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrialComponentMetricSummary trialComponentMetricSummary = (TrialComponentMetricSummary) o;
    return Objects.equals(this.metricName, trialComponentMetricSummary.metricName) &&
        Objects.equals(this.sourceArn, trialComponentMetricSummary.sourceArn) &&
        Objects.equals(this.timeStamp, trialComponentMetricSummary.timeStamp) &&
        Objects.equals(this.max, trialComponentMetricSummary.max) &&
        Objects.equals(this.min, trialComponentMetricSummary.min) &&
        Objects.equals(this.last, trialComponentMetricSummary.last) &&
        Objects.equals(this.count, trialComponentMetricSummary.count) &&
        Objects.equals(this.avg, trialComponentMetricSummary.avg) &&
        Objects.equals(this.stdDev, trialComponentMetricSummary.stdDev);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricName, sourceArn, timeStamp, max, min, last, count, avg, stdDev);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrialComponentMetricSummary {\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    sourceArn: ").append(toIndentedString(sourceArn)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    avg: ").append(toIndentedString(avg)).append("\n");
    sb.append("    stdDev: ").append(toIndentedString(stdDev)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricName");
    openapiFields.add("SourceArn");
    openapiFields.add("TimeStamp");
    openapiFields.add("Max");
    openapiFields.add("Min");
    openapiFields.add("Last");
    openapiFields.add("Count");
    openapiFields.add("Avg");
    openapiFields.add("StdDev");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrialComponentMetricSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrialComponentMetricSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrialComponentMetricSummary is not found in the empty JSON string", TrialComponentMetricSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrialComponentMetricSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrialComponentMetricSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MetricName`
      if (jsonObj.get("MetricName") != null && !jsonObj.get("MetricName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetricName"));
      }
      // validate the optional field `SourceArn`
      if (jsonObj.get("SourceArn") != null && !jsonObj.get("SourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceArn"));
      }
      // validate the optional field `TimeStamp`
      if (jsonObj.get("TimeStamp") != null && !jsonObj.get("TimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("TimeStamp"));
      }
      // validate the optional field `Max`
      if (jsonObj.get("Max") != null && !jsonObj.get("Max").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Max"));
      }
      // validate the optional field `Min`
      if (jsonObj.get("Min") != null && !jsonObj.get("Min").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Min"));
      }
      // validate the optional field `Last`
      if (jsonObj.get("Last") != null && !jsonObj.get("Last").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Last"));
      }
      // validate the optional field `Count`
      if (jsonObj.get("Count") != null && !jsonObj.get("Count").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Count"));
      }
      // validate the optional field `Avg`
      if (jsonObj.get("Avg") != null && !jsonObj.get("Avg").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Avg"));
      }
      // validate the optional field `StdDev`
      if (jsonObj.get("StdDev") != null && !jsonObj.get("StdDev").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("StdDev"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrialComponentMetricSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrialComponentMetricSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrialComponentMetricSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrialComponentMetricSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TrialComponentMetricSummary>() {
           @Override
           public void write(JsonWriter out, TrialComponentMetricSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrialComponentMetricSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrialComponentMetricSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrialComponentMetricSummary
   * @throws IOException if the JSON string is invalid with respect to TrialComponentMetricSummary
   */
  public static TrialComponentMetricSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrialComponentMetricSummary.class);
  }

  /**
   * Convert an instance of TrialComponentMetricSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

