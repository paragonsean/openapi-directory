/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the model configuration. Includes the specification name and environment parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelConfiguration {
  public static final String SERIALIZED_NAME_INFERENCE_SPECIFICATION_NAME = "InferenceSpecificationName";
  @SerializedName(SERIALIZED_NAME_INFERENCE_SPECIFICATION_NAME)
  private String inferenceSpecificationName;

  public static final String SERIALIZED_NAME_ENVIRONMENT_PARAMETERS = "EnvironmentParameters";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_PARAMETERS)
  private List environmentParameters;

  public static final String SERIALIZED_NAME_COMPILATION_JOB_NAME = "CompilationJobName";
  @SerializedName(SERIALIZED_NAME_COMPILATION_JOB_NAME)
  private String compilationJobName;

  public ModelConfiguration() {
  }

  public ModelConfiguration inferenceSpecificationName(String inferenceSpecificationName) {
    this.inferenceSpecificationName = inferenceSpecificationName;
    return this;
  }

  /**
   * Get inferenceSpecificationName
   * @return inferenceSpecificationName
   */
  @javax.annotation.Nullable
  public String getInferenceSpecificationName() {
    return inferenceSpecificationName;
  }

  public void setInferenceSpecificationName(String inferenceSpecificationName) {
    this.inferenceSpecificationName = inferenceSpecificationName;
  }


  public ModelConfiguration environmentParameters(List environmentParameters) {
    this.environmentParameters = environmentParameters;
    return this;
  }

  /**
   * Get environmentParameters
   * @return environmentParameters
   */
  @javax.annotation.Nullable
  public List getEnvironmentParameters() {
    return environmentParameters;
  }

  public void setEnvironmentParameters(List environmentParameters) {
    this.environmentParameters = environmentParameters;
  }


  public ModelConfiguration compilationJobName(String compilationJobName) {
    this.compilationJobName = compilationJobName;
    return this;
  }

  /**
   * Get compilationJobName
   * @return compilationJobName
   */
  @javax.annotation.Nullable
  public String getCompilationJobName() {
    return compilationJobName;
  }

  public void setCompilationJobName(String compilationJobName) {
    this.compilationJobName = compilationJobName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelConfiguration modelConfiguration = (ModelConfiguration) o;
    return Objects.equals(this.inferenceSpecificationName, modelConfiguration.inferenceSpecificationName) &&
        Objects.equals(this.environmentParameters, modelConfiguration.environmentParameters) &&
        Objects.equals(this.compilationJobName, modelConfiguration.compilationJobName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inferenceSpecificationName, environmentParameters, compilationJobName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelConfiguration {\n");
    sb.append("    inferenceSpecificationName: ").append(toIndentedString(inferenceSpecificationName)).append("\n");
    sb.append("    environmentParameters: ").append(toIndentedString(environmentParameters)).append("\n");
    sb.append("    compilationJobName: ").append(toIndentedString(compilationJobName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InferenceSpecificationName");
    openapiFields.add("EnvironmentParameters");
    openapiFields.add("CompilationJobName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelConfiguration is not found in the empty JSON string", ModelConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InferenceSpecificationName`
      if (jsonObj.get("InferenceSpecificationName") != null && !jsonObj.get("InferenceSpecificationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InferenceSpecificationName"));
      }
      // validate the optional field `EnvironmentParameters`
      if (jsonObj.get("EnvironmentParameters") != null && !jsonObj.get("EnvironmentParameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EnvironmentParameters"));
      }
      // validate the optional field `CompilationJobName`
      if (jsonObj.get("CompilationJobName") != null && !jsonObj.get("CompilationJobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CompilationJobName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelConfiguration>() {
           @Override
           public void write(JsonWriter out, ModelConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelConfiguration
   * @throws IOException if the JSON string is invalid with respect to ModelConfiguration
   */
  public static ModelConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelConfiguration.class);
  }

  /**
   * Convert an instance of ModelConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

