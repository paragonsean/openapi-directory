/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeLabelingJobResponseLabelCounters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeLabelingJobResponseLabelCounters {
  public static final String SERIALIZED_NAME_TOTAL_LABELED = "TotalLabeled";
  @SerializedName(SERIALIZED_NAME_TOTAL_LABELED)
  private Integer totalLabeled;

  public static final String SERIALIZED_NAME_HUMAN_LABELED = "HumanLabeled";
  @SerializedName(SERIALIZED_NAME_HUMAN_LABELED)
  private Integer humanLabeled;

  public static final String SERIALIZED_NAME_MACHINE_LABELED = "MachineLabeled";
  @SerializedName(SERIALIZED_NAME_MACHINE_LABELED)
  private Integer machineLabeled;

  public static final String SERIALIZED_NAME_FAILED_NON_RETRYABLE_ERROR = "FailedNonRetryableError";
  @SerializedName(SERIALIZED_NAME_FAILED_NON_RETRYABLE_ERROR)
  private Integer failedNonRetryableError;

  public static final String SERIALIZED_NAME_UNLABELED = "Unlabeled";
  @SerializedName(SERIALIZED_NAME_UNLABELED)
  private Integer unlabeled;

  public DescribeLabelingJobResponseLabelCounters() {
  }

  public DescribeLabelingJobResponseLabelCounters totalLabeled(Integer totalLabeled) {
    this.totalLabeled = totalLabeled;
    return this;
  }

  /**
   * Get totalLabeled
   * @return totalLabeled
   */
  @javax.annotation.Nullable
  public Integer getTotalLabeled() {
    return totalLabeled;
  }

  public void setTotalLabeled(Integer totalLabeled) {
    this.totalLabeled = totalLabeled;
  }


  public DescribeLabelingJobResponseLabelCounters humanLabeled(Integer humanLabeled) {
    this.humanLabeled = humanLabeled;
    return this;
  }

  /**
   * Get humanLabeled
   * @return humanLabeled
   */
  @javax.annotation.Nullable
  public Integer getHumanLabeled() {
    return humanLabeled;
  }

  public void setHumanLabeled(Integer humanLabeled) {
    this.humanLabeled = humanLabeled;
  }


  public DescribeLabelingJobResponseLabelCounters machineLabeled(Integer machineLabeled) {
    this.machineLabeled = machineLabeled;
    return this;
  }

  /**
   * Get machineLabeled
   * @return machineLabeled
   */
  @javax.annotation.Nullable
  public Integer getMachineLabeled() {
    return machineLabeled;
  }

  public void setMachineLabeled(Integer machineLabeled) {
    this.machineLabeled = machineLabeled;
  }


  public DescribeLabelingJobResponseLabelCounters failedNonRetryableError(Integer failedNonRetryableError) {
    this.failedNonRetryableError = failedNonRetryableError;
    return this;
  }

  /**
   * Get failedNonRetryableError
   * @return failedNonRetryableError
   */
  @javax.annotation.Nullable
  public Integer getFailedNonRetryableError() {
    return failedNonRetryableError;
  }

  public void setFailedNonRetryableError(Integer failedNonRetryableError) {
    this.failedNonRetryableError = failedNonRetryableError;
  }


  public DescribeLabelingJobResponseLabelCounters unlabeled(Integer unlabeled) {
    this.unlabeled = unlabeled;
    return this;
  }

  /**
   * Get unlabeled
   * @return unlabeled
   */
  @javax.annotation.Nullable
  public Integer getUnlabeled() {
    return unlabeled;
  }

  public void setUnlabeled(Integer unlabeled) {
    this.unlabeled = unlabeled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeLabelingJobResponseLabelCounters describeLabelingJobResponseLabelCounters = (DescribeLabelingJobResponseLabelCounters) o;
    return Objects.equals(this.totalLabeled, describeLabelingJobResponseLabelCounters.totalLabeled) &&
        Objects.equals(this.humanLabeled, describeLabelingJobResponseLabelCounters.humanLabeled) &&
        Objects.equals(this.machineLabeled, describeLabelingJobResponseLabelCounters.machineLabeled) &&
        Objects.equals(this.failedNonRetryableError, describeLabelingJobResponseLabelCounters.failedNonRetryableError) &&
        Objects.equals(this.unlabeled, describeLabelingJobResponseLabelCounters.unlabeled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalLabeled, humanLabeled, machineLabeled, failedNonRetryableError, unlabeled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeLabelingJobResponseLabelCounters {\n");
    sb.append("    totalLabeled: ").append(toIndentedString(totalLabeled)).append("\n");
    sb.append("    humanLabeled: ").append(toIndentedString(humanLabeled)).append("\n");
    sb.append("    machineLabeled: ").append(toIndentedString(machineLabeled)).append("\n");
    sb.append("    failedNonRetryableError: ").append(toIndentedString(failedNonRetryableError)).append("\n");
    sb.append("    unlabeled: ").append(toIndentedString(unlabeled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TotalLabeled");
    openapiFields.add("HumanLabeled");
    openapiFields.add("MachineLabeled");
    openapiFields.add("FailedNonRetryableError");
    openapiFields.add("Unlabeled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeLabelingJobResponseLabelCounters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeLabelingJobResponseLabelCounters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeLabelingJobResponseLabelCounters is not found in the empty JSON string", DescribeLabelingJobResponseLabelCounters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeLabelingJobResponseLabelCounters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeLabelingJobResponseLabelCounters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TotalLabeled`
      if (jsonObj.get("TotalLabeled") != null && !jsonObj.get("TotalLabeled").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalLabeled"));
      }
      // validate the optional field `HumanLabeled`
      if (jsonObj.get("HumanLabeled") != null && !jsonObj.get("HumanLabeled").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HumanLabeled"));
      }
      // validate the optional field `MachineLabeled`
      if (jsonObj.get("MachineLabeled") != null && !jsonObj.get("MachineLabeled").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MachineLabeled"));
      }
      // validate the optional field `FailedNonRetryableError`
      if (jsonObj.get("FailedNonRetryableError") != null && !jsonObj.get("FailedNonRetryableError").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailedNonRetryableError"));
      }
      // validate the optional field `Unlabeled`
      if (jsonObj.get("Unlabeled") != null && !jsonObj.get("Unlabeled").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Unlabeled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeLabelingJobResponseLabelCounters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeLabelingJobResponseLabelCounters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeLabelingJobResponseLabelCounters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeLabelingJobResponseLabelCounters.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeLabelingJobResponseLabelCounters>() {
           @Override
           public void write(JsonWriter out, DescribeLabelingJobResponseLabelCounters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeLabelingJobResponseLabelCounters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeLabelingJobResponseLabelCounters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeLabelingJobResponseLabelCounters
   * @throws IOException if the JSON string is invalid with respect to DescribeLabelingJobResponseLabelCounters
   */
  public static DescribeLabelingJobResponseLabelCounters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeLabelingJobResponseLabelCounters.class);
  }

  /**
   * Convert an instance of DescribeLabelingJobResponseLabelCounters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

