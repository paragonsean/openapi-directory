/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of filters to narrow the set of lineage entities connected to the &lt;code&gt;StartArn&lt;/code&gt;(s) returned by the &lt;code&gt;QueryLineage&lt;/code&gt; API action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryFilters {
  public static final String SERIALIZED_NAME_TYPES = "Types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List types;

  public static final String SERIALIZED_NAME_LINEAGE_TYPES = "LineageTypes";
  @SerializedName(SERIALIZED_NAME_LINEAGE_TYPES)
  private List lineageTypes;

  public static final String SERIALIZED_NAME_CREATED_BEFORE = "CreatedBefore";
  @SerializedName(SERIALIZED_NAME_CREATED_BEFORE)
  private OffsetDateTime createdBefore;

  public static final String SERIALIZED_NAME_CREATED_AFTER = "CreatedAfter";
  @SerializedName(SERIALIZED_NAME_CREATED_AFTER)
  private OffsetDateTime createdAfter;

  public static final String SERIALIZED_NAME_MODIFIED_BEFORE = "ModifiedBefore";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BEFORE)
  private OffsetDateTime modifiedBefore;

  public static final String SERIALIZED_NAME_MODIFIED_AFTER = "ModifiedAfter";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AFTER)
  private OffsetDateTime modifiedAfter;

  public static final String SERIALIZED_NAME_PROPERTIES = "Properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map properties;

  public QueryFilters() {
  }

  public QueryFilters types(List types) {
    this.types = types;
    return this;
  }

  /**
   * Get types
   * @return types
   */
  @javax.annotation.Nullable
  public List getTypes() {
    return types;
  }

  public void setTypes(List types) {
    this.types = types;
  }


  public QueryFilters lineageTypes(List lineageTypes) {
    this.lineageTypes = lineageTypes;
    return this;
  }

  /**
   * Get lineageTypes
   * @return lineageTypes
   */
  @javax.annotation.Nullable
  public List getLineageTypes() {
    return lineageTypes;
  }

  public void setLineageTypes(List lineageTypes) {
    this.lineageTypes = lineageTypes;
  }


  public QueryFilters createdBefore(OffsetDateTime createdBefore) {
    this.createdBefore = createdBefore;
    return this;
  }

  /**
   * Get createdBefore
   * @return createdBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedBefore() {
    return createdBefore;
  }

  public void setCreatedBefore(OffsetDateTime createdBefore) {
    this.createdBefore = createdBefore;
  }


  public QueryFilters createdAfter(OffsetDateTime createdAfter) {
    this.createdAfter = createdAfter;
    return this;
  }

  /**
   * Get createdAfter
   * @return createdAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAfter() {
    return createdAfter;
  }

  public void setCreatedAfter(OffsetDateTime createdAfter) {
    this.createdAfter = createdAfter;
  }


  public QueryFilters modifiedBefore(OffsetDateTime modifiedBefore) {
    this.modifiedBefore = modifiedBefore;
    return this;
  }

  /**
   * Get modifiedBefore
   * @return modifiedBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedBefore() {
    return modifiedBefore;
  }

  public void setModifiedBefore(OffsetDateTime modifiedBefore) {
    this.modifiedBefore = modifiedBefore;
  }


  public QueryFilters modifiedAfter(OffsetDateTime modifiedAfter) {
    this.modifiedAfter = modifiedAfter;
    return this;
  }

  /**
   * Get modifiedAfter
   * @return modifiedAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAfter() {
    return modifiedAfter;
  }

  public void setModifiedAfter(OffsetDateTime modifiedAfter) {
    this.modifiedAfter = modifiedAfter;
  }


  public QueryFilters properties(Map properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Map getProperties() {
    return properties;
  }

  public void setProperties(Map properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryFilters queryFilters = (QueryFilters) o;
    return Objects.equals(this.types, queryFilters.types) &&
        Objects.equals(this.lineageTypes, queryFilters.lineageTypes) &&
        Objects.equals(this.createdBefore, queryFilters.createdBefore) &&
        Objects.equals(this.createdAfter, queryFilters.createdAfter) &&
        Objects.equals(this.modifiedBefore, queryFilters.modifiedBefore) &&
        Objects.equals(this.modifiedAfter, queryFilters.modifiedAfter) &&
        Objects.equals(this.properties, queryFilters.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(types, lineageTypes, createdBefore, createdAfter, modifiedBefore, modifiedAfter, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryFilters {\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    lineageTypes: ").append(toIndentedString(lineageTypes)).append("\n");
    sb.append("    createdBefore: ").append(toIndentedString(createdBefore)).append("\n");
    sb.append("    createdAfter: ").append(toIndentedString(createdAfter)).append("\n");
    sb.append("    modifiedBefore: ").append(toIndentedString(modifiedBefore)).append("\n");
    sb.append("    modifiedAfter: ").append(toIndentedString(modifiedAfter)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Types");
    openapiFields.add("LineageTypes");
    openapiFields.add("CreatedBefore");
    openapiFields.add("CreatedAfter");
    openapiFields.add("ModifiedBefore");
    openapiFields.add("ModifiedAfter");
    openapiFields.add("Properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryFilters is not found in the empty JSON string", QueryFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Types`
      if (jsonObj.get("Types") != null && !jsonObj.get("Types").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Types"));
      }
      // validate the optional field `LineageTypes`
      if (jsonObj.get("LineageTypes") != null && !jsonObj.get("LineageTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LineageTypes"));
      }
      // validate the optional field `CreatedBefore`
      if (jsonObj.get("CreatedBefore") != null && !jsonObj.get("CreatedBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedBefore"));
      }
      // validate the optional field `CreatedAfter`
      if (jsonObj.get("CreatedAfter") != null && !jsonObj.get("CreatedAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAfter"));
      }
      // validate the optional field `ModifiedBefore`
      if (jsonObj.get("ModifiedBefore") != null && !jsonObj.get("ModifiedBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ModifiedBefore"));
      }
      // validate the optional field `ModifiedAfter`
      if (jsonObj.get("ModifiedAfter") != null && !jsonObj.get("ModifiedAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ModifiedAfter"));
      }
      // validate the optional field `Properties`
      if (jsonObj.get("Properties") != null && !jsonObj.get("Properties").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Properties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryFilters>() {
           @Override
           public void write(JsonWriter out, QueryFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryFilters
   * @throws IOException if the JSON string is invalid with respect to QueryFilters
   */
  public static QueryFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryFilters.class);
  }

  /**
   * Convert an instance of QueryFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

