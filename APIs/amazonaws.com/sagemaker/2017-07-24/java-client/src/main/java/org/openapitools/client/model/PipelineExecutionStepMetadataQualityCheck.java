/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PipelineExecutionStepMetadataQualityCheck
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipelineExecutionStepMetadataQualityCheck {
  public static final String SERIALIZED_NAME_CHECK_TYPE = "CheckType";
  @SerializedName(SERIALIZED_NAME_CHECK_TYPE)
  private String checkType;

  public static final String SERIALIZED_NAME_BASELINE_USED_FOR_DRIFT_CHECK_STATISTICS = "BaselineUsedForDriftCheckStatistics";
  @SerializedName(SERIALIZED_NAME_BASELINE_USED_FOR_DRIFT_CHECK_STATISTICS)
  private String baselineUsedForDriftCheckStatistics;

  public static final String SERIALIZED_NAME_BASELINE_USED_FOR_DRIFT_CHECK_CONSTRAINTS = "BaselineUsedForDriftCheckConstraints";
  @SerializedName(SERIALIZED_NAME_BASELINE_USED_FOR_DRIFT_CHECK_CONSTRAINTS)
  private String baselineUsedForDriftCheckConstraints;

  public static final String SERIALIZED_NAME_CALCULATED_BASELINE_STATISTICS = "CalculatedBaselineStatistics";
  @SerializedName(SERIALIZED_NAME_CALCULATED_BASELINE_STATISTICS)
  private String calculatedBaselineStatistics;

  public static final String SERIALIZED_NAME_CALCULATED_BASELINE_CONSTRAINTS = "CalculatedBaselineConstraints";
  @SerializedName(SERIALIZED_NAME_CALCULATED_BASELINE_CONSTRAINTS)
  private String calculatedBaselineConstraints;

  public static final String SERIALIZED_NAME_MODEL_PACKAGE_GROUP_NAME = "ModelPackageGroupName";
  @SerializedName(SERIALIZED_NAME_MODEL_PACKAGE_GROUP_NAME)
  private String modelPackageGroupName;

  public static final String SERIALIZED_NAME_VIOLATION_REPORT = "ViolationReport";
  @SerializedName(SERIALIZED_NAME_VIOLATION_REPORT)
  private String violationReport;

  public static final String SERIALIZED_NAME_CHECK_JOB_ARN = "CheckJobArn";
  @SerializedName(SERIALIZED_NAME_CHECK_JOB_ARN)
  private String checkJobArn;

  public static final String SERIALIZED_NAME_SKIP_CHECK = "SkipCheck";
  @SerializedName(SERIALIZED_NAME_SKIP_CHECK)
  private Boolean skipCheck;

  public static final String SERIALIZED_NAME_REGISTER_NEW_BASELINE = "RegisterNewBaseline";
  @SerializedName(SERIALIZED_NAME_REGISTER_NEW_BASELINE)
  private Boolean registerNewBaseline;

  public PipelineExecutionStepMetadataQualityCheck() {
  }

  public PipelineExecutionStepMetadataQualityCheck checkType(String checkType) {
    this.checkType = checkType;
    return this;
  }

  /**
   * Get checkType
   * @return checkType
   */
  @javax.annotation.Nullable
  public String getCheckType() {
    return checkType;
  }

  public void setCheckType(String checkType) {
    this.checkType = checkType;
  }


  public PipelineExecutionStepMetadataQualityCheck baselineUsedForDriftCheckStatistics(String baselineUsedForDriftCheckStatistics) {
    this.baselineUsedForDriftCheckStatistics = baselineUsedForDriftCheckStatistics;
    return this;
  }

  /**
   * Get baselineUsedForDriftCheckStatistics
   * @return baselineUsedForDriftCheckStatistics
   */
  @javax.annotation.Nullable
  public String getBaselineUsedForDriftCheckStatistics() {
    return baselineUsedForDriftCheckStatistics;
  }

  public void setBaselineUsedForDriftCheckStatistics(String baselineUsedForDriftCheckStatistics) {
    this.baselineUsedForDriftCheckStatistics = baselineUsedForDriftCheckStatistics;
  }


  public PipelineExecutionStepMetadataQualityCheck baselineUsedForDriftCheckConstraints(String baselineUsedForDriftCheckConstraints) {
    this.baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraints;
    return this;
  }

  /**
   * Get baselineUsedForDriftCheckConstraints
   * @return baselineUsedForDriftCheckConstraints
   */
  @javax.annotation.Nullable
  public String getBaselineUsedForDriftCheckConstraints() {
    return baselineUsedForDriftCheckConstraints;
  }

  public void setBaselineUsedForDriftCheckConstraints(String baselineUsedForDriftCheckConstraints) {
    this.baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraints;
  }


  public PipelineExecutionStepMetadataQualityCheck calculatedBaselineStatistics(String calculatedBaselineStatistics) {
    this.calculatedBaselineStatistics = calculatedBaselineStatistics;
    return this;
  }

  /**
   * Get calculatedBaselineStatistics
   * @return calculatedBaselineStatistics
   */
  @javax.annotation.Nullable
  public String getCalculatedBaselineStatistics() {
    return calculatedBaselineStatistics;
  }

  public void setCalculatedBaselineStatistics(String calculatedBaselineStatistics) {
    this.calculatedBaselineStatistics = calculatedBaselineStatistics;
  }


  public PipelineExecutionStepMetadataQualityCheck calculatedBaselineConstraints(String calculatedBaselineConstraints) {
    this.calculatedBaselineConstraints = calculatedBaselineConstraints;
    return this;
  }

  /**
   * Get calculatedBaselineConstraints
   * @return calculatedBaselineConstraints
   */
  @javax.annotation.Nullable
  public String getCalculatedBaselineConstraints() {
    return calculatedBaselineConstraints;
  }

  public void setCalculatedBaselineConstraints(String calculatedBaselineConstraints) {
    this.calculatedBaselineConstraints = calculatedBaselineConstraints;
  }


  public PipelineExecutionStepMetadataQualityCheck modelPackageGroupName(String modelPackageGroupName) {
    this.modelPackageGroupName = modelPackageGroupName;
    return this;
  }

  /**
   * Get modelPackageGroupName
   * @return modelPackageGroupName
   */
  @javax.annotation.Nullable
  public String getModelPackageGroupName() {
    return modelPackageGroupName;
  }

  public void setModelPackageGroupName(String modelPackageGroupName) {
    this.modelPackageGroupName = modelPackageGroupName;
  }


  public PipelineExecutionStepMetadataQualityCheck violationReport(String violationReport) {
    this.violationReport = violationReport;
    return this;
  }

  /**
   * Get violationReport
   * @return violationReport
   */
  @javax.annotation.Nullable
  public String getViolationReport() {
    return violationReport;
  }

  public void setViolationReport(String violationReport) {
    this.violationReport = violationReport;
  }


  public PipelineExecutionStepMetadataQualityCheck checkJobArn(String checkJobArn) {
    this.checkJobArn = checkJobArn;
    return this;
  }

  /**
   * Get checkJobArn
   * @return checkJobArn
   */
  @javax.annotation.Nullable
  public String getCheckJobArn() {
    return checkJobArn;
  }

  public void setCheckJobArn(String checkJobArn) {
    this.checkJobArn = checkJobArn;
  }


  public PipelineExecutionStepMetadataQualityCheck skipCheck(Boolean skipCheck) {
    this.skipCheck = skipCheck;
    return this;
  }

  /**
   * Get skipCheck
   * @return skipCheck
   */
  @javax.annotation.Nullable
  public Boolean getSkipCheck() {
    return skipCheck;
  }

  public void setSkipCheck(Boolean skipCheck) {
    this.skipCheck = skipCheck;
  }


  public PipelineExecutionStepMetadataQualityCheck registerNewBaseline(Boolean registerNewBaseline) {
    this.registerNewBaseline = registerNewBaseline;
    return this;
  }

  /**
   * Get registerNewBaseline
   * @return registerNewBaseline
   */
  @javax.annotation.Nullable
  public Boolean getRegisterNewBaseline() {
    return registerNewBaseline;
  }

  public void setRegisterNewBaseline(Boolean registerNewBaseline) {
    this.registerNewBaseline = registerNewBaseline;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineExecutionStepMetadataQualityCheck pipelineExecutionStepMetadataQualityCheck = (PipelineExecutionStepMetadataQualityCheck) o;
    return Objects.equals(this.checkType, pipelineExecutionStepMetadataQualityCheck.checkType) &&
        Objects.equals(this.baselineUsedForDriftCheckStatistics, pipelineExecutionStepMetadataQualityCheck.baselineUsedForDriftCheckStatistics) &&
        Objects.equals(this.baselineUsedForDriftCheckConstraints, pipelineExecutionStepMetadataQualityCheck.baselineUsedForDriftCheckConstraints) &&
        Objects.equals(this.calculatedBaselineStatistics, pipelineExecutionStepMetadataQualityCheck.calculatedBaselineStatistics) &&
        Objects.equals(this.calculatedBaselineConstraints, pipelineExecutionStepMetadataQualityCheck.calculatedBaselineConstraints) &&
        Objects.equals(this.modelPackageGroupName, pipelineExecutionStepMetadataQualityCheck.modelPackageGroupName) &&
        Objects.equals(this.violationReport, pipelineExecutionStepMetadataQualityCheck.violationReport) &&
        Objects.equals(this.checkJobArn, pipelineExecutionStepMetadataQualityCheck.checkJobArn) &&
        Objects.equals(this.skipCheck, pipelineExecutionStepMetadataQualityCheck.skipCheck) &&
        Objects.equals(this.registerNewBaseline, pipelineExecutionStepMetadataQualityCheck.registerNewBaseline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkType, baselineUsedForDriftCheckStatistics, baselineUsedForDriftCheckConstraints, calculatedBaselineStatistics, calculatedBaselineConstraints, modelPackageGroupName, violationReport, checkJobArn, skipCheck, registerNewBaseline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineExecutionStepMetadataQualityCheck {\n");
    sb.append("    checkType: ").append(toIndentedString(checkType)).append("\n");
    sb.append("    baselineUsedForDriftCheckStatistics: ").append(toIndentedString(baselineUsedForDriftCheckStatistics)).append("\n");
    sb.append("    baselineUsedForDriftCheckConstraints: ").append(toIndentedString(baselineUsedForDriftCheckConstraints)).append("\n");
    sb.append("    calculatedBaselineStatistics: ").append(toIndentedString(calculatedBaselineStatistics)).append("\n");
    sb.append("    calculatedBaselineConstraints: ").append(toIndentedString(calculatedBaselineConstraints)).append("\n");
    sb.append("    modelPackageGroupName: ").append(toIndentedString(modelPackageGroupName)).append("\n");
    sb.append("    violationReport: ").append(toIndentedString(violationReport)).append("\n");
    sb.append("    checkJobArn: ").append(toIndentedString(checkJobArn)).append("\n");
    sb.append("    skipCheck: ").append(toIndentedString(skipCheck)).append("\n");
    sb.append("    registerNewBaseline: ").append(toIndentedString(registerNewBaseline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CheckType");
    openapiFields.add("BaselineUsedForDriftCheckStatistics");
    openapiFields.add("BaselineUsedForDriftCheckConstraints");
    openapiFields.add("CalculatedBaselineStatistics");
    openapiFields.add("CalculatedBaselineConstraints");
    openapiFields.add("ModelPackageGroupName");
    openapiFields.add("ViolationReport");
    openapiFields.add("CheckJobArn");
    openapiFields.add("SkipCheck");
    openapiFields.add("RegisterNewBaseline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipelineExecutionStepMetadataQualityCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipelineExecutionStepMetadataQualityCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipelineExecutionStepMetadataQualityCheck is not found in the empty JSON string", PipelineExecutionStepMetadataQualityCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PipelineExecutionStepMetadataQualityCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PipelineExecutionStepMetadataQualityCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CheckType`
      if (jsonObj.get("CheckType") != null && !jsonObj.get("CheckType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CheckType"));
      }
      // validate the optional field `BaselineUsedForDriftCheckStatistics`
      if (jsonObj.get("BaselineUsedForDriftCheckStatistics") != null && !jsonObj.get("BaselineUsedForDriftCheckStatistics").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BaselineUsedForDriftCheckStatistics"));
      }
      // validate the optional field `BaselineUsedForDriftCheckConstraints`
      if (jsonObj.get("BaselineUsedForDriftCheckConstraints") != null && !jsonObj.get("BaselineUsedForDriftCheckConstraints").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BaselineUsedForDriftCheckConstraints"));
      }
      // validate the optional field `CalculatedBaselineStatistics`
      if (jsonObj.get("CalculatedBaselineStatistics") != null && !jsonObj.get("CalculatedBaselineStatistics").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CalculatedBaselineStatistics"));
      }
      // validate the optional field `CalculatedBaselineConstraints`
      if (jsonObj.get("CalculatedBaselineConstraints") != null && !jsonObj.get("CalculatedBaselineConstraints").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CalculatedBaselineConstraints"));
      }
      // validate the optional field `ModelPackageGroupName`
      if (jsonObj.get("ModelPackageGroupName") != null && !jsonObj.get("ModelPackageGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModelPackageGroupName"));
      }
      // validate the optional field `ViolationReport`
      if (jsonObj.get("ViolationReport") != null && !jsonObj.get("ViolationReport").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ViolationReport"));
      }
      // validate the optional field `CheckJobArn`
      if (jsonObj.get("CheckJobArn") != null && !jsonObj.get("CheckJobArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CheckJobArn"));
      }
      // validate the optional field `SkipCheck`
      if (jsonObj.get("SkipCheck") != null && !jsonObj.get("SkipCheck").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SkipCheck"));
      }
      // validate the optional field `RegisterNewBaseline`
      if (jsonObj.get("RegisterNewBaseline") != null && !jsonObj.get("RegisterNewBaseline").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RegisterNewBaseline"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipelineExecutionStepMetadataQualityCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipelineExecutionStepMetadataQualityCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipelineExecutionStepMetadataQualityCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipelineExecutionStepMetadataQualityCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<PipelineExecutionStepMetadataQualityCheck>() {
           @Override
           public void write(JsonWriter out, PipelineExecutionStepMetadataQualityCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PipelineExecutionStepMetadataQualityCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipelineExecutionStepMetadataQualityCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipelineExecutionStepMetadataQualityCheck
   * @throws IOException if the JSON string is invalid with respect to PipelineExecutionStepMetadataQualityCheck
   */
  public static PipelineExecutionStepMetadataQualityCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipelineExecutionStepMetadataQualityCheck.class);
  }

  /**
   * Convert an instance of PipelineExecutionStepMetadataQualityCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

