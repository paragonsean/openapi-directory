/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.&lt;/p&gt; &lt;p&gt;To stop a training job, SageMaker sends the algorithm the &lt;code&gt;SIGTERM&lt;/code&gt; signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. &lt;/p&gt; &lt;p&gt;The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with &lt;code&gt;CreateModel&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoppingCondition {
  public static final String SERIALIZED_NAME_MAX_RUNTIME_IN_SECONDS = "MaxRuntimeInSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_RUNTIME_IN_SECONDS)
  private Integer maxRuntimeInSeconds;

  public static final String SERIALIZED_NAME_MAX_WAIT_TIME_IN_SECONDS = "MaxWaitTimeInSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_WAIT_TIME_IN_SECONDS)
  private Integer maxWaitTimeInSeconds;

  public StoppingCondition() {
  }

  public StoppingCondition maxRuntimeInSeconds(Integer maxRuntimeInSeconds) {
    this.maxRuntimeInSeconds = maxRuntimeInSeconds;
    return this;
  }

  /**
   * Get maxRuntimeInSeconds
   * @return maxRuntimeInSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaxRuntimeInSeconds() {
    return maxRuntimeInSeconds;
  }

  public void setMaxRuntimeInSeconds(Integer maxRuntimeInSeconds) {
    this.maxRuntimeInSeconds = maxRuntimeInSeconds;
  }


  public StoppingCondition maxWaitTimeInSeconds(Integer maxWaitTimeInSeconds) {
    this.maxWaitTimeInSeconds = maxWaitTimeInSeconds;
    return this;
  }

  /**
   * Get maxWaitTimeInSeconds
   * @return maxWaitTimeInSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaxWaitTimeInSeconds() {
    return maxWaitTimeInSeconds;
  }

  public void setMaxWaitTimeInSeconds(Integer maxWaitTimeInSeconds) {
    this.maxWaitTimeInSeconds = maxWaitTimeInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoppingCondition stoppingCondition = (StoppingCondition) o;
    return Objects.equals(this.maxRuntimeInSeconds, stoppingCondition.maxRuntimeInSeconds) &&
        Objects.equals(this.maxWaitTimeInSeconds, stoppingCondition.maxWaitTimeInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxRuntimeInSeconds, maxWaitTimeInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoppingCondition {\n");
    sb.append("    maxRuntimeInSeconds: ").append(toIndentedString(maxRuntimeInSeconds)).append("\n");
    sb.append("    maxWaitTimeInSeconds: ").append(toIndentedString(maxWaitTimeInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxRuntimeInSeconds");
    openapiFields.add("MaxWaitTimeInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoppingCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoppingCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoppingCondition is not found in the empty JSON string", StoppingCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoppingCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoppingCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MaxRuntimeInSeconds`
      if (jsonObj.get("MaxRuntimeInSeconds") != null && !jsonObj.get("MaxRuntimeInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRuntimeInSeconds"));
      }
      // validate the optional field `MaxWaitTimeInSeconds`
      if (jsonObj.get("MaxWaitTimeInSeconds") != null && !jsonObj.get("MaxWaitTimeInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxWaitTimeInSeconds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoppingCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoppingCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoppingCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoppingCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<StoppingCondition>() {
           @Override
           public void write(JsonWriter out, StoppingCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoppingCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoppingCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoppingCondition
   * @throws IOException if the JSON string is invalid with respect to StoppingCondition
   */
  public static StoppingCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoppingCondition.class);
  }

  /**
   * Convert an instance of StoppingCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

