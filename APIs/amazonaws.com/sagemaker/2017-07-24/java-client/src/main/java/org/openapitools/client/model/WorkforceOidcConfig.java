/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkforceOidcConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkforceOidcConfig {
  public static final String SERIALIZED_NAME_CLIENT_ID = "ClientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_ISSUER = "Issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_AUTHORIZATION_ENDPOINT = "AuthorizationEndpoint";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ENDPOINT)
  private String authorizationEndpoint;

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT = "TokenEndpoint";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT)
  private String tokenEndpoint;

  public static final String SERIALIZED_NAME_USER_INFO_ENDPOINT = "UserInfoEndpoint";
  @SerializedName(SERIALIZED_NAME_USER_INFO_ENDPOINT)
  private String userInfoEndpoint;

  public static final String SERIALIZED_NAME_LOGOUT_ENDPOINT = "LogoutEndpoint";
  @SerializedName(SERIALIZED_NAME_LOGOUT_ENDPOINT)
  private String logoutEndpoint;

  public static final String SERIALIZED_NAME_JWKS_URI = "JwksUri";
  @SerializedName(SERIALIZED_NAME_JWKS_URI)
  private String jwksUri;

  public WorkforceOidcConfig() {
  }

  public WorkforceOidcConfig clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public WorkforceOidcConfig issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public WorkforceOidcConfig authorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
    return this;
  }

  /**
   * Get authorizationEndpoint
   * @return authorizationEndpoint
   */
  @javax.annotation.Nullable
  public String getAuthorizationEndpoint() {
    return authorizationEndpoint;
  }

  public void setAuthorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
  }


  public WorkforceOidcConfig tokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
    return this;
  }

  /**
   * Get tokenEndpoint
   * @return tokenEndpoint
   */
  @javax.annotation.Nullable
  public String getTokenEndpoint() {
    return tokenEndpoint;
  }

  public void setTokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
  }


  public WorkforceOidcConfig userInfoEndpoint(String userInfoEndpoint) {
    this.userInfoEndpoint = userInfoEndpoint;
    return this;
  }

  /**
   * Get userInfoEndpoint
   * @return userInfoEndpoint
   */
  @javax.annotation.Nullable
  public String getUserInfoEndpoint() {
    return userInfoEndpoint;
  }

  public void setUserInfoEndpoint(String userInfoEndpoint) {
    this.userInfoEndpoint = userInfoEndpoint;
  }


  public WorkforceOidcConfig logoutEndpoint(String logoutEndpoint) {
    this.logoutEndpoint = logoutEndpoint;
    return this;
  }

  /**
   * Get logoutEndpoint
   * @return logoutEndpoint
   */
  @javax.annotation.Nullable
  public String getLogoutEndpoint() {
    return logoutEndpoint;
  }

  public void setLogoutEndpoint(String logoutEndpoint) {
    this.logoutEndpoint = logoutEndpoint;
  }


  public WorkforceOidcConfig jwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
    return this;
  }

  /**
   * Get jwksUri
   * @return jwksUri
   */
  @javax.annotation.Nullable
  public String getJwksUri() {
    return jwksUri;
  }

  public void setJwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkforceOidcConfig workforceOidcConfig = (WorkforceOidcConfig) o;
    return Objects.equals(this.clientId, workforceOidcConfig.clientId) &&
        Objects.equals(this.issuer, workforceOidcConfig.issuer) &&
        Objects.equals(this.authorizationEndpoint, workforceOidcConfig.authorizationEndpoint) &&
        Objects.equals(this.tokenEndpoint, workforceOidcConfig.tokenEndpoint) &&
        Objects.equals(this.userInfoEndpoint, workforceOidcConfig.userInfoEndpoint) &&
        Objects.equals(this.logoutEndpoint, workforceOidcConfig.logoutEndpoint) &&
        Objects.equals(this.jwksUri, workforceOidcConfig.jwksUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, issuer, authorizationEndpoint, tokenEndpoint, userInfoEndpoint, logoutEndpoint, jwksUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkforceOidcConfig {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
    sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
    sb.append("    userInfoEndpoint: ").append(toIndentedString(userInfoEndpoint)).append("\n");
    sb.append("    logoutEndpoint: ").append(toIndentedString(logoutEndpoint)).append("\n");
    sb.append("    jwksUri: ").append(toIndentedString(jwksUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientId");
    openapiFields.add("Issuer");
    openapiFields.add("AuthorizationEndpoint");
    openapiFields.add("TokenEndpoint");
    openapiFields.add("UserInfoEndpoint");
    openapiFields.add("LogoutEndpoint");
    openapiFields.add("JwksUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkforceOidcConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkforceOidcConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkforceOidcConfig is not found in the empty JSON string", WorkforceOidcConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkforceOidcConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkforceOidcConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClientId`
      if (jsonObj.get("ClientId") != null && !jsonObj.get("ClientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientId"));
      }
      // validate the optional field `Issuer`
      if (jsonObj.get("Issuer") != null && !jsonObj.get("Issuer").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Issuer"));
      }
      // validate the optional field `AuthorizationEndpoint`
      if (jsonObj.get("AuthorizationEndpoint") != null && !jsonObj.get("AuthorizationEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuthorizationEndpoint"));
      }
      // validate the optional field `TokenEndpoint`
      if (jsonObj.get("TokenEndpoint") != null && !jsonObj.get("TokenEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TokenEndpoint"));
      }
      // validate the optional field `UserInfoEndpoint`
      if (jsonObj.get("UserInfoEndpoint") != null && !jsonObj.get("UserInfoEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserInfoEndpoint"));
      }
      // validate the optional field `LogoutEndpoint`
      if (jsonObj.get("LogoutEndpoint") != null && !jsonObj.get("LogoutEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogoutEndpoint"));
      }
      // validate the optional field `JwksUri`
      if (jsonObj.get("JwksUri") != null && !jsonObj.get("JwksUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JwksUri"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkforceOidcConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkforceOidcConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkforceOidcConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkforceOidcConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkforceOidcConfig>() {
           @Override
           public void write(JsonWriter out, WorkforceOidcConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkforceOidcConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkforceOidcConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkforceOidcConfig
   * @throws IOException if the JSON string is invalid with respect to WorkforceOidcConfig
   */
  public static WorkforceOidcConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkforceOidcConfig.class);
  }

  /**
   * Convert an instance of WorkforceOidcConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

