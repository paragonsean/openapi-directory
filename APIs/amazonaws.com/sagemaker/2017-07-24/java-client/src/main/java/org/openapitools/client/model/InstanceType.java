/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets InstanceType
 */
@JsonAdapter(InstanceType.Adapter.class)
public enum InstanceType {
  
  T2_MEDIUM("ml.t2.medium"),
  
  T2_LARGE("ml.t2.large"),
  
  T2_XLARGE("ml.t2.xlarge"),
  
  T2_2XLARGE("ml.t2.2xlarge"),
  
  T3_MEDIUM("ml.t3.medium"),
  
  T3_LARGE("ml.t3.large"),
  
  T3_XLARGE("ml.t3.xlarge"),
  
  T3_2XLARGE("ml.t3.2xlarge"),
  
  M4_XLARGE("ml.m4.xlarge"),
  
  M4_2XLARGE("ml.m4.2xlarge"),
  
  M4_4XLARGE("ml.m4.4xlarge"),
  
  M4_10XLARGE("ml.m4.10xlarge"),
  
  M4_16XLARGE("ml.m4.16xlarge"),
  
  M5_XLARGE("ml.m5.xlarge"),
  
  M5_2XLARGE("ml.m5.2xlarge"),
  
  M5_4XLARGE("ml.m5.4xlarge"),
  
  M5_12XLARGE("ml.m5.12xlarge"),
  
  M5_24XLARGE("ml.m5.24xlarge"),
  
  M5D_LARGE("ml.m5d.large"),
  
  M5D_XLARGE("ml.m5d.xlarge"),
  
  M5D_2XLARGE("ml.m5d.2xlarge"),
  
  M5D_4XLARGE("ml.m5d.4xlarge"),
  
  M5D_8XLARGE("ml.m5d.8xlarge"),
  
  M5D_12XLARGE("ml.m5d.12xlarge"),
  
  M5D_16XLARGE("ml.m5d.16xlarge"),
  
  M5D_24XLARGE("ml.m5d.24xlarge"),
  
  C4_XLARGE("ml.c4.xlarge"),
  
  C4_2XLARGE("ml.c4.2xlarge"),
  
  C4_4XLARGE("ml.c4.4xlarge"),
  
  C4_8XLARGE("ml.c4.8xlarge"),
  
  C5_XLARGE("ml.c5.xlarge"),
  
  C5_2XLARGE("ml.c5.2xlarge"),
  
  C5_4XLARGE("ml.c5.4xlarge"),
  
  C5_9XLARGE("ml.c5.9xlarge"),
  
  C5_18XLARGE("ml.c5.18xlarge"),
  
  C5D_XLARGE("ml.c5d.xlarge"),
  
  C5D_2XLARGE("ml.c5d.2xlarge"),
  
  C5D_4XLARGE("ml.c5d.4xlarge"),
  
  C5D_9XLARGE("ml.c5d.9xlarge"),
  
  C5D_18XLARGE("ml.c5d.18xlarge"),
  
  P2_XLARGE("ml.p2.xlarge"),
  
  P2_8XLARGE("ml.p2.8xlarge"),
  
  P2_16XLARGE("ml.p2.16xlarge"),
  
  P3_2XLARGE("ml.p3.2xlarge"),
  
  P3_8XLARGE("ml.p3.8xlarge"),
  
  P3_16XLARGE("ml.p3.16xlarge"),
  
  P3DN_24XLARGE("ml.p3dn.24xlarge"),
  
  G4DN_XLARGE("ml.g4dn.xlarge"),
  
  G4DN_2XLARGE("ml.g4dn.2xlarge"),
  
  G4DN_4XLARGE("ml.g4dn.4xlarge"),
  
  G4DN_8XLARGE("ml.g4dn.8xlarge"),
  
  G4DN_12XLARGE("ml.g4dn.12xlarge"),
  
  G4DN_16XLARGE("ml.g4dn.16xlarge"),
  
  R5_LARGE("ml.r5.large"),
  
  R5_XLARGE("ml.r5.xlarge"),
  
  R5_2XLARGE("ml.r5.2xlarge"),
  
  R5_4XLARGE("ml.r5.4xlarge"),
  
  R5_8XLARGE("ml.r5.8xlarge"),
  
  R5_12XLARGE("ml.r5.12xlarge"),
  
  R5_16XLARGE("ml.r5.16xlarge"),
  
  R5_24XLARGE("ml.r5.24xlarge"),
  
  G5_XLARGE("ml.g5.xlarge"),
  
  G5_2XLARGE("ml.g5.2xlarge"),
  
  G5_4XLARGE("ml.g5.4xlarge"),
  
  G5_8XLARGE("ml.g5.8xlarge"),
  
  G5_16XLARGE("ml.g5.16xlarge"),
  
  G5_12XLARGE("ml.g5.12xlarge"),
  
  G5_24XLARGE("ml.g5.24xlarge"),
  
  G5_48XLARGE("ml.g5.48xlarge"),
  
  INF1_XLARGE("ml.inf1.xlarge"),
  
  INF1_2XLARGE("ml.inf1.2xlarge"),
  
  INF1_6XLARGE("ml.inf1.6xlarge"),
  
  INF1_24XLARGE("ml.inf1.24xlarge"),
  
  P4D_24XLARGE("ml.p4d.24xlarge"),
  
  P4DE_24XLARGE("ml.p4de.24xlarge");

  private String value;

  InstanceType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static InstanceType fromValue(String value) {
    for (InstanceType b : InstanceType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<InstanceType> {
    @Override
    public void write(final JsonWriter jsonWriter, final InstanceType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public InstanceType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return InstanceType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    InstanceType.fromValue(value);
  }
}

