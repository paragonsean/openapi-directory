/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html\&quot;&gt;ProductionVariant&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you used the &lt;code&gt;registry/repository[:tag]&lt;/code&gt; form to specify the image path of the primary container when you created the model hosted in this &lt;code&gt;ProductionVariant&lt;/code&gt;, the path resolves to a path of the form &lt;code&gt;registry/repository[@digest]&lt;/code&gt;. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html\&quot;&gt;Pulling an Image&lt;/a&gt; in the &lt;i&gt;Amazon ECR User Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedImage {
  public static final String SERIALIZED_NAME_SPECIFIED_IMAGE = "SpecifiedImage";
  @SerializedName(SERIALIZED_NAME_SPECIFIED_IMAGE)
  private String specifiedImage;

  public static final String SERIALIZED_NAME_RESOLVED_IMAGE = "ResolvedImage";
  @SerializedName(SERIALIZED_NAME_RESOLVED_IMAGE)
  private String resolvedImage;

  public static final String SERIALIZED_NAME_RESOLUTION_TIME = "ResolutionTime";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_TIME)
  private OffsetDateTime resolutionTime;

  public DeployedImage() {
  }

  public DeployedImage specifiedImage(String specifiedImage) {
    this.specifiedImage = specifiedImage;
    return this;
  }

  /**
   * Get specifiedImage
   * @return specifiedImage
   */
  @javax.annotation.Nullable
  public String getSpecifiedImage() {
    return specifiedImage;
  }

  public void setSpecifiedImage(String specifiedImage) {
    this.specifiedImage = specifiedImage;
  }


  public DeployedImage resolvedImage(String resolvedImage) {
    this.resolvedImage = resolvedImage;
    return this;
  }

  /**
   * Get resolvedImage
   * @return resolvedImage
   */
  @javax.annotation.Nullable
  public String getResolvedImage() {
    return resolvedImage;
  }

  public void setResolvedImage(String resolvedImage) {
    this.resolvedImage = resolvedImage;
  }


  public DeployedImage resolutionTime(OffsetDateTime resolutionTime) {
    this.resolutionTime = resolutionTime;
    return this;
  }

  /**
   * Get resolutionTime
   * @return resolutionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResolutionTime() {
    return resolutionTime;
  }

  public void setResolutionTime(OffsetDateTime resolutionTime) {
    this.resolutionTime = resolutionTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedImage deployedImage = (DeployedImage) o;
    return Objects.equals(this.specifiedImage, deployedImage.specifiedImage) &&
        Objects.equals(this.resolvedImage, deployedImage.resolvedImage) &&
        Objects.equals(this.resolutionTime, deployedImage.resolutionTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(specifiedImage, resolvedImage, resolutionTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedImage {\n");
    sb.append("    specifiedImage: ").append(toIndentedString(specifiedImage)).append("\n");
    sb.append("    resolvedImage: ").append(toIndentedString(resolvedImage)).append("\n");
    sb.append("    resolutionTime: ").append(toIndentedString(resolutionTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SpecifiedImage");
    openapiFields.add("ResolvedImage");
    openapiFields.add("ResolutionTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedImage is not found in the empty JSON string", DeployedImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SpecifiedImage`
      if (jsonObj.get("SpecifiedImage") != null && !jsonObj.get("SpecifiedImage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SpecifiedImage"));
      }
      // validate the optional field `ResolvedImage`
      if (jsonObj.get("ResolvedImage") != null && !jsonObj.get("ResolvedImage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResolvedImage"));
      }
      // validate the optional field `ResolutionTime`
      if (jsonObj.get("ResolutionTime") != null && !jsonObj.get("ResolutionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ResolutionTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedImage.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedImage>() {
           @Override
           public void write(JsonWriter out, DeployedImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedImage
   * @throws IOException if the JSON string is invalid with respect to DeployedImage
   */
  public static DeployedImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedImage.class);
  }

  /**
   * Convert an instance of DeployedImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

