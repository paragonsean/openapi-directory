/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FeatureType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchRecordFeatureMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchRecordFeatureMetadata {
  public static final String SERIALIZED_NAME_FEATURE_GROUP_ARN = "FeatureGroupArn";
  @SerializedName(SERIALIZED_NAME_FEATURE_GROUP_ARN)
  private String featureGroupArn;

  public static final String SERIALIZED_NAME_FEATURE_GROUP_NAME = "FeatureGroupName";
  @SerializedName(SERIALIZED_NAME_FEATURE_GROUP_NAME)
  private String featureGroupName;

  public static final String SERIALIZED_NAME_FEATURE_NAME = "FeatureName";
  @SerializedName(SERIALIZED_NAME_FEATURE_NAME)
  private String featureName;

  public static final String SERIALIZED_NAME_FEATURE_TYPE = "FeatureType";
  @SerializedName(SERIALIZED_NAME_FEATURE_TYPE)
  private FeatureType featureType;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List parameters;

  public SearchRecordFeatureMetadata() {
  }

  public SearchRecordFeatureMetadata featureGroupArn(String featureGroupArn) {
    this.featureGroupArn = featureGroupArn;
    return this;
  }

  /**
   * Get featureGroupArn
   * @return featureGroupArn
   */
  @javax.annotation.Nullable
  public String getFeatureGroupArn() {
    return featureGroupArn;
  }

  public void setFeatureGroupArn(String featureGroupArn) {
    this.featureGroupArn = featureGroupArn;
  }


  public SearchRecordFeatureMetadata featureGroupName(String featureGroupName) {
    this.featureGroupName = featureGroupName;
    return this;
  }

  /**
   * Get featureGroupName
   * @return featureGroupName
   */
  @javax.annotation.Nullable
  public String getFeatureGroupName() {
    return featureGroupName;
  }

  public void setFeatureGroupName(String featureGroupName) {
    this.featureGroupName = featureGroupName;
  }


  public SearchRecordFeatureMetadata featureName(String featureName) {
    this.featureName = featureName;
    return this;
  }

  /**
   * Get featureName
   * @return featureName
   */
  @javax.annotation.Nullable
  public String getFeatureName() {
    return featureName;
  }

  public void setFeatureName(String featureName) {
    this.featureName = featureName;
  }


  public SearchRecordFeatureMetadata featureType(FeatureType featureType) {
    this.featureType = featureType;
    return this;
  }

  /**
   * Get featureType
   * @return featureType
   */
  @javax.annotation.Nullable
  public FeatureType getFeatureType() {
    return featureType;
  }

  public void setFeatureType(FeatureType featureType) {
    this.featureType = featureType;
  }


  public SearchRecordFeatureMetadata creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public SearchRecordFeatureMetadata lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public SearchRecordFeatureMetadata description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SearchRecordFeatureMetadata parameters(List parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List getParameters() {
    return parameters;
  }

  public void setParameters(List parameters) {
    this.parameters = parameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRecordFeatureMetadata searchRecordFeatureMetadata = (SearchRecordFeatureMetadata) o;
    return Objects.equals(this.featureGroupArn, searchRecordFeatureMetadata.featureGroupArn) &&
        Objects.equals(this.featureGroupName, searchRecordFeatureMetadata.featureGroupName) &&
        Objects.equals(this.featureName, searchRecordFeatureMetadata.featureName) &&
        Objects.equals(this.featureType, searchRecordFeatureMetadata.featureType) &&
        Objects.equals(this.creationTime, searchRecordFeatureMetadata.creationTime) &&
        Objects.equals(this.lastModifiedTime, searchRecordFeatureMetadata.lastModifiedTime) &&
        Objects.equals(this.description, searchRecordFeatureMetadata.description) &&
        Objects.equals(this.parameters, searchRecordFeatureMetadata.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(featureGroupArn, featureGroupName, featureName, featureType, creationTime, lastModifiedTime, description, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRecordFeatureMetadata {\n");
    sb.append("    featureGroupArn: ").append(toIndentedString(featureGroupArn)).append("\n");
    sb.append("    featureGroupName: ").append(toIndentedString(featureGroupName)).append("\n");
    sb.append("    featureName: ").append(toIndentedString(featureName)).append("\n");
    sb.append("    featureType: ").append(toIndentedString(featureType)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeatureGroupArn");
    openapiFields.add("FeatureGroupName");
    openapiFields.add("FeatureName");
    openapiFields.add("FeatureType");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("Description");
    openapiFields.add("Parameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchRecordFeatureMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchRecordFeatureMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchRecordFeatureMetadata is not found in the empty JSON string", SearchRecordFeatureMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchRecordFeatureMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchRecordFeatureMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FeatureGroupArn`
      if (jsonObj.get("FeatureGroupArn") != null && !jsonObj.get("FeatureGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeatureGroupArn"));
      }
      // validate the optional field `FeatureGroupName`
      if (jsonObj.get("FeatureGroupName") != null && !jsonObj.get("FeatureGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeatureGroupName"));
      }
      // validate the optional field `FeatureName`
      if (jsonObj.get("FeatureName") != null && !jsonObj.get("FeatureName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeatureName"));
      }
      // validate the optional field `FeatureType`
      if (jsonObj.get("FeatureType") != null && !jsonObj.get("FeatureType").isJsonNull()) {
        FeatureType.validateJsonElement(jsonObj.get("FeatureType"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Parameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchRecordFeatureMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchRecordFeatureMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchRecordFeatureMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchRecordFeatureMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchRecordFeatureMetadata>() {
           @Override
           public void write(JsonWriter out, SearchRecordFeatureMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchRecordFeatureMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchRecordFeatureMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchRecordFeatureMetadata
   * @throws IOException if the JSON string is invalid with respect to SearchRecordFeatureMetadata
   */
  public static SearchRecordFeatureMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchRecordFeatureMetadata.class);
  }

  /**
   * Convert an instance of SearchRecordFeatureMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

